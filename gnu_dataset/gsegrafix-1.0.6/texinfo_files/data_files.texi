@node Data files
@unnumbered 4 Data files
@section 4.1 2d points plots
@subsection 4.1.1 Rectangular coordinates
The data file for a two-dimensional points plot contains columns of numbers. The @code{file_format} parameters specify which columns are used as x and y coordinates of plotted points. The column used for x coordinates must precede the column used for y coordinates, but the two columns do not have to be next to each other. All columns must be the same length. For @code{"semilogx"}, @code{"semilogy"}, and @code{"loglog"} axes the logarithms of the absolute values of the data are plotted. More than one curve or line can be plotted using one pair of columns of numbers by inserting asterisks (*) in each of the two columns where one curve ends and the next one begins. An example is:

@example
0.00  0.00
0.20  0.04
0.40  0.16
0.60  0.36
   *     *
1.00  1.00
1.20  1.44
1.40  1.96
1.60  2.56
1.80  3.24
   *     *
2.40  5.76
2.60  6.76
2.80  7.84
@end example

The data above would result in three curves being plotted, the first with 4 points, the second with 5 points, and the third with 3 points. If a data file contains more than two columns of numbers and if columns containing asterisks are not being plotted, the format for each of these columns should be @code{"%*s"} so that both numbers and asterisks will be recognized. An example is:

@example
0.00  0.00  0.000  0.000
0.20  0.04  0.100  0.001
0.40  0.16  0.200  0.008
0.60  0.36  0.300  0.027
   *     *  0.400  0.064
1.00  1.00  0.500  0.125
1.20  1.44  0.600  0.216
1.40  1.96  0.700  0.343
1.60  2.56  0.800  0.512
1.80  3.24  0.900  0.729
   *     *  1.000  1.000
2.40  5.76  1.100  1.331
2.60  6.76  1.200  1.728
2.80  7.84  1.300  2.197
@end example

The format for plotting column 4 as a function of column 3 would be @code{"%*s %*s %lf %lf"}. See Examples 1, 2, and 3 below.

@subsection 4.1.2 Polar coordinates
The data file for a polar plot contains columns of numbers. The @code{file_format} parameters specify which columns are used as theta and r coordinates of plotted points. The column used as theta coordinates must precede the column used for r coordinates, but the two columns do not have to be next to each other. All columns must be the same length. The units of theta coordinates must be in radians. As is the case for two-dimensional plots with rectangular coordinates, more than one curve or line can be plotted using one pair of columns of numbers by inserting asterisks (*) in each of the two columns where one curve ends and the next one begins. See Example 5 below.

@section 4.2 Histograms
The data file for a histogram need contain only one column of numbers. If the file contains more than one column, the @code{file_format} parameters specify which column to use. All columns must be the same length. See Example 4 below.

@section 4.3 3d points plots
The data file for a three-dimensional points plot contains columns of numbers. The @code{file_format} parameters specify which columns are used as x, y, and z coordinates of plotted points. The column used as x coordinates must precede the column used as y coordinates, and the column used as y coordinates must precede the column used as z coordinates. However, the three columns do not have to be next to each other. All columns must be the same length. More than one curve or line can be plotted using three columns of numbers by inserting asterisks (*) in each of the three columns where one curve ends and the next one begins. See Example 6 below.

@section 4.4 Contour, color, and mesh plots
Data files for three-dimensional @code{"contour"}, @code{"color"}, and @code{"mesh"} plots and two-dimensional @code{"contour"} and @code{"color"} plots are the same. The first line contains two numbers, the number of x coordinates, nx, and the number of y coordinates, ny. The second line contains the nx values of the x coordinates. The third line contains the ny values of the y coordinates. The remainding lines contain the values of the z coordinates for pairs of x and y coordinates. The z-coordinate data is arranged in a matrix so that the row number corresponds to the index of the x coordinate and the column number corresponds to the index of the y coordinate. The complete data file looks like the following:

@example
     nx      ny                                 
   x(1)    x(2)    x(3) ...    x(i) ...    x(nx)
   y(1)    y(2)    y(3) ...    y(j) ...    y(ny)
 z(1,1)  z(1,2)  z(1,3) ...  z(1,j) ...  z(1,ny)
 z(2,1)  z(2,2)  z(2,3) ...  z(2,j) ...  z(2,ny)
 z(3,1)  z(3,2)  z(3,3) ...  z(3,j) ...  z(3,ny)
                        ...                     
 z(i,1)  z(i,2)  z(i,3) ...  z(i,j) ...  z(i,ny)
                        ...                     
z(nx,1) z(nx,2) z(nx,3) ... z(nx,j) ... z(nx,ny)
@end example

Data files such as this can be written by calling an Octave function such as @uref{./help_files/data_save.txt, data_save} or a C function such as @uref{./help_files/data_C_save.txt, data_C_save}. See Examples 7, 8, 9, 10, and 11 below.

