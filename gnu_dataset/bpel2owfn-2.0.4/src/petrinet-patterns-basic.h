/* translation of file "petrinet-patterns-basic.k" */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.11 (C) 1998-2007 Humboldt-University of Berlin $
 */
#ifndef KC_FUNCTIONS_petrinet_patterns_basic_HEADER
#define KC_FUNCTIONS_petrinet_patterns_basic_HEADER
#include "ast-system-k.h"    // in case a user forgets

namespace kc { }
using namespace kc;
/* included stuff */
#line 69 "petrinet-patterns-basic.k"
/*!
 * \file petrinet-patterns-basic.h
 * \brief Petri net patterns for BPEL's basic activities
 *
 * See \ref petrinet-patterns-basic.cc for more information.
 */


#line  22 "petrinet-patterns-basic.h"
/* end included stuff */


namespace kc {
void PEmpty (impl_tEmpty *abstract_phylum, uview current_view);
void POpaqueActivity (impl_tOpaqueActivity *abstract_phylum, uview current_view);
void PAsynchronousInvoke (impl_tInvoke *abstract_phylum, uview current_view);
void PSynchronousInvoke (impl_tInvoke *abstract_phylum, uview current_view);
void PReceive (impl_tReceive *abstract_phylum, uview current_view);
void PReply (impl_tReply *abstract_phylum, uview current_view);
void PAssign (impl_tAssign *abstract_phylum, uview current_view);
void PValidate (impl_tValidate *abstract_phylum, uview current_view);
void PWait (impl_tWait *abstract_phylum, uview current_view);
void PThrow (impl_tThrow *abstract_phylum, uview current_view);
void PRethrow (impl_tRethrow *abstract_phylum, uview current_view);
void PExit (impl_tExit *abstract_phylum, uview current_view);
void PCompensate (impl_tCompensate *abstract_phylum, uview current_view);
void PCompensateScope (impl_tCompensate *abstract_phylum, uview current_view);

} // namespace kc

#endif // !  KC_FUNCTIONS_petrinet_patterns_basic_HEADER

