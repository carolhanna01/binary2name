/* translation of file "petrinet-patterns-shortcuts.k" */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.11 (C) 1998-2007 Humboldt-University of Berlin $
 */
#ifndef KC_FUNCTIONS_petrinet_patterns_shortcuts_HEADER
#define KC_FUNCTIONS_petrinet_patterns_shortcuts_HEADER
#include "ast-system-k.h"    // in case a user forgets

namespace kc { }
using namespace kc;
/* included stuff */
#line 55 "petrinet-patterns-shortcuts.k"
/*!
 * \file petrinet-patterns-shortcuts.h
 * \brief Petri net patterns for shortcuts
 *
 * See \ref petrinet-patterns-shortcuts.cc for more information.
 */

#line  21 "petrinet-patterns-shortcuts.h"
#line 65 "petrinet-patterns-shortcuts.k"
#include "petrinet.h"
using namespace PNapi;

#line  26 "petrinet-patterns-shortcuts.h"
/* end included stuff */


namespace kc {
Transition *throwFault (Place *p1, Place *p2, string p1name, string prefix, integer id, int negativeControlFlow, bool preventFurtherFaults= true);
Transition *stop (Place *p, string p_name, string prefix);
Transition *stop_loop (Place *p, string p_name, string prefix);
Transition *stop_activity (Place *p, string p_name, string prefix);
void dpeLinks (Transition *t, int id, int parent_id= 0);
void looppattern (string condition, int maxloops, string prefix, int id, Place *enterPlace, Place *loopPlace, Place *exitPlace);
void receivingTransition (string name, Place *prePlace, Place *postPlace, Place *channel, Place *faultPlace, string prefix, integer id, int negativeControlFlow, bool preventFurtherFaults= true );
void sendingTransition (string name, Place *prePlace, Place *postPlace, Place *channel, Place *faultPlace, string prefix, integer id, int negativeControlFlow, bool preventFurtherFaults= true );
void P_transitionCondition (string prefix, tSource_list source_links);
void P_joinCondition (string prefix, tTarget_list target_links, joinCondition jc);

} // namespace kc

#endif // !  KC_FUNCTIONS_petrinet_patterns_shortcuts_HEADER

