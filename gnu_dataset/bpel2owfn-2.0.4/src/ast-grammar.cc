/* translation of file "ast-grammar.k" */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.11 (C) 1998-2007 Humboldt-University of Berlin $
 */
#define KC_FUNCTIONS_ast_grammar

#include <stdlib.h>
#include "ast-system-k.h"
#include "ast-grammar.h"
namespace kc { }
using namespace kc;
/* included stuff */
#line 27 "ast-grammar.k"
/*!
 * \file    ast-grammar.cc
 *
 * \brief   Abstract grammar of BPEL
 *
 *          This grammar describes the abstract syntax tree.
 *
 * \author  Niels Lohmann <nlohmann@informatik.hu-berlin.de>,
 *          Christian Gierds <gierds@informatik.hu-berlin.de>,
 *          last changes of: \$Author: nielslohmann $ 
 * 
 * \since   2005-10-03
 *
 * \date    \$Date: 2007/06/28 07:38:15 $
 * 
 * \note    This file is part of the tool GNU BPEL2oWFN and was created during
 *          the project "Tools4BPEL" at the Humboldt-Universität zu Berlin. See
 *          http://www.informatik.hu-berlin.de/top/tools4bpel for details.
 *
 * \note    This file was created using Kimwitu++ reading file ast-grammar.k.
 *          See http://site.informatik.hu-berlin.de/kimwitu++ for details.
 *
 * \version \$Revision: 1.176 $
 */

#line  40 "ast-grammar.cc"
#line 55 "ast-grammar.k"
/*!
 * \file ast-grammar.h
 * \brief Abstract grammar of BPEL (interface)
 *
 * See \ref ast-grammar.cc for more information.
 */

#include "ast-details.h"
#include "ast-config.h"
#include "globals.h"
#include "frontend-parser.h"

#line  54 "ast-grammar.cc"
/* end included stuff */


namespace kc {

#ifndef KC_TRACE_PROVIDED
#define KC_TRACE_PROVIDED(COND,FILE,LINE,NODE) COND
#endif

impl_activity_activityAssign::impl_activity_activityAssign(tAssign _tAssign_1)
#line 563 "ast-grammar.k"
{tAssign_1 = _tAssign_1;
    id = tAssign_1->id; 
#line 563 "ast-grammar.k"
}
#line  70 "ast-grammar.cc"

impl_activity_activityCompensate::impl_activity_activityCompensate(tCompensate _tCompensate_1)
#line 564 "ast-grammar.k"
{tCompensate_1 = _tCompensate_1;
    id = tCompensate_1->id; 
#line 564 "ast-grammar.k"
}
#line  78 "ast-grammar.cc"

impl_activity_activityEmpty::impl_activity_activityEmpty(tEmpty _tEmpty_1)
#line 565 "ast-grammar.k"
{tEmpty_1 = _tEmpty_1;
    id = tEmpty_1->id; 
#line 565 "ast-grammar.k"
}
#line  86 "ast-grammar.cc"

impl_activity_activityExit::impl_activity_activityExit(tExit _tExit_1)
#line 566 "ast-grammar.k"
{tExit_1 = _tExit_1;
    id = tExit_1->id; 
#line 566 "ast-grammar.k"
}
#line  94 "ast-grammar.cc"

impl_activity_activityFlow::impl_activity_activityFlow(tFlow _tFlow_1)
#line 567 "ast-grammar.k"
{tFlow_1 = _tFlow_1;
    id = tFlow_1->id; 
#line 567 "ast-grammar.k"
}
#line  102 "ast-grammar.cc"

impl_activity_activityForEach::impl_activity_activityForEach(tForEach _tForEach_1)
#line 568 "ast-grammar.k"
{tForEach_1 = _tForEach_1;
    id = tForEach_1->id; 
#line 568 "ast-grammar.k"
}
#line  110 "ast-grammar.cc"

impl_activity_activityIf::impl_activity_activityIf(tIf _tIf_1)
#line 569 "ast-grammar.k"
{tIf_1 = _tIf_1;
    id = tIf_1->id; 
#line 569 "ast-grammar.k"
}
#line  118 "ast-grammar.cc"

impl_activity_activityInvoke::impl_activity_activityInvoke(tInvoke _tInvoke_1)
#line 570 "ast-grammar.k"
{tInvoke_1 = _tInvoke_1;
    id = tInvoke_1->id; 
#line 570 "ast-grammar.k"
}
#line  126 "ast-grammar.cc"

impl_activity_activityOpaqueActivity::impl_activity_activityOpaqueActivity(tOpaqueActivity _tOpaqueActivity_1)
#line 571 "ast-grammar.k"
{tOpaqueActivity_1 = _tOpaqueActivity_1;
    id = tOpaqueActivity_1->id; 
#line 571 "ast-grammar.k"
}
#line  134 "ast-grammar.cc"

impl_activity_activityPick::impl_activity_activityPick(tPick _tPick_1)
#line 572 "ast-grammar.k"
{tPick_1 = _tPick_1;
    id = tPick_1->id; 
#line 572 "ast-grammar.k"
}
#line  142 "ast-grammar.cc"

impl_activity_activityReceive::impl_activity_activityReceive(tReceive _tReceive_1)
#line 573 "ast-grammar.k"
{tReceive_1 = _tReceive_1;
    id = tReceive_1->id; 
#line 573 "ast-grammar.k"
}
#line  150 "ast-grammar.cc"

impl_activity_activityRepeatUntil::impl_activity_activityRepeatUntil(tRepeatUntil _tRepeatUntil_1)
#line 574 "ast-grammar.k"
{tRepeatUntil_1 = _tRepeatUntil_1;
    id = tRepeatUntil_1->id; 
#line 574 "ast-grammar.k"
}
#line  158 "ast-grammar.cc"

impl_activity_activityReply::impl_activity_activityReply(tReply _tReply_1)
#line 575 "ast-grammar.k"
{tReply_1 = _tReply_1;
    id = tReply_1->id; 
#line 575 "ast-grammar.k"
}
#line  166 "ast-grammar.cc"

impl_activity_activityRethrow::impl_activity_activityRethrow(tRethrow _tRethrow_1)
#line 576 "ast-grammar.k"
{tRethrow_1 = _tRethrow_1;
    id = tRethrow_1->id; 
#line 576 "ast-grammar.k"
}
#line  174 "ast-grammar.cc"

impl_activity_activityScope::impl_activity_activityScope(tScope _tScope_1)
#line 577 "ast-grammar.k"
{tScope_1 = _tScope_1;
    id = tScope_1->id; 
#line 577 "ast-grammar.k"
}
#line  182 "ast-grammar.cc"

impl_activity_activitySequence::impl_activity_activitySequence(tSequence _tSequence_1)
#line 578 "ast-grammar.k"
{tSequence_1 = _tSequence_1;
    id = tSequence_1->id; 
#line 578 "ast-grammar.k"
}
#line  190 "ast-grammar.cc"

impl_activity_activityThrow::impl_activity_activityThrow(tThrow _tThrow_1)
#line 579 "ast-grammar.k"
{tThrow_1 = _tThrow_1;
    id = tThrow_1->id; 
#line 579 "ast-grammar.k"
}
#line  198 "ast-grammar.cc"

impl_activity_activityValidate::impl_activity_activityValidate(tValidate _tValidate_1)
#line 580 "ast-grammar.k"
{tValidate_1 = _tValidate_1;
    id = tValidate_1->id; 
#line 580 "ast-grammar.k"
}
#line  206 "ast-grammar.cc"

impl_activity_activityWait::impl_activity_activityWait(tWait _tWait_1)
#line 581 "ast-grammar.k"
{tWait_1 = _tWait_1;
    id = tWait_1->id; 
#line 581 "ast-grammar.k"
}
#line  214 "ast-grammar.cc"

impl_activity_activityWhile::impl_activity_activityWhile(tWhile _tWhile_1)
#line 582 "ast-grammar.k"
{tWhile_1 = _tWhile_1;
    id = tWhile_1->id; 
#line 582 "ast-grammar.k"
}
#line  222 "ast-grammar.cc"

impl_tAssign_Assign::impl_tAssign_Assign(standardElements _standardElements_1, tCopy_list _tCopy_list_1, integer _integer_1)
#line 584 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tCopy_list_1 = _tCopy_list_1;
    integer_1 = _integer_1;
    CTOR(K_ASSIGN) 
#line 584 "ast-grammar.k"
}
#line  232 "ast-grammar.cc"

impl_tInvoke_AsynchronousInvoke::impl_tInvoke_AsynchronousInvoke(standardElements _standardElements_1, tCorrelation_list _tCorrelation_list_1, tToPart_list _tToPart_list_1, tFromPart_list _tFromPart_list_1, integer _integer_1)
#line 585 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tCorrelation_list_1 = _tCorrelation_list_1;
    tToPart_list_1 = _tToPart_list_1;
    tFromPart_list_1 = _tFromPart_list_1;
    integer_1 = _integer_1;
    CTOR(K_INVOKE) 
#line 585 "ast-grammar.k"
}
#line  244 "ast-grammar.cc"

impl_tCatch_Catch::impl_tCatch_Catch(activity _activity_1, integer _integer_1)
#line 586 "ast-grammar.k"
{activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_CATCH) 
#line 586 "ast-grammar.k"
}
#line  253 "ast-grammar.cc"

impl_tCatchAll_CatchAll::impl_tCatchAll_CatchAll(activity _activity_1, integer _integer_1)
#line 587 "ast-grammar.k"
{activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_CATCHALL) 
#line 587 "ast-grammar.k"
}
#line  262 "ast-grammar.cc"

impl_tCompensate_Compensate::impl_tCompensate_Compensate(standardElements _standardElements_1, integer _integer_1)
#line 588 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_COMPENSATE) 
#line 588 "ast-grammar.k"
}
#line  271 "ast-grammar.cc"

impl_tCompensate_CompensateScope::impl_tCompensate_CompensateScope(standardElements _standardElements_1, casestring _casestring_1, integer _integer_1)
#line 589 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    casestring_1 = _casestring_1;
    integer_1 = _integer_1;
    CTOR(K_COMPENSATESCOPE) 
#line 589 "ast-grammar.k"
}
#line  281 "ast-grammar.cc"

impl_tCompensationHandler_CompensationHandler::impl_tCompensationHandler_CompensationHandler(activity _activity_1, integer _integer_1)
#line 590 "ast-grammar.k"
{activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_COMPENSATIONHANDLER); if(globals::parsing) globals::process_information.compensation_handlers++; 
#line 590 "ast-grammar.k"
}
#line  290 "ast-grammar.cc"

impl_tCopy_Copy::impl_tCopy_Copy(tFrom _tFrom_1, tTo _tTo_1, integer _integer_1)
#line 591 "ast-grammar.k"
{tFrom_1 = _tFrom_1;
    tTo_1 = _tTo_1;
    integer_1 = _integer_1;
    CTOR(K_COPY) 
#line 591 "ast-grammar.k"
}
#line  300 "ast-grammar.cc"

impl_tCorrelation_Correlation::impl_tCorrelation_Correlation(integer _integer_1)
#line 592 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_CORRELATION) 
#line 592 "ast-grammar.k"
}
#line  308 "ast-grammar.cc"

impl_tCorrelationSet_CorrelationSet::impl_tCorrelationSet_CorrelationSet(integer _integer_1)
#line 593 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_CORRELATIONSET) 
#line 593 "ast-grammar.k"
}
#line  316 "ast-grammar.cc"

impl_tElse_Else::impl_tElse_Else(activity _activity_1, integer _integer_1)
#line 594 "ast-grammar.k"
{activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_ELSE) 
#line 594 "ast-grammar.k"
}
#line  325 "ast-grammar.cc"

impl_tElseIf_ElseIf::impl_tElseIf_ElseIf(activity _activity_1, integer _integer_1)
#line 595 "ast-grammar.k"
{activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_ELSEIF) 
#line 595 "ast-grammar.k"
}
#line  334 "ast-grammar.cc"

impl_tEmpty_Empty::impl_tEmpty_Empty(standardElements _standardElements_1, integer _integer_1)
#line 596 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_EMPTY) 
#line 596 "ast-grammar.k"
}
#line  343 "ast-grammar.cc"

impl_tEventHandlers_emptyEventHandlers::impl_tEventHandlers_emptyEventHandlers(integer _integer_1)
#line 597 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_EVENTHANDLERS) 
#line 597 "ast-grammar.k"
}
#line  351 "ast-grammar.cc"

impl_tEventHandlers_EventHandlers::impl_tEventHandlers_EventHandlers(tOnMessage_list _tOnMessage_list_1, tOnAlarm_list _tOnAlarm_list_1, integer _integer_1)
#line 598 "ast-grammar.k"
{tOnMessage_list_1 = _tOnMessage_list_1;
    tOnAlarm_list_1 = _tOnAlarm_list_1;
    integer_1 = _integer_1;
    CTOR(K_EVENTHANDLERS); if(globals::parsing) globals::process_information.event_handlers++; 
#line 598 "ast-grammar.k"
}
#line  361 "ast-grammar.cc"

impl_tExit_Exit::impl_tExit_Exit(standardElements _standardElements_1, integer _integer_1)
#line 599 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_EXIT) 
#line 599 "ast-grammar.k"
}
#line  370 "ast-grammar.cc"

impl_tFaultHandlers_FaultHandlers::impl_tFaultHandlers_FaultHandlers(tCatch_list _tCatch_list_1, tCatchAll _tCatchAll_1, integer _integer_1)
#line 600 "ast-grammar.k"
{tCatch_list_1 = _tCatch_list_1;
    tCatchAll_1 = _tCatchAll_1;
    integer_1 = _integer_1;
    CTOR(K_FAULTHANDLERS); if(globals::parsing) globals::process_information.fault_handlers++; 
#line 600 "ast-grammar.k"
}
#line  380 "ast-grammar.cc"

impl_tFlow_Flow::impl_tFlow_Flow(standardElements _standardElements_1, tLink_list _tLink_list_1, activity_list _activity_list_1, integer _integer_1)
#line 601 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tLink_list_1 = _tLink_list_1;
    activity_list_1 = _activity_list_1;
    integer_1 = _integer_1;
    CTOR(K_FLOW) 
#line 601 "ast-grammar.k"
}
#line  391 "ast-grammar.cc"

impl_tForEach_ForEach::impl_tForEach_ForEach(standardElements _standardElements_1, casestring _casestring_1, casestring _casestring_2, casestring _casestring_3, tScope _tScope_1, integer _integer_1)
#line 602 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    casestring_1 = _casestring_1;
    casestring_2 = _casestring_2;
    casestring_3 = _casestring_3;
    tScope_1 = _tScope_1;
    integer_1 = _integer_1;
    CTOR(K_FOREACH) 
#line 602 "ast-grammar.k"
}
#line  404 "ast-grammar.cc"

impl_tFrom_From::impl_tFrom_From(integer _integer_1)
#line 603 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_FROM) 
#line 603 "ast-grammar.k"
}
#line  412 "ast-grammar.cc"

impl_tFromPart_FromPart::impl_tFromPart_FromPart(integer _integer_1)
#line 604 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_FROMPART) 
#line 604 "ast-grammar.k"
}
#line  420 "ast-grammar.cc"

impl_tIf_If::impl_tIf_If(standardElements _standardElements_1, tElseIf_list _tElseIf_list_1, tElse _tElse_1, integer _integer_1)
#line 605 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tElseIf_list_1 = _tElseIf_list_1;
    tElse_1 = _tElse_1;
    integer_1 = _integer_1;
    CTOR(K_IF) 
#line 605 "ast-grammar.k"
}
#line  431 "ast-grammar.cc"

impl_tLink_Link::impl_tLink_Link(integer _integer_1)
#line 606 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_LINK) 
#line 606 "ast-grammar.k"
}
#line  439 "ast-grammar.cc"

impl_tMessageExchange_MessageExchange::impl_tMessageExchange_MessageExchange(integer _integer_1)
#line 607 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_MESSAGEEXCHANGE) 
#line 607 "ast-grammar.k"
}
#line  447 "ast-grammar.cc"

impl_tElse_NoElse::impl_tElse_NoElse(integer _integer_1)
#line 608 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_ELSE) 
#line 608 "ast-grammar.k"
}
#line  455 "ast-grammar.cc"

impl_tOnAlarm_OnAlarm::impl_tOnAlarm_OnAlarm(tRepeatEvery _tRepeatEvery_1, activity _activity_1, integer _integer_1)
#line 609 "ast-grammar.k"
{tRepeatEvery_1 = _tRepeatEvery_1;
    activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_ONALARM) 
#line 609 "ast-grammar.k"
}
#line  465 "ast-grammar.cc"

impl_tOnMessage_OnMessage::impl_tOnMessage_OnMessage(tCorrelation_list _tCorrelation_list_1, tFromPart_list _tFromPart_list_1, activity _activity_1, integer _integer_1)
#line 610 "ast-grammar.k"
{tCorrelation_list_1 = _tCorrelation_list_1;
    tFromPart_list_1 = _tFromPart_list_1;
    activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_ONMESSAGE) 
#line 610 "ast-grammar.k"
}
#line  476 "ast-grammar.cc"

impl_tOpaqueActivity_OpaqueActivity::impl_tOpaqueActivity_OpaqueActivity(standardElements _standardElements_1, integer _integer_1)
#line 611 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_OPAQUEACTIVITY) 
#line 611 "ast-grammar.k"
}
#line  485 "ast-grammar.cc"

impl_tPartner_Partner::impl_tPartner_Partner(tPartnerLink_list _tPartnerLink_list_1, integer _integer_1)
#line 612 "ast-grammar.k"
{tPartnerLink_list_1 = _tPartnerLink_list_1;
    integer_1 = _integer_1;
    CTOR(K_PARTNER) 
#line 612 "ast-grammar.k"
}
#line  494 "ast-grammar.cc"

impl_tPartnerLink_PartnerLink::impl_tPartnerLink_PartnerLink(integer _integer_1)
#line 613 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_PARTNERLINK) 
#line 613 "ast-grammar.k"
}
#line  502 "ast-grammar.cc"

impl_tPick_Pick::impl_tPick_Pick(standardElements _standardElements_1, tOnMessage_list _tOnMessage_list_1, tOnAlarm_list _tOnAlarm_list_1, integer _integer_1)
#line 614 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tOnMessage_list_1 = _tOnMessage_list_1;
    tOnAlarm_list_1 = _tOnAlarm_list_1;
    integer_1 = _integer_1;
    CTOR(K_PICK) 
#line 614 "ast-grammar.k"
}
#line  513 "ast-grammar.cc"

impl_tProcess_Process::impl_tProcess_Process(tPartnerLink_list _tPartnerLink_list_1, tPartner_list _tPartner_list_1, tMessageExchange_list _tMessageExchange_list_1, tVariable_list _tVariable_list_1, tCorrelationSet_list _tCorrelationSet_list_1, tFaultHandlers _tFaultHandlers_1, tEventHandlers _tEventHandlers_1, activity _activity_1, integer _integer_1)
#line 615 "ast-grammar.k"
{tPartnerLink_list_1 = _tPartnerLink_list_1;
    tPartner_list_1 = _tPartner_list_1;
    tMessageExchange_list_1 = _tMessageExchange_list_1;
    tVariable_list_1 = _tVariable_list_1;
    tCorrelationSet_list_1 = _tCorrelationSet_list_1;
    tFaultHandlers_1 = _tFaultHandlers_1;
    tEventHandlers_1 = _tEventHandlers_1;
    activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_PROCESS) 
#line 615 "ast-grammar.k"
}
#line  529 "ast-grammar.cc"

impl_tReceive_Receive::impl_tReceive_Receive(standardElements _standardElements_1, tCorrelation_list _tCorrelation_list_1, tFromPart_list _tFromPart_list_1, integer _integer_1)
#line 616 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tCorrelation_list_1 = _tCorrelation_list_1;
    tFromPart_list_1 = _tFromPart_list_1;
    integer_1 = _integer_1;
    CTOR(K_RECEIVE) 
#line 616 "ast-grammar.k"
}
#line  540 "ast-grammar.cc"

impl_tRepeatUntil_RepeatUntil::impl_tRepeatUntil_RepeatUntil(standardElements _standardElements_1, activity _activity_1, integer _integer_1)
#line 617 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_REPEATUNTIL) 
#line 617 "ast-grammar.k"
}
#line  550 "ast-grammar.cc"

impl_tReply_Reply::impl_tReply_Reply(standardElements _standardElements_1, tCorrelation_list _tCorrelation_list_1, tToPart_list _tToPart_list_1, integer _integer_1)
#line 618 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tCorrelation_list_1 = _tCorrelation_list_1;
    tToPart_list_1 = _tToPart_list_1;
    integer_1 = _integer_1;
    CTOR(K_REPLY) 
#line 618 "ast-grammar.k"
}
#line  561 "ast-grammar.cc"

impl_tRethrow_Rethrow::impl_tRethrow_Rethrow(standardElements _standardElements_1, integer _integer_1)
#line 619 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_RETHROW) 
#line 619 "ast-grammar.k"
}
#line  570 "ast-grammar.cc"

impl_tScope_Scope::impl_tScope_Scope(standardElements _standardElements_1, tVariable_list _tVariable_list_1, tMessageExchange_list _tMessageExchange_list_1, tFaultHandlers _tFaultHandlers_1, tCompensationHandler _tCompensationHandler_1, tTerminationHandler _tTerminationHandler_1, tEventHandlers _tEventHandlers_1, tCorrelationSet_list _tCorrelationSet_list_1, activity _activity_1, tPartnerLink_list _tPartnerLink_list_1, integer _integer_1)
#line 620 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tVariable_list_1 = _tVariable_list_1;
    tMessageExchange_list_1 = _tMessageExchange_list_1;
    tFaultHandlers_1 = _tFaultHandlers_1;
    tCompensationHandler_1 = _tCompensationHandler_1;
    tTerminationHandler_1 = _tTerminationHandler_1;
    tEventHandlers_1 = _tEventHandlers_1;
    tCorrelationSet_list_1 = _tCorrelationSet_list_1;
    activity_1 = _activity_1;
    tPartnerLink_list_1 = _tPartnerLink_list_1;
    integer_1 = _integer_1;
    CTOR(K_SCOPE) 
#line 620 "ast-grammar.k"
}
#line  588 "ast-grammar.cc"

impl_tSequence_Sequence::impl_tSequence_Sequence(standardElements _standardElements_1, activity_list _activity_list_1, integer _integer_1)
#line 621 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    activity_list_1 = _activity_list_1;
    integer_1 = _integer_1;
    CTOR(K_SEQUENCE) 
#line 621 "ast-grammar.k"
}
#line  598 "ast-grammar.cc"

impl_tSource_Source::impl_tSource_Source(integer _integer_1)
#line 622 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_SOURCE) 
#line 622 "ast-grammar.k"
}
#line  606 "ast-grammar.cc"

impl_tInvoke_SynchronousInvoke::impl_tInvoke_SynchronousInvoke(standardElements _standardElements_1, tCorrelation_list _tCorrelation_list_1, tToPart_list _tToPart_list_1, tFromPart_list _tFromPart_list_1, integer _integer_1)
#line 623 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tCorrelation_list_1 = _tCorrelation_list_1;
    tToPart_list_1 = _tToPart_list_1;
    tFromPart_list_1 = _tFromPart_list_1;
    integer_1 = _integer_1;
    CTOR(K_INVOKE) 
#line 623 "ast-grammar.k"
}
#line  618 "ast-grammar.cc"

impl_tTarget_Target::impl_tTarget_Target(integer _integer_1)
#line 624 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_TARGET) 
#line 624 "ast-grammar.k"
}
#line  626 "ast-grammar.cc"

impl_tTerminationHandler_TerminationHandler::impl_tTerminationHandler_TerminationHandler(activity _activity_1, integer _integer_1)
#line 625 "ast-grammar.k"
{activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_TERMINATIONHANDLER); 
#line 625 "ast-grammar.k"
}
#line  635 "ast-grammar.cc"

impl_tThrow_Throw::impl_tThrow_Throw(standardElements _standardElements_1, integer _integer_1)
#line 626 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_THROW) 
#line 626 "ast-grammar.k"
}
#line  644 "ast-grammar.cc"

impl_tTo_To::impl_tTo_To(integer _integer_1)
#line 627 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_TO) 
#line 627 "ast-grammar.k"
}
#line  652 "ast-grammar.cc"

impl_tToPart_ToPart::impl_tToPart_ToPart(integer _integer_1)
#line 628 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_TOPART) 
#line 628 "ast-grammar.k"
}
#line  660 "ast-grammar.cc"

impl_tValidate_Validate::impl_tValidate_Validate(standardElements _standardElements_1, integer _integer_1)
#line 629 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_VALIDATE) 
#line 629 "ast-grammar.k"
}
#line  669 "ast-grammar.cc"

impl_tVariable_Variable::impl_tVariable_Variable(integer _integer_1)
#line 630 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_VARIABLE) 
#line 630 "ast-grammar.k"
}
#line  677 "ast-grammar.cc"

impl_tInvoke_volatile_annotatedInvoke::impl_tInvoke_volatile_annotatedInvoke(standardElements _standardElements_1, tCorrelation_list _tCorrelation_list_1, tCatch_list _tCatch_list_1, tCatchAll _tCatchAll_1, tCompensationHandler _tCompensationHandler_1, tToPart_list _tToPart_list_1, tFromPart_list _tFromPart_list_1, integer _integer_1)
#line 631 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tCorrelation_list_1 = _tCorrelation_list_1;
    tCatch_list_1 = _tCatch_list_1;
    tCatchAll_1 = _tCatchAll_1;
    tCompensationHandler_1 = _tCompensationHandler_1;
    tToPart_list_1 = _tToPart_list_1;
    tFromPart_list_1 = _tFromPart_list_1;
    integer_1 = _integer_1;
    CTOR(K_INVOKE) 
#line 631 "ast-grammar.k"
}
#line  692 "ast-grammar.cc"

impl_tInvoke_volatile_Invoke::impl_tInvoke_volatile_Invoke(standardElements _standardElements_1, tCorrelation_list _tCorrelation_list_1, tToPart_list _tToPart_list_1, tFromPart_list _tFromPart_list_1, integer _integer_1)
#line 632 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    tCorrelation_list_1 = _tCorrelation_list_1;
    tToPart_list_1 = _tToPart_list_1;
    tFromPart_list_1 = _tFromPart_list_1;
    integer_1 = _integer_1;
    CTOR(K_INVOKE) 
#line 632 "ast-grammar.k"
}
#line  704 "ast-grammar.cc"

impl_tCompensationHandler_volatile_standardCompensationHandler::impl_tCompensationHandler_volatile_standardCompensationHandler(integer _integer_1)
#line 633 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_COMPENSATIONHANDLER); 
#line 633 "ast-grammar.k"
}
#line  712 "ast-grammar.cc"

impl_tFaultHandlers_volatile_standardFaultHandlers::impl_tFaultHandlers_volatile_standardFaultHandlers(integer _integer_1)
#line 634 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_FAULTHANDLERS); 
#line 634 "ast-grammar.k"
}
#line  720 "ast-grammar.cc"

impl_tTerminationHandler_volatile_standardTerminationHandler::impl_tTerminationHandler_volatile_standardTerminationHandler(integer _integer_1)
#line 635 "ast-grammar.k"
{integer_1 = _integer_1;
    CTOR(K_TERMINATIONHANDLER); 
#line 635 "ast-grammar.k"
}
#line  728 "ast-grammar.cc"

impl_tWait_Wait::impl_tWait_Wait(standardElements _standardElements_1, integer _integer_1)
#line 636 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    integer_1 = _integer_1;
    CTOR(K_WAIT) 
#line 636 "ast-grammar.k"
}
#line  737 "ast-grammar.cc"

impl_tWhile_While::impl_tWhile_While(standardElements _standardElements_1, activity _activity_1, integer _integer_1)
#line 637 "ast-grammar.k"
{standardElements_1 = _standardElements_1;
    activity_1 = _activity_1;
    integer_1 = _integer_1;
    CTOR(K_WHILE) 
#line 637 "ast-grammar.k"
}
#line  747 "ast-grammar.cc"


} // namespace kc
