/* translation of file(s)
	"petrinet-patterns-basic.k"
	"petrinet-patterns-structured.k"
	"petrinet-patterns-scopes.k"
	"petrinet-patterns-handlers.k"
	"petrinet-patterns-links.k"
	"petrinet-patterns-shortcuts.k"
	"ast-grammar.k"
	"ast-config.k"
	"ast-to-petrinet.k"
	"ast-to-xml.k"
	"ast-to-cfg.k"
	"ast-postprocess.k"
	"ast-rewrite.k"
	"ast-to-visualization.k"
 */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.11 (C) 1998-2007 Humboldt-University of Berlin $
 */
#define KC_REWRITE

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include "ast-system-k.h"
#include "ast-system-rk.h"


namespace kc {
base_rview_class base_rview;
implicit_class implicit;
invoke_class invoke;
newNames_class newNames;

impl_rviews rviews[] = {
    {"base_rview",&base_rview},
    {"implicit",&implicit},
    {"invoke",&invoke},
    {"newNames",&newNames},
    {0,0}
};

} // namespace kc
namespace kc { }
using namespace kc;
/* included stuff */
#line 77 "ast-rewrite.k"
#include "ast-details.h"
#include "globals.h"

#line  52 "ast-system-rk.cc"
/* end included stuff */


namespace kc {

#ifndef KC_TRACE_PROVIDED
#define KC_TRACE_PROVIDED(COND,FILE,LINE,NODE) COND
#endif
#ifndef KC_TRACE_REWRITE_MATCH
#define KC_TRACE_REWRITE_MATCH(VIEW,FILE,LINE,NODE)
#endif
#ifndef KC_TRACE_REWRITE_RESULT
#define KC_TRACE_REWRITE_RESULT(VIEW,FILE,LINE,NODE)
#endif

tProcess impl_tProcess_Process::rewrite(rview kc_current_view_base)
{
    tPartnerLink_list l_tPartnerLink_list_1 =
	tPartnerLink_list_1->rewrite(kc_current_view_base);
    tPartner_list l_tPartner_list_1 =
	tPartner_list_1->rewrite(kc_current_view_base);
    tMessageExchange_list l_tMessageExchange_list_1 =
	tMessageExchange_list_1->rewrite(kc_current_view_base);
    tVariable_list l_tVariable_list_1 =
	tVariable_list_1->rewrite(kc_current_view_base);
    tCorrelationSet_list l_tCorrelationSet_list_1 =
	tCorrelationSet_list_1->rewrite(kc_current_view_base);
    tFaultHandlers l_tFaultHandlers_1 =
	tFaultHandlers_1->rewrite(kc_current_view_base);
    tEventHandlers l_tEventHandlers_1 =
	tEventHandlers_1->rewrite(kc_current_view_base);
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_tPartnerLink_list_1 == tPartnerLink_list_1) &&  (l_tPartner_list_1 == tPartner_list_1) &&  (l_tMessageExchange_list_1 == tMessageExchange_list_1) &&  (l_tVariable_list_1 == tVariable_list_1) &&  (l_tCorrelationSet_list_1 == tCorrelationSet_list_1) &&  (l_tFaultHandlers_1 == tFaultHandlers_1) &&  (l_tEventHandlers_1 == tEventHandlers_1) &&  (l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tProcess_Process* kc_result= Process(l_tPartnerLink_list_1, l_tPartner_list_1, l_tMessageExchange_list_1, l_tVariable_list_1, l_tCorrelationSet_list_1, l_tFaultHandlers_1, l_tEventHandlers_1, l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityScope::rewrite(rview kc_current_view_base)
{
    tScope l_tScope_1 =
	tScope_1->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case implicit_enum: {
	    implicit_class& kc_current_view=static_cast<implicit_class&>(kc_current_view_base);
#line 288 "ast-rewrite.k"
	    if ((l_tScope_1->prod_sel() == sel_Scope) && (phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tFaultHandlers_1->prod_sel() == sel_FaultHandlers) && (phylum_cast<const impl_tFaultHandlers_FaultHandlers*>(phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tFaultHandlers_1)->tCatch_list_1->prod_sel() == sel_NiltCatch_list) && (phylum_cast<const impl_tFaultHandlers_FaultHandlers*>(phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tFaultHandlers_1)->tCatchAll_1->prod_sel() == sel_NoCatchAll) && (phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->activity_1->prod_sel() == sel_activityInvoke)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 288, this);
#line 271 "ast-rewrite.k"
		const standardElements my_standardElements = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->standardElements_1;
#line 272 "ast-rewrite.k"
		const tVariable_list my_variables = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tVariable_list_1;
#line 273 "ast-rewrite.k"
		const tMessageExchange_list my_messageExchanges = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tMessageExchange_list_1;
#line 277 "ast-rewrite.k"
		const integer my_fh_integer = phylum_cast<const impl_tFaultHandlers_FaultHandlers*>(phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tFaultHandlers_1)->integer_1;
#line 279 "ast-rewrite.k"
		const tCompensationHandler my_compensationHandler = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tCompensationHandler_1;
#line 280 "ast-rewrite.k"
		const tTerminationHandler my_terminationHandler = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tTerminationHandler_1;
#line 281 "ast-rewrite.k"
		const tEventHandlers my_eventHandler = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tEventHandlers_1;
#line 282 "ast-rewrite.k"
		const tCorrelationSet_list my_correlationSets = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tCorrelationSet_list_1;
#line 283 "ast-rewrite.k"
		const tInvoke myinvoke = phylum_cast<const impl_activity_activityInvoke*>(phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->activity_1)->tInvoke_1;
#line 284 "ast-rewrite.k"
		const tPartnerLink_list my_partnerlinks = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->tPartnerLink_list_1;
#line 285 "ast-rewrite.k"
		const integer my_integer = phylum_cast<const impl_tScope_Scope*>(l_tScope_1)->integer_1;
#line 306 "ast-rewrite.k"
		activity kc_result = activityScope(Scope(my_standardElements, my_variables, my_messageExchanges, volatile_standardFaultHandlers(my_fh_integer), my_compensationHandler, my_terminationHandler, my_eventHandler, my_correlationSets, activityInvoke(myinvoke), my_partnerlinks, my_integer));

#line  131 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",306,kc_result);
		return (const_cast<const impl_activity*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	kc_rewrite_default:
	default:;
    }
    if ((l_tScope_1 == tScope_1))
	return this;
    else {
	impl_activity_activityScope* kc_result= activityScope(l_tScope_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityFlow::rewrite(rview kc_current_view_base)
{
    tFlow l_tFlow_1 =
	tFlow_1->rewrite(kc_current_view_base);
    if ((l_tFlow_1 == tFlow_1))
	return this;
    else {
	impl_activity_activityFlow* kc_result= activityFlow(l_tFlow_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityPick::rewrite(rview kc_current_view_base)
{
    tPick l_tPick_1 =
	tPick_1->rewrite(kc_current_view_base);
    if ((l_tPick_1 == tPick_1))
	return this;
    else {
	impl_activity_activityPick* kc_result= activityPick(l_tPick_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityForEach::rewrite(rview kc_current_view_base)
{
    tForEach l_tForEach_1 =
	tForEach_1->rewrite(kc_current_view_base);
    if ((l_tForEach_1 == tForEach_1))
	return this;
    else {
	impl_activity_activityForEach* kc_result= activityForEach(l_tForEach_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityRepeatUntil::rewrite(rview kc_current_view_base)
{
    tRepeatUntil l_tRepeatUntil_1 =
	tRepeatUntil_1->rewrite(kc_current_view_base);
    if ((l_tRepeatUntil_1 == tRepeatUntil_1))
	return this;
    else {
	impl_activity_activityRepeatUntil* kc_result= activityRepeatUntil(l_tRepeatUntil_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityWhile::rewrite(rview kc_current_view_base)
{
    tWhile l_tWhile_1 =
	tWhile_1->rewrite(kc_current_view_base);
    if ((l_tWhile_1 == tWhile_1))
	return this;
    else {
	impl_activity_activityWhile* kc_result= activityWhile(l_tWhile_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityIf::rewrite(rview kc_current_view_base)
{
    tIf l_tIf_1 =
	tIf_1->rewrite(kc_current_view_base);
    if ((l_tIf_1 == tIf_1))
	return this;
    else {
	impl_activity_activityIf* kc_result= activityIf(l_tIf_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activitySequence::rewrite(rview kc_current_view_base)
{
    tSequence l_tSequence_1 =
	tSequence_1->rewrite(kc_current_view_base);
    if ((l_tSequence_1 == tSequence_1))
	return this;
    else {
	impl_activity_activitySequence* kc_result= activitySequence(l_tSequence_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityCompensate::rewrite(rview kc_current_view_base)
{
    tCompensate l_tCompensate_1 =
	tCompensate_1->rewrite(kc_current_view_base);
    if ((l_tCompensate_1 == tCompensate_1))
	return this;
    else {
	impl_activity_activityCompensate* kc_result= activityCompensate(l_tCompensate_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityRethrow::rewrite(rview kc_current_view_base)
{
    tRethrow l_tRethrow_1 =
	tRethrow_1->rewrite(kc_current_view_base);
    if ((l_tRethrow_1 == tRethrow_1))
	return this;
    else {
	impl_activity_activityRethrow* kc_result= activityRethrow(l_tRethrow_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityThrow::rewrite(rview kc_current_view_base)
{
    tThrow l_tThrow_1 =
	tThrow_1->rewrite(kc_current_view_base);
    if ((l_tThrow_1 == tThrow_1))
	return this;
    else {
	impl_activity_activityThrow* kc_result= activityThrow(l_tThrow_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityExit::rewrite(rview kc_current_view_base)
{
    tExit l_tExit_1 =
	tExit_1->rewrite(kc_current_view_base);
    if ((l_tExit_1 == tExit_1))
	return this;
    else {
	impl_activity_activityExit* kc_result= activityExit(l_tExit_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityWait::rewrite(rview kc_current_view_base)
{
    tWait l_tWait_1 =
	tWait_1->rewrite(kc_current_view_base);
    if ((l_tWait_1 == tWait_1))
	return this;
    else {
	impl_activity_activityWait* kc_result= activityWait(l_tWait_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityOpaqueActivity::rewrite(rview kc_current_view_base)
{
    tOpaqueActivity l_tOpaqueActivity_1 =
	tOpaqueActivity_1->rewrite(kc_current_view_base);
    if ((l_tOpaqueActivity_1 == tOpaqueActivity_1))
	return this;
    else {
	impl_activity_activityOpaqueActivity* kc_result= activityOpaqueActivity(l_tOpaqueActivity_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityEmpty::rewrite(rview kc_current_view_base)
{
    tEmpty l_tEmpty_1 =
	tEmpty_1->rewrite(kc_current_view_base);
    if ((l_tEmpty_1 == tEmpty_1))
	return this;
    else {
	impl_activity_activityEmpty* kc_result= activityEmpty(l_tEmpty_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityValidate::rewrite(rview kc_current_view_base)
{
    tValidate l_tValidate_1 =
	tValidate_1->rewrite(kc_current_view_base);
    if ((l_tValidate_1 == tValidate_1))
	return this;
    else {
	impl_activity_activityValidate* kc_result= activityValidate(l_tValidate_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityAssign::rewrite(rview kc_current_view_base)
{
    tAssign l_tAssign_1 =
	tAssign_1->rewrite(kc_current_view_base);
    if ((l_tAssign_1 == tAssign_1))
	return this;
    else {
	impl_activity_activityAssign* kc_result= activityAssign(l_tAssign_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityInvoke::rewrite(rview kc_current_view_base)
{
    tInvoke l_tInvoke_1 =
	tInvoke_1->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case invoke_enum: {
	    invoke_class& kc_current_view=static_cast<invoke_class&>(kc_current_view_base);
#line 111 "ast-rewrite.k"
	    if ((l_tInvoke_1->prod_sel() == sel_volatile_annotatedInvoke) && (phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCatch_list_1->prod_sel() == sel_NiltCatch_list) && (phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCatchAll_1->prod_sel() == sel_NoCatchAll) && (phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCompensationHandler_1->prod_sel() == sel_volatile_standardCompensationHandler)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 111, this);
#line 101 "ast-rewrite.k"
		const standardElements my_standardElements = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->standardElements_1;
#line 102 "ast-rewrite.k"
		const tCorrelation_list my_tCorrelation_list = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCorrelation_list_1;
#line 105 "ast-rewrite.k"
		const integer a = phylum_cast<const impl_tCompensationHandler_volatile_standardCompensationHandler*>(phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCompensationHandler_1)->integer_1;
#line 106 "ast-rewrite.k"
		const tToPart_list my_tToPart_list = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tToPart_list_1;
#line 107 "ast-rewrite.k"
		const tFromPart_list my_tFromPart_list = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tFromPart_list_1;
#line 108 "ast-rewrite.k"
		const integer my_integer = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->integer_1;
#line 121 "ast-rewrite.k"
		activity kc_result = activityInvoke(volatile_Invoke(my_standardElements, my_tCorrelation_list, my_tToPart_list, my_tFromPart_list, my_integer));

#line  382 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",121,kc_result);
		return (const_cast<const impl_activity*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 141 "ast-rewrite.k"
		if ((l_tInvoke_1->prod_sel() == sel_volatile_annotatedInvoke)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 141, this);
#line 131 "ast-rewrite.k"
		const standardElements my_standardElements = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->standardElements_1;
#line 132 "ast-rewrite.k"
		const tCorrelation_list my_tCorrelation_list = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCorrelation_list_1;
#line 133 "ast-rewrite.k"
		const tCatch_list my_tCatchList = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCatch_list_1;
#line 134 "ast-rewrite.k"
		const tCatchAll my_tCatchAll = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCatchAll_1;
#line 135 "ast-rewrite.k"
		const tCompensationHandler my_tCompensationHandler = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tCompensationHandler_1;
#line 136 "ast-rewrite.k"
		const tToPart_list my_tToPart_list = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tToPart_list_1;
#line 137 "ast-rewrite.k"
		const tFromPart_list my_tFromPart_list = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->tFromPart_list_1;
#line 138 "ast-rewrite.k"
		const integer my_integer = phylum_cast<const impl_tInvoke_volatile_annotatedInvoke*>(l_tInvoke_1)->integer_1;
#line 173 "ast-rewrite.k"
		activity kc_result = activityScope(Scope(my_standardElements, NiltVariable_list(), NiltMessageExchange_list(), FaultHandlers(my_tCatchList, my_tCatchAll, mkinteger(0)), my_tCompensationHandler, volatile_standardTerminationHandler(mkinteger(0)), emptyEventHandlers(mkinteger(0)), NiltCorrelationSet_list(), activityInvoke(volatile_Invoke(NoStandardElements(), my_tCorrelation_list, my_tToPart_list, my_tFromPart_list, my_integer)), NiltPartnerLink_list(), mkinteger(0)));

#line  408 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",173,kc_result);
		return (const_cast<const impl_activity*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	kc_rewrite_default:
	default:;
    }
    if ((l_tInvoke_1 == tInvoke_1))
	return this;
    else {
	impl_activity_activityInvoke* kc_result= activityInvoke(l_tInvoke_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityReply::rewrite(rview kc_current_view_base)
{
    tReply l_tReply_1 =
	tReply_1->rewrite(kc_current_view_base);
    if ((l_tReply_1 == tReply_1))
	return this;
    else {
	impl_activity_activityReply* kc_result= activityReply(l_tReply_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity impl_activity_activityReceive::rewrite(rview kc_current_view_base)
{
    tReceive l_tReceive_1 =
	tReceive_1->rewrite(kc_current_view_base);
    if ((l_tReceive_1 == tReceive_1))
	return this;
    else {
	impl_activity_activityReceive* kc_result= activityReceive(l_tReceive_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

activity_list impl_activity_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	activity l_activity_1 =
	    activity_1->rewrite(kc_current_view_base);
	activity_list l_activity_list_1 =
	    activity_list_1->rewrite(kc_current_view_base);
	if ((l_activity_1 == activity_1) &&  (l_activity_list_1 == activity_list_1))
	    return this;
	else {
	    impl_activity_list* kc_result= Consactivity_list(l_activity_1, l_activity_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tPartnerLink_list impl_tPartnerLink_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tPartnerLink l_tPartnerLink_1 =
	    tPartnerLink_1->rewrite(kc_current_view_base);
	tPartnerLink_list l_tPartnerLink_list_1 =
	    tPartnerLink_list_1->rewrite(kc_current_view_base);
	if ((l_tPartnerLink_1 == tPartnerLink_1) &&  (l_tPartnerLink_list_1 == tPartnerLink_list_1))
	    return this;
	else {
	    impl_tPartnerLink_list* kc_result= ConstPartnerLink_list(l_tPartnerLink_1, l_tPartnerLink_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tPartnerLink impl_tPartnerLink_PartnerLink::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tPartnerLink_PartnerLink* kc_result= PartnerLink(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tPartner_list impl_tPartner_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tPartner l_tPartner_1 =
	    tPartner_1->rewrite(kc_current_view_base);
	tPartner_list l_tPartner_list_1 =
	    tPartner_list_1->rewrite(kc_current_view_base);
	if ((l_tPartner_1 == tPartner_1) &&  (l_tPartner_list_1 == tPartner_list_1))
	    return this;
	else {
	    impl_tPartner_list* kc_result= ConstPartner_list(l_tPartner_1, l_tPartner_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tPartner impl_tPartner_Partner::rewrite(rview kc_current_view_base)
{
    tPartnerLink_list l_tPartnerLink_list_1 =
	tPartnerLink_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_tPartnerLink_list_1 == tPartnerLink_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tPartner_Partner* kc_result= Partner(l_tPartnerLink_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tFaultHandlers impl_tFaultHandlers_FaultHandlers::rewrite(rview kc_current_view_base)
{
    tCatch_list l_tCatch_list_1 =
	tCatch_list_1->rewrite(kc_current_view_base);
    tCatchAll l_tCatchAll_1 =
	tCatchAll_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_tCatch_list_1 == tCatch_list_1) &&  (l_tCatchAll_1 == tCatchAll_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tFaultHandlers_FaultHandlers* kc_result= FaultHandlers(l_tCatch_list_1, l_tCatchAll_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tFaultHandlers impl_tFaultHandlers_volatile_standardFaultHandlers::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case implicit_enum: {
	    implicit_class& kc_current_view=static_cast<implicit_class&>(kc_current_view_base);
#line 213 "ast-rewrite.k"
	    { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 213, this);
#line 213 "ast-rewrite.k"
		const integer _id = l_integer_1;
#line 244 "ast-rewrite.k"
		tFaultHandlers kc_result = FaultHandlers(NiltCatch_list(), CatchAll(activitySequence(Sequence(NoStandardElements(), Consactivity_list(activityCompensate(Compensate(NoStandardElements(), mkinteger(0))), Consactivity_list(activityRethrow(Rethrow(NoStandardElements(), mkinteger(0))), Nilactivity_list())), mkinteger(0))), mkinteger(0)), mkinteger(0));

#line  566 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",244,kc_result);
		return (const_cast<const impl_tFaultHandlers*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    }
	}
	default:;
    }
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tFaultHandlers_volatile_standardFaultHandlers* kc_result= volatile_standardFaultHandlers(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCatch_list impl_tCatch_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tCatch l_tCatch_1 =
	    tCatch_1->rewrite(kc_current_view_base);
	tCatch_list l_tCatch_list_1 =
	    tCatch_list_1->rewrite(kc_current_view_base);
	if ((l_tCatch_1 == tCatch_1) &&  (l_tCatch_list_1 == tCatch_list_1))
	    return this;
	else {
	    impl_tCatch_list* kc_result= ConstCatch_list(l_tCatch_1, l_tCatch_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tCatch impl_tCatch_Catch::rewrite(rview kc_current_view_base)
{
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tCatch_Catch* kc_result= Catch(l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCatchAll impl_tCatchAll_NoCatchAll::rewrite(rview kc_current_view_base)
{
    return this;

}

tCatchAll impl_tCatchAll_CatchAll::rewrite(rview kc_current_view_base)
{
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tCatchAll_CatchAll* kc_result= CatchAll(l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tTerminationHandler impl_tTerminationHandler_TerminationHandler::rewrite(rview kc_current_view_base)
{
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tTerminationHandler_TerminationHandler* kc_result= TerminationHandler(l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tTerminationHandler impl_tTerminationHandler_volatile_standardTerminationHandler::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case implicit_enum: {
	    implicit_class& kc_current_view=static_cast<implicit_class&>(kc_current_view_base);
#line 196 "ast-rewrite.k"
	    { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 196, this);
#line 195 "ast-rewrite.k"
		const integer _id = l_integer_1;
#line 206 "ast-rewrite.k"
		tTerminationHandler kc_result = TerminationHandler(activityCompensate(Compensate(NoStandardElements(), mkinteger(0))), mkinteger(0));

#line  666 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",206,kc_result);
		return (const_cast<const impl_tTerminationHandler*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    }
	}
	default:;
    }
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tTerminationHandler_volatile_standardTerminationHandler* kc_result= volatile_standardTerminationHandler(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCompensationHandler impl_tCompensationHandler_CompensationHandler::rewrite(rview kc_current_view_base)
{
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tCompensationHandler_CompensationHandler* kc_result= CompensationHandler(l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCompensationHandler impl_tCompensationHandler_volatile_standardCompensationHandler::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case implicit_enum: {
	    implicit_class& kc_current_view=static_cast<implicit_class&>(kc_current_view_base);
#line 251 "ast-rewrite.k"
	    { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 251, this);
#line 251 "ast-rewrite.k"
		const integer _id = l_integer_1;
#line 261 "ast-rewrite.k"
		tCompensationHandler kc_result = CompensationHandler(activityCompensate(Compensate(NoStandardElements(), mkinteger(0))), mkinteger(0));

#line  712 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",261,kc_result);
		return (const_cast<const impl_tCompensationHandler*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    }
	}
	default:;
    }
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tCompensationHandler_volatile_standardCompensationHandler* kc_result= volatile_standardCompensationHandler(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tEventHandlers impl_tEventHandlers_EventHandlers::rewrite(rview kc_current_view_base)
{
    tOnMessage_list l_tOnMessage_list_1 =
	tOnMessage_list_1->rewrite(kc_current_view_base);
    tOnAlarm_list l_tOnAlarm_list_1 =
	tOnAlarm_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_tOnMessage_list_1 == tOnMessage_list_1) &&  (l_tOnAlarm_list_1 == tOnAlarm_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tEventHandlers_EventHandlers* kc_result= EventHandlers(l_tOnMessage_list_1, l_tOnAlarm_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tEventHandlers impl_tEventHandlers_emptyEventHandlers::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tEventHandlers_emptyEventHandlers* kc_result= emptyEventHandlers(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tOnMessage_list impl_tOnMessage_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tOnMessage l_tOnMessage_1 =
	    tOnMessage_1->rewrite(kc_current_view_base);
	tOnMessage_list l_tOnMessage_list_1 =
	    tOnMessage_list_1->rewrite(kc_current_view_base);
	if ((l_tOnMessage_1 == tOnMessage_1) &&  (l_tOnMessage_list_1 == tOnMessage_list_1))
	    return this;
	else {
	    impl_tOnMessage_list* kc_result= ConstOnMessage_list(l_tOnMessage_1, l_tOnMessage_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tOnMessage impl_tOnMessage_OnMessage::rewrite(rview kc_current_view_base)
{
    tCorrelation_list l_tCorrelation_list_1 =
	tCorrelation_list_1->rewrite(kc_current_view_base);
    tFromPart_list l_tFromPart_list_1 =
	tFromPart_list_1->rewrite(kc_current_view_base);
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_tCorrelation_list_1 == tCorrelation_list_1) &&  (l_tFromPart_list_1 == tFromPart_list_1) &&  (l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tOnMessage_OnMessage* kc_result= OnMessage(l_tCorrelation_list_1, l_tFromPart_list_1, l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tOnAlarm_list impl_tOnAlarm_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tOnAlarm l_tOnAlarm_1 =
	    tOnAlarm_1->rewrite(kc_current_view_base);
	tOnAlarm_list l_tOnAlarm_list_1 =
	    tOnAlarm_list_1->rewrite(kc_current_view_base);
	if ((l_tOnAlarm_1 == tOnAlarm_1) &&  (l_tOnAlarm_list_1 == tOnAlarm_list_1))
	    return this;
	else {
	    impl_tOnAlarm_list* kc_result= ConstOnAlarm_list(l_tOnAlarm_1, l_tOnAlarm_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tOnAlarm impl_tOnAlarm_OnAlarm::rewrite(rview kc_current_view_base)
{
    tRepeatEvery l_tRepeatEvery_1 =
	tRepeatEvery_1->rewrite(kc_current_view_base);
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_tRepeatEvery_1 == tRepeatEvery_1) &&  (l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tOnAlarm_OnAlarm* kc_result= OnAlarm(l_tRepeatEvery_1, l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tRepeatEvery impl_tRepeatEvery_RepeatEvery::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tRepeatEvery_RepeatEvery* kc_result= RepeatEvery(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tRepeatEvery impl_tRepeatEvery_emptyRepeatEvery::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tRepeatEvery_emptyRepeatEvery* kc_result= emptyRepeatEvery(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tVariable_list impl_tVariable_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tVariable l_tVariable_1 =
	    tVariable_1->rewrite(kc_current_view_base);
	tVariable_list l_tVariable_list_1 =
	    tVariable_list_1->rewrite(kc_current_view_base);
	if ((l_tVariable_1 == tVariable_1) &&  (l_tVariable_list_1 == tVariable_list_1))
	    return this;
	else {
	    impl_tVariable_list* kc_result= ConstVariable_list(l_tVariable_1, l_tVariable_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tVariable impl_tVariable_Variable::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tVariable_Variable* kc_result= Variable(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tMessageExchange_list impl_tMessageExchange_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tMessageExchange l_tMessageExchange_1 =
	    tMessageExchange_1->rewrite(kc_current_view_base);
	tMessageExchange_list l_tMessageExchange_list_1 =
	    tMessageExchange_list_1->rewrite(kc_current_view_base);
	if ((l_tMessageExchange_1 == tMessageExchange_1) &&  (l_tMessageExchange_list_1 == tMessageExchange_list_1))
	    return this;
	else {
	    impl_tMessageExchange_list* kc_result= ConstMessageExchange_list(l_tMessageExchange_1, l_tMessageExchange_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tMessageExchange impl_tMessageExchange_MessageExchange::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tMessageExchange_MessageExchange* kc_result= MessageExchange(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCorrelationSet_list impl_tCorrelationSet_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tCorrelationSet l_tCorrelationSet_1 =
	    tCorrelationSet_1->rewrite(kc_current_view_base);
	tCorrelationSet_list l_tCorrelationSet_list_1 =
	    tCorrelationSet_list_1->rewrite(kc_current_view_base);
	if ((l_tCorrelationSet_1 == tCorrelationSet_1) &&  (l_tCorrelationSet_list_1 == tCorrelationSet_list_1))
	    return this;
	else {
	    impl_tCorrelationSet_list* kc_result= ConstCorrelationSet_list(l_tCorrelationSet_1, l_tCorrelationSet_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tCorrelationSet impl_tCorrelationSet_CorrelationSet::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tCorrelationSet_CorrelationSet* kc_result= CorrelationSet(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCorrelation_list impl_tCorrelation_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tCorrelation l_tCorrelation_1 =
	    tCorrelation_1->rewrite(kc_current_view_base);
	tCorrelation_list l_tCorrelation_list_1 =
	    tCorrelation_list_1->rewrite(kc_current_view_base);
	if ((l_tCorrelation_1 == tCorrelation_1) &&  (l_tCorrelation_list_1 == tCorrelation_list_1))
	    return this;
	else {
	    impl_tCorrelation_list* kc_result= ConstCorrelation_list(l_tCorrelation_1, l_tCorrelation_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tCorrelation impl_tCorrelation_Correlation::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tCorrelation_Correlation* kc_result= Correlation(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tToPart_list impl_tToPart_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tToPart l_tToPart_1 =
	    tToPart_1->rewrite(kc_current_view_base);
	tToPart_list l_tToPart_list_1 =
	    tToPart_list_1->rewrite(kc_current_view_base);
	if ((l_tToPart_1 == tToPart_1) &&  (l_tToPart_list_1 == tToPart_list_1))
	    return this;
	else {
	    impl_tToPart_list* kc_result= ConstToPart_list(l_tToPart_1, l_tToPart_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tToPart impl_tToPart_ToPart::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tToPart_ToPart* kc_result= ToPart(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tFromPart_list impl_tFromPart_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tFromPart l_tFromPart_1 =
	    tFromPart_1->rewrite(kc_current_view_base);
	tFromPart_list l_tFromPart_list_1 =
	    tFromPart_list_1->rewrite(kc_current_view_base);
	if ((l_tFromPart_1 == tFromPart_1) &&  (l_tFromPart_list_1 == tFromPart_list_1))
	    return this;
	else {
	    impl_tFromPart_list* kc_result= ConstFromPart_list(l_tFromPart_1, l_tFromPart_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tFromPart impl_tFromPart_FromPart::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tFromPart_FromPart* kc_result= FromPart(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tReceive impl_tReceive_Receive::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tCorrelation_list l_tCorrelation_list_1 =
	tCorrelation_list_1->rewrite(kc_current_view_base);
    tFromPart_list l_tFromPart_list_1 =
	tFromPart_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tCorrelation_list_1 == tCorrelation_list_1) &&  (l_tFromPart_list_1 == tFromPart_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tReceive_Receive* kc_result= Receive(l_standardElements_1, l_tCorrelation_list_1, l_tFromPart_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tReply impl_tReply_Reply::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tCorrelation_list l_tCorrelation_list_1 =
	tCorrelation_list_1->rewrite(kc_current_view_base);
    tToPart_list l_tToPart_list_1 =
	tToPart_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tCorrelation_list_1 == tCorrelation_list_1) &&  (l_tToPart_list_1 == tToPart_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tReply_Reply* kc_result= Reply(l_standardElements_1, l_tCorrelation_list_1, l_tToPart_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tInvoke impl_tInvoke_volatile_annotatedInvoke::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tCorrelation_list l_tCorrelation_list_1 =
	tCorrelation_list_1->rewrite(kc_current_view_base);
    tCatch_list l_tCatch_list_1 =
	tCatch_list_1->rewrite(kc_current_view_base);
    tCatchAll l_tCatchAll_1 =
	tCatchAll_1->rewrite(kc_current_view_base);
    tCompensationHandler l_tCompensationHandler_1 =
	tCompensationHandler_1->rewrite(kc_current_view_base);
    tToPart_list l_tToPart_list_1 =
	tToPart_list_1->rewrite(kc_current_view_base);
    tFromPart_list l_tFromPart_list_1 =
	tFromPart_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tCorrelation_list_1 == tCorrelation_list_1) &&  (l_tCatch_list_1 == tCatch_list_1) &&  (l_tCatchAll_1 == tCatchAll_1) &&  (l_tCompensationHandler_1 == tCompensationHandler_1) &&  (l_tToPart_list_1 == tToPart_list_1) &&  (l_tFromPart_list_1 == tFromPart_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tInvoke_volatile_annotatedInvoke* kc_result= volatile_annotatedInvoke(l_standardElements_1, l_tCorrelation_list_1, l_tCatch_list_1, l_tCatchAll_1, l_tCompensationHandler_1, l_tToPart_list_1, l_tFromPart_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tInvoke impl_tInvoke_AsynchronousInvoke::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tCorrelation_list l_tCorrelation_list_1 =
	tCorrelation_list_1->rewrite(kc_current_view_base);
    tToPart_list l_tToPart_list_1 =
	tToPart_list_1->rewrite(kc_current_view_base);
    tFromPart_list l_tFromPart_list_1 =
	tFromPart_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tCorrelation_list_1 == tCorrelation_list_1) &&  (l_tToPart_list_1 == tToPart_list_1) &&  (l_tFromPart_list_1 == tFromPart_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tInvoke_AsynchronousInvoke* kc_result= AsynchronousInvoke(l_standardElements_1, l_tCorrelation_list_1, l_tToPart_list_1, l_tFromPart_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tInvoke impl_tInvoke_SynchronousInvoke::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tCorrelation_list l_tCorrelation_list_1 =
	tCorrelation_list_1->rewrite(kc_current_view_base);
    tToPart_list l_tToPart_list_1 =
	tToPart_list_1->rewrite(kc_current_view_base);
    tFromPart_list l_tFromPart_list_1 =
	tFromPart_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tCorrelation_list_1 == tCorrelation_list_1) &&  (l_tToPart_list_1 == tToPart_list_1) &&  (l_tFromPart_list_1 == tFromPart_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tInvoke_SynchronousInvoke* kc_result= SynchronousInvoke(l_standardElements_1, l_tCorrelation_list_1, l_tToPart_list_1, l_tFromPart_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tInvoke impl_tInvoke_volatile_Invoke::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tCorrelation_list l_tCorrelation_list_1 =
	tCorrelation_list_1->rewrite(kc_current_view_base);
    tToPart_list l_tToPart_list_1 =
	tToPart_list_1->rewrite(kc_current_view_base);
    tFromPart_list l_tFromPart_list_1 =
	tFromPart_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case newNames_enum: {
	    newNames_class& kc_current_view=static_cast<newNames_class&>(kc_current_view_base);
#line 326 "ast-rewrite.k"
	    if ((KC_TRACE_PROVIDED((globals::ASTEmap[l_integer_1->value]->attributes["outputVariable"] != ""), "ast-rewrite.k", 326, this))) { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 326, this);
#line 326 "ast-rewrite.k"
		const standardElements a = l_standardElements_1;
#line 326 "ast-rewrite.k"
		const tCorrelation_list b = l_tCorrelation_list_1;
#line 326 "ast-rewrite.k"
		const tToPart_list c = l_tToPart_list_1;
#line 326 "ast-rewrite.k"
		const tFromPart_list d = l_tFromPart_list_1;
#line 326 "ast-rewrite.k"
		const integer _id = l_integer_1;
#line 329 "ast-rewrite.k"
		tInvoke kc_result = SynchronousInvoke(a, b, c, d, _id);

#line  1180 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",329,kc_result);
		return (const_cast<const impl_tInvoke*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 333 "ast-rewrite.k"
	    { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 333, this);
#line 332 "ast-rewrite.k"
		const standardElements a = l_standardElements_1;
#line 332 "ast-rewrite.k"
		const tCorrelation_list b = l_tCorrelation_list_1;
#line 332 "ast-rewrite.k"
		const tToPart_list c = l_tToPart_list_1;
#line 332 "ast-rewrite.k"
		const tFromPart_list d = l_tFromPart_list_1;
#line 332 "ast-rewrite.k"
		const integer _id = l_integer_1;
#line 335 "ast-rewrite.k"
		tInvoke kc_result = AsynchronousInvoke(a, b, c, d, _id);

#line  1200 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",335,kc_result);
		return (const_cast<const impl_tInvoke*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    }
	}
	default:;
    }
    if ((l_standardElements_1 == standardElements_1) &&  (l_tCorrelation_list_1 == tCorrelation_list_1) &&  (l_tToPart_list_1 == tToPart_list_1) &&  (l_tFromPart_list_1 == tFromPart_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tInvoke_volatile_Invoke* kc_result= volatile_Invoke(l_standardElements_1, l_tCorrelation_list_1, l_tToPart_list_1, l_tFromPart_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tAssign impl_tAssign_Assign::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tCopy_list l_tCopy_list_1 =
	tCopy_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tCopy_list_1 == tCopy_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tAssign_Assign* kc_result= Assign(l_standardElements_1, l_tCopy_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCopy_list impl_tCopy_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tCopy l_tCopy_1 =
	    tCopy_1->rewrite(kc_current_view_base);
	tCopy_list l_tCopy_list_1 =
	    tCopy_list_1->rewrite(kc_current_view_base);
	if ((l_tCopy_1 == tCopy_1) &&  (l_tCopy_list_1 == tCopy_list_1))
	    return this;
	else {
	    impl_tCopy_list* kc_result= ConstCopy_list(l_tCopy_1, l_tCopy_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tCopy impl_tCopy_Copy::rewrite(rview kc_current_view_base)
{
    tFrom l_tFrom_1 =
	tFrom_1->rewrite(kc_current_view_base);
    tTo l_tTo_1 =
	tTo_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_tFrom_1 == tFrom_1) &&  (l_tTo_1 == tTo_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tCopy_Copy* kc_result= Copy(l_tFrom_1, l_tTo_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tFrom impl_tFrom_From::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tFrom_From* kc_result= From(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tTo impl_tTo_To::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tTo_To* kc_result= To(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tValidate impl_tValidate_Validate::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tValidate_Validate* kc_result= Validate(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tEmpty impl_tEmpty_Empty::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tEmpty_Empty* kc_result= Empty(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tOpaqueActivity impl_tOpaqueActivity_OpaqueActivity::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tOpaqueActivity_OpaqueActivity* kc_result= OpaqueActivity(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tWait impl_tWait_Wait::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tWait_Wait* kc_result= Wait(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tExit impl_tExit_Exit::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tExit_Exit* kc_result= Exit(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tThrow impl_tThrow_Throw::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tThrow_Throw* kc_result= Throw(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tRethrow impl_tRethrow_Rethrow::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tRethrow_Rethrow* kc_result= Rethrow(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCompensate impl_tCompensate_CompensateScope::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_casestring_1 == casestring_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tCompensate_CompensateScope* kc_result= CompensateScope(l_standardElements_1, l_casestring_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tCompensate impl_tCompensate_Compensate::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tCompensate_Compensate* kc_result= Compensate(l_standardElements_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tSequence impl_tSequence_Sequence::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    activity_list l_activity_list_1 =
	activity_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_activity_list_1 == activity_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tSequence_Sequence* kc_result= Sequence(l_standardElements_1, l_activity_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tIf impl_tIf_If::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tElseIf_list l_tElseIf_list_1 =
	tElseIf_list_1->rewrite(kc_current_view_base);
    tElse l_tElse_1 =
	tElse_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tElseIf_list_1 == tElseIf_list_1) &&  (l_tElse_1 == tElse_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tIf_If* kc_result= If(l_standardElements_1, l_tElseIf_list_1, l_tElse_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tElseIf_list impl_tElseIf_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tElseIf l_tElseIf_1 =
	    tElseIf_1->rewrite(kc_current_view_base);
	tElseIf_list l_tElseIf_list_1 =
	    tElseIf_list_1->rewrite(kc_current_view_base);
	if ((l_tElseIf_1 == tElseIf_1) &&  (l_tElseIf_list_1 == tElseIf_list_1))
	    return this;
	else {
	    impl_tElseIf_list* kc_result= ConstElseIf_list(l_tElseIf_1, l_tElseIf_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tElseIf impl_tElseIf_ElseIf::rewrite(rview kc_current_view_base)
{
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tElseIf_ElseIf* kc_result= ElseIf(l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tElse impl_tElse_NoElse::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tElse_NoElse* kc_result= NoElse(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tElse impl_tElse_Else::rewrite(rview kc_current_view_base)
{
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tElse_Else* kc_result= Else(l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tWhile impl_tWhile_While::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tWhile_While* kc_result= While(l_standardElements_1, l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tRepeatUntil impl_tRepeatUntil_RepeatUntil::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_activity_1 == activity_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tRepeatUntil_RepeatUntil* kc_result= RepeatUntil(l_standardElements_1, l_activity_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tForEach impl_tForEach_ForEach::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    casestring l_casestring_2 =
	casestring_2->rewrite(kc_current_view_base);
    casestring l_casestring_3 =
	casestring_3->rewrite(kc_current_view_base);
    tScope l_tScope_1 =
	tScope_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_casestring_1 == casestring_1) &&  (l_casestring_2 == casestring_2) &&  (l_casestring_3 == casestring_3) &&  (l_tScope_1 == tScope_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tForEach_ForEach* kc_result= ForEach(l_standardElements_1, l_casestring_1, l_casestring_2, l_casestring_3, l_tScope_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tPick impl_tPick_Pick::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tOnMessage_list l_tOnMessage_list_1 =
	tOnMessage_list_1->rewrite(kc_current_view_base);
    tOnAlarm_list l_tOnAlarm_list_1 =
	tOnAlarm_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tOnMessage_list_1 == tOnMessage_list_1) &&  (l_tOnAlarm_list_1 == tOnAlarm_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tPick_Pick* kc_result= Pick(l_standardElements_1, l_tOnMessage_list_1, l_tOnAlarm_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tFlow impl_tFlow_Flow::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tLink_list l_tLink_list_1 =
	tLink_list_1->rewrite(kc_current_view_base);
    activity_list l_activity_list_1 =
	activity_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tLink_list_1 == tLink_list_1) &&  (l_activity_list_1 == activity_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tFlow_Flow* kc_result= Flow(l_standardElements_1, l_tLink_list_1, l_activity_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tLink_list impl_tLink_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tLink l_tLink_1 =
	    tLink_1->rewrite(kc_current_view_base);
	tLink_list l_tLink_list_1 =
	    tLink_list_1->rewrite(kc_current_view_base);
	if ((l_tLink_1 == tLink_1) &&  (l_tLink_list_1 == tLink_list_1))
	    return this;
	else {
	    impl_tLink_list* kc_result= ConstLink_list(l_tLink_1, l_tLink_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tLink impl_tLink_Link::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tLink_Link* kc_result= Link(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tScope impl_tScope_Scope::rewrite(rview kc_current_view_base)
{
    standardElements l_standardElements_1 =
	standardElements_1->rewrite(kc_current_view_base);
    tVariable_list l_tVariable_list_1 =
	tVariable_list_1->rewrite(kc_current_view_base);
    tMessageExchange_list l_tMessageExchange_list_1 =
	tMessageExchange_list_1->rewrite(kc_current_view_base);
    tFaultHandlers l_tFaultHandlers_1 =
	tFaultHandlers_1->rewrite(kc_current_view_base);
    tCompensationHandler l_tCompensationHandler_1 =
	tCompensationHandler_1->rewrite(kc_current_view_base);
    tTerminationHandler l_tTerminationHandler_1 =
	tTerminationHandler_1->rewrite(kc_current_view_base);
    tEventHandlers l_tEventHandlers_1 =
	tEventHandlers_1->rewrite(kc_current_view_base);
    tCorrelationSet_list l_tCorrelationSet_list_1 =
	tCorrelationSet_list_1->rewrite(kc_current_view_base);
    activity l_activity_1 =
	activity_1->rewrite(kc_current_view_base);
    tPartnerLink_list l_tPartnerLink_list_1 =
	tPartnerLink_list_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_standardElements_1 == standardElements_1) &&  (l_tVariable_list_1 == tVariable_list_1) &&  (l_tMessageExchange_list_1 == tMessageExchange_list_1) &&  (l_tFaultHandlers_1 == tFaultHandlers_1) &&  (l_tCompensationHandler_1 == tCompensationHandler_1) &&  (l_tTerminationHandler_1 == tTerminationHandler_1) &&  (l_tEventHandlers_1 == tEventHandlers_1) &&  (l_tCorrelationSet_list_1 == tCorrelationSet_list_1) &&  (l_activity_1 == activity_1) &&  (l_tPartnerLink_list_1 == tPartnerLink_list_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_tScope_Scope* kc_result= Scope(l_standardElements_1, l_tVariable_list_1, l_tMessageExchange_list_1, l_tFaultHandlers_1, l_tCompensationHandler_1, l_tTerminationHandler_1, l_tEventHandlers_1, l_tCorrelationSet_list_1, l_activity_1, l_tPartnerLink_list_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

standardElements impl_standardElements_NoStandardElements::rewrite(rview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case implicit_enum: {
	    implicit_class& kc_current_view=static_cast<implicit_class&>(kc_current_view_base);
#line 182 "ast-rewrite.k"
	    { KC_TRACE_REWRITE_MATCH(kc_current_view, "ast-rewrite.k", 182, this);
#line 188 "ast-rewrite.k"
		standardElements kc_result = StandardElements(NiltTarget_list(), NiltSource_list(), standardJoinCondition());

#line  1698 "ast-system-rk.cc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"ast-rewrite.k",188,kc_result);
		return (const_cast<const impl_standardElements*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    }
	}
	default:;
    }
    return this;

}

standardElements impl_standardElements_StandardElements::rewrite(rview kc_current_view_base)
{
    tTarget_list l_tTarget_list_1 =
	tTarget_list_1->rewrite(kc_current_view_base);
    tSource_list l_tSource_list_1 =
	tSource_list_1->rewrite(kc_current_view_base);
    joinCondition l_joinCondition_1 =
	joinCondition_1->rewrite(kc_current_view_base);
    if ((l_tTarget_list_1 == tTarget_list_1) &&  (l_tSource_list_1 == tSource_list_1) &&  (l_joinCondition_1 == joinCondition_1))
	return this;
    else {
	impl_standardElements_StandardElements* kc_result= StandardElements(l_tTarget_list_1, l_tSource_list_1, l_joinCondition_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tTarget_list impl_tTarget_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tTarget l_tTarget_1 =
	    tTarget_1->rewrite(kc_current_view_base);
	tTarget_list l_tTarget_list_1 =
	    tTarget_list_1->rewrite(kc_current_view_base);
	if ((l_tTarget_1 == tTarget_1) &&  (l_tTarget_list_1 == tTarget_list_1))
	    return this;
	else {
	    impl_tTarget_list* kc_result= ConstTarget_list(l_tTarget_1, l_tTarget_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tTarget impl_tTarget_Target::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tTarget_Target* kc_result= Target(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

tSource_list impl_tSource_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	tSource l_tSource_1 =
	    tSource_1->rewrite(kc_current_view_base);
	tSource_list l_tSource_list_1 =
	    tSource_list_1->rewrite(kc_current_view_base);
	if ((l_tSource_1 == tSource_1) &&  (l_tSource_list_1 == tSource_list_1))
	    return this;
	else {
	    impl_tSource_list* kc_result= ConstSource_list(l_tSource_1, l_tSource_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

tSource impl_tSource_Source::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_tSource_Source* kc_result= Source(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

joinCondition impl_joinCondition_userDefinedJoinCondition::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_joinCondition_userDefinedJoinCondition* kc_result= userDefinedJoinCondition(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

joinCondition impl_joinCondition_standardJoinCondition::rewrite(rview kc_current_view_base)
{
    return this;

}

expression impl_expression_Disjunction::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Disjunction* kc_result= Disjunction(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Conjunction::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Conjunction* kc_result= Conjunction(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Term::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_expression_Term* kc_result= Term(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

} // namespace kc
