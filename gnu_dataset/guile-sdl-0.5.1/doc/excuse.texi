@node Excuses
@chapter Excuses

Here are some notes on interface elements from
@file{/usr/include/SDL/*.h} that are not yet
wrapped by Guile-SDL.  As things progress elements
will be removed until an irreducible set remains.

Interface elements have zero or more @dfn{attributes},
some of which indicate irreducibility (such as @code{probably-never}).
Following the attribute groupings are specific notes on those
elements that are particular in some way.  The presentation order
is not significant.

@section Categories

For brevity, we omit the @code{SDL_} prefix in the groupings.
There are two speical cases: @code{(N)} stands for @code{SDLNet_},
and @code{(M)} stands for @code{Mix_}.

@table @code

@item internal

These interface elements are exposed in the C header
but should not be exposed to Scheme, for reasons of
either safety or inutility.

@verbatim
  SoftStretch  LowerBlit  UpperBlit
  VideoInit  VideoQuit  AudioQuit  AudioInit
  (M)GetChunk
@end verbatim

@item probably-never

Don't expect to see these exposed to Scheme, ever!

@verbatim
  SoftStretch  SaveBMP_RW  LoadBMP_RW
  VideoInit  VideoQuit  InitQuickDraw  RegisterApp
  SetModuleHandle  getenv  putenv
  ClearError  SetError  WriteBE64  WriteLE64
  WriteBE32  WriteLE32  WriteBE16  WriteLE16
  ReadBE64  ReadLE64  ReadBE32  ReadLE32
  ReadBE16  ReadLE16  CloseAudio  UnlockAudio
  LockAudio  MixAudio  ConvertAudio  BuildAudioCVT
  FreeWAV  LoadWAV_RW  PauseAudio  GetAudioStatus
  OpenAudio  AudioDriverName  AudioQuit
  AudioInit  (M)GetMusicHookData  (M)GetChunk
@end verbatim

@item doze

Windoze support, blech.

@verbatim
  SaveBMP_RW  LoadBMP_RW  RegisterApp
  SetModuleHandle
@end verbatim

@item threading-implications

Will (any :--) ttn ever be ready for parallelism?

@verbatim
  RemoveTimer  AddTimer  SetTimer  KillThread
  WaitThread  GetThreadID  ThreadID
  CreateThread  CondWaitTimeout  CondWait
  CondBroadcast  CondSignal  DestroyCond
  CreateCond  SemValue  SemPost  SemWaitTimeout
  SemTryWait  SemWait  DestroySemaphore  CreateSemaphore
  DestroyMutex  mutexV  mutexP  CreateMutex
@end verbatim

@item todo

To be completed by Guile-SDL 1.0 (that is, if All Goes Well).

@verbatim
  KillThread  WaitThread  GetThreadID
  ThreadID  CreateThread  CondWaitTimeout
  CondWait  CondBroadcast  CondSignal
  DestroyCond  CreateCond  SemValue
  SemPost  SemWaitTimeout  SemTryWait
  SemWait  DestroySemaphore  CreateSemaphore
  DestroyMutex  mutexV  mutexP  CreateMutex
  (N)Init  (N)Quit  (N)ResolveHost  (N)ResolveIP
  (N)TCP_Open  (N)TCP_Accept  (N)TCP_GetPeerAddress
  (N)TCP_Send  (N)TCP_Recv  (N)TCP_Close
  (N)AllocPacket  (N)ResizePacket  (N)FreePacket
  (N)AllocPacketV  (N)FreePacketV  (N)UDP_Open
  (N)UDP_Bind  (N)UDP_Unbind  (N)UDP_GetPeerAddress
  (N)UDP_SendV  (N)UDP_Send  (N)UDP_RecvV
  (N)UDP_Recv  (N)UDP_Close  (N)AllocSocketSet
  (N)AddSocket  (N)DelSocket  (N)CheckSockets
  (N)SocketReady  (N)FreeSocketSet  (N)Write16
  (N)Write32  (N)Read16  (N)Read32  (M)SetPostMix
  (M)HookMusic  (M)HookMusicFinished  (M)ChannelFinished
  (M)RegisterEffect  (M)UnregisterEffect  (M)UnregisterAllEffects
  (M)SetReverb  (M)SetReverseStereo  (M)SetMusicPosition
  (M)SetSynchroValue  (M)GetSynchroValue
@end verbatim

@item rwops

Read-write operations.

@verbatim
  FreeRW  AllocRW  RWFromMem  RWFromConstMem
  RWFromFile
@end verbatim

@item macos

Macintosh support, meh.

@verbatim
  InitQuickDraw
@end verbatim

@item endian

These concern little- vs. big-endian i/o.
Perhaps Guile already provides decent alternatives.

@verbatim
  WriteBE64  WriteLE64  WriteBE32  WriteLE32
  WriteBE16  WriteLE16  ReadBE64  ReadLE64
  ReadBE32  ReadLE32  ReadBE16  ReadLE16
@end verbatim

@item use-mixer-instead

These elements are obsoleted by the module @code{(sdl mixer)}.

@verbatim
  CloseAudio  UnlockAudio  LockAudio
  MixAudio  ConvertAudio  BuildAudioCVT
  FreeWAV  LoadWAV_RW  PauseAudio  GetAudioStatus
  OpenAudio  AudioDriverName  AudioQuit
  AudioInit
@end verbatim

@item hook

Callback from SDL to Scheme code.  Can be tricky to get right...

@verbatim
  (M)SetPostMix  (M)HookMusic  (M)HookMusicFinished  (M)ChannelFinished
  (M)RegisterEffect  (M)UnregisterEffect  (M)UnregisterAllEffects
@end verbatim
@end table

@section Specific Notes

@table @code

@item SDL_SoftStretch
@verbatim
SDL_video.h sez:
/* Not in public API at the moment - do not use! */
@end verbatim

@item SDL_CreateRGBSurfaceFrom
@verbatim
not sure what this is useful for
@end verbatim

@item SDL_GL_UpdateRects
@verbatim
arglist: (int numrects, SDL_Rect* rects)

we can either try to map uniform vectors (of smobs),
or introduce a `RectVector' smob.
@end verbatim

@item SDL_VideoInit
@verbatim
actually, SDL_video.h sez:
/* These functions are used internally, and should not be used unless you
 * have a specific need to specify the video driver you want to use.
 * You should normally use SDL_Init() or SDL_InitSubSystem().
 * ...
 */
@end verbatim

@item SDL_VideoQuit
@verbatim
see note for `SDL_VideoInit'
@end verbatim

@item SDL_Linked_Version
@verbatim
SDL_version.h sez:
/* This function gets the version of the dynamically linked SDL library.
   it should NOT be used to fill a version structure, instead you should
   use the SDL_Version() macro.
 */
@end verbatim

@item SDL_GetWMInfo
@verbatim
return value for proc `get-wm-info' does not presently
include the `lock_func' and `unlock_func' hooks.
support for those will be added after i figure out
how to "thunkify" them.
@end verbatim

@item SDL_GetKeyName
@verbatim
why do we want to know the name of a key?
@end verbatim

@item SDL_AudioQuit
@verbatim
SDL_audio.h sez:
/* These functions are used internally, and should not be used unless you
 * have a specific need to specify the audio driver you want to use.
 * You should normally use SDL_Init() or SDL_InitSubSystem().
 */
@end verbatim

@item SDL_AudioInit
@verbatim
see note for `SDL_AudioQuit'
@end verbatim

@item SDLNet_AddSocket
@verbatim
there are also:
#define SDLNet_TCP_AddSocket
#define SDLNet_UDP_AddSocket
@end verbatim

@item SDLNet_DelSocket
@verbatim
there are also:
#define SDLNet_TCP_DelSocket
#define SDLNet_UDP_DelSocket
@end verbatim

@item Mix_GetMusicHookData
@verbatim
If (when) `Mix_HookMusic' is added, it will not support "user data".
It's better to use object properties for that.
@end verbatim
@end table
