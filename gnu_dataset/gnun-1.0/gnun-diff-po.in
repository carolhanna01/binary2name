#! @BASH@

# Copyright (C) 2013, 2014, 2016 Free Software Foundation, Inc.

# This file is part of GNUnited Nations.

# GNUnited Nations is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# GNUnited Nations is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNUnited Nations.  If not, see <https://www.gnu.org/licenses/>.

function version () {
cat <<EOF
gnun-diff-po (@PACKAGE_NAME@) @PACKAGE_VERSION@
Copyright (C) 2014 Free Software Foundation, Inc.
You may redistribute copies of @PACKAGE_NAME@
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
EOF
}

function usage () {
cat <<EOF
Usage: gnun-diff-po OPTION... PO_FILE1 PO_FILE2
Generate HTML page with highlighted differences in translations
from PO_FILE2 against translations from PO_FILE1.

Options:
  -1, --merge-against-first  Adjust the original strings of PO_FILE2
                               against PO_FILE1 when their sets differ
  -2, --merge-against-second Adjust the original strings of PO_FILE1
                               against PO_FILE2 when their sets differ
      --no-common            Suppress strings that don't differ
  -t, --title=TITLE          Specify the title for the HTML page
  -v, --version              Display version info and exit
  -h, --help                 Display this help and exit

Report bugs to @PACKAGE_BUGREPORT@
@PACKAGE_NAME@ home page: <@PACKAGE_URL@>
General help using GNU software: <https://www.gnu.org/gethelp/>
EOF
}

function two_files_needed () {
  echo 1>&2 "$0:" Two FILE arguments are required.
}

function check_po_file () {
  if ! @MSGFMT@ -o /dev/null -c -- "$1"; then
    echo 1>&2 "$0: File \`$1' contains errors."
    exit 1
  fi
}

title=
merge_against_second=
awk_args=
file1=
file2=

function parse_option () {
  skip_option=
  trimmed_option=
  end_of_options=
  case "$1" in
      --help | -h* )
	  usage
	  exit 0
	  ;;
      --version | -v* )
	  version
	  exit 0
	  ;;
      --no-common )
	  awk_args="$awk_args -v no_common=1"
	  ;;
      -1 | --merge-against-first )
	  merge_against_second=""
	  ;;
      -1* )
	  merge_against_second=""
          trimmed_option="${1#-1}"
          ;;
      -2 | --merge-against-second )
	  merge_against_second=yes
	  ;;
      -2* )
	  merge_against_second=yes
          trimmed_option="${1#-2}"
          ;;
      -t | --title )
          skip_option=yes
	  title="$2"
	  ;;
      --title=* )
	  title="${1#--title=}"
	  ;;
      -t* )
	  title="${1#-t}"
	  ;;
      -- )
          end_of_options=yes
	  ;;
      -* )
          echo 1>&2 "$0:" Invalid option -- \'$1\'.
          exit 1
	  ;;
      * )
         if test "x$file1" = x; then
            file1="$1"
          elif test "x$file2" = x; then
            file2="$1"
          else
            two_files_needed
          fi
	  ;;
  esac
}

while [ $# -ge 1 ]; do
  current_option="$1"
  while test -n "$current_option";do
    parse_option "$current_option" "$2"
    if test -n "$skip_option"; then
      shift
    fi
    if test -n "$trimmed_option"; then
      current_option=-"$trimmed_option"
    else
      current_option=
    fi
  done
  shift
  if test -n "$end_of_options"; then
    break
  fi
done

if test -z "$file1"; then
  if test $# -gt 0; then
    file1="$1"
    shift
  else
    two_files_needed
  fi
fi
if test "x$file2" = x; then
  if test $# -gt 0; then
    file2="$1"
    shift
  else
    two_files_needed
  fi
fi
if test $# -gt 0; then
  two_files_needed
fi

if test -d "$file2"; then
  file2="${file2%/}/${file1##*/}"
fi

check_po_file "$file1"
check_po_file "$file2"

title=${title:-$file1 vs. $file2}
from_file="$file1"
to_file="$file2"

# File to count msgid number, since msgexec doesn't provide
# a variable for it, and for POT when merging is needed.
temp=`@MKTEMP@ gnun-diff-po.XXXXXXXXXX`
# Files for po-msg-diff use; we could create them in po-msg-diff,
# but then mktemp and rm would run for every compared msgstr pair.
temp1=`@MKTEMP@ gnun-diff-po1.XXXXXXXXXX`
temp2=`@MKTEMP@ gnun-diff-po2.XXXXXXXXXX`
# File for the merged PO.
temp3=`@MKTEMP@ gnun-diff-po3.XXXXXXXXXX`
# Temporary file with cleared ``fuzzy'' flags and removed obsolete entries.
temp4=`@MKTEMP@ gnun-diff-po4.XXXXXXXXXX`
trap 'rm -f "$temp" "$temp1" "$temp2" "$temp3" "$temp4"' EXIT

cat <<EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<!-- Generated by $0. -->
<title>$title (`date`)</title>
<style type="text/css">
  span.removed { background-color: #faa; color: #000 }
  span.inserted { background-color: #afa; color: #000 }
  td.modified { background-color: #ffa; color: #000 }
  td.msgid { background-color: #bbd; color: #000 }
</style>
</head>
<body>
<h2>$title</h2>
EOF

if @MSGCAT@ --less-than=2 -- "$file1" "$file2" | @GREP@ -q .; then
  case "x$merge_against_second" in
    x ) merge_from="$file2"; merge_to="$file1"; to_file="$temp3" ;;
    * ) merge_from="$file1"; merge_to="$file2"; from_file="$temp3" ;;
  esac
  # Strip translations from merge_from because we don't want to use
  # the translations from merge_to; in other words, regenerate POT.
  @SED@ \
'# Pass the header (msgid="") untouched.
/^msgid ""[[:space:]]*$/{
  N; /msgid ""[[:space:]]*\nmsgstr /{:pass; N; /\n$/!b pass; p; d; }
}
# Replace all other translations with empty strings.
/^msgstr /{ s/.*/msgstr ""/; p; :egin; s/.*//; N; /^\n$/!begin; s/.// }' \
     < "$merge_to" > $temp
  if @MSGMERGE@ -q -- "$merge_from" "$temp" > "$temp3" ; then
    cat <<EOF
<p><em>Note:</em> the files have been merged in order to compare them.</p>
EOF
  else
    cat <<EOF
<p><strong>ERROR:</strong> couldn't merge PO files.</p>
</body>
</html>
EOF
    # We managed to generate a hopefully valid HTML, so exit successfully.
    exit 0
  fi
fi

echo 0 > "$temp"

echo "<table border=\"1\">"

# We clear fuzzy in order to make the script compare the updated translations
# with their previous versions; the obsolete strings are removed because
# the script can confuse them with current versions and provide the diffs
# against the translations of obsolete strings.

# Sed provides "empty" (from wdiff's point of view) translations
# for untranslated msgids in order to show new and removed translations.
@SED@ '/^msgstr ""/ { N; s/^msgstr ""\n$/msgstr " "\n/ }' < "$to_file" \
  | @MSGATTRIB@ --force-po --clear-fuzzy --no-obsolete - > "$temp4"
# `--no-wrap' ensures that the gettext markers, `#-#-#...#-#-#\n',
# occupy single lines even when the name of the article is fairly long.
@SED@ '/^msgstr ""/ { N; s/^msgstr ""\n$/msgstr " "\n/ }' < "$from_file" \
  | @MSGATTRIB@ --force-po --clear-fuzzy --no-obsolete - \
  | @MSGCAT@ --no-wrap --force-po - "$temp4" \
  | @AWK@ -f @pkglibexecdir@/diff-po.awk $awk_args

cat <<EOF
</table>
</body>
</html>
EOF
