\input texinfo
@c %**start of header
@setfilename web-trans.info
@include version1.texi
@settitle GNU Web Translators Manual
@afourpaper
@c %**end of header

@copying

This manual is a guide for the GNU Web Translators.@* Last updated on
@value{UPDATED}, for GNUnited Nations version @value{VERSION}.
@sp 1
Copyright @copyright{} 2009, 2010, 2011, 2012, 2013,
  2014, 2015, 2016, 2017, 2018, 2019 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end quotation
@end copying

@titlepage
@title GNU Web Translators Manual
@subtitle Documentation for translators of www.gnu.org
@subtitle (last updated @value{UPDATED}, for GNUnited Nations version @value{VERSION})
@author by Yavor Doganov <@email{yavor@@gnu.org}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@dircategory GNU organization
@direntry
* GNU Web Translators: (web-trans).  Guidelines and procedures for
                                       www.gnu.org translators.
@end direntry

@ifnottex
@node Top
@top GNU Web Translators Manual
@insertcopying
@end ifnottex

@menu
* Introduction::         Begin of the journey.
* Members::              Information for translation team members.
* Leaders::              Guidelines and procedures for team leaders.
* Translation Process::  General guidelines and tips.
* Copying This Manual::  The GNU Free Documentation License.
* Index::
@end menu

@node Introduction
@chapter Introduction

This manual is an attempt to describe in detail the process of
translating www.gnu.org articles---how to join a team, or start a new
one, the responsibilities of the team members and leaders, as well as
some peculiarities of the GNU Project's website when it comes to
localization.

The GNU website contains hundreds of documents, most of them
philosophical articles (essays) and technical documents which need to be
translated to make them available to a broader audience.  This is
especially important for the philosophy-related materials, as many
people do not speak English and even those that do usually prefer to
read such articles in their native language.  Dealing with the task of
translating a website this large is a hard job, and too often people
volunteering as translators get frustrated or lose interest in keeping
up with that work.  Reading this manual, and the related GNUN manual
(@pxref{Top, , GNUnited Nations, gnun, The GNUnited Nations Manual}), is
just the tip of the iceberg.  This is not meant to discourage any
potential volunteer; rather, we prefer to be honest and to give
preliminary estimation of the work/responsibility involved---if you feel
you are not in a position to help you may move on to a smaller project
before going through all procedures.

It is important to realize that being a GNU Web Translator is a hard job
at all levels, but your help is much appreciated and is invaluable
contribution to the society.  While there are many people who contribute
to our community by writing free software (and their number is
constantly increasing), the ones actively engaged in teaching others to
appreciate and defend their freedom are only a few.  Consequently and
rather unfortunately, there are not so many volunteers willing to
maintain in the long term translations of the various essays that
describe the fundamental values of the free software movement.

Translators of the @uref{https://www.gnu.org} website are organized in
language teams.  Each team has one or more co-ordinators, who are
responsible for the respective team; they are also referred to as
leaders or (when multiple in a single team) co-leaders.  The
co-ordinators participate in the Savannah @samp{trans-coord}
organizational project, which is managed by the GNU Web Translation
Managers (also known as Translation Managers or web-translators).
The manual is organized in chapters that follow the
organizational structure of the whole translation project.

For the issues common for all translators,
@pxref{Translation Process}. The sections of that chapter are sorted
so that those interesting for less involved people (like occasional
contributors) come first; the technical details tend to be at the end.

If you wish to join a translation team or contribute a translation or
two, @pxref{Members}.  If your intention is to form a translation team,
@pxref{Leaders}.

@node Members
@chapter Team Members

@cindex team members
Being a team member means to co-operate with a group of other people,
working under the co-ordinatorship of the appointed team leader.
Usually, this involves translating articles and reviewing/proof-reading
other people's translations, participating in discussions about
terminology issues, and sometimes performing clean-up tasks.

@menu
* Joining::             How to join a translation team.
* Submitting::          Submitting a translation when there is no team.
* Leaving a Team::      Leave when you have to.
@end menu

@node Joining
@section Joining a Team

@cindex Translations README
To join a team, please first look at the existing teams in
@uref{https://www.gnu.org/@/server/@/standards/@/README.translations.html#TranslationsUnderway,
Translations README}.
Chances are that there is already an established team.  If there is no
team listed for your language, this means that:

@itemize
@item
There is no team established and there are no translations to this
language.

@item
Some translations were submitted by occasional contributors, but no team
has ever been formed.

@item
The page is not updated to reflect the current situation (this shouldn't
happen, but it's a possibility anyway).
@end itemize

If the team is marked as @dfn{orphaned} (``New coordinator needed''),
there is no problem: you can
still submit your translation to @email{web-translators@@gnu.org}
(@pxref{Submitting}).  In case you want to establish a new translation
team or become a co-ordinator of an existing one, please refer to the
next chapter, @pxref{Leaders}.

@cindex contacting team
@cindex team, contacting
Contacting the team is best done via Savannah---each translation team
has its own project, named @samp{www-@var{lang}}, with the project
page being
@indicateurl{https://savannah.gnu.org/@/projects/@/www-@var{lang}}.
All teams should have mailing lists, typically in the form
@email{www-@var{lang}-@dots{}@@gnu.org}.  Some teams have homepages,
@indicateurl{https://www.gnu.org/@/server/@/standards/@/translations/@var{lang}}
with additional contact details and procedures for team members.

You could also write directly to the team leader via the Savannah
interface---that way your request will be recorded by Savannah and can be
tracked or completed when the membership is approved.

The actual process of submitting translations for review varies from
team to team, as teams have certain liberties to organize themselves as
they see fit.  Thus, this manual does not make any attempt to cover that
aspect---please refer to the team-specific documentation (if any) or ask
the co-ordinator.

Certainly, it is not mandatory to be an active team member to contribute
a translation or two.  If you feel that you don't have the time to
participate actively, that is fine; you can still send your translation
to the team.  No contributions should be rejected.

If you do not hear from the team within a reasonable time frame (say,
two weeks), please write to @email{web-translators@@gnu.org}.

For general information about the translation process,
@pxref{Translation Process}.

@node Submitting
@section How to Submit a Translation

Everyone can still submit translations even if there is no translation
team formed.  There are two ways to do that---following the existing
procedures, which is the preferred way, and sending it as plain text,
which means more work for a limited group of volunteers (the Translation
Managers) to convert the translation in @file{.po} format.

To make the work with PO files easier, team co-ordinators can write
a team-specific guide for people who are not familiar with that format,
like
@url{https://www.gnu.org/@/server/@/standards/@/translations/@/po-how-to.html}.

@menu
* Submitting as PO::
* Submitting as Plain Text::
@end menu

@node Submitting as PO
@subsection How to Submit a Translation in PO Format

@cindex GNUN
All translations@footnote{Well---not really, but the goal is to maintain
all of them.} are maintained via
@uref{https://www.gnu.org/@/software/@/gnun/, GNUN}, which
significantly eases
maintenance and avoids the unpleasant situation where a translation is
lagging behind the original.  @xref{Advantages, , , gnun, The GNUnited
Nations Manual}.

Since September 2008 all new translations at gnu.org are installed in
@file{.po} format, and the @file{.html} is generated automatically.
Here are the steps to produce and submit such a translation:

@itemize
@item
@cindex web pages, checking out
@cindex checking out web pages
Make a checkout of the CVS Web repository of the @samp{www} Savannah
project.  You can find generic instructions at
@uref{https://savannah.gnu.org/@/cvs/@/?group=www}.  All updates to the
website are done as commits in the repository, so you would need an
up-to-date working copy.  Anonymous access works under any
circumstances, i.e. it is not mandatory to have a registered account at
Savannah to use it.  You can also check out only a specific directory,
for example:

@example
cvs -z3 -d:pserver:anonymous@@cvs.savannah.gnu.org:/web/www co www/gnu
@end example

This command will fetch only the @file{/gnu} directory---in other words,
all articles at @uref{https://www.gnu.org/gnu}.

You can also fetch single files by their respective URLs.  For example,
the URL for the template file of
@uref{https://www.gnu.org/@/philosophy/@/free-sw.html} is
@uref{https://www.gnu.org/@/philosophy/@/po/@/free-sw.pot}; the URL for
its @var{lang} PO file (when available) is always
@uref{https://www.gnu.org/@/philosophy/@/po/@/free-sw.@var{lang}.po}:

@example
wget https://www.gnu.org/philosophy/po/free-sw.pot
@end example

@item
Assuming you already know the article you want to translate, you have to
create an empty @file{@var{article}.@var{lang}.po} file and then
translate all messages with a PO editor.  @xref{New Translation, , ,
gnun, The GNUnited Nations Manual}.  For an almost complete list of PO
editors, @pxref{PO Editors}.

@item
When you are pleased with the translation, check that the PO file is
valid and submit it to @email{web-translators@@gnu.org}, attached to
your message.  The web-translators will review (to the best of their
ability) the translation and will install it in the repository.

@item
@cindex server templates
In order for GNUN to be able to generate (and subsequently update) a fully
translated page, the language should have the server templates
available as PO files.  These templates are short, and translating them
shouldn't take much time.  If the language code is present in the
@code{TEMPLATE_LINGUAS} variable at @file{server/gnun/gnun.mk}, then you
don't have to do anything.  If it is not, the required files
are defined via the @code{extra-templates} variable
in @file{server/@/gnun/@/gnun.mk}---you can translate and
submit them in the usual way, together with the translation of the
essay.

If you don't want to translate the templates for whatever reason---do
not worry, the web-translators will install empty templates (which means
the English strings will be used).
@end itemize

It is quite possible that there will be errors or typos, so once you are
informed that the translation is online, check it carefully and if
necessary, resubmit the PO file with corrections.  Do not forget to run
@code{cvs update} first and edit the updated @file{.po} file from the
repository---most probably the Translation Managers have already made
some modifications to it, usually to fix validation errors and to
complete the PO file header.

@node Submitting as Plain Text
@subsection How to Submit a Translation as Plain Text

@cindex plain text
If you feel the procedure described in the previous section is too
burdensome and unfeasible for you to follow, you can still submit a
translation in plain text.  It will be manually converted to PO file by
the GNU Web Translation Managers, which can be tricky sometimes, and
naturally, means more work for them and slower processing of your
request.

@cindex .odt files
@cindex ODF
@cindex encoding
You should @emph{never} translate the HTML markup---i.e. @emph{do not}
use the ``View Source'' functionality of your browser to translate the
raw HTML.  Most of it is irrelevant, and automatically inherited from
the markup of the original article.  Simply save your translation in a
plain text file (@file{.txt}), preferably in UTF-8 encoding.  You can
use any decent text editor for that---Emacs, Vim, gEdit, Kate,
LibreOffice (the file should be saved as @file{.txt}, not
@file{.odt}), etc.

Translate the title, the main heading and the body of the article up
to the footer.  For example, for the
@uref{https://www.gnu.org/@/philosophy/@/free-sw.html, Free Software
Definition} that would be:

@example
What is free software? - GNU Project - Free Software Foundation

What is free software?

The Free Software Definition

The free software definition presents@dots{}
@dots{}
@dots{}You can review the complete list of changes to the page through
the cvsweb interface.
@end example

Since web-translators do not speak all languages, it is essential to
mark somehow any inner markup, because very often it is hard to figure
out what translated text should be enclosed inside @code{<em>} or
@code{<a>} elements, to name a few.  The easiest way to do this is just
to use the corresponding HTML markup, although anything else is
suitable.  For example, here is how to indicate that the link ``History
section'' at the first paragraph of the same article should correspond
to ``secci@'on historial'' in the translation:

@example
Si quisiera revisar los cambios que hemos hecho, por favor vea la
@{secci@'on historial@} m@'as abajo para m@'as informaci@'on.
@end example

It is not necessary to include the value of the @code{href} attribute,
as it is already known.

If you wish your name to appear in the footer as a translator of the
article, please also provide a translation of @samp{Translation:
@var{your name}} or @samp{Translated by: @var{your name}}, as you
prefer.  Please also
state if you wish your email address to be published (some readers
prefer to send suggestions directly to the translator, but we certainly
do not require that translators must publish their address).

Finally, send the translation to @email{web-translators@@gnu.org},
either inline or as an attachment to your message.  Once online, please
check for any errors or omissions that may have resulted from the
conversion process, and report them back.

@node Leaving a Team
@section Leaving a Team

When you realize that you don't have time or can't devote sufficient
resources to perform the tasks anymore, it is prudent to inform the
translation team co-ordinator and possibly all the rest of the
team-mates.  The team leader should always have a rough estimation about
the available translators, even though there are no reliable means to
establish that.  Your announcement that you are stepping down
(temporarily or permanently) may help her in this regard.

@node Leaders
@chapter Team Co-ordinators

@cindex team leaders
@cindex co-ordinators
A gnu.org translation team leader is the person who is ultimately
responsible for organizing and managing the team, including, but not
limited to, having the final say on contributed translations and
exercising levels of control as she sees fit.

A prospective team co-ordinator should have perfect understanding of the
GNU Philosophy and the various issues the free software movement set out
to solve.  Energy and time are always needed, as well as certain
communication skills.

However, a team leader is not a dictator (for life); every action and
decision taken should have its justification and should stem from the
goals of the project at large.  Inefficient or inoperative leaders are
replaced, if necessary.

@menu
* New Team::            Procedures to establish a new team.
* Managing::            General guidelines how to manage a team.
* Review::              How to review translations.
* Commits::             CVS commits and best practices.
* Savannah::            Taking advantage of Savannah.
* Co-leaders::          Promoting members as co-leaders.
* Reports::             Reporting team status and activity.
* Stepping Down::       Orphaning the team and finding a replacement.
@end menu

@node New Team
@section How to Form a New Team

Establishing a new team is not hard, but a certain procedure ought to be
followed.  The most important thing to realize is that this is somewhat
a long-term engagement that requires a lot of spare time, communication
and technical skills, and devotion.  The only ``bonus'' team leaders
have is more work and more responsibilities.

You should read @emph{all} the documentation related to the
translation process and at the very least all important
philosophy-related articles listed on the
@uref{https://gnu.org/@/server/@/standards/@/translations/@/priorities.html,
Translation Priorities} page
before you decide to form a new team, or take over an orphaned team.
Once you have the internal feeling that having a gnu.org translation
team for your language is a must, and you are the one for this job,
follow these steps:

@enumerate
@item
@cindex Savannah, registering
@cindex Savannah account
If you do not have a Savannah account, register at
@uref{https://savannah.gnu.org/@/account/@/register.php}.  Write access
to the repository and project membership is handled via Savannah, so you
would need an account in any case.

@item
Checkout a complete working copy of the CVS Web repository as described
at @uref{https://savannah.gnu.org/@/cvs/@/?group=www}.  If you still
don't have a Savannah account or if you have registered one, but are not
yet member of any Savannah project, refer to the instructions under
``Anonymous CVS Access''.  If you are already a member of (any) Savannah
project, you can proceed with ``Project Member CVS Access via SSH'',
although you will still lack permission to commit (later, when it is
granted, you can use the same working copy).

Examine the layout and structure of the repository.  Basically, it is
mapped to the URL locations, more or less.  Take a look at the most
important materials to translate under @file{/philosophy}, @file{/gnu},
@file{/distros}, @file{/education} and @file{/licenses} directories just
to get a rough estimate about the amount of work involved@footnote{As of
December 2013, there are over 250 files to translate in ``important''
directories; their volume is about 4 MB.}.  If you are
still not scared and determined to go on further, excellent.

As you have probably observed, every directory that contains
translatable articles has a @file{/po} sub-directory, which is where the
canonical source format of the translations is stored.

@item
Submit your first message stating that you would like to establish a new
team to @email{web-translators@@gnu.org}; please mention that you have
read all the documentation and list the issues that remain unclear for
you.  The Translation Managers will answer your questions and send you
the standard questionnaire for new team leaders.  It is short and
shouldn't take more than 10--30 minutes to complete.  This questionnaire
is important, as we consider it crucial for any translation team
co-ordinator to have a good understanding of the philosophy of the free
software movement.

@item
Check if your language code is present in the variable
@code{TEMPLATE_LINGUAS} in the file @file{server/gnun/gnun.mk}.  If it
is not, the first thing to do is to translate and submit to
@email{web-translators@@gnu.org} the following files (all in the
@file{server/po/} directory):
@itemize @bullet
@item
@file{head-include-2.@var{lang}.po}

@item
@file{body-include-1.@var{lang}.po}

@item
@file{body-include-2.@var{lang}.po}

@item
@file{bottom-notes.@var{lang}.po}

@item
@file{footer-text.@var{lang}.po}

@item
@file{outdated.@var{lang}.po}

@item
@file{top-addendum.@var{lang}.po}
@end itemize

@xref{New Translation, , , gnun, The GNUnited Nations Manual}.

@itemize @minus
@item
@cindex language code
The language code (@var{lang}) should be the ISO 639-1 code of the
language, for example @samp{hy} for Armenian or @samp{el} for Greek.  If
the language is a variant such as Brazilian Portuguese or
Simplified Chinese, use small caps and a dash---@samp{pt-br} and
@samp{zh-cn} instead of @samp{pt_BR} and @samp{zh_CN}.

@item
The PO file header and initial comments should be filled as
documented.
@end itemize

@item
Any prospective team leader should submit a few translations first.
This is a process of pointing errors and omissions (which are expected
and natural); it's an important thing to do as the leader is going to
carry out these checks on her own, once the team is approved.  If there
are existing translations that are not yet in PO format, the best thing
to do is to migrate one or two.  You can use @command{find} to find out
what's already in the repository, for example:

@example
find -name \*.@var{lang}.html
@end example

@item
Submit at least two translations of your own.  We maintain a list with
priority articles on the
@uref{https://www.gnu.org/@/server/@/standards/@/translations/@/priorities.html,
Translation Priorities} page,
although it is probably hard to start with one of them.  Choose whatever
you wish, provided it is an essay and not an auxiliary page.  Avoid
translating the homepage or @file{planetfeeds.html}---they are moving
targets and keeping up would be only a distraction for both parties in
the process.  As usual, send the completed translation to
@email{web-translators@@gnu.org}.

@item
The Translation Managers will review your translations, and eventually
comment on them (mostly technical details if there is no one among them
speaking your language).  Depending on the case, it might be required to
submit a corrected file.  In any event, please take into account the
remarks in future work.

@item
If all goes well, you will receive a response inviting you to apply for
a new translation project at Savannah.  The project name should be
@samp{www-@var{lang}} where @var{lang} is, unsurprisingly, the language
code.  If such a project already exists, this step will be skipped and
you'll be made an administrator of the project and its mailing lists.
To register the
project, go to @uref{https://savannah.gnu.org/@/register/} and make sure
you fill in the required fields.  The ``Group type'' should be
@samp{www.gnu.org translation team}, and ``Project
license''---@samp{WebSite Only}.  In the ``Tarball URL'' field enter a
bogus URL such as @samp{https://www.gnu.org}.

@strong{Pay attention:} This step is a formality.  You should proceed
with the project registration only when you have been asked by
@email{web-translators@@gnu.org} to do so.  Otherwise, the submission
may appear in the task list of the Savannah Hackers for a fairly long
time, which is troublesome.

@item
When the project is approved, the team information will be added to the
list at @file{README.translations.html}, you will become a member of the
@samp{www} project (thus granting you CVS write access to the whole
repository---so be careful) and the @samp{trans-coord} project.  You'll
also be subscribed to the following mailing lists:

@itemize @minus
@item
www-commits

@item
trans-coord-discuss

@item
www-discuss
@end itemize

You'll also receive monthly automatic reports about outdated
translations.  Please contact the Translation Managers if you'd like
to receive them at a different email address.

@item
When you are appointed the admin of the new project, please edit its
configuration; in particular, write its description, create a mailing
list (don't forget to subscribe yourself!), optionally add a home
page using Web CVS repository.

If you are taking over an orphaned team, the Translation Managers will
make you the owner of its mailing lists (if any).

@end enumerate

The whole process should not take more than two weeks or maximum a
month---if this period turns out to be longer, it is an indication that
you do not have the required time and resources for this job, or
web-translators are badly lagging behind and do not process the requests
with the expected pace.

Applications for new teams are sometimes processed in
parallel@footnote{In general, we try to avoid this and direct all new
volunteers to the person who is already carrying out the process---this
is also a verification if she can co-operate easily with others.}---the
most suitable candidate is chosen in this case.  This is, undoubtedly,
based on a subjective judgment made by the Translation Managers, and
many factors are important.

The procedure for taking over an orphaned team is the same.  Once
completed, you will be made an admin of the respective
@samp{www-@var{lang}} Savannah project, or if it doesn't exist, invited
to apply for registration.  Do not automatically remove old members just
because you are starting ``afresh''---some of them might want to
continue to contribute.  Contact them privately, explaining that you're
the new appointed team co-ordinator, and ask them if they would be
willing to continue their involvement in the team.

@node Managing
@section The Gentle Art of Managing a Translation Team

It is not our ambition to describe all activities involved in managing a
team---it's very likely that you will encounter new problems, take care
of tasks nobody else is aware of, or invent new techniques and
approaches in your quest to keep things running.  Managing a team is a
hard task on all counts: communication with others, recruiting
volunteers (and keeping them as long as possible), defending certain
decisions, leading discussions about terminology issues, handling
personal conflicts within the team, technical skills when
reviewing/merging/syncing translations, etc.  The list goes on and on.

This manual can only summarize some of the most common issues and
@emph{suggest} ways to deal with them.  It is up to the team leader to
establish the precise team procedures and practices.

The @email{trans-coord-discuss@@gnu.org} mailing list was specifically
created to discuss issues that leaders encounter while managing the
teams, and for general organizational work.  Feel free to discuss
anything related to the translation process there.

@cindex native English speakers
It is strongly recommended that translation teams attempt to recruit
native English speakers in order to improve their translation process.
Translators sometimes misunderstand English idioms and expressions, and
as a result, they translate them incorrectly or in ways that are
suboptimal and confusing.  These errors are trivial to discover for the
native English speaker.

@node Review
@section Peer Review

@cindex translations, review
@cindex review
First and foremost, find at least one person for peer review.  You will
review her translations, and she will review yours (at least in the
beginning).  Being a team leader does not mean that you cannot make
mistakes; everyone does.  The mutual review (especially if done by a
larger group) is crucial for the quality of the translation process.
Too many errors are just missed (especially if they are obvious) when
the translator does a final review of her own translation.

It is good to establish a practice: Do not commit officially (i.e. in
@samp{www}, which will appear online at @uref{https://www.gnu.org}
immediately) a translation that is not yet reviewed by someone else who
is not the translator.  Always perform a final review yourself even if
the translation has been checked by another member of the team.  In
other words, every translation installed at gnu.org should pass through
your hands (read: eyes).

One common technique for performing such reviews is to use a mailing
list---the translator sends the new translation and participants comment
on specific parts, quoting them appropriately.  The benefit of this
approach is that it is straightforward, but the drawback is that there
is no automatic ``record'' about the conclusion of the specific
discussion (or sub-thread) and sometimes such discussions easily
digress, making it even harder to come up with a solution.

Another way is to use Savannah's built-in trackers (the @samp{Tasks} and
@samp{Bugs} trackers, specifically).  This is further explained in the
next section, @pxref{Tracking Tasks}.  One way or another, you should
create some kind of review process.

@menu
* Tracking Tasks::              Using Savannah to track tasks and bugs.
* Unreviewed Translations::     What to do with translations that are
                                  not reviewed.
@end menu

@node Tracking Tasks
@subsection How to Track Tasks and Bugs Using Savannah

@cindex tasks, tracking
@cindex tracking tasks
The team leader has to make sure that prospective translations are
reviewed, that they do not contain obvious errors and confusing
expressions and that they match the spirit and intention of the original
essay.  However, many teams tend to suffer from a specific problem: team
members rely on the leader to make these extensive reviews. That is
fine, as far as it goes, and the leader should always review
translations before installing them in the repository---but it is nearly
impossible (especially for a large team) to rely on a single person for
such tasks.  Team co-ordinators often do not manage to make such reviews
in time, resulting in frustration among the team members and generally
slowing the translation process.

A solution to this specific problem is to distribute the load among more
people.  For example: Member D makes a translation of @file{foo.html}
and uploads @file{foo.@var{lang}.po} in the translation project's
repository at Savannah, marking the relevant task as ``Ready For Test''
(of course, the equivalent is sending a message with the attached
translation to the team's mailing list, or similar).  Then Member A, B
and C (or only A and B if C is currently busy) review it independently
and post comments/suggestions/errors in the bug tracker.  Discussion
goes on between them and D, problems are rectified and finally the
leader (who may happen to be one of A, B, C, D) makes a final review.
It is easier to make the final review when most of the issues are
already fixed in previous revisions.  Finally, the translation is
published.  The result is better quality of the translation (since more
people looked at it) and the whole burden does not fall solely on the
shoulders of the leader.  You can also set up an internal formal rule:
If a member makes a translation, he has to review another one (or two)
as well.

Some translations can take a fairly long time---the typical example is a
complicated essay or a transcript of a speech.  It is best to avoid
duplicate work by indicating, or better---recording, that someone is
working on this specific article.  The @samp{Tasks} tracker is suitable
for this purpose.

It is prudent to discuss the most convenient naming scheme and practice
among team members, and publish the convention or rules at the
team's homepage.  Note that you can create @dfn{Custom Fields} in the
trackers, and resolved bugs can be searched based on these custom
values.

Thus, a possible straightforward way to manage these tasks is:

@itemize
@item
If someone starts working on a new translation, she creates a new task
with a @samp{Subject} indicating the article, for example simply
@samp{philosophy/bsd.html} and assigns it to herself.

@item
When the translation is finished and ready for review, the translator
changes the @samp{Status} to ``Ready For Test''.

@item
Other members review it, and open bugs relevant to one specific problem.
It is usually better not to conflate two different issues together---it
makes them harder to discuss, and hard to track them by severity.  Some
are grammatical errors, some are fundamental ones that change the whole
meaning, some are simply suggestions for improvement.  It helps if the
project admin creates new Category fields for every article, for
instance @samp{gnu/gnu-history.@var{lang}.html},
@samp{philosophy/microsoft.@var{lang}.html}---it would enable
functionality like ``Show me all bugs ever reported against this
translation'', which is useful.

@item
Once the bugs (or at least the important bugs) are fixed, the team
leader can make the final review and install the translation in the
official repository, marking the task as @samp{Done}.  Bugs that are not
resolved should remain open, naturally.
@end itemize

@cindex SourceForge
If there are compelling reasons, teams can choose to manage these
things using external
resources and eventually other bug (or issue) tracking systems.
Whatever you decide, please make sure that bugs can be reported using
free software only, and that the software providing that service is
free.  It makes an extremely bad impression if a reader has to report a
problem about a gnu.org translation via nonfree hosting platforms like
SourceForge.

If you use a certain facility (i.e. a bug tracking system) to manage
bugs in translations, it is best to take advantage of
@file{generic.@var{lang}.html} and advertise it on every page.
@xref{generic.html}, for details.

@node Unreviewed Translations
@subsection How to Proceed with Unreviewed Translations

@cindex unreviewed translations
@cindex translations, unreviewed
Sometimes a translation (typically your own) is not reviewed by anyone
else for a fairly long time.  This is unfortunate, but there is no
reason to keep it in draft state forever.  If nobody reviewed it for a
substantially long period (like 3 or 4 months), commit it as it is.
Readers may report bugs as well (and they do!).

It is important to record somehow that this published translation still
lacks appropriate review.  If the suggestion in the previous section is
implemented, it would mean leaving the relevant task @samp{Open} and
@samp{Ready For Test} despite the translation being officially online.
You may also add a comment to the PO file.

@node Commits
@section CVS Commits and Best Practices

@cindex CVS, using
As all team leaders have write access to the CVS repository of the
@samp{www} project, this technically means that they are able to modify
every single file in it.  This vote of confidence should never be
abused---the only files team co-ordinators should add/update are those
relevant to their translation work.  It is OK to fix an obvious typo in
an original article; for anything else please report to
@email{webmasters@@gnu.org}.

If you wish to volunteer as webmaster and help with generic webmaster
work and RT tickets, that is perfectly fine---please follow the
established (by the GNU Webmasters) procedure.  If you are approved, you
can modify such pages wearing your ``webmaster's hat''.

If a particular page has issues with the markup which create problems
for your language, please inform @email{trans-coord-discuss@@gnu.org}.
For general issues that affect more articles, or for severe problems,
please write to @email{www-discuss@@gnu.org}.

If you are not familiar with CVS, it is recommended to read CVS manual,
for a basic understanding of how this VCS works.  @xref{Top, Concurrent
Versions System, , cvs, Version Management with CVS}.  It is not
necessary to become an expert---the @samp{www} project does not use
complex features like tags, vendor branches, merging, etc. as they are
not very useful for a live website.

However, you'd probably have to learn how to use CVS for effective
work---to extract information from the history, review diffs and
specific changes, synchronize with the working repository of the team
(if any), adding/removing files, etc.

If you make changes that affect more than one file but the change is
coherent, please do it as a single commit.  This will generate only one
message to @email{www-commits@@gnu.org}, which is better than 5 messages
for 5 files about semantically the same change.  Always write commit
logs in English@footnote{This advice is applicable for the @samp{www}
repository only---feel free to write logs in your native language when
committing in your team's repositories.}, providing a short
description of the change.  If you modify a file that is not an article
but a script or part of software (such as @file{server/gnun/gnun.mk}),
it would be nice to follow the GNU Coding Standards and describe the
change precisely (@pxref{Change Logs, Log Messages, Change Logs,
standards, The GNU Coding Standards}).  For example, do not write:

@example
Added support for Nepali.
@end example

or

@example
Yay!  First commit of the Panjabi homepage!
@end example

Instead, write the log as follows:

@example
(TEMPLATE_LINGUAS): Add `ne'.
@end example

and

@example
(FUZZY_DIFF_LINGUAS): Add `pa'.
@end example

This makes it easier for others to search for a particular change in the
history.

If you add a binary file (for example, @file{.png}), do it with
@code{cvs commit -kb @var{file}}.  This turns off keyword substitution,
which prevents RCS keywords like @samp{@w{$}Id$} to get expanded,
subsequently corrupting the file.  @xref{Substitution modes, , , cvs,
Version Management with CVS}.  More importantly, using @option{-kb}
prevents corruption of the binary when people using CVS clients under
infamous OS checkout modify the file, and then commit it with
messed ends of lines.@footnote{Few years ago there still were
committers using nonfree operating systems---we don't dictate what
OS people use, but we can at least prevent this technical kind
of damage.}

Although not absolutely compulsory, it is recommended that every team
leader subscribes to @email{www-commits@@gnu.org}.  It is useful to
examine the diffs of your own messages, if you miss something while
inspecting the diff before the commit.  In any case, a team leader
should be subscribed to that list to avoid his own commit messages to be
moderated.  If you absolutely do not desire receiving all traffic, just
disable mail delivery in Mailman's user interface.

@node Savannah
@section Taking Advantage of Savannah

Every translation team should have a project in Savannah.  There are
some teams that use their own resources outside Savannah; although
there's no obligation to use Savannah for team work, the need for a
Savannah project for each language is obvious: it's a standard way to
find information for translation teams and their contacts.

@cindex external resources
Using external hosting facilities may seem justified sometimes.  Some
teams may have already established repositories or bug tracking
systems where usual contributors already have access.  Some team
members prefer to work within the established infrastructure of a
broad translation team (for whatever reason), but this is discouraged.
It is required that every team has a mailing list at Savannah
(@pxref{Savannah Mailing Lists}), because it is easier to pass its
management to the new co-ordinator when the old one steps down, and it
helps to keep the archives at one place for future members of the
team.  Likewise, it is better to use Savannah for team's
repository and bugs/tasks.

However, it is important to remember that regardless of the technical
resources which a team decides to use, the responsibility of the team
co-ordinator remains the same.

Those teams that are using Savannah have a broad variety of tools at
hand: team membership management, documents, trackers (bugs, tasks and
support), alerts, CVS (and any other VCS that Savannah supports), home
pages, etc.  How each team uses these resources is up to the team
itself, but it often turns out to choose Savannah for nearly all of
the team activities, as it requires almost zero work; the Savannah
Hackers are happy to support us.

Whatever you (in your capacity as a team leader) decide, please do it
with caution: some organizational decisions may become ineffective as
time goes by, and some may not scale well when the team grows.  If the
team is young and has a couple of members, it is better to refrain from
such decision and discuss them with all the members when their number
grows.  Two or three people do not need a rocket platform or complex
wizardry to do their work.

The next sections contain suggestions about how a team can use the
facilities provided by Savannah.  It is not mandatory to follow them,
they are just suggestions.

@menu
* Savannah Members::
* Savannah Homepage::
* Savannah Support::
* Savannah Tasks::
* Savannah Bugs::
* Savannah News::
* Savannah Mailing Lists::
* Savannah VCS::
@end menu

@node Savannah Members
@subsection Managing Members

You should add active translators as members of the translation team,
and remove them when they leave.  Team members should have access to all
of the project's resources, and tracking their number is one of the ways
for web-translators to determine the status of the team.

It is OK if a particular contributor wants to translate an article or
two and does not want to be engaged with the team on a long-term basis.
In such situations, there is no need to add her as a member.

@cindex team status
It is a good idea to mark inactive members, for example if there is no
interaction (bug reports, new translations, updates to existing
translations, proof-reading) for at least six months.  You can do that
by unmarking the @samp{On Duty} checkbox for the respective project
member under @samp{Set Permissions}.  Inactive members have absolutely
the same rights as active ones---the only exception is that they don't
count for the total number of members, and they appear separately on
@samp{View Members}.

@node Savannah Homepage
@subsection Homepage of the Team

@cindex team homepage
Every Savannah project has a Web repository, which is, for technical and
historical reasons, only CVS.  By default it is mapped to
@indicateurl{https://www.gnu.org/@/server/@/standards/@/translations/@/@var{lang}};
to add files to it first make a checkout, following the instructions at
@indicateurl{https://savannah.gnu.org/@/cvs/@/?group=www-@var{lang}}.

It is recommended to describe all team-specific procedures, if there are
any.  That way, you can point potential team members to the
corresponding page containing these instructions, instead of repeatedly
explaining every volunteer separately.

All team-specific pages should follow the usual linking criteria in
@uref{https://www.gnu.org/@/server/@/standards/README.webmastering.html#pollinking,
GNU Webmastering Guidelines}, and the
@uref{https://www.gnu.org/@/server/@/fsf-html-style-sheet.html,
FSF HTML Style Sheet Guidelines}.

@node Savannah Support
@subsection Support Tracker

This tracker is supposed to be related to things about the @emph{project
management} itself, i.e. project members may report here missing
functionality and features that requires the project admin's
action.  Do not use it for anything else as it quickly becomes
confusing.  It is OK to disable it if the team is small.

@node Savannah Tasks
@subsection Tasks Tracker

This is a way to manage all sorts of tasks.  They appear in the personal
Savannah page of the assignee, so it is difficult to miss them out.  It
is possible to use this tracker to ``announce'' to the team members that
a specific article should be translated.  The one who volunteers may
assign the task to herself.

Teams may use this tracker to avoid duplicate work, by declaring that
they intend to work on a specific translation.

Feel free to organize the @samp{Tasks} management as you see fit.

@node Savannah Bugs
@subsection Bugs Tracker

The @samp{Bugs} tracker is designed for tracking bugs.  You can use for
several purposes:

@itemize
@item
Suggest readers to report bugs there.

@item
Use it for all kinds of internal team tasks.

@item
Forward bugs reported against @var{lang} translations in the
@samp{trans-coord} project and assign them to the specific maintainer
(who is supposed to be a @samp{www-@var{lang}} project member), if you
have such policy.
@end itemize

@node Savannah News
@subsection News Tracker

@cindex team news
That is a way to inform newcomers and interested people (who visit the
project page from time to time, or subscribe to the @samp{News} RSS
feed) about a major change or event within the project.

You can also setup news entries to be sent to a mailing list (that's
possible for the other trackers as well).

The purpose of this feature is informational---if members need to know
about an important change (in practices, procedures, etc.), it is
perfectly OK to announce it here.  Some teams use it to announce new
translations, which is also fine.

@node Savannah Mailing Lists
@subsection Managing Mailing Lists

@cindex team mailing lists
Every team should have a mailing list on lists.gnu.org and use it for
internal communications.  All active translators should be on the
list.  The list owner should be the co-ordinator of the team.  The
name of the list should begin with @samp{www-@var{lang}-}.  The team
co-ordinator is in the position to decide about the settings like
being public or private.

The list will make it possible for the GNU project to contact the team
when the co-ordinator disappears; its archive will also give access to
the history for new translators.

You can create new mailing lists via the Savannah interface.  However,
this should be done after some thought.  If the project membership is
low (<= 10 members), there is no need to create more than one mailing
list.

You can redirect all messages generated by the trackers to any list.

@node Savannah VCS
@subsection Version Control Systems

@cindex VCS
@cindex team's repository
An easy way to keep up with changes in the original articles and to
manage continuous contributions is to keep all translations in the
translation project's Sources repository.  That way, it is easy to edit
draft translations and install them in @samp{www} only when they're
ready.  It is also convenient to update the translation (merge any
changes from the original) while it is still under review.

@xref{Team's Repository, , , gnun, The GNUnited Nations Manual}, for
more information.

@strong{Remember:} A choice of a particular VCS is a sensitive
matter---some modern ones provide compelling features, but they also
bump the barrier for participation higher.  The VCS is supposed to ease
collaborative maintenance---if it eases only you, project members just
won't use it so that won't be a net win.

@node Co-leaders
@section Promoting Members as Co-leaders

@cindex co-leaders
When the team grows large and it becomes hard for a single person to
manage, there is no problem to add another (or even two other) people
to help.  Note that a subsequently appointed team co-ordinator is not
simply a @dfn{committer} with write access to the @samp{www} repository;
she has full responsibilities just like a single leader, although the
latter still remains the primary contact for the team.

If you'd like another person to act as a co-leader and help you with the
management tasks, send a message to @email{web-translators@@gnu.org}
with her name and Savannah account.  She has to be already
an administrator of @samp{www-@var{lang}}.

The procedure for co-leaders is a simplified version of the one for a
new team or taking over an existing team.  @xref{New Team}.

To remove co-ordinators, please write to
@email{web-translators@@gnu.org} with details and rationale for the
removal.  Do not edit @file{README.translations.html} yourself; this is
a final formality step to be performed by the Translation Managers.

@node Reports
@section Reporting Team Status

@cindex team status
Team leaders must send an annual report about the status of the team.  A
good report should include:

@itemize
@item
General information about the team's accomplishments during the past
year, like:

@itemize @minus
@item
A list of new translations.

@item
New members since the last report.

@item
Solved problems and other issues, if any.  (Usual bug reports and other
improvements/fixes to the existing translations do not count as
@dfn{problems} in this sense.)
@end itemize

@item
Current active members.

@item
Current problems (technical or social), conflicts, and ideas for sorting
them out.

@item
Anything else you consider important or worth mentioning.
@end itemize

The best time to send a report is near the end of the year, for example
November.

If there is no sensitive information in the report and you feel like
sharing it, you can send it to @email{trans-coord-discuss@@gnu.org}
(which is still a private mailing list).  That way, other list readers
may help with suggestions how to solve a particular issue.  Informing
each other about the progress improves the community spirit.

If you do not wish to share some information that is in the report,
please send it to @email{web-translators@@gnu.org}.

@node Stepping Down
@section How to Retire Painlessly

When you feel you don't have the energy to manage the team successfully,
or perhaps you start losing motivation, please inform
@email{web-translators@@gnu.org}.  It would be substantially easier if
you try to find a replacement or recommend a specific person---we will
try to find someone in any case, but your judgment is important and it
will be considered with priority.

An excellent way to step down is to do it with a ``plan''---suggest the
person you consider capable of doing the job as co-leader
(@pxref{Co-leaders}) and retire completely when she is absolutely ready
to proceed without your further help and advice.

@node Translation Process
@chapter Translation Process

In general, it is expected that all participants in the translation
process apply common sense for all of the decisions (important or not)
they are going to take in their capacity as a manager, team leader, or
contributing member.  Certainly, many decisions are not easy, and
require some thought.

This manual is a work in progress---it is not set in stone, and it
will never be finished---the ultimate goal is to constantly improve
the translation process, and as a consequence, the documentation.
Every participant in the process should be free to suggest
modifications to the current procedures and suggestions how to improve
the current state of affairs.  Ideally, they should be accompanied
with patches to the Texinfo source, but that's not mandatory.  In any
event, please write to @email{trans-coord-discuss@@gnu.org}---the goal
of this list is precisely to discuss improvements of the translation
process.

@c The sections are sorted so that those interesting for less involved
@c people (like occasional contributors) come first; the technical
@c details tend to be at the end.
@menu
* Priorities::          What to translate as a priority.
* Updating::            Keeping translations current is a priority.
* Terminology::         Dealing with terminology issues.
* Capitalization::      To CAPITALIZE or not?
* English Pages::       Fixing bugs on original pages.
* Internal Links::      How to handle links to www.gnu.org articles.
* Distribution Terms::  Translating distribution terms.
* Copyright Notices::   How not to translate copyright notices.
* PO Editors::          Working with PO files.
* Mailing Lists::       Summary of mailing lists.
* Savannah Projects::   Project membership.
* SSI::                 Overview of files included via SSI.
* Technical Pages::     Other files you may want to translate.
* CSS::                 General advice how to use CSS.
* Migrating::           How to migrate to the new style.
@end menu

@node Priorities
@section What to Translate

@cindex translation priorities

This section lists translation priorities.  You can find links
to automatic reports about current status of
translations of all active teams sorted by their priority in
@uref{https://www.gnu.org/software/gnun/reports/reports.html,
GNUN Reports}.  If the page for your team is missing there, please ask
@email{web-translators@@gnu.org} to add it to the cron job.

@menu
* First Priority::
* Second Priority::
* Important Directories::
* Other Directories::
* Important Languages::
@end menu

@node First Priority
@subsection First priority

This list of web pages from @url{https://www.gnu.org} that
have been selected as translation priorities (in no particular order).

@itemize @bullet

@item
@uref{https://www.gnu.org/philosophy/free-sw.html,
The Free Software Definition}
@item
@uref{https://www.gnu.org/philosophy/free-software-even-more-important.html,
Free Software Is Even More Important Now}
@item
@uref{https://www.gnu.org/philosophy/surveillance-vs-democracy.html,
How Much Surveillance Can Democracy Withstand?}
@item
@uref{https://www.gnu.org/philosophy/why-free.html,
Why Software Should Not Have Owners}
@item
@uref{https://www.gnu.org/philosophy/open-source-misses-the-point.html,
Why Open Source misses the point of Free Software}
@item
@uref{https://www.gnu.org/philosophy/not-ipr.html,
Did You Say "Intellectual Property"? It's a Seductive Mirage}
@item
@uref{https://www.gnu.org/philosophy/compromise.html,
Avoiding Ruinous Compromises}
@item
@uref{https://www.gnu.org/education/education.html,
Free Software and Education}
@item
@uref{https://www.gnu.org/education/edu-schools.html,
Why Schools Should Exclusively Use Free Software}
@item
@uref{https://www.gnu.org/education/edu-cases-india-irimpanam.html,
Vocational Higher Secondary School Irimpanam}
@item
@uref{https://www.gnu.org/education/edu-software-tuxpaint.html,Tux Paint}
@item
@uref{https://www.gnu.org/gnu/thegnuproject.html,The GNU Project}
@item
@uref{https://www.gnu.org/distros/distros.html,GNU/Linux Distros}
@item
@uref{https://www.gnu.org/distros/free-system-distribution-guidelines.html,
Guidelines for Free System Distributions}
@item
@uref{https://www.gnu.org/distros/common-distros.html,
Explaining Why We Don't Endorse Other Systems}
@item
@uref{https://www.gnu.org/licenses/license-recommendations.html,
How to choose a license for your own work}
@end itemize

@node Second Priority
@subsection Second priority

These pages are the second level of priority.  Once the pages in
the list above are done, please translate these next.

@itemize @bullet
@item
@uref{https://www.gnu.org/licenses/copyleft.html,What is Copyleft?}
@item
@uref{https://www.gnu.org/philosophy/pragmatic.html,Copyleft: Pragmatic Idealism}
@item
@uref{https://www.gnu.org/philosophy/selling.html,Selling Free Software}
@item
@uref{https://www.gnu.org/philosophy/who-does-that-server-really-serve.html,
Who does that server really serve?}
@item
@uref{https://www.gnu.org/philosophy/javascript-trap.html,The JavaScript Trap}
@item
@uref{https://www.gnu.org/education/edu-why.html,
Why Educational Institutions Should Use and Teach Free Software}
@item
@uref{https://www.gnu.org/education/edu-cases-argentina-ecen.html,
Escuela Cristiana Evangelica de Neuquen (ECEN)}
@item
@uref{https://www.gnu.org/education/edu-cases-india-ambedkar.html,
Ambedkar Community Computing Center (AC3)}
@item
@uref{https://www.gnu.org/education/edu-software.html,Educational Free Software}
@item
@uref{https://www.gnu.org/education/edu-software-gcompris.html,GCompris}
@item
@uref{https://www.gnu.org/education/edu-faq.html,
Educational Frequently Asked Questions}
@item
@uref{https://www.gnu.org/education/edu-team.html,The Education Team}
@item
@uref{https://www.gnu.org/gnu/linux-and-gnu.html,Linux and the GNU Project}
@item
@uref{https://www.gnu.org/philosophy/right-to-read.html,The Right to Read}
@item
@uref{https://www.gnu.org/philosophy/free-doc.html,
Why Free Software needs Free Documentation}
@end itemize

@node Important Directories
@subsection Important Directories

Essays and articles in the following directories should be translated 
in all available languages:

@itemize @bullet
@item
@file{/education}
@item
@file{/gnu}
@item
@file{/licenses}
@item
@file{/philosophy}
@item
@file{/proprietary}
@end itemize

In these important directories, however, there are articles of
historical or peripheral interest only, for which new translations are
not necessary.  For instance, @file{/philosophy/sco/*}, 
@file{/philosophy/*-old.html}, @file{/licenses/*_seminar.html},
@file{/philosophy/economics_frank/frank.html}, etc.  Please use your
judgment. (The existing translations of these articles should be maintained,
though.)

The @file{/proprietary} directory is important, but it changes
as fast as a newsfeed.  Don't start translating it unless you intend
to update the translated pages over the long term.

@node Other Directories
@subsection Other Directories

Don't bother translating the pages in @file{/people}, except perhaps
speakers.html.  Experience shows that translations of the other pages
in that directory require too much maintenance work, and they don't
provide much benefit.  Translating @file{/thankgnus} may likewise
be considered a waste of time.

There is no problem to translate @file{/home.html} if you have
a very active team, but don't make the mistake to pick it up
as your first translation.  It is modified often, sometimes
intensively, and only active team members should take that road.

The material in the @file{/software} directory pertains to individual
GNU packages.  If you would like to translate something
in that directory, please talk with the maintainers of the package
to see what they would like to do.

@node Important Languages
@subsection Important Languages

We welcome translations of essays into any language, but the following
are particularly important:

@itemize @bullet
@item
French
@item
Spanish
@item
Portuguese
@item
Chinese
@item
Arabic
@item
Indonesian
@item
Russian
@item
Japanese
@item
Hindi
@end itemize

@node Updating
@section Keeping Translations Current

@cindex translation priorities
@cindex translations, keeping current
@cindex tracking changes in files
It is very important to keep existing translations up-to-date with the
respective English originals.  This task should be higher priority than
translating new articles.  We developed various means to automate
the process of tracking outdated translations.

@itemize
@item
GNUN's @code{report} rule can help you identify precisely which
articles need updating; @pxref{report, , , gnun, The GNUnited Nations
Manual}.  There is a monthly cron job which sends the output of this
rule to each team as requested by their leaders.  If you want the
addresses changed, please write to @email{web-translators@@gnu.org}.

@item
The @code{gnun-report} script produces a HTML page listing detailed
status of translations; @pxref{gnun-report, , , gnun, The GNUnited
Nations Manual}.  A cron job commits updated reports for all active
teams to GNUN project web repository, typically twice an hour.  The
links to those reports are provided on the
@url{https://www.gnu.org/@/software/@/gnun/@/reports/@/reports.html,
GNUN Reports} page.

@item
GNUmakefile.team provides a more detailed @code{report} target: unlike
the output of the previous tools, it analyzes the status of files in
team's repository as well as of those in @samp{www} repository;
@pxref{report in GNUmakefile.team, , , gnun, The GNUnited
Nations Manual}.

@item
@cindex outdated translations, notification
GNUmakefile.team also has a means to send more detailed reports
to specific translators; @pxref{notify in GNUmakefile.team, , , gnun,
The GNUnited Nations Manual}.  The notification facility takes the
output of the @code{report} target, adds the URLs of relevant files,
and the results are sent with attached HTML files of
team's-against-@samp{www} differences to the translators who requested
tracking particular files.

The feature is supposed to be invoked via a cron job; such jobs
already run for some teams on our server.  If you'd like GNU Web
Translation Managers to setup a job for your team, please write to
@email{web-translators@@gnu.org}.

@item
If your editors don't highlight differences against previous
messages, you may find it useful to track the changes in the messages
with @command{gnun-add-fuzzy-diff}.  For more details,
@pxref{gnun-add-fuzzy-diff, , , gnun, The GNUnited Nations Manual}.

@end itemize

@node Terminology
@section Language-specific Terminology

This is a very important topic, not yet covered by this manual.

@cindex Translations README
Some tips are given in
@uref{https://www.gnu.org/@/server/@/standards/@/README.translations.html,
Translations README}.

@node Capitalization
@section When to CAPITALIZE

@cindex capitalization
The English language has some rules for capitalization of titles,
chapters, acronym expansions and the like.  These rules are neither
strict nor uniform, although the gnu.org website strives to apply them
consistently.  They do not make sense for many other languages, but
unfortunately, many translators @emph{erroneously duplicate} the
capitalization in their translation.

Examples for common (and correct) English capitalization is the title of
the article ``Why Software Should Be Free'' or ``Free Software
Foundation'' (FSF).  However, in languages that do not have such grammar
rules it is wrong to write ``Dlaczego Oprogramowanie Powinno By@'c
Wolne'' (Polish) or ``Fondation Pour Le Logiciel Libre'' (French).

Another prominent and widely spread mistake is to write your own
language with a capital letter in the list of translations when
languages are written beginning with a small letter according to your
own rules@footnote{The lists of translations are generated
automatically.  The names of the languages are defined in a specific
file, languages.txt (@pxref{languages.txt, , , gnun,The GNUnited
Nations Manual}).}.  In other words, it is right to write
@samp{English} or @samp{Deutsch} (because in English and German
languages are capitalized), but not @samp{Fran@,{c}ais} or
@samp{Portugu@^es}---write them as @samp{fran@,{c}ais} or
@samp{portugu@^es}, respectively.

@node English Pages
@section Fixing Bugs on Original Pages

GNU webmasters proofread the texts before posting them and fix
the bugs reported by www.gnu.org visitors, but occasionally some
mistakes do slip into the pages.  Translators are probably the people
who read the pages most carefully, so it's them who are likely to find
those mistakes first of all.

There is a trend for translators to fix the bugs in their translation
instead of the original page.  This is understandable: you have to
contact additional people (webmasters) in order to fix it on the
English page, so it's easier just to make the translation.  However,
there are reasons why you shouldn't leave bugs on the English pages:

@itemize
@item
The text may not be wrong, but you misunderstand it. (This, in turn,
may mean that the text should be reworded to make it unambiguous.)

@item
It's as important to have the English version correct as your
translation.

@item
Some mistakes may propagate to translations in other languages.  Also,
when the page changes, the translators have to update their
translations, so the earlier you fix the bugs, the fewer people will
have to update their translations.
@end itemize

The bugs are reported to @email{webmasters@@gnu.org}; if you are
a team leader, you can also discuss the issues on
@email{www-discuss@@gnu.org}.

@node Internal Links
@section How to Handle Internal Links

@cindex links, internal
@cindex internal links
In short, you should leave the URLs in links to other articles of
www.gnu.org as they appear in the English text.

@cindex language negotiation
@anchor{language-negotiation}
These days www.gnu.org uses HTTP language negotiation to provide the
most preferred translation available according to user's browser
settings.  The texts of articles use generic URLs like
@samp{/directory/article.html} (note no language suffix).  When the
visitor follows such links, www.gnu.org chooses the best translated
version, or the English version if there is no suitable translation.

Once upon a time, there was a practice to link to the respective
translation (@samp{/directory/article.@var{lang}.html}) when
available.  You shouldn't do this any more.  First, new translations
are added, and occasionally even removed, and timely updating the
links in all existing translations is not feasible.  Second, and more
important, visiting a translation doesn't really imply that its
language is the most preferable one.

For instance, let us imagine that visitor's native language is
Serbian, and she can also understand Bulgarian.  Then (as of Sep 2015)
the best version of
@url{https://www.gnu.org/@/philosophy/@/enforcing-gpl.html,
Enforcing the GPL} is Bulgarian; however, that
page links to @url{https://www.gnu.org/@/philosophy/@/free-sw.html,
the Free Software Definition}, which is available both in Serbian and
in Bulgarian.  If the Bulgarian translation of the announcement linked
to the Bulgarian version of the definition, the visitor would be
directed to a wrong translation.

@node Distribution Terms
@section Distribution Terms

@cindex Creative Commons
@cindex distribution terms
Most www.gnu.org articles are released under the terms of
the Creative Commons Attribution-NoDerivs 3.0 United States
or 4.0 International license.
The exact HTML for English pages to use is:

@example
This page is licensed under a <a rel="license"
href="http://creativecommons.org/licenses/by-nd/3.0/us/">Creative
Commons Attribution-NoDerivs 3.0 United States License</a>.
@end example

Pages in other languages should translate this notice, and should link
to a translated version of the Creative Commons license ``deed'' if it's
available.  Creative Commons provides standard text for this in all the
languages they support, and we should use that wording whenever
possible.  To do that, follow these steps:

@itemize
@item
Check at the bottom of the English deed page to see the list of
languages they support.  Follow the link the language that you want a
translation for, if available.

@item
Follow the ``Use this license for your own work'' link near the bottom
of the translated deed page---it's in distinct yellow text.

@item
The textarea on that page provides standard HTML.  Note that we're not
using the graphic, just the text, and that we modify the URL.

@end itemize

For example, here's the text they provide for Dutch:

@example
Dit werk is gelicenseerd onder een <a rel="license"
href="http://creativecommons.org/licenses/by-nd/3.0/us/deed.nl">
Creative Commons Naamsvermelding-GeenAfgeleideWerken 3.0 Verenigde
Staten licentie</a>
@end example

Note that the link in this text is changed to point directly to the
Dutch language deed.  We should always link to a copy of the license
deed that's in the same language as the page itself.

Pages in languages that aren't supported by CC should prepare their
own translation, use it consistently throughout pages translated to
that language, and link to the English language deed.  Also, please
write your own translation when the translation provided by CC is not
satisfactory for some reasons---for instance, as of May, 2012, their
German translation uses ``Content'', which is a word to use with
caution (see
@uref{https://www.gnu.org/@/philosophy/@/words-to-avoid.html#Content,
Words to Avoid (or Use with Care)}).

Note that translations should @emph{not} change the jurisdiction of the
license; in case of CC BY-ND 3.0,
they should @emph{always} link to the CC BY-ND 3.0 @emph{United
States} license, and @emph{not} a different port like CC BY-ND 3.0
Japan.  This is because there are substantive differences between the way
different ports handle moral rights issues, and we prefer the specific
terms that are in the United States license.

@node Copyright Notices
@section Copyright Notices

@cindex copyright notices
Don't translate the word ``Copyright'' in copyright notices; for more
info, @pxref{--version, , , standards, The GNU Coding Standards}.

Also, please maintain a proper copyright notice in the translation,
@pxref{Copyright Notices, , , maintain, Information for maintainers of
GNU software}.

@node PO Editors
@section Editing PO Files
@cindex PO, editing

We anticipate that some gnu.org translators will find this format odd
or inconvenient, if they never happened to work with PO files
before@footnote{For detailed information about editing
PO files, @pxref{PO Files, , Working with PO Files, gnun,
The GNUnited Nations Manual}.}.
Don't worry, you will soon get accustomed to it.  It is the
established format for translations in the Free World, and if you 
have any problems, other translators will help you.

The most efficient way to edit a PO file is using a specialized PO
editor, because each of them represents and treats gettext messages in
a consistent and predictable way.  It is possible to edit a PO file
with an ordinary plain text editor, but extra effort would be
necessary to make the result valid.

@cindex SaaSS
Note that recent versions of some PO editors (both offline
and web-based) offer access to various translation services that
do machine translation for their users.  Using a machine translation
service is a clear example of SaaSS (see
@uref{https://www.gnu.org/philosophy/who-does-that-server-really-serve.html,
Who does That Server Really Serve?}),
so please don't use such editors unless they only submit requests
to your (or GNU project's) own servers.

Here is a list of widely used PO editors we can recommend:

@itemize
@cindex PO editors
@item
@cindex Emacs
PO mode.  We recommend using GNU Emacs in PO mode, because Emacs is
the program that is suitable for performing any task when it comes to
maintaining the GNU Project's website.  Provided that you have GNU
gettext installed, any @file{.po} file you visit should automatically
switch to PO mode.  You can enable/disable it with @code{M-x po-mode
@key{RET}}.  On some GNU/Linux distros such as gNewSense, PO mode is
available in a separate package, @code{gettext-el}.
@xref{PO Mode, Emacs's PO File Editor, , gettext, GNU gettext tools}.

@item
@cindex Gtranslator
Gtranslator---the GNOME PO editor.  See
@uref{http://projects.gnome.org/@/gtranslator/}.

@item
Lokalize---the KDE 4 editor.  See
@uref{http://userbase.kde.org/@/Lokalize}.

@item
KBabel---the KDE 3 editor.  No longer supported, but might be
available on some old systems.

@item
Poedit---another popular editor that is based on the @code{wxWidgets}
graphical toolkit.  See @uref{http://www.poedit.net}.

@item
@c @heresy
@c Please forgive them, they don't know what they are doing...
po.vim---ftplugin for the Vim editor.  The best option for people who
use Vim as their editor.  See
@uref{http://www.vim.org/@/scripts/@/script.php?script_id=2530}.
@c @end heresy

@c @c GNU instance of Pootle is down.
@c
@c @item
@c GNU instance of Pootle, a web-based editor.
@end itemize

@c 
@c @subsection Web-based Systems
@c 
@c @cindex web-based editing
@c @cindex Pootle
@c If your team would like to use a web-based editor, we recommend using
@c the @uref{https://chapters.gnu.org/pootle/, official Pootle server of
@c the GNU project}.  We make sure that working with it will not
@c compromise your freedom via nonfree JavaScript or
@c @uref{https://www.gnu.org/philosophy/who-does-that-server-really-serve.html,
@c SaaSS}.  If you decide to use our server, please contact GNU Web
@c Translation Managers to register your team.
@c 
@c @cindex previewing web pages
@c @cindex web pages, previewing 
@c Also, that Pootle server has a simple facility to preview your
@c translations as they will appear on www.gnu.org.  In order to test
@c a page, log in the server and visit
@c @uref{https://chapters.gnu.org/gnun/test.html}.  That page
@c contains a menu to upload a PO file; then the server will generate
@c the translation and show you the build log (including errors), and the
@c generated web page (when the build is successful).

@node Mailing Lists
@section Related Mailing Lists
@cindex mailing lists

Here is a summary of the mailing lists relevant to the translation
process, and a brief description about how they relate to the various
participants in the process.

@table @email
@cindex www-discuss@@gnu.org
@item www-discuss@@gnu.org
The basic discussion list of the GNU Webmasters.  All team leaders are
required to subscribe.

This is a private mailing list.

@cindex tracking changes in files
@item www-commits@@gnu.org
Commits to the @samp{www} repository are sent here.  All Translation
Managers are required to subscribe.  It is strongly recommended that
team leaders subscribe---in any case they should, and mail delivery can
be disabled personally.

This is a public mailing list, so everyone can subscribe and review the
archives.  The @samp{www} CVS repository is also public.

@cindex trans-coord-discuss@@gnu.org
@item trans-coord-discuss@@gnu.org
The main discussion list for the GNU Web Translators.  Team leaders must
subscribe, as errors from GNUN are mailed here.  It's highly recommended
that active team members join as well, because the changes in general
policies for translations are also announced and discussed here.

This is a private mailing list.

@item trans-coord-news@@gnu.org
This is a list for notifications about GNUnited Nations
releases.  It is not mandatory to subscribe to it, although the traffic
is very low.  If you want to track only GNUN release announcements,
subscribe to the @samp{gnun} topic via Mailman's user interface.

Automatic announcements for new gnu.org translations (provided they're
handled by GNUN) are also delivered here.  There are separate
@samp{@var{lang}-ann} topics for every GNUN-aware language, so it is a
good idea to advertise this capability widely among your local
community.  For example, if a reader wants to be informed only about new
Spanish translations, she can just subscribe to the @samp{es-ann}
mailing list topic.

This is a public mailing list.

@item trans-coord-devel@@gnu.org
All development of GNUN happens here.  Commits to the @samp{trans-coord}
repository are also sent to this list.

This is a public list, and @email{bug-gnun@@gnu.org} is an alias.

@cindex webmasters@@gnu.org
@item webmasters@@gnu.org
This is a tracker for GNU Webmasters.  It is used for bug reports and
other suggestions for (English) www.gnu.org web pages.

This is a private tracker.

@cindex web-translators@@gnu.org
@item web-translators@@gnu.org
This is the tracker and the primary contact of GNU Web Translation
Managers.  It is used for bug reports against www.gnu.org translations
and submitting new translations for the languages lacking an active
team, requests for help from the teams and various translation-related
requests from GNU people.

This is a private tracker.

@end table

Every team should also use at least one mailing list on Savannah,
@pxref{Savannah Mailing Lists}.

@node Savannah Projects
@section Savannah Project Membership

@cindex Savannah projects
Participants in the www.gnu.org translation process normally have to be
members of the following Savannah projects, depending on the case:

@table @samp
@item www
The main project which hosts the @samp{gnu.org} Web repository.
Administrators are the Chief Webmaster, entrusted webmasters and the
Translation Manager (in order to approve leaders' applications).  All
team leaders (and co-leaders) should be members of this project.

Note that this project has no direct relation to translators,
although almost anything happening in @samp{www} directly affects
them.  The @samp{www} project is managed separately and has
a different (entirely unrelated) process for approving contributors.

@item trans-coord
An organizational project especially created for co-ordination and
improvement of the translation process.  All team leaders are required
to be members, as bugs reported to @email{web-translators@@gnu.org} are
often redirected to the @samp{trans-coord} @samp{Bugs} tracker.

The admins of this project are the GNU Web Translation Managers.

@item www-@var{lang}
All translation team leaders of the language @var{lang} should be
admins of the project @samp{www-@var{lang}}.  The leaders may
also appoint some other members as @samp{www-@var{lang}} admins
for team's internal reasons.
@end table

@node SSI
@section Summary of SSI @code{#include}s

@cindex SSI includes
The GNU Project's website uses SSI (Server Side Includes) to manage some
common parts that are the same in many of the articles.  With the help
of GNUN their handling should be behind the scenes, but for some of them
manual intervention is needed.  Here is an incomplete list of
the @code{#include}'s used:

@table @file
@item server/banner.html
This file contains only @code{#include} directives, so the
``translation'' should be almost identical, with filenames modified
to have the @var{lang} extension.  The only other difference is
including @file{server/top-addendum.@var{lang}.html} at the end.

@item server/body-include-1.html
Contains the top menu with useful ``skip to'' links.

@item server/body-include-2.html
This is the file containing the menus, the FSF widget, and any visible
announcements made from time to time.  If a string gets ``fuzzy'' or
``new'' here, it will appear in English in all translations, until
@file{server/po/body-include-2.@var{lang}.po} is updated.  Note that
some validation errors originate from an error in
@file{server/body-include-2.@var{lang}.html} or some other template
file.

@item server/bottom-notes.html
A link to the FSF page explaining how to report possible copyright
infringements.

@item server/footer-text.html
This is a short file currently containing the footer links,
the FSF mission statement and the ``back to top'' link.

@anchor{generic.html}
@cindex generic.html
@item server/generic.html
This file is empty; its ``localized'' versions may contain optional
short messages providing more information about the translation
team or where to report bugs.

@example
<p>To join the Fooish translation team, see <a
href="https://www.gnu.org/@/server/@/standards/@/translations/@/foo">the
Foo team homepage</a>.</p>
@end example

This file is not under GNUN's control, you should edit HTML directly.

@item server/header.html
The declaration that is included in literally every file (unless
the @file{html5-header.html} is used as the alternative).  It is
maintained manually, as it does not make much sense to put it under
GNUN's control (there are no translatable strings).  Remember to specify
the proper @code{xml:lang} and @code{lang} attributes, and for RTL
languages, the @code{dir} attribute.  For example, the file
@file{header.ar.html} should contain this line:

@example
<html xmlns="http://www.w3.org/@/1999/@/xhtml" xml:lang="ar" lang="ar"
      dir="rtl">
@end example

@item server/head-include-1.html
@cindex encoding
This file (included from @file{server/header.html}) is very important:
the encoding is defined here.  Even if a specific PO file is
deliberately encoded in another encoding, the generated HTML will
contain the encoding declared in the @code{<meta>} element at
@file{server/head-include-1.@var{lang}.html}, so browsers will obey it.

The encoding must be UTF-8, because the English text in the
``no-grace'' articles serves as a replacement of the translation when
the latter is not complete, and because all translated pages share
automatically generated lists of translations.

@cindex HTML5
@item server/html5-header.html
This file is included in pages using some entities introduced
in HTML5 draft.  We have to distinguish those pages since some features
of HTML4 were rejected in HTML5, and our old pages don't validate
as HTML5.

@item server/html5-head-include-1.html
Likewise, this file replaces head-include-1.html for HTML5 pages.

@item server/head-include-2.html
Imports the standard CSS, which can be overridden.  @xref{CSS}.

@item server/home-pkgblurbs.html
This header includes short descriptions of all GNU packages; it is
included from the homepage and @file{manual/blurbs.html}.

@item server/footer.html
This is a very short and simple file, containing another
@code{#include} directive.  It is maintained manually, so just add
@var{lang} to the filename, in order the localized
@file{footer-text.@var{lang}.html} to be included.

@cindex outdated translations
@item server/outdated.html
This file is automatically included in outdated translations.  It
contains a message with links to the English file and
to a generated difference of the current revision of the English
file against the most recent revision that has a complete translation.
It is only included in articles affected by ``grace period'' because
in those cases the outdated passages are replaced with English text,
and it is evident without any notices that there is no complete
and up to date translation.

@cindex news items
@cindex planetfeeds.html
@item planetfeeds.html
Includes automatically extracted news items.

@item server/top-addendum.html
The text saying that the page is a translation.

@item licenses/gpl-3.0-body.html
@itemx licenses/fdl-1.3-body.html
@itemx @dots{}
Some of the licenses have the text of the license itself separated in
another file.  This serves two purposes: 1) to provide a ``standalone''
HTML version of the license without the gnu.org style; 2) to prevent
strings sneaking in the @file{.pot} files, as licenses have only
unofficial translations, hosted elsewhere.  Nothing special should be
done about these SSI directives; the files generated by GNUN include
them verbatim as they should not be translated.
@end table

@cindex server templates
The files

@c Use @itemize to avoid `underfull \hbox' warnings from TeX.
@itemize @minus
@item @file{header.html}
@item @file{head-include-1.html}
@item @file{html5-header.html}
@item @file{html5-head-include-1.html}
@item @file{head-include-2.html}
@item @file{banner.html}
@item @file{body-include-1.html}
@item @file{body-include-2.html}
@item @file{bottom-notes.html}
@item @file{footer.html}
@item @file{footer-text.html}
@end itemize

in the @file{server} sub-directory are what webmasters call ``the
server templates''.  These files are included in almost every article,
translated or not.  They are somewhat important, as an error made in
translating them may break every translated page.  The server
templates and the homepages are rebuilt by GNUN whenever the original
English files change; the @code{GRACE} variable has no effect on them.
@xref{Runtime Variables, , , gnun, The GNUnited Nations Manual}.

@node Technical Pages
@section Technical Pages

@cindex technical pages

These pages make the localization of www.gnu.org
complete, so you may want to translate them even though they are
not on the philosophical priority list.

@cindex gnu-404.html
The first one is @file{gnu-404.html}.  This is the page shown
when the visitor encounters a broken link; it explains the situation
and suggests a few frequently requested pages.

@cindex server/language.html
@cindex language negotiation
The second page is @file{server/select-language.html}.  It explains
how the language negotiation works (@pxref{language-negotiation})
and provides a way to customize it to some extent.

@node CSS
@section How to Use Custom CSS

@cindex custom CSS
The CSS file @file{layout.css} gets included (with three other CSS files)
in almost all the English articles through
@file{server/head-include-2.@var{lang}.html}.  However, sometimes this
style isn't quite right for translations---many languages have much
longer expressions, and that is natural.  To include your own CSS,
create a file @file{style.@var{lang}.css} and add it @emph{after} the
directive to include @file{server/head-include-2.@var{lang}.html} and
@emph{before} the closing @code{</head>} tag in
@file{server/banner.@var{lang}.html}, i.e.

@example
<!-- start of banner.bg.html -->
<!--#include virtual="/server/head-include-2.bg.html" -->
<link rel="stylesheet" href="/style.bg.css" media="screen" />
</head>
@end example

Override only what is necessary and looks broken in your language; do
not invent your own style.  This is important for the consistency of the
gnu.org website.  Also, please check if the issue is
language-independent; in this case a change for @file{layout.css}
should be discussed with the webmasters.

A typical language-specific @file{style.@var{lang}.css} file looks
like this:

@example
.inner @{ max-width: 85em; @}

#fssbox @{font-size: 50%;@}
@end example

This widens the menu and the area where the articles are displayed
(because the menu entries are @emph{much} longer than the English
equivalents when translated), includes a localized logo, and makes the
font size for the FSF widget twice smaller (because in this language,
the translations are almost twice longer and displayed truncated, which
is undesirable).

When creating your own @file{style.@var{lang}.css}, don't forget to
include the license notice from the @file{layout.css}, with a short
comment.

If using the default CSS style for translations does not give the
expected good results, or there are other problems (significant or not)
that obstruct reading or worsen the look from an aesthetic point of
view, please write to @email{webmasters@@gnu.org} with a description of
the issue.  If there are several unrelated problems, send separate
messages with appropriate explanation (which may include a demonstration
of the bug, such as a screenshot).

@menu
* RTL::                 Special notes about RTL languages.
@end menu

@node RTL
@subsection Specific Issues Related to RTL

@cindex right-to-left languages
Unfortunately, the @uref{https://www.gnu.org} website does not have
excellent support for languages using right-to-left scripts,
although best efforts are made.  If your language is in this
category, make sure to:

@itemize
@item
Set the attribute @code{dir="rtl"} in the @code{html} element at
@file{server/header.@var{lang}.html}.

@item
You must include an additional CSS, @file{style.rtl.css}, to override
some of the pre-defined values.  See template files for Arabic and
Farsi to understand how these two languages solve some
of the problems.  @xref{CSS}.
@end itemize

@strong{Important:} Some articles contain their own @code{<style>}
redefinitions, or style attributes in the form @code{<p
style="@dots{}">}.  In such situations, it is quite possible that the
general language-specific CSS does not help, and the translation of this
specific article does not look correct.  Please write to
@email{webmasters@@gnu.org}; if you have a working solution that works
for both cases---so much the better.  For general issues that affect
your language and require a general solution, write to
@email{webmasters@@gnu.org} as well, precisely describing the problem.

@node Migrating
@section Migration to the New Style

Migration to the new style should be straightforward, and this is one of
the problems GNUN set out to solve.  If you have to migrate old-style
translations, @pxref{Migrating, , , gnun, The GNUnited Nations Manual}.
If the old translation is HTML 2.0 (or 3.2), you still have to take care
about the inner markup.  Overall, it is substantially easier than doing
all of it manually.

@node Copying This Manual
@appendix GNU Free Documentation License

@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

Local Variables:
eval: (add-hook 'write-file-hooks 'time-stamp)
compile-command: "texi2pdf -c web-trans.texi"
ispell-local-dictionary: "american"
End:

@c  LocalWords:  GNUnited Yavor Doganov vskip filll insertcopying po
@c  LocalWords:  dircategory direntry ifnottex ordinators GNUN gnun uref samp
@c  LocalWords:  coord pxref ordinatorship TranslationsUnderway dfn ordinator
@c  LocalWords:  indicateurl lang html CVS www cvs gettextized LINGUAS online
@c  LocalWords:  emph UTF gEdit OpenOffice txt odt FSF cvsweb historial hy
@c  LocalWords:  quisiera revisar los cambios que hemos hecho por vea abajo el
@c  LocalWords:  href inline distros mai Maithili br zh cn uuml VCS ne
@c  LocalWords:  WebSite Unreviewed subsubsection SourceForge webmaster's Yay
@c  LocalWords:  Panjabi png kb RCS Windoze EOLs committers unmarking checkbox
@c  LocalWords:  pollinking assignee RSS subsubheading Pootle
@c  LocalWords:  Vertaal Narro msgmerge th webmastering SSI CSS filenames xml
@c  LocalWords:  GNUN's RTL dir xmlns ar rtl encodings filename css
@c  LocalWords:  itemx underfull hbox Runtime stylesheet fssbox screenshot svg
@c  LocalWords:  topbanner Inkscape toplevel pre cronjob GNU's Dlaczego Powinno
@c  LocalWords:  Oprogramowanie Wolne Fondation Logiciel Libre Deutsch NoDerivs
@c  LocalWords:  textarea Dit werk gelicenseerd onder een Naamsvermelding ann
@c  LocalWords:  GeenAfgeleideWerken Verenigde licentie Texinfo fdl cp
@c  LocalWords:  texi FIXME printindex eval pdf ispell american
