/*
  File autogenerated by gengetopt version 2.9
  generated with the following command:
  ../src/gengetopt --input more_than_once_cmd.ggo --unamed-opt --func-name more_than_once_cmd_parser --file-name more_than_once_cmd 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
/* Check for configure's getopt check result.  */
#ifndef HAVE_GETOPT_LONG
#include "getopt.h"
#else
#include <getopt.h>
#endif

#ifndef HAVE_STRDUP
#define strdup gengetopt_strdup
#endif /* HAVE_STRDUP */

#include "more_than_once_cmd.h"


void
more_than_once_cmd_parser_print_version (void)
{
  printf ("%s %s\n", PACKAGE, VERSION);
}

void
more_than_once_cmd_parser_print_help (void)
{
  more_than_once_cmd_parser_print_version ();
  printf("\n"
  "Usage: %s [OPTIONS]... [FILES]...\n", PACKAGE);
  printf("   -h         --help        Print help and exit\n");
  printf("   -V         --version     Print version and exit\n");
  printf("   -fINT      --foo=INT     foo option\n");
  printf("   -bSTRING   --bar=STRING  bar option\n");
}


#ifndef HAVE_STRDUP
/* gengetopt_strdup(): automatically generated from strdup.c. */
/* strdup.c replacement of strdup, which is not standard */
static char *
gengetopt_strdup (const char *s)
{
  char *result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}
#endif /* HAVE_STRDUP */

int
more_than_once_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  int c;	/* Character of the parsed option.  */
  int missing_required_options = 0;

  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->foo_given = 0 ;
  args_info->bar_given = 0 ;
#define clear_args() { \
  args_info->bar_arg = NULL; \
}

  clear_args();

  args_info->inputs = NULL;
  args_info->inputs_num = 0;

  optarg = 0;
  optind = 1;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;
      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "foo",	1, NULL, 'f' },
        { "bar",	1, NULL, 'b' },
        { NULL,	0, NULL, 0 }
      };

      c = getopt_long (argc, argv, "hVf:b:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          clear_args ();
          more_than_once_cmd_parser_print_help ();
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          clear_args ();
          more_than_once_cmd_parser_print_version ();
          exit (EXIT_SUCCESS);

        case 'f':	/* foo option.  */
          if (args_info->foo_given)
            {
              fprintf (stderr, "%s: `--foo' (`-f') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->foo_given = 1;
          args_info->foo_arg = strtol (optarg,&stop_char,0);
          break;

        case 'b':	/* bar option.  */
          if (args_info->bar_given)
            {
              fprintf (stderr, "%s: `--bar' (`-b') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->bar_given = 1;
          args_info->bar_arg = strdup (optarg);
          break;


        case 0:	/* Long option with no short option */

        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          exit (EXIT_FAILURE);

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c\n", PACKAGE, c);
          abort ();
        } /* switch */
    } /* while */


  if ( missing_required_options )
    exit (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
  
      args_info->inputs_num = argc - optind ;
      args_info->inputs = 
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        args_info->inputs[ i++ ] = strdup (argv[optind++]) ; 
    }
  
  return 0;
}
