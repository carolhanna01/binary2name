/*
  File autogenerated by gengetopt version 2.9
  generated with the following command:
  ../src/gengetopt --input test_all_opts_cmd.ggo --unamed-opt --func-name test_all_opts_cmd_parser --file-name test_all_opts_cmd 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
/* Check for configure's getopt check result.  */
#ifndef HAVE_GETOPT_LONG
#include "getopt.h"
#else
#include <getopt.h>
#endif

#ifndef HAVE_STRDUP
#define strdup gengetopt_strdup
#endif /* HAVE_STRDUP */

#include "test_all_opts_cmd.h"


void
test_all_opts_cmd_parser_print_version (void)
{
  printf ("%s %s\n", PACKAGE, VERSION);
}

void
test_all_opts_cmd_parser_print_help (void)
{
  test_all_opts_cmd_parser_print_version ();
  printf("\n"
  "Usage: %s [OPTIONS]... [FILES]...\n", PACKAGE);
  printf("   -h             --help                   Print help and exit\n");
  printf("   -V             --version                Print version and exit\n");
  printf("   -sSTRING       --string=STRING          string option\n");
  printf("   -iINT          --int=INT                int option\n");
  printf("   -SSHORT        --short=SHORT            short option\n");
  printf("   -lLONG         --long=LONG              long option\n");
  printf("   -fFLOAT        --float=FLOAT            float option\n");
  printf("   -dDOUBLE       --double=DOUBLE          double option\n");
  printf("   -DLONGDOUBLE   --longdouble=LONGDOUBLE  longdouble option\n");
  printf("   -LLONGLONG     --longlong=LONGLONG      longlong option\n");
  printf("   -F             --flag                   flag option (default=on)\n");
  printf("   -u             --function               function option\n");
  printf("                  --no-short               no short option\n");
  printf("   -rSTRING       --required=STRING        required option\n");
}


#ifndef HAVE_STRDUP
/* gengetopt_strdup(): automatically generated from strdup.c. */
/* strdup.c replacement of strdup, which is not standard */
static char *
gengetopt_strdup (const char *s)
{
  char *result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}
#endif /* HAVE_STRDUP */

int
test_all_opts_cmd_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  int c;	/* Character of the parsed option.  */
  int missing_required_options = 0;

  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->string_given = 0 ;
  args_info->int_given = 0 ;
  args_info->short_given = 0 ;
  args_info->long_given = 0 ;
  args_info->float_given = 0 ;
  args_info->double_given = 0 ;
  args_info->longdouble_given = 0 ;
  args_info->longlong_given = 0 ;
  args_info->flag_given = 0 ;
  args_info->function_given = 0 ;
  args_info->no_short_given = 0 ;
  args_info->required_given = 0 ;
#define clear_args() { \
  args_info->string_arg = NULL; \
  args_info->flag_flag = 1;\
  args_info->required_arg = NULL; \
}

  clear_args();

  args_info->inputs = NULL;
  args_info->inputs_num = 0;

  optarg = 0;
  optind = 1;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;
      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "string",	1, NULL, 's' },
        { "int",	1, NULL, 'i' },
        { "short",	1, NULL, 'S' },
        { "long",	1, NULL, 'l' },
        { "float",	1, NULL, 'f' },
        { "double",	1, NULL, 'd' },
        { "longdouble",	1, NULL, 'D' },
        { "longlong",	1, NULL, 'L' },
        { "flag",	0, NULL, 'F' },
        { "function",	0, NULL, 'u' },
        { "no-short",	0, NULL, 0 },
        { "required",	1, NULL, 'r' },
        { NULL,	0, NULL, 0 }
      };

      c = getopt_long (argc, argv, "hVs:i:S:l:f:d:D:L:Fur:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          clear_args ();
          test_all_opts_cmd_parser_print_help ();
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          clear_args ();
          test_all_opts_cmd_parser_print_version ();
          exit (EXIT_SUCCESS);

        case 's':	/* string option.  */
          if (args_info->string_given)
            {
              fprintf (stderr, "%s: `--string' (`-s') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->string_given = 1;
          args_info->string_arg = strdup (optarg);
          break;

        case 'i':	/* int option.  */
          if (args_info->int_given)
            {
              fprintf (stderr, "%s: `--int' (`-i') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->int_given = 1;
          args_info->int_arg = strtol (optarg,&stop_char,0);
          break;

        case 'S':	/* short option.  */
          if (args_info->short_given)
            {
              fprintf (stderr, "%s: `--short' (`-S') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->short_given = 1;
          args_info->short_arg = (short)strtol (optarg,&stop_char,0);
          break;

        case 'l':	/* long option.  */
          if (args_info->long_given)
            {
              fprintf (stderr, "%s: `--long' (`-l') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->long_given = 1;
          args_info->long_arg = strtol (optarg,&stop_char,0);
          break;

        case 'f':	/* float option.  */
          if (args_info->float_given)
            {
              fprintf (stderr, "%s: `--float' (`-f') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->float_given = 1;
          args_info->float_arg = (float)strtod (optarg, NULL);
          break;

        case 'd':	/* double option.  */
          if (args_info->double_given)
            {
              fprintf (stderr, "%s: `--double' (`-d') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->double_given = 1;
          args_info->double_arg = strtod (optarg, NULL);
          break;

        case 'D':	/* longdouble option.  */
          if (args_info->longdouble_given)
            {
              fprintf (stderr, "%s: `--longdouble' (`-D') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->longdouble_given = 1;
          args_info->longdouble_arg = (long double)strtod (optarg, NULL);
          break;

        case 'L':	/* longlong option.  */
          if (args_info->longlong_given)
            {
              fprintf (stderr, "%s: `--longlong' (`-L') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->longlong_given = 1;
          args_info->longlong_arg = (long long)strtol (optarg,&stop_char,0);
          break;

        case 'F':	/* flag option.  */
          if (args_info->flag_given)
            {
              fprintf (stderr, "%s: `--flag' (`-F') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->flag_given = 1;
          args_info->flag_flag = !(args_info->flag_flag);
          break;

        case 'u':	/* function option.  */
          if (args_info->function_given)
            {
              fprintf (stderr, "%s: `--function' (`-u') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->function_given = 1;
          break;

        case 'r':	/* required option.  */
          if (args_info->required_given)
            {
              fprintf (stderr, "%s: `--required' (`-r') option given more than once\n", PACKAGE);
              clear_args ();
              exit (EXIT_FAILURE);
            }
          args_info->required_given = 1;
          args_info->required_arg = strdup (optarg);
          break;


        case 0:	/* Long option with no short option */
          /* no short option.  */
          if (strcmp (long_options[option_index].name, "no-short") == 0)
          {
            if (args_info->no_short_given)
              {
                fprintf (stderr, "%s: `--no-short' option given more than once\n", PACKAGE);
                clear_args ();
                exit (EXIT_FAILURE);
              }
            args_info->no_short_given = 1;
            break;
          }
          

        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          exit (EXIT_FAILURE);

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c\n", PACKAGE, c);
          abort ();
        } /* switch */
    } /* while */


  if (! args_info->required_given)
    {
      fprintf (stderr, "%s: '--required' ('-r') option required\n", PACKAGE);
      missing_required_options = 1;
    }
  if ( missing_required_options )
    exit (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
  
      args_info->inputs_num = argc - optind ;
      args_info->inputs = 
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        args_info->inputs[ i++ ] = strdup (argv[optind++]) ; 
    }
  
  return 0;
}
