/*
  File autogenerated by gengetopt version @generator_version@
  generated with the following command:
  @command_line@

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
/* Check for configure's getopt check result.  */
#ifndef HAVE_GETOPT_LONG
#include "getopt.h"
#else
#include <getopt.h>
#endif

#ifndef HAVE_STRDUP
#define strdup gengetopt_strdup
#endif /* HAVE_STRDUP */

#include "@source_name@.h"


void
@parser_name@_print_version (void)
{
  printf ("%s %s\n", PACKAGE, VERSION);
}

void
@parser_name@_print_help (void)
{
  @parser_name@_print_version ();
  printf("\n"
  @print_purpose:method{iteration=true}@
  "@usage_string@", PACKAGE);
  @help_option_print:method{iteration=true}@
}

@strdup:method{iteration=true}@

int
@parser_name@ (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  int c;	/* Character of the parsed option.  */
  @struct_def:method{iteration=true}@
  int missing_required_options = 0;
  @group_counters:method{iteration=true}@

  @given_init:method{iteration=true}@
#define clear_args() { \
  @clear_arg:method{iteration=true}@
}

  clear_args();
  @init_unamed:method{iteration=true}@

  optarg = 0;
  optind = 1;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int option_index = 0;
      char *stop_char;
      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        @long_option_struct:method{iteration=true}@
        { NULL,	0, NULL, 0 }
      };

      c = getopt_long (argc, argv, "@getopt_string@", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        @handle_help:method@

        @handle_version:method@

        @handle_option:method{iteration=true}@

        case 0:	/* Long option with no short option */
          @handle_no_short_option:method{iteration=true}@
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          @gen_exit@ (EXIT_FAILURE);

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c\n", PACKAGE, c);
          abort ();
        } /* switch */
    } /* while */

  @handle_group:method{iteration=true}@

  @handle_required:method{iteration=true}@
  if ( missing_required_options )
    @gen_exit@ (EXIT_FAILURE);

  @multiple_fill_array:method{iteration=true}@
  @handle_unamed:method{iteration=true}@
  return 0;
}
@conf_parser:method{iteration=true}@