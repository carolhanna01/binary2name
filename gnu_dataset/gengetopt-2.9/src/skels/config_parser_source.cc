/*
 * File automatically generated by
 * gengen 0.4.2 by Lorenzo Bettini <bettini@gnu.org>
 * http://www.lorenzobettini.it/software/gengen
 */

#include "config_parser_source.h"

void
config_parser_source_gen_class::generate_config_parser_source(ostream &stream, unsigned int indent)
{
  string indent_str (indent, ' ');
  indent = 0;

  stream << "#define CONFIGPARSERBUFSIZE 1024";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "int";
  stream << "\n";
  stream << indent_str;
  stream << parser_name;
  stream << "_configfile (char * const filename, struct gengetopt_args_info *args_info, int override)";
  stream << "\n";
  stream << indent_str;
  stream << "{";
  stream << "\n";
  stream << indent_str;
  stream << "  FILE* file;";
  stream << "\n";
  stream << indent_str;
  stream << "  char linebuf[CONFIGPARSERBUFSIZE];";
  stream << "\n";
  stream << indent_str;
  stream << "  int line_num = 0;";
  stream << "\n";
  stream << indent_str;
  stream << "  int len;";
  stream << "\n";
  stream << indent_str;
  stream << "  int fnum;";
  stream << "\n";
  stream << indent_str;
  stream << "  char fopt[CONFIGPARSERBUFSIZE], farg[CONFIGPARSERBUFSIZE];";
  stream << "\n";
  stream << indent_str;
  stream << "  char *stop_char;";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "  if ((file = fopen(filename, \"r\")) == NULL)";
  stream << "\n";
  stream << indent_str;
  stream << "    {";
  stream << "\n";
  stream << indent_str;
  stream << "      fprintf (stderr, \"%s: Error opening configuration file '%s'\\n\",";
  stream << "\n";
  stream << indent_str;
  stream << "               PACKAGE, filename);";
  stream << "\n";
  stream << indent_str;
  indent = 6;
  stream << "      ";
  stream << gen_exit;
  stream << " (EXIT_FAILURE);";
  stream << "\n";
  stream << indent_str;
  stream << "    }";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "  while ((fgets(linebuf, CONFIGPARSERBUFSIZE, file)) != NULL)";
  stream << "\n";
  stream << indent_str;
  stream << "    {";
  stream << "\n";
  stream << indent_str;
  stream << "      ++line_num;";
  stream << "\n";
  stream << indent_str;
  stream << "      len = strlen(linebuf);";
  stream << "\n";
  stream << indent_str;
  stream << "      if (len == CONFIGPARSERBUFSIZE-1)";
  stream << "\n";
  stream << indent_str;
  stream << "        {";
  stream << "\n";
  stream << indent_str;
  stream << "          fprintf (stderr, \"%s: Line longer than %d characters found in configuration file '%s'\\n\",";
  stream << "\n";
  stream << indent_str;
  stream << "                   PACKAGE, CONFIGPARSERBUFSIZE, filename);";
  stream << "\n";
  stream << indent_str;
  indent = 10;
  stream << "          ";
  stream << gen_exit;
  stream << " (EXIT_FAILURE);";
  stream << "\n";
  stream << indent_str;
  stream << "        }";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "      if (linebuf[0] == '#')";
  stream << "\n";
  stream << indent_str;
  stream << "        continue; /* Line was a comment */";
  stream << "\n";
  stream << indent_str;
  indent = 4;
  stream << "    ";
  stream << "\n";
  stream << indent_str;
  stream << "      /* Get the option */";
  stream << "\n";
  stream << indent_str;
  stream << "      if ((fnum = sscanf(linebuf, \"%s %s\", fopt, farg)) > 0)";
  stream << "\n";
  stream << indent_str;
  stream << "        {";
  stream << "\n";
  stream << indent_str;
  indent = 10;
  stream << "          ";
  generate_handle_single_option (stream, indent + indent_str.length ());
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "          /* Tried all known options. This one is unknown! */";
  stream << "\n";
  stream << indent_str;
  stream << "          fprintf (stderr, \"%s: Unknown option '%s' found in %s\\n\",";
  stream << "\n";
  stream << indent_str;
  stream << "                   PACKAGE, fopt, filename);";
  stream << "\n";
  stream << indent_str;
  indent = 10;
  stream << "          ";
  stream << gen_exit;
  stream << " (EXIT_FAILURE);";
  stream << "\n";
  stream << indent_str;
  stream << "        }";
  stream << "\n";
  stream << indent_str;
  stream << "    } /* while */";
  stream << "\n";
  stream << indent_str;
  stream << "  fclose(file); /* No error checking on close */";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "  return 0;";
  stream << "\n";
  stream << indent_str;
  stream << "}";
  stream << "\n";
  stream << indent_str;
}
