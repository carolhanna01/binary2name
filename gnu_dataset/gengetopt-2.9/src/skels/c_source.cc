/*
 * File automatically generated by
 * gengen 0.4.2 by Lorenzo Bettini <bettini@gnu.org>
 * http://www.lorenzobettini.it/software/gengen
 */

#include "c_source.h"

void
c_source_gen_class::generate_c_source(ostream &stream, unsigned int indent)
{
  string indent_str (indent, ' ');
  indent = 0;

  stream << "/*";
  stream << "\n";
  stream << indent_str;
  stream << "  File autogenerated by gengetopt version ";
  stream << generator_version;
  stream << "\n";
  stream << indent_str;
  stream << "  generated with the following command:";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  stream << "  ";
  stream << command_line;
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "  The developers of gengetopt consider the fixed text that goes in all";
  stream << "\n";
  stream << indent_str;
  stream << "  gengetopt output files to be in the public domain:";
  stream << "\n";
  stream << indent_str;
  stream << "  we make no copyright claims on it.";
  stream << "\n";
  stream << indent_str;
  stream << "*/";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "#include <stdio.h>";
  stream << "\n";
  stream << indent_str;
  stream << "#include <stdlib.h>";
  stream << "\n";
  stream << indent_str;
  stream << "#include <string.h>";
  stream << "\n";
  stream << indent_str;
  stream << "/* If we use autoconf.  */";
  stream << "\n";
  stream << indent_str;
  stream << "#ifdef HAVE_CONFIG_H";
  stream << "\n";
  stream << indent_str;
  stream << "#include \"config.h\"";
  stream << "\n";
  stream << indent_str;
  stream << "#endif";
  stream << "\n";
  stream << indent_str;
  stream << "/* Check for configure's getopt check result.  */";
  stream << "\n";
  stream << indent_str;
  stream << "#ifndef HAVE_GETOPT_LONG";
  stream << "\n";
  stream << indent_str;
  stream << "#include \"getopt.h\"";
  stream << "\n";
  stream << indent_str;
  stream << "#else";
  stream << "\n";
  stream << indent_str;
  stream << "#include <getopt.h>";
  stream << "\n";
  stream << indent_str;
  stream << "#endif";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "#ifndef HAVE_STRDUP";
  stream << "\n";
  stream << indent_str;
  stream << "#define strdup gengetopt_strdup";
  stream << "\n";
  stream << indent_str;
  stream << "#endif /* HAVE_STRDUP */";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "#include \"";
  stream << source_name;
  stream << ".h\"";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "void";
  stream << "\n";
  stream << indent_str;
  stream << parser_name;
  stream << "_print_version (void)";
  stream << "\n";
  stream << indent_str;
  stream << "{";
  stream << "\n";
  stream << indent_str;
  stream << "  printf (\"%s %s\\n\", PACKAGE, VERSION);";
  stream << "\n";
  stream << indent_str;
  stream << "}";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "void";
  stream << "\n";
  stream << indent_str;
  stream << parser_name;
  stream << "_print_help (void)";
  stream << "\n";
  stream << indent_str;
  stream << "{";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  stream << "  ";
  stream << parser_name;
  stream << "_print_version ();";
  stream << "\n";
  stream << indent_str;
  stream << "  printf(\"\\n\"";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_print_purpose (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "  \"";
  stream << usage_string;
  stream << "\", PACKAGE);";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_help_option_print (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "}";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  generate_strdup (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "int";
  stream << "\n";
  stream << indent_str;
  stream << parser_name;
  stream << " (int argc, char * const *argv, struct gengetopt_args_info *args_info)";
  stream << "\n";
  stream << indent_str;
  stream << "{";
  stream << "\n";
  stream << indent_str;
  stream << "  int c;	/* Character of the parsed option.  */";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_struct_def (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "  int missing_required_options = 0;";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_group_counters (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_given_init (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "#define clear_args() { \\";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_clear_arg (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "}";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "  clear_args();";
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_init_unamed (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "  optarg = 0;";
  stream << "\n";
  stream << indent_str;
  stream << "  optind = 1;";
  stream << "\n";
  stream << indent_str;
  stream << "  opterr = 1;";
  stream << "\n";
  stream << indent_str;
  stream << "  optopt = '?';";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "  while (1)";
  stream << "\n";
  stream << indent_str;
  stream << "    {";
  stream << "\n";
  stream << indent_str;
  stream << "      int option_index = 0;";
  stream << "\n";
  stream << indent_str;
  stream << "      char *stop_char;";
  stream << "\n";
  stream << indent_str;
  stream << "      static struct option long_options[] = {";
  stream << "\n";
  stream << indent_str;
  stream << "        { \"help\",	0, NULL, 'h' },";
  stream << "\n";
  stream << indent_str;
  stream << "        { \"version\",	0, NULL, 'V' },";
  stream << "\n";
  stream << indent_str;
  indent = 8;
  generate_long_option_struct (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "        { NULL,	0, NULL, 0 }";
  stream << "\n";
  stream << indent_str;
  stream << "      };";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "      c = getopt_long (argc, argv, \"";
  stream << getopt_string;
  stream << "\", long_options, &option_index);";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "      if (c == -1) break;	/* Exit from `while (1)' loop.  */";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "      switch (c)";
  stream << "\n";
  stream << indent_str;
  stream << "        {";
  stream << "\n";
  stream << indent_str;
  indent = 8;
  stream << "        ";
  generate_handle_help (stream, indent + indent_str.length ());
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  indent = 8;
  stream << "        ";
  generate_handle_version (stream, indent + indent_str.length ());
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  indent = 8;
  generate_handle_option (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "        case 0:	/* Long option with no short option */";
  stream << "\n";
  stream << indent_str;
  indent = 10;
  generate_handle_no_short_option (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "        case '?':	/* Invalid option.  */";
  stream << "\n";
  stream << indent_str;
  stream << "          /* `getopt_long' already printed an error message.  */";
  stream << "\n";
  stream << indent_str;
  indent = 10;
  stream << "          ";
  stream << gen_exit;
  stream << " (EXIT_FAILURE);";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  stream << "        default:	/* bug: option not considered.  */";
  stream << "\n";
  stream << indent_str;
  stream << "          fprintf (stderr, \"%s: option unknown: %c\\n\", PACKAGE, c);";
  stream << "\n";
  stream << indent_str;
  stream << "          abort ();";
  stream << "\n";
  stream << indent_str;
  stream << "        } /* switch */";
  stream << "\n";
  stream << indent_str;
  stream << "    } /* while */";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_handle_group (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_handle_required (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "  if ( missing_required_options )";
  stream << "\n";
  stream << indent_str;
  indent = 4;
  stream << "    ";
  stream << gen_exit;
  stream << " (EXIT_FAILURE);";
  stream << "\n";
  stream << indent_str;
  stream << "\n";
  stream << indent_str;
  indent = 2;
  generate_multiple_fill_array (stream, indent + indent_str.length ());
  stream << indent_str;
  indent = 2;
  generate_handle_unamed (stream, indent + indent_str.length ());
  stream << indent_str;
  stream << "  return 0;";
  stream << "\n";
  stream << indent_str;
  stream << "}";
  stream << "\n";
  stream << indent_str;
  generate_conf_parser (stream, indent + indent_str.length ());
}
