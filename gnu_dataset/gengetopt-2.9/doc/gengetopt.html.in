<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR"
 content="Mozilla/4.79 [en] (X11; U; Linux 2.4.18-6mdk i686) [Netscape]">
  <title>Gengetopt - GNU Project - Free Software Foundation (FSF)</title>
</head>
<body bgcolor="#ffffff">
<h1> GNU Gengetopt @VERSION@</h1>
<i></i>
<p>This program generates a C function that uses <i>getopt_long</i>
function to parse the command line options, to validate them and fills a <i>struct</i>
. </p>
<p>Thus your program can now handle options such as: </p>
<pre>myprog --input foo.c -o foo.o --no-tabs -i 100 *.class</pre>
And both long options (those that start with --) and short options
(start with - and consist of only one character) can be handled. For
standards about short and long options you may want to take a look at
the <a href="http://www.gnu.org/prep/standards_toc.html">GNU Coding
Standards</a> .
<p>gengetopt is <b><font color="#009900">free software</font></b>.
Please see the file <a href="LICENSE">LICENSE</a> and <a href="COPYING">COPYING</a>
for details. <br>
Notice that: Use of gengetopt <u>does not impose any particular
license on the generated code: the code generated is not under any
license</u>. </p>
<p>For documentation, please read this file. </p>
<p>gengetopt is perfect if you are too lazy (like me) to write all
stuff required to call getopt_long, and when you have a <br>
program and wish it took options. </p>
<p>Generated code works if you use <i>GNU Autoconf</i> or <i>GNU
Automake</i> . </p>
<p>Gengetopt has originally been written by <b>Roberto Arturo Tena
Sanchez</b> &lt;<a href="mailto:arturo@directmail.org">arturo@directmail.org</a>&gt;,
and currently maintained by <b>Lorenzo Bettini </b>&lt;<a
 href="mailto:bettini@gnu.org">bettini@gnu.org</a>&gt;. </p>
<p>Gengetopt is a <a href="http://www.gnu.org">GNU</a> program and its
main home page is at GNU site: <br>
<a href="http://www.gnu.org/software/gengetopt/gengetopt.html">http://www.gnu.org/software/gengetopt/gengetopt.html</a>
, </p>
<h2> Download</h2>
You can download it from GNU's ftp site: <br>
<a href="ftp://ftp.gnu.org/gnu/gengetopt/">ftp://ftp.gnu.org/gnu/gengetopt/</a>
or from one of its mirrors (see <a
 href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html</a>
).
<p>I do not distribute Windows binaries anymore; since, they can be
easily built by using <b>Cygnus C/C++</b> compiler, available at <a
 href="http://www.cygwin.com/">http://www.cygwin.com/</a>. However, if
you don't feel like downloading such compiler, you can request  such
binaries directly to me, by e-mail (<a href="mailto:bettini@gnu.org">bettini@gnu.org</a>
) and I can send them to you. </p>
<p>You may also want to check the <i>md5sum</i> of the archives, which
are also digitally signed by me (<i>Lorenzo Bettini</i>) with <i>GNU
gpg</i> (<a href="http://www.gnupg.org">http://www.gnupg.org</a>). My
GPG public key can be found at my home page (see at the end of this
doc). </p>
<p>You can also get the patches, if they are available for a particular
release (see <a href="#Patching%20from%20a%20previous%20version">below</a>
for patching from a previous version). </p>
<h3> Anonymous CVS Access</h3>
This project's CVS repository can be checked out through anonymous
(pserver) CVS with the following instruction set. When prompted for a
password for anoncvs, simply press the Enter key.
<pre>cvs -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gengetopt login</pre>
<pre>cvs -z3 -d:pserver:anoncvs@subversions.gnu.org:/cvsroot/gengetopt co gengetopt</pre>
Further instructions can be found at the address: <a
 href="http://savannah.gnu.org/projects/gengetopt">http://savannah.gnu.org/projects/gengetopt</a>
.
<h2> Changes in this release</h2>
<ul>
  <li> see <a href="NEWS">NEWS</a> file for a summary of new features in
this release and</li>
  <li> see <a href="ChangeLog">ChangeLog</a> for the complete list of
changes sources</li>
</ul>
<h2> Installation</h2>
See the file <a href="INSTALL">INSTALL</a> for detailed building and
installation instructions; anyway if you're used to compiling Linux
software that comes with sources you may simply follow the usual
procedure:
<pre>cd <i>&lt;source code main directory&gt;<br></i><tt>./configure<br>make<br>make install</tt></pre>
Note: unless you specify a different install directory by --prefix
option of configure (e.g. <tt>./configure --prefix=<i>&lt;your home&gt;</i></tt>
), you must be root to '<tt>make install</tt>'.
<p>You can also run some tests by issuing '<tt>make check</tt>'. </p>
<p>Files will be installed in the following directories: </p>
<ul>
  <li> <tt>Executables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-&gt; /prefix/bin</tt></li>
  <li> <tt>Docs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-&gt; /prefix/share/doc/gengetopt</tt></li>
  <li> <tt>Man
pages&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-&gt; /prefix/man</tt></li>
  <li> <tt>Examples&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-&gt; /prefix/share/doc/gengetopt/examples</tt></li>
  <li> <tt>Util
files&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;
/prefix/share/gengetopt</tt></li>
</ul>
Default value for prefix is <tt>/usr/local</tt> but you may change it
with --prefix option to configure (see above).
<h3> <a name="build gengetopt"></a>What you need to build gengetopt</h3>
<b><font color="#ff0000">Actually you need nothing more than a Unix
C/C++ compiler.</font></b>
<p><i>getopt_long</i> function is usually in the standard C library, but
there may be some C libraries which don't include it; in this case you
have to link the program that uses the file generated by gengetopt with
the files <i>getopt.c</i> and <i>getopt1.c</i> and include <i>getopt.h</i>
in your project. You may also need to link <i>alloca.c.</i>We obviously
provide these files in the utility files directory (<tt>/prefix/share/gengetopt</tt>).
These files are part of the GNU C library. You may want to take a look
at <a href="man_getopt.html"><i>getopt</i> man page</a>. Read also <a
 href="no_getopt_long.txt">no_getopt_long.txt</a>. for instuctions on
how to check if <i>getopt_long</i> and <i>alloca</i> are part of the
library and how to deal with their lacking (using <i>autoconf</i> and <i>automake</i>).</p>
<p>gengetopt has been developed under <font color="#008000">Linux</font>,
using <b>gcc</b>, and <b>bison</b> (yacc) and <b>flex</b> (lex), and
ported under <font color="#008000">Windows</font> with <b>Cygnus C/C++</b>
compiler, available at <a href="http://www.cygnus.com/">http://www.cygnus.com/</a>.
I used the excellent GNU <b>Autoconf</b> and <b>Automake</b>. I also
used <b>Autotools </b>(<a
 href="ftp://ftp.ugcs.caltech.edu/pub/elef/autotools">ftp://ftp.ugcs.caltech.edu/pub/elef/autotools</a>
) which creates a starting source tree (according to GNU standards) with
autoconf, automake starting files, and <b>getopt_long</b> (for command
line parsing). Moreover <i>Gengen</i> (<a
 href="http://www.lorenzobettini.it/software/gengen/">http://www.lorenzobettini.it/software/gengen/</a>
) is used for automatically generating the code that generates the
command line parser. </p>
<p>Actually, unless you want to develop gengetopt, you don't need all
these tools to build gengetopt because I provide generated sources; you
don't need neither bison (yacc) nor flex (lex), for the same reason.
Actually programs that use lex generated files need to link with
library <i>libfl </i>(or <i> libl </i>for lex); anyway configuration
phase can discover if this library is missing and in that case it sets
the program to link with a source file I provide. This hack works for
flex: I don't know about lex generated scanners. But, again, this is a
problem only if you develop gengetopt and you use lex. </p>
<p>Should you want to act on the generated code you may want to
download <i>Gengen</i> that speeds up this part (<a
 href="http://www.lorenzobettini.it/software/gengen/">http://www.lorenzobettini.it/software/gengen/</a>
). </p>
<h3> <a name="Patching from a previous version"></a>Patching from a
previous version</h3>
If you downloaded a patch, say <tt>gengetopt-1.3-1.3.1-patch.gz</tt>
(i.e. the patch to go from version 1.3 to version 1.3.1), cd to the
directory with sources from the previous version (<tt>gengetopt-1.3</tt>)
and type:
<pre>gunzip -cd ../gengetopt-1.3-1.3.1.patch.gz | patch -p1</pre>
and restart the compilation process (if you had already run configure a
simple <tt>make</tt> will do).
<h2> Usage (<i>a little tutorial</i>)</h2>
The command line options, which have to be handled by gengetopt
generated function, are specified in a file (typically with <i>.ggo</i>
extension). This file consist in lines of sentences with the following
formats:
<pre>package &lt;packname&gt;<br>version &lt;version&gt;<br><br>option &lt;long&gt; &lt;short&gt; &lt;desc&gt; &lt;argtype&gt; {default="&lt;default value&gt;"} &lt;required&gt; {multiple}<br>option &lt;long&gt; &lt;short&gt; &lt;desc&gt; flag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;onoff&gt;<br>option &lt;long&gt; &lt;short&gt; &lt;desc&gt; no</pre>
Where:
<p><b>packname</b> </p>
<blockquote>Double quoted string.</blockquote>
<b>version</b>
<blockquote>Double&nbsp; quoted&nbsp; string.</blockquote>
<b>purpose</b>
<blockquote>What the program does (even on more than one line), it will
be printed with the help. Double&nbsp; quoted&nbsp; string.</blockquote>
<b>long</b>
<blockquote>The long option, a double quoted string with&nbsp; upper
and&nbsp; lower&nbsp; case&nbsp; chars,&nbsp; digits,&nbsp; '-' and
'.'.&nbsp; No spaces allowed.&nbsp; The name of the&nbsp;
variables&nbsp; generated&nbsp;  to store arguments are long options
converted to be legal C variable names.&nbsp; This means, '.'&nbsp; and
'-'&nbsp; are&nbsp; both replaced by '_'. '_arg' is appended, or
'_flag' for a flag.</blockquote>
<b>short</b>
<blockquote>The short option, a&nbsp; single&nbsp; upper&nbsp; or&nbsp;
lower&nbsp; case char, or a digit. If a '-' is specified, then no short
option is considered for the long option (thus long options with no
associated short options are allowed).</blockquote>
<b>desc</b>
<blockquote>Double&nbsp; quoted&nbsp; string&nbsp; with&nbsp;
upper&nbsp; and lower case chars, digits, '-', '.' and spaces. First
character must not be a space.</blockquote>
<b>argtype</b>
<blockquote>string, int, short, long, float, double, longdouble or
longlong.</blockquote>
<b>default</b>
<blockquote>an optional default value for the option.&nbsp; The value
must always be specified as a double quoted string.</blockquote>
<b>required</b>
<blockquote>yes or no.<br>
</blockquote>
<b>multiple</b>
<blockquote>If this flag is specified then this option can be specified
more than once at command line; all the values for this option are
stored in an array. &nbsp;See <a href="#multiple">multiple options</a>
in the Advanced Features section.</blockquote>
<b>onoff</b>
<blockquote>on or off. This is the state of the flag when the program
starts. If user specifies the option, the flag toggles.</blockquote>
The third type of option is used when the option does not take any
argument. It must not be required.
<p>Comments begins with '<b>#</b>' in any place of the line and ends in
the end of line. </p>
<p>Here's an example of such a file (the file is called                <i>sample1.ggo</i>)<br>
&nbsp;
<table cellspacing="0" cellpadding="10" bgcolor="#e0e0e0" nosave="">
  <tbody>
    <tr nosave="">
      <td nosave=""><tt># file sample1.ggo</tt> <br>
      <tt>option&nbsp; "str-opt"&nbsp;&nbsp;&nbsp;&nbsp; s "A string
option"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp; no</tt> <br>
      <tt>option&nbsp; "my-opt"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m
"Another integer option"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
int&nbsp;&nbsp;&nbsp;&nbsp; no</tt> <br>
      <tt>option&nbsp; "int-opt"&nbsp;&nbsp;&nbsp;&nbsp; i "A int
option"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes</tt> <br>
      <tt>option&nbsp; "flag-opt"&nbsp;&nbsp;&nbsp; - "A flag
option"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
flag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; off</tt> <br>
      <tt>option&nbsp; "funct-opt"&nbsp;&nbsp; F "A function
option"&nbsp;&nbsp;&nbsp; no&nbsp;</tt> <br>
      <tt>option&nbsp; "long-opt"&nbsp;&nbsp;&nbsp; - "A long
option"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no</tt> <br>
      <tt>option&nbsp; "def-opt"&nbsp;&nbsp;&nbsp;&nbsp; - "A string
option with default" string default="Hello" no</tt></td>
    </tr>
  </tbody>
</table>
</p>
<p>The simplest way to use gengetopt is to pass this file as the
standard input, i.e.: </p>
<pre>gengetopt &lt; sample1.ggo</pre>
by default gengetopt generates <b><i>cmdline.h</i></b> and <b><i>cmdline.c</i></b>
. Otherwise we can specify these names with a command line option:
 <pre>gengetopt &lt; sample1.ggo --file-name=cmdline1 --unamed-opts</pre>
The option <i>--unamed-opts</i> allows the generated command line
parser to accept also names, without an option (for instance you can
pass a file name without an option in front of it, and also use
wildcards, such as *.c, foo*.? and so on).
<p>In cmdline1.h you'll find the generated C struct: <br>
&nbsp;
<table border="1" cols="1" width="100%" nosave="">
  <tbody>
    <tr nosave="">
      <td nosave="">
      <pre><tt><i><font color="#9a1900">/* cmdline1.h */<br><br>/* File autogenerated by gengetopt version 2.6&nbsp; */<br><br></font></i><b><font
 color="#000080">#ifndef</font></b> _cmdline1_h<br><b><font
 color="#000080">#define</font></b> _cmdline1_h<br><br><b><font
 color="#000080">#ifdef</font></b> __cplusplus<br><b><font
 color="#0000ff">extern</font></b> <font color="#ff0000">"C"</font> <font
 color="#ff0000">{<br></font><b><font color="#000080">#endif</font></b> <i><font
 color="#9a1900">/* __cplusplus */<br><br>/* Don't define PACKAGE and VERSION if we use automake.&nbsp; */<br></font></i><b><font
 color="#000080">#if</font></b> defined PACKAGE<br><b><font
 color="#000080">#&nbsp; undef</font></b> PACKAGE<br><b><font
 color="#000080">#endif<br>#define</font></b> PACKAGE <font
 color="#ff0000">"sample1"<br></font><b><font color="#000080">#if</font></b> defined VERSION<br><b><font
 color="#000080">#&nbsp; undef</font></b> VERSION<br><b><font
 color="#000080">#endif<br>#define</font></b> VERSION <font
 color="#ff0000">"2.0"<br><br></font><b><font color="#0000ff">struct</font></b> gengetopt_args_info <font
 color="#ff0000">{<br></font>&nbsp; <font color="#009900">char</font> <font
 color="#990000">*</font> str_opt_arg<font color="#990000">;</font>&nbsp;&nbsp; <i><font
 color="#9a1900">/* A string option.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> my_opt_arg<font color="#990000">;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i><font
 color="#9a1900">/* Another integer option.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> int_opt_arg<font color="#990000">;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i><font
 color="#9a1900">/* A int option.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> flag_opt_flag<font color="#990000">;</font>&nbsp;&nbsp;&nbsp; <i><font
 color="#9a1900">/* A flag option (default=off).&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">long</font> long_opt_arg<font color="#990000">;</font>&nbsp;&nbsp;&nbsp; <i><font
 color="#9a1900">/* A long option.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">char</font> <font color="#990000">*</font> def_opt_arg<font
 color="#990000">;</font>&nbsp;&nbsp; <i><font color="#9a1900">/* A string option with default (default='Hello').&nbsp; */<br><br></font></i>&nbsp; <font
 color="#009900">int</font> help_given <font color="#990000">;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i><font
 color="#9a1900">/* Whether help was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> version_given <font color="#990000">;</font>&nbsp;&nbsp; <i><font
 color="#9a1900">/* Whether version was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> str_opt_given <font color="#990000">;</font>&nbsp;&nbsp; <i><font
 color="#9a1900">/* Whether str-opt was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> my_opt_given <font color="#990000">;</font>&nbsp;&nbsp;&nbsp; <i><font
 color="#9a1900">/* Whether my-opt was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> int_opt_given <font color="#990000">;</font>&nbsp;&nbsp; <i><font
 color="#9a1900">/* Whether int-opt was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> flag_opt_given <font color="#990000">;</font>&nbsp; <i><font
 color="#9a1900">/* Whether flag-opt was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> funct_opt_given <font color="#990000">;</font> <i><font
 color="#9a1900">/* Whether funct-opt was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> long_opt_given <font color="#990000">;</font>&nbsp; <i><font
 color="#9a1900">/* Whether long-opt was given.&nbsp; */<br></font></i>&nbsp; <font
 color="#009900">int</font> def_opt_given <font color="#990000">;</font>&nbsp;&nbsp; <i><font
 color="#9a1900">/* Whether def-opt was given.&nbsp; */<br><br></font></i>&nbsp; <font
 color="#009900">char</font> <font color="#990000">**</font>inputs <font
 color="#990000">;</font> <i><font color="#9a1900">/* unamed options */<br></font></i>&nbsp; <font
 color="#009900">unsigned</font> inputs_num <font color="#990000">;</font> <i><font
 color="#9a1900">/* unamed options number */<br></font></i><font
 color="#ff0000">}</font> <font color="#990000">;<br><br></font><font
 color="#009900">int</font> <b><font color="#000000">cmdline_parser</font></b> <font
 color="#990000">(</font><font color="#009900">int</font> argc<font
 color="#990000">,</font> <font color="#009900">char</font> <font
 color="#990000">*</font> <b><font color="#0000ff">const</font></b> <font
 color="#990000">*</font>argv<font color="#990000">,</font> <b><font
 color="#0000ff">struct</font></b> gengetopt_args_info <font
 color="#990000">*</font>args_info<font color="#990000">);<br><br></font><font
 color="#009900">void</font> <b><font color="#000000">cmdline_parser_print_help</font></b><font
 color="#990000">(</font><font color="#009900">void</font><font
 color="#990000">);<br></font><font color="#009900">void</font> <b><font
 color="#000000">cmdline_parser_print_version</font></b><font
 color="#990000">(</font><font color="#009900">void</font><font
 color="#990000">);<br><br></font><b><font color="#000080">#ifdef</font></b> __cplusplus<br><font
 color="#ff0000">}<br></font><b><font color="#000080">#endif</font></b> <i><font
 color="#9a1900">/* __cplusplus */<br></font></i><b><font
 color="#000080">#endif</font></b> <i><font color="#9a1900">/* _cmdline1_h */</font></i></tt></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Notice that by default the generated function is called             <i>cmdline_parser</i>
(see the command line options below, to override this name), and it
takes the arguments that <i>main</i> receives and a pointer to such a
struct, that it will be filled. <br>
And here's how this function can be used inside the main program: <br>
&nbsp;
<table border="1" cols="1" width="100%" nosave="">
  <tbody>
    <tr nosave="">
      <td nosave="">
      <pre><tt><i><font color="#9a1900">/* main1.cc */<br>/* we try to use gengetopt generated file in a C++ program */<br>/* we don't use autoconf and automake vars */<br><br></font></i><b><font
 color="#000080">#include</font></b> <font color="#ff0000">&lt;iostream.h&gt;<br></font><b><font
 color="#000080">#include</font></b> <font color="#ff0000">"stdlib.h"<br><br></font><b><font
 color="#000080">#include</font></b> <font color="#ff0000">"cmdline1.h"<br><br></font><font
 color="#009900">int<br></font><b><font color="#000000">main</font></b> <font
 color="#990000">(</font><font color="#009900">int</font> argc<font
 color="#990000">,</font> <font color="#009900">char</font> <font
 color="#990000">**</font>argv<font color="#990000">)<br></font><font
 color="#ff0000">{<br></font>&nbsp; gengetopt_args_info args_info<font
 color="#990000">;<br><br></font>&nbsp; cout <font color="#990000">&lt;&lt;</font> <font
 color="#ff0000">"This one is from a C++ program"</font> <font
 color="#990000">&lt;&lt;</font> endl <font color="#990000">;<br></font>&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"Try to launch me with some options"</font> <font
 color="#990000">&lt;&lt;</font> endl <font color="#990000">;<br></font>&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"(type sample1 --help for the complete list)"</font> <font
 color="#990000">&lt;&lt;</font> endl <font color="#990000">;<br></font>&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"For example: ./sample1 *.* --funct-opt"</font> <font
 color="#990000">&lt;&lt;</font> endl <font color="#990000">;<br><br></font>&nbsp; <i><font
 color="#9a1900">/* let's call our cmdline parser */<br></font></i>&nbsp; <b><font
 color="#0000ff">if</font></b> <font color="#990000">(</font><b><font
 color="#000000">cmdline_parser</font></b> <font color="#990000">(</font>argc<font
 color="#990000">,</font> argv<font color="#990000">,</font> <font
 color="#990000">&amp;</font>args_info<font color="#990000">)</font> <font
 color="#990000">!=</font> <font color="#993399">0</font><font
 color="#990000">)<br></font>&nbsp;&nbsp;&nbsp; <b><font color="#000000">exit</font></b><font
 color="#990000">(</font><font color="#993399">1</font><font
 color="#990000">)</font> <font color="#990000">;<br><br></font>&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"Here are the options you passed..."</font> <font
 color="#990000">&lt;&lt;</font> endl<font color="#990000">;<br><br></font>&nbsp; <b><font
 color="#0000ff">for</font></b> <font color="#990000">(</font> <font
 color="#009900">unsigned</font> i <font color="#990000">=</font> <font
 color="#993399">0</font> <font color="#990000">;</font> i <font
 color="#990000">&lt;</font> args_info<font color="#990000">.</font>inputs_num <font
 color="#990000">;</font> <font color="#990000">++</font>i <font
 color="#990000">)<br></font>&nbsp;&nbsp;&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"file: "</font> <font
 color="#990000">&lt;&lt;</font> args_info<font color="#990000">.</font>inputs<font
 color="#990000">[</font>i<font color="#990000">]</font> <font
 color="#990000">&lt;&lt;</font> endl <font color="#990000">;<br><br></font>&nbsp; <b><font
 color="#0000ff">if</font></b> <font color="#990000">(</font> args_info<font
 color="#990000">.</font>funct_opt_given <font color="#990000">)<br></font>&nbsp;&nbsp;&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"You chose --funct-opt or -F."</font> <font
 color="#990000">&lt;&lt;</font> endl <font color="#990000">;<br><br></font>&nbsp; <b><font
 color="#0000ff">if</font></b> <font color="#990000">(</font> args_info<font
 color="#990000">.</font>str_opt_given <font color="#990000">)<br></font>&nbsp;&nbsp;&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"You inserted "</font> <font
 color="#990000">&lt;&lt;</font> args_info<font color="#990000">.</font>str_opt_arg <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">" for "</font> <font
 color="#990000">&lt;&lt;<br></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font
 color="#ff0000">"--str-opt option."</font> <font color="#990000">&lt;&lt;</font> endl <font
 color="#990000">;<br><br></font>&nbsp; <b><font color="#0000ff">if</font></b> <font
 color="#990000">(</font> args_info<font color="#990000">.</font>int_opt_given <font
 color="#990000">)<br></font>&nbsp;&nbsp;&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"This is the integer you input: "</font> <font
 color="#990000">&lt;&lt;</font>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; args_info<font
 color="#990000">.</font>int_opt_arg <font color="#990000">&lt;&lt;</font> <font
 color="#ff0000">"."</font> <font color="#990000">&lt;&lt;</font> endl<font
 color="#990000">;<br><br></font>&nbsp; <b><font color="#0000ff">if</font></b> <font
 color="#990000">(</font>args_info<font color="#990000">.</font>flag_opt_given<font
 color="#990000">)<br></font>&nbsp;&nbsp;&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"The flag option was given!"</font> <font
 color="#990000">&lt;&lt;</font> endl<font color="#990000">;<br><br></font>&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"The flag is "</font> <font
 color="#990000">&lt;&lt;</font> <font color="#990000">(</font> args_info<font
 color="#990000">.</font>flag_opt_flag <font color="#990000">?</font> <font
 color="#ff0000">"on"</font> <font color="#990000">:</font> <font
 color="#ff0000">"off"</font> <font color="#990000">)</font> <font
 color="#990000">&lt;&lt;<br></font>&nbsp;&nbsp;&nbsp; <font
 color="#ff0000">"."</font> <font color="#990000">&lt;&lt;</font> endl <font
 color="#990000">;<br><br></font>&nbsp; cout <font color="#990000">&lt;&lt;</font> args_info<font
 color="#990000">.</font>def_opt_arg <font color="#990000">&lt;&lt;</font> <font
 color="#ff0000">"! "</font><font color="#990000">;<br><br></font>&nbsp; cout <font
 color="#990000">&lt;&lt;</font> <font color="#ff0000">"Have a nice day! :-)"</font> <font
 color="#990000">&lt;&lt;</font> endl <font color="#990000">;<br><br></font>&nbsp; <b><font
 color="#0000ff">return</font></b> <font color="#993399">0</font><font
 color="#990000">;<br></font><font color="#ff0000">}</font></tt></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Now you can compile <i>main1.cc</i> and the <i>cmdline1.c</i>
generated by gengetopt and link all together to obtain <i>sample1</i>
executable: </p>
<pre>gcc -c cmdline1.c<br>g++ -c main1.cc<br>g++ -o sample1 cmdline1.o main1.o</pre>
(Here we assume that getopt_long is included in the standard C library;
see '<a href="#build%20gengetopt">What you need to build gengetopt</a>'
section).
<p>Now let's try some tests with this program: </p>
<pre>$ ./sample1 -s "hello" --int-opt 1234<br>This one is from a C++ program<br>Try to launch me with some options<br>(type sample1 --help for the complete list)<br>For example: ./sample1 *.* --funct-opt<br>Here are the options you passed...<br>You inserted hello for --str-opt option.<br>This is the integer you input: 1234.<br>The flag is off.<br>Have a nice day! :-)</pre>
You can also pass many file names to the command line (this also shows
how flags work):
<pre>$ ./sample1 *.h -i -100 -x<br>This one is from a C++ program<br>Try to launch me with some options<br>(type sample1 --help for the complete list)<br>For example: ./sample1 *.* --funct-opt<br>Here are the options you passed...<br>file: cmdline1.h<br>file: cmdline2.h<br>file: cmdline.h<br>file: getopt.h<br>This is the integer you input: -100.<br>The flag is on.<br>Have a nice day! :-)</pre>
And if we try to omit the <i>--int-opt</i> (or <i>-i</i>), which is
required, we get an error:
<pre>$ ./sample1<br>This one is from a C++ program<br>Try to launch me with some options<br>(type sample1 --help for the complete list)<br>For example: ./sample1 *.* --funct-opt<br>sample1: `--int-opt' (`-i') option required!</pre>
If you're curious you may want to take a look at the <a
 href="cmdline1.c.html">generated C file</a>.
<p>You may find other examples in <tt>/prefix/share/doc/gengetopt</tt>.</p>
<h2> </h2>
<h2>Advanced features</h2>
<h3>Group options<br>
</h3>
It is also possible <i>to group</i> options; options belonging to a
group are considered mutual exclusive. &nbsp;In order to use this
feature, first the group has to be defined, and then a <i>groupoption</i>
can be defined. &nbsp;A groupoption has basically the same syntax of a
standard option, apart that the required flag must not be specified (it
would not make sense, since the options of the same group are mutual
exclusive) and the <i>group</i>to which the option belongs has to be
specified.<br>
<pre>defgroup "&lt;group name&gt;" {yes}<br>groupoption &lt;long&gt; &lt;short&gt; &lt;desc&gt; &lt;argtype&gt; group="&lt;group name&gt;"</pre>
If a group is defined as required, then one (but only one) option
belonging to the group has to be specified.<br>
<br>
Here's an example (taken from the test <tt>test_group_cmd.ggo</tt>):<br>
<pre>defgroup "grp2"<br>defgroup "grp1" yes<br>groupoption "opta" a "string a" group="grp1"<br>groupoption "optb" b "string b" group="grp1"<br>groupoption "optc" c "string c" group="grp2"<br>groupoption "optd" d "string d" group="grp2"<br></pre>
The group <i>grp1</i> is required, so either <i>opta</i> or <i>optb</i>
has to be specified (but only one of them). &nbsp;Here's the output of
some executions:<br>
<pre>$ ./test_groups<br>gengetopt: 0 options of group grp1 were given. One is required<br>$ ./test_groups -a          OK<br>$ ./test_groups -a -b<br>gengetopt: 2 options of group grp1 were given. One is required<br>$ ./test_groups -a -c       OK<br>$ ./test_groups -a -c -d<br>gengetopt: 2 options of group grp2 were given. At most one is required<br></pre>
<h3>Config files</h3>
It is often useful to specifiy command line options directly in a
configuration file, so that the value of some options are read from
this file if they are not given as command line options. &nbsp;When the
command line option <i> --conf-parser</i> is given to gengetopt, apart
from the standard command line option parser, also this additional
parser is generated (its name is <i>&lt;commandline_parser&gt;_configfile</i>):
<pre>int<br>&lt;cmd_parser_name&gt;_configfile (char * const filename,<br>                              struct gengetopt_args_info *args_info,<br>                              int override);</pre>
The config file has the following simple syntax: lines starting with <i>#</i>
are considered comments and:<br>
<ul>
  <li>&lt;option_name&gt; {&lt;option_val&gt;} means that <i>option_name</i>
is given, and if it accepts an argument, then its value is <i>option_val</i></li>
</ul>
For instance here's a program that uses this feature (this is the test <tt>
test_conf_parser</tt>):<br>
<br>
<table border="1" cols="1" width="100%" nosave="">
  <tbody>
    <tr nosave="">
      <td nosave="">
      <pre><tt>
<i><font color="#9a1900">/* test_conf_parser.c test */</font></i>

<i><font color="#9a1900">/* test all kinds of options and the conf file parser */</font></i>

<b><font color="#000080">#include</font></b> <font color="#ff0000">&lt;stdlib.h&gt;</font>
<b><font color="#000080">#include</font></b> <font color="#ff0000">&lt;stdio.h&gt;</font>

<b><font color="#000080">#include</font></b> <font color="#ff0000">"test_conf_parser_cmd.h"</font>

<b><font color="#0000ff">static</font></b> <b><font color="#0000ff">struct</font></b> gengetopt_args_info args_info<font
 color="#990000">;</font>

<font color="#009900">int</font>
<b><font color="#000000">main</font></b> <font color="#990000">(</font><font
 color="#009900">int</font> argc<font color="#990000">,</font> <font
 color="#009900">char</font> <font color="#990000">*</font><font
 color="#990000">*</font>argv<font color="#990000">)</font>
<font color="#ff0000">{</font>  <br>  <b><font color="#0000ff">if</font></b> <font
 color="#990000">(</font><b><font color="#000000">test_conf_parser_cmd_parser</font></b> <font
 color="#990000">(</font>argc<font color="#990000">,</font> argv<font
 color="#990000">,</font> <font color="#990000">&amp;</font>args_info<font
 color="#990000">)</font> <font color="#990000">!</font><font
 color="#990000">=</font> <font color="#993399">0</font><font
 color="#990000">)</font>
    <b><font color="#000000">exit</font></b><font
 color="#990000">(</font><font color="#993399">1</font><font
 color="#990000">)</font> <font color="#990000">;</font>

  <b><font
 color="#0000ff">if</font></b> <font color="#990000">(</font><b><font
 color="#000000">test_conf_parser_cmd_parser_configfile</font></b>
      <font
 color="#990000">(</font>args_info<font color="#990000">.</font>conf_file_arg<font
 color="#990000">,</font> <font color="#990000">&amp;</font>args_info<font
 color="#990000">,</font> <font color="#993399">1</font><font
 color="#990000">)</font> <font color="#990000">!</font><font
 color="#990000">=</font> <font color="#993399">0</font><font
 color="#990000">)</font> <i><font color="#9a1900">// override cmd options</font></i>
    <b><font
 color="#000000">exit</font></b><font color="#990000">(</font><font
 color="#993399">1</font><font color="#990000">)</font><font
 color="#990000">;</font>

  <b><font color="#000000">printf</font></b> <font
 color="#990000">(</font><font color="#ff0000">"value of required: %s\n"</font><font
 color="#990000">,</font> args_info<font color="#990000">.</font>required_arg<font
 color="#990000">)</font><font color="#990000">;</font>
  <b><font
 color="#000000">printf</font></b> <font color="#990000">(</font><font
 color="#ff0000">"value of string: %s\n"</font><font color="#990000">,</font> args_info<font
 color="#990000">.</font>string_arg<font color="#990000">)</font><font
 color="#990000">;</font>
  <b><font color="#000000">printf</font></b> <font
 color="#990000">(</font><font color="#ff0000">"value of no-short: %d\n"</font><font
 color="#990000">,</font> args_info<font color="#990000">.</font>no_short_given<font
 color="#990000">)</font><font color="#990000">;</font>
  <b><font
 color="#000000">printf</font></b> <font color="#990000">(</font><font
 color="#ff0000">"value of int: %d\n"</font><font color="#990000">,</font> args_info<font
 color="#990000">.</font>int_arg<font color="#990000">)</font><font
 color="#990000">;</font>
  <b><font color="#000000">printf</font></b> <font
 color="#990000">(</font><font color="#ff0000">"value of float: %f\n"</font><font
 color="#990000">,</font> args_info<font color="#990000">.</font>float_arg<font
 color="#990000">)</font><font color="#990000">;</font>

  <b><font
 color="#0000ff">return</font></b> <font color="#993399">0</font><font
 color="#990000">;</font>
<font color="#ff0000">}</font></tt></pre>
      </td>
    </tr>
  </tbody>
</table>
<br>
So if we use the config file (<i>test_conf.conf</i>)<br>
<pre># required option<br>required "foo"<br>float 3.14<br>no-short<br>string another<br></pre>
and we run <i>test_conf_parser</i> like that we will have<br>
<pre>./test_conf_parser -r bar -i 100 --conf-file test_conf.conf <br>value of required: "foo"<br>value of string: another<br>value of no-short: 1<br>value of int: 100<br>value of float: 3.140000<br></pre>
<h3><a name="multiple"></a>Multiple options</h3>
If an option is specified as <tt>multiple</tt>, then it can be
specified multiple times at command line. &nbsp;In this case, say the
option is called foo, the generated <tt>foo_given</tt> field in the
args structure contains the number of times it was specified and the
generated field <tt>foo_arg</tt> is an array containing all the values
that were specified for this option.<br>
<br>
For instance, if the gengetopt file is as follows<br>
<br>
<table cellspacing="0" cellpadding="10" bgcolor="#e0e0e0" nosave="">
  <tbody>
    <tr nosave="">
      <td nosave="">
      <pre># test options that can be given more than once</pre>
      <pre><br>option "string"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s "string option" string no multiple</pre>
      <pre>option "int"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i "int option" int no multiple</pre>
      <tt></tt></td>
    </tr>
  </tbody>
</table>
<br>
Then the command line options can be collected like that<br>
<br>
<table border="1" cols="1" width="100%" nosave="">
  <tbody>
    <tr nosave="">
      <td nosave="">
      <pre><tt><br><i><font color="#9a1900">/* test_multiple.c test */</font></i><br><br><i><font
 color="#9a1900">/* test options that can be given more than once */</font></i><br><br><b><font
 color="#000080">#include</font></b> <font color="#ff0000">&lt;stdlib.h&gt;</font><br><b><font
 color="#000080">#include</font></b> <font color="#ff0000">&lt;stdio.h&gt;</font><br><br><b><font
 color="#000080">#include</font></b> <font color="#ff0000">"test_multiple_cmd.h"</font><br><br><b><font
 color="#0000ff">static</font></b> <b><font color="#0000ff">struct</font></b> gengetopt_args_info args_info<font
 color="#990000">;</font><br><br><font color="#009900">int</font><br><b><font
 color="#000000">main</font></b> <font color="#990000">(</font><font
 color="#009900">int</font> argc<font color="#990000">,</font> <font
 color="#009900">char</font> <font color="#990000">*</font><font
 color="#990000">*</font>argv<font color="#990000">)</font><br><font
 color="#ff0000">{</font> <br>  <font color="#009900">int</font> i <font
 color="#990000">=</font> <font color="#993399">0</font><font
 color="#990000">;</font><br> <br>  <b><font color="#0000ff">if</font></b> <font
 color="#990000">(</font><b><font color="#000000">test_multiple_cmd_parser</font></b> <font
 color="#990000">(</font>argc<font color="#990000">,</font> argv<font
 color="#990000">,</font> <font color="#990000">&amp;</font>args_info<font
 color="#990000">)</font> <font color="#990000">!</font><font
 color="#990000">=</font> <font color="#993399">0</font><font
 color="#990000">)</font><br>    <b><font color="#000000">exit</font></b><font
 color="#990000">(</font><font color="#993399">1</font><font
 color="#990000">)</font> <font color="#990000">;</font><br><br>  <b><font
 color="#0000ff">for</font></b> <font color="#990000">(</font>i <font
 color="#990000">=</font> <font color="#993399">0</font><font
 color="#990000">;</font> i <font color="#990000">&lt;</font> args_info<font
 color="#990000">.</font>string_given<font color="#990000">;</font> <font
 color="#990000">+</font><font color="#990000">+</font>i<font
 color="#990000">)</font><br>    <b><font color="#000000">printf</font></b> <font
 color="#990000">(</font><font color="#ff0000">"passed string: %s\n"</font><font
 color="#990000">,</font> args_info<font color="#990000">.</font>string_arg<font
 color="#990000">[</font>i<font color="#990000">]</font><font
 color="#990000">)</font><font color="#990000">;</font><br><br>  <b><font
 color="#0000ff">for</font></b> <font color="#990000">(</font>i <font
 color="#990000">=</font> <font color="#993399">0</font><font
 color="#990000">;</font> i <font color="#990000">&lt;</font> args_info<font
 color="#990000">.</font>int_given<font color="#990000">;</font> <font
 color="#990000">+</font><font color="#990000">+</font>i<font
 color="#990000">)</font><br>    <b><font color="#000000">printf</font></b> <font
 color="#990000">(</font><font color="#ff0000">"passed int: %d\n"</font><font
 color="#990000">,</font> args_info<font color="#990000">.</font>int_arg<font
 color="#990000">[</font>i<font color="#990000">]</font><font
 color="#990000">)</font><font color="#990000">;</font><br><br>  <b><font
 color="#0000ff">return</font></b> <font color="#993399">0</font><font
 color="#990000">;</font><br><font color="#ff0000">}</font></tt></pre>
      </td>
    </tr>
  </tbody>
</table>
<br>
Then if this program is called with the following command line options<br>
<pre>./test_multiple -s "foo" -s "bar" -s "hello" -i 100 -i 200 -s "world"<br></pre>
The output of the program will be<br>
<pre>passed string: world<br>passed string: hello<br>passed string: bar<br>passed string: foo<br>passed int: 200<br>passed int: 100<br></pre>
<h2>Warning for Windows users</h2>
If you run Windows, please remember that DOS shell does not translate
wildcards, and thus the previous test which uses '<tt>*.h</tt>' will
not work.
<h2> Options</h2>
This is the output of <i>gengetopt --help</i>:
<pre>$ gengetopt --help<br>gengetopt @VERSION@<br><br>Purpose:<br>&nbsp; This program generates a C function that uses getopt_long function<br>&nbsp; to parse the command line options, validate them and fill a struct.<br><br>Usage: gengetopt [OPTIONS]...<br>&nbsp;&nbsp; -h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --help&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print help and exit<br>&nbsp;&nbsp; -V&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --version&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print version and exit<br>&nbsp;&nbsp; -iSTRING&nbsp;&nbsp; --input=STRING&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; input file (default std input)<br>&nbsp;&nbsp; -fSTRING&nbsp;&nbsp; --func-name=STRING&nbsp; name of generated function (default='cmdline_parser')<br>&nbsp;&nbsp; -FSTRING&nbsp;&nbsp; --file-name=STRING&nbsp; name of generated file (default='cmdline')<br>&nbsp;&nbsp; -l&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --long-help&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long usage line in help<br>&nbsp;&nbsp; -u&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --unamed-opts&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; accept filenames<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --no-handle-help&nbsp;&nbsp;&nbsp; do not handle --help|-h automatically<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --no-handle-version do not handle --version|-V automatically<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --no-handle-error&nbsp;&nbsp; do not exit on errors <br>              --conf-parser         generate a config file parser<br><br>Maintained by Lorenzo Bettini &lt;bettini@gnu.org&gt;<br>Report bugs to &lt;bug-gengetopt@gnu.org&gt;</pre>
The options should be clear; in particular:
<ul>
  <li> if no --<i>func-name</i> is given, <i>cmdline_parser</i> is taken
by default;</li>
  <li> with <i>--long-help</i> option, the "Usage" line reports all the
options; this may be unpleasant if options are many;</li>
  <li> with <i>--unamed-opts</i> we can accept also options without a
name, which, in most case, means that we can pass many file names to
the program (see the example above when we call <i>sample1 *.h</i>).</li>
  <li> if <i>--no-handle-help</i> (<i>--no-handle-version</i>) is given
the command line <i>--help</i>|<i>-h</i> (<i>--version</i>|<i>-V</i>)
is not handled automatically, so the programmer will be able to print
some other information; then the function for printing the standard
help (version) response can be used; this function is called <i>&lt;parser-name&gt;_print_help</i>
(<i>&lt;parser-name&gt;_print_version</i>), where <i>&lt;parser-name&gt;</i>
is the name specified with <i>---func-name</i> or the default <i>cmdline_parser</i>.</li>
  <li> if <i>--no-handle-error</i> is given, an error in the parsing
does not provoke the exit of the program; instead, since the parser
function, in case of an error, returns non 0, the program can print a
help message,  as gengetopt itself does in case of an error (try it!).</li>
</ul>
You may have already guessed it: <u><font color="#ff0000">gengetopt
uses gengetopt itself</font></u> for command line options, and this is
its specification file: <br>
&nbsp;
<table cellspacing="0" cellpadding="10" bgcolor="#e0e0e0" nosave="">
  <tbody>
    <tr nosave="">
      <td nosave="">
      <pre>purpose "This program generates a C function that uses getopt_long function<br>to parse the command line options, validate them and fill a struct."</pre>
      <pre>option&nbsp; "input"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i "input file. default std input"&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp; no<br>option&nbsp; "func-name"&nbsp;&nbsp;&nbsp;&nbsp; f "name of generated function"&nbsp; string default="cmdline_parser" no<br>option&nbsp; "file-name"&nbsp;&nbsp;&nbsp;&nbsp; F "name of generated file"&nbsp; string default="cmdline" no<br>option&nbsp; "long-help"&nbsp;&nbsp;&nbsp;&nbsp; l "long usage line in help" no<br>option&nbsp; "unamed-opts"&nbsp;&nbsp; u "accept filenames" no<br>option&nbsp; "no-handle-help"&nbsp;&nbsp; - "do not handle --help|-h automatically" no&nbsp;<br>option&nbsp; "no-handle-version"&nbsp;&nbsp; - "do not handle --version|-V automatically" no<br>option&nbsp; "no-handle-error" - "do not exit on errors" no</pre>
      </td>
    </tr>
  </tbody>
</table>
<p>In particular the command line for gengetopt itself is generated
with the following command: </p>
<pre>gengetopt --input=cmdline.ggo --no-handle-version --no-handle-help --no-handle-error</pre>
Indeed when <i>--help</i>|<i>-h</i> is passed on the command line,
gengetopt will call <i>cmdline_parser_print_help()</i> and then the
lines for reporting bugs. When <i>--version</i>|<i>-V</i> is passed, it
will call <i>cmdline_parser_print_version()</i> and then prints a
copyright. <br>
If an error occurs it prints a message on the screen:                  
<pre>$ ./gengetopt --zzzz<br>./gengetopt: unrecognized option `--zzzz'<br>Run gengetopt --help to see the list of options.</pre>
<h2> Credits</h2>
See <a href="THANKS">THANKS</a> file :-)
<h2> Feedback</h2>
Tell us if you like this software :-)
<p>Actually we want to extend it, so if you have some ideas... The most
import one will be to make gengetopt more customizable :-) </p>
<p>Please send all bug reports by electronic mail to:                  <br>
<a href="mailto:bug-gengetopt@gnu.org">bug-gengetopt@gnu.org</a> </p>
<h1> Mailing Lists</h1>
The following mailing lists are available:
<ul>
  <li> <a href="mailto:help-gengetopt@gnu.org">help-gengetopt@gnu.org</a>,
for generic discussions about the program and for asking for help about
it (open mailing list), <a
 href="http://mail.gnu.org/mailman/listinfo/help-gengetopt">http://mail.gnu.org/mailman/listinfo/help-gengetopt</a> </li>
  <li> <a href="mailto:info-gengetopt@gnu.org">info-gengetopt@gnu.org</a>
, for receiving information about new releases and features (read-only
mailing list), <a
 href="http://mail.gnu.org/mailman/listinfo/info-gengetopt">http://mail.gnu.org/mailman/listinfo/info-gengetopt</a> </li>
</ul>
if you want to subscribe to a mailing list just go to the URL and
follow the instructions. <br>
&nbsp;
<table cols="2" width="100%" nosave="">
  <tbody>
    <tr valign="top" nosave="">
      <td nosave=""><b>Lorenzo Bettini</b> <br>
      <a href="http://www.lorenzobettini.it">http://www.lorenzobettini.it</a> <br>
&lt;<a href="mailto:bettini@gnu.org">bettini@gnu.org</a>&gt;.</td>
      <td><b>Roberto Arturo Tena Sanchez</b> <br>
      <a href="http://arturo.directmail.org">http://arturo.directmail.org</a> <br>
&lt;<a href="mailto:arturo@directmail.org">arturo@directmail.org</a>&gt;,</td>
    </tr>
  </tbody>
</table>
<p>gengetopt is free software. See the file LICENSE and COPYING for
copying conditions. Anyway we won't get offended if you send us a
postcard :-) </p>
<p>C/C++ files are formatted with <i>GNU Source-highlight</i> (<a
 href="http://www.gnu.org/software/src-highlite/">http://www.gnu.org/software/src-highlite/</a>
) by Lorenzo Bettini. </p>
<p> </p>
<hr>
<p>Return to <a href="/home.html">GNU's home page</a>. </p>
<p>Please send FSF &amp; GNU inquiries &amp; questions to <i><a
 href="mailto:gnu@gnu.org">gnu@gnu.org</a> </i>. There are also <a
 href="http://www.gnu.org/home.html#ContactInfo">other ways to contact</a>
the FSF. </p>
<p>Please send comments on these web pages to <i><a
 href="mailto:webmasters@gnu.org">webmasters@gnu.org</a> </i>, send
other questions to <i><a href="mailto:gnu@gnu.org">gnu@gnu.org</a> </i>.</p>
<p>Copyright (C) 2001 Free Software Foundation, Inc., 59 Temple Place -
Suite 330, Boston, MA 02111, USA </p>
<p>Verbatim copying and distribution of this entire article is
permitted in any medium, provided this notice is preserved. </p>
<p>Updated:<!-- hhmts start -->9 Jan 2001 mhw<!-- hhmts end --> <br>
</p>
<hr> <br>
</body>
</html>
