[EXAMPLES]
Here are some realistic examples of running GNU `shmm'.

This is the output of the command `shmm -s 0x00000001:0660:5 -w"test"':

(nothing if no error)

Be aware that if shared memory doesn't exit, it'll try to create it with only '\\0' inside before writing anything (not true in binary mode), take care also NOT to put a space between -w and the string you wan't to write.

Take care also to always keep at least the reading permission to a user you can use if you want to keep control on your shared memory. Using permission like 0200 is an error except if you are root. It's an error because with only writing perm you can't do anything. To write something you must have the right to attach a shared memory and that means having read permission.
Also, execution permission is not used with shared memory so it's useless to use 0777 for example.

When you just want to read like in examples below, you can eventually use permission 0000 without any bad effect. However for the size, if you read in binary mode with -s instead of -i you must not set size to 0 as shmm use this value to stop to read like an end offset. You'll get a warning though. If you use -f shmm will read in a file until size specified in -s is reached (if you use -i instead of -s all data in shared memory will be dump).

This is the output of the command `shmm -rs 0x00000001:0660:5':

test

This is the output of the command `shmm -brs 0x00000001:0660:5':

t e s t 0x00
