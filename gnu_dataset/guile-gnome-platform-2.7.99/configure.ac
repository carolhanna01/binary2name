dnl -- WARNING: generated by /home/wingo/src/guile-gnome/platform/autogen.sh, changes will be lost
AC_PREREQ(2.52)
AC_INIT(autogen-pkg.sh)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(guile-gnome-platform, 2.7.99)

AC_SUBST(VERSION,2.7.99)

# Meaning of the API version
# --------------------------
#
# If 0, guile-gnome is unstable, and the API might change anytime.
# Otherwise, guile-gnome is stable. Future incompatible releases will
# bump this number so as to allow parallel, incompatible versions to
# coexist.
API_VERSION=0
AC_SUBST(API_VERSION)

AM_MAINTAINER_MODE
AC_DISABLE_STATIC

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_PROG_LIBTOOL

AC_SUBST(AG_PKG_CONFIG_PATH, [$pkg_config_path])
AG_PACKAGES=" atk corba defs docs gconf glib gnome-vfs gtk libglade libgnome libgnomecanvas libgnomeui pango"
AC_SUBST(AG_PACKAGES)

if test "x$prefix" = xNONE; then
   AC_MSG_ERROR([No explicit prefix given.

Guile-GNOME requires you to explicitly enter in a prefix when
configuring. This is because the default prefix, /usr/local, is not in
the default guile load path. What you probably want to do is to run

  $0 --prefix=/usr

so that guile can find the guile-gnome modules when they are installed.

If you choose to install to a prefix that is not in guile's load path,
you will need to modify GUILE_LOAD_PATH and LD_LIBRARY_PATH every time
you run guile. (Which is a pain.)])
fi

MK=""; AC_SUBST(MK)
WARN_CFLAGS=-Wall
AC_ARG_ENABLE([Werror], AC_HELP_STRING([--disable-Werror],[Don't stop the build on errors]),
        [], WARN_CFLAGS="-Wall -Werror")
AC_SUBST(WARN_CFLAGS)

DEBUG_CFLAGS=
AC_ARG_ENABLE([debug], AC_HELP_STRING([--disable-debug],[Disable debugging information]),
        [], DEBUG_CFLAGS=-g)
AC_SUBST(DEBUG_CFLAGS)

DISABLE_DEPRECATED=false
AC_ARG_ENABLE([deprecated],
AC_HELP_STRING([--disable-deprecated],[Disable wrapping of functions deprecated upstream]),
        DISABLE_DEPRECATED=true, DISABLE_DEPRECATED=false)

# Optimize the DSO symbol hash table -- see ulrich drepper's paper,
# "how to write shared libraries"
GNULD_LDFLAGS=-Wl,-O1
AC_SUBST(GNULD_LDFLAGS)
AM_LDFLAGS='$(GNULD_LDFLAGS)'
AC_SUBST(AM_LDFLAGS)

#
# Check for Guile
#
AC_MSG_CHECKING(for Guile)
guile-config link > /dev/null || {
   echo "configure: cannot find guile-config; is Guile installed?" 1>&2
   exit 1
}
GUILE_VERSION=`guile-config info guileversion`
if test "$GUILE_VERSION" \< 1.6.4; then
   AC_MSG_ERROR([Guile 1.6.4 or newer is required, but you only have $GUILEVERSION.])
fi
GUILE_CFLAGS="`guile-config compile`"
GUILE_LIBS="`guile-config link`"
AC_SUBST(GUILE_CFLAGS)
AC_SUBST(GUILE_LIBS)
AC_MSG_RESULT(yes)

# The defs generator uses slib for globbing and printf
AC_MSG_CHECKING(for SLIB)
if ! guile -c '(use-modules (ice-9 slib))' >/dev/null 2>&1; then
   AC_MSG_ERROR([guile-gnome needs SLIB to build.

Most distributions ship a guile-slib package, for example guile-1.6-slib
on Debian. Otherwise, you can install it yourself by downloading it
from http://swissnet.ai.mit.edu/~jaffer/SLIB.html and install it via the
method detailed in the SLIB Installation node of the guile info manual.
Sucks for you!
])
fi
AC_MSG_RESULT(yes)

# Check for g-wrap

PKG_CHECK_MODULES(G_WRAP, g-wrap-2.0-guile >= 1.9.4)
AC_SUBST(G_WRAP_CFLAGS)
AC_SUBST(G_WRAP_LIBS)
AC_SUBST(G_WRAP_MODULE_DIR, `${PKG_CONFIG} --variable=module_directory g-wrap-2.0-guile`)
AC_SUBST(G_WRAP_LIB_DIR, `echo $G_WRAP_MODULE_DIR | sed -e 's|share/guile|lib|'`)

PACKAGES_TO_BUILD=""
PACKAGES_NOT_BUILT=""
record_check()
{
    local package=$1;
    local buildp=$2;
    case $buildp in
        yes|true)
            if test -z "$PACKAGES_TO_BUILD"; then
                PACKAGES_TO_BUILD="$package"
            else
                PACKAGES_TO_BUILD="$package $PACKAGES_TO_BUILD"
            fi
            ;;
        no|false)
            if test -z "$PACKAGES_NOT_BUILT"; then
                PACKAGES_NOT_BUILT="$package"
            else
                PACKAGES_NOT_BUILT="$package $PACKAGES_NOT_BUILT"
            fi
            ;;
        *)
            echo "bad record_check value: \"$buildp\" (for package \"$package\")"
            exit 1
            ;;
    esac
}

report_checks()
{
    if test -z "$PACKAGES_TO_BUILD"; then
        AC_MSG_ERROR([All wrappers failed their prerequisites.

These following wrappers cannot be built:
  $PACKAGES_NOT_BUILT

Check the README files in the above subdirectories, install the necessary
packages, and try again.
])
    elif test -z "$PACKAGES_NOT_BUILT"; then
        AC_MSG_NOTICE([
All available wrappers will be built:
  $PACKAGES_TO_BUILD

])
    else
        AC_MSG_NOTICE([Some packages will not be built.

These wrappers will be built:
  $PACKAGES_TO_BUILD

These wrappers failed their prerequisites and will NOT be built:
  $PACKAGES_NOT_TO_BUILD

Check the README files in the above subdirectories for more information
on the prerequisites of a package.
])
    fi
}

# Per-package checks follow
# atk
PKG_CHECK_MODULES(ATK, atk, HAVE_ATK=true, HAVE_ATK=false)
AC_SUBST(ATK_CFLAGS)
AC_SUBST(ATK_LIBS)
AM_CONDITIONAL(HAVE_ATK, $HAVE_ATK)

record_check atk $HAVE_ATK
# corba
PKG_CHECK_MODULES(CORBA, libbonobo-2.0, HAVE_CORBA=true, HAVE_CORBA=false)
AC_SUBST(CORBA_CFLAGS)
AC_SUBST(CORBA_LIBS)
AM_CONDITIONAL(HAVE_CORBA, $HAVE_CORBA)

# orbit-idl
ORBIT_IDL="`pkg-config --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

# Activation idl files
BONOBO_IDL_DIR="`pkg-config --variable=idldir libbonobo-2.0`"
AC_SUBST(BONOBO_IDL_DIR)

record_check corba $HAVE_CORBA
# defs
# docs
## nothing right now...
# gconf
PKG_CHECK_MODULES(GCONF, gconf-2.0, HAVE_GCONF=true, 
                                    HAVE_GCONF=false)
AC_SUBST(GCONF_CFLAGS)
AC_SUBST(GCONF_LIBS)
AM_CONDITIONAL(HAVE_GCONF, $HAVE_GCONF)

record_check gconf $HAVE_GCONF
# glib
PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.4.0)
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

PKG_CHECK_MODULES(GOBJECT, gobject-2.0)
AC_SUBST(GOBJECT_CFLAGS)
AC_SUBST(GOBJECT_LIBS)

GUILE_GLIB_CFLAGS='-I$(top_srcdir)/glib/gnome/gobject -I$(top_builddir)/glib/gnome/gobject'
GUILE_GLIB_LIBS='$(top_builddir)/glib/gnome/gobject/libguile-gnome-gobject-$(API_VERSION).la'
AC_SUBST(GUILE_GLIB_CFLAGS)
AC_SUBST(GUILE_GLIB_LIBS)

AC_CONFIG_COMMANDS([glib/gnome/gobject/guile-gnome-gobject],
[
 rm -f glib/gnome/gobject/guile-gnome-gobject
 ln -s `cd $srcdir && pwd`/glib/gnome/gobject/ glib/gnome/gobject/guile-gnome-gobject
])

record_check glib true
# gnome-vfs
PKG_CHECK_MODULES(GNOME_VFS, gnome-vfs-2.0 >= 2.8.0, HAVE_GNOME_VFS=true, 
                                                     HAVE_GNOME_VFS=false)
AC_SUBST(GNOME_VFS_CFLAGS)
AC_SUBST(GNOME_VFS_LIBS)
AM_CONDITIONAL(HAVE_GNOME_VFS, $HAVE_GNOME_VFS)

record_check gnome-vfs $HAVE_GNOME_VFS
# gtk
PKG_CHECK_MODULES(GDK, gdk-2.0, HAVE_GDK=true, HAVE_GDK=false)
AC_SUBST(GDK_CFLAGS)
AC_SUBST(GDK_LIBS)
AM_CONDITIONAL(HAVE_GDK, $HAVE_GDK)

PKG_CHECK_MODULES(GDK_PIXBUF, gdk-pixbuf-2.0, HAVE_GDK_PIXBUF=true, HAVE_GDK_PIBXUF=false)
AC_SUBST(GDK_PIXBUF_CFLAGS)
AC_SUBST(GDK_PIXBUF_LIBS)
AM_CONDITIONAL(HAVE_GDK_PIXBUF, $HAVE_GDK_PIXBUF)

PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.4.0, HAVE_GTK=true, HAVE_GTK=false)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AM_CONDITIONAL(HAVE_GTK, $HAVE_GTK)

if $DISABLE_DEPRECATED; then
  GTK_DEPRECATED_CFLAGS=-DGTK_DISABLE_DEPRECATED
else
  GTK_DEPRECATED_CFLAGS=
fi
AC_SUBST(GTK_DEPRECATED_CFLAGS)

record_check gtk $HAVE_GTK
# libglade
PKG_CHECK_MODULES(LIBGLADE, libglade-2.0, HAVE_LIBGLADE=true, 
					  HAVE_LIBGLADE=false)
AC_SUBST(LIBGLADE_CFLAGS)
AC_SUBST(LIBGLADE_LIBS)
AM_CONDITIONAL(HAVE_LIBGLADE, $HAVE_LIBGLADE)

record_check libglade $HAVE_LIBGLADE
# libgnome
PKG_CHECK_MODULES(LIBGNOME, libgnome-2.0, HAVE_LIBGNOME=true, HAVE_LIBGNOME=false)
AC_SUBST(LIBGNOME_CFLAGS)
AC_SUBST(LIBGNOME_LIBS)
AM_CONDITIONAL(HAVE_LIBGNOME, $HAVE_LIBGNOME)

record_check libgnome $HAVE_LIBGNOME
# libgnomecanvas
PKG_CHECK_MODULES(CANVAS, libgnomecanvas-2.0, HAVE_CANVAS=true, HAVE_CANVAS=false)
AC_SUBST(CANVAS_CFLAGS)
AC_SUBST(CANVAS_LIBS)
AM_CONDITIONAL(HAVE_CANVAS, $HAVE_CANVAS)

record_check libgnomecanvas $HAVE_CANVAS
# libgnomeui
PKG_CHECK_MODULES(LIBGNOMEUI, libgnomeui-2.0 >= 2.8.0, HAVE_LIBGNOMEUI=true, HAVE_LIBGNOMEUI=false)
AC_SUBST(LIBGNOMEUI_CFLAGS)
AC_SUBST(LIBGNOMEUI_LIBS)
AM_CONDITIONAL(HAVE_LIBGNOMEUI, $HAVE_LIBGNOMEUI)

if $DISABLE_DEPRECATED; then
  GNOMEUI_DEPRECATION_FLAGS=-DGNOME_DISABLE_DEPRECATED_SOURCE -DGNOME_DISABLE_DEPRECATED
else
  GNOMEUI_DEPRECATION_FLAGS=
fi
AC_SUBST(GNOMEUI_DEPRECATION_FLAGS)

record_check libgnomeui $HAVE_LIBGNOMEUI
# pango
PKG_CHECK_MODULES(PANGO, pango, HAVE_PANGO=true, HAVE_PANGO=false)
AC_SUBST(PANGO_CFLAGS)
AC_SUBST(PANGO_LIBS)
AM_CONDITIONAL(HAVE_PANGO, $HAVE_PANGO)

record_check pango $HAVE_PANGO
report_checks

AC_CONFIG_FILES(dev-environ, [chmod +x ./dev-environ])
AC_CONFIG_FILES(
Makefile
atk/gnome/gw/Makefile
atk/gnome/Makefile
atk/Makefile
corba/Makefile
corba/demos/Makefile
corba/demos/corba/Makefile
corba/gnome/gw/Makefile
corba/gnome/corba/Makefile
corba/gnome/Makefile
defs/Makefile
defs/gnome/Makefile
defs/gnome/defs/Makefile
defs/tools/Makefile
docs/Makefile
gconf/Makefile
gconf/examples/Makefile
gconf/examples/gconf/Makefile
gconf/gnome/Makefile
gconf/gnome/gw/Makefile
gconf/gnome/overrides/Makefile
glib/examples/Makefile
glib/gnome/gobject/Makefile
glib/gnome/gw/support/Makefile
glib/gnome/gw/Makefile
glib/gnome/Makefile
glib/gnome/overrides/Makefile
glib/Makefile
glib/test-suite/Makefile
glib/bin/Makefile
gnome-vfs/Makefile
gnome-vfs/examples/Makefile
gnome-vfs/examples/gnome-vfs/Makefile
gnome-vfs/gnome/Makefile
gnome-vfs/gnome/gw/Makefile
gnome-vfs/gnome/overrides/Makefile
gtk/examples/Makefile
gtk/gnome/contrib/Makefile
gtk/gnome/overrides/Makefile
gtk/gnome/gtk/Makefile
gtk/gnome/gw/Makefile
gtk/gnome/Makefile
gtk/Makefile
libglade/examples/Makefile
libglade/gnome/Makefile
libglade/gnome/gw/Makefile
libglade/gnome/overrides/Makefile
libglade/Makefile
libgnome/gnome/overrides/Makefile
libgnome/gnome/Makefile
libgnome/gnome/gw/Makefile
libgnome/Makefile
libgnomecanvas/examples/Makefile
libgnomecanvas/Makefile
libgnomecanvas/gnome/gw/Makefile
libgnomecanvas/gnome/Makefile
libgnomecanvas/gnome/overrides/Makefile
libgnomeui/gnome/Makefile
libgnomeui/gnome/gw/Makefile
libgnomeui/gnome/overrides/Makefile
libgnomeui/Makefile
pango/gnome/Makefile
pango/gnome/gw/Makefile
pango/Makefile
defs/guile-gnome-defs.pc
defs/guile-gnome-defs-uninstalled.pc
glib/guile-gnome-glib.pc
glib/guile-gnome-glib-uninstalled.pc
gtk/guile-gnome-gtk.pc
gtk/guile-gnome-gtk-uninstalled.pc
libgnomeui/guile-gnome-libgnomeui.pc
libgnomeui/guile-gnome-libgnomeui-uninstalled.pc
)
AC_OUTPUT
