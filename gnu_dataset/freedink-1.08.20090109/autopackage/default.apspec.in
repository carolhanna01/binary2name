# -*-shell-script-*-

[Meta]
RootName: @gnu.org/freedink:$SOFTWAREVERSION
DisplayName: GNU FreeDink
ShortName: freedink
Maintainer: Sylvain Beucler <beuc@beuc.net>
Packager: Sylvain Beucler <beuc@beuc.net>
Summary: GNU FreeDink with v1.07 compatibility
URL: http://www.gnu.org/software/freedink/
License: GNU General Public License, Version 3
SoftwareVersion: @VERSION@
#Repository: http://www.mysite.org/downloads/myproject.xml

# If you change the autopackage but not the software itself,
# increment this number.

# PackageVersion: 2

# This is the version of the autopackage runtime this package is
# written for. Increasing this number implies you have read the
# "Migrating to 1.X" document and understand the impact it will have
# on your package. Some APIs may change their behaviour and new
# features will be enabled depending on what this is set to.
AutopackageTarget: 1.2

# Only uncomment InterfaceVersion if your package exposes interfaces
# to other software, for instance if it includes DSOs or python/perl
# modules. See the developer guide for more info, or ask on
# autopackage-dev if you aren't sure about interface versioning.
#
# InterfaceVersion: 0.0

[BuildPrepare]
# - Static zzip to avoid a dependency
# - Static SDL_gfx because versions tend to change in distros
# (e.g. so.0.0.17 official, so.4.0.9 in Debian, so.13.0.0 in Fedora7
# and Gentoo)
export APBUILD_STATIC="zzip SDL_gfx"
# Bad detection due to statically compiling SDL_gfx - should be -lSDL,
# not -lSDL-1.2 ("C compiler cannot create executables" in configure)
#export APBUILD_BOGUS_DEPS="SDL-1.2"
# That doesn't work, so you need to:
#sudo ln -s libSDL-1.2.so.0 /usr/lib/libSDL-1.2.so

# For ./configure based systems this is a good default
#prepareBuild --with-some-feature

# --with-upx => incompatible with autopackage
# ("WARNING: ELF binary ./bin/freedinkedit was compiled without apbuild.")
# + truncated executables

# --enable-static: caution: dependencies also need to be compiled with
# apbuild. See: http://autopackage.org/apbuild-apgcc.php

prepareBuild

[BuildUnprepare]
unprepareBuild

[Globals]
# Anything put here will be run during makeinstall and at
# install/uninstall time. Define useful variables here:

# export MY_VAR=1

[Imports]
# You may wish to delete some things first, eg libtool .la files or
# development files (headers)

# rm -r include
# rm libs/*.la

# This imports every file in 
# (ie, that is installed by "make install")
echo '*' | import


[Prepare]
# Dependency checking

# You can use "require" and "recommend". They both try to find the
# given dependency, and install it if missing. But require will return
# 1 (causing failure) if it can't do that whereas recommend will
# simply show a notice at the end of the install.

# The second argument here identifies a skeleton file, which is
# a file that encapsulates a dependency check. The second number
# identifies the interface version you need. Use as many of these
# as you need.

#require @whatever.you/need 1.0
# Don't attempt to statically compile SDL - too much complicated
# (see doc/static-build.txt)
require '@libsdl.org/sdl' 1.2
require '@libsdl.org/sdl_image' 1.2
require '@libsdl.org/sdl_mixer' 1.2
require '@libsdl.org/sdl_ttf' 2.0

# The user may have already installed the program from an RPM.
# Let's try and uninstall it first. We only need one call if 3rd party
# packages have split the program up into multiple packages.

#removeOwningPackage $PREFIX/bin/my-program

[Install]
# Put your installation script here. See the quickstart guide on
# the website for an API cheat-sheet
installExe bin/*
installData share
# Note: doesn't work, how is it supposed to work?
# Symlinks aren't packaged, nor installed
linkFile freedink bin/dink
linkFile freedinkedit bin/dinkedit

[Uninstall]
# Usually just the following line is enough to uninstall everything
uninstallFromLog
