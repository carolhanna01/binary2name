Mailman - The GNU Mailing List Management System
Copyright (C) 1998,1999,2000 Free Software Foundation, Inc.
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

This file contains installation instructions for GNU Mailman, which is
configured using the standard GNU autoconf software.  You first need
to prepare your system as outlined in the sections below, and then
configure and install the Mailman software.

IMPORTANT: Pay special attention to the step below where you have to
set up your crontab entries.  If you do not do this, Mailman will not
work.

UPGRADING: Upgrading is usually as easy as just installing the new
version over the existing installation.  However, you should read the
notes in the file UPGRADING for important information before you
upgrade.

0. Installation requirements

    You must have the Python interpreter installed somewhere on your
    system.  Currently Python 1.5.2 or later is required (Python 2.0
    should work fine).  For information about obtaining Python source
    code, RPM packages, or pre-compiled binaries please see:

        http://www.python.org
        http://www.pythonlabs.com

    You must also have an ANSI C compiler in order to build the
    wrapper programs which are used for improved security.  The GNU C
    compiler gcc 2.8.1 or later is known to work well.  For more
    information about obtaining gcc, see

        http://www.gnu.org

1. System setup

    You will need to be root to perform the steps in this section.

    Before installing the Mailman software, you need to prepare your
    system by adding certain users and groups.

    - Add a new user called `mailman'.  Typically this is added to
      your /etc/passwd file.  If username `mailman' is already in use,
      choose something else unique and see the --with-ownername flag
      below.

    - Add a new group called `mailman'.  Typically this is added to
      your /etc/group file.  The Mailman files will be installed under
      the `mailman' group, with the set-group-id bit.  This is so both
      the web based and mail based programs will have the proper write
      permissions.  If groupname `mailman' is already in use, choose
      something else unique and see the --with-ownergroup below.

    - Create an installation directory (called $prefix in the
      documentation that follows).  All of the Mailman files will be
      installed under $prefix.  Run "configure --help" for ways to
      split the installation up based on read-only vs. read/write
      files.

      The default directory for installing is /home/mailman, but some
      sites do things like mount /home with the nosuid option.  This
      will break Mailman, which relies on set-gid programs for its
      security.  If this describes your environment, simply install
      Mailman in a location that allows setgid programs.

      Make sure this directory is set to group `mailman' (or whatever
      you're going to specify as --with-ownergroup) and has the setgid
      bit set (but see README.BSD if you're on a BSD system).  You
      probably also want to guarantee that this directory is readable
      and executable by everyone.  For example, these shell commands
      will accomplish this:

          % cd $prefix
          % chgrp mailman .
          % chmod a+rx,g+ws .

      You are now ready to configure and install the Mailman software.

2. Running configure

    TAKE SPECIAL NOTE OF THE --with-mail-gid AND --with-cgi-gid
    OPTIONS BELOW.  YOU WILL PROBABLY NEED TO USE THESE!

    You should not be root while performing the steps in this section.
    Do them under your own login, or whatever account you typically
    install software as.  You do not need to do these steps as user
    mailman, but you could.

    Make sure that you have write permissions to the target
    installation directory, and permission to create a setgid file in
    the file system where it resides (NFS and other mounts can be
    configured to inhibit setgid settings).

    If you've installed other GNU software, you should be familiar
    with the configure script.  Usually you can just cd to the
    directory you unpacked Mailman into, and run configure with no
    arguments:

        % cd mailman-<version>
        % ./configure
        % make install

    The following options allow you to customize your Mailman
    installation.

      --prefix=<dir>
            Standard GNU configure option which changes the base
            directory that Mailman is installed into.  By default
            $prefix is /home/mailman.  This directory must already
            exist, and be set up as described in section 1 above.

      --exec-prefix=<dir>
            Standard GNU configure option which lets you specify a
            different installation directory for architecture
            dependent binaries.

      --with-var-prefix=<dir>
            Store mutable data under <dir> instead of under the prefix
            or exec_prefix.

      --with-python=</path/to/python>
            Specify an alternative Python interpreter to use for the
            wrapper programs.  The default is to use the interpreter
            found first on your shell's $PATH.  Note that when running
            the scripts from the command line, the first Python
            interpreter found on $PATH is always used.

      --with-username=<username-or-uid>
            Specify a different username than `mailman' to use as a
            default.  Use this only if the username `mailman' is
            already in use by somebody (e.g. Mark Ailman's login
            name).  Can take an integer user id.  Be sure your $prefix
            directory is owned by this user.

      --with-groupname=<groupname-or-gid>
            Specify a different groupname than `mailman' to use as a
            default.  Use this only if the groupname `mailman' is
            already in use.  Can take an integer group id.  Be sure
            your $prefix directory is group-owned by this group.

      --with-mail-gid=<group-or-groups>
            Specify an alternative group for running scripts via the
            mail wrapper.  <group-or-groups> can be a list of one or
            more integer group ids or symbolic group names.  The first
            value in the list that resolves to an existing group is
            used.  By default, the value is the list `other daemon'.

            This is highly system dependent and you must get this
            right, because the group id is compiled into the mail
            wrapper program for added security.  On systems using
            sendmail, the sendmail.cf configuration file designates
            the group id of sendmail processes using the "DefaultUser"
            option.  (If commented out, it still may be indicating the
            default...)

      --with-cgi-gid=<group-or-groups>
            Specify an alternative group for running scripts via the
            CGI wrapper.  <group-or-groups> can be a list of one or
            more integer group ids or symbolic group names.  The first
            value in the list that resolves to an existing group is
            used.  By default, the value is the the list `www www-data
            nobody'.

            The proper value for this is dependent on your web server
            configuration.  You must get this right, because the group
            id is compiled into the CGI wrapper program for added
            security, and no Mailman CGI scripts will run if this is
            incorrect.

            If you're using Apache, check the values for the `Group'
            option in your httpd.conf file.

      --with-cgi-ext=<extension>
            Specify an extension for cgi-bin programs.  The CGI
            wrappers placed in $PREFIX/cgi-bin will have this
            extension (some web servers require an extension).
            <extension> must include the dot.

      --with-gcc=no
            Don't use gcc, even if it is found.  `cc' must be found on
            your $PATH


3. Check your installation

    To check that your installation has all the correct permissions
    and group ownerships, you should run the check_perms script:

    - cd to $prefix

    - Run bin/check_perms

    Don't try to run bin/check_perms from the source directory; it
    will only run from the install (i.e. $prefix) directory.

    If this reports no problems, then it's very likely that your
    installation is set up correctly :)  If it reports problems, then
    you can either fix them manually, re-run the installation, or use 
    check_perms to fix the problems (probably the easiest solution):

    - You need to become the user that did the installation (and that
      owns all the files in $prefix), or root.

    - Run bin/check_perms -f

    - Repeat previous step until no more errors are reported!

4. Final system set-up

    Congratulations!  You've installed the Mailman software.  To get
    everything running you need to hook Mailman up to both your web
    server and your mail system.

    - If you plan on running your MTA and web server on different
      machines, sharing Mailman installations via NFS, be sure that
      the clocks on those two machines are synchronized closely.  You
      might take a look at the file Mailman/LockFile.py; the constant
      CLOCK_SLOP helps the locking mechanism compensate for clock skew
      in this type of environment.

    - Configure your web server to give $prefix/cgi-bin permission to
      run CGI scripts.  You probably need to be root to do this.

      The line you should add might look something like the following
      (with the real absolute directory substituted for $prefix, of
      course):

          Exec          /mailman/*      $prefix/cgi-bin/*
      or:
          ScriptAlias   /mailman/       $prefix/cgi-bin/

      Consult your web server's documentation for details.

    - You want to be very sure that the user id under which your CGI
      scripts run is *not* in the `mailman' group you created above,
      otherwise private archives will be accessible to anyone.

    - Copy the Mailman, Python, and GNU logos to a location accessible
      to your web server.  E.g. with Apache, you've usually got an
      `icons' directory that you can drop the images into.  You want
      to copy $prefix/icons/mailman.jpg, $prefix/icons/PythonPowered.png,
      and $prefix/icons/gnu-head-tiny.jpg to this directory.

      You then want to add a line to your $prefix/Mailman/mm_cfg.py
      file which sets the base URL for the logos.  For example:

      IMAGE_LOGOS = '/images/'

      The default value for IMAGE_LOGOS is '/icons/'.  Read the
      comment in Defaults.py.in for details.

    - Configure your web server to point to the Pipermail public
      mailing list archives:

      For example, in Apache:

         Alias /pipermail/ $varprefix/archives/public/

      where $varprefix is usually $prefix unless you've used the
      --with-var-prefix option to configure.

      Consult your web server's documentation for details.  Also be
      sure to configure your web server to follow symbolic links in
      this directory, otherwise public Pipermail archives won't be
      accessible.  For Apache users, consult the FollowSymLinks
      option.

      Now restart your web server.

    - IMPERATIVE!  IMPORTANT!  DO THIS!  YOU'LL BE SORRY IF YOU DON'T!

      Set up the crontab entries.  Mailman runs a number of cron jobs
      for its basic functionality.  You need to be user `mailman' (or
      whatever you specified as --with-ownername) to perform this
      step.  Add $prefix/cron/crontab.in as a crontab entry by
      executing these commands:

          % su - mailman
          % cd $prefix/cron
          % crontab crontab.in

    - Look to see if there is special instructions about hooking your
      MTA up to Mailman.  If so, there will be a README.<yourMTA> file
      in the Mailman source directory.

    - Add aliases for `mailman' and `mailman-owner' to the system's
      mail alias database.  These aliases should point to whoever is
      ultimately responsible for the Mailman installation.  Here are
      instructions for those running sendmail:

          1. su to root.
          2. Assuming your email is fred@flintstone.com, add the following
             lines to the file /etc/aliases:
 
             mailman: fred@flintstone.com
             mailman-owner: mailman

          3. Some versions of sendmail require you to run the program
             'newaliases' explicitly.

      If you don't run sendmail, consult the documentation of your
      mail transport program for information on adding these aliases.

5. Customize Mailman

    You should do these steps using the account you installed Mailman
    under in section 2 above.

    - The file $prefix/Mailman/Defaults.py contains a number of
      defaults for your installation.  If any of these are incorrect,
      override them in $prefix/Mailman/mm_cfg.py, NOT IN Defaults.py!
      See the comments in Defaults.py for details.  Once a list is
      created, editing many of these variables will have no effect
      (you need to configure your lists through the web admin
      interface or through the command line script bin/config_list).

      Specifically check to make sure the variables DEFAULT_HOST_NAME
      and DEFAULT_URL are correct.  The latter MUST end in a slash.

      The install process will not overwrite an existing mm_cfg.py
      file so you can freely make changes to this file.

      Note: Do *not* change HOME_DIR or MAILMAN_DIR.  These are set
      automatically by the configure script.

    - Create the site password using:

        % $prefix/bin/mmsitepass <your-site-password>

      This password can be used anywhere that individual user or
      mailing list administrator passwords are required, giving the
      mailman site administrator the ability to adjust these things
      when necessary.

6. Getting started

    - Create a list named `test'.  To do so, run the program
      $prefix/bin/newlist.  You will be prompted for the name of the
      list, as well as the email address of the person running the
      list.  Put your own email address as the list administrator's
      address.
       
    - Running newlist will generate a list of aliases that must be
      added to the system.  If you are running Sendmail, you may add
      the lines output directly to the file /etc/aliases.  You may
      need to run the command 'newaliases' (all as root).  Now the
      mailing address for your list as well as its administrative
      addresses will be set up.  If you are not running Sendmail,
      consult your MTA's documentation for information on adding
      aliases.

    - You will receive email instructions on how to visit the list you
      just created.  Using these instructions, subscribe to the
      mailing list.  Once you have subscribed (which requires a
      confirmation step!), send a message to the list, and see if you
      get it.  If so, then you have successfully installed Mailman,
      and set up your first list!


7. Troubleshooting
  
    If you encounter problems with running Mailman, first check the
    "Common Problems" section, below.  If your problem is not covered
    there, check the file FAQ and FAQ.LINUX.  Then check for a log
    entry from Mailman in your syslog.
    
    Where syslog lives on your particular machine may vary.  It may be
    in /var/log/maillog.  It may also be in /var/log/syslog.  On many
    machines, syslog files live in /adm/log/ instead of /var/log.

    If you encounter an error, send an error report to
    mailman-users@python.org.  Include a description of what you're
    doing to cause the problem, and the relevant lines from your
    syslog.  Also include information on your operating system and
    version of Python.

8. Common Problems

    Problem:  All Mailman web pages give a 404 File not found error.

    Solution: Your web server has not been set up properly for handling
              Mailman's cgi commands.  Make sure you've:

              1) Configured the web server to give permissions to
                 $prefix/cgi-bin
              2) Restarted the web server properly.

              Consult your web server's documentation for instructions
              on how to do these things.


    Problem:  All Mailman web pages give an "Internal Server Error".

    Solution: The likely problem is that you are using the wrong GID or 
              UID for CGI scripts.  Check your syslog.  If you see, for
              example, a line like: 

                  Attempt to exec script with invalid gid 51, expected 99

              You need to reinstall Mailman, and specify $CGI_GID to be 51,
              as described in the installation instructions.


    Problem:  I send mail to the list, and get back mail saying the
              list is not found!

    Solution: You probably didn't add the necessary aliases to the system
              alias database, given to you when you ran the newlist
              command.  If you did add them, you likely did not update
              the alias database, or your system requires you to run
              newaliases explicitly.  Refer to section 5 above for
              more information.


    Problem:  I send mail to the list, and get back mail saying,
              "unknown mailer error".

    Solution: The likely problem is that you are using the wrong GID or 
              UID for mail.  Check your syslog.  If you see, for
              example, a line like:

                  Attempt to exec script with invalid gid 51, expected 99

              You need to reinstall Mailman, and specify $MAIL_GID to
              be 51, as described in the installation
              instructions. see notes on Postfix below, as by default
              it will create these problems on installation.


    Problem:  I use Postfix for my MTA and the mail wrapper programs
              are logging complaints about the wrong GID.

    Solution: Create a separate aliases file for Postfix in its
              main.cf config file under the variable "alias_maps". Put
              the file somewhere in Mailman's home directory, or
              somewhere else where the user mailman has write access
              to it; *as user mailman* call Postfix's "postalias" on the
              alias file.  

              % postalias <the alias file>

              Also as user mailman, run 

              % python -c'import os; print os.getgid()' 
              
              This should print out the group id that Mailman should
              be configured to expect when the mail wrapper programs
              are run.  Call it "thegid".  Rebuild Mailman with

              % ./configure --with-mail-gid=thegid


    Problem:  I send mail to the list, and get back mail saying,
              "sh: wrapper not available for sendmail programs"

    Solution: Your system uses sendmail restricted shell (smrsh).  You
              need to configure smrsh by creating a symbolic link from
              the mail wrapper ($prefix/mail/wrapper) to the directory
              identifying executables allowed to run under smrsh.

              Some common names for this directory are
              /var/admin/sm.bin, /usr/admin/sm.bin or /etc/smrsh.

              Note that on Debian Linux, the system makes
              /usr/lib/sm.bin, which is wrong, you will need to create
              the directory /usr/admin/sm.bin and add the link there.
              Note further any aliases newaliases spits out will need
              to be adjusted to point to the secure link to the
              wrapper.

    Problem:  I messed up when I called configure.  How do I clean
              things up and re-install?

    Solution: % make clean
              % ./configure --with-the-right-options
              % make install



Local Variables:
mode: indented-text
indent-tabs-mode: nil
End:
