#! /usr/bin/env python
#
# Copyright (C) 1998,1999,2000 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

"""Remove the components of a mailing list with impunity - beware!

This removes (almost) all traces of a mailing list.  By default, the lists
archives are not removed, which is very handy for retiring old lists.

Usage:
    rmlist [-a] [-h] listname

Where:
    --archives
    -a
        remove the lists archives too

    --help
    -h
        print this help message and exit

"""

import os
import sys
import string
import getopt

import paths
from Mailman import mm_cfg
from Mailman import Utils



def usage(status, msg=''):
    print __doc__ % globals()
    if msg:
        print msg
    sys.exit(status)



def remove_it(listname, dir, msg):
    if os.path.islink(dir):
        print 'Removing', msg
        os.unlink(dir)
    elif os.path.exists(dir):
        print 'Removing', msg
        os.system('rm -rf ' + dir)
    else:
        print listname, msg, 'not found as', dir



def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'ah',
                                   ['archives', 'help'])
    except getopt.error, msg:
        usage(1, msg)

    if len(args) <> 1:
        usage(1)
    listname = string.lower(args[0])

    if not Utils.list_exists(listname):
        usage(1, 'List does not exist: "%s"' % listname)

    removeArchives = 0
    for opt, arg in opts:
        if opt in ('-a', '--archive'):
            removeArchives = 1
        elif opt in ('-h', '--help'):
            usage(0)

    if not removeArchives:
        print 'Not removing archives.  Reinvoke with -a to remove them.'

    REMOVABLES = [('lists/%s', 'list info'),
                  ]

    if removeArchives:
        REMOVABLES = REMOVABLES + \
                     [('archives/private/%s',      'private archives'),
                      ('archives/private/%s.mbox', 'private archives'),
                      ('archives/public/%s',       'public archives'),
                      ('archives/public/%s.mbox',  'public archives'),
                      ]

    for dirtmpl, msg in REMOVABLES:
        dir = os.path.join(mm_cfg.VAR_PREFIX, dirtmpl % listname)
        remove_it(listname, dir, msg)



if __name__ == '__main__':
    main()
