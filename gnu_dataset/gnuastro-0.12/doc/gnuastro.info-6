This is gnuastro.info, produced by makeinfo version 6.7 from
gnuastro.texi.

This book documents version 0.12 of the GNU Astronomy Utilities
(Gnuastro).  Gnuastro provides various programs and libraries for
astronomical data manipulation and analysis.

   Copyright © 2015-2020, Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled “GNU Free Documentation License”.
INFO-DIR-SECTION Astronomy
START-INFO-DIR-ENTRY
* Gnuastro: (gnuastro).       GNU Astronomy Utilities.
* libgnuastro: (gnuastro)Gnuastro library. Full Gnuastro library doc.

* help-gnuastro: (gnuastro)help-gnuastro mailing list. Getting help.

* bug-gnuastro: (gnuastro)Report a bug. How to report bugs

* Arithmetic: (gnuastro)Arithmetic. Arithmetic operations on pixels.
* astarithmetic: (gnuastro)Invoking astarithmetic. Options to Arithmetic.

* BuildProgram: (gnuastro)BuildProgram. Compile and run programs using Gnuastro’s library.
* astbuildprog: (gnuastro)Invoking astbuildprog. Options to BuildProgram.

* ConvertType: (gnuastro)ConvertType. Convert different file types.
* astconvertt: (gnuastro)Invoking astconvertt. Options to ConvertType.

* Convolve: (gnuastro)Convolve. Convolve an input file with kernel.
* astconvolve: (gnuastro)Invoking astconvolve. Options to Convolve.

* CosmicCalculator: (gnuastro)CosmicCalculator. For cosmological params.
* astcosmiccal: (gnuastro)Invoking astcosmiccal. Options to CosmicCalculator.

* Crop: (gnuastro)Crop. Crop region(s) from image(s).
* astcrop: (gnuastro)Invoking astcrop. Options to Crop.

* Fits: (gnuastro)Fits. View and manipulate FITS extensions and keywords.
* astfits: (gnuastro)Invoking astfits. Options to Fits.

* MakeCatalog: (gnuastro)MakeCatalog. Make a catalog from labeled image.
* astmkcatalog: (gnuastro)Invoking astmkcatalog. Options to MakeCatalog.

* MakeNoise: (gnuastro)MakeNoise. Make (add) noise to an image.
* astmknoise: (gnuastro)Invoking astmknoise. Options to MakeNoise.

* MakeProfiles: (gnuastro)MakeProfiles. Make mock profiles.
* astmkprof: (gnuastro)Invoking astmkprof. Options to MakeProfiles.

* Match: (gnuastro)Match. Match two separate catalogs.
* astmatch: (gnuastro)Invoking astmatch. Options to Match.

* NoiseChisel: (gnuastro)NoiseChisel. Detect signal in noise.
* astnoisechisel: (gnuastro)Invoking astnoisechisel. Options to NoiseChisel.

* Segment: (gnuastro)Segment. Segment detections based on signal structure.
* astsegment: (gnuastro)Invoking astsegment. Options to Segment.

* Statistics: (gnuastro)Statistics. Get image Statistics.
* aststatistics: (gnuastro)Invoking aststatistics. Options to Statistics.

* Table: (gnuastro)Table. Read and write FITS binary or ASCII tables.
* asttable: (gnuastro)Invoking asttable. Options to Table.

* Warp: (gnuastro)Warp. Warp a dataset to a new grid.
* astwarp: (gnuastro)Invoking astwarp. Options to Warp.

* astscript-sort-by-night: (gnuastro)Invoking astscript-sort-by-night. Options to this script

END-INFO-DIR-ENTRY


File: gnuastro.info,  Node: Labeled datasets,  Next: Convolution functions,  Prev: Binary datasets,  Up: Gnuastro library

10.3.23 Labeled datasets (‘label.h’)
------------------------------------

A labeled dataset is one where each element/pixel has an integer label
(or counter).  The label identifies the group/class that the element
belongs to.  This form of labeling allows the higher-level study of all
pixels within a certain class.

   For example, to detect objects/targets in an image/dataset, you can
apply a threshold to separate the noise from the signal (to detect
diffuse signal, a threshold is useless and more advanced methods are
necessary, for example *note NoiseChisel::).  But the output of
detection is a binary dataset (which is just a very low-level labeling
of ‘0’ for noise and ‘1’ for signal).

   The raw detection map is therefore hardly useful for any kind of
analysis on objects/targets in the image.  One solution is to use a
connected-components algorithm (see ‘gal_binary_connected_components’ in
*note Binary datasets::).  It is a simple and useful way to
separate/label connected patches in the foreground.  This higher-level
(but still elementary) labeling therefore allows you to count how many
connected patches of signal there are in the dataset and is a major
improvement compared to the raw detection.

   However, when your objects/targets are touching, the simple connected
components algorithm is not enough and a still higher-level labeling
mechanism is necessary.  This brings us to the necessity of the
functions in this part of Gnuastro’s library.  The main inputs to the
functions in this section are already labeled datasets (for example with
the connected components algorithm above).

   Each of the labeled regions are independent of each other (the labels
specify different classes of targets).  Therefore, especially in large
datasets, it is often useful to process each label on independent CPU
threads in parallel rather than in series.  Therefore the functions of
this section actually use an array of pixel/element indexs (belonging to
each label/class) as the main identifier of a region.  Using indexs will
also allow processing of overlapping labels (for example in deblending
problems).  Just note that overlapping labels are not yet implemented,
but planned.  You can use ‘gal_label_indexs’ to generate lists of indexs
belonging to separate classes from the labeled input.

 -- Macro: GAL_LABEL_INIT
 -- Macro: GAL_LABEL_RIVER
 -- Macro: GAL_LABEL_TMPCHECK
     Special negative integer values used internally by some of the
     functions in this section.  Recall that meaningful labels are
     considered to be positive integers ($\geq1$).  Zero is
     conventionally kept for regions with no labels, therefore negative
     integers can be used for any extra classification in the labeled
     datasets.

 -- Function:
          gal_data_t *
          gal_label_indexs (gal_data_t ‘*labels’, size_t ‘numlabs’,
          size_t ‘minmapsize’, int ‘quietmmap’)

     Return an array of ‘gal_data_t’ containers, each containing the
     pixel indexs of the respective label (see *note Generic data
     container::).  ‘labels’ contains the label of each element and has
     to have an ‘GAL_TYPE_INT32’ type (see *note Library data types::).
     Only positive (greater than zero) values in ‘labels’ will be
     used/indexed, other elements will be ignored.

     Meaningful labels start from ‘1’ and not ‘0’, therefore the output
     array of ‘gal_data_t’ will contain ‘numlabs+1’ elements.  The first
     (zero-th) element of the output (‘indexs[0]’ in the example below)
     will be initialized to a dataset with zero elements.  This will
     allow easy (non-confusing) access to the indexs of each
     (meaningful) label.

     ‘numlabs’ is the number of labels in the dataset.  If it is given a
     value of zero, then the maximum value in the input (largest label)
     will be found and used.  Therefore if it is given, but smaller than
     the actual number of labels, this function may/will crash (it will
     write in unallocated space).  ‘numlabs’ is therefore useful in a
     highly optimized/checked environment.

     For example, if the returned array is called ‘indexs’, then
     ‘indexs[10].size’ contains the number of elements that have a label
     of ‘10’ in ‘labels’ and ‘indexs[10].array’ is an array (after
     casting to ‘size_t *’) containing the indexs of each one of those
     elements/pixels.

     By _index_ we mean the 1D position: the input number of dimensions
     is irrelevant (any dimensionality is supported).  In other words,
     each element’s index is the number of elements/pixels between it
     and the dataset’s first element/pixel.  Therefore it is always
     greater or equal to zero and stored in ‘size_t’ type.

 -- Function:
          size_t
          gal_label_watershed (gal_data_t ‘*values’, gal_data_t
          ‘*indexs’, gal_data_t ‘*label’, size_t ‘*topinds’, int
          ‘min0_max1’)
     Use the watershed algorithm(1) to “over-segment” the pixels in the
     ‘indexs’ dataset based on values in the ‘values’ dataset.
     Internally, each local extrema (maximum or minimum, based on
     ‘min0_max1’) and its surrounding pixels will be given a unique
     label.  For demonstration, see Figures 8 and 9 of Akhlaghi and
     Ichikawa [2015] (http://arxiv.org/abs/1505.01664).  If
     ‘topinds!=NULL’, it is assumed to point to an already allocated
     space to write the index of each clump’s local extrema, otherwise,
     it is ignored.

     The ‘values’ dataset must have a 32-bit floating point type
     (‘GAL_TYPE_FLOAT32’, see *note Library data types::) and will only
     be read by this function.  ‘indexs’ must contain the indexs of the
     elements/pixels that will be over-segmented by this function and
     have a ‘GAL_TYPE_SIZE_T’ type, see the description of
     ‘gal_label_indexs’, above.  The final labels will be written in the
     respective positions of ‘labels’, which must have a
     ‘GAL_TYPE_INT32’ type and be the same size as ‘values’.

     When ‘indexs’ is already sorted, this function will ignore
     ‘min0_max1’.  To judge if the dataset is sorted or not (by the
     values the indexs correspond to in ‘values’, not the actual
     indexs), this function will look into the bits of ‘indexs->flag’,
     for the respective bit flags, see *note Generic data container::.
     If ‘indexs’ is not already sorted, this function will sort it
     according to the values of the respective pixel in ‘values’.  The
     increasing/decreasing order will be determined by ‘min0_max1’.
     Note that if this function is called on multiple threads _and_
     ‘values’ points to a different array on each thread, this function
     will not return a reasonable result.  In this case, please sort
     ‘indexs’ prior to calling this function (see
     ‘gal_qsort_index_multi_d’ in *note Qsort functions::).

     When ‘indexs’ is decreasing (increasing), or ‘min0_max1’ is ‘1’
     (‘0’), local minima (maxima), are considered rivers (watersheds)
     and given a label of ‘GAL_LABEL_RIVER’ (see above).

     Note that rivers/watersheds will also be formed on the edges of the
     labeled regions or when the labeled pixels touch a blank pixel.
     Therefore this function will need to check for the presence of
     blank values.  To be most efficient, it is thus recommended to use
     ‘gal_blank_present’ (with ‘updateflag=1’) prior to calling this
     function (see *note Library blank values::.  Once the flag has been
     set, no other function (including this one) that needs special
     behavior for blank pixels will have to parse the dataset to see if
     it has blank values any more.

     If you are sure your dataset doesn’t have blank values (by the
     design of your software), to avoid an extra parsing of the dataset
     and improve performance, you can set the two bits manually (see the
     description of ‘flags’ in *note Generic data container::):
          input->flag |=  GAL_DATA_FLAG_BLANK_CH; /* Set bit to 1. */
          input->flag &= ~GAL_DATA_FLAG_HASBLANK; /* Set bit to 0. */

 -- Function:
          void
          gal_label_clump_significance (gal_data_t ‘*values’, gal_data_t
          ‘*std’, gal_data_t ‘*label’, gal_data_t ‘*indexs’, struct
          gal_tile_two_layer_params ‘*tl’, size_t ‘numclumps’, size_t
          ‘minarea’, int ‘variance’, int ‘keepsmall’, gal_data_t ‘*sig’,
          gal_data_t ‘*sigind’)
     This function is usually called after ‘gal_label_watershed’, and is
     used as a measure to identify which over-segmented “clumps” are
     real and which are noise.

     A measurement is done on each clump (using the ‘values’ and ‘std’
     datasets, see below).  To help in multi-threaded environments, the
     operation is only done on pixels which are indexed in ‘indexs’.  It
     is expected for ‘indexs’ to be sorted by their values in ‘values’.
     If not sorted, the measurement may not be reliable.  If sorted in a
     decreasing order, then clump building will start from their highest
     value and vice-versa.  See the description of ‘gal_label_watershed’
     for more on ‘indexs’.

     Each “clump” (identified by a positive integer) is assumed to be
     surrounded by at least one river/watershed pixel (with a
     non-positive label).  This function will parse the pixels
     identified in ‘indexs’ and make a measurement on each clump and
     over all the river/watershed pixels.  The number of clumps
     (‘numclumps’) must be given as an input argument and any clump that
     is smaller than ‘minarea’ is ignored (because of scatter).  If
     ‘variance’ is non-zero, then the ‘std’ dataset is interpreted as
     variance, not standard deviation.

     The ‘values’ and ‘std’ datasets must have a ‘float’ (32-bit
     floating point) type.  Also, ‘label’ and ‘indexs’ must respectively
     have ‘int32’ and ‘size_t’ types.  ‘values’ and ‘label’ must have
     the same size, but ‘std’ can have three possible sizes: 1) a single
     element (which will be used for the whole dataset, 2) the same size
     as ‘values’ (so a different error can be assigned to every pixel),
     3) a single value for each tile, based on the ‘tl’ tessellation
     (see *note Tile grid::).  In the last case, a tile/value will be
     associated to each clump based on its flux-weighted (only positive
     values) center.

     The main output is an internally allocated, 1-dimensional array
     with one value per label.  The array information (length, type,
     etc) will be written into the ‘sig’ generic data container.
     Therefore ‘sig->array’ must be ‘NULL’ when this function is called.
     After this function, the details of the array (number of elements,
     type and size, etc) will be written in to the various components of
     ‘sig’, see the definition of ‘gal_data_t’ in *note Generic data
     container::.  Therefore ‘sig’ must already be allocated before
     calling this function.

     Optionally (when ‘sigind!=NULL’, similar to ‘sig’) the clump labels
     of each measurement in ‘sig’ will be written in ‘sigind->array’.
     If ‘keepsmall’ zero, small clumps (where no measurement is made)
     will not be included in the output table.

     This function is initially intended for a multi-threaded
     environment.  In such cases, you will be writing arrays of clump
     measures from different regions in parallel into an array of
     ‘gal_data_t’s.  You can simply allocate (and initialize), such an
     array with the ‘gal_data_array_calloc’ function in *note Arrays of
     datasets::.  For example if the ‘gal_data_t’ array is called
     ‘array’, you can pass ‘&array[i]’ as ‘sig’.

     Along with some other functions in ‘label.h’, this function was
     initially written for *note Segment::.  The description of the
     parameter used to measure a clump’s significance is fully given in
     Akhlaghi [2019] (https://arxiv.org/abs/1909.11230).

 -- Function:
          void
          gal_label_grow_indexs (gal_data_t ‘*labels’, gal_data_t
          ‘*indexs’, int ‘withrivers’, int ‘connectivity’)
     Grow the (positive) labels of ‘labels’ over the pixels in ‘indexs’
     (see description of ‘gal_label_indexs’).  The pixels (position in
     ‘indexs’, values in ‘labels’) that must be “grown” must have a
     value of ‘GAL_LABEL_INIT’ in ‘labels’ before calling this function.
     For a demonstration see Columns 2 and 3 of Figure 10 in Akhlaghi
     and Ichikawa [2015] (http://arxiv.org/abs/1505.01664).

     In many aspects, this function is very similar to over-segmentation
     (watershed algorithm, ‘gal_label_watershed’).  The big difference
     is that in over-segmentation local maximums (that aren’t touching
     any alreadylabeled pixel) get a separate label.  However, here the
     final number of labels will not change.  All pixels that aren’t
     directly touching a labeled pixel just get pushed back to the start
     of the loop, and the loop iterates until its size doesn’t change
     any more.  This is because in a generic scenario some of the
     indexed pixels might not be reachable through other indexed pixels.

     The next major difference with over-segmentation is that when there
     is only one label in growth region(s), it is not mandatory for
     ‘indexs’ to be sorted by values.  If there are multiple labeled
     regions in growth region(s), then values are important and you can
     use ‘qsort’ with ‘gal_qsort_index_single_d’ to sort the indexs by
     values in a separate array (see *note Qsort functions::).

     This function looks for positive-valued neighbors of each pixel in
     ‘indexs’ and will label a pixel if it touches one.  Therefore, it
     is very important that only pixels/labels that are intended for
     growth have positive values in ‘labels’ before calling this
     function.  Any non-positive (zero or negative) value will be
     ignored as a label by this function.  Thus, it is recommended that
     while filling in the ‘indexs’ array values, you initialize all the
     pixels that are in ‘indexs’ with ‘GAL_LABEL_INIT’, and set
     non-labeled pixels that you don’t want to grow to ‘0’.

     This function will write into both the input datasets.  After this
     function, some of the non-positive ‘labels’ pixels will have a new
     positivelabel and the number of useful elements in ‘indexs’ will
     have decreased.  The index of those pixels that couldn’t be labeled
     will remain inside ‘indexs’.  If ‘withrivers’ is non-zero, then
     pixels that are immediately touching more than one positive value
     will be given a ‘GAL_LABEL_RIVER’ label.

     Note that the ‘indexs->array’ is not re-allocated to its new size
     at the end(2).  But since ‘indexs->dsize[0]’ and ‘indexs->size’
     have new values after this function is returned, the extra elements
     just won’t be used until they are ultimately freed by
     ‘gal_data_free’.

     Connectivity is a value between ‘1’ (fewest number of neighbors)
     and the number of dimensions in the input (most number of
     neighbors).  For example in a 2D dataset, a connectivity of ‘1’ and
     ‘2’ corresponds to 4-connected and 8-connected neighbors.

   ---------- Footnotes ----------

   (1) The watershed algorithm was initially introduced by Vincent and
Soille (https://doi.org/10.1109/34.87344).  It starts from the minima
and puts the pixels in, one by one, to grow them until the touch (create
a watershed).  For more, also see the Wikipedia article:
<https://en.wikipedia.org/wiki/Watershed_%28image_processing%29>.

   (2) Note that according to the GNU C Library, even a ‘realloc’ to a
smaller size can also cause a re-write of the whole array, which is not
a cheap operation.


File: gnuastro.info,  Node: Convolution functions,  Next: Interpolation,  Prev: Labeled datasets,  Up: Gnuastro library

10.3.24 Convolution functions (‘convolve.h’)
--------------------------------------------

Convolution is a very common operation during data analysis and is
thoroughly described as part of Gnuastro’s *note Convolve:: program
which is fully devoted to this job.  Because of the complete
introduction that was presented there, we will directly skip onto the
currently available convolution functions in Gnuastro’s library.

   As of this version, only spatial domain convolution is available in
Gnuastro’s libraries.  We haven’t had the time to liberate the frequency
domain function convolution and de-convolution functions that are
available in the Convolve program(1).

 -- Function:
          gal_data_t *
          gal_convolve_spatial (gal_data_t ‘*tiles’, gal_data_t
          ‘*kernel’, size_t ‘numthreads’, int ‘edgecorrection’, int
          ‘convoverch’)
     Convolve the given ‘tiles’ dataset (possibly a list of tiles, see
     *note List of gal_data_t:: and *note Tessellation library::) with
     ‘kernel’ on ‘numthreads’ threads.  When ‘edgecorrection’ is
     non-zero, it will correct for the edge dimming effects as discussed
     in *note Edges in the spatial domain::.

     ‘tiles’ can be a single/complete dataset, but in that case the
     speed will be very slow.  Therefore, for larger images, it is
     recommended to give a list of tiles covering a dataset.  To create
     a tessellation that fully covers an input image, you may use
     ‘gal_tile_full’, or ‘gal_tile_full_two_layers’ to also define
     channels over your input dataset.  These functions are discussed in
     *note Tile grid::.  You may then pass the list of tiles to this
     function.  This is the recommended way to call this function
     because spatial domain convolution is slow and breaking the job
     into many small tiles and working on simultaneously on several
     threads can greatly speed up the processing.

     If the tiles are defined within a channel (a larger tile), by
     default convolution will be done within the channel, so pixels on
     the edge of a channel will not be affected by their neighbors that
     are in another channel.  See *note Tessellation:: for the necessity
     of channels in astronomical data analysis.  This behavior may be
     disabled when ‘convoverch’ is non-zero.  In this case, it will
     ignore channel borders (if they exist) and mix all pixels that
     cover the kernel within the dataset.

 -- Function:
          void
          gal_convolve_spatial_correct_ch_edge (gal_data_t ‘*tiles’,
          gal_data_t ‘*kernel’, size_t ‘numthreads’, int
          ‘edgecorrection’, gal_data_t ‘*tocorrect’)
     Correct the edges of channels in an already convolved image when it
     was initially convolved with ‘gal_convolve_spatial’ and
     ‘convoverch==0’.  In that case, strong boundaries might exist on
     the channel edges.  So if you later need to remove those boundaries
     at later steps of your processing, you can call this function.  It
     will only do convolution on the tiles that are near the edge and
     were effected by the channel borders.  Other pixels in the image
     will not be touched.  Hence, it is much faster.

   ---------- Footnotes ----------

   (1) Hence any help would be greatly appreciated.


File: gnuastro.info,  Node: Interpolation,  Next: Git wrappers,  Prev: Convolution functions,  Up: Gnuastro library

10.3.25 Interpolation (‘interpolate.h’)
---------------------------------------

During data analysis, it happens that parts of the data cannot be given
a value, but one is necessary for the higher-level analysis.  For
example a very bright star saturated part of your image and you need to
fill in the saturated pixels with some values.  Another common usage
case are masked sky-lines in 1D spectra that similarly need to be
assigned a value for higher-level analysis.  In other situations, you
might want a value in an arbitrary point: between the elements/pixels
where you have data.  The functions described in this section are for
such operations.

   The parametric interpolations discussed below are wrappers around the
interpolation functions of the GNU Scientific Library (or GSL, see *note
GNU Scientific Library::).  To identify the different GSL interpolation
types, Gnuastro’s ‘gnuastro/interpolate.h’ header file contains macros
that are discussed below.  The GSL wrappers provided here are not yet
complete because we are too busy.  If you need them, please consider
helping us in adding them to Gnuastro’s library.  Your would be very
welcome and appreciated.

 -- Function:
          gal_data_t *
          gal_interpolate_close_neighbors (gal_data_t ‘*input’, struct
          gal_tile_two_layer_params ‘*tl’, size_t ‘numneighbors’, size_t
          ‘numthreads’, int ‘onlyblank’, int ‘aslinkedlist’)
     Interpolate the values in the image using the median value of their
     ‘numneighbors’ closest neighbors.  This function is non-parametric
     and thus agnostic to the input’s number of dimension.  If
     ‘onlyblank’ is non-zero, then only blank elements will be
     interpolated and pixels that already have a value will be left
     untouched.  This function is multi-threaded and will run on
     ‘numthreads’ threads (see ‘gal_threads_number’ in *note
     Multithreaded programming::).

     ‘tl’ is Gnuastro’s two later tessellation structure used to define
     tiles over an image and is fully described in *note Tile grid::.
     When ‘tl!=NULL’, then it is assumed that the ‘input->array’
     contains one value per tile and interpolation will respect certain
     tessellation properties, for example to not interpolate over
     channel borders.

     If several datasets have the same set of blank values, you don’t
     need to call this function multiple times.  When ‘aslinkedlist’ is
     non-zero, then ‘input’ will be seen as a *note List of
     gal_data_t::.  In this case, the same neighbors will be used for
     all the datasets in the list.  Of course, the values for each
     dataset will be different, so a different value will be written in
     the each dataset, but the neighbor checking that is the most CPU
     intensive part will only be done once.

     This is a non-parametric and robust function for interpolation.
     The interpolated values are also always within the range of the
     non-blank values and strong outliers do not get created.  However,
     this type of interpolation must be used with care when there are
     gradients.  This is because it is non-parametric and if there
     aren’t enough neighbors, step-like features can be created.

 -- Macro: GAL_INTERPOLATE_1D_INVALID
     This is just a place holder to manage errors.
 -- Macro: GAL_INTERPOLATE_1D_LINEAR
     [From GSL:] Linear interpolation.  This interpolation method does
     not require any additional memory.
 -- Macro: GAL_INTERPOLATE_1D_POLYNOMIAL
     [From GSL:] Polynomial interpolation.  This method should only be
     used for interpolating small numbers of points because polynomial
     interpolation introduces large oscillations, even for well-behaved
     datasets.  The number of terms in the interpolating polynomial is
     equal to the number of points.
 -- Macro: GAL_INTERPOLATE_1D_CSPLINE
     [From GSL:] Cubic spline with natural boundary conditions.  The
     resulting curve is piecewise cubic on each interval, with matching
     first and second derivatives at the supplied data-points.  The
     second derivative is chosen to be zero at the first point and last
     point.
 -- Macro: GAL_INTERPOLATE_1D_CSPLINE_PERIODIC
     [From GSL:] Cubic spline with periodic boundary conditions.  The
     resulting curve is piecewise cubic on each interval, with matching
     first and second derivatives at the supplied data-points.  The
     derivatives at the first and last points are also matched.  Note
     that the last point in the data must have the same y-value as the
     first point, otherwise the resulting periodic interpolation will
     have a discontinuity at the boundary.
 -- Macro: GAL_INTERPOLATE_1D_AKIMA
     [From GSL:] Non-rounded Akima spline with natural boundary
     conditions.  This method uses the non-rounded corner algorithm of
     Wodicka.
 -- Macro: GAL_INTERPOLATE_1D_AKIMA_PERIODIC
     [From GSL:] Non-rounded Akima spline with periodic boundary
     conditions.  This method uses the non-rounded corner algorithm of
     Wodicka.
 -- Macro: GAL_INTERPOLATE_1D_STEFFEN
     [From GSL:] Steffen’s method(1) guarantees the monotonicity of the
     interpolating function between the given data points.  Therefore,
     minima and maxima can only occur exactly at the data points, and
     there can never be spurious oscillations between data points.  The
     interpolated function is piecewise cubic in each interval.  The
     resulting curve and its first derivative are guaranteed to be
     continuous, but the second derivative may be discontinuous.

 -- Function:
          gsl_spline *
          gal_interpolate_1d_make_gsl_spline (gal_data_t ‘*X’,
          gal_data_t ‘*Y’, int ‘type_1d’)
     Allocate and initialize a GNU Scientific Library (GSL) 1D
     ‘gsl_spline’ structure using the non-blank elements of ‘Y’.
     ‘type_1d’ identifies the interpolation scheme and must be one of
     the ‘GAL_INTERPOLATE_1D_*’ macros defined above.

     If ‘X==NULL’, the X-axis is assumed to be integers starting from
     zero (the index of each element in ‘Y’).  Otherwise, the values in
     ‘X’ will be used to initialize the interpolation structure.  Note
     that when given, ‘X’ must _not_ contain any blank elements and it
     must be sorted (in increasing order).

     Each interpolation scheme needs a minimum number of elements to
     successfully operate.  If the number of non-blank values in ‘Y’ is
     less than this number, this function will return a ‘NULL’ pointer.

     To be as generic and modular as possible, GSL’s tools are
     low-level.  Therefore before doing the interpolation, many steps
     are necessary (like preparing your dataset, then allocating and
     initializing ‘gsl_spline’).  The metadata available in Gnuastro’s
     *note Generic data container:: make it easy to hide all those
     preparations within this function.

     Once ‘gsl_spline’ has been initialized by this function, the
     interpolation can be evaluated for any X value within the non-blank
     range of the input using ‘gsl_spline_eval’ or ‘gsl_spline_eval_e’.

     For example in the small program below, we read the first two
     columns of the table in ‘table.txt’ and feed them to this function
     to later estimate the values in the second column for three
     selected points.  You can use *note BuildProgram:: to compile and
     run this function, see *note Library demo programs:: for more.

          #include <stdio.h>
          #include <stdlib.h>
          #include <gnuastro/table.h>
          #include <gnuastro/interpolate.h>

          int
          main(void)
          {
            size_t i;
            gal_data_t *X, *Y;
            gsl_spline *spline;
            gsl_interp_accel *acc;
            gal_list_str_t *cols=NULL;

            /* Change the values based on your input table. */
            double points[]={1.8, 2.5, 10.3};

            /* Read the first two columns from `tab.txt'.
               IMPORTANT: the list is first-in-first-out, so the output
               column order is the inverse of the input order. */
            gal_list_str_add(&cols, "1", 0);
            gal_list_str_add(&cols, "2", 0);
            Y=gal_table_read("table.txt", NULL, cols, GAL_TABLE_SEARCH_NAME,
                             0, -1, 1, NULL);
            X=Y->next;

            /* Allocate the GSL interpolation accelerator and make the
               `gsl_spline' structure. */
            acc=gsl_interp_accel_alloc();
            spline=gal_interpolate_1d_make_gsl_spline(X, Y,
                                           GAL_INTERPOLATE_1D_STEFFEN);

            /* Calculate the respective value for all the given points,
               if `spline' could be allocated. */
            if(spline)
              for(i=0; i<(sizeof points)/(sizeof *points); ++i)
                printf("%f: %f\n", points[i],
                       gsl_spline_eval(spline, points[i], acc));

            /* Clean up and return. */
            gal_data_free(X);
            gal_data_free(Y);
            gsl_spline_free(spline);
            gsl_interp_accel_free(acc);
            gal_list_str_free(cols, 0);
            return EXIT_SUCCESS;
          }

 -- Function:
          void
          gal_interpolate_1d_blank (gal_data_t ‘*in’, int ‘type_1d’)
     Fill the blank elements of ‘in’ using the rest of the elements and
     the given interpolation.  The interpolation scheme can be set
     through ‘type_1d’, which accepts any of the ‘GAL_INTERPOLATE_1D_*’
     macros above.  The interpolation is internally done in 64-bit
     floating point type (‘double’).  However the evaluated/interpolated
     values (originally blank) will be written (in ‘in’) with its
     original numeric datatype, using C’s standard type conversion.

     By definition, interpolation is only defined “between” valid
     points.  Therefore, if any number of elements on the start or end
     of the 1D array are blank, those elements will not be interpolated
     and will remain blank.  To see if any blank (non-interpolated)
     elements remain, you can use ‘gal_blank_present’ on ‘in’ after this
     function is finished.

   ---------- Footnotes ----------

   (1) <http://adsabs.harvard.edu/abs/1990A%26A...239..443S>


File: gnuastro.info,  Node: Git wrappers,  Next: Unit conversion library (units.h),  Prev: Interpolation,  Up: Gnuastro library

10.3.26 Git wrappers (‘git.h’)
------------------------------

Git is one of the most common tools for version control and it can often
be useful during development, for example see ‘COMMIT’ keyword in *note
Output FITS files::.  At installation time, Gnuastro will also check for
the existence of libgit2, and store the value in the
‘GAL_CONFIG_HAVE_LIBGIT2’, see *note Configuration information:: and
*note Optional dependencies::.  ‘gnuastro/git.h’ includes
‘gnuastro/config.h’ internally, so you won’t have to include both for
this macro.

 -- Function:
          char *
          gal_git_describe ( )
     When libgit2 is present and the program is called within a
     directory that is version controlled, this function will return a
     string containing the commit description (similar to Gnuastro’s
     unofficial version number, see *note Version numbering::).  If
     there are uncommitted changes in the running directory, it will add
     a ‘‘-dirty’’ prefix to the description.  When there is no tagged
     point in the previous commit, this function will return a uniquely
     abbreviated commit object as fallback.  This function is used for
     generating the value of the ‘COMMIT’ keyword in *note Output FITS
     files::.  The output string is similar to the output of the
     following command:

          $ git describe --dirty --always

     Space for the output string is allocated within this function, so
     after using the value you have to ‘free’ the output string.  If
     libgit2 is not installed or the program calling this function is
     not within a version controlled directory, then the output will be
     the ‘NULL’ pointer.


File: gnuastro.info,  Node: Unit conversion library (units.h),  Next: Spectral lines library,  Prev: Git wrappers,  Up: Gnuastro library

10.3.27 Unit conversion library (‘units.h’)
-------------------------------------------

Datasets can contain values in various formats or units.  The functions
in this section are defined to facilitate the easy conversion between
them and are declared in ‘units.h’.  If there are certain conversions
that are useful for your work, please get in touch.

 -- Function:
          int
          gal_units_extract_decimal (char ‘*convert’, const char
          ‘*delimiter’, double ‘*args’, size_t ‘n’)
     Parse the input ‘convert’ string with a certain delimiter (for
     example ‘01:23:45’, where the delimiter is ‘":"’) as multiple
     numbers (for example 1,23,45) and write them as an array in the
     space that ‘args’ is pointing to.  The expected number of values in
     the string is specified by the ‘n’ argument (3 in the example
     above).

     If the function succeeds, it will return 1, otherwise it will
     return 0 and the values may not be fully written into ‘args’.  If
     the number of values parsed in the string is different from ‘n’,
     this function will fail.

 -- Function:
          double
          gal_units_ra_to_degree (char ‘*convert’)
     Convert the input Right Ascension (RA) string (in the format of
     ‘HH:MM:SS’) to degrees (a single floating point number).

 -- Function:
          double
          gal_units_dec_to_degree (char ‘*convert’)
     Convert the input Declination (Dec) string (in the format of
     ‘DD:MM:SS’) to degrees (a single floating point number).

 -- Function:
          char *
          gal_units_degree_to_ra (double ‘decimal’)
     Convert the input Right Ascension (RA) degree (a single floating
     point number) to old/standard notation (in the format of
     ‘HH:MM:SS’).

 -- Function:
          char *
          gal_units_degree_to_dec (double ‘decimal’)
     Convert the input Declination (RA) degree (a single floating point
     number) to old/standard notation (in the format of ‘HH:MM:SS’).


File: gnuastro.info,  Node: Spectral lines library,  Next: Cosmology library,  Prev: Unit conversion library (units.h),  Up: Gnuastro library

10.3.28 Spectral lines library (‘speclines.h’)
----------------------------------------------

Gnuastro’s library has the following macros and functions for dealing
with spectral lines.  All these functions are declared in
‘gnuastro/spectra.h’.

 -- Macro: GAL_SPECLINES_INVALID
 -- Macro: GAL_SPECLINES_SIIRED
 -- Macro: GAL_SPECLINES_SII
 -- Macro: GAL_SPECLINES_SIIBLUE
 -- Macro: GAL_SPECLINES_NIIRED
 -- Macro: GAL_SPECLINES_NII
 -- Macro: GAL_SPECLINES_HALPHA
 -- Macro: GAL_SPECLINES_NIIBLUE
 -- Macro: GAL_SPECLINES_OIIIRED
 -- Macro: GAL_SPECLINES_OIII
 -- Macro: GAL_SPECLINES_OIIIBLUE
 -- Macro: GAL_SPECLINES_HBETA
 -- Macro: GAL_SPECLINES_HEIIRED
 -- Macro: GAL_SPECLINES_HGAMMA
 -- Macro: GAL_SPECLINES_HDELTA
 -- Macro: GAL_SPECLINES_HEPSILON
 -- Macro: GAL_SPECLINES_NEIII
 -- Macro: GAL_SPECLINES_OIIRED
 -- Macro: GAL_SPECLINES_OII
 -- Macro: GAL_SPECLINES_OIIBLUE
 -- Macro: GAL_SPECLINES_BLIMIT
 -- Macro: GAL_SPECLINES_MGIIRED
 -- Macro: GAL_SPECLINES_MGII
 -- Macro: GAL_SPECLINES_MGIIBLUE
 -- Macro: GAL_SPECLINES_CIIIRED
 -- Macro: GAL_SPECLINES_CIII
 -- Macro: GAL_SPECLINES_CIIIBLUE
 -- Macro: GAL_SPECLINES_HEIIBLUE
 -- Macro: GAL_SPECLINES_LYALPHA
 -- Macro: GAL_SPECLINES_LYLIMIT
 -- Macro: GAL_SPECLINES_INVALID_MAX
     Internal values/identifiers for specific spectral lines as is clear
     from their names.  Note the first and last one, they can be used
     when parsing the lines automatically: both don’t correspond to any
     line, but their integer values correspond to the two integers just
     before and after the first and last line identifier.

     ‘GAL_SPECLINES_INVALID’ has a value of zero, and allows you to have
     a fixed integer which never corresponds to a line.
     ‘GAL_SPECLINES_INVALID_MAX’ is the total number of pre-defined
     lines, plus one.  So you can parse all the known lines with a ‘for’
     loop like this:
          for(i=1;i<GAL_SPECLINES_INVALID_MAX;++i)

 -- Macro: GAL_SPECLINES_ANGSTROM_SIIRED
 -- Macro: GAL_SPECLINES_ANGSTROM_SII
 -- Macro: GAL_SPECLINES_ANGSTROM_SIIBLUE
 -- Macro: GAL_SPECLINES_ANGSTROM_NIIRED
 -- Macro: GAL_SPECLINES_ANGSTROM_NII
 -- Macro: GAL_SPECLINES_ANGSTROM_HALPHA
 -- Macro: GAL_SPECLINES_ANGSTROM_NIIBLUE
 -- Macro: GAL_SPECLINES_ANGSTROM_OIIIRED
 -- Macro: GAL_SPECLINES_ANGSTROM_OIII
 -- Macro: GAL_SPECLINES_ANGSTROM_OIIIBLUE
 -- Macro: GAL_SPECLINES_ANGSTROM_HBETA
 -- Macro: GAL_SPECLINES_ANGSTROM_HEIIRED
 -- Macro: GAL_SPECLINES_ANGSTROM_HGAMMA
 -- Macro: GAL_SPECLINES_ANGSTROM_HDELTA
 -- Macro: GAL_SPECLINES_ANGSTROM_HEPSILON
 -- Macro: GAL_SPECLINES_ANGSTROM_NEIII
 -- Macro: GAL_SPECLINES_ANGSTROM_OIIRED
 -- Macro: GAL_SPECLINES_ANGSTROM_OII
 -- Macro: GAL_SPECLINES_ANGSTROM_OIIBLUE
 -- Macro: GAL_SPECLINES_ANGSTROM_BLIMIT
 -- Macro: GAL_SPECLINES_ANGSTROM_MGIIRED
 -- Macro: GAL_SPECLINES_ANGSTROM_MGII
 -- Macro: GAL_SPECLINES_ANGSTROM_MGIIBLUE
 -- Macro: GAL_SPECLINES_ANGSTROM_CIIIRED
 -- Macro: GAL_SPECLINES_ANGSTROM_CIII
 -- Macro: GAL_SPECLINES_ANGSTROM_CIIIBLUE
 -- Macro: GAL_SPECLINES_ANGSTROM_HEIIBLUE
 -- Macro: GAL_SPECLINES_ANGSTROM_LYALPHA
 -- Macro: GAL_SPECLINES_ANGSTROM_LYLIMIT
     Wavelength (in Angstroms) of the named lines.

 -- Macro: GAL_SPECLINES_NAME_SIIRED
 -- Macro: GAL_SPECLINES_NAME_SII
 -- Macro: GAL_SPECLINES_NAME_SIIBLUE
 -- Macro: GAL_SPECLINES_NAME_NIIRED
 -- Macro: GAL_SPECLINES_NAME_NII
 -- Macro: GAL_SPECLINES_NAME_HALPHA
 -- Macro: GAL_SPECLINES_NAME_NIIBLUE
 -- Macro: GAL_SPECLINES_NAME_OIIIRED
 -- Macro: GAL_SPECLINES_NAME_OIII
 -- Macro: GAL_SPECLINES_NAME_OIIIBLUE
 -- Macro: GAL_SPECLINES_NAME_HBETA
 -- Macro: GAL_SPECLINES_NAME_HEIIRED
 -- Macro: GAL_SPECLINES_NAME_HGAMMA
 -- Macro: GAL_SPECLINES_NAME_HDELTA
 -- Macro: GAL_SPECLINES_NAME_HEPSILON
 -- Macro: GAL_SPECLINES_NAME_NEIII
 -- Macro: GAL_SPECLINES_NAME_OIIRED
 -- Macro: GAL_SPECLINES_NAME_OII
 -- Macro: GAL_SPECLINES_NAME_OIIBLUE
 -- Macro: GAL_SPECLINES_NAME_BLIMIT
 -- Macro: GAL_SPECLINES_NAME_MGIIRED
 -- Macro: GAL_SPECLINES_NAME_MGII
 -- Macro: GAL_SPECLINES_NAME_MGIIBLUE
 -- Macro: GAL_SPECLINES_NAME_CIIIRED
 -- Macro: GAL_SPECLINES_NAME_CIII
 -- Macro: GAL_SPECLINES_NAME_CIIIBLUE
 -- Macro: GAL_SPECLINES_NAME_HEIIBLUE
 -- Macro: GAL_SPECLINES_NAME_LYALPHA
 -- Macro: GAL_SPECLINES_NAME_LYLIMIT
     Names (as literal stings without any space, all in small-caps) that
     can be used to refer to the lines in your program and converted to
     and from line identifiers using the functions below.

 -- Function:
          char *
          gal_speclines_line_name (int ‘linecode’)
     Return the literal string of the given spectral line identifier
     Macro (for example ‘GAL_SPECLINES_HALPHA’ or
     ‘GAL_SPECLINES_LYLIMIT’).

 -- Function:
          int
          gal_speclines_line_code (char ‘*name’)
     Return the spectral line identifier of the given standard name (for
     example ‘GAL_SPECLINES_NAME_HALPHA’ or
     ‘GAL_SPECLINES_NAME_LYLIMIT’).

 -- Function:
          double
          gal_speclines_line_angstrom (int ‘linecode’)
     Return the wavelength (in Angstroms) of the given line.

 -- Function:
          double
          gal_speclines_line_redshift (double ‘obsline’, double
          ‘restline’)
     Return the redshift where the observed wavelength (‘obsline’) was
     emitted from (if its restframe wavelength was ‘restline’).

 -- Function:
          double
          gal_speclines_line_redshift_code (double ‘obsline’, int
          ‘linecode’)
     Return the redshift where the observed wavelength (‘obsline’) was
     emitted from (assuming its a specific spectra line, identified with
     ‘linecode’).


File: gnuastro.info,  Node: Cosmology library,  Prev: Spectral lines library,  Up: Gnuastro library

10.3.29 Cosmology library (‘cosmology.h’)
-----------------------------------------

This library does the main cosmological calculations that are commonly
necessary in extra-galactic astronomical studies.  The main variable in
this context is the redshift ($z$).  The cosmological input parameters
in the functions below are ‘H0’, ‘o_lambda_0’, ‘o_matter_0’,
‘o_radiation_0’ which respectively represent the current (at redshift 0)
expansion rate (Hubble constant in units of km/sec/Mpc), cosmological
constant ($\Lambda$), matter and radiation densities.

   All these functions are declared in ‘gnuastro/cosmology.h’.  For a
more extended introduction/discussion of the cosmological parameters,
please see *note CosmicCalculator::.

 -- Function:
          double
          gal_cosmology_age (double ‘z’, double ‘H0’, double
          ‘o_lambda_0’, double ‘o_matter_0’, double ‘o_radiation_0’)
     Returns the age of the universe at redshift ‘z’ in units of Giga
     years.

 -- Function:
          double
          gal_cosmology_proper_distance (double ‘z’, double ‘H0’, double
          ‘o_lambda_0’, double ‘o_matter_0’, double ‘o_radiation_0’)
     Returns the proper distance to an object at redshift ‘z’ in units
     of Mega parsecs.

 -- Function:
          double
          gal_cosmology_comoving_volume (double ‘z’, double ‘H0’, double
          ‘o_lambda_0’, double ‘o_matter_0’, double ‘o_radiation_0’)
     Returns the comoving volume over 4pi stradian to ‘z’ in units of
     Mega parsecs cube.

 -- Function:
          double
          gal_cosmology_critical_density (double ‘z’, double ‘H0’,
          double ‘o_lambda_0’, double ‘o_matter_0’, double
          ‘o_radiation_0’)
     Returns the critical density at redshift ‘z’ in units of $g/cm^3$.

 -- Function:
          double
          gal_cosmology_angular_distance (double ‘z’, double ‘H0’,
          double ‘o_lambda_0’, double ‘o_matter_0’, double
          ‘o_radiation_0’)
     Return the angular diameter distance to an object at redshift ‘z’
     in units of Mega parsecs.

 -- Function:
          double
          gal_cosmology_luminosity_distance (double ‘z’, double ‘H0’,
          double ‘o_lambda_0’, double ‘o_matter_0’, double
          ‘o_radiation_0’)
     Return the luminosity diameter distance to an object at redshift
     ‘z’ in units of Mega parsecs.

 -- Function:
          double
          gal_cosmology_distance_modulus (double ‘z’, double ‘H0’,
          double ‘o_lambda_0’, double ‘o_matter_0’, double
          ‘o_radiation_0’)
     Return the distance modulus at redshift ‘z’ (with no units).

 -- Function:
          double
          gal_cosmology_to_absolute_mag (double ‘z’, double ‘H0’, double
          ‘o_lambda_0’, double ‘o_matter_0’, double ‘o_radiation_0’)
     Return the conversion from apparent to absolute magnitude for an
     object at redshift ‘z’.  This value has to be added to the apparent
     magnitude to give the absolute magnitude of an object at redshift
     ‘z’.


File: gnuastro.info,  Node: Library demo programs,  Prev: Gnuastro library,  Up: Library

10.4 Library demo programs
==========================

In this final section of *note Library::, we give some example Gnuastro
programs to demonstrate various features in the library.  All these
programs have been tested and once Gnuastro is installed you can compile
and run them with with Gnuastro’s *note BuildProgram:: program that will
take care of linking issues.  If you don’t have any FITS file to
experiment on, you can use those that are generated by Gnuastro after
‘make check’ in the ‘tests/’ directory, see *note Quick start::.

* Menu:

* Library demo - reading a image::  Read a FITS image into memory.
* Library demo - inspecting neighbors::  Inspect the neighbors of a pixel.
* Library demo - multi-threaded operation::  Doing an operation on threads.
* Library demo - reading and writing table columns::  Simple Column I/O.


File: gnuastro.info,  Node: Library demo - reading a image,  Next: Library demo - inspecting neighbors,  Prev: Library demo programs,  Up: Library demo programs

10.4.1 Library demo - reading a FITS image
------------------------------------------

The following simple program demonstrates how to read a FITS image into
memory and use the ‘void *array’ pointer in of *note Generic data
container::.  For easy linking/compilation of this program along with a
first run see *note BuildProgram::.  Before running, also change the
‘filename’ and ‘hdu’ variable values to specify an existing FITS file
and/or extension/HDU.

   This is just intended to demonstrate how to use the ‘array’ pointer
of ‘gal_data_t’.  Hence it doesn’t do important sanity checks, for
example in real datasets you may also have blank pixels.  In such cases,
this program will return a NaN value (see *note Blank pixels::).  So for
general statistical information of a dataset, it is much better to use
Gnuastro’s *note Statistics:: program which can deal with blank pixels
any many other issues in a generic dataset.

     #include <stdio.h>
     #include <stdlib.h>
     #include <gnuastro/fits.h> /* includes gnuastro's data.h and type.h */
     #include <gnuastro/statistics.h>

     int
     main(void)
     {
       size_t i;
       float *farray;
       double sum=0.0f;
       gal_data_t *image;
       char *filename="img.fits", *hdu="1";


       /* Read `img.fits' (HDU: 1) as a float32 array. */
       image=gal_fits_img_read_to_type(filename, hdu, GAL_TYPE_FLOAT32,
                                       -1, 1);


       /* Use the allocated space as a single precision floating
        * point array (recall that `image->array' has `void *'
        * type, so it is not directly usable. */
       farray=image->array;


       /* Calculate the sum of all the values. */
       for(i=0; i<image->size; ++i)
         sum += farray[i];


       /* Report the sum. */
       printf("Sum of values in %s (hdu %s) is: %f\n",
              filename, hdu, sum);


       /* Clean up and return. */
       gal_data_free(image);
       return EXIT_SUCCESS;
     }


File: gnuastro.info,  Node: Library demo - inspecting neighbors,  Next: Library demo - multi-threaded operation,  Prev: Library demo - reading a image,  Up: Library demo programs

10.4.2 Library demo - inspecting neighbors
------------------------------------------

The following simple program shows how you can inspect the neighbors of
a pixel using the ‘GAL_DIMENSION_NEIGHBOR_OP’ function-like macro that
was introduced in *note Dimensions::.  For easy linking/compilation of
this program along with a first run see *note BuildProgram::.  Before
running, also change the file name and HDU (first and second arguments
to ‘gal_fits_img_read_to_type’) to specify an existing FITS file and/or
extension/HDU.

     #include <stdio.h>
     #include <gnuastro/fits.h>
     #include <gnuastro/dimension.h>

     int
     main(void)
     {
       double sum;
       float *array;
       size_t i, num, *dinc;
       gal_data_t *input=gal_fits_img_read_to_type("input.fits", "1",
                                                   GAL_TYPE_FLOAT32, -1, 1);

       /* To avoid the `void *' pointer and have `dinc'. */
       array=input->array;
       dinc=gal_dimension_increment(input->ndim, input->dsize);

       /* Go over all the pixels. */
       for(i=0;i<input->size;++i)
         {
           num=0;
           sum=0.0f;
           GAL_DIMENSION_NEIGHBOR_OP( i, input->ndim, input->dsize,
                                      input->ndim, dinc,
                                      {++num; sum+=array[nind];} );
           printf("%zu: num: %zu, sum: %f\n", i, num, sum);
         }

       /* Clean up and return. */
       gal_data_free(input);
       return EXIT_SUCCESS;
     }


File: gnuastro.info,  Node: Library demo - multi-threaded operation,  Next: Library demo - reading and writing table columns,  Prev: Library demo - inspecting neighbors,  Up: Library demo programs

10.4.3 Library demo - multi-threaded operation
----------------------------------------------

The following simple program shows how to use Gnuastro to simplify
spinning off threads and distributing different jobs between the
threads.  The relevant thread-related functions are defined in *note
Gnuastro's thread related functions::.  For easy linking/compilation of
this program, along with a first run, see Gnuastro’s *note
BuildProgram::.  Before running, also change the ‘filename’ and ‘hdu’
variable values to specify an existing FITS file and/or extension/HDU.

   This is a very simple program to open a FITS image, distribute its
pixels between different threads and print the value of each pixel and
the thread it was assigned to.  The actual operation is very simple (and
would not usually be done with threads in a real-life program).  It is
intentionally chosen to put more focus on the important steps in
spinning of threads and how the worker function (which is called by each
thread) can identify the job-IDs it should work on.

   For example, instead of an array of pixels, you can define an array
of tiles or any other context-specific structures as separate targets.
The important thing is that each action should have its own unique ID
(counting from zero, as is done in an array in C). You can then follow
the process below and use each thread to work on all the targets that
are assigned to it.  Recall that spinning-off threads is its self an
expensive process and we don’t want to spin-off one thread for each
target (see the description of ‘gal_threads_dist_in_threads’ in *note
Gnuastro's thread related functions::.

   There are many (more complicated, real-world) examples of using
‘gal_threads_spin_off’ in Gnuastro’s actual source code, you can see
them by searching for the ‘gal_threads_spin_off’ function from the top
source (after unpacking the tarball) directory (for example with this
command):

     $ grep -r gal_threads_spin_off ./

The code of this demonstration program is shown below.  This program was
also built and run when you ran ‘make check’ during the building of
Gnuastro (‘tests/lib/multithread.c’, so it is already tested for your
system and you can safely use it as a guide.

     #include <stdio.h>
     #include <stdlib.h>

     #include <gnuastro/fits.h>
     #include <gnuastro/threads.h>


     /* This structure can keep all information you want to pass onto the
      * worker function on each thread. */
     struct params
     {
       gal_data_t *image;            /* Dataset to print values of. */
     };




     /* This is the main worker function which will be called by the
      * different threads. `gal_threads_params' is defined in
      * `gnuastro/threads.h' and contains the pointer to the parameter we
      * want. Note that the input argument and returned value of this
      * function always must have `void *' type. */
     void *
     worker_on_thread(void *in_prm)
     {
       /* Low-level definitions to be done first. */
       struct gal_threads_params *tprm=(struct gal_threads_params *)in_prm;
       struct params *p=(struct params *)tprm->params;


       /* Subsequent definitions. */
       float *array=p->image->array;
       size_t i, index, *dsize=p->image->dsize;


       /* Go over all the actions (pixels in this case) that were assigned
        * to this thread. */
       for(i=0; tprm->indexs[i] != GAL_BLANK_SIZE_T; ++i)
         {
           /* For easy reading. */
           index = tprm->indexs[i];


           /* Print the information. */
           printf("(%zu, %zu) on thread %zu: %g\n", index%dsize[1]+1,
                  index/dsize[1]+1, tprm->id, array[index]);
         }


       /* Wait for all the other threads to finish, then return. */
       if(tprm->b) pthread_barrier_wait(tprm->b);
       return NULL;
     }




     /* High-level function (called by the operating system). */
     int
     main(void)
     {
       struct params p;
       char *filename="input.fits", *hdu="1";
       size_t numthreads=gal_threads_number();


       /* Read the image into memory as a float32 data type. We are using
        * `-1' for `minmapsize' to ensure that the image is read into
        * memory and `1' for `quietmmap' (which can also be zero). */
       p.image=gal_fits_img_read_to_type(filename, hdu, GAL_TYPE_FLOAT32,
                                         -1, 1);


       /* Print some basic information before the actual contents: */
       printf("Pixel values of %s (HDU: %s) on %zu threads.\n", filename,
              hdu, numthreads);
       printf("Used to check the compiled library's capability in opening "
              "a FITS file, and also spinning-off threads.\n");


       /* A small sanity check: this is only intended for 2D arrays (to
        * print the coordinates of each pixel). */
       if(p.image->ndim!=2)
         {
           fprintf(stderr, "only 2D images are supported.");
           exit(EXIT_FAILURE);
         }


       /* Spin-off the threads and do the processing on each thread. */
       gal_threads_spin_off(worker_on_thread, &p, p.image->size, numthreads);


       /* Clean up and return. */
       gal_data_free(p.image);
       return EXIT_SUCCESS;
     }


File: gnuastro.info,  Node: Library demo - reading and writing table columns,  Prev: Library demo - multi-threaded operation,  Up: Library demo programs

10.4.4 Library demo - reading and writing table columns
-------------------------------------------------------

Tables are some of the most common inputs to, and outputs of programs.
This section contains a small program for reading and writing tables
using the constructs described in *note Table input output::.  For easy
linking/compilation of this program, along with a first run, see
Gnuastro’s *note BuildProgram::.  Before running, also set the following
file and column names in the first two lines of ‘main’.  The input and
output names may be ‘.txt’ and ‘.fits’ tables, ‘gal_table_read’ and
‘gal_table_write’ will be able to write to both formats.  For plain text
tables see see *note Gnuastro text table format::.

   This example program reads three columns from a table.  The first two
columns are selected by their name (‘NAME1’ and ‘NAME2’) and the third
is selected by its number: column 10 (counting from 1).  Gnuastro’s
column selection is discussed in *note Selecting table columns::.  The
first and second columns can be any type, but this program will convert
them to ‘int32_t’ and ‘float’ for its internal usage respectively.
However, the third column must be double for this program.  So if it
isn’t, the program will abort with an error.  Having the columns in
memory, it will print them out along with their sum (just a simple
application, you can do what ever you want at this stage).  Reading the
table finishes here.

   The rest of the program is a demonstration of writing a table.  While
parsing the rows, this program will change the first column (to be
counters) and multiply the second by 10 (so the output will be
different).  Then it will define the order of the output columns by
setting the ‘next’ element (to create a *note List of gal_data_t::).
Before writing, this function will also set names for the columns (units
and comments can be defined in a similar manner).  Writing the columns
to a file is then done through a simple call to ‘gal_table_write’.

   The operations that are shown in this example program are not
necessary all the time.  For example, in many cases, you know the
numerical data type of the column before writing your program (see *note
Numeric data types::), so type checking and copying to a specific type
won’t be necessary.

     #include <stdio.h>
     #include <stdlib.h>

     #include <gnuastro/table.h>

     int
     main(void)
     {
       /* File names and column names (which may also be numbers). */
       char *c1_name="NAME1", *c2_name="NAME2", *c3_name="10";
       char *inname="input.fits", *hdu="1", *outname="out.fits";

       /* Internal parameters. */
       float *array2;
       double *array3;
       int32_t *array1;
       size_t i, counter=0;
       gal_data_t *c1, *c2;
       gal_data_t tmp, *col, *columns;
       gal_list_str_t *column_ids=NULL;

       /* Define the columns to read. */
       gal_list_str_add(&column_ids, c1_name, 0);
       gal_list_str_add(&column_ids, c2_name, 0);
       gal_list_str_add(&column_ids, c3_name, 0);

       /* The columns were added in reverse, so correct it. */
       gal_list_str_reverse(&column_ids);

       /* Read the desired columns. */
       columns = gal_table_read(inname, hdu, column_ids,
                                GAL_TABLE_SEARCH_NAME, 1, -1, 1, NULL);

       /* Go over the columns, we'll assume that you don't know their type
        * a-priori, so we'll check  */
       counter=1;
       for(col=columns; col!=NULL; col=col->next)
         switch(counter++)
           {
           case 1:              /* First column: we want it as int32_t. */
             c1=gal_data_copy_to_new_type(col, GAL_TYPE_INT32);
             array1 = c1->array;
             break;

           case 2:              /* Second column: we want it as float.  */
             c2=gal_data_copy_to_new_type(col, GAL_TYPE_FLOAT32);
             array2 = c2->array;
             break;

           case 3:              /* Third column: it MUST be double.     */
             if(col->type!=GAL_TYPE_FLOAT64)
               {
                 fprintf(stderr, "Column %s must be float64 type, it is "
                         "%s", c3_name, gal_type_name(col->type, 1));
                 exit(EXIT_FAILURE);
               }
             array3 = col->array;
             break;
           }

       /* As an example application we'll just print them out. In the
        * meantime (just for a simple demonstration), change the first
        * array value to the counter and multiply the second by 10. */
       for(i=0;i<c1->size;++i)
         {
           printf("%zu: %d + %f + %f = %f\n", i+1, array1[i], array2[i],
                  array3[i], array1[i]+array2[i]+array3[i]);
           array1[i]  = i+1;
           array2[i] *= 10;
         }

       /* Link the first two columns as a list. */
       c1->next = c2;
       c2->next = NULL;

       /* Set names for the columns and write them out. */
       c1->name = "COUNTER";
       c2->name = "VALUE";
       gal_table_write(c1, NULL, GAL_TABLE_FORMAT_BFITS, outname);

       /* The names weren't allocated, so to avoid cleaning-up problems,
        * we'll set them to NULL. */
       c1->name = c2->name = NULL;

       /* Clean up and return.  */
       gal_data_free(c1);
       gal_data_free(c2);
       gal_list_data_free(columns);
       gal_list_str_free(column_ids, 0); /* strings weren't allocated. */
       return EXIT_SUCCESS;
     }


File: gnuastro.info,  Node: Developing,  Next: Gnuastro programs list,  Prev: Library,  Up: Top

11 Developing
*************

The basic idea of GNU Astronomy Utilities is for an interested
astronomer to be able to easily understand the code of any of the
programs or libraries, be able to modify the code if s/he feels there is
an improvement and finally, to be able to add new programs or libraries
for their own benefit, and the larger community if they are willing to
share it.  In short, we hope that at least from the software point of
view, the “obscurantist faith in the expert’s special skill and in his
personal knowledge and authority” can be broken, see *note Science and
its tools::.  With this aim in mind, Gnuastro was designed to have a
very basic, simple, and easy to understand architecture for any
interested inquirer.

   This chapter starts with very general design choices, in particular
*note Why C:: and *note Program design philosophy::.  It will then get a
little more technical about the Gnuastro code and file/directory
structure in *note Coding conventions:: and *note Program source::.
*note The TEMPLATE program:: discusses a minimal (and working) template
to help in creating new programs or easier learning of a program’s
internal structure.  Some other general issues about documentation,
building and debugging are then discussed.  This chapter concludes with
how you can learn about the development and get involved in *note
Gnuastro project webpage::, *note Developing mailing lists:: and *note
Contributing to Gnuastro::.

* Menu:

* Why C::                       Why Gnuastro is designed in C.
* Program design philosophy::   General ideas behind the package structure.
* Coding conventions::          Gnuastro coding conventions.
* Program source::              Conventions for the code.
* Documentation::               Documentation is an integral part of Gnuastro.
* Building and debugging::      Build and possibly debug during development.
* Test scripts::                Understanding the test scripts.
* Developer's checklist::       Checklist to finalize your changes.
* Gnuastro project webpage::    Central hub for Gnuastro activities.
* Developing mailing lists::    Stay up to date with Gnuastro’s development.
* Contributing to Gnuastro::    Share your changes with all users.


File: gnuastro.info,  Node: Why C,  Next: Program design philosophy,  Prev: Developing,  Up: Developing

11.1 Why C programming language?
================================

Currently the programming language that is most commonly used in
scientific applications is C++(1), Python(2), and Julia(3) (which is a
newcomer but swiftly gaining ground).  One of the main reasons behind
this choice is their high-level abstractions.  However, GNU Astronomy
Utilities is fully written in the C programming language(4).  The
reasons can be summarized with simplicity, portability and
efficiency/speed.  All three are very important in a scientific software
and we will discuss them below.

   Simplicity can best be demonstrated in a comparison of the main books
of C++ and C. The “C programming language”(5) book, written by the
authors of C, is only 286 pages and covers a very good fraction of the
language, it has also remained unchanged from 1988.  C is the main
programming language of nearly all operating systems and there is no
plan of any significant update.  On the other hand, the most recent “C++
programming language”(6) book, also written by its author, has 1366
pages and its fourth edition came out in 2013!  As discussed in *note
Science and its tools::, it is very important for other scientists to be
able to readily read the code of a program at their will with minimum
requirements.

   In C++, inheriting objects in the object oriented programming
paradigm and their internal functions make the code very easy to write
for a programmer who is deeply invested in those objects and understands
all their relations well.  But it simultaneously makes reading the
program for a first time reader (a curious scientist who wants to know
only how a small step was done) extremely hard.  Before understanding
the methods, the scientist has to invest a lot of time and energy in
understanding those objects and their relations.  But in C, everything
is done with basic language types for example ‘int’s or ‘float’s and
their pointers to define arrays.  So when an outside reader is only
interested in one part of the program, that part is all they have to
understand.

   Recently it is also becoming common to write scientific software in
Python, or a combination of it with C or C++.  Python is a high level
scripting language which doesn’t need compilation.  It is very useful
when you want to do something on the go and don’t want to be halted by
the troubles of compiling, linking, memory checking, etc.  When the
datasets are small and the job is temporary, this ability of Python is
great and is highly encouraged.  A very good example might be plotting,
in which Python is undoubtedly one of the best.

   But as the data sets increase in size and the processing becomes more
complicated, the speed of Python scripts significantly decrease.  So
when the program doesn’t change too often and is widely used in a large
community, mostly on large data sets (like astronomical images), using
Python will waste a lot of valuable research-hours.  It is possible to
wrap C or C++ functions with Python to fix the speed issue.  But this
creates further complexity, because the interested scientist has to
master two programming languages and their connection (which is not
trivial).

   Like C++, Python is object oriented, so as explained above, it needs
a high level of experience with that particular program to reasonably
understand its inner workings.  To make things worse, since it is mainly
for on-the-go programming(7), it can undergo significant changes.  One
recent example is how Python 2.x and Python 3.x are not compatible.
Lots of research teams that invested heavily in Python 2.x cannot
benefit from Python 3.x or future versions any more.  Some converters
are available, but since they are automatic, lots of complications might
arise in the conversion(8).

   If a research project begins using Python 3.x today, there is no
telling how compatible their investments will be when Python 4.x or 5.x
will come out.  This stems from the core principles of Python, which are
very useful when you look in the ‘on the go’ basis as described before
and not future usage.  Reproducibility (ability to run the code in the
future) is a core principal of any scientific result, or the software
that produced that result.  Rebuilding all the dependencies of a
software in an obsolete language is not easy.  Future-proof code (as
long as current operating systems will be used) is written in C.

   The portability of C is best demonstrated by the fact that both C++
and Python are part of the C-family of programming languages which also
include Julia, Java, Perl, and many other languages.  C libraries can be
immediately included in C++, and it is easy to write wrappers for them
in all C-family programming languages.  This will allow other scientists
to benefit from C libraries using any C-family language that they
prefer.  As a result, Gnuastro’s library is already usable in C and C++,
and wrappers will be(9) added for higher-level languages like Python,
Julia and Java.

   The final reason was speed.  This is another very important aspect of
C which is not independent of simplicity (first reason discussed above).
The abstractions provided by the higher-level languages (which also
makes learning them harder for a newcomer) comes at the cost of speed.
Since C is a low-level language(10) (closer to the hardware), it is much
less complex for both the human reader _and_ the computer.  The benefits
of simplicity for a human were discussed above.  Simplicity for the
computer translates into more efficient (faster) programs.  This creates
a much closer relation between the scientist/programmer (or their
program) and the actual data and processing.  The GNU coding
standards(11) also encourage the use of C over all other languages when
generality of usage and “high speed” is desired.

   ---------- Footnotes ----------

   (1) <https://isocpp.org/>

   (2) <https://www.python.org/>

   (3) <https://julialang.org/>

   (4) <https://en.wikipedia.org/wiki/C_(programming_language)>

   (5) Brian Kernighan, Dennis Ritchie.  _The C programming language_.
Prentice Hall, Inc., Second edition, 1988.  It is also commonly known as
K&R and is based on the ANSI C and ISO C90 standards.

   (6) Bjarne Stroustrup.  _The C++ programming language_.
Addison-Wesley Professional; 4 edition, 2013.

   (7) Note that Python is good for fast programming, not fast programs.

   (8) For example see Jenness (2017) (https://arxiv.org/abs/1712.00461)
which describes how LSST is managing the transition.

   (9) <http://savannah.gnu.org/task/?13786>

   (10) Low-level languages are those that directly operate the hardware
like assembly languages.  So C is actually a high-level language, but it
can be considered one of the lowest-level languages among all high-level
languages.

   (11) <http://www.gnu.org/prep/standards/>


File: gnuastro.info,  Node: Program design philosophy,  Next: Coding conventions,  Prev: Why C,  Up: Developing

11.2 Program design philosophy
==============================

The core processing functions of each program (and all libraries) are
written mostly with the basic ISO C90 standard.  We do make lots of use
of the GNU additions to the C language in the GNU C library(1), but
these functions are mainly used in the user interface functions (reading
your inputs and preparing them prior to or after the analysis).  The
actual algorithms, which most scientists would be more interested in,
are much more closer to ISO C90.  For this reason, program source files
that deal with user interface issues and those doing the actual
processing are clearly separated, see *note Program source::.  If
anything particular to the GNU C library is used in the processing
functions, it is explained in the comments in between the code.

   All the Gnuastro programs provide very low level and modular
operations (modeled on GNU Coreutils).  Almost all the basic
command-line programs like ‘ls’, ‘cp’ or ‘rm’ on GNU/Linux operating
systems are part of GNU Coreutils.  This enables you to use shell
scripting languages (for example GNU Bash) to operate on a large number
of files or do very complex things through the creative combinations of
these tools that the authors had never dreamed of.  We have put a few
simple examples in *note Tutorials::.

   For example all the analysis output can be saved as ASCII tables
which can be fed into your favorite plotting program to inspect
visually.  Python’s Matplotlib is very useful for fast plotting of the
tables to immediately check your results.  If you want to include the
plots in a document, you can use the PGFplots package within LaTeX, no
attempt is made to include such operations in Gnuastro.  In short, Bash
can act as a glue to connect the inputs and outputs of all these various
Gnuastro programs (and other programs) in any fashion.  Of course,
Gnuastro’s programs are just front-ends to the main workhorse (*note
Gnuastro library::), allowing a user to create their own programs (for
example with *note BuildProgram::).  So once the functions within
programs become mature enough, they will be moved within the libraries
for even more general applications.

   The advantage of this architecture is that the programs become small
and transparent: the starting and finishing point of every program is
clearly demarcated.  For nearly all operations on a modern computer
(fast file input-output) with a modest level of complexity, the
read/write speed is insignificant compared to the actual processing a
program does.  Therefore the complexity which arises from sharing memory
in a large application is simply not worth the speed gain.  Gnuastro’s
design is heavily influenced from Eric Raymond’s “The Art of Unix
Programming”(2) which beautifully describes the design philosophy and
practice which lead to the success of Unix-based operating systems(3).

   ---------- Footnotes ----------

   (1) Gnuastro uses many GNU additions to the C library.  However,
thanks to the GNU Portability library (Gnulib) which is included in the
Gnuastro tarball, users of non-GNU/Linux operating systems can also
benefit from all these features when using Gnuastro.

   (2) Eric S. Raymond, 2004, _The Art of Unix Programming_,
Addison-Wesley Professional Computing Series.

   (3) KISS principle: Keep It Simple, Stupid!


File: gnuastro.info,  Node: Coding conventions,  Next: Program source,  Prev: Program design philosophy,  Up: Developing

11.3 Coding conventions
=======================

In Gnuastro, we try our best to follow the GNU coding standards.  Added
to those, Gnuastro defines the following conventions.  It is very
important for readability that the whole package follows the same
convention.

   • The code must be easy to read by eye.  So when the order of several
     lines within a function does not matter (for example when defining
     variables at the start of a function).  You should put the lines in
     the order of increasing length and group the variables with similar
     types such that this half-pyramid of declarations becomes most
     visible.  If the reader is interested, a simple search will show
     them the variable they are interested in.  However, this visual aid
     greatly helps in general inspections of the code and help the
     reader get a grip of the function’s processing.

   • A function that cannot be fully displayed (vertically) in your
     monitor is probably too long and may be more useful if it is broken
     up into multiple functions.  40 lines is usually a good reference.
     When the start and end of a function are clearly visible in one
     glance, the function is much more easier to understand.  This is
     most important for low-level functions (which usually define a lot
     of variables).  Low-level functions do most of the processing, they
     will also be the most interesting part of a program for an
     inquiring astronomer.  This convention is less important for higher
     level functions that don’t define too many variables and whose only
     purpose is to run the lower-level functions in a specific order and
     with checks.

     In general you can be very liberal in breaking up the functions
     into smaller parts, the GNU Compiler Collection (GCC) will
     automatically compile the functions as inline functions when the
     optimizations are turned on.  So you don’t have to worry about
     decreasing the speed.  By default Gnuastro will compile with the
     ‘-O3’ optimization flag.

   • All Gnuastro hand-written text files (C source code, Texinfo
     documentation source, and version control commit messages) should
     not exceed *75* characters per line.  Monitors today are certainly
     much wider, but with this limit, reading the functions becomes much
     more easier.  Also for the developers, it allows multiple files (or
     multiple views of one file) to be displayed beside each other on
     wide monitors.

     Emacs’s buffers are excellent for this capability, setting a buffer
     width of 80 with ‘<C-u 80 C-x 3>’ will allow you to view and work
     on several files or different parts of one file using the wide
     monitors common today.  Emacs buffers can also be used as a shell
     prompt and compile the program (with <M-x compile>), and 80
     characters is the default width in most terminal emulators.  If you
     use Emacs, Gnuastro sets the 75 character ‘fill-column’ variable
     automatically for you, see cartouche below.

     For long comments you can use press <Alt-q> in Emacs to separate
     them into separate lines automatically.  For long literal strings,
     you can use the fact that in C, two strings immediately after each
     other are concatenated, for example ‘"The first part, " "and the
     second part."’.  Note the space character in the end of the first
     part.  Since they are now separated, you can easily break a long
     literal string into several lines and adhere to the maximum 75
     character line length policy.

   • The headers required by each source file (ending with ‘.c’) should
     be defined inside of it.  All the headers a complete program needs
     should _not_ be stacked in another header to include in all source
     files (for example ‘main.h’).  Although most ‘professional’
     programmers choose this single header method, Gnuastro is primarily
     written for professional/inquisitive astronomers (who are generally
     amateur programmers).  The list of header files included provides
     valuable general information and helps the reader.  ‘main.h’ may
     only include the header file(s) that define types that the main
     program structure needs, see ‘main.h’ in *note Program source::.
     Those particular header files that are included in ‘main.h’ can of
     course be ignored (not included) in separate source files.

   • The headers should be classified (by an empty line) into separate
     groups:

       1. ‘#include <config.h>’: This must be the first code line (not
          commented or blank) in each source file _within Gnuastro_.  It
          sets macros that the GNU Portability Library (Gnulib) will use
          for a unified environment (GNU C Library), even when the user
          is building on a system that doesn’t use the GNU C library.

       2. The C library header files, for example ‘stdio.h’, ‘stdlib.h’,
          or ‘math.h’.
       3. Installed library header files, including Gnuastro’s installed
          headers (for example ‘cfitsio.h’ or ‘gsl/gsl_rng.h’, or
          ‘gnuastro/fits.h’).
       4. Gnuastro’s internal headers (that are not installed), for
          example ‘gnuastro-internal/options.h’.
       5. For programs, the ‘main.h’ file (which is needed by the next
          group of headers).
       6. That particular program’s header files, for example
          ‘mkprof.h’, or ‘noisechisel.h’.

     As much as order does not matter when you include the header of
     each group, sort them by length, as described above.

   • All function names, variables, etc should be in lower case.  Macros
     and constant global ‘enum’s should be in upper case.

   • For the naming of exported header files, functions, variables,
     macros, and library functions, we adopt similar conventions to
     those used by the GNU Scientific Library (GSL)(1). In particular,
     in order to avoid clashes with the names of functions and variables
     coming from other libraries the name-space ‘‘gal_’’ is prefixed to
     them.  GAL stands for _G_NU _A_stronomy _L_ibrary.

   • All installed header files should be in the ‘lib/gnuastro’
     directory (under the top Gnuastro source directory).  After
     installation, they will be put in the ‘$prefix/include/gnuastro’
     directory (see *note Installation directory:: for ‘$prefix’).
     Therefore with this convention Gnuastro’s headers can be included
     in internal (to Gnuastro) and external (a library user) source
     files with the same line
          # include <gnuastro/headername.h>
     Note that the GSL convention for header file names is
     ‘gsl_specialname.h’, so your include directive for a GSL header
     must be something like ‘#include <gsl/gsl_specialname.h>’.
     Gnuastro doesn’t follow this GSL guideline because of the repeated
     ‘gsl’ in the include directive.  It can be confusing and cause bugs
     for beginners.  All Gnuastro (and GSL) headers must be located
     within a unique directory and will not be mixed with other headers.
     Therefore the ‘‘gsl_’’ prefix to the header file names is
     redundant(2).

   • All installed functions and variables should also include the
     base-name of the file in which they are defined as prefix, using
     underscores to separate words(3).  The same applies to exported
     macros, but in upper case.  For example in Gnuastro’s top source
     directory, the prototype of function ‘gal_box_border_from_center’
     is in ‘lib/gnuastro/box.h’, and the macro ‘GAL_POLYGON_MAX_CORNERS’
     is defined in ‘lib/gnuastro/polygon.h’.

     This is necessary to give any user (who is not familiar with the
     library structure) the ability to follow the code.  This convention
     does make the function names longer (a little harder to write), but
     the extra documentation it provides plays an important role in
     Gnuastro and is worth the cost.

   • There should be no trailing white space in a line.  To do this
     automatically every time you save a file in Emacs, add the
     following line to your ‘~/.emacs’ file.
          (add-hook 'before-save-hook 'delete-trailing-whitespace)

   • There should be no tabs in the indentation(4).

   • Individual, contextually similar, functions in a source file are
     separated by 5 blank lines to be easily seen to be related in a
     group when parsing the source code by eye.  In Emacs you can use
     <CTRL-u 5 CTRL-o>.

   • One group of contextually similar functions in a source file is
     separated from another with 20 blank lines.  In Emacs you can use
     <CTRL-u 20 CTRL-o>.  Each group of functions has short descriptive
     title of the functions in that group.  This title is surrounded by
     asterisks (<*>) to make it clearly distinguishable.  Such
     contextual grouping and clear title are very important for easily
     understanding the code.

   • Always read the comments before the patch of code under it.
     Similarly, try to add as many comments as you can regarding every
     patch of code.  Effectively, we want someone to get a good feeling
     of the steps, without having to read the C code and only by reading
     the comments.  This follows similar principles as Literate
     programming (https://en.wikipedia.org/wiki/Literate_programming).

   The last two conventions are not common and might benefit from a
short discussion here.  With a good experience in advanced text editor
operations, the last two are redundant for a professional developer.
However, recall that Gnuastro aspires to be friendly to unfamiliar, and
inexperienced (in programming) eyes.  In other words, as discussed in
*note Science and its tools::, we want the code to appear welcoming to
someone who is completely new to coding (and text editors) and only has
a scientific curiosity.

   Newcomers to coding and development, who are curious enough to
venture into the code, will probably not be using (or have any knowledge
of) advanced text editors.  They will see the raw code in the webpage or
on a simple text editor (like Gedit) as plain text.  Trying to learn and
understand a file with dense functions that are all spaced with one or
two blank lines can be very taunting for a newcomer.  But when they
scroll through the file and see clear titles and meaningful spaces for
similar functions, we are helping them find and focus on the part they
are most interested in sooner and easier.

*GNU Emacs, the recommended text editor:* GNU Emacs is an extensible and
easily customizable text editor which many programmers rely on for
developing due to its countless features.  Among them, it allows
specification of certain settings that are applied to a single file or
to all files in a directory and its sub-directories.  In order to
harmonize code coming from different contributors, Gnuastro comes with a
‘.dir-locals.el’ file which automatically configures Emacs to satisfy
most of the coding conventions above when you are using it within
Gnuastro’s directories.  Thus, Emacs users can readily start hacking
into Gnuastro.  If you are new to developing, we strongly recommend this
editor.  Emacs was the first project released by GNU and is still one of
its flagship projects.  Some resources can be found at:

Official manual
     At <https://www.gnu.org/software/emacs/manual/emacs.html>.  This is
     a great and very complete manual which is being improved for over
     30 years and is the best starting point to learn it.  It just
     requires a little patience and practice, but rest assured that you
     will be rewarded.  If you install Emacs, you also have access to
     this manual on the command-line with the following command (see
     *note Info::).

          $ info emacs

A guided tour of emacs
     At <https://www.gnu.org/software/emacs/tour/>.  A short visual tour
     of Emacs, officially maintained by the Emacs developers.

Unofficial mini-manual
     At <https://tuhdo.github.io/emacs-tutor.html>.  A shorter manual
     which contains nice animated images of using Emacs.

   ---------- Footnotes ----------

   (1) <https://www.gnu.org/software/gsl/design/gsl-design.html#SEC15>

   (2) For GSL, this prefix has an internal technical application: GSL’s
architecture mixes installed and not-installed headers in the same
directory.  This prefix is used to identify their installation status.
Therefore this filename prefix in GSL a technical internal issue (for
developers, not users).

   (3) The convention to use underscores to separate words, called
“snake case” (or “snake_case”).  This is also recommended by the GNU
coding standards.

   (4) If you use Emacs, Gnuastro’s ‘.dir-locals.el’ file will
automatically never use tabs for indentation.  To make this a default in
all your Emacs sessions, you can add the following line to your
‘~/.emacs’ file: ‘(setq-default indent-tabs-mode nil)’


File: gnuastro.info,  Node: Program source,  Next: Documentation,  Prev: Coding conventions,  Up: Developing

11.4 Program source
===================

Besides the fact that all the programs share some functions that were
explained in *note Library::, everything else about each program is
completely independent.  Recall that Gnuastro is written for an active
astronomer/scientist (not a passive one who just uses a software).  It
must thus be easily navigable.  Hence there are fixed source files (that
contain fixed operations) that must be present in all programs, these
are discussed fully in *note Mandatory source code files::.  To easily
understand the explanations in this section you can use *note The
TEMPLATE program:: which contains the bare minimum code for one working
program.  This template can also be used to easily add new utilities:
just copy and paste the directory and change ‘TEMPLATE’ with your
program’s name.

* Menu:

* Mandatory source code files::  Description of files common to all programs.
* The TEMPLATE program::        Template for easy creation of a new program.


File: gnuastro.info,  Node: Mandatory source code files,  Next: The TEMPLATE program,  Prev: Program source,  Up: Program source

11.4.1 Mandatory source code files
----------------------------------

Some programs might need lots of source files and if there is no fixed
convention, navigating them can become very hard for a new inquirer into
the code.  The following source files exist in every program’s source
directory (which is located in ‘bin/progname’).  For small programs,
these files are enough.  Larger programs will need more files and
developers are encouraged to define any number of new files.  It is just
important that the following list of files exist and do what is
described here.  When creating other source files, please choose
filenames that are a complete single word: don’t abbreviate
(abbreviations are cryptic).  For a minimal program containing all these
files, see *note The TEMPLATE program::.

‘main.c’
     Each executable has a ‘main’ function, which is located in
     ‘main.c’.  Therefore this file is the starting point when reading
     any program’s source code.  No actual processing functions must be
     defined in this file, the function(s) in this file are only meant
     to connect the most high level steps of each program.  Generally,
     ‘main’ will first call the top user interface function to read user
     input and make all the preparations.  Then it will pass control to
     the top processing function for that program.  The functions to do
     both these jobs must be defined in other source files.

‘main.h’
     All the major parameters which will be used in the program must be
     stored in a structure which is defined in ‘main.h’.  The name of
     this structure is usually ‘prognameparams’, for example
     ‘cropparams’ or ‘noisechiselparams’.  So ‘#include "main.h"’ will
     be a staple in all the source codes of the program.  It is also
     regularly the first (and only) argument most of the program’s
     functions which greatly helps in readability.

     Keeping all the major parameters of a program in this structure has
     the major benefit that most functions will only need one argument:
     a pointer to this structure.  This will significantly facilitate
     the job of the programmer, the inquirer and the computer.  All the
     programs in Gnuastro are designed to be low-level, small and
     independent parts, so this structure should not get too large.

     The main root structure of all programs contains at least one
     instance of the ‘gal_options_common_params’ structure.  This
     structure will keep the values to all common options in Gnuastro’s
     programs (see *note Common options::).  This top root structure is
     conveniently called ‘p’ (short for parameters) by all the functions
     in the programs and the common options parameters within it are
     called ‘cp’.  With this convention any reader can immediately
     understand where to look for the definition of one parameter.  For
     example you know that ‘p->cp->output’ is in the common parameters
     while ‘p->threshold’ is in the program’s parameters.

     With this basic root structure, source code of functions can
     potentially become full of structure de-reference operators (‘->’)
     which can make the code very unreadable.  In order to avoid this,
     whenever a structure element is used more than a couple of times in
     a function, a variable of the same type and with the same name (so
     it can be searched) as the desired structure element should be
     defined with the value of the root structure inside of it in
     definition time.  Here is an example.

          char *hdu=p->cp.hdu;
          float threshold=p->threshold;

‘args.h’
     The options particular to each program are defined in this file.
     Each option is defined by a block of parameters in
     ‘program_options’.  These blocks are all you should modify in this
     file, leave the bottom group of definitions untouched.  These are
     fed directly into the GNU C library’s Argp facilities and it is
     recommended to have a look at that for better understand what is
     going on, although this is not required here.

     Each element of the block defining an option is described under
     ‘argp_option’ in ‘bootstrapped/lib/argp.h’ (from Gnuastro’s top
     source file).  Note that the last few elements of this structure
     are Gnuastro additions (not documented in the standard Argp
     manual).  The values to these last elements are defined in
     ‘lib/gnuastro/type.h’ and ‘lib/gnuastro-internal/options.h’ (from
     Gnuastro’s top source directory).

‘ui.h’
     Besides declaring the exported functions of ‘ui.c’, this header
     also keeps the “key”s to every program-specific option.  The first
     class of keys for the options that have a short-option version
     (single letter, see *note Options::).  The character that is
     defined here is the option’s short option name.  The list of
     available alphabet characters can be seen in the comments.  Recall
     that some common options also take some characters, for those, see
     ‘lib/gnuastro-internal/options.h’.

     The second group of options are those that don’t have a short
     option alternative.  Only the first in this group needs a value
     (‘1000’), the rest will be given a value by C’s ‘enum’ definition,
     so the actual value is irrelevant and must never be used, always
     use the name.

‘ui.c’
     Everything related to reading the user input arguments and options,
     checking the configuration files and checking the consistency of
     the input parameters before the actual processing is run should be
     done in this file.  Since most functions are the same, with only
     the internal checks and structure parameters differing.  We
     recommend going through the ‘ui.c’ of *note The TEMPLATE program::,
     or several other programs for a better understanding.

     The most high-level function in ‘ui.c’ is named
     ‘ui_read_check_inputs_setup’.  It accepts the raw command-line
     inputs and a pointer to the root structure for that program (see
     the explanation for ‘main.h’).  This is the function that ‘main’
     calls.  The basic idea of the functions in this file is that the
     processing functions should need a minimum number of such checks.
     With this convention an inquirer who only wants to understand only
     one part (mostly the processing part and not user input details and
     sanity checks) of the code can easily do so in the later files.  It
     also makes all the errors related to input appear before the
     processing begins which is more convenient for the user.

‘progname.c, progname.h’
     The high-level processing functions in each program are in a file
     named ‘progname.c’, for example ‘crop.c’ or ‘noisechisel.c’.  The
     function within these files which ‘main’ calls is also named after
     the program, for example

          void
          crop(struct cropparams *p)

     or

          void
          noisechisel(struct noisechiselparams *p)

     In this manner, if an inquirer is interested the processing steps,
     they can immediately come and check this file for the first
     processing step without having to go through ‘main.c’ and ‘ui.c’
     first.  In most situations, any failure in any step of the programs
     will result in an informative error message and an immediate abort
     in the program.  So there is usually no need for return values.
     Under more complicated situations where a return value might be
     necessary, ‘void’ will be replaced with an ‘int’ in the examples
     above.  This value must be directly returned by ‘main’, so it has
     to be an ‘int’.

‘authors-cite.h’
     This header file keeps the global variable for the program authors
     and its BibTeX record for citation.  They are used in the outputs
     of the common options ‘--version’ and ‘--cite’, see *note Operating
     mode options::.


File: gnuastro.info,  Node: The TEMPLATE program,  Prev: Mandatory source code files,  Up: Program source

11.4.2 The TEMPLATE program
---------------------------

The extra creativity offered by libraries comes at a cost: you have to
actually write your ‘main’ function and get your hands dirty in managing
user inputs: are all the necessary parameters given a value?  is the
input in the correct format?  do the options and the inputs correspond?
and many other similar checks.  So when an operation has well-defined
inputs and outputs and is commonly needed, it is much more worthwhile to
simply do use all the great features that Gnuastro has already defined
for such operations.

   To make it easier to learn/apply the internal program infra-structure
discussed in *note Mandatory source code files::, in the *note Version
controlled source::, Gnuastro ships with a template program .  This
template program is not available in the Gnuastro tarball so it doesn’t
confuse people using the tarball.  The ‘bin/TEMPLATE’ directory in
Gnuastro’s Git repository contains the bare-minimum files necessary to
define a new program and all the basic/necessary files/functions are
pre-defined there.

   Below you can see a list of initial steps to take for customizing
this template.  We just assume that after cloning Gnuastro’s history,
you have already bootstrapped Gnuastro, if not, please see *note
Bootstrapping::.

  1. Select a name for your new program (for example ‘myprog’).

  2. Copy the ‘TEMPLATE’ directory to a directory with your program’s
     name:
          $ cp -R bin/TEMPLATE bin/myprog

  3. As with all source files in Gnuastro, all the files in template
     also have a copyright notice at their top.  Open all the files and
     correct these notices: 1) The first line contains a single-line
     description of the program.  2) In the second line only the name or
     your program needs to be fixed and 3) Add your name and email as a
     “Contributing author”.  As your program grows, you will need to add
     new files, don’t forget to add this notice in those new files too,
     just put your name and email under “Original author” and correct
     the copyright years.

  4. Open ‘configure.ac’ in the top Gnuastro source.  This file manages
     the operations that are done when a user runs ‘./configure’.  Going
     down the file, you will notice repetitive parts for each program.
     You will notice that the program names follow an alphabetic
     ordering in each part.  There is also a commented line/patch for
     the ‘TEMPLATE’ program in each part.  You can copy one line/patch
     (from the program above or below your desired name for example) and
     paste it in the proper place for your new program.  Then correct
     the names of the copied program to your new program name.  There
     are multiple places where this has to be done, so be patient and go
     down to the bottom of the file.  Ultimately add
     ‘bin/myprog/Makefile’ to ‘AC_CONFIG_FILES’, only here the ordering
     depends on the length of the name (it isn’t alphabetical).

  5. Open ‘Makefile.am’ in the top Gnuastro source.  Similar to the
     previous step, add your new program similar to all the other
     programs.  Here there are only two places: 1) at the top where we
     define the conditionals (three lines per program), and 2)
     immediately under it as part of the value for ‘SUBDIRS’.

  6. Open ‘doc/Makefile.am’ and similar to ‘Makefile.am’ (above), add
     the proper entries for the man-page of your program to be created
     (here, the variable that keeps all the man-pages to be created is
     ‘dist_man_MANS’).  Then scroll down and add a rule to build the
     man-page similar to the other existing rules (in alphabetical
     order).  Don’t forget to add a short one-line description here, it
     will be displayed on top of the man-page.

  7. Change ‘TEMPLATE.c’ and ‘TEMPLATE.h’ to ‘myprog.c’ and ‘myprog.h’
     in the file names:

          $ cd bin/myprog
          $ mv TEMPLATE.c myprog.c
          $ mv TEMPLATE.h myprog.h

  8. Correct all occurrences of ‘TEMPLATE’ in the input files to
     ‘myprog’ (in short or long format).  You can get a list of all
     occurrences with the following command.  If you use Emacs, it will
     be able to parse the Grep output and open the proper file and line
     automatically.  So this step can be very easy.

          $ grep --color -nHi -e template *

  9. Run the following commands to re-build the configuration and build
     system, and then to configure and build Gnuastro (which now
     includes your exciting new program).
          $ autoreconf -f
          $ ./configure
          $ make

  10. You are done!  You can now start customizing your new program to
     do your special processing.  When its complete, just don’t forget
     to add checks also, so it can be tested at least once on a user’s
     system with ‘make check’, see *note Test scripts::.  Finally, if
     you would like to share it with all Gnuastro users, inform us so we
     merge it into Gnuastro’s main history.


File: gnuastro.info,  Node: Documentation,  Next: Building and debugging,  Prev: Program source,  Up: Developing

11.5 Documentation
==================

Documentation (this book) is an integral part of Gnuastro (see *note
Science and its tools::).  Documentation is not considered a separate
project and must be written by its developers.  Users can make
edits/corrections, but the initial writing must be by the developer.
So, no change is considered valid for implementation unless the
respective parts of the book have also been updated.  The following
procedure can be a good suggestion to take when you have a new idea and
are about to start implementing it.

   The steps below are not a requirement, the important thing is that
when you send your work to be included in Gnuastro, the book and the
code have to both be fully up-to-date and compatible, with the purpose
of the update very clearly explained.  You can follow any strategy you
like, the following strategy was what we have found to be most useful
until now.

  1. Edit the book and fully explain your desired change, such that your
     idea is completely embedded in the general context of the book with
     no sense of discontinuity for a first time reader.  This will allow
     you to plan the idea much more accurately and in the general
     context of Gnuastro (a particular program or library).  Later on,
     when you are coding, this general context will significantly help
     you as a road-map.

     A very important part of this process is the program/library
     introduction.  These first few paragraphs explain the purposes of
     the program or library and are fundamental to Gnuastro.  Before
     actually starting to code, explain your idea’s purpose thoroughly
     in the start of the respective/new section you wish to work on.
     While actually writing its purpose for a new reader, you will
     probably get some valuable and interesting ideas that you hadn’t
     thought of before.  This has occurred several times during the
     creation of Gnuastro.

     If an introduction already exists, embed or blend your idea’s
     purpose with the existing introduction.  We emphasize that doing
     this is equally useful for you (as the programmer) as it is useful
     for the user (reader).  Recall that the purpose of a program is
     very important, see *note Program design philosophy::.

     As you have already noticed for every program/library, it is very
     important that the basics of the science and technique be explained
     in separate subsections prior to the ‘Invoking Programname’
     subsection.  If you are writing a new program or your addition to
     an existing program involves a new concept, also include such
     subsections and explain the concepts so a person completely
     unfamiliar with the concepts can get a general initial
     understanding.  You don’t have to go deep into the details, just
     enough to get an interested person (with absolutely no background)
     started with some good pointers/links to where they can continue
     studying if they are more interested.  If you feel you can’t do
     that, then you have probably not understood the concept yourself.
     If you feel you don’t have the time, then think about yourself as
     the reader in one year: you will forget almost all the details, so
     now that you have done all the theoretical preparations, add a few
     more hours and document it.  Therefore in one year, when you find a
     bug or want to add a new feature, you don’t have to prepare as
     much.  Have in mind that your only limitation in length is the
     fatigue of the reader after reading a long text, nothing else.  So
     as long as you keep it relevant/interesting for the reader, there
     is no page number limit/cost.

     It might also help if you start discussing the usage of your idea
     in the ‘Invoking ProgramName’ subsection (explaining the options
     and arguments you have in mind) at this stage too.  Actually
     starting to write it here will really help you later when you are
     coding.

  2. After you have finished adding your initial intended plan to the
     book, then start coding your change or new program within the
     Gnuastro source files.  While you are coding, you will notice that
     somethings should be different from what you wrote in the book
     (your initial plan).  So correct them as you are actually coding,
     but don’t worry too much about missing a few things (see the next
     step).

  3. After your work has been fully implemented, read the section
     documentation from the start and see if you didn’t miss any change
     in the coding and to see if the context is fairly continuous for a
     first time reader (who hasn’t seen the book or had known Gnuastro
     before you made your change).

  4. If the change is notable, also update the ‘NEWS’ file.


File: gnuastro.info,  Node: Building and debugging,  Next: Test scripts,  Prev: Documentation,  Up: Developing

11.6 Building and debugging
===========================

To build the various programs and libraries in Gnuastro, the GNU build
system is used which defines the steps in *note Quick start::.  It
consists of GNU Autoconf, GNU Automake and GNU Libtool which are
collectively known as GNU Autotools.  They provide a very portable
system to check the hosts environment and compile Gnuastro based on
that.  They also make installing everything in their standard places
very easy for the programmer.  Most of the small caps files that you see
in the top source directory of the tarball are created by these three
tools (see *note Version controlled source::).  To facilitate the
building and testing of your work during development, Gnuastro comes
with two useful scripts:

‘developer-build’
     This is more fully described in *note Configure and build in RAM::.
     During development, you will usually run this command only once (at
     the start of your work).

‘tests/during-dev.sh’
     This script is designed to be run each time you make a change and
     want to test your work (with some possible input and output).  The
     script itself is heavily commented and thoroughly describes the
     best way to use it, so we won’t repeat it here.

     As a short summary: you specify the build directory, an output
     directory (for the built program to be run in, and also contains
     the inputs), the program’s short name and the arguments and options
     that it should be run with.  This script will then build Gnuastro,
     go to the output directory and run the built executable from there.
     One option for the output directory might be your desktop, so you
     can easily see the output files and delete them when you are
     finished.  The main purpose of these scripts is to keep your source
     directory clean and facilitate your development.

   By default all the programs are compiled with optimization flags for
increased speed.  A side effect of optimization is that valuable
debugging information is lost.  All the libraries are also linked as
shared libraries by default.  Shared libraries further complicate the
debugging process and significantly slow down the compilation (the
‘make’ command).  So during development it is recommended to configure
Gnuastro as follows:

     $ ./configure --enable-debug

In ‘developer-build’ you can ask for this behavior through the ‘--debug’
option, see *note Separate build and source directories::.

   In order to understand the building process, you can go through the
Autoconf, Automake and Libtool manuals, like all GNU manuals they
provide both a great tutorial and technical documentation.  The “A small
Hello World” section in Automake’s manual (in chapter 2) can be a good
starting guide after you have read the separate introductions.


File: gnuastro.info,  Node: Test scripts,  Next: Developer's checklist,  Prev: Building and debugging,  Up: Developing

11.7 Test scripts
=================

As explained in *note Tests::, for every program some simple tests are
written to check the various independent features of the program.  All
the tests are placed in the ‘tests/’ directory.  The ‘tests/prepconf.sh’
script is the first ‘test’ that will be run.  It will copy all the
configuration files from the various directories to a ‘tests/.gnuastro’
directory (which it will make) so the various tests can set the default
values.  This script will also make sure the programs don’t go searching
for user and system wide configuration files to avoid the mixing of
values with different Gnuastro version on the system.

   For each program, the tests are placed inside directories with the
program name.  Each test is written as a shell script.  The last line of
this script is the test which runs the program with certain parameters.
The return value of this script determines the fate of the test, see the
“Support for test suites” chapter of the Automake manual for a very nice
and complete explanation.  In every script, two variables are defined at
first: ‘prog’ and ‘execname’.  The first specifies the program name and
the second the location of the executable.

   The most important thing to have in mind about all the test scripts
is that they are run from inside the ‘tests/’ directory in the “build
tree”.  Which can be different from the directory they are stored in
(known as the “source tree”)(1).  This distinction is made by GNU
Autoconf and Automake (which configure, build and install Gnuastro) so
that you can install the program even if you don’t have write access to
the directory keeping the source files.  See the “Parallel build trees
(a.k.a VPATH builds)” in the Automake manual for a nice explanation.

   Because of this, any necessary inputs that are distributed in the
tarball(2), for example the catalogs necessary for checks in
MakeProfiles and Crop, must be identified with the ‘$topsrc’ prefix
instead of ‘../’ (for the top source directory that is unpacked).  This
‘$topsrc’ variable points to the source tree where the script can find
the source data (it is defined in ‘tests/Makefile.am’).  The executables
and other test products were built in the build tree (where they are
being run), so they don’t need to be prefixed with that variable.  This
is also true for images or files that were produced by other tests.

   ---------- Footnotes ----------

   (1) The ‘developer-build’ script also uses this feature to keep the
source and build directories separate (see *note Separate build and
source directories::).

   (2) In many cases, the inputs of a test are outputs of previous
tests, this doesn’t apply to this class of inputs.  Because all outputs
of previous tests are in the “build tree”.


File: gnuastro.info,  Node: Developer's checklist,  Next: Gnuastro project webpage,  Prev: Test scripts,  Up: Developing

11.8 Developer’s checklist
==========================

This is a checklist of things to do after applying your
changes/additions in Gnuastro:

  1. If the change is non-trivial, write test(s) in the
     ‘tests/progname/’ directory to test the change(s)/addition(s) you
     have made.  Then add their file names to ‘tests/Makefile.am’.

  2. Run ‘$ make check’ to make sure everything is working correctly.

  3. Make sure the documentation (this book) is completely up to date
     with your changes, see *note Documentation::.

  4. Commit the change to your issue branch (see *note Production
     workflow:: and *note Forking tutorial::).  Afterwards, run
     Autoreconf to generate the appropriate version number:

          $ autoreconf -f

  5. Finally, to make sure everything will be built, installed and
     checked correctly run the following command (after re-configuring,
     and re-building).  To greatly speed up the process, use multiple
     threads (8 in the example below, change it appropriately)

          $ make distcheck -j8

     This command will create a distribution file (ending with
     ‘.tar.gz’) and try to compile it in the most general cases, then it
     will run the tests on what it has built in its own
     mini-environment.  If ‘$ make distcheck’ finishes successfully,
     then you are safe to send your changes to us to implement or for
     your own purposes.  See *note Production workflow:: and *note
     Forking tutorial::.


File: gnuastro.info,  Node: Gnuastro project webpage,  Next: Developing mailing lists,  Prev: Developer's checklist,  Up: Developing

11.9 Gnuastro project webpage
=============================

Gnuastro’s central management hub
(https://savannah.gnu.org/projects/gnuastro/)(1) is located on GNU
Savannah (https://savannah.gnu.org/)(2).  Savannah is the central
software development management system for many GNU projects.  Through
this central hub, you can view the list of activities that the
developers are engaged in, their activity on the version controlled
source, and other things.  Each defined activity in the development
cycle is known as an ‘issue’ (or ‘item’).  An issue can be a bug (see
*note Report a bug::), or a suggested feature (see *note Suggest new
feature::) or an enhancement or generally any _one_ job that is to be
done.  In Savannah, issues are classified into three categories or
‘tracker’s:

Support
     This tracker is a way that (possibly anonymous) users can get in
     touch with the Gnuastro developers.  It is a complement to the
     bug-gnuastro mailing list (see *note Report a bug::).  Anyone can
     post an issue to this tracker.  The developers will not submit an
     issue to this list.  They will only reassign the issues in this
     list to the other two trackers if they are valid(3).  Ideally (when
     the developers have time to put on Gnuastro, please don’t forget
     that Gnuastro is a volunteer effort), there should be no open items
     in this tracker.

Bugs
     This tracker contains all the known bugs in Gnuastro (problems with
     the existing tools).

Tasks
     The items in this tracker contain the future plans (or new
     features/capabilities) that are to be added to Gnuastro.

All the trackers can be browsed by a (possibly anonymous) visitor, but
to edit and comment on the Bugs and Tasks trackers, you have to be a
registered on Savannah.  When posting an issue to a tracker, it is very
important to choose the ‘Category’ and ‘Item Group’ options accurately.
The first contains a list of all Gnuastro’s programs along with
‘Installation’, ‘New program’ and ‘Webpage’.  The “Item Group” contains
the nature of the issue, for example if it is a ‘Crash’ in the software
(a bug), or a problem in the documentation (also a bug) or a feature
request or an enhancement.

   The set of horizontal links on the top of the page (Starting with
‘Main’ and ‘Homepage’ and finishing with ‘News’) are the easiest way to
access these trackers (and other major aspects of the project) from any
part of the project webpage.  Hovering your mouse over them will open a
drop down menu that will link you to the different things you can do on
each tracker (for example, ‘Submit new’ or ‘Browse’).  When you browse
each tracker, you can use the “Display Criteria” link above the list to
limit the displayed issues to what you are interested in.  The
‘Category’ and ‘Group Item’ (explained above) are a good starting point.

   Any new issue that is submitted to any of the trackers, or any
comments that are posted for an issue, is directly forwarded to the
gnuastro-devel mailing list
(<https://lists.gnu.org/mailman/listinfo/gnuastro-devel>, see *note
Developing mailing lists:: for more).  This will allow anyone interested
to be up to date on the over-all development activity in Gnuastro and
will also provide an alternative (to Savannah) archiving for the
development discussions.  Therefore, it is not recommended to directly
post an email to this mailing list, but do all the activities (for
example add new issues, or comment on existing ones) on Savannah.

*Do I need to be a member in Savannah to contribute to Gnuastro?*  No.

   The full version controlled history of Gnuastro is available for
anonymous download or cloning.  See *note Production workflow:: for a
description of Gnuastro’s Integration-Manager Workflow.  In short, you
can either send in patches, or make your own fork.  If you choose the
latter, you can push your changes to your own fork and inform us.  We
will then pull your changes and merge them into the main project.
Please see *note Forking tutorial:: for a tutorial.

   ---------- Footnotes ----------

   (1) <https://savannah.gnu.org/projects/gnuastro/>

   (2) <https://savannah.gnu.org/>

   (3) Some of the issues registered here might be due to a mistake on
the user’s side, not an actual bug in the program.


File: gnuastro.info,  Node: Developing mailing lists,  Next: Contributing to Gnuastro,  Prev: Gnuastro project webpage,  Up: Developing

11.10 Developing mailing lists
==============================

To keep the developers and interested users up to date with the activity
and discussions within Gnuastro, there are two mailing lists which you
can subscribe to:

‘gnuastro-devel@gnu.org’
(at <https://lists.gnu.org/mailman/listinfo/gnuastro-devel>)

     All the posts made in the support, bugs and tasks discussions of
     *note Gnuastro project webpage:: are also sent to this mailing
     address and archived.  By subscribing to this list you can stay up
     to date with the discussions that are going on between the
     developers before, during and (possibly) after working on an issue.
     All discussions are either in the context of bugs or tasks which
     are done on Savannah and circulated to all interested people
     through this mailing list.  Therefore it is not recommended to post
     anything directly to this mailing list.  Any mail that is sent to
     it from Savannah to this list has a link under the title “Reply to
     this item at:”.  That link will take you directly to the issue
     discussion page, where you can read the discussion history or join
     it.

     While you are posting comments on the Savannah issues, be sure to
     update the meta-data.  For example if the task/bug is not assigned
     to anyone and you would like to take it, change the “Assigned to”
     box, or if you want to report that it has been applied, change the
     status and so on.  All these changes will also be circulated with
     the email very clearly.

‘gnuastro-commits@gnu.org’
(at <https://lists.gnu.org/mailman/listinfo/gnuastro-commits>)

     This mailing list is defined to circulate all commits that are done
     in Gnuastro’s version controlled source, see *note Version
     controlled source::.  If you have any ideas, or suggestions on the
     commits, please use the bug and task trackers on Savannah to
     followup the discussion, do not post to this list.  All the commits
     that are made for an already defined issue or task will state the
     respective ID so you can find it easily.


File: gnuastro.info,  Node: Contributing to Gnuastro,  Prev: Developing mailing lists,  Up: Developing

11.11 Contributing to Gnuastro
==============================

You have this great idea or have found a good fix to a problem which you
would like to implement in Gnuastro.  You have also become familiar with
the general design of Gnuastro in the previous sections of this chapter
(see *note Developing::) and want to start working on and sharing your
new addition/change with the whole community as part of the official
release.  This is great and your contribution is most welcome.  This
section and the next (see *note Developer's checklist::) are written in
the hope of making it as easy as possible for you to share your great
idea with the community.

   In this section we discuss the final steps you have to take: legal
and technical.  From the legal perspective, the copyright of any work
you do on Gnuastro has to be assigned to the Free Software Foundation
(FSF) and the GNU operating system, or you have to sign a disclaimer.
We do this to ensure that Gnuastro can remain free in the future, see
*note Copyright assignment::.  From the technical point of view, in this
section we also discuss commit guidelines (*note Commit guidelines::)
and the general version control workflow of Gnuastro in *note Production
workflow::, along with a tutorial in *note Forking tutorial::.

   Recall that before starting the work on your idea, be sure to
checkout the bugs and tasks trackers in *note Gnuastro project webpage::
and announce your work there so you don’t end up spending time on
something others have already worked on, and also to attract similarly
interested developers to help you.

* Menu:

* Copyright assignment::        Copyright has to be assigned to the FSF.
* Commit guidelines::           Guidelines for commit messages.
* Production workflow::         Submitting your commits (work) for inclusion.
* Forking tutorial::            Tutorial on workflow steps with Git.


File: gnuastro.info,  Node: Copyright assignment,  Next: Commit guidelines,  Prev: Contributing to Gnuastro,  Up: Contributing to Gnuastro

11.11.1 Copyright assignment
----------------------------

Gnuastro’s copyright is owned by the FSF. Professor Eben Moglen, of the
Columbia University Law School has given a nice summary of the reasons
for this at <https://www.gnu.org/licenses/why-assign>.  Below we are
copying it verbatim for self consistency (in case you are offline or
reading in print).

     Under US copyright law, which is the law under which most free
     software programs have historically been first published, there are
     very substantial procedural advantages to registration of
     copyright.  And despite the broad right of distribution conveyed by
     the GPL, enforcement of copyright is generally not possible for
     distributors: only the copyright holder or someone having
     assignment of the copyright can enforce the license.  If there are
     multiple authors of a copyrighted work, successful enforcement
     depends on having the cooperation of all authors.

     In order to make sure that all of our copyrights can meet the
     record keeping and other requirements of registration, and in order
     to be able to enforce the GPL most effectively, FSF requires that
     each author of code incorporated in FSF projects provide a
     copyright assignment, and, where appropriate, a disclaimer of any
     work-for-hire ownership claims by the programmer’s employer.  That
     way we can be sure that all the code in FSF projects is free code,
     whose freedom we can most effectively protect, and therefore on
     which other developers can completely rely.

   Please get in touch with the Gnuastro maintainer (currently Mohammad
Akhlaghi, mohammad -at- akhlaghi -dot- org) to follow the procedures.
It is possible to do this for each change (good for for a single
contribution), and also more generally for all the changes/additions you
do in the future within Gnuastro.  So if you have already assigned the
copyright of your work on another GNU software to the FSF, it should be
done again for Gnuastro.  The FSF has staff working on these legal
issues and the maintainer will get you in touch with them to do the
paperwork.  The maintainer will just be informed in the end so your
contributions can be merged within the Gnuastro source code.

   Gnuastro will gratefully acknowledge (see *note Acknowledgments::)
all the people who have assigned their copyright to the FSF and have
thus helped to guarantee the freedom and reliability of Gnuastro.  The
Free Software Foundation will also acknowledge your copyright
contributions in the Free Software Supporter:
<https://www.fsf.org/free-software-supporter> which will circulate to a
very large community (104,444 people in April 2016).  See the archives
for some examples and subscribe to receive interesting updates.  The
very active code contributors (or developers) will also be recognized as
project members on the Gnuastro project webpage (see *note Gnuastro
project webpage::) and can be given a ‘gnu.org’ email address.  So your
very valuable contribution and copyright assignment will not be
forgotten and is highly appreciated by a very large community.  If you
are reluctant to sign an assignment, a disclaimer is also acceptable.

*Do I need a disclaimer from my university or employer?*  It depends on
the contract with your university or employer.  From the FSF’s
‘/gd/gnuorg/conditions.text’: “If you are employed to do programming, or
have made an agreement with your employer that says it owns programs you
write, we need a signed piece of paper from your employer disclaiming
rights to” Gnuastro.  The FSF’s copyright clerk will kindly help you
decide, please consult the following email address: “assign -at- gnu
-dot- org”.


File: gnuastro.info,  Node: Commit guidelines,  Next: Production workflow,  Prev: Copyright assignment,  Up: Contributing to Gnuastro

11.11.2 Commit guidelines
-------------------------

To be able to cleanly integrate your work with the other developers,
*never commit on the ‘master’ branch* (see *note Production workflow::
for a complete discussion and *note Forking tutorial:: for a cookbook
example).  In short, leave ‘master’ only for changes you fetch, or pull
from the official repository (see *note Synchronizing::).

   In the Gnuastro commit messages, we strive to follow these standards.
Note that in the early phases of Gnuastro’s development, we are
experimenting and so if you notice earlier commits don’t satisfy some of
the guidelines below, it is because they predate that guideline.

Commit title
     The commits have to start with one short descriptive title.  The
     title is separated from the body with one blank line.  Run ‘git
     log’ to see some of the most recent commit messages as an example.
     In general, the title should satisfy the following conditions:

        • It is best for the title to be short, about 60 (or even 50)
          characters.  Most emulated command-line terminals are about 80
          characters wide.  However, we should also allow for the commit
          hashes which are printed in ‘git log --oneline’, and also
          branch names or the graph structure outputs of ‘git log’ which
          are also commonly used.

        • The title should not finish with any full-stops or periods
          (‘<.>’).

Commit body
     The body of the commit message is separated from the title by one
     empty line.  Recall that anyone who has subscribed to
     ‘gnuastro-commits’ mailing list will get the commit in their email
     after it has been pushed to ‘master’.  People will also read them
     when they synchronize with the main Gnuastro repository (see *note
     Synchronizing::).  Finally, the commit messages will later be used
     to update the ‘NEWS’ file on each release.  Therefore the commit
     message body plays a very important role in the development of
     Gnuastro, so please adhere to the following guidelines.

        • The body should be very descriptive.  Start the commit message
          body by explaining what changes your commit makes from a
          user’s perspective (added, changed, or removed options, or
          arguments to programs or libraries, or modified algorithms, or
          new installation step, etc).

        • Try to explain the committed contents as best as you can.
          Recall that the readers of your commit message do not
          necessarily have your current background.  After some time you
          will also forget the context, so this request is not just for
          others(1).  Therefore be very descriptive and explain as much
          as possible: what the bug/task was, justify the way you fixed
          it and discuss other possible solutions that you might not
          have included.  For the last item, it is best to discuss them
          thoroughly as comments in the appropriate section of the code,
          but only give a short summary in the commit message.  Note
          that all added and removed source code lines will also be
          circulated in the ‘gnuastro-commits’ mailing list.

        • Like all other Gnuastro’s text files, the lines in the commit
          body should not be longer than 75 characters, see *note Coding
          conventions::.  This is to ensure that on standard terminal
          emulators (with 80 character width), the ‘git log’ output can
          be cleanly displayed (note that the commit message is indented
          in the output of ‘git log’).  If you use Emacs, Gnuastro’s
          ‘.dir-locals.el’ file will ensure that your commits satisfy
          this condition (using <M-q>).

        • When the commit is related to a task or a bug, please include
          the respective ID (in the format of ‘bug/task #ID’, note the
          space) in the commit message (from *note Gnuastro project
          webpage::) for interested people to be able to followup the
          discussion that took place there.  If the commit fixes a bug
          or finishes a task, the recommended way is to add a line after
          the body with ‘‘This fixes bug #ID.’’, or ‘‘This finishes task
          #ID.’’.  Don’t assume that the reader has internet access to
          check the bug’s full description when reading the commit
          message, so give a short introduction too.

   ---------- Footnotes ----------

   (1) <http://catb.org/esr/writings/unix-koans/prodigy.html>


File: gnuastro.info,  Node: Production workflow,  Next: Forking tutorial,  Prev: Commit guidelines,  Up: Contributing to Gnuastro

11.11.3 Production workflow
---------------------------

Fortunately ‘Pro Git’ has done a wonderful job in explaining the
different workflows in Chapter 5(1) and in particular the
“Integration-Manager Workflow” explained there.  The implementation of
this workflow is nicely explained in Section 5.2(2) under
“Forked-Public-Project”.  We have also prepared a short tutorial in
*note Forking tutorial::.  Anything on the master branch should always
be tested and ready to be built and used.  As described in ‘Pro Git’,
there are two methods for you to contribute to Gnuastro in the
Integration-Manager Workflow:

  1. You can send commit patches by email as fully explained in ‘Pro
     Git’.  This is good for your first few contributions.  Just note
     that raw patches (containing only the diff) do not have any
     meta-data (author name, date, etc).  Therefore they will not allow
     us to fully acknowledge your contributions as an author in
     Gnuastro: in the ‘AUTHORS’ file and at the start of the PDF book.
     These author lists are created automatically from the version
     controlled source.

     To receive full acknowledgment when submitting a patch, is thus
     advised to use Git’s ‘format-patch’ tool.  See Pro Git’s Public
     project over email
     (https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Public-Project-over-Email)
     section for a nice explanation.  If you would like to get more
     heavily involved in Gnuastro’s development, then you can try the
     next solution.

  2. You can have your own forked copy of Gnuastro on any hosting site
     you like (GitHub, GitLab, BitBucket, etc) and inform us when your
     changes are ready so we merge them in Gnuastro.  This is more
     suited for people who commonly contribute to the code (see *note
     Forking tutorial::).

   In both cases, your commits (with your name and information) will be
preserved and your contributions will thus be fully recorded in the
history of Gnuastro and in the ‘AUTHORS’ file and this book (second page
in the PDF format) once they have been incorporated into the official
repository.  Needless to say that in such cases, be sure to follow the
bug or task trackers (or subscribe to the ‘gnuastro-devel’ mailing list)
and contact us before hand so you don’t do something that someone else
is already working on.  In that case, you can get in touch with them and
help the job go on faster, see *note Gnuastro project webpage::.  This
workflow is currently mostly borrowed from the general recommendations
of Git(3) and GitHub.  But since Gnuastro is currently under heavy
development, these might change and evolve to better suit our needs.

   ---------- Footnotes ----------

   (1) 
<http://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows>

   (2) 
<http://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project>

   (3) 
<https://github.com/git/git/blob/master/Documentation/SubmittingPatches>


File: gnuastro.info,  Node: Forking tutorial,  Prev: Production workflow,  Up: Contributing to Gnuastro

11.11.4 Forking tutorial
------------------------

This is a tutorial on the second suggested method (commonly known as
forking) that you can submit your modifications in Gnuastro (see *note
Production workflow::).

   To start, please create an empty repository on your hosting service
webpage (we recommend GitLab(1)).  If this is your first hosted
repository on the webpage, you also have to upload your public SSH
key(2) for the ‘git push’ command below to work.  Here we’ll assume you
use the name ‘janedoe’ to refer to yourself everywhere and that you
choose ‘gnuastro-janedoe’ as the name of your Gnuastro fork.  Any online
hosting service will give you an address (similar to the
‘‘git@gitlab.com:...’’ below) of the empty repository you have created
using their webpage, use that address in the third line below.

     $ git clone git://git.sv.gnu.org/gnuastro.git
     $ cd gnuastro
     $ git remote add janedoe git@gitlab.com:janedoe/gnuastro-janedoe.git
     $ git push janedoe master

   The full Gnuastro history is now pushed onto your hosting service and
the ‘janedoe’ remote is now also following your ‘master’ branch.  If you
run ‘git remote show REMOTENAME’ for the ‘origin’ and ‘janedoe’ remotes,
you will see their difference: the first has pull access and the second
doesn’t.  This nicely summarizes the main idea behind this workflow: you
push to your remote repository, we pull from it and merge it into
‘master’, then you finalize it by pulling from the main repository.

   To test (compile) your changes during your work, you will need to
bootstrap the version controlled source, see *note Bootstrapping:: for a
full description.  The cloning process above is only necessary for your
first time setup, you don’t need to repeat it.  However, please repeat
the steps below for each independent issue you intend to work on.

   Let’s assume you have found a bug in ‘lib/statistics.c’’s median
calculating function.  Before actually doing anything, please announce
it (see *note Report a bug::) so everyone knows you are working on it or
to find out others aren’t already working on it.  With the commands
below, you make a branch, checkout to it, correct the bug, check if it
is indeed fixed, add it to the staging area, commit it to the new branch
and push it to your hosting service.  But before all of them, make sure
that you are on the ‘master’ branch and that your ‘master’ branch is up
to date with the main Gnuastro repository with the first two commands.

     $ git checkout master
     $ git pull
     $ git checkout -b bug-median-stats      # Choose a descriptive name
     $ emacs lib/statistics.c
     $                                       # do your checks here
     $ git add lib/statistics.c
     $ git commit
     $ git push janedoe bug-median-stats

   Your new branch is now on your hosted repository.  Through the
respective tacker on Savannah (see *note Gnuastro project webpage::) you
can then let the other developers know that your ‘bug-median-stats’
branch is ready.  They will pull your work, test it themselves and if it
is ready to be merged into the main Gnuastro history, they will merge it
into the ‘master’ branch.  After that is done, you can simply checkout
your local ‘master’ branch and pull all the changes from the main
repository.  After the pull you can run ‘‘git log’’ as shown below, to
see how ‘bug-median-stats’ is merged with master.  To finalize, you can
push all the changes to your hosted repository and delete the branch:

     $ git checkout master
     $ git pull
     $ git log --oneline --graph --decorate --all
     $ git push janedoe master
     $ git branch -d bug-median-stats                # delete local branch
     $ git push janedoe --delete bug-median-stats    # delete remote branch

   Just as a reminder, always keep your work on each issue in a separate
local and remote branch so work can progress on them independently.
After you make your announcement, other people might contribute to the
branch before merging it in to ‘master’, so this is very important.  As
a final reminder: before starting each issue branch from ‘master’, be
sure to run ‘git pull’ in ‘master’ as shown above.  This will enable you
to start your branch (work) from the most recent commit and thus
simplify the final merging of your work.

   ---------- Footnotes ----------

   (1) See <https://www.gnu.org/software/repo-criteria-evaluation.html>
for an evaluation of the major existing repositories.  Gnuastro uses GNU
Savannah (which also has the highest ranking in the evaluation), but for
starters, GitLab may be easier.

   (2) For example see this explanation provided by GitLab:
<http://docs.gitlab.com/ce/ssh/README.html>.


File: gnuastro.info,  Node: Gnuastro programs list,  Next: Other useful software,  Prev: Developing,  Up: Top

Appendix A Gnuastro programs list
*********************************

GNU Astronomy Utilities 0.12, contains the following programs.  They are
sorted in alphabetical order and a short description is provided for
each program.  The description starts with the executable names in
‘thisfont’ followed by a pointer to the respective section in
parenthesis.  Throughout this book, they are ordered based on their
context, please see the top-level contents for contextual ordering
(based on what they do).

Arithmetic
     (‘astarithmetic’, see *note Arithmetic::) For arithmetic operations
     on multiple (theoretically unlimited) number of datasets (images).
     It has a large and growing set of arithmetic, mathematical, and
     even statistical operators (for example ‘+’, ‘-’, ‘*’, ‘/’, ‘sqrt’,
     ‘log’, ‘min’, ‘average’, ‘median’).

BuildProgram
     (‘astbuildprog’, see *note BuildProgram::) Compile, link and run
     programs that depend on the Gnuastro library (see *note Gnuastro
     library::).  This program will automatically link with the
     libraries that Gnuastro depends on, so there is no need to
     explicitly mention them every time you are compiling a Gnuastro
     library dependent program.

ConvertType
     (‘astconvertt’, see *note ConvertType::) Convert astronomical data
     files (FITS or IMH) to and from several other standard image and
     data formats, for example TXT, JPEG, EPS or PDF.

Convolve
     (‘astconvolve’, see *note Convolve::) Convolve (blur or smooth)
     data with a given kernel in spatial and frequency domain on
     multiple threads.  Convolve can also do de-convolution to find the
     appropriate kernel to PSF-match two images.

CosmicCalculator
     (‘astcosmiccal’, see *note CosmicCalculator::) Do cosmological
     calculations, for example the luminosity distance, distance
     modulus, comoving volume and many more.

Crop
     (‘astcrop’, see *note Crop::) Crop region(s) from an image and
     stitch several images if necessary.  Inputs can be in pixel
     coordinates or world coordinates.

Fits
     (‘astfits’, see *note Fits::) View and manipulate FITS file
     extensions and header keywords.

MakeCatalog
     (‘astmkcatalog’, see *note MakeCatalog::) Make catalog of labeled
     image (output of NoiseChisel).  The catalogs are highly
     customizable and adding new calculations/columns is very
     straightforward.

MakeNoise
     (‘astmknoise’, see *note MakeNoise::) Make (add) noise to an image,
     with a large set of random number generators and any seed.

MakeProfiles
     (‘astmkprof’, see *note MakeProfiles::) Make mock 2D profiles in an
     image.  The central regions of radial profiles are made with a
     configurable 2D Monte Carlo integration.  It can also build the
     profiles on an over-sampled image.

Match
     (‘astmatch’, see *note Match::) Given two input catalogs, find the
     rows that match with each other within a given aperture (may be an
     ellipse).

NoiseChisel
     (‘astnoisechisel’, see *note NoiseChisel::) Detect signal in noise.
     It uses a technique to detect very faint and diffuse, irregularly
     shaped signal in noise (galaxies in the sky), using thresholds that
     are below the Sky value, see arXiv:1505.01664
     (http://arxiv.org/abs/1505.01664).

Segment
     (‘astsegment’, see *note Segment::) Segment detected regions based
     on the structure of signal and the input dataset’s noise
     properties.

Statistics
     (‘aststatistics’, see *note Statistics::) Statistical calculations
     on the input dataset (column in a table, image or datacube).

Table
     (‘asttable’, *note Table::) Convert FITS binary and ASCII tables
     into other such tables, print them on the command-line, save them
     in a plain text file, or get the FITS table information.

Warp
     (‘astwarp’, see *note Warp::) Warp image to new pixel grid.  Any
     projective transformation or Homography can be applied to the input
     images.

   The programs listed above are designed to be highly modular and
generic.  Hence, they are naturally for lower-level operations.  In
Gnuastro, higher-level operations (combining multiple programs, or
running a program in a special way), are done with installed Bash
scripts (all prefixed with ‘astscript-’).  They can be run just like a
program and behave very similarly (with minor differences, see *note
Installed scripts::).

‘astscript-sort-by-night’
     (See *note Sort FITS files by night::) Given a list of FITS files,
     and a HDU and keyword name (for a date), this script separates the
     files in the same night (possibly over two calendar days).


File: gnuastro.info,  Node: Other useful software,  Next: GNU Free Doc. License,  Prev: Gnuastro programs list,  Up: Top

Appendix B Other useful software
********************************

In this appendix the installation of programs and libraries that are not
direct Gnuastro dependencies are discussed.  However they can be useful
for working with Gnuastro.

* Menu:

* SAO ds9::                     Viewing FITS images.
* PGPLOT::                      Plotting directly in C


File: gnuastro.info,  Node: SAO ds9,  Next: PGPLOT,  Prev: Other useful software,  Up: Other useful software

B.1 SAO ds9
===========

SAO ds9(1) is not a requirement of Gnuastro, it is a FITS image viewer.
So to check your inputs and outputs, it is one of the best options.
Like the other packages, it might already be available in your
distribution’s repositories.  It is already pre-compiled in the download
section of its webpage.  Once you download it you can unpack and install
(move it to a system recognized directory) with the following commands
(‘x.x.x’ is the version number):

     $ tar xf ds9.linux64.x.x.x.tar.gz
     $ sudo mv ds9 /usr/local/bin

   Once you run it, there might be a complaint about the Xss library,
which you can find in your distribution package management system.  You
might also get an ‘XPA’ related error.  In this case, you have to add
the following line to your ‘~/.bashrc’ and ‘~/.profile’ file (you will
have to log out and back in again for the latter):

     export XPA_METHOD=local

* Menu:

* Viewing multiextension FITS images::  Configure SAO ds9 for multiextension images.

   ---------- Footnotes ----------

   (1) <http://ds9.si.edu/>


File: gnuastro.info,  Node: Viewing multiextension FITS images,  Prev: SAO ds9,  Up: SAO ds9

B.1.1 Viewing multiextension FITS images
----------------------------------------

The FITS definition allows for multiple extensions inside one FITS file,
each extension can have a completely independent dataset inside of it.
If you just double click on a multi-extension FITS file or run ‘$ds9
foo.fits’, SAO ds9 will only show you the first extension.  If you have
a multi-extension file containing 2D images, one way to load and switch
between the each 2D extension is to take the following steps in the SAO
ds9 window: “File”→”Open Other”→”Open Multi Ext Cube” and then choose
the Multi extension FITS file in your computer’s file structure.

   The method above is a little tedious to do every time you want view a
multi-extension FITS file.  A different series of steps is also
necessary if you the extensions are 3D data cubes.  Fortunately SAO ds9
also provides command-line options that you can use to specify a
particular behavior.  One of those options is ‘-mecube’ which opens a
FITS image as a multi-extension data cube (treating each 2D extension as
a slice in a 3D cube).  This allows you to flip through the extensions
easily while keeping all the settings similar.

   Try running ‘$ds9 -mecube foo.fits’ to see the effect (for example on
the output of *note NoiseChisel::).  If the file has multiple
extensions, a small window will also be opened along with the main ds9
window.  This small window allows you to slide through the image
extensions of ‘foo.fits’.  If ‘foo.fits’ only consists of one extension,
then SAO ds9 will open as usual.  Just to avoid confusion, note that SAO
ds9 does not follow the GNU style of separating long and short options
as explained in *note Arguments and options::.  In the GNU style, this
‘long’ (multi-character) option should have been called like ‘--mecube’,
but SAO ds9 follows its own conventions.

   Recall the ‘-mecube’ opens each 2D input extension as a slice in 3D.
Therefore, when you want to inspect a multi-extension FITS file
containing a 3D dataset, the ‘-mecube’ option is no good any more (it
only opens the first slice of the 3D cube in each extension).  In that
case, we have to use SAO ds9’s ‘-multiframe’ option to open each
extension as a separate frame.  Since the input is a 3D dataset, we get
the same small window as the 2D case above for scrolling through the 3D
slices.  We then have to also ask ds9 to match the frames and lock the
slices, so for example zooming in one, will also zoom the others.

   We can use a script to automatize this process and make work much
easier (and save a lot of time) when opening any generic 2D or 3D
dataset.  After taking the following steps, when you click on a FITS
file in your graphic user interface, ds9 will open in the respective 2D
or 3D mode when double clicking a FITS file on the graphic user
interface, and an executable will also be available to open ds9
similarly on the command-line.  Note that the following solution assumes
you already have Gnuastro installed (and in particular the *note Fits::
program).

   Let’s assume that you want to store this script in ‘BINDIR’ (that is
in your ‘PATH’ environment variable, see *note Installation
directory::).  [Tip: a good place would be ‘~/.local/bin’, just don’t
forget to make sure it is in your ‘PATH’].  Using your favorite text
editor, put the following script into a file called
‘BINDIR/ds9-multi-ext’.  You can change the size of the opened ds9
window by changing the ‘1800x3000’ part of the script below.

     #! /bin/bash

     # To allow generic usage, if no input file is given (the `if' below is
     # true), then just open an empty ds9.
     if [ "x$1" == "x" ]; then
         ds9
     else
         # Make sure we are dealing with a FITS file. We are using shell
         # redirection here to make sure that nothing is printed in the
         # terminal (to standard output when we have a FITS file, or to
         # standard error when we don't). Since we've used redirection,
         # we'll also have to echo the return value of `astfits'.
         check=$(astfits $1 -h0 > /dev/null 2>&1; echo $?)

         # If the file was a FITS file, then `check' will be 0.
         if [ "$check" == "0" ]; then

             # Read the number of dimensions.
             n0=$(astfits $1 -h0 | awk '$1=="NAXIS"{print $3}')

             # Find the number of dimensions.
             if [ "$n0" == "0" ]; then
                 ndim=$(astfits $1 -h1 | awk '$1=="NAXIS"{print $3}')
             else
                 ndim=$n0
             fi;

             # Open DS9 based on the number of dimension.
             if [ "$ndim" = "2" ]; then
                 # 2D multi-extension file: use the "Cube" window to
                 # flip/slide through the extensions.
                 ds9 -zscale -geometry 1800x3000 -mecube $1         \
                     -zoom to fit -wcs degrees
             else
                 # 3D multi-extension file: The "Cube" window will slide
                 # between the slices of a single extension. To flip
                 # through the extensions (not the slices), press the top
                 # row "frame" button and from the last four buttons of the
                 # bottom row ("first", "previous", "next" and "last") can
                 # be used to switch through the extensions (while keeping
                 # the same slice).
                 ds9 -zscale -geometry 1800x3000 -wcs degrees       \
                     -multiframe $1 -match frame image              \
                     -lock slice image -lock frame image -single    \
                     -zoom to fit
             fi
         else
             if [ -f $1 ]; then
                 echo "'$1' isn't a FITS file."
             else
                 echo "'$1' doesn't exist."
             fi
         fi
     fi

   As described above (also in the comments of the script), if you have
opened a multi-extension 2D dataset (image), the “Cube” window can be
used to slide/flip through each extension.  But when the input is a 3D
data cube, the “Cube” window will slide/flip through the slices in each
extension (a separate 3D dataset).  To flip through the extensions
(while keeping the slice fixed), click the “frame” button on the top row
of buttons, then use the last four buttons of the bottom row ("first",
"previous", "next" and "last") to change between the extensions.

   To run this script, you have to activate its executable flag with
this command:

     $ chmod +x BINDIR/ds9-multi-ext

   If ‘BINDIR’ is within your system’s ‘PATH’ environment variable (see
*note Installation directory::), you can now open ds9 conditionally
using the script above with this command:

     $ ds9-multi-ext foo.fits

   For the graphic user interface, we’ll assume you are using GNOME (the
most popular graphic user interface for GNU/Linux systems), version 3.
For GNOME 2, see below.  You can customize GNOME to open specific files
with ‘.desktop’ files.  For each user, they are stored in
‘~/.local/share/applications/’.  In case you don’t have the directory,
make it your self (with ‘mkdir’).  Using your favorite text editor, you
can now create ‘~/.local/share/applications/saods9.desktop’ with the
following contents.  Just don’t forget to correct ‘BINDIR’.  If you
would also like to have ds9’s logo/icon in GNOME, download it, uncomment
the ‘Icon’ line, and write its address in the value.

     [Desktop Entry]
     Type=Application
     Version=1.0
     Name=SAO DS9
     Comment=View FITS images
     Terminal=false
     Categories=Graphics;RasterGraphics;2DGraphics;3DGraphics
     #Icon=/PATH/TO/DS9/ICON/ds9.png
     Exec=BINDIR/ds9-multi-ext %f

   The steps above will add SAO ds9 as one of your applications.  To
make it default, take the following steps (just once is enough).  Right
click on a FITS file and select Open with other application→View all
applications→SAO ds9.

   In case you are using GNOME 2 you can take the following steps: right
click on a FITS file and choose Properties→Open With→Add button.  A list
of applications will show up, ds9 might already be present in the list,
but don’t choose it because it will run with no options.  Below the list
is an option “Use a custom command”.  Click on it and write the
following command: ‘BINDIR/ds9-multi-ext’ in the box and click “Add”.
Then finally choose the command you just added as the default and click
the “Close” button.


File: gnuastro.info,  Node: PGPLOT,  Prev: SAO ds9,  Up: Other useful software

B.2 PGPLOT
==========

PGPLOT is a package for making plots in C. It is not directly needed by
Gnuastro, but can be used by WCSLIB, see *note WCSLIB::.  As explained
in *note WCSLIB::, you can install WCSLIB without it too.  It is very
old (the most recent version was released early 2001!), but remains one
of the main packages for plotting directly in C. WCSLIB uses this
package to make plots if you want it to make plots.  If you are
interested you can also use it for your own purposes.

   If you want your plotting codes in between your C program, PGPLOT is
currently one of your best options.  The recommended alternative to this
method is to get the raw data for the plots in text files and input them
into any of the various more modern and capable plotting tools
separately, for example the Matplotlib library in Python or PGFplots in
LaTeX.  This will also significantly help code readability.  Let’s get
back to PGPLOT for the sake of WCSLIB. Installing it is a little tricky
(mainly because it is so old!).

   You can download the most recent version from the FTP link in its
webpage(1).  You can unpack it with the ‘tar xf’ command.  Let’s assume
the directory you have unpacked it to is ‘PGPLOT’, most probably it is:
‘/home/username/Downloads/pgplot/’.  open the ‘drivers.list’ file:
     $ gedit drivers.list
Remove the ‘!’ for the following lines and save the file in the end:
     PSDRIV 1 /PS
     PSDRIV 2 /VPS
     PSDRIV 3 /CPS
     PSDRIV 4 /VCPS
     XWDRIV 1 /XWINDOW
     XWDRIV 2 /XSERVE
Don’t choose GIF or VGIF, there is a problem in their codes.

   Open the ‘PGPLOT/sys_linux/g77_gcc.conf’ file:
     $ gedit PGPLOT/sys_linux/g77_gcc.conf
change the line saying: ‘FCOMPL="g77"’ to ‘FCOMPL="gfortran"’, and save
it.  This is a very important step during the compilation of the code if
you are in GNU/Linux.  You now have to create a folder in ‘/usr/local’,
don’t forget to replace ‘PGPLOT’ with your unpacked address:
     $ su
     # mkdir /usr/local/pgplot
     # cd /usr/local/pgplot
     # cp PGPLOT/drivers.list ./
   To make the Makefile, type the following command:
     # PGPLOT/makemake PGPLOT linux g77_gcc
It should finish by saying: ‘Determining object file dependencies’.  You
have done the hard part!  The rest is easy: run these three commands in
order:
     # make
     # make clean
     # make cpg

   Finally you have to place the position of this directory you just
made into the ‘LD_LIBRARY_PATH’ environment variable and define the
environment variable ‘PGPLOT_DIR’.  To do that, you have to edit your
‘.bashrc’ file:
     $ cd ~
     $ gedit .bashrc
Copy these lines into the text editor and save it:
     PGPLOT_DIR="/usr/local/pgplot/"; export PGPLOT_DIR
     LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/pgplot/
     export LD_LIBRARY_PATH
You need to log out and log back in again so these definitions take
effect.  After you logged back in, you want to see the result of all
this labor, right?  Tim Pearson has done that for you, create a
temporary folder in your home directory and copy all the demonstration
files in it:
     $ cd ~
     $ mkdir temp
     $ cd temp
     $ cp /usr/local/pgplot/pgdemo* ./
     $ ls
   You will see a lot of pgdemoXX files, where XX is a number.  In order
to execute them type the following command and drink your coffee while
looking at all the beautiful plots!  You are now ready to create your
own.
     $ ./pgdemoXX

   ---------- Footnotes ----------

   (1) <http://www.astro.caltech.edu/~tjp/pgplot/>


File: gnuastro.info,  Node: GNU Free Doc. License,  Next: GNU General Public License,  Prev: Other useful software,  Up: Top

Appendix C GNU Free Doc. License
********************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: gnuastro.info,  Node: GNU General Public License,  Next: Index,  Prev: GNU Free Doc. License,  Up: Top

Appendix D GNU Gen. Pub. License v3
***********************************

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program—to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers’ and authors’ protection, the GPL clearly explains
that there is no warranty for this free software.  For both users’ and
authors’ sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users’ freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     “This License” refers to version 3 of the GNU General Public
     License.

     “Copyright” also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     “The Program” refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as “you”.  “Licensees” and
     “recipients” may be individuals or organizations.

     To “modify” a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a “modified
     version” of the earlier work or a work “based on” the earlier work.

     A “covered work” means either the unmodified Program or a work
     based on the Program.

     To “propagate” a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To “convey” a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays “Appropriate Legal Notices”
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The “source code” for a work means the preferred form of the work
     for making modifications to it.  “Object code” means any non-source
     form of a work.

     A “Standard Interface” means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The “System Libraries” of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A “Major Component”, in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The “Corresponding Source” for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work’s System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users’ Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work’s users, your or third parties’ legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program’s source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to “keep intact all notices”.

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an “aggregate” if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation’s users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A “User Product” is either (1) a “consumer product”, which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     “normally used” refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     “Installation Information” for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     “Additional permissions” are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered “further
     restrictions” within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An “entity transaction” is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party’s predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A “contributor” is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor’s “contributor
     version”.

     A contributor’s “essential patent claims” are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, “control”
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor’s essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a “patent license” is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To “grant”
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  “Knowingly relying” means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient’s use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is “discriminatory” if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others’ Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS”
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
“copyright” line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type ‘show w’.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program’s commands might be different; for a GUI interface, you would
use an “about box”.

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a “copyright disclaimer” for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.


File: gnuastro.info,  Node: Index,  Prev: GNU General Public License,  Up: Top

Index: Macros, structures and functions
***************************************

All Gnuastro library’s exported macros start with ‘GAL_’, and its
exported structures and functions start with ‘gal_’.  This abbreviation
stands for _G_NU _A_stronomy _L_ibrary.  The next element in the name is
the name of the header which declares or defines them, so to use the
‘gal_array_fset_const’ function, you have to ‘#include
<gnuastro/array.h>’.  See *note Gnuastro library:: for more.  The
‘pthread_barrier’ constructs are our implementation and are only
available on systems that don’t have them, see *note Implementation of
pthread_barrier::.

 [index ]
* Menu:

* gal_arithmetic:                        Arithmetic on datasets.
                                                              (line 271)
* GAL_ARITHMETIC_FLAGS_ALL:              Arithmetic on datasets.
                                                              (line  39)
* GAL_ARITHMETIC_FREE:                   Arithmetic on datasets.
                                                              (line  37)
* GAL_ARITHMETIC_INPLACE:                Arithmetic on datasets.
                                                              (line  36)
* GAL_ARITHMETIC_NUMOK:                  Arithmetic on datasets.
                                                              (line  38)
* gal_arithmetic_operator_string:        Arithmetic on datasets.
                                                              (line 313)
* GAL_ARITHMETIC_OP_ABS:                 Arithmetic on datasets.
                                                              (line 167)
* GAL_ARITHMETIC_OP_AND:                 Arithmetic on datasets.
                                                              (line  74)
* GAL_ARITHMETIC_OP_BITAND:              Arithmetic on datasets.
                                                              (line 225)
* GAL_ARITHMETIC_OP_BITLSH:              Arithmetic on datasets.
                                                              (line 228)
* GAL_ARITHMETIC_OP_BITNOT:              Arithmetic on datasets.
                                                              (line 245)
* GAL_ARITHMETIC_OP_BITOR:               Arithmetic on datasets.
                                                              (line 226)
* GAL_ARITHMETIC_OP_BITRSH:              Arithmetic on datasets.
                                                              (line 229)
* GAL_ARITHMETIC_OP_BITXOR:              Arithmetic on datasets.
                                                              (line 227)
* GAL_ARITHMETIC_OP_DEC_TO_DEGREE:       Arithmetic on datasets.
                                                              (line 143)
* GAL_ARITHMETIC_OP_DEGREE_TO_DEC:       Arithmetic on datasets.
                                                              (line 145)
* GAL_ARITHMETIC_OP_DEGREE_TO_RA:        Arithmetic on datasets.
                                                              (line 144)
* GAL_ARITHMETIC_OP_DIVIDE:              Arithmetic on datasets.
                                                              (line  67)
* GAL_ARITHMETIC_OP_EQ:                  Arithmetic on datasets.
                                                              (line  72)
* GAL_ARITHMETIC_OP_GE:                  Arithmetic on datasets.
                                                              (line  71)
* GAL_ARITHMETIC_OP_GT:                  Arithmetic on datasets.
                                                              (line  70)
* GAL_ARITHMETIC_OP_ISBLANK:             Arithmetic on datasets.
                                                              (line  96)
* GAL_ARITHMETIC_OP_LE:                  Arithmetic on datasets.
                                                              (line  69)
* GAL_ARITHMETIC_OP_LOG:                 Arithmetic on datasets.
                                                              (line 126)
* GAL_ARITHMETIC_OP_LOG10:               Arithmetic on datasets.
                                                              (line 127)
* GAL_ARITHMETIC_OP_LT:                  Arithmetic on datasets.
                                                              (line  68)
* GAL_ARITHMETIC_OP_MAX:                 Arithmetic on datasets.
                                                              (line 171)
* GAL_ARITHMETIC_OP_MAXVAL:              Arithmetic on datasets.
                                                              (line 154)
* GAL_ARITHMETIC_OP_MEAN:                Arithmetic on datasets.
                                                              (line 174)
* GAL_ARITHMETIC_OP_MEANVAL:             Arithmetic on datasets.
                                                              (line 157)
* GAL_ARITHMETIC_OP_MEDIAN:              Arithmetic on datasets.
                                                              (line 176)
* GAL_ARITHMETIC_OP_MEDIANVAL:           Arithmetic on datasets.
                                                              (line 159)
* GAL_ARITHMETIC_OP_MIN:                 Arithmetic on datasets.
                                                              (line 170)
* GAL_ARITHMETIC_OP_MINUS:               Arithmetic on datasets.
                                                              (line  65)
* GAL_ARITHMETIC_OP_MINVAL:              Arithmetic on datasets.
                                                              (line 153)
* GAL_ARITHMETIC_OP_MODULO:              Arithmetic on datasets.
                                                              (line 230)
* GAL_ARITHMETIC_OP_MULTIPLY:            Arithmetic on datasets.
                                                              (line  66)
* GAL_ARITHMETIC_OP_NE:                  Arithmetic on datasets.
                                                              (line  73)
* GAL_ARITHMETIC_OP_NOT:                 Arithmetic on datasets.
                                                              (line  88)
* GAL_ARITHMETIC_OP_NUMBER:              Arithmetic on datasets.
                                                              (line 172)
* GAL_ARITHMETIC_OP_NUMBERVAL:           Arithmetic on datasets.
                                                              (line 155)
* GAL_ARITHMETIC_OP_OR:                  Arithmetic on datasets.
                                                              (line  75)
* GAL_ARITHMETIC_OP_PLUS:                Arithmetic on datasets.
                                                              (line  64)
* GAL_ARITHMETIC_OP_POW:                 Arithmetic on datasets.
                                                              (line 219)
* GAL_ARITHMETIC_OP_QUANTILE:            Arithmetic on datasets.
                                                              (line 192)
* GAL_ARITHMETIC_OP_RA_TO_DEGREE:        Arithmetic on datasets.
                                                              (line 142)
* GAL_ARITHMETIC_OP_SIGCLIP_MEAN:        Arithmetic on datasets.
                                                              (line 200)
* GAL_ARITHMETIC_OP_SIGCLIP_MEDIAN:      Arithmetic on datasets.
                                                              (line 201)
* GAL_ARITHMETIC_OP_SIGCLIP_NUMBER:      Arithmetic on datasets.
                                                              (line 202)
* GAL_ARITHMETIC_OP_SIGCLIP_STD:         Arithmetic on datasets.
                                                              (line 199)
* GAL_ARITHMETIC_OP_SIZE:                Arithmetic on datasets.
                                                              (line 213)
* GAL_ARITHMETIC_OP_SQRT:                Arithmetic on datasets.
                                                              (line 125)
* GAL_ARITHMETIC_OP_STD:                 Arithmetic on datasets.
                                                              (line 175)
* GAL_ARITHMETIC_OP_STDVAL:              Arithmetic on datasets.
                                                              (line 158)
* GAL_ARITHMETIC_OP_SUM:                 Arithmetic on datasets.
                                                              (line 173)
* GAL_ARITHMETIC_OP_SUMVAL:              Arithmetic on datasets.
                                                              (line 156)
* GAL_ARITHMETIC_OP_TO_FLOAT32:          Arithmetic on datasets.
                                                              (line 259)
* GAL_ARITHMETIC_OP_TO_FLOAT64:          Arithmetic on datasets.
                                                              (line 260)
* GAL_ARITHMETIC_OP_TO_INT16:            Arithmetic on datasets.
                                                              (line 254)
* GAL_ARITHMETIC_OP_TO_INT32:            Arithmetic on datasets.
                                                              (line 256)
* GAL_ARITHMETIC_OP_TO_INT64:            Arithmetic on datasets.
                                                              (line 258)
* GAL_ARITHMETIC_OP_TO_INT8:             Arithmetic on datasets.
                                                              (line 252)
* GAL_ARITHMETIC_OP_TO_UINT16:           Arithmetic on datasets.
                                                              (line 253)
* GAL_ARITHMETIC_OP_TO_UINT32:           Arithmetic on datasets.
                                                              (line 255)
* GAL_ARITHMETIC_OP_TO_UINT64:           Arithmetic on datasets.
                                                              (line 257)
* GAL_ARITHMETIC_OP_TO_UINT8:            Arithmetic on datasets.
                                                              (line 251)
* GAL_ARITHMETIC_OP_WHERE:               Arithmetic on datasets.
                                                              (line 109)
* gal_arithmetic_set_operator:           Arithmetic on datasets.
                                                              (line 298)
* gal_array_name_recognized:             Array input output.  (line  15)
* gal_array_name_recognized_multiext:    Array input output.  (line  21)
* gal_array_read:                        Array input output.  (line  28)
* gal_array_read_one_ch:                 Array input output.  (line  64)
* gal_array_read_one_ch_to_type:         Array input output.  (line  79)
* gal_array_read_to_type:                Array input output.  (line  56)
* gal_binary_connected_adjacency_matrix: Binary datasets.     (line 150)
* gal_binary_connected_components:       Binary datasets.     (line 114)
* gal_binary_connected_indexs(gal_data_t: Binary datasets.    (line 139)
* gal_binary_dilate:                     Binary datasets.     (line  84)
* gal_binary_erode:                      Binary datasets.     (line  62)
* gal_binary_holes_fill:                 Binary datasets.     (line 201)
* gal_binary_holes_label:                Binary datasets.     (line 187)
* gal_binary_open:                       Binary datasets.     (line  99)
* GAL_BINARY_TMP_VALUE:                  Binary datasets.     (line  50)
* gal_blank_alloc_write:                 Library blank values.
                                                              (line 103)
* gal_blank_as_string:                   Library blank values.
                                                              (line 126)
* gal_blank_flag:                        Library blank values.
                                                              (line 181)
* gal_blank_flag_apply:                  Library blank values.
                                                              (line 188)
* GAL_BLANK_FLOAT32:                     Library blank values.
                                                              (line  81)
* GAL_BLANK_FLOAT64:                     Library blank values.
                                                              (line  85)
* gal_blank_initialize:                  Library blank values.
                                                              (line 110)
* gal_blank_initialize_array:            Library blank values.
                                                              (line 118)
* GAL_BLANK_INT:                         Library blank values.
                                                              (line  61)
* GAL_BLANK_INT16:                       Library blank values.
                                                              (line  46)
* GAL_BLANK_INT32:                       Library blank values.
                                                              (line  52)
* GAL_BLANK_INT64:                       Library blank values.
                                                              (line  58)
* GAL_BLANK_INT8:                        Library blank values.
                                                              (line  40)
* gal_blank_is:                          Library blank values.
                                                              (line 135)
* GAL_BLANK_LONG:                        Library blank values.
                                                              (line  69)
* gal_blank_number:                      Library blank values.
                                                              (line 172)
* gal_blank_present:                     Library blank values.
                                                              (line 147)
* gal_blank_remove:                      Library blank values.
                                                              (line 195)
* gal_blank_remove_realloc:              Library blank values.
                                                              (line 212)
* GAL_BLANK_SIZE_T:                      Library blank values.
                                                              (line  77)
* GAL_BLANK_STRING:                      Library blank values.
                                                              (line  89)
* GAL_BLANK_UINT:                        Library blank values.
                                                              (line  65)
* GAL_BLANK_UINT16:                      Library blank values.
                                                              (line  43)
* GAL_BLANK_UINT32:                      Library blank values.
                                                              (line  49)
* GAL_BLANK_UINT64:                      Library blank values.
                                                              (line  55)
* GAL_BLANK_UINT8:                       Library blank values.
                                                              (line  37)
* GAL_BLANK_ULONG:                       Library blank values.
                                                              (line  73)
* gal_blank_write:                       Library blank values.
                                                              (line  95)
* gal_box_border_from_center:            Bounding box.        (line  76)
* gal_box_bound_ellipse:                 Bounding box.        (line  23)
* gal_box_bound_ellipse_extent:          Bounding box.        (line  11)
* gal_box_bound_ellipsoid:               Bounding box.        (line  52)
* gal_box_bound_ellipsoid_extent:        Bounding box.        (line  38)
* gal_box_overlap:                       Bounding box.        (line  85)
* GAL_CONFIG_HAVE_FITS_IS_REENTRANT:     Configuration information.
                                                              (line  33)
* GAL_CONFIG_HAVE_LIBGIT2:               Configuration information.
                                                              (line  25)
* GAL_CONFIG_HAVE_PTHREAD_BARRIER:       Configuration information.
                                                              (line  48)
* GAL_CONFIG_HAVE_WCSLIB_VERSION:        Configuration information.
                                                              (line  39)
* GAL_CONFIG_SIZEOF_LONG:                Configuration information.
                                                              (line  56)
* GAL_CONFIG_SIZEOF_SIZE_T:              Configuration information.
                                                              (line  57)
* GAL_CONFIG_VERSION:                    Configuration information.
                                                              (line  14)
* gal_convolve_spatial:                  Convolution functions.
                                                              (line  17)
* gal_convolve_spatial_correct_ch_edge:  Convolution functions.
                                                              (line  49)
* gal_cosmology_age:                     Cosmology library.   (line  18)
* gal_cosmology_angular_distance:        Cosmology library.   (line  46)
* gal_cosmology_comoving_volume:         Cosmology library.   (line  32)
* gal_cosmology_critical_density:        Cosmology library.   (line  39)
* gal_cosmology_distance_modulus:        Cosmology library.   (line  62)
* gal_cosmology_luminosity_distance:     Cosmology library.   (line  54)
* gal_cosmology_proper_distance:         Cosmology library.   (line  25)
* gal_cosmology_to_absolute_mag:         Cosmology library.   (line  69)
* gal_data_alloc:                        Dataset allocation.  (line  12)
* gal_data_array_calloc:                 Arrays of datasets.  (line  21)
* gal_data_array_free:                   Arrays of datasets.  (line  37)
* gal_data_copy:                         Copying datasets.    (line  21)
* gal_data_copy_string_to_number:        Copying datasets.    (line  74)
* gal_data_copy_to_allocated:            Copying datasets.    (line  53)
* gal_data_copy_to_new_type:             Copying datasets.    (line  29)
* gal_data_copy_to_new_type_free:        Copying datasets.    (line  40)
* gal_data_free:                         Dataset allocation.  (line  72)
* gal_data_free_contents:                Dataset allocation.  (line  63)
* gal_data_initialize:                   Dataset allocation.  (line  27)
* gal_dimension_add_coords:              Dimensions.          (line  58)
* gal_dimension_collapse_mean:           Dimensions.          (line 119)
* gal_dimension_collapse_minmax:         Dimensions.          (line 143)
* gal_dimension_collapse_number:         Dimensions.          (line 127)
* gal_dimension_collapse_sum:            Dimensions.          (line 102)
* gal_dimension_coord_to_index:          Dimensions.          (line  67)
* gal_dimension_dist_manhattan:          Dimensions.          (line  87)
* gal_dimension_dist_radial:             Dimensions.          (line  95)
* GAL_DIMENSION_FLT_TO_INT:              Dimensions.          (line  51)
* gal_dimension_increment:               Dimensions.          (line  36)
* gal_dimension_index_to_coord:          Dimensions.          (line  76)
* gal_dimension_is_different:            Dimensions.          (line  28)
* GAL_DIMENSION_NEIGHBOR_OP:             Dimensions.          (line 168)
* gal_dimension_num_neighbors:           Dimensions.          (line  44)
* gal_dimension_remove_extra:            Dimensions.          (line 154)
* gal_dimension_total_size:              Dimensions.          (line  22)
* gal_eps_name_is_eps:                   EPS files.           (line  20)
* gal_eps_suffix_is_eps:                 EPS files.           (line  27)
* gal_eps_to_pt:                         EPS files.           (line  33)
* gal_eps_write:                         EPS files.           (line  44)
* gal_fits_bitpix_to_type:               CFITSIO and Gnuastro types.
                                                              (line  25)
* gal_fits_datatype_to_type:             CFITSIO and Gnuastro types.
                                                              (line  49)
* gal_fits_hdu_format:                   FITS HDUs.           (line  24)
* gal_fits_hdu_num:                      FITS HDUs.           (line  19)
* gal_fits_hdu_open:                     FITS HDUs.           (line  30)
* gal_fits_hdu_open_format:              FITS HDUs.           (line  43)
* gal_fits_img_info:                     FITS arrays.         (line  11)
* gal_fits_img_info_dim:                 FITS arrays.         (line  22)
* gal_fits_img_read:                     FITS arrays.         (line  31)
* gal_fits_img_read_kernel:              FITS arrays.         (line  64)
* gal_fits_img_read_to_type:             FITS arrays.         (line  51)
* gal_fits_img_write:                    FITS arrays.         (line  87)
* gal_fits_img_write_corr_wcs_str:       FITS arrays.         (line 109)
* gal_fits_img_write_to_ptr:             FITS arrays.         (line  78)
* gal_fits_img_write_to_type:            FITS arrays.         (line  95)
* gal_fits_io_error:                     FITS macros errors filenames.
                                                              (line  14)
* gal_fits_key_clean_str_value:          FITS header keywords.
                                                              (line  69)
* gal_fits_key_date_to_seconds:          FITS header keywords.
                                                              (line 107)
* gal_fits_key_date_to_struct_tm:        FITS header keywords.
                                                              (line  81)
* gal_fits_key_img_blank:                FITS header keywords.
                                                              (line  44)
* gal_fits_key_list_add:                 FITS header keywords.
                                                              (line 216)
* gal_fits_key_list_add_end:             FITS header keywords.
                                                              (line 232)
* gal_fits_key_list_reverse:             FITS header keywords.
                                                              (line 242)
* gal_fits_key_read:                     FITS header keywords.
                                                              (line 208)
* gal_fits_key_read_from_ptr:            FITS header keywords.
                                                              (line 132)
* gal_fits_key_write:                    FITS header keywords.
                                                              (line 286)
* gal_fits_key_write_config:             FITS header keywords.
                                                              (line 324)
* gal_fits_key_write_filename:           FITS header keywords.
                                                              (line 259)
* gal_fits_key_write_in_ptr:             FITS header keywords.
                                                              (line 293)
* gal_fits_key_write_title_in_ptr:       FITS header keywords.
                                                              (line 247)
* gal_fits_key_write_version:            FITS header keywords.
                                                              (line 300)
* gal_fits_key_write_version_in_ptr:     FITS header keywords.
                                                              (line 309)
* gal_fits_key_write_wcsstr:             FITS header keywords.
                                                              (line 276)
* GAL_FITS_MAX_NDIM:                     FITS macros errors filenames.
                                                              (line  10)
* gal_fits_name_is_fits:                 FITS macros errors filenames.
                                                              (line  22)
* gal_fits_name_save_as_string:          FITS macros errors filenames.
                                                              (line  37)
* gal_fits_open_to_write:                FITS HDUs.           (line  11)
* gal_fits_suffix_is_fits:               FITS macros errors filenames.
                                                              (line  30)
* gal_fits_tab_format:                   FITS tables.         (line  22)
* gal_fits_tab_info:                     FITS tables.         (line  32)
* gal_fits_tab_read:                     FITS tables.         (line  53)
* gal_fits_tab_size:                     FITS tables.         (line  15)
* gal_fits_tab_write:                    FITS tables.         (line  74)
* gal_fits_type_to_bin_tform:            CFITSIO and Gnuastro types.
                                                              (line  37)
* gal_fits_type_to_bitpix:               CFITSIO and Gnuastro types.
                                                              (line  31)
* gal_fits_type_to_datatype:             CFITSIO and Gnuastro types.
                                                              (line  43)
* gal_git_describe:                      Git wrappers.        (line  15)
* GAL_INTERPOLATE_1D_AKIMA:              Interpolation.       (line  87)
* GAL_INTERPOLATE_1D_AKIMA_PERIODIC:     Interpolation.       (line  91)
* gal_interpolate_1d_blank:              Interpolation.       (line 188)
* GAL_INTERPOLATE_1D_CSPLINE:            Interpolation.       (line  73)
* GAL_INTERPOLATE_1D_CSPLINE_PERIODIC:   Interpolation.       (line  79)
* GAL_INTERPOLATE_1D_INVALID:            Interpolation.       (line  62)
* GAL_INTERPOLATE_1D_LINEAR:             Interpolation.       (line  64)
* gal_interpolate_1d_make_gsl_spline:    Interpolation.       (line 104)
* GAL_INTERPOLATE_1D_POLYNOMIAL:         Interpolation.       (line  67)
* GAL_INTERPOLATE_1D_STEFFEN:            Interpolation.       (line  95)
* gal_interpolate_close_neighbors:       Interpolation.       (line  25)
* gal_jpeg_name_is_jpeg:                 JPEG files.          (line  22)
* gal_jpeg_read:                         JPEG files.          (line  36)
* gal_jpeg_suffix_is_jpeg:               JPEG files.          (line  29)
* gal_jpeg_write:                        JPEG files.          (line  45)
* gal_label_clump_significance:          Labeled datasets.    (line 152)
* gal_label_grow_indexs:                 Labeled datasets.    (line 221)
* gal_label_indexs:                      Labeled datasets.    (line  55)
* GAL_LABEL_INIT:                        Labeled datasets.    (line  45)
* GAL_LABEL_RIVER:                       Labeled datasets.    (line  46)
* GAL_LABEL_TMPCHECK:                    Labeled datasets.    (line  47)
* gal_label_watershed:                   Labeled datasets.    (line  93)
* gal_list_data_add:                     List of gal_data_t.  (line  18)
* gal_list_data_add_alloc:               List of gal_data_t.  (line  34)
* gal_list_data_free:                    List of gal_data_t.  (line  75)
* gal_list_data_last:                    List of gal_data_t.  (line  70)
* gal_list_data_number:                  List of gal_data_t.  (line  65)
* gal_list_data_pop:                     List of gal_data_t.  (line  45)
* gal_list_data_reverse:                 List of gal_data_t.  (line  50)
* gal_list_data_to_array_ptr:            List of gal_data_t.  (line  56)
* gal_list_dosizet_add:                  Doubly linked ordered list of size_t.
                                                              (line  40)
* gal_list_dosizet_free:                 Doubly linked ordered list of size_t.
                                                              (line  73)
* gal_list_dosizet_pop_smallest:         Doubly linked ordered list of size_t.
                                                              (line  49)
* gal_list_dosizet_print:                Doubly linked ordered list of size_t.
                                                              (line  59)
* gal_list_dosizet_to_sizet:             Doubly linked ordered list of size_t.
                                                              (line  66)
* gal_list_f32_add:                      List of float.       (line  22)
* gal_list_f32_free:                     List of float.       (line  86)
* gal_list_f32_last:                     List of float.       (line  46)
* gal_list_f32_number:                   List of float.       (line  41)
* gal_list_f32_pop:                      List of float.       (line  33)
* gal_list_f32_print:                    List of float.       (line  51)
* gal_list_f32_reverse:                  List of float.       (line  68)
* gal_list_f32_to_array:                 List of float.       (line  74)
* gal_list_f64_add:                      List of double.      (line  24)
* gal_list_f64_free:                     List of double.      (line  88)
* gal_list_f64_last:                     List of double.      (line  48)
* gal_list_f64_number:                   List of double.      (line  43)
* gal_list_f64_pop:                      List of double.      (line  35)
* gal_list_f64_print:                    List of double.      (line  53)
* gal_list_f64_reverse:                  List of double.      (line  70)
* gal_list_f64_to_array:                 List of double.      (line  76)
* gal_list_i32_add:                      List of int32_t.     (line  23)
* gal_list_i32_free:                     List of int32_t.     (line  88)
* gal_list_i32_last:                     List of int32_t.     (line  48)
* gal_list_i32_number:                   List of int32_t.     (line  43)
* gal_list_i32_pop:                      List of int32_t.     (line  35)
* gal_list_i32_print:                    List of int32_t.     (line  53)
* gal_list_i32_reverse:                  List of int32_t.     (line  70)
* gal_list_i32_to_array:                 List of int32_t.     (line  76)
* gal_list_osizet_add:                   Ordered list of size_t.
                                                              (line  28)
* gal_list_osizet_pop:                   Ordered list of size_t.
                                                              (line  39)
* gal_list_osizet_to_sizet_free:         Ordered list of size_t.
                                                              (line  49)
* gal_list_sizet_add:                    List of size_t.      (line  34)
* gal_list_sizet_free:                   List of size_t.      (line  98)
* gal_list_sizet_last:                   List of size_t.      (line  58)
* gal_list_sizet_number:                 List of size_t.      (line  53)
* gal_list_sizet_pop:                    List of size_t.      (line  45)
* gal_list_sizet_print:                  List of size_t.      (line  63)
* gal_list_sizet_reverse:                List of size_t.      (line  80)
* gal_list_sizet_to_array:               List of size_t.      (line  86)
* gal_list_str_add:                      List of strings.     (line  20)
* gal_list_str_free:                     List of strings.     (line  75)
* gal_list_str_last:                     List of strings.     (line  49)
* gal_list_str_number:                   List of strings.     (line  44)
* gal_list_str_pop:                      List of strings.     (line  36)
* gal_list_str_print:                    List of strings.     (line  54)
* gal_list_str_reverse:                  List of strings.     (line  69)
* gal_list_void_add:                     List of void.        (line  31)
* gal_list_void_free:                    List of void.        (line  65)
* gal_list_void_last:                    List of void.        (line  54)
* gal_list_void_number:                  List of void.        (line  49)
* gal_list_void_pop:                     List of void.        (line  42)
* gal_list_void_reverse:                 List of void.        (line  59)
* gal_match_coordinates:                 Matching.            (line  14)
* gal_pdf_name_is_pdf:                   PDF files.           (line  15)
* gal_pdf_suffix_is_pdf:                 PDF files.           (line  22)
* gal_pdf_write:                         PDF files.           (line  28)
* gal_permutation_apply:                 Permutations.        (line  43)
* gal_permutation_apply_inverse:         Permutations.        (line  50)
* gal_permutation_check:                 Permutations.        (line  37)
* gal_pointer_allocate:                  Pointers.            (line  39)
* gal_pointer_allocate_mmap:             Pointers.            (line  61)
* gal_pointer_increment:                 Pointers.            (line  16)
* gal_pointer_num_between:               Pointers.            (line  31)
* gal_polygon_area:                      Polygons.            (line  89)
* gal_polygon_clip:                      Polygons.            (line 149)
* gal_polygon_is_convex:                 Polygons.            (line  82)
* gal_polygon_is_counterclockwise:       Polygons.            (line 126)
* gal_polygon_is_inside:                 Polygons.            (line  97)
* gal_polygon_is_inside_convex:          Polygons.            (line 110)
* GAL_POLYGON_MAX_CORNERS:               Polygons.            (line  29)
* gal_polygon_ppropin:                   Polygons.            (line 120)
* GAL_POLYGON_ROUND_ERR:                 Polygons.            (line  32)
* gal_polygon_to_counterclockwise:       Polygons.            (line 139)
* gal_polygon_vertices_sort:             Polygons.            (line 159)
* gal_polygon_vertices_sort_convex:      Polygons.            (line  37)
* gal_qsort_index_multi_d:               Qsort functions.     (line 107)
* gal_qsort_index_multi_i:               Qsort functions.     (line 123)
* gal_qsort_index_single:                Qsort functions.     (line  27)
* gal_qsort_index_single_TYPE_d:         Qsort functions.     (line  69)
* gal_qsort_index_single_TYPE_i:         Qsort functions.     (line  99)
* gal_qsort_TYPE_d:                      Qsort functions.     (line  51)
* gal_qsort_TYPE_i:                      Qsort functions.     (line  60)
* GAL_SPECLINES_ANGSTROM_BLIMIT:         Spectral lines library.
                                                              (line  73)
* GAL_SPECLINES_ANGSTROM_CIII:           Spectral lines library.
                                                              (line  78)
* GAL_SPECLINES_ANGSTROM_CIIIBLUE:       Spectral lines library.
                                                              (line  79)
* GAL_SPECLINES_ANGSTROM_CIIIRED:        Spectral lines library.
                                                              (line  77)
* GAL_SPECLINES_ANGSTROM_HALPHA:         Spectral lines library.
                                                              (line  59)
* GAL_SPECLINES_ANGSTROM_HBETA:          Spectral lines library.
                                                              (line  64)
* GAL_SPECLINES_ANGSTROM_HDELTA:         Spectral lines library.
                                                              (line  67)
* GAL_SPECLINES_ANGSTROM_HEIIBLUE:       Spectral lines library.
                                                              (line  80)
* GAL_SPECLINES_ANGSTROM_HEIIRED:        Spectral lines library.
                                                              (line  65)
* GAL_SPECLINES_ANGSTROM_HEPSILON:       Spectral lines library.
                                                              (line  68)
* GAL_SPECLINES_ANGSTROM_HGAMMA:         Spectral lines library.
                                                              (line  66)
* GAL_SPECLINES_ANGSTROM_LYALPHA:        Spectral lines library.
                                                              (line  81)
* GAL_SPECLINES_ANGSTROM_LYLIMIT:        Spectral lines library.
                                                              (line  82)
* GAL_SPECLINES_ANGSTROM_MGII:           Spectral lines library.
                                                              (line  75)
* GAL_SPECLINES_ANGSTROM_MGIIBLUE:       Spectral lines library.
                                                              (line  76)
* GAL_SPECLINES_ANGSTROM_MGIIRED:        Spectral lines library.
                                                              (line  74)
* GAL_SPECLINES_ANGSTROM_NEIII:          Spectral lines library.
                                                              (line  69)
* GAL_SPECLINES_ANGSTROM_NII:            Spectral lines library.
                                                              (line  58)
* GAL_SPECLINES_ANGSTROM_NIIBLUE:        Spectral lines library.
                                                              (line  60)
* GAL_SPECLINES_ANGSTROM_NIIRED:         Spectral lines library.
                                                              (line  57)
* GAL_SPECLINES_ANGSTROM_OII:            Spectral lines library.
                                                              (line  71)
* GAL_SPECLINES_ANGSTROM_OIIBLUE:        Spectral lines library.
                                                              (line  72)
* GAL_SPECLINES_ANGSTROM_OIII:           Spectral lines library.
                                                              (line  62)
* GAL_SPECLINES_ANGSTROM_OIIIBLUE:       Spectral lines library.
                                                              (line  63)
* GAL_SPECLINES_ANGSTROM_OIIIRED:        Spectral lines library.
                                                              (line  61)
* GAL_SPECLINES_ANGSTROM_OIIRED:         Spectral lines library.
                                                              (line  70)
* GAL_SPECLINES_ANGSTROM_SII:            Spectral lines library.
                                                              (line  55)
* GAL_SPECLINES_ANGSTROM_SIIBLUE:        Spectral lines library.
                                                              (line  56)
* GAL_SPECLINES_ANGSTROM_SIIRED:         Spectral lines library.
                                                              (line  54)
* GAL_SPECLINES_BLIMIT:                  Spectral lines library.
                                                              (line  30)
* GAL_SPECLINES_CIII:                    Spectral lines library.
                                                              (line  35)
* GAL_SPECLINES_CIIIBLUE:                Spectral lines library.
                                                              (line  36)
* GAL_SPECLINES_CIIIRED:                 Spectral lines library.
                                                              (line  34)
* GAL_SPECLINES_HALPHA:                  Spectral lines library.
                                                              (line  16)
* GAL_SPECLINES_HBETA:                   Spectral lines library.
                                                              (line  21)
* GAL_SPECLINES_HDELTA:                  Spectral lines library.
                                                              (line  24)
* GAL_SPECLINES_HEIIBLUE:                Spectral lines library.
                                                              (line  37)
* GAL_SPECLINES_HEIIRED:                 Spectral lines library.
                                                              (line  22)
* GAL_SPECLINES_HEPSILON:                Spectral lines library.
                                                              (line  25)
* GAL_SPECLINES_HGAMMA:                  Spectral lines library.
                                                              (line  23)
* GAL_SPECLINES_INVALID:                 Spectral lines library.
                                                              (line  10)
* GAL_SPECLINES_INVALID_MAX:             Spectral lines library.
                                                              (line  40)
* gal_speclines_line_angstrom:           Spectral lines library.
                                                              (line 132)
* gal_speclines_line_code:               Spectral lines library.
                                                              (line 125)
* gal_speclines_line_name:               Spectral lines library.
                                                              (line 118)
* gal_speclines_line_redshift:           Spectral lines library.
                                                              (line 137)
* gal_speclines_line_redshift_code:      Spectral lines library.
                                                              (line 144)
* GAL_SPECLINES_LYALPHA:                 Spectral lines library.
                                                              (line  38)
* GAL_SPECLINES_LYLIMIT:                 Spectral lines library.
                                                              (line  39)
* GAL_SPECLINES_MGII:                    Spectral lines library.
                                                              (line  32)
* GAL_SPECLINES_MGIIBLUE:                Spectral lines library.
                                                              (line  33)
* GAL_SPECLINES_MGIIRED:                 Spectral lines library.
                                                              (line  31)
* GAL_SPECLINES_NAME_BLIMIT:             Spectral lines library.
                                                              (line 104)
* GAL_SPECLINES_NAME_CIII:               Spectral lines library.
                                                              (line 109)
* GAL_SPECLINES_NAME_CIIIBLUE:           Spectral lines library.
                                                              (line 110)
* GAL_SPECLINES_NAME_CIIIRED:            Spectral lines library.
                                                              (line 108)
* GAL_SPECLINES_NAME_HALPHA:             Spectral lines library.
                                                              (line  90)
* GAL_SPECLINES_NAME_HBETA:              Spectral lines library.
                                                              (line  95)
* GAL_SPECLINES_NAME_HDELTA:             Spectral lines library.
                                                              (line  98)
* GAL_SPECLINES_NAME_HEIIBLUE:           Spectral lines library.
                                                              (line 111)
* GAL_SPECLINES_NAME_HEIIRED:            Spectral lines library.
                                                              (line  96)
* GAL_SPECLINES_NAME_HEPSILON:           Spectral lines library.
                                                              (line  99)
* GAL_SPECLINES_NAME_HGAMMA:             Spectral lines library.
                                                              (line  97)
* GAL_SPECLINES_NAME_LYALPHA:            Spectral lines library.
                                                              (line 112)
* GAL_SPECLINES_NAME_LYLIMIT:            Spectral lines library.
                                                              (line 113)
* GAL_SPECLINES_NAME_MGII:               Spectral lines library.
                                                              (line 106)
* GAL_SPECLINES_NAME_MGIIBLUE:           Spectral lines library.
                                                              (line 107)
* GAL_SPECLINES_NAME_MGIIRED:            Spectral lines library.
                                                              (line 105)
* GAL_SPECLINES_NAME_NEIII:              Spectral lines library.
                                                              (line 100)
* GAL_SPECLINES_NAME_NII:                Spectral lines library.
                                                              (line  89)
* GAL_SPECLINES_NAME_NIIBLUE:            Spectral lines library.
                                                              (line  91)
* GAL_SPECLINES_NAME_NIIRED:             Spectral lines library.
                                                              (line  88)
* GAL_SPECLINES_NAME_OII:                Spectral lines library.
                                                              (line 102)
* GAL_SPECLINES_NAME_OIIBLUE:            Spectral lines library.
                                                              (line 103)
* GAL_SPECLINES_NAME_OIII:               Spectral lines library.
                                                              (line  93)
* GAL_SPECLINES_NAME_OIIIBLUE:           Spectral lines library.
                                                              (line  94)
* GAL_SPECLINES_NAME_OIIIRED:            Spectral lines library.
                                                              (line  92)
* GAL_SPECLINES_NAME_OIIRED:             Spectral lines library.
                                                              (line 101)
* GAL_SPECLINES_NAME_SII:                Spectral lines library.
                                                              (line  86)
* GAL_SPECLINES_NAME_SIIBLUE:            Spectral lines library.
                                                              (line  87)
* GAL_SPECLINES_NAME_SIIRED:             Spectral lines library.
                                                              (line  85)
* GAL_SPECLINES_NEIII:                   Spectral lines library.
                                                              (line  26)
* GAL_SPECLINES_NII:                     Spectral lines library.
                                                              (line  15)
* GAL_SPECLINES_NIIBLUE:                 Spectral lines library.
                                                              (line  17)
* GAL_SPECLINES_NIIRED:                  Spectral lines library.
                                                              (line  14)
* GAL_SPECLINES_OII:                     Spectral lines library.
                                                              (line  28)
* GAL_SPECLINES_OIIBLUE:                 Spectral lines library.
                                                              (line  29)
* GAL_SPECLINES_OIII:                    Spectral lines library.
                                                              (line  19)
* GAL_SPECLINES_OIIIBLUE:                Spectral lines library.
                                                              (line  20)
* GAL_SPECLINES_OIIIRED:                 Spectral lines library.
                                                              (line  18)
* GAL_SPECLINES_OIIRED:                  Spectral lines library.
                                                              (line  27)
* GAL_SPECLINES_SII:                     Spectral lines library.
                                                              (line  12)
* GAL_SPECLINES_SIIBLUE:                 Spectral lines library.
                                                              (line  13)
* GAL_SPECLINES_SIIRED:                  Spectral lines library.
                                                              (line  11)
* GAL_STATISTICS_BINS_INVALID:           Statistical operations.
                                                              (line  26)
* GAL_STATISTICS_BINS_IRREGULAR:         Statistical operations.
                                                              (line  28)
* GAL_STATISTICS_BINS_REGULAR:           Statistical operations.
                                                              (line  27)
* gal_statistics_cfp:                    Statistical operations.
                                                              (line 316)
* gal_statistics_histogram:              Statistical operations.
                                                              (line 298)
* gal_statistics_is_sorted:              Statistical operations.
                                                              (line 186)
* gal_statistics_maximum:                Statistical operations.
                                                              (line  45)
* gal_statistics_mean:                   Statistical operations.
                                                              (line  58)
* gal_statistics_mean_std:               Statistical operations.
                                                              (line  70)
* gal_statistics_median:                 Statistical operations.
                                                              (line  83)
* gal_statistics_minimum:                Statistical operations.
                                                              (line  38)
* gal_statistics_mode:                   Statistical operations.
                                                              (line 146)
* GAL_STATISTICS_MODE_GOOD_SYM:          Statistical operations.
                                                              (line  20)
* gal_statistics_mode_mirror_plots:      Statistical operations.
                                                              (line 170)
* gal_statistics_no_blank_sorted:        Statistical operations.
                                                              (line 226)
* gal_statistics_number:                 Statistical operations.
                                                              (line  32)
* gal_statistics_outlier_flat_cfp:       Statistical operations.
                                                              (line 418)
* gal_statistics_outlier_positive:       Statistical operations.
                                                              (line 366)
* gal_statistics_quantile:               Statistical operations.
                                                              (line 104)
* gal_statistics_quantile_function:      Statistical operations.
                                                              (line 123)
* gal_statistics_quantile_function_index: Statistical operations.
                                                              (line 113)
* gal_statistics_quantile_index:         Statistical operations.
                                                              (line  97)
* gal_statistics_regular_bins:           Statistical operations.
                                                              (line 254)
* gal_statistics_sigma_clip:             Statistical operations.
                                                              (line 337)
* GAL_STATISTICS_SIG_CLIP_MAX_CONVERGE:  Statistical operations.
                                                              (line  15)
* gal_statistics_sort_decreasing:        Statistical operations.
                                                              (line 220)
* gal_statistics_sort_increasing:        Statistical operations.
                                                              (line 214)
* gal_statistics_std:                    Statistical operations.
                                                              (line  64)
* gal_statistics_sum:                    Statistical operations.
                                                              (line  52)
* gal_statistics_unique:                 Statistical operations.
                                                              (line 135)
* gal_table_comments_add_intro:          Table input output.  (line 170)
* GAL_TABLE_DEF_PRECISION_DBL:           Table input output.  (line  30)
* GAL_TABLE_DEF_PRECISION_FLT:           Table input output.  (line  29)
* GAL_TABLE_DEF_PRECISION_INT:           Table input output.  (line  28)
* GAL_TABLE_DEF_WIDTH_DBL:               Table input output.  (line  27)
* GAL_TABLE_DEF_WIDTH_FLT:               Table input output.  (line  26)
* GAL_TABLE_DEF_WIDTH_INT:               Table input output.  (line  24)
* GAL_TABLE_DEF_WIDTH_LINT:              Table input output.  (line  25)
* GAL_TABLE_DEF_WIDTH_STR:               Table input output.  (line  23)
* GAL_TABLE_DISPLAY_FMT_DECIMAL:         Table input output.  (line  39)
* GAL_TABLE_DISPLAY_FMT_EXP:             Table input output.  (line  44)
* GAL_TABLE_DISPLAY_FMT_FLOAT:           Table input output.  (line  43)
* GAL_TABLE_DISPLAY_FMT_GENERAL:         Table input output.  (line  45)
* GAL_TABLE_DISPLAY_FMT_HEX:             Table input output.  (line  42)
* GAL_TABLE_DISPLAY_FMT_OCTAL:           Table input output.  (line  41)
* GAL_TABLE_DISPLAY_FMT_STRING:          Table input output.  (line  38)
* GAL_TABLE_DISPLAY_FMT_UDECIMAL:        Table input output.  (line  40)
* GAL_TABLE_FORMAT_AFITS:                Table input output.  (line  67)
* GAL_TABLE_FORMAT_BFITS:                Table input output.  (line  68)
* GAL_TABLE_FORMAT_INVALID:              Table input output.  (line  65)
* GAL_TABLE_FORMAT_TXT:                  Table input output.  (line  66)
* gal_table_info:                        Table input output.  (line  83)
* gal_table_list_of_indexs:              Table input output.  (line 158)
* gal_table_print_info:                  Table input output.  (line 109)
* gal_table_read:                        Table input output.  (line 118)
* GAL_TABLE_SEARCH_COMMENT:              Table input output.  (line  76)
* GAL_TABLE_SEARCH_INVALID:              Table input output.  (line  73)
* GAL_TABLE_SEARCH_NAME:                 Table input output.  (line  74)
* GAL_TABLE_SEARCH_UNIT:                 Table input output.  (line  75)
* gal_table_write:                       Table input output.  (line 187)
* gal_table_write_log:                   Table input output.  (line 221)
* gal_threads_attr_barrier_init:         Gnuastro's thread related functions.
                                                              (line  60)
* gal_threads_dist_in_threads:           Gnuastro's thread related functions.
                                                              (line  73)
* gal_threads_number:                    Gnuastro's thread related functions.
                                                              (line  40)
* gal_threads_spin_off:                  Gnuastro's thread related functions.
                                                              (line  49)
* gal_tiff_dir_string_read:              TIFF files.          (line  37)
* gal_tiff_name_is_tiff:                 TIFF files.          (line  24)
* gal_tiff_read:                         TIFF files.          (line  44)
* gal_tiff_suffix_is_tiff:               TIFF files.          (line  31)
* gal_tile_block:                        Independent tiles.   (line  79)
* gal_tile_block_blank_flag:             Independent tiles.   (line 162)
* gal_tile_block_check_tiles:            Independent tiles.   (line 140)
* gal_tile_block_increment:              Independent tiles.   (line  89)
* gal_tile_block_relative_to_other:      Independent tiles.   (line 153)
* gal_tile_block_write_const_value:      Independent tiles.   (line 105)
* gal_tile_full:                         Tile grid.           (line  51)
* gal_tile_full_free_contents:           Tile grid.           (line 242)
* gal_tile_full_id_from_coord:           Tile grid.           (line 233)
* gal_tile_full_permutation:             Tile grid.           (line 152)
* gal_tile_full_sanity_check:            Tile grid.           (line 117)
* gal_tile_full_two_layers:              Tile grid.           (line 126)
* gal_tile_full_values_smooth:           Tile grid.           (line 222)
* gal_tile_full_values_write:            Tile grid.           (line 205)
* GAL_TILE_PARSE_OPERATE:                Independent tiles.   (line 170)
* gal_tile_series_from_minmax:           Independent tiles.   (line  58)
* gal_tile_start_coord:                  Independent tiles.   (line  14)
* gal_tile_start_end_coord:              Independent tiles.   (line  22)
* gal_tile_start_end_ind_inclusive:      Independent tiles.   (line  41)
* gal_txt_image_read:                    Text files.          (line 102)
* GAL_TXT_LINESTAT_BLANK:                Text files.          (line  25)
* GAL_TXT_LINESTAT_COMMENT:              Text files.          (line  26)
* GAL_TXT_LINESTAT_DATAROW:              Text files.          (line  27)
* GAL_TXT_LINESTAT_INVALID:              Text files.          (line  24)
* gal_txt_line_stat:                     Text files.          (line  34)
* gal_txt_stdin_read:                    Text files.          (line 120)
* gal_txt_table_info:                    Text files.          (line  51)
* gal_txt_table_read:                    Text files.          (line  77)
* gal_txt_trim_space:                    Text files.          (line  41)
* gal_txt_write:                         Text files.          (line 146)
* GAL_TYPE_BIT:                          Library data types.  (line  44)
* gal_type_bit_string:                   Library data types.  (line 204)
* GAL_TYPE_COMPLEX32:                    Library data types.  (line 109)
* GAL_TYPE_COMPLEX64:                    Library data types.  (line 114)
* GAL_TYPE_FLOAT32:                      Library data types.  (line 101)
* GAL_TYPE_FLOAT64:                      Library data types.  (line 105)
* gal_type_from_name:                    Library data types.  (line 149)
* gal_type_from_string:                  Library data types.  (line 244)
* GAL_TYPE_INT:                          Library data types.  (line  80)
* GAL_TYPE_INT16:                        Library data types.  (line  60)
* GAL_TYPE_INT32:                        Library data types.  (line  68)
* GAL_TYPE_INT64:                        Library data types.  (line  76)
* GAL_TYPE_INT8:                         Library data types.  (line  52)
* GAL_TYPE_INVALID:                      Library data types.  (line  40)
* gal_type_is_int:                       Library data types.  (line 188)
* gal_type_is_list:                      Library data types.  (line 193)
* GAL_TYPE_LONG:                         Library data types.  (line  93)
* gal_type_max:                          Library data types.  (line 173)
* gal_type_min:                          Library data types.  (line 158)
* gal_type_name:                         Library data types.  (line 137)
* gal_type_out:                          Library data types.  (line 198)
* gal_type_sizeof:                       Library data types.  (line 130)
* GAL_TYPE_SIZE_T:                       Library data types.  (line  97)
* GAL_TYPE_STRING:                       Library data types.  (line 119)
* gal_type_string_to_number:             Library data types.  (line 275)
* GAL_TYPE_STRLL:                        Library data types.  (line 122)
* gal_type_to_string:                    Library data types.  (line 226)
* GAL_TYPE_UINT:                         Library data types.  (line  84)
* GAL_TYPE_UINT16:                       Library data types.  (line  56)
* GAL_TYPE_UINT32:                       Library data types.  (line  64)
* GAL_TYPE_UINT64:                       Library data types.  (line  72)
* GAL_TYPE_UINT8:                        Library data types.  (line  48)
* GAL_TYPE_ULONG:                        Library data types.  (line  88)
* gal_units_dec_to_degree:               Unit conversion library (units.h).
                                                              (line  33)
* gal_units_degree_to_dec:               Unit conversion library (units.h).
                                                              (line  46)
* gal_units_degree_to_ra:                Unit conversion library (units.h).
                                                              (line  39)
* gal_units_extract_decimal:             Unit conversion library (units.h).
                                                              (line  11)
* gal_units_ra_to_degree:                Unit conversion library (units.h).
                                                              (line  27)
* gal_wcs_angular_distance_deg:          World Coordinate System.
                                                              (line 109)
* gal_wcs_copy:                          World Coordinate System.
                                                              (line  54)
* gal_wcs_decompose_pc_cdelt:            World Coordinate System.
                                                              (line  90)
* gal_wcs_img_to_world:                  World Coordinate System.
                                                              (line 164)
* gal_wcs_on_tile:                       World Coordinate System.
                                                              (line  65)
* gal_wcs_pixel_area_arcsec2:            World Coordinate System.
                                                              (line 135)
* gal_wcs_pixel_scale:                   World Coordinate System.
                                                              (line 127)
* gal_wcs_read:                          World Coordinate System.
                                                              (line  45)
* gal_wcs_read_fitsptr:                  World Coordinate System.
                                                              (line  13)
* gal_wcs_remove_dimension:              World Coordinate System.
                                                              (line  59)
* gal_wcs_warp_matrix:                   World Coordinate System.
                                                              (line  80)
* gal_wcs_world_to_img:                  World Coordinate System.
                                                              (line 143)
* pthread_barrierattr_t:                 Implementation of pthread_barrier.
                                                              (line  22)
* pthread_barrier_destroy:               Implementation of pthread_barrier.
                                                              (line  43)
* pthread_barrier_init:                  Implementation of pthread_barrier.
                                                              (line  28)
* pthread_barrier_t:                     Implementation of pthread_barrier.
                                                              (line  25)
* pthread_barrier_wait:                  Implementation of pthread_barrier.
                                                              (line  36)

Index
*****

 [index ]
* Menu:

* $HOME:                                 Current directory and User wide.
                                                              (line   6)
* $HOME/.local/etc/:                     Current directory and User wide.
                                                              (line   6)
* --:                                    Operating mode options.
                                                              (line  11)
* --checkconfig:                         Operating mode options.
                                                              (line 118)
* --cite:                                Operating mode options.
                                                              (line  55)
* --config=STR:                          Operating mode options.
                                                              (line 103)
* --disable-guide-message:               Gnuastro configure options.
                                                              (line  84)
* --disable-progname:                    Gnuastro configure options.
                                                              (line  61)
* --dontdelete:                          Input output options.
                                                              (line  87)
* --enable-check-with-valgrind:          Gnuastro configure options.
                                                              (line  31)
* --enable-debug:                        Gnuastro configure options.
                                                              (line  12)
* --enable-gnulibcheck:                  Gnuastro configure options.
                                                              (line  71)
* --enable-gnulibcheck <1>:              Known issues.        (line  37)
* --enable-guide-message=no:             Gnuastro configure options.
                                                              (line  85)
* --enable-progname:                     Gnuastro configure options.
                                                              (line  48)
* --enable-progname=no:                  Gnuastro configure options.
                                                              (line  62)
* --enable-reentrant:                    CFITSIO.             (line  13)
* --hdu=STR/INT:                         Input output options.
                                                              (line  36)
* --help:                                Arguments and options.
                                                              (line  33)
* --help <1>:                            Operating mode options.
                                                              (line  27)
* --help <2>:                            --help.              (line   6)
* --help output customization:           --help.              (line  55)
* --ignorecase:                          Input output options.
                                                              (line  62)
* --keepinputdir:                        Input output options.
                                                              (line  94)
* --keepinputdir <1>:                    Automatic output.    (line  17)
* --lastconfig:                          Operating mode options.
                                                              (line 162)
* --log:                                 Operating mode options.
                                                              (line 234)
* --numthreads:                          Configuration files. (line  15)
* --numthreads <1>:                      Multi-threaded operations.
                                                              (line  16)
* --numthreads=INT:                      Operating mode options.
                                                              (line 247)
* --onlyversion=STR:                     Operating mode options.
                                                              (line 174)
* --output:                              Configuration files. (line  15)
* --output=STR:                          Input output options.
                                                              (line  74)
* --prefix:                              Installation directory.
                                                              (line   6)
* --printparams:                         Options.             (line  64)
* --printparams <1>:                     Operating mode options.
                                                              (line  81)
* --program-prefix:                      Executable names.    (line  50)
* --program-suffix:                      Executable names.    (line  50)
* --program-transform-name:              Executable names.    (line  50)
* --quiet:                               Operating mode options.
                                                              (line  46)
* --searchin=STR:                        Input output options.
                                                              (line  55)
* --setdirconf:                          Operating mode options.
                                                              (line 133)
* --setdirconf <1>:                      Current directory and User wide.
                                                              (line  16)
* --setusrconf:                          Operating mode options.
                                                              (line 157)
* --setusrconf <1>:                      Current directory and User wide.
                                                              (line  16)
* --stdintimeout:                        Input output options.
                                                              (line   9)
* --tableformat=STR:                     Input output options.
                                                              (line 107)
* --type=STR:                            Input output options.
                                                              (line  80)
* --usage:                               Arguments and options.
                                                              (line  33)
* --usage <1>:                           Operating mode options.
                                                              (line  21)
* --usage <2>:                           --usage.             (line   6)
* --version:                             Operating mode options.
                                                              (line  38)
* --without-libgit2:                     Gnuastro configure options.
                                                              (line  98)
* --without-libjpeg:                     Gnuastro configure options.
                                                              (line 104)
* --without-libtiff:                     Gnuastro configure options.
                                                              (line 110)
* --without-pgplot:                      WCSLIB.              (line  16)
* -?:                                    Operating mode options.
                                                              (line  26)
* -D:                                    Input output options.
                                                              (line  86)
* -h STR/INT:                            Input output options.
                                                              (line  35)
* -I:                                    Input output options.
                                                              (line  61)
* -K:                                    Input output options.
                                                              (line  93)
* -mecube (ds9):                         Viewing multiextension FITS images.
                                                              (line  15)
* -N INT:                                Operating mode options.
                                                              (line 246)
* -o STR:                                Input output options.
                                                              (line  73)
* -P:                                    Operating mode options.
                                                              (line  80)
* -q:                                    Operating mode options.
                                                              (line  45)
* -S:                                    Operating mode options.
                                                              (line 132)
* -s STR:                                Input output options.
                                                              (line  54)
* -T STR:                                Input output options.
                                                              (line  79)
* -t STR:                                Input output options.
                                                              (line 106)
* -U:                                    Operating mode options.
                                                              (line 156)
* -V:                                    Operating mode options.
                                                              (line  37)
* ./.gnuastro/:                          Current directory and User wide.
                                                              (line   6)
* ./configure:                           Configuring.         (line   6)
* ./configure <1>:                       Installation directory.
                                                              (line  72)
* ./configure options:                   Gnuastro configure options.
                                                              (line   6)
* .bashrc:                               --help.              (line  65)
* .bashrc <1>:                           Generating random numbers.
                                                              (line  62)
* .desktop:                              Viewing multiextension FITS images.
                                                              (line 138)
* 32-bit:                                Configuration information.
                                                              (line  56)
* 3D data-cubes:                         Arithmetic operators.
                                                              (line 336)
* 3D data-cubes <1>:                     MakeCatalog measurements.
                                                              (line 461)
* 64-bit:                                Configuration information.
                                                              (line  56)
* A4 paper size:                         A4 print book.       (line   6)
* A4 print book:                         A4 print book.       (line   6)
* Abd al-rahman Sufi:                    Sufi simulates a detection.
                                                              (line   6)
* Abraham de Moivre:                     Circles and the complex plane.
                                                              (line  16)
* ACS:                                   Warp.                (line  53)
* Additions to Gnuastro:                 Suggest new feature. (line   6)
* Adjacency matrix:                      Binary datasets.     (line 154)
* Adobe systems:                         Recognized file formats.
                                                              (line  70)
* ADU:                                   Flux Brightness and magnitude.
                                                              (line   6)
* ADU <1>:                               Instrumental noise.  (line  23)
* Advanced camera for surveys:           Warp.                (line  53)
* Advanced Camera for Surveys:           Warping basics.      (line  51)
* Advanced Packaging Tool (APT, Debian): Dependencies from package managers.
                                                              (line  56)
* Affine Transformation:                 Warping basics.      (line  85)
* Akima spline interpolation:            Interpolation.       (line  88)
* al-Shirazi, Qutb al-Din:               Fourier series historical background.
                                                              (line  27)
* Albert. A. Michelson:                  Science and its tools.
                                                              (line 185)
* Algorithm: watershed:                  Labeled datasets.    (line  98)
* Alias, shell:                          Invoking astmkprof.  (line  83)
* Almagest:                              Sufi simulates a detection.
                                                              (line  19)
* Amplifier:                             Tessellation.        (line  54)
* Announcements:                         Announcements.       (line   6)
* Anonymous bug submission:              Report a bug.        (line  84)
* Anscombe F. J.:                        Science and its tools.
                                                              (line  24)
* Anscombe’s quartet:                    Science and its tools.
                                                              (line  32)
* ANSI C:                                Why C.               (line  15)
* Aperture blurring:                     Sigma clipping.      (line  22)
* apt-get:                               Dependencies from package managers.
                                                              (line  56)
* Arch Linux:                            Dependencies from package managers.
                                                              (line 112)
* Argp argument parser:                  --help.              (line  55)
* Argp argument parser <1>:              Mandatory source code files.
                                                              (line  69)
* ARGP_HELP_FMT:                         --help.              (line  55)
* args.h:                                Mandatory source code files.
                                                              (line  68)
* Arguments to programs:                 Arguments and options.
                                                              (line   6)
* Aristarchus of Samos:                  Fourier series historical background.
                                                              (line  54)
* Array:                                 Linked lists.        (line   6)
* ASCII plot:                            Invoking aststatistics.
                                                              (line 116)
* ASCII table, FITS:                     Recognized table formats.
                                                              (line  19)
* ASCII85 encoding:                      Invoking astconvertt.
                                                              (line 128)
* ASCII85 encoding <1>:                  EPS files.           (line  58)
* astprogname:                           Naming convention.   (line  15)
* Astronomical data format:              Recognized file formats.
                                                              (line  11)
* Astronomical data suffixes:            Arguments.           (line  22)
* Astronomical Magnitude system:         Flux Brightness and magnitude.
                                                              (line  28)
* Asynchronous thread allocation:        Invoking astcrop.    (line  60)
* Atmosphere:                            Convolve.            (line  25)
* Atmosphere blurring:                   Sigma clipping.      (line  22)
* authors-cite.h:                        Mandatory source code files.
                                                              (line 147)
* Auto-complete in the shell:            Executable names.    (line  14)
* Automatic configuration file writing:  Configuration file format.
                                                              (line  33)
* Automatic output file names:           Automatic output.    (line   6)
* Automatically created build files:     Bootstrapping.       (line   6)
* Available number of threads:           Multi-threaded operations.
                                                              (line  16)
* Average:                               Statistical operations.
                                                              (line  58)
* Average, weighted:                     Convolve.            (line   6)
* AWK:                                   Achieved surface brightness level.
                                                              (line 187)
* AWK <1>:                               Standard input.      (line  41)
* AWK <2>:                               Table.               (line  31)
* AWK <3>:                               Invoking asttable.   (line  95)
* AWK <4>:                               Invoking astarithmetic.
                                                              (line 215)
* AWK <5>:                               Invoking aststatistics.
                                                              (line 163)
* AWK <6>:                               Table input output.  (line 137)
* Axis ratio:                            Defining an ellipse and ellipsoid.
                                                              (line   6)
* Azophi:                                Sufi simulates a detection.
                                                              (line   6)
* Background flux:                       Sky value definition.
                                                              (line  18)
* Background flux <1>:                   Photon counting noise.
                                                              (line  49)
* Background pixels:                     Detection options.   (line  53)
* Backup:                                Configure and build in RAM.
                                                              (line  15)
* Balmer limit:                          CosmicCalculator input options.
                                                              (line 131)
* Balmer limit <1>:                      Spectral lines library.
                                                              (line  10)
* Best use of CPU threads:               A note on threads.   (line   6)
* Bi-linear interpolation:               Resampling.          (line  21)
* Bias current:                          Tessellation.        (line  54)
* Bicubic interpolation:                 Resampling.          (line  21)
* Bin width, histogram:                  Histogram and Cumulative Frequency Plot.
                                                              (line  21)
* Binary datasets:                       Binary datasets.     (line   6)
* Binary image:                          Recognized file formats.
                                                              (line  93)
* Binary image <1>:                      Detection options.   (line  53)
* Binary table, FITS:                    Recognized table formats.
                                                              (line  54)
* Bit:                                   Numeric data types.  (line   6)
* bit-32:                                Configuration information.
                                                              (line  56)
* bit-64:                                Configuration information.
                                                              (line  56)
* Bitwise Or:                            Arithmetic on datasets.
                                                              (line  40)
* Black and white image:                 Recognized file formats.
                                                              (line  93)
* blank color channel:                   Recognized file formats.
                                                              (line 116)
* Blank data:                            Generic data container.
                                                              (line 157)
* Blank pixel:                           Blank pixels.        (line   6)
* Blank pixel <1>:                       Arithmetic operators.
                                                              (line 530)
* Blur image:                            Convolve.            (line  25)
* Blur image <1>:                        PSF.                 (line  17)
* Blurring:                              Sigma clipping.      (line  22)
* Book formats:                          Getting help.        (line   6)
* Bootstrapping:                         Bootstrapping.       (line   6)
* Border on an image:                    Invoking astconvertt.
                                                              (line 107)
* Brahe, Tycho:                          Science and its tools.
                                                              (line 124)
* Breadth first search:                  Defining an ellipse and ellipsoid.
                                                              (line  68)
* Breadth first search <1>:              Binary datasets.     (line 118)
* brew:                                  Dependencies from package managers.
                                                              (line  91)
* Brightness:                            Galaxies.            (line  11)
* Brightness <1>:                        Flux Brightness and magnitude.
                                                              (line  13)
* Brightness <2>:                        Profile magnitude.   (line   6)
* Buffers (Emacs):                       Coding conventions.  (line  41)
* Bug:                                   Report a bug.        (line   6)
* Bug <1>:                               Gnuastro project webpage.
                                                              (line   6)
* Bug reporting:                         Report a bug.        (line  16)
* Bug tracker:                           Report a bug.        (line  97)
* bug-gnuastro@gnu.org:                  Report a bug.        (line  78)
* Build:                                 Quick start.         (line   6)
* Build individual profiles:             MakeProfiles output dataset.
                                                              (line 165)
* Build tree:                            Test scripts.        (line  25)
* Building from source:                  Dependencies from package managers.
                                                              (line   6)
* Byte:                                  Numeric data types.  (line  16)
* Bzip2:                                 Detecting large extended targets.
                                                              (line  58)
* C compiler:                            Invoking astbuildprog.
                                                              (line  72)
* C Pre-Processor:                       Invoking astbuildprog.
                                                              (line  89)
* C programming language:                Why C.               (line   6)
* C++ programming language:              Why C.               (line   6)
* C, plotting:                           PGPLOT.              (line   6)
* C99:                                   Pointers.            (line  51)
* C: restrict:                           Generic data container.
                                                              (line  61)
* Cache, system:                         A note on threads.   (line  29)
* Calendar:                              Sort FITS files by night.
                                                              (line   6)
* Camera:                                Resampling.          (line   6)
* CANDELS survey:                        Crop options.        (line  23)
* CANDELS survey <1>:                    Quantifying measurement limits.
                                                              (line  70)
* Caspar Wessel:                         Circles and the complex plane.
                                                              (line  16)
* CC:                                    Invoking astbuildprog.
                                                              (line 204)
* CCD:                                   Tessellation.        (line  54)
* CCD <1>:                               Warp.                (line  53)
* CDELT:                                 Angular coverage on the sky.
                                                              (line   6)
* CentOS:                                Dependencies from package managers.
                                                              (line  76)
* Central management:                    Gnuastro project webpage.
                                                              (line   6)
* CFITSIO:                               CFITSIO.             (line   6)
* CFITSIO <1>:                           Keyword manipulation.
                                                              (line 193)
* CFITSIO <2>:                           Configuration information.
                                                              (line  34)
* CFITSIO <3>:                           FITS files.          (line   6)
* CFITSIO version on outputs:            Output FITS files.   (line   6)
* Change converted pixel values:         Invoking astconvertt.
                                                              (line 208)
* Channel:                               Tessellation.        (line  65)
* Channel <1>:                           Array input output.  (line  68)
* Channel, color:                        Color.               (line  14)
* Charge-coupled device:                 Warp.                (line  53)
* Check:                                 Quick start.         (line   6)
* Check center of crop:                  Crop options.        (line 224)
* Checking detection algorithms:         MakeProfiles.        (line   6)
* Checking tests:                        Tests.               (line   6)
* CHECKSUM: FITS keyword:                Keyword manipulation.
                                                              (line 193)
* CIII doublet:                          CosmicCalculator input options.
                                                              (line 146)
* CIII doublet <1>:                      Spectral lines library.
                                                              (line  10)
* Citation information:                  Mandatory source code files.
                                                              (line 148)
* Claudius Ptolemy:                      Sufi simulates a detection.
                                                              (line  19)
* CLI: command-line user interface:      Command-line interface.
                                                              (line   6)
* CLI: repeating operations:             Command-line interface.
                                                              (line  53)
* Clump:                                 Labeled datasets.    (line 159)
* Clump magnitude limit:                 Quantifying measurement limits.
                                                              (line   6)
* CMYK:                                  Color.               (line   6)
* Color:                                 Color.               (line   6)
* Color channel:                         Color.               (line  14)
* Color channel <1>:                     Array input output.  (line  68)
* Colormap:                              Color.               (line   6)
* Colormap, gray-scale:                  Color.               (line  35)
* Colormap, HSV:                         Color.               (line  35)
* Colormap: SLS:                         Invoking astconvertt.
                                                              (line 185)
* Colormap: Viridis:                     Invoking astconvertt.
                                                              (line 180)
* Colors, broad-band photometry:         General program usage tutorial.
                                                              (line   6)
* Colorspace, gray-scale:                Invoking astconvertt.
                                                              (line 162)
* Colorspace, HSV:                       Invoking astconvertt.
                                                              (line 167)
* Command-line arguments:                Arguments and options.
                                                              (line   6)
* Command-line help:                     Getting help.        (line  13)
* Command-line options:                  Arguments and options.
                                                              (line   6)
* Command-line scroll:                   --help.              (line  27)
* Command-line searching text:           --help.              (line  47)
* Command-line user interface:           Command-line interface.
                                                              (line   6)
* Command-line, long outputs:            --help.              (line  22)
* Command-line, viewing full book:       Info.                (line   6)
* Comments:                              Sufi simulates a detection.
                                                              (line 348)
* Commutative property:                  Merging multiple warpings.
                                                              (line   6)
* Comoving distance:                     Distance on a 2D curved space.
                                                              (line 169)
* Compare Moffat and Gaussian:           PSF.                 (line  66)
* Compare Poisson and Gaussian:          Photon counting noise.
                                                              (line  37)
* Compile:                               Quick start.         (line   6)
* Compiled PostScript:                   Recognized file formats.
                                                              (line  70)
* Compiler, C:                           Invoking astbuildprog.
                                                              (line  72)
* Compiling from source:                 Dependencies from package managers.
                                                              (line   6)
* Completeness:                          Achieved surface brightness level.
                                                              (line 213)
* Completeness <1>:                      Quantifying measurement limits.
                                                              (line 148)
* Complex numbers:                       Invoking astconvolve.
                                                              (line  87)
* Compression:                           NoiseChisel output.  (line 145)
* Compression <1>:                       Segment output.      (line 107)
* Compression quality in JPEG:           Invoking astconvertt.
                                                              (line 144)
* Concave polygons:                      Crop options.        (line 177)
* Concave polygons <1>:                  Polygons.            (line  11)
* Configuration file directories:        Configuration file precedence.
                                                              (line   6)
* Configuration file format:             Configuration file format.
                                                              (line  11)
* Configuration file precedence:         Configuration file precedence.
                                                              (line   6)
* Configuration file suffix:             Configuration file format.
                                                              (line   6)
* Configuration files:                   Options.             (line  92)
* Configuration files <1>:               Configuration files. (line   6)
* Configuration files, system wide:      System wide.         (line   6)
* Configuration files, writing:          Configuration file format.
                                                              (line  33)
* Configuration, not finding library:    Known issues.        (line  11)
* Configure options:                     Configuring.         (line  12)
* Configure options particular to Gnuastro: Gnuastro configure options.
                                                              (line   6)
* Configuring:                           Configuring.         (line   6)
* Connected component labeling:          Segment.             (line  17)
* Connected component labeling <1>:      Binary datasets.     (line 118)
* Connected components:                  Arithmetic operators.
                                                              (line 429)
* Connectivity:                          Binary datasets.     (line  13)
* Contour:                               Invoking aststatistics.
                                                              (line 567)
* Convenient book formats:               Getting help.        (line   6)
* Convention for program source:         Program source.      (line   6)
* Converting data formats:               ConvertType.         (line   6)
* Converting image formats:              ConvertType.         (line   6)
* ConvertType (astconvertt):             ConvertType.         (line   6)
* Convex Hull:                           Polygons.            (line  69)
* Convex polygons:                       Crop options.        (line 177)
* Convex polygons <1>:                   Polygons.            (line  11)
* Convolution:                           Convolve.            (line   6)
* Convolution <1>:                       Convolution process. (line  24)
* Convolution <2>:                       PSF.                 (line  17)
* Convolution kernel:                    FITS arrays.         (line  64)
* Cookbook:                              Tutorials.           (line   6)
* Coordinate scales:                     Angular coverage on the sky.
                                                              (line   6)
* Coordinate transformation:             Warping basics.      (line   6)
* Coordinates, homogeneou:               Warping basics.      (line  63)
* Copyright:                             Your rights.         (line  12)
* Correlated noise:                      Quantifying measurement limits.
                                                              (line 241)
* Correlation:                           Convolution process. (line  24)
* Cosmic ray removal:                    Sky value definition.
                                                              (line  24)
* Cosmic rays:                           Convolve.            (line  25)
* Cosmic rays <1>:                       Warp.                (line  36)
* Cosmic rays <2>:                       Sigma clipping.      (line  22)
* Cosmic rays <3>:                       Sky value definition.
                                                              (line  17)
* Cosmic rays <4>:                       Quantifying signal in a tile.
                                                              (line  67)
* COSMOS survey:                         Crop.                (line  13)
* Cotes, Roger:                          Circles and the complex plane.
                                                              (line  16)
* Counting error:                        Photon counting noise.
                                                              (line   6)
* Counting from zero.:                   Options.             (line 110)
* Counts:                                Flux Brightness and magnitude.
                                                              (line   6)
* Counts <1>:                            Instrumental noise.  (line  23)
* CPPFLAGS:                              Known issues.        (line  49)
* CPPFLAGS <1>:                          Headers.             (line 153)
* CPPFLAGS <2>:                          Invoking astbuildprog.
                                                              (line 204)
* CPU threads:                           Multi-threaded operations.
                                                              (line   6)
* CPU threads <1>:                       MakeProfiles profile settings.
                                                              (line 161)
* CPU threads, number:                   Configuration files. (line  15)
* CPU threads, set number:               Operating mode options.
                                                              (line 246)
* CPU, using all threads:                Multi-threaded operations.
                                                              (line   6)
* CRLF line terminator:                  Text files.          (line  11)
* Crop (astcrop):                        Crop.                (line   6)
* Crop a given section of image:         Crop section syntax. (line   6)
* Crop part of image:                    Crop.                (line   6)
* Crop section format:                   Crop section syntax. (line  27)
* Cubes (3D data):                       Arithmetic operators.
                                                              (line 336)
* Cubes (3D data) <1>:                   MakeCatalog measurements.
                                                              (line 461)
* Cubic spline interpolation:            Interpolation.       (line  74)
* Cumulative Frequency Plot:             Histogram and Cumulative Frequency Plot.
                                                              (line  31)
* Customize --help output:               --help.              (line  55)
* Customize executable names:            Executable names.    (line  28)
* Customizing installation:              Configuring.         (line  12)
* Data:                                  Quantifying signal in a tile.
                                                              (line   6)
* Data cubes:                            Arithmetic operators.
                                                              (line 336)
* Data format conversion:                ConvertType.         (line   6)
* Data structures:                       Headers.             (line  89)
* Data type:                             Generic data container.
                                                              (line  70)
* Data’s depth:                          Quantifying measurement limits.
                                                              (line  52)
* Dataset: binary:                       Binary datasets.     (line   6)
* DATASUM: FITS keyword:                 HDU manipulation.    (line  39)
* DATASUM: FITS keyword <1>:             Keyword manipulation.
                                                              (line 193)
* Date: FITS format:                     FITS header keywords.
                                                              (line  85)
* de Moivre, Abraham:                    Circles and the complex plane.
                                                              (line  16)
* de Moivre, Abraham <1>:                Photon counting noise.
                                                              (line   6)
* de Vaucouleur profile:                 Galaxies.            (line  11)
* Debian:                                Dependencies from package managers.
                                                              (line  56)
* Debug:                                 Separate build and source directories.
                                                              (line  35)
* Debug <1>:                             Operating mode options.
                                                              (line 128)
* Debug <2>:                             Invoking astbuildprog.
                                                              (line 145)
* Debugging:                             Gnuastro configure options.
                                                              (line  13)
* Debugging <1>:                         Building and debugging.
                                                              (line  39)
* Declination:                           Column arithmetic.   (line 205)
* Declination <1>:                       Arithmetic on datasets.
                                                              (line 146)
* Declination <2>:                       Unit conversion library (units.h).
                                                              (line  36)
* Declination <3>:                       Unit conversion library (units.h).
                                                              (line  49)
* Default executable search directory:   Installation directory.
                                                              (line  72)
* Default library search directory:      Installation directory.
                                                              (line 164)
* Default option values:                 Options.             (line  92)
* Default option values <1>:             Configuration files. (line   6)
* Define section to crop:                Crop section syntax. (line  12)
* Dependencies, Gnuastro:                Mandatory dependencies.
                                                              (line   6)
* Depth:                                 Quantifying measurement limits.
                                                              (line   6)
* Detached threads:                      Gnuastro's thread related functions.
                                                              (line  64)
* Detection:                             Convolve.            (line  25)
* Detection <1>:                         NoiseChisel.         (line   6)
* Detections false:                      Quantifying measurement limits.
                                                              (line 160)
* Detector:                              Resampling.          (line   6)
* developer-build:                       Building and debugging.
                                                              (line  18)
* developer-build <1>:                   Test scripts.        (line  25)
* Development packages:                  Known issues.        (line  11)
* Diffraction limited:                   PSF.                 (line   6)
* Dilation:                              Arithmetic operators.
                                                              (line 419)
* Dilation <1>:                          Binary datasets.     (line  92)
* Directory, install:                    Installation directory.
                                                              (line 149)
* Discrete Fourier transform:            Invoking astconvolve.
                                                              (line  65)
* Distortion, optical:                   Warp.                (line  47)
* Distribution mode:                     Sky value misconceptions.
                                                              (line  22)
* Distributions, GNU/Linux:              Dependencies from package managers.
                                                              (line   6)
* dnf:                                   Dependencies from package managers.
                                                              (line  76)
* Doublet: CIII:                         CosmicCalculator input options.
                                                              (line 146)
* Doublet: CIII <1>:                     Spectral lines library.
                                                              (line  10)
* Doublet: MgII:                         CosmicCalculator input options.
                                                              (line 137)
* Doublet: MgII <1>:                     Spectral lines library.
                                                              (line  10)
* Doublet: NII:                          CosmicCalculator input options.
                                                              (line  86)
* Doublet: NII <1>:                      Spectral lines library.
                                                              (line  10)
* Doublet: OII:                          CosmicCalculator input options.
                                                              (line 125)
* Doublet: OII <1>:                      Spectral lines library.
                                                              (line  10)
* Doublet: OIII:                         CosmicCalculator input options.
                                                              (line  98)
* Doublet: OIII <1>:                     Spectral lines library.
                                                              (line  10)
* Doublet: SII:                          CosmicCalculator input options.
                                                              (line  77)
* Doublet: SII <1>:                      Spectral lines library.
                                                              (line  10)
* Douglas Rushkoff:                      Science and its tools.
                                                              (line  66)
* Drizzle:                               Resampling.          (line  48)
* DS9:                                   Multiextension FITS files NoiseChisel's output.
                                                              (line  87)
* DS9 <1>:                               Finding reddest clumps and visual inspection.
                                                              (line  74)
* DS9 <2>:                               Achieved surface brightness level.
                                                              (line 137)
* DS9 <3>:                               Invoking astconvertt.
                                                              (line 185)
* DS9 <4>:                               Segment output.      (line  21)
* Dynamic libraries:                     Installation directory.
                                                              (line 194)
* Dynamic linking:                       Linking.             (line  38)
* Dynamic linking <1>:                   Linking.             (line  64)
* Edges, image:                          Resampling.          (line  32)
* Effective radius:                      Galaxies.            (line  11)
* Efficient use of CPU threads:          A note on threads.   (line   6)
* Ellipse:                               Defining an ellipse and ellipsoid.
                                                              (line   6)
* Ellipsoid:                             Defining an ellipse and ellipsoid.
                                                              (line  35)
* Elliptical distance:                   Defining an ellipse and ellipsoid.
                                                              (line  28)
* Emacs buffers:                         Coding conventions.  (line  41)
* Encapsulated PostScript:               Recognized file formats.
                                                              (line  62)
* Environment:                           Installation directory.
                                                              (line  52)
* Environment variable, HOME:            Installation directory.
                                                              (line  65)
* Environment variables:                 Installation directory.
                                                              (line  38)
* Environment variables <1>:             Installation directory.
                                                              (line  52)
* Environment variables <2>:             Generating random numbers.
                                                              (line  26)
* Epoch time, Unix:                      FITS header keywords.
                                                              (line 111)
* Epoch, Unix time:                      Keyword manipulation.
                                                              (line 299)
* Epoch, Unix time <1>:                  Sort FITS files by night.
                                                              (line  26)
* EPS:                                   Recognized file formats.
                                                              (line  62)
* EPS <1>:                               Invoking astconvertt.
                                                              (line 274)
* EPS <2>:                               EPS files.           (line  67)
* EPS <3>:                               PDF files.           (line  50)
* Erosion:                               Arithmetic operators.
                                                              (line 409)
* Erosion <1>:                           NoiseChisel.         (line  33)
* Erosion <2>:                           Detection options.   (line  92)
* Erosion <3>:                           Binary datasets.     (line  77)
* Error, floating point round-off:       Invoking astconvolve.
                                                              (line 101)
* etc:                                   Configuration files. (line   6)
* Euler angles:                          Defining an ellipse and ellipsoid.
                                                              (line  35)
* Euler angles <1>:                      Bounding box.        (line  69)
* Euler, Leonhard:                       Circles and the complex plane.
                                                              (line  16)
* Exact area resampling:                 Resampling.          (line  48)
* Executable names:                      Executable names.    (line   6)
* eXtreme Deep Field (XDF) survey:       General program usage tutorial.
                                                              (line  25)
* eXtreme Deep Field (XDF) survey <1>:   Quantifying measurement limits.
                                                              (line  70)
* False detections:                      Quantifying measurement limits.
                                                              (line 160)
* Feature request:                       Gnuastro project webpage.
                                                              (line   6)
* Feature requests:                      Suggest new feature. (line   6)
* Fedora:                                Dependencies from package managers.
                                                              (line  76)
* File flags:                            Writing scripts to automate the steps.
                                                              (line 106)
* File I/O:                              Configure and build in RAM.
                                                              (line   6)
* File operations:                       Data containers.     (line   6)
* File system Hierarchy Standard:        Configuration files. (line   6)
* file systems, tmpfs:                   Configure and build in RAM.
                                                              (line  23)
* first-in-first-out:                    Linked lists.        (line  47)
* first-in-first-out <1>:                FITS header keywords.
                                                              (line  23)
* first-in-first-out <2>:                Interpolation.       (line 140)
* FITS:                                  Output FITS files.   (line   6)
* FITS <1>:                              FITS files.          (line   6)
* FITS image viewer:                     SAO ds9.             (line   6)
* FITS standard:                         CFITSIO.             (line   6)
* FITS standard <1>:                     Invoking astwarp.    (line  66)
* FITS standard <2>:                     Generic data container.
                                                              (line  78)
* FITS Tables:                           Recognized table formats.
                                                              (line  19)
* Fitting:                               Modeling and fittings.
                                                              (line   6)
* Flags, file:                           Writing scripts to automate the steps.
                                                              (line 106)
* Flip coordinates:                      Warping basics.      (line  30)
* Floating point error:                  Measuring elliptical parameters.
                                                              (line  47)
* Floating point round-off error:        Invoking astconvolve.
                                                              (line 101)
* FLT:                                   Options.             (line  38)
* Flux:                                  Flux Brightness and magnitude.
                                                              (line  13)
* Flux to magnitude conversion:          Flux Brightness and magnitude.
                                                              (line  28)
* Flux-weighted:                         Working with catalogs estimating colors.
                                                              (line 117)
* Foreground pixels:                     Detection options.   (line  53)
* FORTRAN:                               Generic data container.
                                                              (line  78)
* Fourier spectrum:                      Invoking astconvolve.
                                                              (line  87)
* Free software:                         Your rights.         (line  12)
* Free Software Foundation:              Contributing to Gnuastro.
                                                              (line  16)
* FSF:                                   Contributing to Gnuastro.
                                                              (line  16)
* Full Width at Half Maximum:            PSF.                 (line  27)
* Function gradient over pixel area:     Sampling from a function.
                                                              (line  16)
* Function groups:                       Coding conventions.  (line 153)
* Functions for user interface:          Mandatory source code files.
                                                              (line 102)
* FWHM:                                  NoiseChisel optimization for detection.
                                                              (line  95)
* FWHM <1>:                              PSF.                 (line  27)
* Gain:                                  Flux Brightness and magnitude.
                                                              (line   6)
* Gain <1>:                              Instrumental noise.  (line  23)
* Galaxy profiles:                       Galaxies.            (line   6)
* Galileo, Galilei:                      Science and its tools.
                                                              (line 124)
* Gaussian:                              Invoking astnoisechisel.
                                                              (line  28)
* Gaussian <1>:                          Invoking astsegment. (line  31)
* Gaussian <2>:                          Invoking astmkcatalog.
                                                              (line  33)
* Gaussian distribution:                 Quantifying signal in a tile.
                                                              (line   6)
* Gaussian distribution <1>:             PSF.                 (line  37)
* Gaussian FWHM:                         PSF.                 (line  50)
* GCC:                                   Invoking astbuildprog.
                                                              (line 204)
* GCC: GNU Compiler Collection:          New to GNU/Linux?.   (line  33)
* GCC: GNU Compiler Collection <1>:      Summary and example on libraries.
                                                              (line  30)
* GCC: GNU Compiler Collection <2>:      Invoking astbuildprog.
                                                              (line  72)
* GCC: GNU Compiler Collection <3>:      Invoking astbuildprog.
                                                              (line 128)
* GCC: GNU Compiler Collection <4>:      Coding conventions.  (line  34)
* Gedit:                                 Sufi simulates a detection.
                                                              (line 359)
* General file operations:               Data containers.     (line   6)
* Generalized de Vaucouleur profile:     Galaxies.            (line   6)
* Git:                                   Optional dependencies.
                                                              (line  52)
* Git <1>:                               Version controlled source.
                                                              (line   6)
* Git <2>:                               Gnuastro configure options.
                                                              (line  99)
* Git <3>:                               Table input output.  (line 170)
* Git <4>:                               Git wrappers.        (line   6)
* GNOME:                                 Multiextension FITS files NoiseChisel's output.
                                                              (line  87)
* GNOME <1>:                             NoiseChisel output.  (line  37)
* GNOME 2:                               Viewing multiextension FITS images.
                                                              (line 164)
* GNOME 3:                               Command-line interface.
                                                              (line  19)
* GNOME 3 <1>:                           Viewing multiextension FITS images.
                                                              (line 138)
* GNU Astronomy Utilities (Gnuastro):    Introduction.        (line   6)
* GNU Autoconf:                          Bootstrapping dependencies.
                                                              (line  61)
* GNU Autoconf <1>:                      Bootstrapping.       (line  65)
* GNU Autoconf <2>:                      Synchronizing.       (line  29)
* GNU Autoconf <3>:                      Configuring.         (line  21)
* GNU Autoconf <4>:                      Building and debugging.
                                                              (line   6)
* GNU Autoconf Archive:                  Bootstrapping dependencies.
                                                              (line  65)
* GNU Autoconf Archive <1>:              Bootstrapping.       (line   6)
* GNU Automake:                          Bootstrapping dependencies.
                                                              (line  55)
* GNU Automake <1>:                      Bootstrapping.       (line  65)
* GNU Automake <2>:                      Building and debugging.
                                                              (line   6)
* GNU Autoreconf:                        Separate build and source directories.
                                                              (line  81)
* GNU AWK:                               Angular coverage on the sky.
                                                              (line  72)
* GNU AWK <1>:                           Aperture photometry. (line  14)
* GNU AWK <2>:                           Finding reddest clumps and visual inspection.
                                                              (line   6)
* GNU AWK <3>:                           Achieved surface brightness level.
                                                              (line 187)
* GNU AWK <4>:                           Standard input.      (line  41)
* GNU AWK <5>:                           Installed scripts.   (line  52)
* GNU AWK <6>:                           Sort FITS files by night.
                                                              (line  66)
* GNU AWK <7>:                           Table.               (line  31)
* GNU AWK <8>:                           Invoking asttable.   (line  95)
* GNU AWK <9>:                           Invoking astarithmetic.
                                                              (line 215)
* GNU AWK <10>:                          Invoking aststatistics.
                                                              (line 163)
* GNU AWK <11>:                          Invoking aststatistics.
                                                              (line 292)
* GNU AWK <12>:                          Table input output.  (line 137)
* GNU Bash:                              Command-line interface.
                                                              (line  53)
* GNU Bash <1>:                          Writing scripts to automate the steps.
                                                              (line  25)
* GNU Bash <2>:                          Installation directory.
                                                              (line 112)
* GNU Bash <3>:                          Installation directory.
                                                              (line 122)
* GNU Bash <4>:                          Installed scripts.   (line  18)
* GNU Bash <5>:                          Keyword manipulation.
                                                              (line  82)
* GNU Bash <6>:                          Program design philosophy.
                                                              (line  27)
* GNU Binutils:                          Linking.             (line  16)
* GNU build system:                      Mandatory dependencies.
                                                              (line   6)
* GNU build system <1>:                  Bootstrapping.       (line  65)
* GNU build system <2>:                  Installation directory.
                                                              (line 149)
* GNU build system <3>:                  Configure and build in RAM.
                                                              (line  34)
* GNU build system <4>:                  Separate build and source directories.
                                                              (line  13)
* GNU build system <5>:                  Headers.             (line 153)
* GNU build system <6>:                  Headers.             (line 162)
* GNU build system <7>:                  Building and debugging.
                                                              (line   6)
* GNU C library:                         New to GNU/Linux?.   (line  33)
* GNU C library <1>:                     Bootstrapping dependencies.
                                                              (line  28)
* GNU C library <2>:                     Bootstrapping.       (line  65)
* GNU C library <3>:                     Gnuastro configure options.
                                                              (line  72)
* GNU C library <4>:                     Configure and build in RAM.
                                                              (line  34)
* GNU C library <5>:                     Info.                (line  28)
* GNU C Library:                         Keyword manipulation.
                                                              (line 308)
* GNU C library <6>:                     Adding new columns to MakeCatalog.
                                                              (line  61)
* GNU C library <7>:                     Linking.             (line 112)
* GNU C library <8>:                     Labeled datasets.    (line 267)
* GNU C library <9>:                     Coding conventions.  (line  83)
* GNU C library <10>:                    Mandatory source code files.
                                                              (line  69)
* GNU coding standards:                  Introduction.        (line   6)
* GNU coding standards <1>:              Coding conventions.  (line   6)
* GNU coding standards <2>:              Coding conventions.  (line 132)
* GNU Compiler Collection (GCC):         New to GNU/Linux?.   (line  33)
* GNU Compiler Collection (GCC) <1>:     Summary and example on libraries.
                                                              (line  30)
* GNU Compiler Collection (GCC) <2>:     Invoking astbuildprog.
                                                              (line  72)
* GNU Compiler Collection (GCC) <3>:     Invoking astbuildprog.
                                                              (line 128)
* GNU Compiler Collection (GCC) <4>:     Coding conventions.  (line  34)
* GNU Coreutils:                         Multi-threaded operations.
                                                              (line   6)
* GNU Coreutils <1>:                     Invoking asttable.   (line 289)
* GNU Coreutils <2>:                     Program design philosophy.
                                                              (line  18)
* GNU CPP:                               Invoking astbuildprog.
                                                              (line  89)
* GNU Debugger:                          Gnuastro configure options.
                                                              (line  13)
* GNU Debugger (GDB):                    Separate build and source directories.
                                                              (line  91)
* GNU Emacs:                             Command-line interface.
                                                              (line  76)
* GNU Emacs <1>:                         Sufi simulates a detection.
                                                              (line 359)
* GNU Emacs <2>:                         Info.                (line  28)
* GNU Emacs <3>:                         Coding conventions.  (line 146)
* GNU Emacs <4>:                         Coding conventions.  (line 153)
* GNU Emacs <5>:                         Coding conventions.  (line 192)
* GNU free documentation license:        Science and its tools.
                                                              (line 105)
* GNU Free Documentation License:        Your rights.         (line  40)
* GNU Free Documentation License <1>:    GNU Free Doc. License.
                                                              (line   6)
* GNU General Public License (GPL):      Science and its tools.
                                                              (line 105)
* GNU General Public License (GPL) <1>:  Your rights.         (line  40)
* GNU General Public License (GPL) <2>:  GNU General Public License.
                                                              (line   6)
* GNU Grep:                              --help.              (line  47)
* GNU Grep <1>:                          Keyword manipulation.
                                                              (line  48)
* GNU Grep <2>:                          CosmicCalculator specific calculations.
                                                              (line  32)
* GNU Grep <3>:                          The TEMPLATE program.
                                                              (line  80)
* GNU Gzip:                              NoiseChisel output.  (line 154)
* GNU Gzip <1>:                          Segment output.      (line 113)
* GNU help2man:                          Bootstrapping dependencies.
                                                              (line  77)
* GNU Info:                              Accessing documentation.
                                                              (line  18)
* GNU Info <1>:                          Info.                (line   6)
* GNU Libtool:                           Optional dependencies.
                                                              (line  23)
* GNU Libtool <1>:                       Bootstrapping dependencies.
                                                              (line  71)
* GNU Libtool <2>:                       Bootstrapping.       (line  65)
* GNU Libtool <3>:                       Known issues.        (line  92)
* GNU Libtool <4>:                       Linking.             (line   6)
* GNU Libtool <5>:                       Linking.             (line  64)
* GNU Libtool <6>:                       Linking.             (line 147)
* GNU Libtool <7>:                       BuildProgram.        (line  15)
* GNU Libtool <8>:                       Invoking astbuildprog.
                                                              (line 107)
* GNU Libtool <9>:                       Building and debugging.
                                                              (line   6)
* GNU Make:                              How to run simultaneous operations.
                                                              (line  57)
* GNU Make <1>:                          Invoking astbuildprog.
                                                              (line  64)
* GNU Parallel:                          Finding reddest clumps and visual inspection.
                                                              (line  60)
* GNU Parallel <1>:                      How to run simultaneous operations.
                                                              (line  15)
* GNU Portability Library (Gnulib):      Bootstrapping dependencies.
                                                              (line  28)
* GNU Portability Library (Gnulib) <1>:  Bootstrapping.       (line   6)
* GNU Portability Library (Gnulib) <2>:  Gnuastro configure options.
                                                              (line  72)
* GNU Portability Library (Gnulib) <3>:  Known issues.        (line  37)
* GNU Portability Library (Gnulib) <4>:  Coding conventions.  (line  83)
* GNU Savannah:                          Gnuastro project webpage.
                                                              (line   6)
* GNU Scientific Library:                GNU Scientific Library.
                                                              (line   6)
* GNU Scientific Library <1>:            Generating random numbers.
                                                              (line  26)
* GNU Scientific Library <2>:            Permutations.        (line  16)
* GNU Scientific Library <3>:            Interpolation.       (line  16)
* GNU Scientific Library <4>:            Interpolation.       (line 108)
* GNU SED:                               Installed scripts.   (line  52)
* GNU Sed:                               Sort FITS files by night.
                                                              (line  66)
* GNU software documentation:            Info.                (line  22)
* GNU style options:                     Options.             (line   6)
* GNU Tar:                               Quick start.         (line   6)
* GNU Texinfo:                           Your rights.         (line   6)
* GNU Texinfo <1>:                       Bootstrapping.       (line  65)
* GNU Texinfo <2>:                       A4 print book.       (line  13)
* GNU Texinfo <3>:                       Known issues.        (line  87)
* GNU Wget:                              Detecting large extended targets.
                                                              (line  44)
* GNU/Linux:                             New to GNU/Linux?.   (line  33)
* Gnuastro coding convention:            Coding conventions.  (line   6)
* Gnuastro common options:               Common options.      (line   6)
* Gnuastro major version number:         GNU Astronomy Utilities 1.0.
                                                              (line   6)
* Gnuastro program structure convention: Program source.      (line   6)
* Gnuastro project page:                 Report a bug.        (line  84)
* Gnuastro test scripts:                 Test scripts.        (line   6)
* Gnulib:                                Program design philosophy.
                                                              (line   6)
* Gnulib: GNU Portability Library:       Bootstrapping dependencies.
                                                              (line  28)
* Gnulib: GNU Portability Library <1>:   Bootstrapping.       (line   6)
* Gnulib: GNU Portability Library <2>:   Gnuastro configure options.
                                                              (line  72)
* Gnulib: GNU Portability Library <3>:   Known issues.        (line  37)
* Gnulib: GNU Portability Library <4>:   Coding conventions.  (line  83)
* GPL:                                   GNU General Public License.
                                                              (line   6)
* GPL Ghostscript:                       Optional dependencies.
                                                              (line  10)
* GPL Ghostscript <1>:                   Optional dependencies.
                                                              (line  81)
* GPL Ghostscript <2>:                   Known issues.        (line  78)
* GPL Ghostscript <3>:                   Recognized file formats.
                                                              (line 107)
* Gradient over pixel area:              Sampling from a function.
                                                              (line  16)
* Graphic user interface:                Command-line interface.
                                                              (line   6)
* Gravitational lensing:                 Warp.                (line  13)
* Grayscale:                             Color.               (line  35)
* Groups of similar functions:           Coding conventions.  (line 153)
* GUI: graphic user interface:           Command-line interface.
                                                              (line   6)
* GUI: repeating operations:             Command-line interface.
                                                              (line  44)
* Gzip:                                  Quick start.         (line   6)
* Gzip <1>:                              Release tarball.     (line  37)
* Gérard de Vaucouleurs:                 Galaxies.            (line  11)
* H-alpha:                               CosmicCalculator input options.
                                                              (line  89)
* H-alpha <1>:                           Spectral lines library.
                                                              (line  10)
* H-beta:                                CosmicCalculator input options.
                                                              (line 104)
* H-beta <1>:                            Spectral lines library.
                                                              (line  10)
* H-delta:                               CosmicCalculator input options.
                                                              (line 113)
* H-delta <1>:                           Spectral lines library.
                                                              (line  10)
* H-epsilon:                             CosmicCalculator input options.
                                                              (line 116)
* H-epsilon <1>:                         Spectral lines library.
                                                              (line  10)
* H-gamma:                               CosmicCalculator input options.
                                                              (line 110)
* H-gamma <1>:                           Spectral lines library.
                                                              (line  10)
* Halted program:                        Report a bug.        (line   6)
* Hashbang:                              Writing scripts to automate the steps.
                                                              (line  77)
* HDD:                                   Configure and build in RAM.
                                                              (line  12)
* HDU:                                   Arguments and options.
                                                              (line  53)
* HDU <1>:                               Input output options.
                                                              (line  35)
* HDU <2>:                               Invoking astfits.    (line  38)
* Header data unit:                      Arguments and options.
                                                              (line  53)
* Header data unit <1>:                  Input output options.
                                                              (line  35)
* Header file:                           Coding conventions.  (line  67)
* Help:                                  Getting help.        (line   6)
* help-gnuastro mailing list:            help-gnuastro mailing list.
                                                              (line   6)
* help-gnuastro@gnu.org:                 help-gnuastro mailing list.
                                                              (line  13)
* Hexadecimal encoding:                  Invoking astconvertt.
                                                              (line 128)
* Hexadecimal encoding <1>:              EPS files.           (line  58)
* Histogram:                             Histogram and Cumulative Frequency Plot.
                                                              (line   6)
* Histogram <1>:                         Sky value misconceptions.
                                                              (line  22)
* history:                               Writing scripts to automate the steps.
                                                              (line  14)
* HOME:                                  Installation directory.
                                                              (line  65)
* HOME/.local/:                          Installation directory.
                                                              (line  65)
* Homebrew:                              Dependencies from package managers.
                                                              (line  91)
* Homogeneous coordinates:               Warping basics.      (line  63)
* Homography:                            Warping basics.      (line  93)
* HSV: Hue Saturation Value:             Color.               (line  35)
* HSV: Hue Saturation Value <1>:         Invoking astconvertt.
                                                              (line 167)
* Hubble Space Telescope (HST):          General program usage tutorial.
                                                              (line   6)
* Hubble Space Telescope (HST) <1>:      Tessellation.        (line  54)
* Hubble Space Telescope (HST) <2>:      Crop.                (line  13)
* Hubble Space Telescope (HST) <3>:      Warp.                (line  53)
* Hubble Space Telescope (HST) <4>:      Warping basics.      (line  51)
* Hue, saturation, value:                Invoking astconvertt.
                                                              (line 167)
* Hyper Suprime-Cam:                     Tessellation.        (line  54)
* IAU, international astronomical union: Fits.                (line  13)
* Identifying outliers:                  Quantifying signal in a tile.
                                                              (line 101)
* IFU: Integral Field Unit:              Arithmetic operators.
                                                              (line 336)
* IFU: Integral Field Unit <1>:          MakeCatalog measurements.
                                                              (line 395)
* IFU: Integral Field Unit <2>:          MakeCatalog measurements.
                                                              (line 461)
* Image:                                 Color.               (line   6)
* Image blurring:                        PSF.                 (line  17)
* Image edges:                           Resampling.          (line  32)
* Image format conversion:               ConvertType.         (line   6)
* Image mosaic:                          Crop.                (line  13)
* Image mosaic <1>:                      Warp.                (line  29)
* Image noise:                           Noise basics.        (line   6)
* Image tiles:                           Crop.                (line  13)
* Image transformations:                 MakeProfiles.        (line  41)
* ImageMagick:                           Bootstrapping dependencies.
                                                              (line 113)
* Imaging surveys:                       Crop.                (line  13)
* Immediate neighbors:                   Binary datasets.     (line  13)
* Inconsistent results:                  Report a bug.        (line   6)
* Individual profiles:                   MakeProfiles output dataset.
                                                              (line 165)
* info-gnuastro@gnu.org:                 Synchronizing.       (line  29)
* INFOPATH:                              Installation directory.
                                                              (line 164)
* Input/Output, file:                    Configure and build in RAM.
                                                              (line   6)
* Inside-out construction:               Defining an ellipse and ellipsoid.
                                                              (line  68)
* Inside-out construction <1>:           Sampling from a function.
                                                              (line  44)
* Install directory:                     Installation directory.
                                                              (line 149)
* Install with no super-user access:     Installation directory.
                                                              (line   6)
* Installation:                          Installation.        (line   6)
* Installation, customizing:             Configuring.         (line  12)
* Installed help methods:                Getting help.        (line  22)
* Instrumental noise:                    Instrumental noise.  (line   6)
* INT:                                   Options.             (line  35)
* Integer, Signed:                       Numeric data types.  (line  16)
* Integral Field Unit:                   MakeCatalog measurements.
                                                              (line 395)
* Integral field unit (IFU):             Arithmetic operators.
                                                              (line 336)
* Integral field unit (IFU) <1>:         MakeCatalog measurements.
                                                              (line 461)
* Integration over pixel:                Sampling from a function.
                                                              (line  16)
* Integration to infinity:               Profile magnitude.   (line  15)
* Internal default value:                Configuration files. (line  15)
* Internally stored option value:        Multi-threaded operations.
                                                              (line  16)
* Interpolation:                         Resampling.          (line  21)
* Interpolation <1>:                     Interpolation.       (line   6)
* Interpolation, bi-linear:              Resampling.          (line  21)
* Interpolation, bicubic:                Resampling.          (line  21)
* Interpolation: Akima spline:           Interpolation.       (line  88)
* Interpolation: monotonic:              Interpolation.       (line  96)
* Interpolation: Polynomial:             Interpolation.       (line  68)
* Interpolation: Spline:                 Interpolation.       (line  74)
* Interpolation: Steffen:                Interpolation.       (line  96)
* Intervals, histogram:                  Histogram and Cumulative Frequency Plot.
                                                              (line  21)
* IRAF:                                  Recognized file formats.
                                                              (line  11)
* ISO C90:                               Why C.               (line  15)
* Issue:                                 Gnuastro project webpage.
                                                              (line   6)
* Jaynes E. T.:                          Science and its tools.
                                                              (line 203)
* JPEG compression quality:              Invoking astconvertt.
                                                              (line 144)
* JPEG compression quality <1>:          JPEG files.          (line  45)
* JPEG format:                           Optional dependencies.
                                                              (line  60)
* JPEG format <1>:                       Gnuastro configure options.
                                                              (line 105)
* JPEG format <2>:                       Recognized file formats.
                                                              (line  25)
* JPEG format <3>:                       JPEG files.          (line   6)
* Ken Thomson:                           Science and its tools.
                                                              (line 163)
* Kernel, convolution:                   Convolve.            (line   6)
* Kernel, convolution <1>:               FITS arrays.         (line  64)
* Kernighan, Brian:                      Why C.               (line  15)
* Labeling:                              NoiseChisel.         (line   6)
* Large astronomical images:             Crop.                (line   6)
* last-in-first-out:                     Linked lists.        (line  47)
* last-in-first-out <1>:                 FITS header keywords.
                                                              (line  23)
* LaTeX:                                 Bootstrapping dependencies.
                                                              (line  81)
* LaTeX <1>:                             Recognized file formats.
                                                              (line  81)
* LaTeX <2>:                             Program design philosophy.
                                                              (line  27)
* Lawrence Livermore National Laboratory: Multithreaded programming.
                                                              (line  20)
* LDFLAGS:                               Known issues.        (line  24)
* LDFLAGS <1>:                           Invoking astbuildprog.
                                                              (line 204)
* LD_LIBRARY_PATH:                       Installation directory.
                                                              (line 164)
* LD_LIBRARY_PATH <1>:                   Known issues.        (line  62)
* LD_LIBRARY_PATH <2>:                   PGPLOT.              (line  62)
* Learning GNU Info:                     Info.                (line  22)
* Lensing simulations:                   MakeProfiles.        (line  41)
* Leonhard Euler:                        Circles and the complex plane.
                                                              (line  16)
* less:                                  --help.              (line  33)
* libgit2:                               Optional dependencies.
                                                              (line  52)
* libgit2 <1>:                           Gnuastro configure options.
                                                              (line  99)
* libgit2 <2>:                           Git wrappers.        (line   6)
* libjpeg:                               Optional dependencies.
                                                              (line  60)
* libjpeg <1>:                           Gnuastro configure options.
                                                              (line 105)
* Library search directory:              Installation directory.
                                                              (line 164)
* Library: shared:                       Linking.             (line  64)
* libtiff:                               Optional dependencies.
                                                              (line  72)
* libtiff <1>:                           Gnuastro configure options.
                                                              (line 111)
* Limit, object/clump magnitude:         Quantifying measurement limits.
                                                              (line   6)
* Line terminator, CRLF:                 Text files.          (line  11)
* Linear spatial filtering:              Convolution process. (line  16)
* Linked list:                           Linked lists.        (line   6)
* Linked list <1>:                       FITS header keywords.
                                                              (line  23)
* Linking:                               Linking.             (line  31)
* Linking: Dynamic:                      Linking.             (line  38)
* Linking: dynamic:                      Linking.             (line  64)
* Linking: Static:                       Linking.             (line  38)
* Linux:                                 New to GNU/Linux?.   (line  33)
* Linux kernel:                          Configure and build in RAM.
                                                              (line  34)
* Linux Mint:                            Dependencies from package managers.
                                                              (line  56)
* Long option abbreviation:              Options.             (line  64)
* Long outputs:                          --help.              (line  22)
* Lord Kelvin:                           Science and its tools.
                                                              (line 179)
* Low level programming:                 Why C.               (line  89)
* Luminosity:                            Flux Brightness and magnitude.
                                                              (line  13)
* Lyman limit:                           CosmicCalculator input options.
                                                              (line 158)
* Lyman limit <1>:                       Spectral lines library.
                                                              (line  10)
* Lyman-alpha:                           CosmicCalculator input options.
                                                              (line 155)
* Lyman-alpha <1>:                       Spectral lines library.
                                                              (line  10)
* Lzip:                                  Quick start.         (line   6)
* Lzip <1>:                              Release tarball.     (line  37)
* M51:                                   Detecting large extended targets.
                                                              (line  26)
* macOS:                                 Dependencies from package managers.
                                                              (line  91)
* MacPorts:                              Dependencies from package managers.
                                                              (line  91)
* Macro:                                 Headers.             (line  89)
* Magnitude zero-point:                  Flux Brightness and magnitude.
                                                              (line  28)
* Magnitude, object/clump detection limit: Quantifying measurement limits.
                                                              (line   6)
* Magnitude, upper limit:                Quantifying measurement limits.
                                                              (line 225)
* Magnitudes from flux:                  Flux Brightness and magnitude.
                                                              (line  28)
* Mailing list archives:                 Report a bug.        (line  78)
* Mailing list archives <1>:             help-gnuastro mailing list.
                                                              (line  13)
* Mailing list: bug-gnuastro:            Report a bug.        (line  78)
* Mailing list: bug-gnuastro <1>:        Gnuastro project webpage.
                                                              (line  19)
* Mailing list: gnuastro-commits:        Developing mailing lists.
                                                              (line  37)
* Mailing list: gnuastro-commits <1>:    Commit guidelines.   (line  34)
* Mailing list: gnuastro-commits <2>:    Commit guidelines.   (line  50)
* Mailing list: gnuastro-commits <3>:    Commit guidelines.   (line  72)
* Mailing list: gnuastro-devel:          Gnuastro project webpage.
                                                              (line  58)
* Mailing list: gnuastro-devel <1>:      Developing mailing lists.
                                                              (line  13)
* Mailing list: help-gnuastro:           help-gnuastro mailing list.
                                                              (line   6)
* Mailing list: info-gnuastro:           Version numbering.   (line   6)
* Mailing list: info-gnuastro <1>:       Announcements.       (line   6)
* Mailing list: info-gnuastro <2>:       Synchronizing.       (line  29)
* main function:                         Mandatory source code files.
                                                              (line  19)
* Main parameters C structure:           Mandatory source code files.
                                                              (line  30)
* main.c:                                Mandatory source code files.
                                                              (line  18)
* main.h:                                Mandatory source code files.
                                                              (line  29)
* Major version number:                  Version numbering.   (line   6)
* Make:                                  How to run simultaneous operations.
                                                              (line  38)
* make check:                            Tests.               (line   6)
* MakeProfiles (astmkprof):              MakeProfiles.        (line   6)
* Making a distribution package:         Developer's checklist.
                                                              (line  24)
* Making profiles pixel by pixel:        Defining an ellipse and ellipsoid.
                                                              (line  68)
* Man pages:                             Man pages.           (line   6)
* Management hub:                        Gnuastro project webpage.
                                                              (line   6)
* Mandatory arguments:                   Arguments and options.
                                                              (line  33)
* Mandatory arguments <1>:               --usage.             (line   6)
* Manhattan metric:                      Processing options.  (line 156)
* MANPATH:                               Installation directory.
                                                              (line 164)
* Mathematical morphology:               Binary datasets.     (line  77)
* matplotlib:                            Invoking astconvertt.
                                                              (line 180)
* Matplotlib, Python:                    Program design philosophy.
                                                              (line  27)
* Matplotlib, Python <1>:                PGPLOT.              (line  14)
* Matrix:                                Warping basics.      (line  17)
* Matrix multiplication:                 Merging multiple warpings.
                                                              (line   6)
* Matrix, adjacency:                     Binary datasets.     (line 154)
* Maximum:                               Statistical operations.
                                                              (line  45)
* Mean:                                  Statistical operations.
                                                              (line  58)
* Median:                                Quantifying signal in a tile.
                                                              (line  28)
* Median <1>:                            Statistical operations.
                                                              (line  83)
* Meta-data:                             Fits.                (line  26)
* Metacharacters on the command-line In case your arguments or option values contain any of the shell’s meta-characters, you have to quote them.: Arguments and options.
                                                              (line  47)
* Metric: Manhattan, Taxicab, Radial:    Processing options.  (line 156)
* MgII doublet:                          CosmicCalculator input options.
                                                              (line 137)
* MgII doublet <1>:                      Spectral lines library.
                                                              (line  10)
* Michelson, Albert. A.:                 Science and its tools.
                                                              (line 185)
* Minimum:                               Statistical operations.
                                                              (line  38)
* Minor version number:                  Version numbering.   (line   6)
* Mixing pixel values:                   Convolve.            (line  25)
* Mixing pixel values <1>:               Resampling.          (line   6)
* mock.fits:                             Tests.               (line   6)
* Mode:                                  Quantifying signal in a tile.
                                                              (line  28)
* Mode of a distribution:                Sky value misconceptions.
                                                              (line  22)
* Modeling:                              Modeling and fittings.
                                                              (line   6)
* Modeling stars:                        Stars.               (line   6)
* Modifying print book:                  A4 print book.       (line   6)
* Modularity:                            Review of library fundamentals.
                                                              (line  18)
* Moffat beta:                           PSF.                 (line  59)
* Moffat function:                       PSF.                 (line  53)
* Moffat FWHM:                           PSF.                 (line  64)
* Moments:                               Measuring elliptical parameters.
                                                              (line  15)
* Monte carlo integration:               Sampling from a function.
                                                              (line  26)
* Mosaicing:                             Crop.                (line  13)
* Mosaicing <1>:                         Warp.                (line  29)
* Multi-threaded operation:              Qsort functions.     (line  28)
* Multi-threaded programs:               Multi-threaded operations.
                                                              (line   6)
* Multiextension FITS:                   Viewing multiextension FITS images.
                                                              (line   6)
* Multiple file opening, reentrancy:     CFITSIO.             (line  13)
* Multiplication, Matrix:                Warping basics.      (line  17)
* Multiplication, matrix:                Merging multiple warpings.
                                                              (line   6)
* Multithreaded programming:             Multithreaded programming.
                                                              (line   6)
* Möbius, August. F.:                    Warping basics.      (line  63)
* Names of executables:                  Executable names.    (line   6)
* Names, customize:                      Executable names.    (line  28)
* Names, programs:                       Naming convention.   (line   6)
* NaN:                                   Gnuastro text table format.
                                                              (line  73)
* NaN <1>:                               Arithmetic operators.
                                                              (line  97)
* NaN <2>:                               Invoking astwarp.    (line 174)
* NaN <3>:                               Invoking aststatistics.
                                                              (line 514)
* NaN <4>:                               Detection options.   (line  67)
* NaN <5>:                               Library blank values.
                                                              (line  17)
* NaN <6>:                               Library blank values.
                                                              (line  29)
* NaN <7>:                               Library blank values.
                                                              (line  81)
* NaN <8>:                               Library blank values.
                                                              (line  85)
* NaN <9>:                               FITS arrays.         (line  64)
* NaN <10>:                              Qsort functions.     (line  13)
* Narrow-band image:                     Arithmetic operators.
                                                              (line 336)
* Navigating source files:               Program source.      (line   6)
* Necessary parameters:                  Configuration files. (line   6)
* Neighborhood:                          Convolve.            (line   6)
* Neighbors, immediate:                  Binary datasets.     (line  13)
* NGC5195:                               Detecting large extended targets.
                                                              (line  26)
* NII doublet:                           CosmicCalculator input options.
                                                              (line  86)
* NII doublet <1>:                       Spectral lines library.
                                                              (line  10)
* No access to super-user install:       Installation directory.
                                                              (line   6)
* Noise:                                 Quantifying signal in a tile.
                                                              (line   6)
* Noise <1>:                             MakeNoise.           (line   6)
* Noise <2>:                             Noise basics.        (line   6)
* Noise simulation:                      Photon counting noise.
                                                              (line  61)
* Noise, instrumental:                   Instrumental noise.  (line   6)
* Non-commutative operations:            Merging multiple warpings.
                                                              (line   6)
* Normalizing histogram:                 Histogram and Cumulative Frequency Plot.
                                                              (line  21)
* nproc:                                 Multi-threaded operations.
                                                              (line   6)
* Number:                                Statistical operations.
                                                              (line  32)
* Number of CPU threads to use:          Operating mode options.
                                                              (line 246)
* Number of CPU threads to use <1>:      Configuration files. (line  15)
* Number of threads available:           Multi-threaded operations.
                                                              (line  16)
* Number, version:                       Version numbering.   (line   6)
* Numbers, complex:                      Invoking astconvolve.
                                                              (line  87)
* Numbers, psuedo-random:                Generating random numbers.
                                                              (line  14)
* Numbers, random:                       Generating random numbers.
                                                              (line   6)
* Object magnitude limit:                Quantifying measurement limits.
                                                              (line   6)
* Object oriented programming:           Why C.               (line  27)
* OII doublet:                           CosmicCalculator input options.
                                                              (line 125)
* OII doublet <1>:                       Spectral lines library.
                                                              (line  10)
* OIII doublet:                          CosmicCalculator input options.
                                                              (line  98)
* OIII doublet <1>:                      Spectral lines library.
                                                              (line  10)
* On/Off options:                        Options.             (line  25)
* Online help:                           Getting help.        (line  13)
* Opening:                               Achieved surface brightness level.
                                                              (line  14)
* Opening (Mathematical morphology):     Binary datasets.     (line 107)
* Opening multiextension FITS:           Viewing multiextension FITS images.
                                                              (line   6)
* OpenMP:                                Multithreaded programming.
                                                              (line  32)
* openSUSE:                              Dependencies from package managers.
                                                              (line 125)
* Operations on files:                   Data containers.     (line   6)
* Operations, non-commutative:           Merging multiple warpings.
                                                              (line   6)
* Operator, structure de-reference:      Mandatory source code files.
                                                              (line  56)
* Optical distortion:                    Warp.                (line  47)
* Optimization:                          Invoking astbuildprog.
                                                              (line 128)
* Optimization <1>:                      Building and debugging.
                                                              (line  39)
* Optimization flag:                     Coding conventions.  (line  34)
* Option values:                         Options.             (line  47)
* Optional and mandatory tokens:         --usage.             (line   6)
* Options:                               Invoking astarithmetic.
                                                              (line 201)
* Options common to all programs:        Common options.      (line   6)
* Options to programs:                   Arguments and options.
                                                              (line   6)
* Options, abbreviation:                 Options.             (line  64)
* Options, GNU style:                    Options.             (line   6)
* Options, on/off:                       Options.             (line  25)
* Options, repeated:                     Options.             (line  72)
* Options, short (-) and long (--):      Options.             (line   6)
* Order in search directory:             Installation directory.
                                                              (line 209)
* Outlier:                               Invoking aststatistics.
                                                              (line 280)
* Outliers:                              Quantifying signal in a tile.
                                                              (line 101)
* Output file names, automatic:          Automatic output.    (line   6)
* Output FITS headers:                   Output FITS files.   (line   6)
* Output, wrong:                         Report a bug.        (line   6)
* Oversample:                            Sufi simulates a detection.
                                                              (line 173)
* Oversampling:                          Oversampling.        (line   6)
* p:                                     Mandatory source code files.
                                                              (line  45)
* Package managers:                      Dependencies from package managers.
                                                              (line   6)
* pacman:                                Dependencies from package managers.
                                                              (line 112)
* Paper size, A4:                        A4 print book.       (line   6)
* Paper size, US letter:                 A4 print book.       (line   6)
* Parametric PSFs:                       PSF.                 (line  27)
* PATH:                                  Installation directory.
                                                              (line  72)
* PDF:                                   Recognized file formats.
                                                              (line  70)
* PDF <1>:                               Invoking astconvertt.
                                                              (line 274)
* PDF <2>:                               EPS files.           (line  67)
* PDF <3>:                               PDF files.           (line  50)
* permutation:                           Permutations.        (line   6)
* PGFplots in TeX or LaTeX:              Program design philosophy.
                                                              (line  27)
* PGFplots in TeX or LaTeX <1>:          PGPLOT.              (line  14)
* PGPLOT:                                PGPLOT.              (line   6)
* Phase angle:                           Invoking astconvolve.
                                                              (line  87)
* photo-electrons:                       Sky value definition.
                                                              (line  49)
* Photoelectrons:                        Resampling.          (line   6)
* Photon counting noise:                 Photon counting noise.
                                                              (line   6)
* Picture element:                       Resampling.          (line   6)
* Pipe:                                  --help.              (line  33)
* Pixel:                                 Resampling.          (line   6)
* Pixel by pixel making of profiles:     Defining an ellipse and ellipsoid.
                                                              (line  68)
* Pixel mixing:                          Convolve.            (line  25)
* Pixel mixing <1>:                      Resampling.          (line   6)
* Pixel mixing <2>:                      Resampling.          (line  48)
* Pixelated graphics:                    Recognized file formats.
                                                              (line  25)
* Pixels:                                Color.               (line   6)
* Plain text:                            Recognized file formats.
                                                              (line 121)
* Plot: contour:                         Invoking aststatistics.
                                                              (line 567)
* Plotting directly in C:                PGPLOT.              (line   6)
* Plugin:                                Linking.             (line  64)
* PNG standard:                          Color.               (line  65)
* Point pixels:                          Resampling.          (line  21)
* Point source:                          PSF.                 (line   6)
* Point spread function:                 Tutorials.           (line  45)
* Point spread function <1>:             PSF.                 (line   6)
* Pointers:                              Pointers.            (line   6)
* Poisson distribution:                  Photon counting noise.
                                                              (line   6)
* Poisson distribution <1>:              Photon counting noise.
                                                              (line  27)
* Poisson, Siméon Denis:                 Photon counting noise.
                                                              (line   6)
* Polygons, Concave:                     Crop options.        (line 177)
* Polygons, Concave <1>:                 Polygons.            (line  11)
* Polygons, Convex:                      Crop options.        (line 177)
* Polygons, Convex <1>:                  Polygons.            (line  11)
* Polynomial interpolation:              Interpolation.       (line  68)
* Portable Document format:              Recognized file formats.
                                                              (line  70)
* Position angle:                        Measuring elliptical parameters.
                                                              (line 132)
* Position angle <1>:                    Defining an ellipse and ellipsoid.
                                                              (line   6)
* POSIX threads:                         Implementation of pthread_barrier.
                                                              (line   6)
* POSIX Threads:                         Gnuastro's thread related functions.
                                                              (line   6)
* POSIX threads library:                 Multithreaded programming.
                                                              (line  20)
* Post-fix notation:                     Reverse polish notation.
                                                              (line   6)
* Postage stamp images:                  Crop.                (line   6)
* PostScript:                            Recognized file formats.
                                                              (line  62)
* PostScript <1>:                        Invoking astconvertt.
                                                              (line 274)
* PostScript <2>:                        EPS files.           (line  67)
* PostScript <3>:                        PDF files.           (line  50)
* PostScript vs. PDF:                    Recognized file formats.
                                                              (line  70)
* Pre-Processor:                         Headers.             (line   6)
* Pre-processor macros:                  Headers.             (line  89)
* Precedence, configuration files:       Configuration file precedence.
                                                              (line   6)
* prefix/etc/:                           System wide.         (line   6)
* Primary colors:                        Color.               (line   6)
* printf:                                Table input output.  (line  31)
* Probability density function:          Histogram and Cumulative Frequency Plot.
                                                              (line  21)
* Probability density function <1>:      Sky value misconceptions.
                                                              (line  22)
* Probability density function <2>:      Photon counting noise.
                                                              (line  21)
* Profiles, galaxies:                    Galaxies.            (line   6)
* progname.c, progname.h:                Mandatory source code files.
                                                              (line 122)
* prognameparams:                        Mandatory source code files.
                                                              (line  30)
* Program crashing:                      Report a bug.        (line   6)
* Program names:                         Naming convention.   (line   6)
* Program structure convention:          Program source.      (line   6)
* Programming, low level:                Why C.               (line  89)
* ProgramName:                           Naming convention.   (line  15)
* Projective transformation:             Warping basics.      (line  93)
* Proper distance:                       Distance on a 2D curved space.
                                                              (line 138)
* PSF:                                   Tutorials.           (line  45)
* PSF <1>:                               Sufi simulates a detection.
                                                              (line  40)
* PSF <2>:                               PSF.                 (line   6)
* PSF image size:                        PSF.                 (line  17)
* PSF over-sample:                       Oversampling.        (line  12)
* PSF width:                             PSF.                 (line  27)
* PSF, Moffat compared Gaussian:         PSF.                 (line  66)
* Psuedo-random numbers:                 Generating random numbers.
                                                              (line  14)
* pthread:                               Multi-threaded operations.
                                                              (line   6)
* pthread_barrier:                       Implementation of pthread_barrier.
                                                              (line   6)
* Ptolemy, Claudius:                     Sufi simulates a detection.
                                                              (line  19)
* Public domain:                         Your rights.         (line  12)
* Purity:                                Achieved surface brightness level.
                                                              (line 213)
* Purity <1>:                            Quantifying measurement limits.
                                                              (line 160)
* Puzzle solving scientist:              Science and its tools.
                                                              (line 192)
* Python Matplotlib:                     Program design philosophy.
                                                              (line  27)
* Python Matplotlib <1>:                 PGPLOT.              (line  14)
* Python programming language:           Why C.               (line   6)
* qsort:                                 Qsort functions.     (line   6)
* Quality of compression in JPEG:        Invoking astconvertt.
                                                              (line 144)
* Quantile:                              Invoking aststatistics.
                                                              (line 105)
* Quantile <1>:                          Detection options.   (line  53)
* Quantile <2>:                          Statistical operations.
                                                              (line  97)
* Qutb al-Din al-Shirazi:                Fourier series historical background.
                                                              (line  27)
* Radial metric:                         Processing options.  (line 156)
* Radial profile on ellipse:             Defining an ellipse and ellipsoid.
                                                              (line  15)
* Radius, effective:                     Galaxies.            (line  11)
* Random number generator, Seed:         Upper-limit settings.
                                                              (line  99)
* Random number generator, Seed <1>:     Sampling from a function.
                                                              (line  67)
* Random number generator, Seed <2>:     MakeProfiles profile settings.
                                                              (line  28)
* Random number generator, Seed <3>:     Generating random numbers.
                                                              (line  36)
* Random number generator, Seed <4>:     Generating random numbers.
                                                              (line  86)
* Random number generator, Seed <5>:     Invoking astmknoise. (line  57)
* Random numbers:                        Generating random numbers.
                                                              (line   6)
* Raster graphics:                       Recognized file formats.
                                                              (line  25)
* Readout noise:                         Instrumental noise.  (line   6)
* Red Hat:                               Dependencies from package managers.
                                                              (line  76)
* Redirection in shell:                  Writing scripts to automate the steps.
                                                              (line  56)
* Redirection of output:                 --help.              (line  22)
* Redirection of output <1>:             --help.              (line  42)
* Reentrancy, multiple file opening:     CFITSIO.             (line  13)
* Remembering options:                   Getting help.        (line   6)
* Remote operation:                      Command-line interface.
                                                              (line  92)
* Removing ast from executables:         Executable names.    (line  70)
* Repeated options:                      Options.             (line  72)
* Report a bug:                          Gnuastro project webpage.
                                                              (line   6)
* Reproducibility:                       Upper-limit settings.
                                                              (line  15)
* Reproducible bug reports:              Report a bug.        (line  64)
* Reproducible results:                  Command-line interface.
                                                              (line  53)
* Resampling:                            Resampling.          (line   6)
* Resource heavy operations:             Command-line interface.
                                                              (line  84)
* Rest-frame:                            Spectral lines library.
                                                              (line 141)
* Rest-frame wavelength:                 CosmicCalculator input options.
                                                              (line  61)
* restrict:                              Generic data container.
                                                              (line  61)
* Results, wrong:                        Report a bug.        (line   6)
* Reverse Polish Notation:               Reverse polish notation.
                                                              (line   6)
* RGB:                                   Color.               (line   6)
* RHEL:                                  Dependencies from package managers.
                                                              (line  76)
* Right Ascension:                       Column arithmetic.   (line 196)
* Right Ascension <1>:                   Arithmetic on datasets.
                                                              (line 146)
* Right Ascension <2>:                   Unit conversion library (units.h).
                                                              (line  30)
* Right Ascension <3>:                   Unit conversion library (units.h).
                                                              (line  42)
* Ritchie, Dennis:                       Why C.               (line  15)
* river:                                 Segment.             (line  58)
* Roger Cotes:                           Circles and the complex plane.
                                                              (line  16)
* Root access, not possible:             Installation directory.
                                                              (line   6)
* Root parameter structure:              Mandatory source code files.
                                                              (line  30)
* Rotation of coordinates:               Warping basics.      (line  17)
* Round-off error:                       Invoking astconvolve.
                                                              (line 101)
* Round-off error <1>:                   Polygons.            (line  33)
* Sampling:                              Resampling.          (line   6)
* Sampling <1>:                          Sampling from a function.
                                                              (line   6)
* SAO DS9:                               Multiextension FITS files NoiseChisel's output.
                                                              (line  87)
* SAO DS9 <1>:                           Finding reddest clumps and visual inspection.
                                                              (line  74)
* SAO DS9 <2>:                           Achieved surface brightness level.
                                                              (line 137)
* SAO DS9 <3>:                           Invoking astconvertt.
                                                              (line 185)
* SAO DS9 <4>:                           Crop options.        (line 130)
* SAO DS9 <5>:                           Segment output.      (line  21)
* SAO DS9 <6>:                           SAO ds9.             (line   6)
* Save output to file:                   --help.              (line  42)
* Saving binary image:                   Recognized file formats.
                                                              (line  93)
* Scales, coordinate:                    Angular coverage on the sky.
                                                              (line   6)
* Scaling:                               Warping basics.      (line   6)
* Scientific Linux:                      Dependencies from package managers.
                                                              (line  76)
* Scientist, puzzle solver:              Science and its tools.
                                                              (line 192)
* Script, shell:                         Writing scripts to automate the steps.
                                                              (line  50)
* Scripts, startup:                      Installation directory.
                                                              (line 112)
* Scroll command-line:                   --help.              (line  27)
* SDSS, Sloan Digital Sky Survey:        Detecting large extended targets.
                                                              (line  26)
* Search directory for executables:      Installation directory.
                                                              (line  72)
* Search directory order:                Installation directory.
                                                              (line 209)
* Searching text:                        --help.              (line  47)
* Second moment:                         Measuring elliptical parameters.
                                                              (line  25)
* Section of an image:                   Crop.                (line   6)
* Secure shell:                          Command-line interface.
                                                              (line  92)
* SED, Spectral Energy Distribution:     Working with catalogs estimating colors.
                                                              (line 117)
* SED, stream editor:                    Executable names.    (line  60)
* Seed, Random number generator:         Upper-limit settings.
                                                              (line  99)
* Seed, Random number generator <1>:     Sampling from a function.
                                                              (line  67)
* Seed, Random number generator <2>:     MakeProfiles profile settings.
                                                              (line  28)
* Seed, Random number generator <3>:     Generating random numbers.
                                                              (line  36)
* Seed, Random number generator <4>:     Generating random numbers.
                                                              (line  86)
* Seed, Random number generator <5>:     Invoking astmknoise. (line  57)
* Segmentation:                          NoiseChisel.         (line   6)
* Segmentation <1>:                      NoiseChisel.         (line  65)
* Setting output file names automatically: Automatic output.  (line   6)
* Setting PATH:                          Installation directory.
                                                              (line  72)
* Shared library:                        Linking.             (line  64)
* Shared library versioning:             Linking.             (line 129)
* Shear:                                 Warping basics.      (line  38)
* Shebang:                               Writing scripts to automate the steps.
                                                              (line  77)
* Shell:                                 Command-line interface.
                                                              (line   6)
* Shell <1>:                             Arguments and options.
                                                              (line   6)
* Shell alias:                           Invoking astmkprof.  (line  83)
* Shell auto-complete:                   Executable names.    (line  14)
* Shell history:                         Writing scripts to automate the steps.
                                                              (line  14)
* Shell redirection:                     Writing scripts to automate the steps.
                                                              (line  56)
* Shell script:                          GNU Astronomy Utilities 1.0.
                                                              (line  12)
* Shell script <1>:                      Writing scripts to automate the steps.
                                                              (line  50)
* Shell startup:                         Invoking astmkprof.  (line  83)
* Shell variables:                       Installation directory.
                                                              (line  38)
* <Shift + PageUP> and <Shift + PageDown>: --help.            (line  27)
* Sigma-clipping:                        Sky value misconceptions.
                                                              (line  32)
* Sigma-clipping <1>:                    Statistical operations.
                                                              (line 434)
* Signal:                                Quantifying signal in a tile.
                                                              (line   6)
* Signal to noise ratio:                 Warp.                (line  20)
* Signal to noise ratio <1>:             Resampling.          (line  21)
* Signed integer:                        Numeric data types.  (line  16)
* SII doublet:                           CosmicCalculator input options.
                                                              (line  77)
* SII doublet <1>:                       Spectral lines library.
                                                              (line  10)
* Simulating noise:                      Photon counting noise.
                                                              (line  61)
* Simultaneous multithreading:           Multi-threaded operations.
                                                              (line   6)
* Single channel CMYK:                   Color.               (line  65)
* size_t:                                Ordered list of size_t.
                                                              (line  16)
* size_t <1>:                            Doubly linked ordered list of size_t.
                                                              (line  14)
* Skewed Poisson distribution:           Photon counting noise.
                                                              (line  29)
* Skewness:                              MakeCatalog measurements.
                                                              (line 341)
* Sky:                                   Sky value.           (line   6)
* Sky line:                              Interpolation.       (line   6)
* Sky value:                             Sky value definition.
                                                              (line   6)
* Sky value <1>:                         Sky value definition.
                                                              (line  35)
* Sky value <2>:                         Photon counting noise.
                                                              (line  49)
* Sloan Digital Sky Survey, SDSS:        Detecting large extended targets.
                                                              (line  26)
* SLS Color:                             Invoking astconvertt.
                                                              (line 185)
* Software bug:                          Report a bug.        (line   6)
* Source code building:                  Dependencies from package managers.
                                                              (line   6)
* Source code compilation:               Dependencies from package managers.
                                                              (line   6)
* Source file navigation:                Program source.      (line   6)
* Source tree:                           Test scripts.        (line  25)
* Source, uncompress:                    Quick start.         (line   6)
* Spectral Energy Distribution, SED:     Working with catalogs estimating colors.
                                                              (line 117)
* Spectrum (of astronomical source):     MakeCatalog measurements.
                                                              (line 461)
* Spectrum, Fourier:                     Invoking astconvolve.
                                                              (line  87)
* Spline (Akima) interpolation:          Interpolation.       (line  88)
* Spline (cubic) interpolation:          Interpolation.       (line  74)
* Spread of a point source:              PSF.                 (line   6)
* SSD:                                   Configure and build in RAM.
                                                              (line  12)
* SSH:                                   Command-line interface.
                                                              (line  92)
* Standard deviation:                    Measuring elliptical parameters.
                                                              (line  35)
* Standard deviation <1>:                Statistical operations.
                                                              (line  64)
* Standard input:                        Input output options.
                                                              (line   9)
* Standard input <1>:                    Standard input.      (line   6)
* Standard input <2>:                    Automatic output.    (line   6)
* Standard input <3>:                    Invoking astconvertt.
                                                              (line  40)
* Standard input <4>:                    Invoking aststatistics.
                                                              (line  38)
* Standard input <5>:                    Text files.          (line 123)
* Standard output:                       Invoking asttable.   (line 158)
* Standard output stream:                Standard input.      (line  13)
* Standard, FITS:                        Generic data container.
                                                              (line  78)
* Stars, modeling:                       Stars.               (line   6)
* Startup scripts:                       Installation directory.
                                                              (line 112)
* Startup scripts <1>:                   Generating random numbers.
                                                              (line  62)
* Startup, shell:                        Invoking astmkprof.  (line  83)
* Static document description format:    Recognized file formats.
                                                              (line  70)
* Static linking:                        Linking.             (line  38)
* Statistical analysis:                  Science and its tools.
                                                              (line  32)
* Steffen interpolation:                 Interpolation.       (line  96)
* Stitch multiple images:                Crop.                (line  20)
* STR:                                   Options.             (line  43)
* Stream editor, SED:                    Executable names.    (line  60)
* Stream: standard input:                Standard input.      (line   6)
* Stream: standard output:               Standard input.      (line  13)
* Stroustrup, Bjarne:                    Science and its tools.
                                                              (line 163)
* Stroustrup, Bjarne <1>:                Why C.               (line  15)
* Structure de-reference operator:       Mandatory source code files.
                                                              (line  56)
* Structures:                            Headers.             (line  89)
* Subaru Telescope:                      Tessellation.        (line  54)
* Submit new tracker item:               Report a bug.        (line  84)
* Suffixes, astronomical data:           Arguments.           (line  22)
* Suffixes, EPS format:                  Recognized file formats.
                                                              (line 102)
* Suffixes, JPEG images:                 Recognized file formats.
                                                              (line  38)
* Suffixes, PDF format:                  Recognized file formats.
                                                              (line 107)
* Suffixes, plain text:                  Recognized file formats.
                                                              (line 121)
* Sufi, Abd al-rahman:                   Sufi simulates a detection.
                                                              (line   6)
* Sum:                                   Statistical operations.
                                                              (line  52)
* Sum for total flux:                    Profile magnitude.   (line   6)
* Superuser, not possible:               Installation directory.
                                                              (line   6)
* Support request manager:               Report a bug.        (line  84)
* Surface brightness:                    Achieved surface brightness level.
                                                              (line  81)
* Surface brightness <1>:                Quantifying measurement limits.
                                                              (line  28)
* SUSE Linux Enterprise Server:          Dependencies from package managers.
                                                              (line 125)
* Symbolic link:                         Executable names.    (line  38)
* System Cache:                          A note on threads.   (line  29)
* System wide configuration files:       System wide.         (line   6)
* Sérsic index:                          Galaxies.            (line  11)
* Sérsic profile:                        Galaxies.            (line   6)
* Sérsic, J. L.:                         Galaxies.            (line  11)
* Tables FITS:                           Recognized table formats.
                                                              (line  19)
* Tabs are evil:                         Coding conventions.  (line 151)
* Task tracker:                          Report a bug.        (line  97)
* Taxicab metric:                        Processing options.  (line 156)
* Test:                                  Quick start.         (line   6)
* Test scripts:                          Test scripts.        (line   6)
* Tests, only one passes:                Known issues.        (line  62)
* Tests, running:                        Tests.               (line   6)
* tests/during-dev.sh:                   Building and debugging.
                                                              (line  23)
* TeX:                                   Known issues.        (line  87)
* TeX <1>:                               Recognized file formats.
                                                              (line  81)
* TeX Live:                              Bootstrapping dependencies.
                                                              (line  81)
* Thread-safety:                         Qsort functions.     (line  28)
* Threads, CPU:                          MakeProfiles profile settings.
                                                              (line 161)
* Thresholding:                          Binary datasets.     (line   6)
* TIFF format:                           Optional dependencies.
                                                              (line  72)
* TIFF format <1>:                       Gnuastro configure options.
                                                              (line 111)
* TIFF format <2>:                       Recognized file formats.
                                                              (line  43)
* TIFF format <3>:                       TIFF files.          (line   6)
* Tilde expansion as option values:      Options.             (line 101)
* Time zone:                             Invoking astscript-sort-by-night.
                                                              (line  72)
* Time, Unix epoch:                      Keyword manipulation.
                                                              (line 299)
* Time, Unix epoch <1>:                  Sort FITS files by night.
                                                              (line  26)
* Timeout:                               Input output options.
                                                              (line   9)
* tmpfs file system:                     Configure and build in RAM.
                                                              (line  23)
* Top processing source file:            Mandatory source code files.
                                                              (line 123)
* Top root structure:                    Mandatory source code files.
                                                              (line  30)
* Tracker:                               Report a bug.        (line  97)
* Tracker <1>:                           Gnuastro project webpage.
                                                              (line   6)
* Trailing space:                        Coding conventions.  (line 146)
* Transform image:                       MakeProfiles.        (line  41)
* Transformation, affine:                Warping basics.      (line  85)
* Transformation, projective:            Warping basics.      (line  93)
* Truncation radius:                     Profile magnitude.   (line   6)
* Tutorial:                              Tutorials.           (line   6)
* Type:                                  Numeric data types.  (line   6)
* Ubuntu:                                Dependencies from package managers.
                                                              (line  56)
* ui.c:                                  Mandatory source code files.
                                                              (line 101)
* ui.h:                                  Mandatory source code files.
                                                              (line  85)
* Uncompress source:                     Quick start.         (line   6)
* Undetected objects:                    Photon counting noise.
                                                              (line  49)
* Universal time coordinate (UTC):       Invoking astscript-sort-by-night.
                                                              (line  72)
* Unix epoch time:                       Keyword manipulation.
                                                              (line 299)
* Unix epoch time <1>:                   Sort FITS files by night.
                                                              (line  26)
* Unix epoch time <2>:                   FITS header keywords.
                                                              (line 111)
* Unsigned integer:                      Numeric data types.  (line  16)
* Upper limit magnitude:                 Quantifying measurement limits.
                                                              (line 225)
* US letter paper size:                  A4 print book.       (line   6)
* Usage pattern:                         --usage.             (line   6)
* User interface functions:              Mandatory source code files.
                                                              (line 102)
* Using CPU threads:                     Multi-threaded operations.
                                                              (line   6)
* Using multiple CPU cores:              Multi-threaded operations.
                                                              (line   6)
* Using multiple threads:                A note on threads.   (line   6)
* UTC (Universal time coordinate):       Invoking astscript-sort-by-night.
                                                              (line  72)
* Valgrind:                              Gnuastro configure options.
                                                              (line  13)
* Valgrind <1>:                          Gnuastro configure options.
                                                              (line  32)
* Valgrind <2>:                          Separate build and source directories.
                                                              (line  91)
* Valgrind <3>:                          Separate build and source directories.
                                                              (line 106)
* Values to options:                     Options.             (line  47)
* Variance:                              Measuring elliptical parameters.
                                                              (line  25)
* Vatican library:                       Fits.                (line   6)
* Vector graphics:                       Recognized file formats.
                                                              (line  62)
* Version control:                       Report a bug.        (line  27)
* Version control <1>:                   Version controlled source.
                                                              (line   6)
* Version control systems:               Optional dependencies.
                                                              (line  52)
* Version control systems <1>:           Gnuastro configure options.
                                                              (line  99)
* Version number:                        Version numbering.   (line   6)
* Versioning: Shared library:            Linking.             (line 129)
* Viewing trackers:                      Report a bug.        (line  97)
* Viridis: Colormap:                     Invoking astconvertt.
                                                              (line 180)
* Virtual console:                       Command-line interface.
                                                              (line  76)
* Visualization:                         Color.               (line  35)
* void *:                                Generic data container.
                                                              (line  51)
* Wall-clock time:                       A note on threads.   (line  19)
* Wassel, Caspar:                        Circles and the complex plane.
                                                              (line  16)
* Watershed algorithm:                   Segment.             (line  58)
* Watershed algorithm <1>:               Labeled datasets.    (line  98)
* Wavelength, rest-frame:                CosmicCalculator input options.
                                                              (line  61)
* WCS:                                   WCSLIB.              (line   6)
* WCS: World Coordinate System:          Column arithmetic.   (line  93)
* WCSLIB:                                WCSLIB.              (line   6)
* WCSLIB <1>:                            Invoking astwarp.    (line 205)
* Weighted average:                      Convolve.            (line   6)
* WFC3:                                  Warp.                (line  53)
* White space character:                 Configuration file format.
                                                              (line  11)
* Wide Field Camera 3:                   Warp.                (line  53)
* Wide Field Camera 3 <1>:               Warping basics.      (line  51)
* William Thomson:                       Science and its tools.
                                                              (line 179)
* World Coordinate System:               WCSLIB.              (line   6)
* World Coordinate System <1>:           Invoking astwarp.    (line 205)
* World Coordinate System (WCS):         Column arithmetic.   (line  93)
* World Coordinate System (WCS) <1>:     Arithmetic operators.
                                                              (line 330)
* Writing configuration files:           Configuration file format.
                                                              (line  33)
* Wrong output:                          Report a bug.        (line   6)
* Wrong results:                         Report a bug.        (line   6)
* XDF survey:                            General program usage tutorial.
                                                              (line  25)
* XDF survey <1>:                        Quantifying measurement limits.
                                                              (line  70)
* yum:                                   Dependencies from package managers.
                                                              (line  76)
* Zero-point magnitude:                  Flux Brightness and magnitude.
                                                              (line  42)
* zypper openSUSE (https://www.opensuse.org) is a community project supported by SUSE (https://www.suse.com) with both stable and rolling releases.: Dependencies from package managers.
                                                              (line 125)

