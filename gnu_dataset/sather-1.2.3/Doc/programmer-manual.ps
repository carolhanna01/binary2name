%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
%	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
%		/FmPD2 /pdfmark load def
		
		
		
		
		
%		/FmPA { mark exch /Dest exch 5 3 roll
%				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD
%		}FmBD
%	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
%	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 52 FMDOCUMENT
0 0 /AvantGarde-Book FMFONTDEFINE
1 0 /Palatino-Italic FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /AvantGarde-Demi FMFONTDEFINE
4 0 /Helvetica-Bold FMFONTDEFINE
5 0 /Times-Roman FMFONTDEFINE
6 0 /Palatino-Bold FMFONTDEFINE
7 0 /Helvetica FMFONTDEFINE
8 0 /AvantGarde-BookOblique FMFONTDEFINE
9 0 /Courier FMFONTDEFINE
10 0 /Times-Italic FMFONTDEFINE
11 0 /Courier-Oblique FMFONTDEFINE
12 0 /Courier-Bold FMFONTDEFINE
13 0 /Times-Bold FMFONTDEFINE
14 0 /Palatino-BoldItalic FMFONTDEFINE
15 1 /Symbol FMFONTDEFINE
16 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
V
0 36 Q
0 X
-1.8 (A Language Manual For) 108 624 S
-1.8 (Sather 1.1) 108 568 S
0 12 Q
(Benedict Gomes) 108 528 T
(, David Stoutamir) 205.86 528 T
(e, Bor) 304.91 528 T
(is V) 337.96 528 T
(aysm) 355.51 528 T
(an, Holger Klawitter) 385.81 528 T
1 10 Q
(August 30, 1996) 108 503.33 T
2 F
0.39 (This document  is an intr) 108 481.33 P
0.39 (oduction to the Sather language appr) 220.03 481.33 P
0.39 (oriate  for those fa-) 386.09 481.33 P
0.75 (miliar with other pr) 108 469.33 P
0.75 (ogramming  languages. Unlike the speci\336cation, this manual) 197.64 469.33 P
-0.49 (eschews conciseness in favor of  ease of  understanding.  Language featur) 108 457.33 P
-0.49 (es ar) 426.49 457.33 P
-0.49 (e pr) 446.3 457.33 P
-0.49 (e-) 462.88 457.33 P
-0.02 (sented in their completeness, augmented by copious examples as well as the moti-) 108 445.33 P
(vation underlying  mor) 108 433.33 T
(e unusual or  complex  language featur) 211.12 433.33 T
(es.) 383.33 433.33 T
0 36 Q
-1.8 (And pSather 1.1) 108 354 S
0 12 Q
(Jer) 108 314 T
(ome  F) 124.96 314 T
(eldm) 164.1 314 T
(an) 193.54 314 T
1 10 Q
(August 19, 1996) 108 293.33 T
2 F
3.13 (The parallel and distributed extensions of Sather) 108 271.33 P
3.13 (, collectively r) 340.67 271.33 P
3.13 (eferr) 408.24 271.33 P
3.13 (ed to as) 428.87 271.33 P
0.11 (pSather) 108 259.33 P
0.11 (, wer) 141.34 259.33 P
0.11 (e designed hand-in-hand with the serial language.  In addition to de-) 163.35 259.33 P
0.05 (scribing the language featur) 108 247.33 P
0.05 (es of pSather) 231.72 247.33 P
0.05 (, this document pr) 287.98 247.33 P
0.05 (esents  a particular ap-) 368.87 247.33 P
(pr) 108 235.33 T
(oach to object-oriented parallel pr) 117.78 235.33 T
(ogramming.) 266.72 235.33 T
261 567 603 567 2 L
3 H
2 Z
N
360 351 603 351 2 L
0.5 H
N
369 342 603 342 2 L
N
378 333 603 333 2 L
N
387 324 603 324 2 L
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
V
0 36 Q
0 X
-1.8 (A Language Manual For) 108 624 S
-1.8 (Sather 1.1) 108 568 S
0 14 Q
(Benedict Gomes) 108 526.67 T
(,  David Stoutamir) 222.17 526.67 T
(e, Bor) 341.6 526.67 T
(isV) 380.16 526.67 T
(aysm) 396.76 526.67 T
(an,) 432.11 526.67 T
(Holger Klawitter) 108 507.67 T
1 10 Q
(August 30, 1996) 108 481.33 T
2 F
-0.61 (This document  is a  description of the Sather language appr) 108 459.33 P
-0.61 (oriate  for those familiar) 366.91 459.33 P
1.39 (with other pr) 108 447.33 P
1.39 (ogramming  languages.   Unlike the speci\336cation, this manual es-) 169.16 447.33 P
0.16 (chews conciseness in favor of  ease of  understanding.  Language featur) 108 435.33 P
0.16 (es ar) 425.2 435.33 P
0.16 (e pr) 445.65 435.33 P
0.16 (e-) 462.88 435.33 P
2.37 (sented in their completeness, augmented by copious examples as well as the) 108 423.33 P
(motivation underlying  mor) 108 411.33 T
(e unusual or  complex  language featur) 231.58 411.33 T
(es.) 403.79 411.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 459 504 459 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 477 504 702 R
7 X
V
1 48 Q
0 X
-2.4 (Contents) 227.59 612 S
108 126 504 441 R
7 X
V
3 18 Q
0 X
(I) 108 429 T
3 14.4 Q
(NTRODUCTION) 113.04 429 T
4 14 Q
(1.1 Ac) 108 387.67 T
(kno) 148.96 387.67 T
(wledg) 173.65 387.67 T
(ements) 213.46 387.67 T
(21) 459 387.67 T
(1.2 Ho) 108 353.67 T
(w to read this Document) 149.8 353.67 T
(22) 459 353.67 T
(1.3 Sour) 108 319.67 T
(ces of Inf) 162.96 319.67 T
(ormation) 224.14 319.67 T
(22) 459 319.67 T
(1.4 Obtaining the Compiler) 108 285.67 T
(22) 459 285.67 T
0 0 0 1 0 0 0 K
5 12 Q
(How do I ask questions?) 144 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 459 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(6) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(1.5 Summar) 108 656.67 T
(y of Features) 187.51 656.67 T
(23) 459 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Basic Concepts) 144 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Garbage Collection and Checking) 144 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . .) 312 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 459 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No Implicit Calls) 144 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 459 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Separation of Subtyping and Code Inclusion) 144 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . .) 360 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 459 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Iterators) 144 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 459 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Closures) 144 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 459 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Immutable and Reference Objects) 144 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . .) 312 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 459 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IEEE Floating-Point) 144 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 459 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pSather) 144 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 186 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 459 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Data placement.) 162 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 459 515 T
0 0 0 1 0 0 0 K
4 14 Q
(1.6 Histor) 108 482.67 T
(y) 171.94 482.67 T
(28) 459 482.67 T
0 0 0 1 0 0 0 K
5 12 Q
(The Name) 144 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 198 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 459 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sather\325s Antecedents) 144 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 459 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(References) 144 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 201 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 459 439 T
0 0 0 1 0 0 0 K
3 18 Q
(C) 108 377 T
3 14.4 Q
(LASSES) 122.04 377 T
(AND) 174.02 377 T
3 18 Q
(O) 210.46 377 T
3 14.4 Q
(BJECTS) 225.57 377 T
4 14 Q
(2.1 Preliminaries) 108 335.67 T
(33) 459 335.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Some basic classes - INT, FLT and STR) 144 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . .) 342 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 459 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Printing output) 144 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 459 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sather source files) 144 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 459 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Hello World) 144 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 210 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 459 278 T
0 0 0 1 0 0 0 K
4 14 Q
(2.2 De\336ning Classes and Creating Objects) 108 245.67 T
(35) 459 245.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Defining Simple Classes) 144 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 459 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Creation:) 162 216 T
7 F
(create) 244.66 216 T
5 F
( and) 278 216 T
7 F
(new.) 301.33 216 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . .) 326.93 216 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 459 216 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Attribute access.) 162 202 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243 202 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 459 202 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 459 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Checking whether an object has been created) 144 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . .) 366 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 459 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Types Introduced) 144 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 459 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Hiding features: private and readonly) 144 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . .) 327 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 459 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 459 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 693 504 693 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 10 Q
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
6 F
(7) 499 704.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(2.3 Class Data: shared and const) 108 656.67 T
(38) 459 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Shared  Attributes - Restricted global variables) 144 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . .) 375 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class Constants) 144 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 459 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Integer constants and Enumerated Types.) 162 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . .) 363 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 459 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 459 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Accessing Class Data - the :: notation) 144 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . .) 330 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 459 585 T
0 0 0 1 0 0 0 K
4 14 Q
(2.4 Routine de\336nitions) 108 552.67 T
(42) 459 552.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Using the return value.) 162 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 273 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 459 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Routine Arguments and Modes) 144 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 300 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 459 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Multiple return values and) 162 509 T
7 F
(out) 291.98 509 T
5 F
( arguments.) 308.66 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . .) 366 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 459 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(inout) 162 495 T
5 F
(arguments.) 191.35 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 459 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Local Variables - Scoping and Shadowing) 144 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . .) 351 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 459 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 459 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Routine calls) 144 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 210 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 459 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Simple Overloading - Selecting a routine to call) 144 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . .) 378 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 459 439 T
0 0 0 1 0 0 0 K
4 14 Q
(2.5 Conditional Ex) 108 406.67 T
(ecution) 229.23 406.67 T
(47) 459 406.67 T
0 0 0 1 0 0 0 K
7 12 Q
(if) 144 391 T
5 F
( statements) 150 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 459 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(case) 144 377 T
5 F
( statements) 169.34 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 459 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 459 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Short circuit boolean expressions:) 144 349 T
7 F
(and) 309.98 349 T
5 F
( and) 330 349 T
7 F
(or) 353.33 349 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . .) 370.3 349 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 459 349 T
0 0 0 1 0 0 0 K
4 14 Q
(2.6 Attrib) 108 316.67 T
(ute Accessor Routines) 168.4 316.67 T
(51) 459 316.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Attribute assignment) 144 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 459 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Replacing an attribute by a routine.) 162 287 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . .) 333 287 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 459 287 T
0 0 0 1 0 0 0 K
4 14 Q
(2.7 Static T) 108 254.67 T
(ype Inf) 181.08 254.67 T
(erence) 226.06 254.67 T
(53) 459 254.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Creation Expressions) 144 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 459 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Assignments and ::=) 144 225 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 225 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 459 225 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arguments to a function call) 144 211 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285 211 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 459 211 T
0 0 0 1 0 0 0 K
4 14 Q
(2.8 Class P) 108 178.67 T
(arameter) 181.51 178.67 T
(s) 240.44 178.67 T
(55) 459 178.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Arrays) 144 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 459 163 T
0 0 0 1 0 0 0 K
4 14 Q
(2.9 A Running Example: Emplo) 108 130.67 T
(y) 314.65 130.67 T
(ees) 322.3 130.67 T
(56) 459 130.67 T
0 0 0 1 0 0 0 K
5 12 Q
(EMPLOYEE definition.) 162 115 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 279 115 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 459 115 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(8) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
5 12 Q
0 X
(TESTEMP definition.) 162 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 270 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 459 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Running the example.) 162 644 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 270 644 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 459 644 T
0 0 0 1 0 0 0 K
3 18 Q
(L) 108 582 T
3 14.4 Q
(OOPS) 115.92 582 T
(AND) 160.7 582 T
3 18 Q
(I) 197.13 582 T
3 14.4 Q
(TERATORS) 202.18 582 T
4 14 Q
(3.1 Using iterator) 108 540.67 T
(s) 222.16 540.67 T
(59) 459 540.67 T
0 0 0 1 0 0 0 K
7 12 Q
( loop) 144 525 T
5 F
( statements) 170.02 525 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 525 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 459 525 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Built-in iterators) 144 511 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 511 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 459 511 T
0 0 0 1 0 0 0 K
4 14 Q
(3.2 De\336ning Iterator) 108 478.67 T
(s) 239.26 478.67 T
(62) 459 478.67 T
0 0 0 1 0 0 0 K
7 12 Q
(yield) 144 463 T
5 F
( statements) 168.67 463 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 463 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 459 463 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Explicitly leaving an iterator using) 144 449 T
7 F
(quit) 313.66 449 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . .) 336.94 449 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 459 449 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Control flow within an iterator) 144 435 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 297 435 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 459 435 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 144 421 T
7 F
(once) 165.66 421 T
5 F
( argument mode) 191.68 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 273 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 459 421 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(out) 144 407 T
5 F
( and) 160.68 407 T
7 F
(inout) 184.01 407 T
5 F
( argument modes) 210.02 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 297 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 459 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(pre) 144 393 T
5 F
( and) 161.34 393 T
7 F
(post) 184.67 393 T
5 F
( conditions in iterators) 207.35 393 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . .) 321 393 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 459 393 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Argument evaluation in iterators) 144 379 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . .) 306 379 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 459 379 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Points to note) 144 365 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219 365 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 459 365 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Iterator usage.) 162 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 459 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Iterator definitions.) 162 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 459 337 T
0 0 0 1 0 0 0 K
4 14 Q
(3.3 Iterator Examples) 108 304.67 T
(67) 459 304.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Separating elements of a list.) 162 289 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 303 289 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 459 289 T
0 0 0 1 0 0 0 K
3 18 Q
(C) 108 227 T
3 14.4 Q
(ODE) 122.04 227 T
3 18 Q
(I) 156.74 227 T
3 14.4 Q
(NCLUSION) 161.78 227 T
(AND) 238.53 227 T
3 18 Q
(P) 274.97 227 T
3 14.4 Q
(ARTIAL) 285.05 227 T
3 18 Q
(C) 336.17 227 T
3 14.4 Q
(LASSES) 350.2 227 T
4 14 Q
(4.1 Inc) 108 185.67 T
(lude Clauses) 151.3 185.67 T
(71) 459 185.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Points to Note.) 162 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 459 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Renaming) 144 156 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 198 156 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 459 156 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 142 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 142 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 459 142 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Multiple Inclusion) 144 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 459 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Resolving conflicts) 144 114 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 114 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 459 114 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 693 504 693 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 10 Q
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
6 F
(9) 499 704.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(4.2 P) 108 656.67 T
(ar) 140.27 656.67 T
(tial Classes and Stub r) 153.78 656.67 T
(outines) 303.66 656.67 T
(75) 459 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Points to note.) 162 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mixins: A Prompt Example) 144 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 282 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 459 627 T
0 0 0 1 0 0 0 K
3 18 Q
(A) 108 565 T
3 14.4 Q
(BSTRACT) 121.32 565 T
3 18 Q
(C) 184.54 565 T
3 14.4 Q
(LASSES) 198.57 565 T
(AND) 250.56 565 T
3 18 Q
(S) 286.99 565 T
3 14.4 Q
(UBTYPING) 296.35 565 T
4 14 Q
(5.1 Abstracting o) 108 523.67 T
(ver Implementations) 221.3 523.67 T
(79) 459 523.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Implementing a Stack using an Array) 144 508 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . .) 327 508 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 459 508 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A Stack Calculator) 144 494 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 494 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 459 494 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A Linked List Representation of a Stack) 144 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . .) 342 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 459 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Switching Representations:Polymorphism) 144 466 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . .) 351 466 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 459 466 T
0 0 0 1 0 0 0 K
4 14 Q
(5.2 Abstract Class De\336nitions) 108 433.67 T
(82) 459 433.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Example: An abstract employee.) 162 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . .) 321 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 459 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( More abstract class examples.) 162 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . .) 309 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 459 404 T
0 0 0 1 0 0 0 K
4 14 Q
(5.3  Subtyping) 108 371.67 T
(84) 459 371.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Points to note about  subtyping:.) 162 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . .) 318 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 459 356 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Type Graph) 144 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 459 342 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dynamic Dispatch and  Subtyping) 144 328 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . .) 315 328 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 459 328 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An example: Generalizing Employees.) 162 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . .) 348 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 459 314 T
0 0 0 1 0 0 0 K
4 14 Q
(5.4 Super) 108 281.67 T
(typing) 171.31 281.67 T
(86) 459 281.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Using supertyping) 144 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(87) 459 266 T
0 0 0 1 0 0 0 K
4 14 Q
(5.5 T) 108 233.67 T
(ype Conf) 139.07 233.67 T
(ormance) 198.68 233.67 T
(87) 459 233.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Contravariant conformance) 144 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 279 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(87) 459 218 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(What does not work.) 162 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 264 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(88) 459 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(What does work.) 162 190 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 190 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(89) 459 190 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Subtyping = substitutability) 144 176 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 282 176 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(89) 459 176 T
0 0 0 1 0 0 0 K
4 14 Q
(5.6 The typecase statement) 108 143.67 T
(90) 459 143.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Points to note.) 162 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 459 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Typecase Example.) 162 114 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 114 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(91) 459 114 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(10) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(5.7 The Overloading Rule) 108 656.67 T
(91) 459 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Extending Overloading) 144 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(92) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overloading based on Concrete Argument Types.) 162 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . .) 402 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(92) 459 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overloading based on Abstract Argument Types.) 162 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . .) 399 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(92) 459 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Demon of Ambiguity.) 162 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(93) 459 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Permissible overloading) 144 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 264 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(94) 459 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Finding matching signatures.) 162 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 303 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(95) 459 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Finding a most specific matching signature.) 162 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . .) 372 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(96) 459 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(More examples.) 162 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(96) 459 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overloading as Statically resolved Multi-Methods) 144 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . .) 390 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 459 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Conflicts when subtyping) 144 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 273 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 459 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Conflicts during code inclusion) 144 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 300 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(98) 459 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Conflicting Methods.) 162 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(99) 459 487 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Conflicting Attributes.) 162 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 273 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(99) 459 473 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note) 144 459 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 459 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100) 459 459 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overloading in Parametrized Classes) 144 445 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . .) 327 445 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100) 459 445 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Why not use the return type to resolve conflicts?) 144 431 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . .) 381 431 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100) 459 431 T
0 0 0 1 0 0 0 K
4 14 Q
(5.8 When Co) 108 398.67 T
(v) 191.73 398.67 T
(ariance Ails Y) 199.24 398.67 T
(ou) 289.66 398.67 T
(100) 459 398.67 T
0 0 0 1 0 0 0 K
5 12 Q
(But don\325t animals eat food?) 144 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 282 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100) 459 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Solution 1: Refactor the type hierarchy) 144 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . .) 336 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(101) 459 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Solution 2: Eliminate the offending method) 144 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . .) 357 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(101) 459 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Solution 3:  Dynamically Determine the Type) 144 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . .) 369 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(101) 459 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Solution 4: Parametrize by the Argument Type) 144 327 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . .) 375 327 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(102) 459 327 T
0 0 0 1 0 0 0 K
3 18 Q
(P) 108 265 T
3 14.4 Q
(ARAMETRIZED) 118.08 265 T
3 18 Q
(C) 216.43 265 T
3 14.4 Q
(LASSES) 230.47 265 T
(AND) 282.45 265 T
3 18 Q
(A) 318.89 265 T
3 14.4 Q
(RRAYS) 332.2 265 T
4 14 Q
(6.1 P) 108 223.67 T
(arametriz) 140.27 223.67 T
(ed concrete types) 202.65 223.67 T
(103) 459 223.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Why Parametrize?) 144 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(104) 459 208 T
0 0 0 1 0 0 0 K
4 14 Q
(6.2 Suppor) 108 175.67 T
(t f) 180.63 175.67 T
(or Arra) 193.57 175.67 T
(ys) 239.96 175.67 T
(105) 459 175.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Array Access) 144 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(105) 459 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Array Classes: Including) 144 146 T
7 F
(AREF) 266.32 146 T
5 F
( and calling) 298.32 146 T
7 F
(new\050\051) 357.31 146 T
5 F
(;) 387.31 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . .) 396 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(106) 459 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Standard Arrays: ARRAY{T}) 144 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 459 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 693 504 693 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 10 Q
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
6 F
(11) 494 704.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
5 12 Q
0 X
(Array Literals.) 162 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 459 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Multi-dimensional Arrays) 144 644 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 273 644 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 459 644 T
0 0 0 1 0 0 0 K
4 14 Q
(6.3 T) 108 611.67 T
(ype Bounds) 139.07 611.67 T
(108) 459 611.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Why have typebounds?) 144 596 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 596 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(109) 459 596 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Supertyping and Type Bounds) 144 582 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294 582 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(109) 459 582 T
0 0 0 1 0 0 0 K
4 14 Q
(6.4 P) 108 549.67 T
(arametriz) 140.27 549.67 T
(ed Abstract Classes) 202.65 549.67 T
(111) 459 549.67 T
0 0 0 1 0 0 0 K
5 12 Q
(How are different parametrizations related?.) 162 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . .) 375 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(112) 459 534 T
0 0 0 1 0 0 0 K
4 14 Q
(6.5 Overloading) 108 501.67 T
(112) 459 501.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Overloading In the Parametrized Class Interface) 144 486 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . .) 381 486 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(112) 459 486 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overloading Resolution within the Parametrized Class) 144 472 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . .) 411 472 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(113) 459 472 T
0 0 0 1 0 0 0 K
3 18 Q
(O) 108 410 T
3 14.4 Q
(PERATOR) 123.12 410 T
3 18 Q
(R) 189.21 410 T
3 14.4 Q
(EDEFINITION) 199.65 410 T
4 14 Q
(7.1 Method Names f) 108 368.67 T
(or Operator) 239.19 368.67 T
(s) 316 368.67 T
(115) 459 368.67 T
(7.2 Operator  e) 108 334.67 T
(xpressions) 205.83 334.67 T
(116) 459 334.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Grouping.) 162 319 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 319 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(117) 459 319 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operator precedence) 144 305 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 305 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(117) 459 305 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 291 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 291 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(117) 459 291 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Syntactic sugar example.) 162 277 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285 277 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(118) 459 277 T
0 0 0 1 0 0 0 K
4 14 Q
(7.3 Arra) 108 244.67 T
(y Access Routines) 159.86 244.67 T
(118) 459 244.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(12) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
3 18 Q
0 X
(I) 108 654 T
3 14.4 Q
(MMUTABLE) 113.04 654 T
3 18 Q
(C) 192.1 654 T
3 14.4 Q
(LASSES) 206.13 654 T
4 14 Q
(8.1 De\336ning Imm) 108 612.67 T
(utab) 219.75 612.67 T
(le Classes) 249.16 612.67 T
(119) 459 612.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Immutable Class Example) 144 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 276 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(120) 459 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Creating a new object) 144 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(120) 459 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Initial value of immutable objects) 144 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . .) 309 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(120) 459 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Void value of  the basic classes:.) 162 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . .) 321 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(121) 459 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Attribute access routines) 144 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(121) 459 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Points to note) 144 527 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219 527 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(121) 459 527 T
0 0 0 1 0 0 0 K
4 14 Q
(8.2 Using Imm) 108 494.67 T
(utab) 202.64 494.67 T
(le Classes) 232.05 494.67 T
(122) 459 494.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Rules of Thumb.) 162 479 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243 479 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(122) 459 479 T
0 0 0 1 0 0 0 K
3 18 Q
(C) 108 417 T
3 14.4 Q
(LOSURES) 122.04 417 T
4 14 Q
(9.1 Creating and Calling Closures) 108 375.67 T
(123) 459 375.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Creating a closure) 144 360 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 360 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 459 360 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Calling a closure) 144 346 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 346 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(124) 459 346 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binding overloaded routines) 144 332 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285 332 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(124) 459 332 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binding in an assignment.) 162 318 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 288 318 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(125) 459 318 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binding in a call.) 162 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(125) 459 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note) 144 290 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 290 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(125) 459 290 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binding some arguments) 144 276 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 267 276 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(126) 459 276 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Leaving) 144 262 T
7 F
(self) 186.32 262 T
5 F
( unbound) 205 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 262 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(126) 459 262 T
0 0 0 1 0 0 0 K
4 14 Q
(9.2 Fur) 108 229.67 T
(ther Examples of Closures) 154.19 229.67 T
(127) 459 229.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Closures for Applicative Programming) 144 214 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . .) 336 214 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(127) 459 214 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Menu Structures) 144 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 459 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Iterator closures) 144 186 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 186 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(130) 459 186 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 693 504 693 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 10 Q
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
6 F
(13) 494 704.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
3 18 Q
0 X
(E) 108 654 T
3 14.4 Q
(XCEPTIONS) 117.36 654 T
4 14 Q
(10.1 Thr) 108 612.67 T
(o) 161.41 612.67 T
(wing and Catc) 169.75 612.67 T
(hing Exceptions) 264.52 612.67 T
(131) 459 612.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Throwing Exceptions with) 144 597 T
7 F
(raise) 274.99 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . .) 306.91 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(131) 459 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Catching Exceptions with) 144 583 T
7 F
(protect) 271 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . .) 313.58 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(132) 459 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Points to note.) 162 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(132) 459 569 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Usage to avoid) 144 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(132) 459 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Alternatives to Exceptions) 144 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 276 541 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(133) 459 541 T
0 0 0 1 0 0 0 K
4 14 Q
(10.2 A more elaborate e) 108 508.67 T
(xample) 264.97 508.67 T
(133) 459 508.67 T
3 18 Q
(S) 108 445 T
3 14.4 Q
(AFETY) 117.36 445 T
3 18 Q
(F) 162.43 445 T
3 14.4 Q
(EATURES) 171.07 445 T
4 14 Q
(11.1 Preconditions) 108 403.67 T
(135) 459 403.67 T
(11.2 P) 108 369.67 T
(ostconditions) 147.91 369.67 T
(136) 459 369.67 T
0 0 0 1 0 0 0 K
7 12 Q
(initial) 144 354 T
5 F
( expressions) 171.34 354 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 354 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(137) 459 354 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(result) 144 340 T
5 F
( expressions) 173.34 340 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 340 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(137) 459 340 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example) 144 326 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192 326 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(137) 459 326 T
0 0 0 1 0 0 0 K
4 14 Q
(11.3 Asser) 108 293.67 T
(tions) 178.32 293.67 T
(137) 459 293.67 T
0 0 0 1 0 0 0 K
7 12 Q
(assert) 144 278 T
5 F
(statements) 180.01 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 459 278 T
0 0 0 1 0 0 0 K
4 14 Q
(11.4 In) 108 245.67 T
(v) 151.02 245.67 T
(ariants) 158.53 245.67 T
(138) 459 245.67 T
0 0 0 1 0 0 0 K
5 12 Q
( The) 144 230 T
7 F
(invariant) 171.66 230 T
5 F
( routine) 223.68 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 264 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 459 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(14) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
3 18 Q
0 X
(B) 108 654 T
3 14.4 Q
(UILT) 118.44 654 T
3 18 Q
(-) 144.07 654 T
3 14.4 Q
(IN) 151.63 654 T
(CLASSES) 171.36 654 T
4 14 Q
(12.1 Fundamental Classes) 108 612.67 T
(141) 459 612.67 T
0 0 0 1 0 0 0 K
7 12 Q
($OB) 144 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.47 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 459 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Array support) 144 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 583 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 459 583 T
0 0 0 1 0 0 0 K
4 14 Q
(12.2 T) 108 550.67 T
(uples) 146.43 550.67 T
(142) 459 550.67 T
(12.3 The SYS Class) 108 516.67 T
(142) 459 516.67 T
(12.4 Object Finalization: $FINALIZE) 108 482.67 T
(143) 459 482.67 T
(12.5 Basic Classes and Literal Forms) 108 448.67 T
(143) 459 448.67 T
0 0 0 1 0 0 0 K
5 12 Q
( Booleans and the BOOL class) 144 433 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 297 433 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 459 433 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Characters and the CHAR class) 144 419 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 300 419 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 459 419 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The string class, STR) 144 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 459 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Integers and the INT class) 144 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 273 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 459 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Infinite precision integers and the INTI class) 144 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . .) 363 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 459 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Floating point numbers: the FLT and FLTD classes) 144 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . .) 396 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 459 363 T
0 0 0 1 0 0 0 K
4 14 Q
(12.6 Librar) 108 330.67 T
(y Con) 178.95 330.67 T
(ventions) 217.28 330.67 T
(146) 459 330.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Object Identity) 144 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 459 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IS_EQ.) 162 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 198 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 459 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Programmer defined hash functions and $HASH.) 162 287 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . .) 399 287 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 459 287 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Objects that can be copied and $COPY.) 162 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . .) 354 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 459 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Nil and void) 144 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 459 259 T
0 0 0 1 0 0 0 K
3 18 Q
(I) 108 197 T
3 14.4 Q
(NTERFACING) 113.04 197 T
(WITH) 206.21 197 T
3 18 Q
(F) 244.08 197 T
3 14.4 Q
(ORTRAN) 252.72 197 T
4 14 Q
(13.1 Over) 108 155.67 T
(vie) 171.18 155.67 T
(w) 190.43 155.67 T
(149) 459 155.67 T
0 0 0 1 0 0 0 K
5 12 Q
(External Fortran Call Example) 144 140 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 297 140 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(150) 459 140 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overall Organization) 144 126 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 126 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(151) 459 126 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 112 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 112 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(153) 459 112 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 693 504 693 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 10 Q
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
6 F
(15) 494 704.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(13.2 Name Binding) 108 656.67 T
(153) 459 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Difficulties) 144 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 204 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(153) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementation) 144 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(154) 459 627 T
0 0 0 1 0 0 0 K
4 14 Q
(13.3 Datatype Mapping) 108 594.67 T
(156) 459 594.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Scalar Types) 144 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 210 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(158) 459 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_INTEGER.) 162 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(159) 459 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_REAL.) 162 551 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 210 551 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(161) 459 551 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_DOUBLE.) 162 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(162) 459 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_LOGICAL.) 162 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(162) 459 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_COMPLEX.) 162 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(163) 459 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_DOUBLE_COMPLEX.) 162 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(164) 459 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_CHARACTER.) 162 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(164) 459 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_STRING.) 162 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(165) 459 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fortran Array Classes) 144 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(165) 459 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(167) 459 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_ROUT and F_HANDLER Types) 144 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . .) 318 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(168) 459 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Passing Routines as Arguments, F_ROUT{}.) 162 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . .) 381 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(168) 459 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(169) 459 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptional Condition Handling, F_HANDLER.) 162 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . .) 399 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(170) 459 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(172) 459 369 T
0 0 0 1 0 0 0 K
4 14 Q
(13.4 P) 108 336.67 T
(arameter P) 148.05 336.67 T
(assing) 220 336.67 T
(172) 459 336.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Return Types) 144 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(172) 459 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Argument Types) 144 307 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 307 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(173) 459 307 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(OUT and INOUT Arguments) 144 293 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291 293 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(174) 459 293 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 279 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 279 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(175) 459 279 T
0 0 0 1 0 0 0 K
4 14 Q
(13.5 P) 108 246.67 T
(or) 147.91 246.67 T
(tability Issues) 162.19 246.67 T
(175) 459 246.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Portability of the Interface Implementation Code) 144 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . .) 384 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(175) 459 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Portability of the Generated Code) 144 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . .) 309 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(175) 459 217 T
0 0 0 1 0 0 0 K
3 18 Q
(I) 108 155 T
3 14.4 Q
(NTERFACING) 113.04 155 T
(WITH) 206.21 155 T
3 18 Q
(ANSI) 244.08 155 T
(C) 290.16 155 T
4 14 Q
(14.1 Overall Or) 108 113.67 T
(ganization) 206.63 113.67 T
(177) 459 113.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(16) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(14.2 Built-in C c) 108 656.67 T
(lasses) 212.75 656.67 T
(178) 459 656.67 T
(14.3 User) 108 622.67 T
(-de\336ned External C types) 169.98 622.67 T
(179) 459 622.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Constants and C binding names) 144 607 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 300 607 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(179) 459 607 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Examples.) 162 593 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 593 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(180) 459 593 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Attributes and C structs) 144 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(182) 459 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Attributes and C structs.) 162 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 279 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(182) 459 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 551 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 551 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(182) 459 551 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Shared Attributes and C globals) 144 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 303 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(182) 459 537 T
0 0 0 1 0 0 0 K
4 14 Q
(14.4 P) 108 504.67 T
(arameter P) 148.05 504.67 T
(assing) 220 504.67 T
(183) 459 504.67 T
(14.5 Inlining C Code) 108 470.67 T
(183) 459 470.67 T
3 18 Q
(S) 108 407 T
3 14.4 Q
(TATEMENT) 117.36 407 T
(AND) 189.79 407 T
3 18 Q
(E) 226.22 407 T
3 14.4 Q
(XPRESSION) 235.58 407 T
3 18 Q
(C) 316.08 407 T
3 14.4 Q
(ATALOGUE) 330.12 407 T
4 14 Q
(15.1 Statements) 108 365.67 T
(185) 459 365.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Assignment statements) 144 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(185) 459 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(case) 144 336 T
5 F
( statements) 169.34 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(186) 459 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Points to note.) 162 322 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 322 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(186) 459 322 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(See.) 162 308 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 183 308 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(186) 459 308 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(if) 144 294 T
5 F
( statements) 150 294 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 294 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 459 294 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(See.) 162 280 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 183 280 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 459 280 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
( protect) 147 266 T
5 F
(statements) 190.36 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 459 266 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(See.) 162 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 183 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 459 252 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(loop) 144 238 T
5 F
( statements) 166.68 238 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 238 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 459 238 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(return) 144 224 T
5 F
( statements) 175.34 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 459 224 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(typecase) 144 210 T
5 F
( statements) 192.02 210 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 210 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(189) 459 210 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(yield) 144 196 T
5 F
( statements) 168.67 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 459 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(quit) 144 182 T
5 F
( statements) 163.34 182 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222 182 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 459 182 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 693 504 693 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 10 Q
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
6 F
(17) 494 704.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(15.2 Expressions) 108 656.67 T
(190) 459 656.67 T
0 0 0 1 0 0 0 K
7 12 Q
(void) 144 641 T
5 F
( expressions) 166.01 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(191) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(void) 144 627 T
5 F
( test expressions) 166.01 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(192) 459 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Short circuit boolean expressions:) 144 613 T
7 F
(and) 309.98 613 T
5 F
( and) 330 613 T
7 F
(or) 353.33 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . .) 370.3 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(192) 459 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exception) 144 599 T
5 F
( expressions) 195.36 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(192) 459 599 T
0 0 0 1 0 0 0 K
3 14.4 Q
(P) 108 537 T
3 18 Q
(S) 116.06 537 T
3 14.4 Q
(ATHER) 125.42 537 T
3 18 Q
(T) 172.8 537 T
3 14.4 Q
(UTORIAL) 180.36 537 T
4 14 Q
(16.1 Intr) 108 495.67 T
(oduction) 161.41 495.67 T
(197) 459 495.67 T
3 18 Q
(T) 108 432 T
3 14.4 Q
(HE) 115.56 432 T
3 18 Q
(T) 137.88 432 T
3 14.4 Q
(HREADED) 145.44 432 T
3 18 Q
(E) 214.41 432 T
3 14.4 Q
(XTENSION) 223.77 432 T
4 14 Q
(17.1 Intr) 108 390.67 T
(oduction) 161.41 390.67 T
(199) 459 390.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Hello Worlds) 144 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(199) 459 375 T
0 0 0 1 0 0 0 K
4 14 Q
(17.2 Realistic Examples Using Threads) 108 342.67 T
(201) 459 342.67 T
3 18 Q
(T) 108 279 T
3 14.4 Q
(HE) 115.56 279 T
3 18 Q
(S) 137.88 279 T
3 14.4 Q
(YNCHRONIZATION) 147.24 279 T
3 18 Q
(E) 278.71 279 T
3 14.4 Q
(XTENSION) 288.07 279 T
4 14 Q
(18.1  Barrier Sync) 108 237.67 T
(hr) 226.15 237.67 T
(onization and sync) 239.87 237.67 T
(203) 459 237.67 T
(18.2 The loc) 108 203.67 T
(k Statement and the MUTEX Class) 187.87 203.67 T
(203) 459 203.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Memory Consistency, Round One) 144 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . .) 312 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(205) 459 188 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Conjunctive Locking) 144 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(205) 459 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Read-Write Locks, three kinds) 144 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 297 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(206) 459 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Tuple Space, Round 1) 144 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(207) 459 146 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Disjunctive Locking) 144 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(210) 459 132 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(18) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(18.3 GA) 108 656.67 T
(TE and GA) 158.88 656.67 T
(TE{T} c) 229.18 656.67 T
(lasses) 277.92 656.67 T
(211) 459 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Gates as Synchronizers and Queues) 144 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . .) 321 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(211) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Tuple Space, Round Two) 144 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 270 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(214) 459 627 T
0 0 0 1 0 0 0 K
4 14 Q
(18.4  GA) 108 594.67 T
(TES and attac) 162.77 594.67 T
(hed threads) 255.21 594.67 T
(218) 459 594.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Tasks, Actors, etc.) 144 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(220) 459 579 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Discussion and Extensions) 144 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 276 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(223) 459 565 T
0 0 0 1 0 0 0 K
3 18 Q
(P) 108 503 T
3 14.4 Q
(ERFORMANCE) 118.08 503 T
(AND) 219.31 503 T
3 18 Q
(T) 255.74 503 T
3 14.4 Q
(HE) 263.3 503 T
3 18 Q
(D) 285.62 503 T
3 14.4 Q
(ISTRIBUTED) 298.22 503 T
3 18 Q
(E) 374.4 503 T
3 14.4 Q
(XTENSION) 383.76 503 T
4 14 Q
(19.1 Intr) 108 461.67 T
(oduction) 161.41 461.67 T
(227) 459 461.67 T
(19.2 Placement and the @ operator) 108 427.67 T
(.) 340.22 427.67 T
(228) 459 427.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Tuple Spaces, Round Three) 144 412 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 282 412 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(232) 459 412 T
0 0 0 1 0 0 0 K
4 14 Q
(19.3 Ad) 108 379.67 T
(dresses and the with ... near construct) 157.66 379.67 T
(234) 459 379.67 T
3 18 Q
(A) 108 316 T
3 14.4 Q
(DVANCED) 121.32 316 T
(P) 196.63 316 T
3 18 Q
(S) 204.7 316 T
3 14.4 Q
(ATHER) 214.05 316 T
3 18 Q
(T) 261.43 316 T
3 14.4 Q
(OPICS) 268.99 316 T
4 14 Q
(20.1 Exceptions in pSather) 108 274.67 T
(237) 459 274.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Yielding inside locks) 144 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(237) 459 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementation Considerations) 144 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 300 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(238) 459 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Thread-safe libraries) 144 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 249 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(238) 459 231 T
0 0 0 1 0 0 0 K
4 14 Q
(20.2 User de\336ned $LOCK c) 108 198.67 T
(lasses) 286.67 198.67 T
(238) 459 198.67 T
0 0 0 1 0 0 0 K
5 12 Q
(Reservable, Reserve and Free) 144 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(239) 459 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Primary) 144 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 186 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(240) 459 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Request_reservation, Cancel_reservation) 144 155 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . .) 345 155 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(242) 459 155 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Combinations) 144 141 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 141 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(243) 459 141 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Wait_for) 144 127 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192 127 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(244) 459 127 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Summary) 144 113 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195 113 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(244) 459 113 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 693 504 693 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 10 Q
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
6 F
(19) 494 704.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
3 18 Q
0 X
(A) 108 654 T
3 14.4 Q
(PPENDIX) 121.32 654 T
3 18 Q
(I:) 184.54 654 T
(T) 199.65 654 T
3 14.4 Q
(RANSLATING) 207.21 654 T
3 18 Q
(T) 299.23 654 T
3 14.4 Q
(ERMINOLOGY) 306.79 654 T
0 0 0 1 0 0 0 K
5 12 Q
(Sather 1.0 to Sather 1.1) 144 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(245) 459 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C++ to Sather) 144 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(245) 459 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Java to Sather) 144 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(247) 459 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Modula-3 to Sather) 144 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(247) 459 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Smalltalk to Sather) 144 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(248) 459 558 T
0 0 0 1 0 0 0 K
3 18 Q
(I) 108 496 T
3 14.4 Q
(NDEX) 113.04 496 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(20) 108 704.33 T
1 F
(Sather Language Manual: T) 217.29 704.33 T
(able of Contents) 330.08 704.33 T
108 693 504 693 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Intr) 260.68 710.84 T
(oduction :) 272.32 710.84 T
0 F
(1.1) 314.16 710.84 T
(Ac) 327.46 710.84 T
(kno) 338.44 710.84 T
(wledgements) 352.41 710.84 T
6 10 Q
(21) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Intr) 108 642 S
-0.25 (oduction) 159.42 642 S
5 10 Q
0.38 (Sather is an object oriented language designed to be simple, ef) 108 517.33 P
0.38 (\336cient, safe, and non-proprietary) 361.22 517.33 P
0.38 (. It) 492.51 517.33 P
0.36 (aims to meet the needs of modern research groups and to foster the de) 108 505.33 P
0.36 (v) 392.09 505.33 P
0.36 (elopment of a lar) 396.94 505.33 P
0.36 (ge, freely) 465.88 505.33 P
0.52 (a) 108 493.33 P
0.52 (v) 112.24 493.33 P
0.52 (ailable, high-quality library of ef) 116.99 493.33 P
0.52 (\336cient well-written classes for a wide v) 249.61 493.33 P
0.52 (ariety of computational) 409.65 493.33 P
-0.11 (tasks. It w) 108 481.33 P
-0.11 (as originally based on Eif) 148.52 481.33 P
-0.11 (fel b) 250.05 481.33 P
-0.11 (ut no) 267.79 481.33 P
-0.11 (w incorporates ideas and approaches from se) 287.72 481.33 P
-0.11 (v) 466.22 481.33 P
-0.11 (eral lan-) 471.07 481.33 P
0.08 (guages. One w) 108 469.33 P
0.08 (ay of placing it in the \324space of languages\325 is to say that it attempts to be as ef) 167.22 469.33 P
0.08 (\336cient) 479 469.33 P
-0.2 (as C, C++, or F) 108 457.33 P
-0.2 (ortran, as ele) 168.9 457.33 P
-0.2 (g) 219.72 457.33 P
-0.2 (ant b) 224.67 457.33 P
-0.2 (ut safer than Eif) 243.99 457.33 P
-0.2 (fel or CLU, and to support higher) 307.29 457.33 P
-0.2 (-order functions) 440.05 457.33 P
(as well as Common Lisp, Scheme, or Smalltalk.) 108 445.33 T
-0.37 (Sather has g) 108 423.33 P
-0.37 (arbage collection, statically-check) 156.09 423.33 P
-0.37 (ed strong \050contra) 291.6 423.33 P
-0.37 (v) 358.43 423.33 P
-0.37 (ariant\051 typing, multiple inheritance,) 363.18 423.33 P
0.98 (separate implementation and type inheritance, parameterized classes, dynamic dispatch, iteration) 108 411.33 P
0.16 (abstraction, higher) 108 399.33 P
0.16 (-order routines and iters, e) 182.39 399.33 P
0.16 (xception handling, assertions, preconditions, postcon-) 288.11 399.33 P
0.03 (ditions, and class in) 108 387.33 P
0.03 (v) 186.59 387.33 P
0.03 (ariants.  Sather code can be compiled into C code and can ef) 191.34 387.33 P
0.03 (\336ciently link with) 432.81 387.33 P
0.9 (object \336les of other languages.  pSather) 108 375.33 P
0.9 (, the parallel and distrib) 271.05 375.33 P
0.9 (uted e) 369.18 375.33 P
0.9 (xtension, presents a shared) 394.09 375.33 P
(memory abstraction to the programmer while allo) 108 363.33 T
(wing e) 306.61 363.33 T
(xplicit placement of data and threads.) 333.4 363.33 T
0.22 (Sather and the ICSI Sather compiler ha) 108 341.33 P
0.22 (v) 265.77 341.33 P
0.22 (e a v) 270.62 341.33 P
0.22 (ery unrestricti) 289.79 341.33 P
0.22 (v) 345.58 341.33 P
0.22 (e license aimed at encouraging contri-) 350.43 341.33 P
(b) 108 329.33 T
(ution to the public library without precluding the use of Sather for proprietary projects.) 112.8 329.33 T
-0.57 (This chapter will pro) 108 307.33 P
-0.57 (vide a basic introduction for ne) 189.74 307.33 P
-0.57 (w users, pointing to sources of information about) 311.34 307.33 P
-0.54 (the language and the compiler) 108 295.33 P
-0.54 (.  It also contains a summary of Sather features - for those f) 225.83 295.33 P
-0.54 (amiliar with) 455.93 295.33 P
(another object-oriented language, this section pro) 108 283.33 T
(vides an o) 305.59 283.33 T
(v) 345.99 283.33 T
(ervie) 350.84 283.33 T
(w of the k) 370.58 283.33 T
(e) 410.75 283.33 T
(y features of Sather) 415.04 283.33 T
(.) 492.52 283.33 T
108 236.98 504 240 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 238.49 540 238.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(1.1  Ac) 108 246 T
(kno) 165.67 246 T
(wledg) 197.41 246 T
(ements) 248.6 246 T
5 10 Q
-0.03 (This te) 108 217.31 P
-0.03 (xt has its roots in the Sather 1.1 speci\336cation, the Eclectic tutorial and Holger\325) 135.32 217.31 P
-0.03 (s iterator tuto-) 447.4 217.31 P
-0.3 (rial.  This document  also contains se) 108 205.31 P
-0.3 (v) 253.95 205.31 P
-0.3 (eral or) 258.8 205.31 P
-0.3 (g) 284.14 205.31 P
-0.3 (anizational  ideas and some te) 289.09 205.31 P
-0.3 (xt from S. Omohundro\325) 407.13 205.31 P
-0.3 (s) 500.11 205.31 P
(originally planned Sather book.) 108 193.31 T
0.02 (This te) 108 171.31 P
0.02 (xt has bene\336tted from corrections, comments and suggestions from se) 135.37 171.31 P
0.02 (v) 414.68 171.31 P
0.02 (eral people including) 419.54 171.31 P
-0.12 (Cary D. Renzema, Jerome Feldman, Claudio Fleiner and Arno Jacobsen.  P) 108 159.31 P
-0.12 (articular thanks to Cary) 408.38 159.31 P
-0.12 (,) 501.5 159.31 P
0.18 (Arno and Feldman for detailed error reports.  Arno also made se) 108 147.31 P
0.18 (v) 366.89 147.31 P
0.18 (eral suggestions re) 371.74 147.31 P
0.18 (g) 446.38 147.31 P
0.18 (arding termi-) 451.33 147.31 P
(nology and e) 108 135.31 T
(xamples that ha) 159.51 135.31 T
(v) 222.08 135.31 T
(e been incorporated.) 226.93 135.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(22) 108 710.84 T
8 8 Q
(Intr) 229.3 710.84 T
(oduction :) 240.94 710.84 T
0 F
(1.2 Ho) 282.78 710.84 T
(w to r) 306.62 710.84 T
(ead this Document) 328.03 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.03 (The w) 108 659.33 P
-0.03 (ork of this document  w) 133.14 659.33 P
-0.03 (as split between the authors.  Boris wrote the sections on the e) 228.16 659.33 P
-0.03 (xternal) 476.23 659.33 P
0.31 (interf) 108 647.33 P
0.31 (aces and made substantial changes to the document as a whole.  The iterator chapter w) 129.56 647.33 P
0.31 (as de-) 480.09 647.33 P
-0.52 (ri) 108 635.33 P
-0.52 (v) 113.86 635.33 P
-0.52 (ed partially from the iterator tutorial and the speci\336cation.   While Da) 118.71 635.33 P
-0.52 (vid w) 390.27 635.33 P
-0.52 (as not directly in) 412.15 635.33 P
-0.52 (v) 477.13 635.33 P
-0.52 (olv) 481.93 635.33 P
-0.52 (ed) 494.56 635.33 P
-0.3 (in this document,  the introduction, description of b) 108 623.33 P
-0.3 (uilt in classes and catalogue of features are tak) 310.98 623.33 P
-0.3 (en) 494.56 623.33 P
(from the speci\336cation.) 108 611.33 T
108 549.98 504 553 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 551.49 540 551.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(1.2  Ho) 108 559 T
(w to read this Document) 166.75 559 T
2 10 Q
0.28 (This document is meant to be a complete description of Sather 1.1,  and is intended as an) 108 530.31 P
1.7 (intr) 108 518.31 P
1.7 (oduction to the language for a person with some pr) 123.76 518.31 P
1.7 (ogramming backgr) 365.73 518.31 P
1.7 (ound.  It is) 451.71 518.31 P
0.5 (mor) 108 506.31 P
0.5 (e expository in natur) 126.06 506.31 P
0.5 (e than the speci\336cation and contains sections that motivate par-) 219.26 506.31 P
0.58 (ticular aspects of the language,  such as the overloading r) 108 494.31 P
0.58 (ules.  In addition, it deals with) 366.23 494.31 P
0.31 (some mor) 108 482.31 P
0.31 (e abstract design issues that arise when pr) 152.19 482.31 P
0.31 (ogramming in Sather \050such as the ef-) 340 482.31 P
(fect of the contra-variant subtyping r) 108 470.31 T
(ule\051.) 270.62 470.31 T
108 408.95 504 411.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 410.46 540 410.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(1.3  Sour) 108 417.98 T
(ces of Inf) 183.67 417.98 T
(ormation) 262.33 417.98 T
5 10 Q
-0.36 (This section brie\337y  introduces some concepts important to Sather that the reader may not ha) 108 389.29 P
-0.36 (v) 473.69 389.29 P
-0.36 (e been) 478.54 389.29 P
-0.39 (e) 108 377.29 P
-0.39 (xposed to in C++ [2].  It isn\325) 112.29 377.29 P
-0.39 (t meant as a complete language tutorial.  More information of a tutorial) 223.99 377.29 P
(nature is a) 108 365.29 T
(v) 148.9 365.29 T
(ailable from the WWW page:) 153.65 365.29 T
9 8 Q
(http://www.icsi.berkeley.edu/Sather) 122.4 348.62 T
5 10 Q
0.19 (At the time of this writing, the only compiler implementing the 1.1 language speci\336cation is a) 108 319.29 P
0.19 (v) 485.92 319.29 P
0.19 (ail-) 490.67 319.29 P
-0.19 (able from ICSI.   It is freely a) 108 307.29 P
-0.19 (v) 224.35 307.29 P
-0.19 (ailable, includes source for class libraries and the compiler) 229.1 307.29 P
-0.19 (, and com-) 461.88 307.29 P
1.18 (piles into ANSI C.  This compiler has been ported to a wide range of UNIX and PC operating) 108 295.29 P
(systems.) 108 283.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Intr) 253.78 710.84 T
(oduction :) 265.42 710.84 T
0 F
(1.4) 307.26 710.84 T
(Obtaining the Compiler) 320.56 710.84 T
6 10 Q
(23) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(1.4  Obtaining the Compiler) 108 654 T
5 10 Q
(The ICSI Sather 1.1 compiler can be obtained by anon) 108 625.31 T
(ymous ftp at) 325.59 625.31 T
9 8 Q
(ftp.icsi.berkeley.edu:) 122.4 608.64 T
(/pub/sather) 257.4 608.64 T
5 10 Q
1.06 (Other sites also mirror the Sather distrib) 108 588.31 P
1.06 (ution. The distrib) 274.71 588.31 P
1.06 (ution includes installation instructions,) 345.8 588.31 P
-0.62 (\324) 108 576.31 P
7 F
-0.69 (man) 111.33 576.31 P
5 F
-0.62 (\325 pages, the standard libraries and source for the compiler \050in Sather\051.  Documentation, tutorials) 130.78 576.31 P
(and up-to-date information are also a) 108 564.31 T
(v) 255.82 564.31 T
(ailable at the Sather WWW page:) 260.57 564.31 T
9 8 Q
(http://www.icsi.berkeley.edu/~sather) 122.4 547.64 T
5 10 Q
(ICSI also maintains a library of contrib) 108 527.31 T
(uted Sather code at this page.) 264.45 527.31 T
(There is a ne) 108 505.31 T
(wsgroup de) 159.12 505.31 T
(v) 205.25 505.31 T
(oted to Sather:) 210.05 505.31 T
9 8 Q
(comp.lang.sather) 122.4 488.64 T
5 10 Q
0.2 (There is also a Sather mailing list if you wish to be informed of Sather releases; to subscribe, send) 108 468.31 P
(email to:) 108 456.31 T
9 8 Q
(sather-request@icsi.berkeley.edu) 122.4 439.64 T
5 10 Q
(It is not necessary to be on the mailing list if you read the Sather ne) 108 419.31 T
(wsgroup.) 377.44 419.31 T
4 12 Q
(1.4.1   Ho) 108 377.98 T
(w do I ask questions?) 160.51 377.98 T
5 10 Q
0.19 (If it appears to be a problem that others w) 108 355.31 P
0.19 (ould ha) 276.55 355.31 P
0.19 (v) 306.26 355.31 P
0.19 (e encountered \050on platform \324X\325, I tried to install) 311.11 355.31 P
-0.07 (it b) 108 343.31 P
-0.07 (ut the it f) 120.79 343.31 P
-0.07 (ailed to link with the error \324Y\325\051, then the ne) 156.86 343.31 P
-0.07 (wsgroup is a good place to ask.  If you ha) 329.27 343.31 P
-0.07 (v) 494.71 343.31 P
-0.07 (e) 499.56 343.31 P
(problems with the compiler or questions that are not of general interest, mail to one of) 108 331.31 T
9 8 Q
(bug-sather@gnu.org) 122.4 314.64 T
(bug-sather@gnu.org) 122.4 305.64 T
5 10 Q
(This is also where you w) 108 285.31 T
(ant to send b) 207.61 285.31 T
(ug reports.) 258.24 285.31 T
108 223.95 504 226.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 225.46 540 225.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(1.5  Summar) 108 232.98 T
(y of Features) 215.23 232.98 T
5 10 Q
0.46 (This section pro) 108 204.29 P
0.46 (vides a summary of Sather\325) 173.22 204.29 P
0.46 (s features, with particular attention to features that are) 284.51 204.29 P
(not found in the most common object oriented languages.) 108 192.29 T
4 12 Q
(1.5.1   Basic Concepts) 108 150.95 T
5 10 Q
-0.45 (Data structures in Sather are constructed from) 108 128.29 P
1 F
-0.45 (objects) 291.22 128.29 P
5 F
-0.45 (, each of which has a speci\336c) 318.25 128.29 P
1 F
-0.45 (concrete type) 434.53 128.29 P
5 F
-0.45 ( that) 486.95 128.29 P
0.41 (determines the operations that may be performed on it.) 108 116.29 P
1 F
0.41 (Abstract types) 336.22 116.29 P
5 F
0.41 ( specify a set of operations) 395.04 116.29 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(24) 108 710.84 T
8 8 Q
(Intr) 241.97 710.84 T
(oduction :) 253.62 710.84 T
0 F
(1.5 Summ) 295.46 710.84 T
(ar) 332.45 710.84 T
(y of F) 340.64 710.84 T
(eatur) 360.84 710.84 T
(es) 381.45 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.11 (without pro) 108 659.33 P
-0.11 (viding an implementation and correspond to sets of concrete types. The implementation) 154.13 659.33 P
-0.62 (of concrete types is de\336ned by te) 108 647.33 P
-0.62 (xtual units called) 235.76 647.33 P
1 F
-0.62 (classes) 304.73 647.33 P
5 F
-0.62 (; abstract types are speci\336ed by te) 331.58 647.33 P
-0.62 (xtual units) 462.67 647.33 P
0.47 (called) 108 635.33 P
1 F
0.47 (abstract classes) 134.85 635.33 P
5 F
0.47 (.   Sather programs consist of classes and abstract class speci\336cations. Each) 196.7 635.33 P
(Sather) 108 623.33 T
1 F
(variable) 136.05 623.33 T
5 F
( has a) 167.9 623.33 T
1 F
(declared type) 193.17 623.33 T
5 F
( which determines the types of objects it may hold.) 245.85 623.33 T
-0.29 (Classes de\336ne the follo) 108 601.33 P
-0.29 (wing) 199.93 601.33 P
1 F
-0.29 (features) 222.13 601.33 P
5 F
-0.29 (:) 253.8 601.33 P
1 F
-0.29 (attributes) 258.79 601.33 P
5 F
-0.29 ( which mak) 297.86 601.33 P
-0.29 (e up the internal state of objects,) 343.84 601.33 P
1 F
-0.29 (shareds) 474 601.33 P
5 F
0.12 (and) 108 589.33 P
1 F
0.12 (constants) 125.06 589.33 P
5 F
0.12 ( which are shared by all objects of a type, and) 163.57 589.33 P
1 F
0.12 (methods) 350.37 589.33 P
5 F
0.12 ( which may be either) 383.7 589.33 P
1 F
0.12 (routines) 470.66 589.33 P
5 F
0.13 (or) 108 577.33 P
1 F
0.13 (iterators) 118.96 577.33 P
5 F
0.13 (. An) 152.84 577.33 P
0.13 (y features are by def) 170.04 577.33 P
0.13 (ault) 252.1 577.33 P
1 F
0.13 (public) 269.73 577.33 P
5 F
0.13 (, b) 294.55 577.33 P
0.13 (ut may be declared) 304.48 577.33 P
1 F
0.13 (private) 383.32 577.33 P
5 F
0.13 ( to allo) 411.65 577.33 P
0.13 (w only the class) 439.44 577.33 P
0.44 (in which it appears access to it.  An attrib) 108 565.33 P
0.44 (ute or shared may instead be declared) 277.29 565.33 P
1 F
0.44 (readonly) 433.37 565.33 P
5 F
0.44 ( to allo) 468.37 565.33 P
0.44 (w) 496.78 565.33 P
-0.23 (only the class in which it appears to modify it. Accessor routines are automatically de\336ned for read-) 108 553.33 P
-0.43 (ing or writing attrib) 108 541.33 P
-0.43 (utes, shareds, and constants. The set of non-pri) 185.12 541.33 P
-0.43 (v) 369.06 541.33 P
-0.43 (ate methods in a class de\336nes the) 373.81 541.33 P
1 F
-0.28 (interface) 108 529.33 P
5 F
-0.28 ( of the corresponding type. Method de\336nitions consist of) 142.63 529.33 P
1 F
-0.28 (statements) 369.57 529.33 P
5 F
-0.28 (;  for their construction) 412.9 529.33 P
1 F
-0.23 (expressions) 108 517.33 P
5 F
-0.23 ( are used. There are special) 154.12 517.33 P
1 F
-0.23 (literal expressions) 264.09 517.33 P
5 F
-0.23 ( for boolean, character) 336.37 517.33 P
-0.23 (, string, inte) 425.24 517.33 P
-0.23 (ger) 472.42 517.33 P
-0.23 (, and) 484.79 517.33 P
(\337oating point objects.) 108 505.33 T
-0.11 (Certain conditions are described as) 108 483.33 P
1 F
-0.11 (fatal errors) 249.91 483.33 P
5 F
-0.11 (. These conditions should ne) 293.96 483.33 P
-0.11 (v) 407.42 483.33 P
-0.11 (er occur in correct pro-) 412.27 483.33 P
0.25 (grams and all implementations of Sather must be able to detect them. F) 108 471.33 P
0.25 (or ef) 395.59 471.33 P
0.25 (\336cienc) 414.19 471.33 P
0.25 (y reasons, ho) 440.7 471.33 P
0.25 (w-) 493.45 471.33 P
(e) 108 459.33 T
(v) 112.19 459.33 T
(er) 117.04 459.33 T
(, implementations may pro) 124.41 459.33 T
(vide the option of disabling checking for certain conditions.) 231.48 459.33 T
4 12 Q
(1.5.2   Garba) 108 418 T
(g) 179.26 418 T
(e Collection and Chec) 186.71 418 T
(king) 311.83 418 T
5 10 Q
0.7 (Lik) 108 395.33 P
0.7 (e man) 121.79 395.33 P
0.7 (y object-oriented languages, Sather is) 146.5 395.33 P
10 F
0.7 (garba) 302.74 395.33 P
0.7 (g) 326.54 395.33 P
0.7 (e collected) 331.43 395.33 P
5 F
0.7 (, so programmers ne) 375.17 395.33 P
0.7 (v) 458.67 395.33 P
0.7 (er ha) 463.52 395.33 P
0.7 (v) 483.73 395.33 P
0.7 (e to) 488.58 395.33 P
-0.3 (free memory e) 108 383.33 P
-0.3 (xplicitly) 165.56 383.33 P
-0.3 (.  The runtime system does this automatically when it is safe to do so.  Idiom-) 198.25 383.33 P
-0.51 (atic Sather applications generate f) 108 371.33 P
-0.51 (ar less g) 241.38 371.33 P
-0.51 (arbage than typical Smalltalk or Lisp programs, so the cost) 273.07 371.33 P
0.47 (of collecting tends to be lo) 108 359.33 P
0.47 (wer) 216.47 359.33 P
0.47 (. Sather does allo) 230.91 359.33 P
0.47 (w the programmer to manually deallocate objects,) 300.95 359.33 P
-0.47 (letting the g) 108 347.33 P
-0.47 (arbage collector handle the remainder) 154.78 347.33 P
-0.47 (.  W) 303.4 347.33 P
-0.47 (ith checking compiled in, the system will catch) 318.99 347.33 P
(dangling references from manual deallocation before an) 108 335.33 T
(y harm can be done.) 331.67 335.33 T
-0.57 (More generally) 108 313.33 P
-0.57 (, when checking options ha) 168.15 313.33 P
-0.57 (v) 274.84 313.33 P
-0.57 (e been turned on by compiler \337ags, the resulting program) 279.69 313.33 P
0.08 (cannot crash disastrously or mysteriously) 108 301.33 P
0.08 (.  All sources of errors that cause crashes are either elimi-) 273.2 301.33 P
-0.37 (nated at compile-time or funneled into a fe) 108 289.33 P
-0.37 (w situations \050such as accessing be) 276 289.33 P
-0.37 (yond array bounds\051 that) 409.83 289.33 P
(are found at run-time precisely at the source of the error) 108 277.33 T
(.) 331.27 277.33 T
4 12 Q
(1.5.3   No Implicit Calls) 108 236 T
5 10 Q
-0.53 (Sather does as little as possible behind the user's back at runtime.  There are no) 108 213.33 P
10 F
-0.53 (implicitly) 418.15 213.33 P
5 F
-0.53 ( constructed) 455.93 213.33 P
-0.26 (temporary objects, and therefore no rules to learn or circumv) 108 201.33 P
-0.26 (ent.  This e) 348.78 201.33 P
-0.26 (xtends to class constructors:) 392.29 201.33 P
-0.52 (all calls that can construct an object are e) 108 189.33 P
-0.52 (xplicitly written by the programmer) 268.06 189.33 P
-0.52 (.  In Sather) 408.73 189.33 P
-0.52 (, constructors) 450.64 189.33 P
1.12 (are ordinary routines distinguished only by a con) 108 177.33 P
1.12 (v) 311.26 177.33 P
1.12 (enient b) 316.11 177.33 P
1.12 (ut optional calling syntax \050page 107\051.) 348.97 177.33 P
0.46 (W) 108 165.33 P
0.46 (ith g) 117.04 165.33 P
0.46 (arbage collection there is no need for destructors; ho) 135.51 165.33 P
0.46 (we) 348.87 165.33 P
0.46 (v) 360.28 165.33 P
0.46 (er) 365.13 165.33 P
0.46 (, e) 372.5 165.33 P
0.46 (xplicit \336nalization is a) 382.25 165.33 P
0.46 (v) 472.59 165.33 P
0.46 (ailable) 477.34 165.33 P
(when desired \050page 143\051.) 108 153.33 T
-0.55 (Sather ne) 108 131.33 P
-0.55 (v) 144.69 131.33 P
-0.55 (er con) 149.54 131.33 P
-0.55 (v) 173.29 131.33 P
-0.55 (erts types implicitly) 178.14 131.33 P
-0.55 (, such as from inte) 255.83 131.33 P
-0.55 (ger to character) 327.07 131.33 P
-0.55 (, inte) 387.75 131.33 P
-0.55 (ger to \337oating point, sin-) 407.05 131.33 P
-0.39 (gle to double precision, or subclass to superclass.  W) 108 119.33 P
-0.39 (ith neither implicit construction nor con) 315.42 119.33 P
-0.39 (v) 472.21 119.33 P
-0.39 (ersion,) 477.06 119.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Intr) 259.11 710.84 T
(oduction :) 270.76 710.84 T
0 F
(1.5) 312.6 710.84 T
(Summ) 325.89 710.84 T
(ar) 349.59 710.84 T
(y of F) 357.78 710.84 T
(eatur) 377.97 710.84 T
(es) 398.59 710.84 T
6 10 Q
(25) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.21 (Sather resolv) 108 659.33 P
0.21 (es routine o) 160.55 659.33 P
0.21 (v) 207.49 659.33 P
0.21 (erloading \050choosing  one of se) 212.34 659.33 P
0.21 (v) 333.95 659.33 P
0.21 (eral similarly named operations based on) 338.8 659.33 P
0.62 (ar) 108 647.33 P
0.62 (gument types\051 much more) 115.59 647.33 P
0.62 (clearly than C++.  The programmer can easily deduce which routine) 224.65 647.33 P
(will be called \050page 47\051.) 108 635.33 T
-0.08 (In Sather) 108 613.33 P
-0.08 (, the rede\336nition of operators is orthogonal to the rest of the language.  There is \324) 143.9 613.33 P
-0.08 (\324syntactic) 465.12 613.33 P
-0.09 (sug) 108 601.33 P
-0.09 (ar\325) 121.84 601.33 P
-0.09 (\325 \050page 116\051 for standard in\336x mathematical symbols such as \324) 132.2 601.33 P
7 F
-0.1 (+) 381.26 601.33 P
5 F
-0.09 (\325 and \324) 387.1 601.33 P
7 F
-0.1 (^) 413.02 601.33 P
5 F
-0.09 (\325 as calls to otherwise) 417.71 601.33 P
0.37 (ordinary routines with names \324) 108 589.33 P
7 F
0.41 (plus) 232.24 589.33 P
5 F
0.37 (\325 and \324) 250.58 589.33 P
7 F
0.41 (pow) 277.42 589.33 P
5 F
0.37 (\325.  \324) 295.76 589.33 P
7 F
0.41 (a+b) 310.67 589.33 P
5 F
0.37 (\325 is just another w) 327.62 589.33 P
0.37 (ay of writing \324) 400.67 589.33 P
7 F
0.41 (a.plus\050b\051) 459.27 589.33 P
5 F
0.37 (\325.) 498.17 589.33 P
0.15 (Similarly) 108 577.33 P
0.15 (, \324) 144.58 577.33 P
7 F
0.17 (a[i]) 153.06 577.33 P
5 F
0.15 (\325 translates to \324) 166.4 577.33 P
7 F
0.17 (a.aget\050i\051) 226.58 577.33 P
5 F
0.15 (\325 when used in an e) 263.26 577.33 P
0.15 (xpression.  An assignment \324) 341.36 577.33 P
7 F
0.17 (a[i] := expr) 453.36 577.33 P
5 F
0.15 (\325) 500.67 577.33 P
(translates into \324) 108 565.33 T
7 F
(a.aset\050i,expr\051) 169.66 565.33 T
5 F
(\325.) 228.01 565.33 T
4 12 Q
(1.5.4   Separation of Subtyping and Code Inc) 108 524 T
(lusion) 361.82 524 T
5 10 Q
-0.6 (In man) 108 501.33 P
-0.6 (y object-oriented languages, the term \324inheritance\325 is used to mean tw) 135.3 501.33 P
-0.6 (o things simultaneously) 408.33 501.33 P
-0.6 (.) 501.5 501.33 P
0.98 (One is) 108 489.33 P
10 F
0.98 (subtyping) 138.29 489.33 P
5 F
0.98 (, which is the requirement that a class pro) 177.18 489.33 P
0.98 (vide implementations for the abstract) 351.22 489.33 P
0.78 (methods in a supertype.  The other is code inheritance \050called) 108 477.33 P
10 F
0.78 (code inclusion) 364.82 477.33 P
5 F
0.78 ( in Sather parlance\051) 423.64 477.33 P
0.18 (which allo) 108 465.33 P
0.18 (ws a class to reuse a portion of the implementation of another class.  In man) 149.87 465.33 P
0.18 (y languages) 456.33 465.33 P
(it is not possible to include code without subtyping or vice v) 108 453.33 T
(ersa.) 349.24 453.33 T
-0.08 (Sather pro) 108 431.33 P
-0.08 (vides separate mechanisms for these tw) 149.15 431.33 P
-0.08 (o concepts.) 306.7 431.33 P
10 F
-0.08 (Abstr) 356.46 431.33 P
-0.08 (act classes) 377.98 431.33 P
5 F
-0.08 ( represent interf) 420.95 431.33 P
-0.08 (aces:) 484.01 431.33 P
0.48 (sets of signatures that subtypes of the abstract class must pro) 108 419.33 P
0.48 (vide.  Other kinds of classes pro) 355.44 419.33 P
0.48 (vide) 486.78 419.33 P
0.11 (implementation.  Classes may include implementation from other classes using a special \324) 108 407.33 P
7 F
0.12 (include) 468.99 407.33 P
5 F
0.11 (\325) 500.67 407.33 P
0.48 (clause; this does not af) 108 395.33 P
0.48 (fect the subtyping relationship between classes.  Separating these tw) 200.76 395.33 P
0.48 (o con-) 478.25 395.33 P
-0.5 (cepts simpli\336es the language considerably and mak) 108 383.33 P
-0.5 (es it easier to understand code.  Because it is only) 310.43 383.33 P
-0.55 (possible to subtype from abstract classes, and abstract classes only specify an interf) 108 371.33 P
-0.55 (ace without code,) 434.84 371.33 P
0.41 (sometimes in Sather one f) 108 359.33 P
0.41 (actors what w) 213.43 359.33 P
0.41 (ould be a single class in C++ into tw) 269.69 359.33 P
0.41 (o classes: an abstract) 419.17 359.33 P
0.4 (class specifying the interf) 108 347.33 P
0.4 (ace and a code class specifying code to be included.  This often leads to) 211.57 347.33 P
(cleaner designs.) 108 335.33 T
-0.39 (Issues surrounding the decision to e) 108 313.33 P
-0.39 (xplicitly separate subtyping and code inclusion in Sather are dis-) 248.94 313.33 P
0.18 (cussed in the ICSI technical report TR 93-064: \324) 108 301.33 P
0.18 (\324Engineering a Programming Language: The T) 301.44 301.33 P
0.18 (ype) 489.56 301.33 P
(and Class System of Sather) 108 289.33 T
(,) 217.04 289.33 T
(\325) 218.84 289.33 T
(\325 also published as [7].  It is a) 221.43 289.33 T
(v) 339.27 289.33 T
(ailable at the Sather WWW page.) 344.02 289.33 T
4 12 Q
(1.5.5   Iterator) 108 248 T
(s) 185.86 248 T
5 10 Q
-0.4 (Early v) 108 225.33 P
-0.4 (ersions of Sather used a con) 136.61 225.33 P
-0.4 (v) 246.1 225.33 P
-0.4 (entional \324) 250.96 225.33 P
7 F
-0.45 (until...loop...end) 288.6 225.33 P
5 F
-0.4 (\325 statement much lik) 359.2 225.33 P
-0.4 (e other languag-) 439.83 225.33 P
0.13 (es.  This made Sather susceptible to b) 108 213.33 P
0.13 (ugs that af) 259.23 213.33 P
0.13 (\337ict looping constructs.  Code which controls loop) 300.89 213.33 P
-0.05 (iteration is kno) 108 201.33 P
-0.05 (wn for trick) 167.65 201.33 P
-0.05 (y \324) 214.6 201.33 P
-0.05 (\324fencepost errors\325) 224.64 201.33 P
-0.05 (\325 \050incorrect initialization or termination\051. T) 294.64 201.33 P
-0.05 (raditional) 465.67 201.33 P
-0.01 (iteration constructs also require the internal implementation details of data structures to be e) 108 189.33 P
-0.01 (xposed) 475.67 189.33 P
(when iterating o) 108 177.33 T
(v) 172.84 177.33 T
(er their elements.) 177.69 177.33 T
1.3 (Simple looping constructs are more po) 108 155.33 P
1.3 (werful when combined with hea) 268.95 155.33 P
1.3 (vy use of) 402.81 155.33 P
10 F
1.3 (cur) 445.86 155.33 P
1.3 (sor) 459.09 155.33 P
5 F
1.3 ( objects) 471.87 155.33 P
0.25 (\050sometimes called \324iterators\325 in other languages, although Sather uses that term for something else) 108 143.33 P
0.43 (entirely\051 to iterate through the contents of container objects.  Cursor objects can be found in most) 108 131.33 P
-0.61 (C++ libraries, and the) 108 119.33 P
-0.61 (y allo) 193.41 119.33 P
-0.61 (w useful iteration abstraction.  Ho) 215.06 119.33 P
-0.61 (we) 347.87 119.33 P
-0.61 (v) 359.28 119.33 P
-0.61 (er) 364.13 119.33 P
-0.61 (, the) 371.5 119.33 P
-0.61 (y ha) 387.96 119.33 P
-0.61 (v) 404.09 119.33 P
-0.61 (e a number of problems.) 408.94 119.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(26) 108 710.84 T
8 8 Q
(Intr) 241.97 710.84 T
(oduction :) 253.62 710.84 T
0 F
(1.5 Summ) 295.46 710.84 T
(ar) 332.45 710.84 T
(y of F) 340.64 710.84 T
(eatur) 360.84 710.84 T
(es) 381.45 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.54 (The) 108 659.33 P
-0.54 (y must be e) 123.4 659.33 P
-0.54 (xplicitly initialized, incremented, and tested in the loop.  Cursor objects require main-) 167.46 659.33 P
-0.17 (taining a parallel cursor object hierarch) 108 647.33 P
-0.17 (y alongside each container class hierarch) 264.02 647.33 P
-0.17 (y) 426.71 647.33 P
-0.17 (.  Since creation is) 431.06 647.33 P
0.41 (e) 108 635.33 P
0.41 (xplicit, cursors aren't ele) 112.29 635.33 P
0.41 (g) 211.26 635.33 P
0.41 (ant for describing nested or recursi) 216.21 635.33 P
0.41 (v) 357.14 635.33 P
0.41 (e control structures.  The) 361.99 635.33 P
0.41 (y can also) 463.19 635.33 P
(pre) 108 623.33 T
(v) 120.52 623.33 T
(ent a number of important optimizations in inner loops.) 125.37 623.33 T
-0.48 (An important language impro) 108 601.33 P
-0.48 (v) 225.01 601.33 P
-0.48 (ement in Sather 1.0 o) 229.86 601.33 P
-0.48 (v) 313.05 601.33 P
-0.48 (er earlier v) 317.9 601.33 P
-0.48 (ersions w) 360.1 601.33 P
-0.48 (as the addition of) 397.57 601.33 P
10 F
-0.48 (iter) 467.3 601.33 P
-0.48 (ator) 481.04 601.33 P
-0.48 (s) 497.61 601.33 P
5 F
-0.48 (.) 501.5 601.33 P
-0.04 (Iterators are methods that encapsulate user de\336ned looping control structures just as routines do for) 108 589.33 P
0.03 (algorithms.  Code using iterators is more concise, yet more readable than code using the cursor ob-) 108 577.33 P
0.85 (jects needed in C++.  It is also safer) 108 565.33 P
0.85 (, because the creation, increment, and termination check are) 257.58 565.33 P
-0.35 (bound together in) 108 553.33 P
-0.35 (violably at one point.  Each class may de\336ne man) 177.46 553.33 P
-0.35 (y sorts of iterators, whereas a tra-) 372.51 553.33 P
-0.17 (ditional approach requires a dif) 108 541.33 P
-0.17 (ferent yet intimately coupled class for each kind of iteration o) 232.04 541.33 P
-0.17 (v) 476.83 541.33 P
-0.17 (er the) 481.68 541.33 P
(major class.  Sather iterators are part of the class interf) 108 529.33 T
(ace just lik) 325.9 529.33 T
(e routines.) 369.13 529.33 T
0.81 (Iterators act as a lingua-franca for operating on collections of items.  Matrices de\336ne iterators to) 108 507.33 P
-0.17 (yield ro) 108 495.33 P
-0.17 (ws and columns; tree classes ha) 138.41 495.33 P
-0.17 (v) 264.27 495.33 P
-0.17 (e recursi) 269.12 495.33 P
-0.17 (v) 302.85 495.33 P
-0.17 (e iters to tra) 307.7 495.33 P
-0.17 (v) 354.47 495.33 P
-0.17 (erse the nodes in pre-order) 359.32 495.33 P
-0.17 (, in-order) 464.86 495.33 P
-0.17 (,) 501.5 495.33 P
0.83 (and post-order; graph classes ha) 108 483.33 P
0.83 (v) 239.43 483.33 P
0.83 (e iters to tra) 244.28 483.33 P
0.83 (v) 294.07 483.33 P
0.83 (erse v) 298.92 483.33 P
0.83 (ertices or edges breadth-\336rst and depth-\336rst.) 323.2 483.33 P
0.16 (Other container classes such as hash tables, queues, etc. all pro) 108 471.33 P
0.16 (vide iters to yield and sometimes to) 360.8 471.33 P
(set elements. Arbitrary iterators may be used together in loops with other code.) 108 459.33 T
0.31 (The rationale of the Sather iterator construct and comparisons with related constructs in other lan-) 108 437.33 P
-0.5 (guages can be found in the ICSI technical report TR 93-045: \324) 108 425.33 P
-0.5 (\324Sather Iters: Object-Oriented Iteration) 349.72 425.33 P
(Abstraction,) 108 413.33 T
(\325) 156.46 413.33 T
(\325 also published as [5]. It is a) 159.05 413.33 T
(v) 274.39 413.33 T
(ailable at the Sather WWW page.) 279.14 413.33 T
4 12 Q
(1.5.6   Closures) 108 372 T
5 10 Q
0.31 (Sather pro) 108 349.33 P
0.31 (vides higher) 149.54 349.33 P
0.31 (-order functions through) 198.81 349.33 P
10 F
0.31 (method closur) 300 349.33 P
0.31 (es) 356.89 349.33 P
5 F
0.31 (, which are similar to closures and) 365.21 349.33 P
0.4 (function pointers in other languages.  These allo) 108 337.33 P
0.4 (w binding some or all ar) 303.27 337.33 P
0.4 (guments to arbitrary rou-) 402.55 337.33 P
-0.11 (tines and iterators b) 108 325.33 P
-0.11 (ut defer the remaining ar) 186.08 325.33 P
-0.11 (guments and e) 284.33 325.33 P
-0.11 (x) 341.73 325.33 P
-0.11 (ecution until a later time.  The) 346.58 325.33 P
-0.11 (y support) 466.61 325.33 P
-0.6 (writing code in an applicati) 108 313.33 P
-0.6 (v) 214.8 313.33 P
-0.6 (e style, although iterators eliminate much of the moti) 219.65 313.33 P
-0.6 (v) 426.57 313.33 P
-0.6 (ation for program-) 431.32 313.33 P
0.14 (ming that w) 108 301.33 P
0.14 (ay) 155.95 301.33 P
0.14 (.  The) 164.74 301.33 P
0.14 (y are also useful for b) 187.92 301.33 P
0.14 (uilding control structures at run-time, for e) 275.32 301.33 P
0.14 (xample, re) 446.8 301.33 P
0.14 (gis-) 489 301.33 P
1 (tering call-backs with a windo) 108 289.33 P
1 (wing system.  Lik) 232.85 289.33 P
1 (e other Sather methods, method closures follo) 307.43 289.33 P
1 (w) 496.78 289.33 P
(static typing and beha) 108 277.33 T
(v) 195.29 277.33 T
(e with contra) 200.14 277.33 T
(v) 252.15 277.33 T
(ariant conformance.) 256.9 277.33 T
4 12 Q
(1.5.7   Imm) 108 236 T
(utab) 169.13 236 T
(le and Ref) 194.34 236 T
(erence Objects) 251.57 236 T
5 10 Q
2.06 (Sather distinguishes between reference objects and immutable objects. Imutable objects ne) 108 213.33 P
2.06 (v) 491.38 213.33 P
2.06 (er) 496.23 213.33 P
-0.24 (change once the) 108 201.33 P
-0.24 (y are created. When one wishes to modify an immutable object, one is compelled to) 171.8 201.33 P
(create a whole ne) 108 189.33 T
(w object that re\337ects the modi\336cation.) 177.44 189.33 T
0.9 (Experienced C programmers immediately understand the dif) 108 167.33 P
0.9 (ference when told about the internal) 355.35 167.33 P
-0.23 (representation the ICSI compiler uses: immutable types are implemented with stack or re) 108 155.33 P
-0.23 (gister allo-) 461.18 155.33 P
-0.44 (cated C \324) 108 143.33 P
7 F
-0.49 (struct) 143.21 143.33 P
5 F
-0.44 (\325) 167.66 143.33 P
-0.44 (s while reference types are pointers to the heap. Because of that dif) 170.44 143.33 P
-0.44 (ference, reference) 432.83 143.33 P
-0.43 (objects can be referred to from more than one v) 108 131.33 P
-0.43 (ariable \050) 294.14 131.33 P
10 F
-0.43 (aliased) 326.76 131.33 P
5 F
-0.43 (\051, b) 355.65 131.33 P
-0.43 (ut immutable objects ne) 368.35 131.33 P
-0.43 (v) 462.65 131.33 P
-0.43 (er appear) 467.51 131.33 P
0.27 (to be. Man) 108 119.33 P
0.27 (y of the b) 151.44 119.33 P
0.27 (uilt-in types \050inte) 190.1 119.33 P
0.27 (gers, characters, \337oating point\051 are immutable classes. There) 259.39 119.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Intr) 259.11 710.84 T
(oduction :) 270.76 710.84 T
0 F
(1.5) 312.6 710.84 T
(Summ) 325.89 710.84 T
(ar) 349.59 710.84 T
(y of F) 357.78 710.84 T
(eatur) 377.97 710.84 T
(es) 398.59 710.84 T
6 10 Q
(27) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.5 (are a handful of other dif) 108 659.33 P
0.5 (ferences between reference and immutable types; for e) 209.96 659.33 P
0.5 (xample, reference) 431.87 659.33 P
(objects must be e) 108 647.33 T
(xplicitly allocated, b) 177.01 647.33 T
(ut immutable objects \324just are\325.) 258.75 647.33 T
0.32 (Immutable types can ha) 108 625.33 P
0.32 (v) 204.01 625.33 P
0.32 (e se) 208.86 625.33 P
0.32 (v) 224.2 625.33 P
0.32 (eral performance adv) 229.05 625.33 P
0.32 (antages o) 314.39 625.33 P
0.32 (v) 352.05 625.33 P
0.32 (er reference types.  Immutable types) 356.9 625.33 P
-0.1 (ha) 108 613.33 P
-0.1 (v) 117.24 613.33 P
-0.1 (e no heap management o) 122.09 613.33 P
-0.1 (v) 220.96 613.33 P
-0.1 (erhead, the) 225.82 613.33 P
-0.1 (y don't reserv) 269.44 613.33 P
-0.1 (e space to store a type tag, and the absence of) 323.1 613.33 P
-0.11 (aliasing mak) 108 601.33 P
-0.11 (es more compiler optimizations possible.  F) 158.62 601.33 P
-0.11 (or a small class lik) 332.54 601.33 P
-0.11 (e \324) 406.44 601.33 P
7 F
-0.12 (CPX) 416.6 601.33 P
5 F
-0.11 (\325 \050comple) 437.16 601.33 P
-0.11 (x num-) 475.5 601.33 P
-0.36 (ber\051, all these f) 108 589.33 P
-0.36 (actors  combine to gi) 166.8 589.33 P
-0.36 (v) 249 589.33 P
-0.36 (e a signi\336cant win o) 253.85 589.33 P
-0.36 (v) 332.82 589.33 P
-0.36 (er a reference class  implementation.  Bal-) 337.67 589.33 P
1.33 (anced ag) 108 577.33 P
1.33 (ainst these positi) 144.54 577.33 P
1.33 (v) 213.63 577.33 P
1.33 (e f) 218.48 577.33 P
1.33 (actors in using an  immutable object is the o) 229.99 577.33 P
1.33 (v) 418.22 577.33 P
1.33 (erhead that some C) 423.07 577.33 P
0.1 (compilers introduce in passing  the entire object on the stack.  This problem is w) 108 565.33 P
0.1 (orse in immutable) 431.58 565.33 P
0.27 (classes with man) 108 553.33 P
0.27 (y attrib) 176.16 553.33 P
0.27 (utes.  Unfortunately the ef) 204.83 553.33 P
0.27 (\336cienc) 310.36 553.33 P
0.27 (y of an immutable class is directly tied to) 336.87 553.33 P
-0.44 (ho) 108 541.33 P
-0.44 (w  smart the C compiler is; at this time \324) 117.75 541.33 P
7 F
-0.49 (gcc) 274.43 541.33 P
5 F
-0.44 (\325 is not v) 289.99 541.33 P
-0.44 (ery bright in this respect, although other com-) 323.79 541.33 P
(pilers are.) 108 529.33 T
0.38 (Immutable classes aren\325) 108 507.33 P
0.38 (t strictly necessary; reference classes with immutable semantics w) 205.21 507.33 P
0.38 (ork too.) 472.51 507.33 P
-0.35 (F) 108 495.33 P
-0.35 (or e) 113.41 495.33 P
-0.35 (xample, the reference class \324) 128.18 495.33 P
7 F
-0.39 (INTI) 240.88 495.33 P
5 F
-0.35 (\325 implements immutable in\336nite precision inte) 259.77 495.33 P
-0.35 (gers and can be) 443.14 495.33 P
-0.51 (used lik) 108 483.33 P
-0.51 (e the b) 138.78 483.33 P
-0.51 (uilt-in immutable class \324) 164.23 483.33 P
7 F
-0.56 (INT) 260.2 483.33 P
5 F
-0.51 (\325.  The standard string class \324) 276.31 483.33 P
7 F
-0.56 (STR) 389.08 483.33 P
5 F
-0.51 (\325 is also a reference type) 409.08 483.33 P
-0.15 (b) 108 471.33 P
-0.15 (ut beha) 112.8 471.33 P
-0.15 (v) 141.61 471.33 P
-0.15 (es with immutable semantics.  Explicitly declaring immutable classes allo) 146.46 471.33 P
-0.15 (ws the compiler) 440.42 471.33 P
-0.21 (to enforce immutable semantics and pro) 108 459.33 P
-0.21 (vides a hint for good code generation.  Common immutable) 267.04 459.33 P
(classes are de\336ned in the standard libraries; de\336ning a ne) 108 447.33 T
(w immutable class is unusual.) 335.76 447.33 T
4 12 Q
(1.5.8   IEEE Floating-P) 108 406 T
(oint) 233.57 406 T
5 10 Q
0.25 (Sather attempts to conform to the IEEE 754-1985 speci\336cation for its \337oating point types.  Unfor-) 108 383.33 P
-0.12 (tunately) 108 371.33 P
-0.12 (, man) 139.57 371.33 P
-0.12 (y platforms mak) 161.51 371.33 P
-0.12 (e it dif) 226.71 371.33 P
-0.12 (\336cult to do so.  F) 252.32 371.33 P
-0.12 (or e) 319.34 371.33 P
-0.12 (xample, under\337o) 334.33 371.33 P
-0.12 (w is often improperly im-) 401.73 371.33 P
-0.13 (plemented to \337ush to zero rather than use IEEE\325) 108 359.33 P
-0.13 (s gradual under\337o) 299.17 359.33 P
-0.13 (w) 370.88 359.33 P
-0.13 (.  This happens because gradual) 377.45 359.33 P
0.57 (under\337o) 108 347.33 P
0.57 (w is a special case and can be quite slo) 141.08 347.33 P
0.57 (w if implemented using traps.  When benchmarks) 301.17 347.33 P
0.2 (include simulations which cause man) 108 335.33 P
0.2 (y under\337o) 258.09 335.33 P
0.2 (ws, mark) 298.87 335.33 P
0.2 (eting pressures mak) 335.63 335.33 P
0.2 (e \337ush-to-zero the de-) 415.36 335.33 P
(f) 108 323.33 T
(ault.) 111.23 323.33 T
0 (There are man) 108 301.33 P
0 (y other problems. Microsoft\325) 165.6 301.33 P
0 (s C and C++ compilers defeat the purpose of the in) 280.6 301.33 P
0 (v) 484.25 301.33 P
0 (alid) 489 301.33 P
0.39 (\337ag by using it e) 108 289.33 P
0.39 (xclusi) 176.08 289.33 P
0.39 (v) 199.72 289.33 P
0.39 (ely to detect \337oating-point stack o) 204.57 289.33 P
0.39 (v) 342.75 289.33 P
0.39 (er\337o) 347.6 289.33 P
0.39 (ws, so programmers cannot use it.) 365.68 289.33 P
-0.18 (There is no portable C interf) 108 277.33 P
-0.18 (ace to IEEE e) 220.58 277.33 P
-0.18 (xception \337ags and their beha) 274.58 277.33 P
-0.18 (vior with respect to \324) 388.63 277.33 P
7 F
-0.2 (setjmp) 471.22 277.33 P
5 F
-0.18 (\325) 500.67 277.33 P
-0.32 (is suspect.  Threads packages often f) 108 265.33 P
-0.32 (ail to address proper handling of IEEE e) 252.34 265.33 P
-0.32 (xceptions and rounding) 410.76 265.33 P
(modes.) 108 253.33 T
-0.31 (Correct IEEE support from v) 108 231.33 P
-0.31 (arious platforms w) 222.61 231.33 P
-0.31 (as the single w) 296.89 231.33 P
-0.31 (orst porting problem of the Sather 1.0) 355.02 231.33 P
-0.04 (compiler) 108 219.33 P
-0.04 (.  In 1.1, we gi) 143 219.33 P
-0.04 (v) 200.31 219.33 P
-0.04 (e up and mak) 205.16 219.33 P
-0.04 (e full IEEE compliance optional.  Sather implementations are) 258.54 219.33 P
-0.51 (e) 108 207.33 P
-0.51 (xpected to conform to the) 112.29 207.33 P
10 F
-0.51 (spirit) 215.02 207.33 P
5 F
-0.51 (, if not the letter) 236.14 207.33 P
-0.51 (, of IEEE 754, although proper e) 297.88 207.33 P
-0.51 (xceptions, e) 425.23 207.33 P
-0.51 (xtended) 472.34 207.33 P
-0.27 (types, under\337o) 108 195.33 P
-0.27 (w handling, and correct handling of positi) 166.92 195.33 P
-0.27 (v) 332.53 195.33 P
-0.27 (e and ne) 337.38 195.33 P
-0.27 (g) 370.01 195.33 P
-0.27 (ati) 374.96 195.33 P
-0.27 (v) 384.71 195.33 P
-0.27 (e zero are speci\336cally) 389.56 195.33 P
10 F
-0.27 (not) 477.89 195.33 P
5 F
-0.27 ( re-) 490.67 195.33 P
(quired.) 108 183.33 T
0.5 (The Sather treatment of) 108 161.33 P
7 F
0.56 (NaN) 207.2 161.33 P
5 F
0.5 (s is particularly trick) 227.2 161.33 P
0.5 (y; IEEE w) 311.03 161.33 P
0.5 (ants) 353.59 161.33 P
7 F
0.56 (NaN) 372.7 161.33 P
5 F
0.5 ( to be neither equal nor un-) 392.7 161.33 P
0.49 (equal to an) 108 149.33 P
0.49 (ything else, including other NaNs.  Because Sather de\336nes \324) 152.71 149.33 P
10 F
0.49 (x) 397.33 149.33 P
7 F
0.54 (/=) 404.76 149.33 P
10 F
0.49 (y) 416.36 149.33 P
5 F
0.49 (\325 as \324) 420.8 149.33 P
10 F
0.49 (x) 441.77 149.33 P
7 F
0.54 (.is_eq\050) 446.21 149.33 P
10 F
0.49 (y) 476.22 149.33 P
7 F
0.54 (\051.not) 480.66 149.33 P
5 F
0.49 (\325) 500.67 149.33 P
-0.06 (\050page 116\051, to get the IEEE notion of unequal is necessary to write \324) 108 137.33 P
10 F
-0.06 (x) 379.37 137.33 P
7 F
-0.07 (=) 383.81 137.33 P
10 F
-0.06 (x) 389.65 137.33 P
7 F
-0.07 ( and) 394.09 137.33 P
10 F
-0.06 (y) 416.2 137.33 P
7 F
-0.07 (=) 420.64 137.33 P
10 F
-0.06 (y) 426.48 137.33 P
7 F
-0.07 ( and) 430.92 137.33 P
10 F
-0.06 (x) 453.02 137.33 P
7 F
-0.07 (/=) 457.46 137.33 P
10 F
-0.06 (y) 466.08 137.33 P
5 F
-0.06 (\325.  Other) 470.52 137.33 P
(comparison operators present similar dif) 108 125.33 T
(\336culties.) 269.39 125.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(28) 108 710.84 T
8 8 Q
(Intr) 241.97 710.84 T
(oduction :) 253.62 710.84 T
0 F
(1.5 Summ) 295.46 710.84 T
(ar) 332.45 710.84 T
(y of F) 340.64 710.84 T
(eatur) 360.84 710.84 T
(es) 381.45 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(1.5.9   pSather) 108 658 T
5 10 Q
-0.23 (P) 108 635.33 P
-0.23 (arallel Sather \050pSather\051 is a parallel e) 113.41 635.33 P
-0.23 (xtension of the language, de) 260.16 635.33 P
-0.23 (v) 371.46 635.33 P
-0.23 (eloped and in use at ICSI.  It e) 376.31 635.33 P
-0.23 (x-) 495.67 635.33 P
(tends serial Sather with threads, synchronization, and data distrib) 108 623.33 T
(ution.) 368.32 623.33 T
-0.42 (pSather dif) 108 601.33 P
-0.42 (fers from concurrent object-oriented languages that try to unify the notions of objects and) 151.49 601.33 P
0.11 (processes by follo) 108 589.33 P
0.11 (wing the) 180.17 589.33 P
10 F
0.11 (actor) 217.6 589.33 P
0.11 (s) 238.61 589.33 P
5 F
0.11 ( model [1].  There can be a gra) 242.5 589.33 P
0.11 (v) 366.16 589.33 P
0.11 (e performance impact for the im-) 371.01 589.33 P
-0.58 (plicit synchronization this model imposes on threads e) 108 577.33 P
-0.58 (v) 321.17 577.33 P
-0.58 (en when the) 326.02 577.33 P
-0.58 (y do not con\337ict.  While allo) 373.02 577.33 P
-0.58 (wing) 484 577.33 P
-0.46 (for actors, pSather treats object-orientation and parallelism as orthogonal concepts, e) 108 565.33 P
-0.46 (xplicitly e) 442.11 565.33 P
-0.46 (xpos-) 481.78 565.33 P
(ing the synchronization with ne) 108 553.33 T
(w language constructs.) 233.85 553.33 T
1.02 (pSather follo) 108 531.33 P
1.02 (ws the Sather philosoph) 160.71 531.33 P
1.02 (y of shielding programmers from) 259.56 531.33 P
1.02 (common sources of b) 398.92 531.33 P
1.02 (ugs.) 487.61 531.33 P
1.89 (One of the great dif) 108 519.33 P
1.89 (\336culties of parallel) 193.64 519.33 P
1.89 (programming is a) 274.92 519.33 P
1.89 (v) 349.06 519.33 P
1.89 (oiding b) 353.86 519.33 P
1.89 (ugs introduced by incorrect) 388.61 519.33 P
-0.07 (synchronization.) 108 507.33 P
-0.07 (Such b) 176.88 507.33 P
-0.07 (ugs cause completely erroneous v) 204.11 507.33 P
-0.07 (alues to be silently propag) 338.57 507.33 P
-0.07 (ated,) 443.25 507.33 P
-0.07 (threads to) 464.91 507.33 P
-0.11 (be starv) 108 495.33 P
-0.11 (ed out of computational time, or programs to deadlock.) 139.12 495.33 P
-0.11 (The) 361.28 495.33 P
-0.11 (y can be especially troublesome) 376.68 495.33 P
5.5 (because the) 108 483.33 P
5.5 (y may only manifest) 159.72 483.33 P
5.5 (themselv) 260.64 483.33 P
5.5 (es under timing conditions that rarely occur) 296.6 483.33 P
-0.28 (\050) 108 471.33 P
10 F
-0.28 (r) 111.33 471.33 P
-0.28 (ace) 115.07 471.33 P
-0.28 (conditions) 131.45 471.33 P
5 F
-0.28 (\051 and may be sensiti) 173.12 471.33 P
-0.28 (v) 251.74 471.33 P
-0.28 (e enough that the) 256.59 471.33 P
-0.28 (y don't appear when a) 324.2 471.33 P
-0.28 (program is instrument-) 412.9 471.33 P
0.31 (ed for deb) 108 459.33 P
0.31 (ugging \050) 148.96 459.33 P
10 F
0.31 (heisenb) 182.87 459.33 P
0.31 (ugs) 213.22 459.33 P
5 F
0.31 (\051.  pSather mak) 227.11 459.33 P
0.31 (es it easier to write deadlock and starv) 289.04 459.33 P
0.31 (ation free code) 443.96 459.33 P
-0.1 (by) 108 447.33 P
-0.1 (pro) 120.5 447.33 P
-0.1 (viding structured f) 133.68 447.33 P
-0.1 (acilities for synchronization.  A) 207.26 447.33 P
10 F
-0.1 (loc) 335.64 447.33 P
-0.1 (k) 347.66 447.33 P
-0.1 (statement) 354.6 447.33 P
5 F
-0.1 ( automatically performs un-) 392.93 447.33 P
1.54 (locking when its body e) 108 435.33 P
1.54 (xits, e) 209.57 435.33 P
1.54 (v) 234.76 435.33 P
1.54 (en) 239.61 435.33 P
1.54 (if this occurs under e) 251.55 435.33 P
1.54 (xceptional conditions.  It automatically) 341.44 435.33 P
-0.18 (a) 108 423.33 P
-0.18 (v) 112.24 423.33 P
-0.18 (oids) 117.04 423.33 P
-0.18 (deadlocks when multiple locks are used together) 136.21 423.33 P
-0.18 (.  It also guarantees) 329.01 423.33 P
-0.18 (reasonable properties of) 408.27 423.33 P
(f) 108 411.33 T
(airness when se) 111.23 411.33 T
(v) 173.74 411.33 T
(eral threads are contending) 178.59 411.33 T
(for the same lock.) 289.11 411.33 T
4 F
(Data placement) 108 383.33 T
5 F
-0.14 (pSather allo) 108 360.33 P
-0.14 (ws the programmer to direct data placement.  Machines do not need to ha) 155.66 360.33 P
-0.14 (v) 447.42 360.33 P
-0.14 (e lar) 452.27 360.33 P
-0.14 (ge laten-) 469.43 360.33 P
3.52 (cies to mak) 108 348.33 P
3.52 (e data placement) 160.48 348.33 P
3.52 (important.  Because processor speeds are outpacing memory) 237.21 348.33 P
0.42 (speeds,) 108 336.33 P
0.42 (attention to locality can ha) 139.66 336.33 P
0.42 (v) 247.23 336.33 P
0.42 (e a profound ef) 252.08 336.33 P
0.42 (fect on the performance of) 313.9 336.33 P
0.42 (e) 424.14 336.33 P
0.42 (v) 428.33 336.33 P
0.42 (en ordinary serial) 433.18 336.33 P
-0.54 (programs.  Some e) 108 324.33 P
-0.54 (xisting languages) 181.23 324.33 P
-0.54 (can mak) 252.91 324.33 P
-0.54 (e life dif) 285.87 324.33 P
-0.54 (\336cult for the performance-minded programmer) 318.42 324.33 P
-0.29 (because) 108 312.33 P
-0.29 (the) 142.15 312.33 P
-0.29 (y do not allo) 154.22 312.33 P
-0.29 (w much lee) 203.39 312.33 P
-0.29 (w) 248.66 312.33 P
-0.29 (ay in e) 255.78 312.33 P
-0.29 (xpressing placement.  F) 281.72 312.33 P
-0.29 (or e) 375.7 312.33 P
-0.29 (xample,) 390.53 312.33 P
-0.29 (e) 424.97 312.33 P
-0.29 (xtensions allo) 429.26 312.33 P
-0.29 (wing) 484 312.33 P
-0.43 (the programmer to describe array layout as) 108 300.33 P
-0.43 (block-c) 279.52 300.33 P
-0.43 (yclic is helpful for matrix-oriented code b) 309.36 300.33 P
-0.43 (ut of no) 473.76 300.33 P
(use for) 108 288.33 T
(general data structures.) 137.99 288.33 T
0.74 (Because high) 108 266.33 P
0.74 (performance appears to require e) 164.84 266.33 P
0.74 (xplicit human-directed placement,  pSather imple-) 299.24 266.33 P
-0.55 (ments a) 108 254.33 P
-0.55 (shared memory abstraction using the most ef) 140.78 254.33 P
-0.55 (\336cient f) 316.67 254.33 P
-0.55 (acilities of the) 346.85 254.33 P
-0.55 (tar) 404.92 254.33 P
-0.55 (get platform a) 415.29 254.33 P
-0.55 (v) 470.09 254.33 P
-0.55 (ailable,) 474.84 254.33 P
-0.42 (while allo) 108 242.33 P
-0.42 (wing the programmer to pro) 147.05 242.33 P
-0.42 (vide) 257.97 242.33 P
-0.42 (placement directi) 277.69 242.33 P
-0.42 (v) 346.17 242.33 P
-0.42 (es for control and data \050without requir-) 351.02 242.33 P
-0.39 (ing them\051.) 108 230.33 P
-0.39 (This decouples the performance-related placement from code correctness,) 151.22 230.33 P
-0.39 (making it easy) 446.45 230.33 P
0.23 (to de) 108 218.33 P
0.23 (v) 127.7 218.33 P
0.23 (elop and maintain code enjo) 132.55 218.33 P
0.23 (ying the language) 246.15 218.33 P
0.23 (bene\336ts a) 320.22 218.33 P
0.23 (v) 358.3 218.33 P
0.23 (ailable to serial code.  P) 363.05 218.33 P
0.23 (arallel pro-) 459.62 218.33 P
4.12 (grams can be de) 108 206.33 P
4.12 (v) 184.82 206.33 P
4.12 (eloped) 189.67 206.33 P
4.12 (on simulators running on serial machines.  A po) 218.83 206.33 P
4.12 (werful object-) 443.51 206.33 P
-0.23 (oriented) 108 194.33 P
-0.23 (approach is to write both serial and parallel machine v) 143.27 194.33 P
-0.23 (ersions of the) 357.98 194.33 P
-0.23 (fundamental classes in) 413.91 194.33 P
(such a w) 108 182.33 T
(ay that a user's code remains unchanged when mo) 142.89 182.33 T
(ving between them.) 342.27 182.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Intr) 287.04 710.84 T
(oduction :) 298.69 710.84 T
0 F
(1.6) 340.53 710.84 T
(Histor) 353.82 710.84 T
(y) 374.67 710.84 T
6 10 Q
(29) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(1.6  Histor) 108 654 T
(y) 195.21 654 T
5 10 Q
-0.41 (Sather is still gro) 108 625.31 P
-0.41 (wing rapidly) 174.58 625.31 P
-0.41 (. The initial Sather compiler \050for \324V) 224.35 625.31 P
-0.41 (ersion 0\325 of the language\051 w) 363.82 625.31 P
-0.41 (as writ-) 474.14 625.31 P
-0.05 (ten in Sather \050bootstrapped by hand-translating to C\051 o) 108 613.31 P
-0.05 (v) 325.75 613.31 P
-0.05 (er the summer of 1990.  ICSI made the lan-) 330.6 613.31 P
0.81 (guage publicly a) 108 601.31 P
0.81 (v) 175.53 601.31 P
0.81 (ailable \050v) 180.28 601.31 P
0.81 (ersion 0.1\051 June of 1991 [4].  The project has been sno) 218.43 601.31 P
0.81 (wballing since) 445.14 601.31 P
0.46 (then, with language updates to 0.2 and 0.5, each compiler bootstrapped from the pre) 108 589.31 P
0.46 (vious.  These) 450.03 589.31 P
0.86 (v) 108 577.31 P
0.86 (ersions of the language are most indebted to Stephen Omohundro, Chu-Cheo) 112.85 577.31 P
0.86 (w Lim, and Heinz) 429.21 577.31 P
1.15 (Schmidt.  pSather co-e) 108 565.31 P
1.15 (v) 202.29 565.31 P
1.15 (olv) 207.09 565.31 P
1.15 (ed with primary contrib) 219.72 565.31 P
1.15 (utions by Jerome Feldman, Chu-Cheo) 317.68 565.31 P
1.15 (w Lim,) 473.96 565.31 P
-0.57 (Franco Mazzanti and Stephan Murer) 108 553.31 P
-0.57 (. The \336rst pSather compiler [3] w) 251.78 553.31 P
-0.57 (as implemented by Chu-cheo) 381.82 553.31 P
-0.57 (w) 496.78 553.31 P
(Lim on the Sequent Symmetry) 108 541.31 T
(, w) 230.13 541.31 T
(orkstations and the CM-5.) 242.25 541.31 T
-0.27 (Sather 1.0  w) 108 519.31 P
-0.27 (as a major language change, introducing bound routines, iterators, proper separation of) 159.85 519.31 P
-0.06 (typing and code inclusion, contra) 108 507.31 P
-0.06 (v) 240.61 507.31 P
-0.06 (ariant typing, strongly typed parameterization, e) 245.36 507.31 P
-0.06 (xceptions, stron-) 437.4 507.31 P
-0.03 (ger optional runtime checks and a ne) 108 495.31 P
-0.03 (w library design [6].  The 1.0 compiler w) 254.76 495.31 P
-0.03 (as a completely fresh) 419.39 495.31 P
-0.02 (ef) 108 483.31 P
-0.02 (fort by Stephen Omohundro, Da) 115.52 483.31 P
-0.02 (vid Stoutamire and Robert Greisemer) 244.38 483.31 P
-0.02 (.  It w) 393.73 483.31 P
-0.02 (as  written in 0.5 with) 416.89 483.31 P
0.66 (the 1.0 features introduced as the) 108 471.31 P
0.66 (y became functional.  The 1.0 compiler w) 243.32 471.31 P
0.66 (as \336rst released in the) 414.73 471.31 P
-0.45 (summer of 1994, and Stephen left the project shortly afterw) 108 459.31 P
-0.45 (ards.  The pSather 1.0 design w) 342.72 459.31 P
-0.45 (as lar) 466.03 459.31 P
-0.45 (gely) 486.78 459.31 P
(due to Jerome Feldman, Stephan Murer and Da) 108 447.31 T
(vid Stoutamire.) 297.21 447.31 T
-0.45 (This document describes Sather 1.1, released the summer of 1996.  The  compiler w) 108 425.31 P
-0.45 (as originally  de-) 437.87 425.31 P
-0.32 (signed and implemented by S. Omohundro, D. Stoutamire and \050later\051 Robert Griesemer) 108 413.31 P
-0.32 (.  Boris V) 454.42 413.31 P
-0.32 (ay-) 491.23 413.31 P
-0.39 (sman is the current Sather czar  and  feature implementor) 108 401.31 P
-0.39 (.  Claudio Fleiner implemented  most of the) 332.39 401.31 P
-0.03 (common optimizations ,  a lot of deb) 108 389.31 P
-0.03 (ugging support,  the pSather runtime and back-end support for) 254.83 389.31 P
-0.57 (pSather) 108 377.31 P
-0.57 (.   Michael Philippsen implmented the front/middle support for pSather) 138 377.31 P
-0.57 (. Holger Kla) 416.44 377.31 P
-0.57 (witter im-) 464.85 377.31 P
0.21 (plemented  type checking of parametrized classes. Arno Jacobsen w) 108 365.31 P
0.21 (ork) 381.9 365.31 P
0.21 (ed on bound iterators. Illya) 395.14 365.31 P
-0.46 (V) 108 353.31 P
-0.46 (arnask) 114.11 353.31 P
-0.46 (y implemented inlining support and T) 140.06 353.31 P
-0.46 (re) 288.82 353.31 P
-0.46 (v) 296.34 353.31 P
-0.46 (or P) 301.14 353.31 P
-0.46 (aring implemented an early v) 316.92 353.31 P
-0.46 (ersion of common) 432.14 353.31 P
(sube) 108 341.31 T
(xpression elimination.) 126.18 341.31 T
0.2 (A group at the Uni) 108 319.31 P
0.2 (v) 183.53 319.31 P
0.2 (ersity of Karlsruhe under the direction of Gerhard Goos created a compiler for) 188.38 319.31 P
0.55 (Sather 0.1.  The language their compiler supports, Sather) 108 307.31 P
0.55 (-K, di) 340.2 307.31 P
0.55 (v) 363.83 307.31 P
0.55 (er) 368.68 307.31 P
0.55 (ged from the ICSI speci\336cation) 376.27 307.31 P
-0.18 (when Sather 1.0 w) 108 295.31 P
-0.18 (as released.  Karlsruhe has created a lar) 181.8 295.31 P
-0.18 (ge class library called Karla using Sather) 338.08 295.31 P
-0.18 (-) 500.67 295.31 P
(K.  More information about Sather) 108 283.31 T
(-K can be found at:) 246.67 283.31 T
9 8 Q
(http://i44www.info.uni-karlsruhe.de/~frick/SatherK) 122.4 266.64 T
4 12 Q
(1.6.1   The Name) 108 226.98 T
5 10 Q
0.17 (Sather w) 108 204.31 P
0.17 (as de) 143.35 204.31 P
0.17 (v) 163.54 204.31 P
0.17 (eloped at the International Computer Science Institute, a research institute af) 168.39 204.31 P
0.17 (\336liated) 476.22 204.31 P
0.23 (with the computer science department of the Uni) 108 192.31 P
0.23 (v) 304.62 192.31 P
0.23 (ersity of California at Berk) 309.47 192.31 P
0.23 (ele) 418.06 192.31 P
0.23 (y) 429.57 192.31 P
0.23 (.  The Sather lan-) 433.92 192.31 P
0.76 (guage gets its name from the Sather T) 108 180.31 P
0.76 (o) 264.45 180.31 P
0.76 (wer \050popularly kno) 269.2 180.31 P
0.76 (wn as the Campanile\051, the best-kno) 347.13 180.31 P
0.76 (wn) 491.78 180.31 P
0.44 (landmark on campus.  A symbol of the city and the uni) 108 168.31 P
0.44 (v) 332.52 168.31 P
0.44 (ersity) 337.37 168.31 P
0.44 (, it is the Berk) 358.94 168.31 P
0.44 (ele) 416.97 168.31 P
0.44 (y equi) 428.48 168.31 P
0.44 (v) 453.39 168.31 P
0.44 (alent of the) 458.14 168.31 P
-0.61 (Golden Gate bridge across the bay) 108 156.31 P
-0.61 (.  Erected in 1914, the to) 242.32 156.31 P
-0.61 (wer is modeled after St. Mark's Campanile) 336.72 156.31 P
0.33 (in V) 108 144.31 P
0.33 (enice, Italy) 124.72 144.31 P
0.33 (. It is smaller and a bit younger than the Eif) 168.82 144.31 P
0.33 (fel to) 345.42 144.31 P
0.33 (wer) 366.33 144.31 P
0.33 (. The w) 380.77 144.31 P
0.33 (ay most people say the) 411.59 144.31 P
(name of the language rh) 108 132.31 T
(ymes with \324bather\325.) 204.59 132.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(30) 108 710.84 T
8 8 Q
(Intr) 269.9 710.84 T
(oduction :) 281.55 710.84 T
0 F
(1.6 Histor) 323.39 710.84 T
(y) 357.54 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.51 (The name \324Sather\325 is a pun of sorts - Sather w) 108 659.33 P
-0.51 (as originally en) 286.69 659.33 P
-0.51 (visioned as a smaller) 346.94 659.33 P
-0.51 (, ef) 428.62 659.33 P
-0.51 (\336cient, cleaned-) 440.64 659.33 P
-0.21 (up alternati) 108 647.33 P
-0.21 (v) 152.81 647.33 P
-0.21 (e to the language Eif) 157.66 647.33 P
-0.21 (fel.  Ho) 239.34 647.33 P
-0.21 (we) 268.95 647.33 P
-0.21 (v) 280.36 647.33 P
-0.21 (er) 285.21 647.33 P
-0.21 (, since its conception the tw) 292.58 647.33 P
-0.21 (o languages ha) 402.54 647.33 P
-0.21 (v) 461.36 647.33 P
-0.21 (e e) 466.21 647.33 P
-0.21 (v) 477.13 647.33 P
-0.21 (olv) 481.93 647.33 P
-0.21 (ed) 494.56 647.33 P
(to be quite distinct.) 108 635.33 T
4 12 Q
(1.6.2   Sather\325) 108 594 T
(s Antecedents) 184.66 594 T
5 10 Q
0.33 (Sather has adopted ideas from a number of other languages. Its primary debt is to Eif) 108 571.33 P
0.33 (fel, designed) 452.57 571.33 P
0.22 (by Bertrand Me) 108 559.33 P
0.22 (yer) 171.61 559.33 P
0.22 (, b) 183.98 559.33 P
0.22 (ut it has also been in\337uenced by C, C++, Cecil, CLOS, CLU, Common Lisp,) 194 559.33 P
(Dylan, ML, Modula-3, Oberon, Objecti) 108 547.33 T
(v) 266.06 547.33 T
(e C, P) 270.91 547.33 T
(ascal, SAIL, School, Self, and Smalltalk.) 294.93 547.33 T
0.22 (Ste) 108 525.33 P
0.22 (v) 120.53 525.33 P
0.22 (e Omohundro w) 125.38 525.33 P
0.22 (as the original dri) 190.7 525.33 P
0.22 (ving force behind Sather) 261.37 525.33 P
0.22 (, k) 360.21 525.33 P
0.22 (eeping the language speci\336cation) 370.32 525.33 P
-0.62 (from being pillaged by the unw) 108 513.33 P
-0.62 (ashed hordes and serving as point man for the Sather community until) 230.6 513.33 P
-0.3 (he left in 1994.  Chu-Cheo) 108 501.33 P
-0.3 (w Lim bootstrapped the original compiler and w) 212.9 501.33 P
-0.3 (as lar) 404.28 501.33 P
-0.3 (gely responsible for) 425.17 501.33 P
-0.53 (the original 0.x compiler and the \336rst implementation of pSather) 108 489.33 P
-0.53 (.  Da) 360.45 489.33 P
-0.53 (vid Stoutamire took o) 378.35 489.33 P
-0.53 (v) 463.56 489.33 P
-0.53 (er as lan-) 468.41 489.33 P
0.55 (guage tsar and compiler writer after Stephen left.  That position w) 108 477.33 P
0.55 (as, in turn, tak) 377.78 477.33 P
0.55 (en o) 436.27 477.33 P
0.55 (v) 453.61 477.33 P
0.55 (er by Boris) 458.46 477.33 P
(V) 108 465.33 T
(aysman in late 1995.) 114.11 465.33 T
0.17 (Sather has been v) 108 443.33 P
0.17 (ery much a group ef) 178.64 443.33 P
0.17 (fort; man) 259.62 443.33 P
0.17 (y) 296.58 443.33 P
0.17 (, man) 300.93 443.33 P
0.17 (y  people ha) 323.18 443.33 P
0.17 (v) 372.1 443.33 P
0.17 (e been in) 376.95 443.33 P
0.17 (v) 413 443.33 P
0.17 (olv) 417.8 443.33 P
0.17 (ed in the language) 430.43 443.33 P
0.68 (design discussions including: Sub) 108 431.33 P
0.68 (utai Ahmad, Krste Asano) 245.14 431.33 P
0.68 (vic, Jonathan Bachrach, Da) 348.69 431.33 P
0.68 (vid Baile) 460.23 431.33 P
0.68 (y) 497.15 431.33 P
0.68 (,) 501.5 431.33 P
-0.26 (Joachim Beer) 108 419.33 P
-0.26 (, Jef) 162.05 419.33 P
-0.26 (f Bilmes, Chris Bitmead, Peter Blicher) 178.2 419.33 P
-0.26 (, John Bo) 331.21 419.33 P
-0.26 (yland, Matthe) 368.65 419.33 P
-0.26 (w Brand, Henry Ce-) 423.69 419.33 P
-0.12 (jtin, Ale) 108 407.33 P
-0.12 (x Cozzi, Richard Durbin, Jerry Feldman, Carl Fe) 140.51 407.33 P
-0.12 (ynman, Claudio Fleiner) 335.03 407.33 P
-0.12 (, Ben Gomes, Ger-) 429.11 407.33 P
-0.55 (hard Goos, Robert Griesemer) 108 395.33 P
-0.55 (, Hermann H\212ertig, John Hauser) 223.71 395.33 P
-0.55 (, Ari Huttunen, Roberto Ierusalimsch) 350.52 395.33 P
-0.55 (y) 497.15 395.33 P
-0.55 (,) 501.5 395.33 P
2.1 (Arno Jacobsen, Matt K) 108 383.33 P
2.1 (ennel, Holger Kla) 206.8 383.33 P
2.1 (witter) 282.21 383.33 P
2.1 (, Phil K) 305.14 383.33 P
2.1 (ohn, Franz K) 339.82 383.33 P
2.1 (urfess,  Franco Mazzanti,) 396.35 383.33 P
-0.62 (Stephan Murer) 108 371.33 P
-0.62 (, Michael Philippsen, Thomas Rauber) 166.69 371.33 P
-0.62 (, Ste) 314.9 371.33 P
-0.62 (v) 331.8 371.33 P
-0.62 (e Renals, Noemi de La Rocque Rodriguez,) 336.65 371.33 P
0.46 (Hans Rohnert, Heinz Schmidt, Carlo Sequin, Andreas Stolck) 108 359.33 P
0.46 (e, Clemens Szyperski, Martin T) 355.02 359.33 P
0.46 (rapp,) 483.73 359.33 P
-0.35 (Boris V) 108 347.33 P
-0.35 (aysman, and Bob W) 137.93 347.33 P
-0.35 (einer) 217.17 347.33 P
-0.35 (.  Countless others ha) 236.61 347.33 P
-0.35 (v) 320.82 347.33 P
-0.35 (e assisted with practical matters such as port-) 325.67 347.33 P
(ing the compiler and libraries.) 108 335.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Intr) 287.04 710.84 T
(oduction :) 298.69 710.84 T
0 F
(1.6) 340.53 710.84 T
(Histor) 353.82 710.84 T
(y) 374.67 710.84 T
6 10 Q
(31) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(1.6.3   Ref) 108 658 T
(erences) 163.91 658 T
2 10 Q
([1]) 108 633.33 T
4.71 (G. Agha, \324) 129.6 633.33 P
4.71 (\324Actors: A Model of Concurr) 183.22 633.33 P
4.71 (ent Computation in Distributed) 328.32 633.33 P
(Systems\325) 129.6 621.33 T
(\325, The MIT Pr) 168.18 621.33 T
(ess, Cambridge, Massachusetts, 1986.) 226.47 621.33 T
([2]) 108 597.33 T
1.39 (S. Burson, \324) 129.6 597.33 P
1.39 (\324The Nightmar) 181.64 597.33 P
1.39 (e of C++\325) 248.51 597.33 P
1.39 (\325, Advanced Systems November 1994, pp.) 291.48 597.33 P
0.58 (57-62. Excerpted fr) 129.6 585.33 P
0.58 (om) 213.3 585.33 P
1 F
0.58 (The UNIX-Hater's Handbook) 230.67 585.33 P
2 F
0.58 (, IDG Books, San Mateo, CA,) 352.54 585.33 P
(1994.) 129.6 573.33 T
([3]) 108 549.33 T
4.43 (C. Lim. \322A Parallel Object-Oriented System for Realizing Reusable and) 129.6 549.33 P
1.54 (Ef) 129.6 537.33 P
1.54 (\336cient Data Abstractions,\323 PhD thesis, University of California at Berkeley) 138.86 537.33 P
1.54 (,) 479.9 537.33 P
(October 1993.  A) 129.6 525.33 T
(vailable at the Sather WWW page.) 201.75 525.33 T
([4]) 108 501.33 T
0.09 (C. Lim, A. Stolcke.  \324) 129.6 501.33 P
0.09 (\324Sather language design and performance evaluation.\325) 219.35 501.33 P
0.09 (\325  TR-) 458.3 501.33 P
1.14 (91-034, International Computer Science Institute, May 1991.  Also available at) 129.6 489.33 P
(the Sather WWW page.) 129.6 477.33 T
([5]) 108 453.33 T
0.76 (S. Mur) 129.6 453.33 P
0.76 (er) 159.87 453.33 P
0.76 (, S. Omohundr) 167.87 453.33 P
0.76 (o, D. Stoutamir) 234.34 453.33 P
0.76 (e, C. Szyperski, \324) 302.83 453.33 P
0.76 (\324Iteration abstraction in) 377.68 453.33 P
0.86 (Sather) 129.6 441.33 P
0.86 (\325) 158.41 441.33 P
0.86 (\325,) 160.82 441.33 P
1 F
0.86 (T) 169.46 441.33 P
0.86 (ransactions on Pr) 174.46 441.33 P
0.86 (ogramming Languages and Systems) 247.28 441.33 P
2 F
0.86 (, V) 395.71 441.33 P
0.86 (ol. 18, No. 1, Jan) 407.68 441.33 P
(1996 p. 1-15.  A) 129.6 429.33 T
(vailable at the Sather WWW page.) 195.8 429.33 T
([6]) 108 405.33 T
1.48 (S. Omohundr) 129.6 405.33 P
1.48 (o.  \324) 191.03 405.33 P
1.48 (\324The Sather pr) 209.37 405.33 P
1.48 (ogramming language.\325) 274.7 405.33 P
1.48 (\325) 376.18 405.33 P
1 F
1.48 (Dr) 386.92 405.33 P
1.48 (. Dobb\325) 397.85 405.33 P
1.48 (s Journal) 428.05 405.33 P
2 F
1.48 (, 18) 465.92 405.33 P
(\0501) 129.6 393.33 T
(1\051 pp. 42-48, October 1993.  A) 137.38 393.33 T
(vailable at the Sather WWW page.) 265.71 393.33 T
([7]) 108 369.33 T
5.14 (C. Szyperski, S. Omohundr) 129.6 369.33 P
5.14 (o, S. Mur) 265.34 369.33 P
5.14 (er) 315.59 369.33 P
5.14 (.  \322Engineering a pr) 323.59 369.33 P
5.14 (ogramming) 430.48 369.33 P
3.69 (language: The type and class system of Sather) 129.6 357.33 P
3.69 (,\323 In Jur) 357.25 357.33 P
3.69 (g Gutknecht, ed.,) 399.45 357.33 P
1 F
1.74 (Pr) 129.6 345.33 P
1.74 (ogramming Languages and System Ar) 139.42 345.33 P
1.74 (chitectur) 301.77 345.33 P
1.74 (es) 337.51 345.33 P
2 F
1.74 (, p. 208-227.  Springer V) 345.29 345.33 P
1.74 (erlag,) 457.69 345.33 P
2.59 (Lectur) 129.6 333.33 P
2.59 (e Notes in Computer Science 782, November 1993.  A) 158 333.33 P
2.59 (vailable at the) 415.39 333.33 P
(Sather WWW page.) 129.6 321.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(32) 108 710.84 T
8 8 Q
(Intr) 269.9 710.84 T
(oduction :) 281.55 710.84 T
0 F
(1.6 Histor) 323.39 710.84 T
(y) 357.54 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 260.03 710.84 T
0 F
(2.1) 345.24 710.84 T
(Pr) 358.54 710.84 T
(eliminar) 365.65 710.84 T
(ies) 396.06 710.84 T
6 10 Q
(33) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Classes and Objects) 108 642 S
5 10 Q
-0.4 (All entities in Sather are objects, and objects are de\336ned by classes. Ev) 108 517.33 P
-0.4 (en the basic entities in Sather) 386.95 517.33 P
-0.4 (,) 501.5 517.33 P
0.19 (such as inte) 108 505.33 P
0.19 (gers and \337oating point v) 154.9 505.33 P
0.19 (alues are objects in Sather) 252.65 505.33 P
0.19 (.  Sather  has se) 357.29 505.33 P
0.19 (v) 420.23 505.33 P
0.19 (eral  dif) 425.08 505.33 P
0.19 (ferent kinds) 456.32 505.33 P
-0.61 (of classes - reference classes, abstract classes, immutable classes, partial classes and e) 108 493.33 P
-0.61 (xternal classes.) 444.07 493.33 P
-0.51 (The important kinds of classes are reference classes and abstract classes - the rest are used in restrict-) 108 481.33 P
0.15 (ed circumstances.  There are also some special objects \050closures\051 which are not directly de\336ned by) 108 469.33 P
(classes, b) 108 457.33 T
(ut we will defer their discussion till later) 145.57 457.33 T
(.) 306.95 457.33 T
-0.52 (Each Sather object has an associated type which indicates the class that w) 108 435.33 P
-0.52 (as used to create the object.) 396.62 435.33 P
(A v) 108 423.33 T
(ariable in Sather also has a type, which indicates the kinds of objects it can be assigned to.) 122.47 423.33 T
-0.45 (This chapter will focus on the most common kind of classes, reference classes, and the standard con-) 108 401.33 P
-0.34 (structs used to create classes.   Though iterators are an essential component of Sather code, their dis-) 108 389.33 P
(cussion has been deferred to the ne) 108 377.33 T
(xt chapter) 247.81 377.33 T
(, since the) 287.12 377.33 T
(y are a relati) 327.24 377.33 T
(v) 376.69 377.33 T
(ely  no) 381.54 377.33 T
(v) 408.61 377.33 T
(el language feature.) 413.46 377.33 T
108 315.98 504 319 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 317.49 540 317.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.1  Preliminaries) 108 325 T
5 10 Q
0.15 (T) 108 296.31 P
0.15 (o mak) 113.31 296.31 P
0.15 (e it easier to present e) 138.08 296.31 P
0.15 (xamples in the follo) 225.62 296.31 P
0.15 (wing sections, we will start by introducting a fe) 305.55 296.31 P
0.15 (w) 496.78 296.31 P
0.25 (basic classes - inte) 108 284.31 P
0.25 (gers, \337oating point numbers and strings.  W) 182.74 284.31 P
0.25 (e will also describe ho) 358.93 284.31 P
0.25 (w to print out) 449.09 284.31 P
(data and to use the compiler) 108 272.31 T
4 12 Q
(2.1.1   Some basic c) 108 230.98 T
(lasses - INT) 221.16 230.98 T
(, FL) 286.9 230.98 T
(T and STR) 307.15 230.98 T
5 10 Q
-0.57 (Though basic numbers and strings enjo) 108 208.31 P
-0.57 (y some special language support \050such as a means to initialize) 261.97 208.31 P
0.4 (them to v) 108 196.31 P
0.4 (alues lik) 146.32 196.31 P
0.4 (e 5 or "foo"\051 , the) 180.23 196.31 P
0.4 (y are de\336ned as  re) 251.87 196.31 P
0.4 (gular classes, and are a part of the standard) 328.94 196.31 P
-0.19 (library) 108 184.31 P
-0.19 (.The FL) 134.01 184.31 P
-0.19 (T class represents \337oating point numbers, while the INT class represents inte) 165.12 184.31 P
-0.19 (gers and) 470.59 184.31 P
0.61 (the STR class represents strings.  V) 108 172.31 P
0.61 (ariables may be declared to be of an) 252.47 172.31 P
0.61 (y of these classes and as-) 400.7 172.31 P
(signed when the) 108 160.31 T
(y are declared.) 172.84 160.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:FLT := 3.0;) 144 140.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b:INT := 5;) 144 131.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(c:STR := "foo";) 144 122.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 148.85 129.6 117.1 2 L
V
0.25 H
0 Z
N
489.6 148.85 489.6 117.1 2 L
V
N
129.48 148.98 489.73 148.98 2 L
V
N
129.48 116.98 489.73 116.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(34) 108 710.84 T
8 8 Q
(Classes and Objects :) 242.9 710.84 T
0 F
(2.1 Pr) 328.1 710.84 T
(eliminar) 348.51 710.84 T
(ies) 378.93 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.04 (It is also possible to perform the usual operations on these classes, such as addition of numbers and) 108 659.33 P
(concatenation of strings \050represented by the "+" operator\051:) 108 647.33 T
0.1 (Comments in Sather start with a) 108 540.33 P
7 9 Q
0.1 (--) 239.71 540.33 P
5 10 Q
0.1 (and e) 248.3 540.33 P
0.1 (xtend to the end of the line.   Note that all v) 269.63 540.33 P
0.1 (ariables ha) 444.73 540.33 P
0.1 (v) 487.67 540.33 P
0.1 (e a) 492.52 540.33 P
0.26 (def) 108 528.33 P
0.26 (ault initial) 120.67 528.33 P
7 9 Q
0.26 (void) 164.53 528.33 P
5 10 Q
0.26 ( v) 181.04 528.33 P
0.26 (alue.  F) 188.55 528.33 P
0.26 (or the present,) 218.64 528.33 P
7 9 Q
0.26 (void) 278.85 528.33 P
5 10 Q
0.26 ( may be thought of as either the NULL pointer  for) 298.12 528.33 P
(reference objects,) 108 516.33 T
7 9 Q
( 0) 181.02 516.33 T
5 10 Q
( for inte) 188.53 516.33 T
(gers,) 220.04 516.33 T
7 9 Q
(0.0) 241.7 516.33 T
5 10 Q
(for \337oats and) 256.71 516.33 T
7 9 Q
(false) 311.98 516.33 T
5 10 Q
(for booleans.) 333.49 516.33 T
4 12 Q
(2.1.2   Printing output) 108 475 T
5 10 Q
(Y) 108 452.33 T
(ou can print data of v) 114.12 452.33 T
(arious types in Sather using the command) 199.13 452.33 T
7 9 Q
(#OUT+) 368.84 452.33 T
5 10 Q
-0.34 (T) 108 399.33 P
-0.34 (reat) 113.76 399.33 P
7 9 Q
-0.34 ( \325#OUT+\325) 130.91 399.33 P
5 10 Q
-0.34 ( as an idiom for no) 168.5 399.33 P
-0.34 (w; it is equi) 241.83 399.33 P
-0.34 (v) 287.52 399.33 P
-0.34 (alent to the standard output routines in other languag-) 292.27 399.33 P
(es.) 108 387.33 T
4 12 Q
(2.1.3   Sather sour) 108 346 T
(ce \336les) 211.14 346 T
5 10 Q
-0.22 (Sather source \336les consist  of lists of  classes.   In addition to  the source \336les that a user speci\336es on) 108 323.33 P
-0.23 (the command line to the compiler) 108 311.33 P
-0.23 (, the standard library \336les are al) 241.15 311.33 P
-0.23 (w) 366.02 311.33 P
-0.23 (ays implicitly e) 373.14 311.33 P
-0.23 (xamined.  De\336ni-) 434.19 311.33 P
-0.56 (tions of the  basic classes such as inte) 108 299.33 P
-0.56 (gers and strings as well as containers of all kinds are to be found) 253.32 299.33 P
(in the standard library) 108 287.33 T
(.) 195.39 287.33 T
-0.39 (Ex) 108 265.33 P
-0.39 (ecution of a Sather program be) 118.96 265.33 P
-0.39 (gins with a routine named) 240.46 265.33 P
7 9 Q
-0.39 (\324main\325) 344.9 265.33 P
5 10 Q
-0.39 (in a speci\336ed class, \050a class called) 370.52 265.33 P
7 9 Q
-0.34 (\324MAIN\325) 108 253.33 P
5 10 Q
-0.34 ( is used by def) 134.5 253.33 P
-0.34 (ault\051. If main is declared to ha) 190.81 253.33 P
-0.34 (v) 308.83 253.33 P
-0.34 (e a return v) 313.68 253.33 P
-0.34 (alue of type) 357.68 253.33 P
7 F
-0.38 (INT) 406.37 253.33 P
5 F
-0.34 (, this will specify the) 421.74 253.33 P
(e) 108 241.33 T
(xit code of the program when it \336nishes e) 112.29 241.33 T
(x) 278.23 241.33 T
(ecution.) 283.08 241.33 T
4 12 Q
(2.1.4   Hello W) 108 200 T
(orld) 187.98 200 T
5 10 Q
(The hello w) 108 177.33 T
(orld program is sho) 155.67 177.33 T
(w belo) 233.47 177.33 T
(w:) 260.16 177.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:STR := "foo";) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b:STR := "bar";) 144 618.67 T
11 F
(-- + concatentates strings) 249.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(c:STR := a + b;) 144 609.67 T
11 F
(-- c is "foobar".) 249.6 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(e:INT := 5;) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f:INT := 7;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(g:INT := e+f;) 144 582.67 T
11 F
(-- g is 12) 249.6 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(compare:BOOL := e > f;) 144 573.67 T
11 F
(-- compare is false) 249.6 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT + compare;) 144 564.67 T
11 F
(-- Prints out \325false\325) 249.6 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a:INT := 10;) 144 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"hello world "+a;) 144 423.67 T
11 F
(-- Prints out "hello world 10") 259.2 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class) 144 157.67 T
12 F
(HELLO_WORLD) 172.8 157.67 T
9 F
( is) 225.6 157.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(main) 178.2 148.67 T
9 F
( is) 197.4 148.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"Hello World\134n";) 190.8 139.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 130.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 121.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 559.12 2 L
V
0 Z
N
489.6 635.88 489.6 559.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 559 489.73 559 2 L
V
N
129.6 165.88 129.6 116.13 2 L
V
N
489.6 165.88 489.6 116.13 2 L
V
N
129.48 166 489.73 166 2 L
V
N
129.48 116 489.73 116 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 209.3 710.84 T
0 F
(2.2) 294.5 710.84 T
(De\336ning Classes and Cr) 307.8 710.84 T
(eating Objects) 399.02 710.84 T
6 10 Q
(35) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(As we mentioned earlier) 108 659.33 T
(, printing to standard output is obtained by calling) 205.63 659.33 T
7 9 Q
(#OUT+) 407.85 659.33 T
5 10 Q
(.) 437.11 659.33 T
-0.18 (If the abo) 108 637.33 P
-0.18 (v) 145.82 637.33 P
-0.18 (e code is stored  in the \336le hw) 150.66 637.33 P
-0.18 (.sa, it can be compiled \050using the ICSI Sather compiler\051 by:) 268.02 637.33 P
9 8 Q
(cs -main HELLO_WORLD -o hw hw.sa) 122.4 620.67 T
5 10 Q
0.76 (The \325-main\325  option simply indicates to the compiler that the main routine will be found in class) 108 600.33 P
7 9 Q
(HELLO_WORLD.) 108 588.33 T
5 10 Q
(The resulting e) 183.52 588.33 T
(x) 243.36 588.33 T
(ecutable,) 248.21 588.33 T
7 9 Q
(\325hw\325) 286.53 588.33 T
5 10 Q
( can be run as follo) 302.03 588.33 T
(ws) 378.15 588.33 T
9 8 Q
(prompt> hw) 122.4 571.67 T
(Hello World) 122.4 562.67 T
(prompt>) 122.4 553.67 T
108 493.98 504 497 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 495.49 540 495.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.2  De\336ning Classes and Creating Objects) 108 503 T
5 10 Q
-0.26 (Objects are usually models of conceptual or real-w) 108 474.31 P
-0.26 (orld entities; the) 309.61 474.31 P
-0.26 (y consist of a combination of da-) 373.93 474.31 P
0.04 (ta, which models the state of the entity and operations which model the beha) 108 462.31 P
0.04 (vior of the entity) 414.44 462.31 P
0.04 (.  The) 480.86 462.31 P
-0.13 (body of a  Sather class consists of  a  list of features which de\336ne the data and beha) 108 450.31 P
-0.13 (vior of the class.) 438.29 450.31 P
(A class de\336nes a ne) 108 438.31 T
(w type and may be used to create object instances of that type) 186.62 438.31 T
5 8 Q
(1) 433.79 442.31 T
5 10 Q
(.) 437.79 438.31 T
-0.42 (W) 108 416.31 P
-0.42 (e will start by describing the data elements and then mo) 116.64 416.31 P
-0.42 (v) 335.04 416.31 P
-0.42 (e on to the operations.  In subsequent sec-) 339.89 416.31 P
0.08 (tions, we will describe the de\336nition of object beha) 108 404.31 P
0.08 (vior in the form of routines.  W) 313.16 404.31 P
0.08 (e will then point) 438.47 404.31 P
0.04 (out that Sather pro) 108 392.31 P
0.04 (vides a le) 182.13 392.31 P
0.04 (v) 219.74 392.31 P
0.04 (el of abstraction, which permits the state and beha) 224.59 392.31 P
0.04 (vior of the object to) 424.95 392.31 P
-0.29 (be treated in a uniform manner) 108 380.31 P
-0.29 (.  Finally) 229.56 380.31 P
-0.29 (,  we will describe the some) 264.17 380.31 P
-0.29 (what unusual meaning of assign-) 373.52 380.31 P
(ment in Sather that mak) 108 368.31 T
(es this uniformity possible.) 203.45 368.31 T
4 12 Q
(2.2.1   De\336ning Simple Classes) 108 326.98 T
5 10 Q
(The state of a class is de\336ned by attrib) 108 304.31 T
(utes, which are ha) 261.11 304.31 T
(v) 333.11 304.31 T
(e the pre\336x) 337.96 304.31 T
7 9 Q
(attr) 385.45 304.31 T
5 10 Q
-0.21 (The) 108 233.31 P
7 9 Q
-0.21 (POINT) 125.84 233.31 P
5 10 Q
-0.21 ( class abo) 153.35 233.31 P
-0.21 (v) 191.66 233.31 P
-0.21 (e de\336nes an) 196.51 233.31 P
7 9 Q
-0.21 (\325x\325) 245.59 233.31 P
5 10 Q
-0.21 ( and a) 254.09 233.31 P
7 9 Q
-0.21 (\325y\325) 279.85 233.31 P
5 10 Q
-0.21 ( attrib) 288.34 233.31 P
-0.21 (ute both of which are inte) 311.54 233.31 P
-0.21 (gers.  This class is use-) 412.83 233.31 P
(less, as it stands, since it pro) 108 221.31 T
(vides no w) 221.18 221.31 T
(ay to create instances of itself.) 264.41 221.31 T
108 129 504 149.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 140.09 240.98 140.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
-0.01 (1.  This is only tr) 108 123.67 P
-0.01 (ue for r) 166.45 123.67 P
-0.01 (efer) 192.29 123.67 P
-0.01 (ence, immutable and some kinds of external classes.  Abstract a, partial and most ex-) 205.63 123.67 P
(ternal classes cannot  have instances.) 108 114.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class POINT is) 144 284.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr x:INT;) 178.2 275.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr y:INT;) 178.2 266.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 257.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 292.85 129.6 252.1 2 L
V
0.25 H
0 Z
N
489.6 292.85 489.6 252.1 2 L
V
N
129.48 292.98 489.73 292.98 2 L
V
N
129.48 251.98 489.73 251.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(36) 108 710.84 T
8 8 Q
(Classes and Objects :) 192.16 710.84 T
0 F
(2.2 De\336ning Classes and Cr) 277.37 710.84 T
(eating Objects) 381.89 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(Object Creation:) 108 659.33 T
7 12 Q
(create) 188.57 659.33 T
4 10 Q
( and) 221.92 659.33 T
7 12 Q
(new) 245.26 659.33 T
5 10 Q
( T) 108 636.33 T
(o mak) 115.81 636.33 T
(e objects of the) 140.43 636.33 T
7 9 Q
(POINT) 203.75 636.33 T
5 10 Q
(  class, we ha) 231.25 636.33 T
(v) 284.09 636.33 T
(e to introduce a) 288.94 636.33 T
7 9 Q
(create) 353.37 636.33 T
5 10 Q
(routine) 380.89 636.33 T
-0.27 (The) 108 511.33 P
7 9 Q
-0.27 (create) 125.78 511.33 P
5 10 Q
-0.27 ( routine \336rst calls the special e) 150.79 511.33 P
-0.27 (xpression) 270.69 511.33 P
7 9 Q
-0.27 (\325new\325) 311.25 511.33 P
5 10 Q
-0.27 (.) 331.75 511.33 P
7 9 Q
-0.27 (\325new\325) 338.72 511.33 P
5 10 Q
-0.27 ( creates a ne) 361.46 511.33 P
-0.27 (w uninitialized instance) 409.54 511.33 P
0.24 (of the) 108 499.33 P
7 9 Q
0.24 (POINT) 134.03 499.33 P
5 10 Q
0.24 ( class and returns it.  All the attrib) 161.53 499.33 P
0.24 (utes in the ne) 299.06 499.33 P
0.24 (w instance ha) 352.58 499.33 P
0.24 (v) 407.28 499.33 P
0.24 (e def) 412.13 499.33 P
0.24 (ault \325) 431.98 499.33 P
0.24 (v) 452.55 499.33 P
0.24 (oid\325 v) 457.35 499.33 P
0.24 (alues.) 480.95 499.33 P
0.42 (It then assigns the) 108 487.33 P
7 9 Q
0.42 (\325x\325) 187.04 487.33 P
5 10 Q
0.42 ( and) 195.54 487.33 P
7 9 Q
0.42 (\325y\325) 215.81 487.33 P
5 10 Q
0.42 ( attrib) 224.31 487.33 P
0.42 (utes of this ne) 248.14 487.33 P
0.42 (w instance to) 304.98 487.33 P
7 9 Q
0.42 (xvalue) 361.51 487.33 P
5 10 Q
0.42 ( and) 387.52 487.33 P
7 9 Q
0.42 (yvalue) 407.8 487.33 P
5 10 Q
0.42 (respecti) 436.73 487.33 P
0.42 (v) 467.58 487.33 P
0.42 (ely) 472.43 487.33 P
0.42 (.  In-) 484 487.33 P
(stances of the) 108 475.33 T
7 9 Q
(POINT) 164.93 475.33 T
5 10 Q
( class can then be created as sho) 192.43 475.33 T
(wn belo) 320.75 475.33 T
(w) 352.44 475.33 T
9 8 Q
(p:POINT := POINT::create\0503,5\051;) 122.4 458.67 T
5 10 Q
-0.22 (Since creation is such a common operation, Sather pro) 108 438.33 P
-0.22 (vides a special shorthand  for calls to the rou-) 324.09 438.33 P
(tine) 108 426.33 T
7 9 Q
(\324create\325) 125.5 426.33 T
5 10 Q
(.  The) 154.51 426.33 T
7 9 Q
(\325create\325) 180.06 426.33 T
5 10 Q
(routine sho) 211.57 426.33 T
(wn could be in) 256.04 426.33 T
(v) 314.8 426.33 T
(ok) 319.6 426.33 T
(ed with the #  sign as sho) 329.5 426.33 T
(wn belo) 430.08 426.33 T
(w) 461.77 426.33 T
9 8 Q
(point:POINT := #POINT\0503,5\051;) 122.4 409.67 T
5 10 Q
-0.31 ( Expressions using the) 108 389.33 P
7 9 Q
-0.31 ( #) 196.8 389.33 P
5 10 Q
-0.31 ( sign are referred to as) 203.99 389.33 P
1 F
-0.31 (creation expressions) 293.78 389.33 P
5 F
-0.31 (,  and are a con) 374.49 389.33 P
-0.31 (v) 433.08 389.33 P
-0.31 (enient shorthand) 437.93 389.33 P
(used for creating ne) 108 377.33 T
(w objects and initializing their attrib) 186.89 377.33 T
(utes.) 331.96 377.33 T
4 F
(Attrib) 108 349.33 T
(ute access) 134.46 349.33 T
5 F
0.05 (When an object of the class) 108 326.33 P
7 9 Q
0.05 (POINT) 221.05 326.33 P
5 10 Q
0.05 ( is created, the) 248.55 326.33 P
7 9 Q
0.05 (\325x\325) 309.01 326.33 P
5 10 Q
0.05 ( and) 317.51 326.33 P
7 9 Q
0.05 (\325y\325) 337.05 326.33 P
5 10 Q
0.05 ( attrib) 345.54 326.33 P
0.05 (utes may be accessed by \325) 369 326.33 P
0.05 (dotting\325) 472.33 326.33 P
(into the object.) 108 314.33 T
4 F
(P) 108 244.33 T
(oints to note) 114.27 244.33 T
5 F
(\245) 108 228.33 T
(The semantics of a class is independent of the te) 121.54 228.33 T
(xtual order of its class elements.  In particular) 314.41 228.33 T
(,) 497.03 228.33 T
(the actual attrib) 121.54 216.33 T
(ute layout used by a Sather implementation is in) 183.55 216.33 T
(visible to a programmer) 375.92 216.33 T
(.) 471.19 216.33 T
(\245) 108 201.33 T
( The scope of feature names is the class body) 121.54 201.33 T
(\245) 108 186.33 T
(Feature names may be either lo) 121.54 186.33 T
(wer or upper case.) 246.54 186.33 T
(\245) 108 171.33 T
(Class names must be all upper case letters \050underscores and digits are permitted e) 121.54 171.33 T
(xcept as the) 447.16 171.33 T
(\336rst character\051.) 121.54 159.33 T
(\245) 108 144.33 T
(The feature namespace is separate from the class namespace.) 121.54 144.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POINT is) 144 616.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr x, y:INT;) 178.2 607.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050xvalue,yvalue:INT\051:POINT is) 178.2 589.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:POINT := new;) 190.8 580.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.x := xvalue;) 190.8 571.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   res.y := yvalue;) 267.6 571.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 190.8 562.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 553.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 535.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:POINT := #POINT\0503,5\051;) 144 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Create a new point) 273.6 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT + a.x ;) 144 284.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Prints out the value of \325x\325, which is 3) 206.4 284.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a.x := 5;) 144 274.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Sets the value of the \325x\325 attribute to 5) 201.6 274.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 624.88 129.6 530.12 2 L
V
0 Z
N
489.6 624.88 489.6 530.12 2 L
V
N
129.48 625 489.73 625 2 L
V
N
129.48 530 489.73 530 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 209.3 710.84 T
0 F
(2.2) 294.5 710.84 T
(De\336ning Classes and Cr) 307.8 710.84 T
(eating Objects) 399.02 710.84 T
6 10 Q
(37) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(\245) 108 659.33 T
(The scope of class names is the entire program; no tw) 121.54 659.33 T
(o classes can ha) 336.4 659.33 T
(v) 399.79 659.33 T
(e the same name \050un-) 404.64 659.33 T
(less the) 121.54 647.33 T
(y ha) 151.11 647.33 T
(v) 167.85 647.33 T
(e dif) 172.7 647.33 T
(ferent number of parameters, which will be e) 190.5 647.33 T
(xplained in the chapter on class) 370.3 647.33 T
(parametrization\051.) 121.54 635.33 T
(\245) 108 620.33 T
(Y) 121.54 620.33 T
(ou ha) 127.66 620.33 T
(v) 149.4 620.33 T
(e to e) 154.25 620.33 T
(xplicitly call) 175.76 620.33 T
7 9 Q
(\325new\325) 228.54 620.33 T
5 10 Q
( in the create routine.  The follo) 249.04 620.33 T
(wing code e) 375.43 620.33 T
(xhibits a common) 423.6 620.33 T
(error:) 121.54 608.33 T
4 12 Q
(2.2.2   Chec) 108 499 T
(king whether an object has been created) 173.8 499 T
5 10 Q
-0.39 (Before a v) 108 476.33 P
-0.39 (ariable is assigned to an object,  the v) 148.61 476.33 P
-0.39 (ariable has the v) 294.91 476.33 P
-0.39 (oid v) 358.78 476.33 P
-0.39 (alue.  The e) 378.42 476.33 P
-0.39 (xpression) 423.73 476.33 P
7 9 Q
-0.4 (\325void\325) 464.17 476.33 P
5 10 Q
-0.39 (may) 486.78 476.33 P
-0.03 (be used to determine whether a v) 108 464.33 P
-0.03 (alue is v) 239.74 464.33 P
-0.03 (oid or not. The follo) 272.8 464.33 P
-0.03 (wing e) 353.24 464.33 P
-0.03 (xample will print out the string) 380 464.33 P
("a is v) 108 408.33 T
(oid!" since a) 132.99 408.33 T
7 9 Q
(POINT) 185.67 408.33 T
5 10 Q
( is a reference class and) 213.17 408.33 T
7 9 Q
(\325a\325) 310.35 408.33 T
5 10 Q
( has not been created.) 319.35 408.33 T
0.13 (In the abo) 108 355.33 P
0.13 (v) 148.1 355.33 P
0.13 (e v) 152.95 355.33 P
0.13 (ersion, the string "a is not v) 164.86 355.33 P
0.13 (oid!" will be printed since an object has been assigned to) 275.34 355.33 P
(the v) 108 343.33 T
(ariable) 127.47 343.33 T
7 9 Q
(\325a\325) 157.18 343.33 T
5 10 Q
(.) 166.18 343.33 T
0.03 (Note that the abo) 108 321.33 P
0.03 (v) 176.55 321.33 P
0.03 (e test will not w) 181.4 321.33 P
0.03 (ork in the same w) 245.31 321.33 P
0.03 (ay for some of the b) 316.44 321.33 P
0.03 (uilt-in classes such as inte-) 396.66 321.33 P
(gers and booleans) 108 309.33 T
5 8 Q
(2) 179.65 313.33 T
5 10 Q
(.) 183.65 309.33 T
4 12 Q
(2.2.3   T) 108 268 T
(ypes Intr) 151.31 268 T
(oduced) 201.08 268 T
5 10 Q
0.5 (Each Sather v) 108 245.33 P
0.5 (ariable and object has an associated type.  The type of the object indicates the class) 164.3 245.33 P
0.32 (that w) 108 233.33 P
0.32 (as used to create the object.  In the follo) 132.94 233.33 P
0.32 (wing e) 294.95 233.33 P
0.32 (xample, both) 322.06 233.33 P
7 9 Q
0.32 (\325a\325) 377.42 233.33 P
5 10 Q
0.32 (and) 389.24 233.33 P
7 9 Q
0.32 (\325b\325) 406.49 233.33 P
5 10 Q
0.32 ( ha) 415.49 233.33 P
0.32 (v) 427.55 233.33 P
0.32 (e the type) 432.4 233.33 P
7 9 Q
0.32 (POINT) 474.74 233.33 P
5 10 Q
0.32 (,) 501.5 233.33 P
(indicating that the) 108 221.33 T
(y are associated with instances of the) 180.07 221.33 T
7 9 Q
(POINT) 330.87 221.33 T
5 10 Q
( class.) 358.37 221.33 T
-0.57 (In this e) 108 168.33 P
-0.57 (xample, the type of the v) 138.93 168.33 P
-0.57 (ariable) 235.26 168.33 P
7 9 Q
-0.57 (\325a\325) 264.4 168.33 P
5 10 Q
-0.57 ( is the same as the type of the object to which it is assigned.) 273.4 168.33 P
(This is al) 108 156.33 T
(w) 144.57 156.33 T
(ays the case with the reference classes we ha) 151.69 156.33 T
(v) 330.31 156.33 T
(e seen so f) 335.16 156.33 T
(ar) 376.99 156.33 T
(.) 384.21 156.33 T
108 129 504 149.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 140.09 240.98 140.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(2.  The void test r) 108 123.67 T
(eturns tr) 168.95 123.67 T
(ue for all integers with a value of 0 and booleans with a value of false.  In general, the) 199.13 123.67 T
(void test is not useful for immutable classes.) 108 114.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class POINT is) 144 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr x,y:INT;) 178.2 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050xval, yval:INT\051:POINT is) 178.2 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(x := xval;) 171 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- Run time error! We have no object as yet!) 223.8 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(y := yval;) 190.8 551.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; ....) 156.6 542.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:POINT;) 144 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if void\050a\051 then #OUT+"a is void!" end;) 144 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:POINT := #POINT\0503,5\051;) 144 388.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if void\050a\051 then  #OUT+"a is void!" else #OUT+"a is not void!" end;) 144 379.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:POINT := #POINT\0502,3\051;) 144 201.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b:POINT := #POINT\0504,5\051;) 144 192.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 596.88 129.6 537.12 2 L
V
0.25 H
0 Z
N
489.6 596.88 489.6 537.12 2 L
V
N
129.48 597 489.73 597 2 L
V
N
129.48 537 489.73 537 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(38) 108 710.84 T
8 8 Q
(Classes and Objects :) 209.67 710.84 T
0 F
(2.3 Class Data: shar) 294.88 710.84 T
(ed and const) 370.01 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.21 (When we introduce abstract classes in  the chapter on) 108 659.33 P
10 F
0.21 (Abstr) 326.7 659.33 P
0.21 (act Classes and Subtyping on pa) 348.22 659.33 P
0.21 (g) 479.45 659.33 P
0.21 (e 79) 484.35 659.33 P
5 F
0.21 (,) 501.5 659.33 P
0.28 (we will see that some Sather v) 108 647.33 P
0.28 (ariables can hold objects of man) 231.08 647.33 P
0.28 (y dif) 361.47 647.33 P
0.28 (ferent types.   In this case, it is) 380.11 647.33 P
0.01 (useful to distinguish between the type of the v) 108 635.33 P
0.01 (ariable \050called the) 292.23 635.33 P
13 F
0.01 ( declar) 363.89 635.33 P
0.01 (ed type) 392.87 635.33 P
5 F
0.01 (\051 and the type of the) 423.71 635.33 P
(object that it holds \050called the actual type or the) 108 623.33 T
13 F
(concr) 300.75 623.33 T
(ete type) 324.45 623.33 T
5 F
(\051.) 357.49 623.33 T
4 12 Q
(2.2.4   Hiding f) 108 582 T
(eatures: priv) 189.24 582 T
(ate and readonl) 261.02 582 T
(y) 349.54 582 T
5 10 Q
0.68 (A fundamental feature of object oriented programming languages is that the) 108 559.33 P
0.68 (y permit an object to) 418.5 559.33 P
-0.24 (hide certain features which are for internal use only) 108 547.33 P
-0.24 (.  Attrib) 311.45 547.33 P
-0.24 (utes may be completely hidden by mark-) 342.15 547.33 P
0.25 (ing them) 108 535.33 P
7 9 Q
0.25 (private) 146.28 535.33 P
5 10 Q
0.25 (.  Routines may lik) 173.29 535.33 P
0.25 (e) 250.03 535.33 P
0.25 (wise be mark) 254.22 535.33 P
0.25 (ed pri) 307.95 535.33 P
0.25 (v) 330.99 535.33 P
0.25 (ate, meaning that the) 335.74 535.33 P
0.25 (y cannot be accessed) 419.67 535.33 P
0.44 (outside the original class.  Attrib) 108 523.33 P
0.44 (utes can also be hidden so that the) 240.57 523.33 P
0.44 (y can be read b) 379.89 523.33 P
0.44 (ut not modi\336ed) 441.99 523.33 P
(from outside the class, by marking them) 108 511.33 T
7 9 Q
(readonly) 271.32 511.33 T
5 10 Q
(.) 305.18 511.33 T
(This restricts e) 108 384.33 T
(xternal access to the attrib) 166.73 384.33 T
(utes in the object) 270.95 384.33 T
4 F
(P) 108 295.33 T
(oints to note) 114.27 295.33 T
5 F
(\245) 108 279.33 T
(Pri) 121.54 279.33 T
(v) 132.96 279.33 T
(ac) 137.71 279.33 T
(y is on a per) 146.44 279.33 T
(-class  basis,  rather than on a  per) 195.12 279.33 T
(-object basis. Thus, an object can access) 330.44 279.33 T
(the pri) 121.54 267.33 T
(v) 147.12 267.33 T
(ate features of other objects of the same class.  W) 151.87 267.33 T
(e actually use this f) 349.07 267.33 T
(act in the) 426.18 267.33 T
7 9 Q
(create) 465.34 267.33 T
5 10 Q
(routine of the class) 121.54 255.33 T
7 9 Q
(POINT2) 199.86 255.33 T
5 10 Q
(abo) 234.87 255.33 T
(v) 249.16 255.33 T
(e.  Assignments to the attrib) 254.01 255.33 T
(utes of) 366.03 255.33 T
7 9 Q
(res) 395.47 255.33 T
5 10 Q
( are being done outside) 407.97 255.33 T
(the object being returned.) 121.54 243.33 T
108 181.98 504 185 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 183.49 540 183.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.3  Class Data: shared and const) 108 191 T
5 10 Q
-0.03 (In addition to object attrib) 108 162.31 P
-0.03 (utes, a class de\336nition may also contain \325) 212.13 162.31 P
-0.03 (shared\325 data, which is shared by) 375.83 162.31 P
(all the objects of that class.) 108 150.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POINT2 is) 144 491.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr x:INT;) 156.6 482.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- x cannot be seen from outside) 281.4 482.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(readonly attr y:INT;) 156.6 472.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- y cannot be changed from outside) 281.4 472.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(create\050xvalue,yvalue:INT\051:POINT is) 178.2 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:POINT := new;) 190.8 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.x := xvalue;) 190.8 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.y := yvalue;) 190.8 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res) 190.8 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo is ...) 144 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- some other piece of code) 192 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a:POINT2 := #POINT2\0503,5\051;) 178.2 354.67 T
11 F
(-- Create a new POINT2) 322.2 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+ a.y;) 156.6 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(                  -- Prints out \3255\325) 209.4 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Illegal: #OUT+ a.x) 153.6 335.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Illegal a.y := 10;) 153.6 325.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 499.88 129.6 403.12 2 L
V
0.25 H
0 Z
N
489.6 499.88 489.6 403.12 2 L
V
N
129.48 500 489.73 500 2 L
V
N
129.48 403 489.73 403 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 226.8 710.84 T
0 F
(2.3) 312.01 710.84 T
(Class Data: shar) 325.31 710.84 T
(ed and const) 387.15 710.84 T
6 10 Q
(39) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(2.3.1   Shared  Attrib) 108 658 T
(utes - Restricted global v) 223.8 658 T
(ariab) 366.26 658 T
(les) 394.82 658 T
5 10 Q
0.1 (Shared attrib) 108 635.33 P
0.1 (utes are similar to object attrib) 159.29 635.33 P
0.1 (utes, b) 281.54 635.33 P
0.1 (ut are shared between all the instances of a class.) 307.55 635.33 P
0.43 (The) 108 623.33 P
0.43 (y are essentially  global v) 123.4 623.33 P
0.43 (ariables that reside within a class namespace.  The) 227.24 623.33 P
0.43 (y can be accessed) 431.9 623.33 P
-0.02 (and modi\336ed by an) 108 611.33 P
-0.02 (y instance of the class.  Shareds can ha) 184.72 611.33 P
-0.02 (v) 339.58 611.33 P
-0.02 (e the same pri) 344.43 611.33 P
-0.02 (v) 399.93 611.33 P
-0.02 (ate and readonly  restric-) 404.68 611.33 P
(tions that re) 108 599.33 T
(gular attrib) 155.07 599.33 T
(utes ha) 199.03 599.33 T
(v) 226.88 599.33 T
(e) 231.73 599.33 T
0.29 (Unlik) 108 546.33 P
0.29 (e re) 130.68 546.33 P
0.29 (gular attrib) 145.53 546.33 P
0.29 (utes, when only a single shared attrib) 189.78 546.33 P
0.29 (ute is de\336ned, a constant  initializing e) 339.91 546.33 P
0.29 (x-) 495.67 546.33 P
(pression may be pro) 108 534.33 T
(vided.) 188.67 534.33 T
(If no initializing e) 108 461.33 T
(xpression is pro) 179.79 461.33 T
(vided, the shared is initialized to the v) 242.97 461.33 T
(alue) 394.93 461.33 T
7 9 Q
(\324void\325) 414.09 461.33 T
5 10 Q
(.) 434.59 461.33 T
4 12 Q
(2.3.2   Class Constants) 108 420 T
5 10 Q
0.49 (Constants are accessible by all objects in a class and may not be assigned to - the) 108 397.33 P
0.49 (y must  ha) 439.6 397.33 P
0.49 (v) 482.27 397.33 P
0.49 (e an) 487.12 397.33 P
0.31 (initializing e) 108 385.33 P
0.31 (xpression from which their v) 158.44 385.33 P
0.31 (alue is determined at compile time \050there is an e) 274.98 385.33 P
0.31 (xception) 469.56 385.33 P
0.3 (when no type is speci\336ed, as descrbed in the ne) 108 373.33 P
0.3 (xt subsection\051.  If a type is speci\336ed, then the con-) 299.94 373.33 P
0.09 (struct de\336nes a single constant attrib) 108 361.33 P
0.09 (ute which  must be initialized  to a  constant e) 254.08 361.33 P
0.09 (xpression.  Con-) 437.99 361.33 P
-0.58 (stant e) 108 349.33 P
-0.58 (xpressions are recursi) 133.1 349.33 P
-0.58 (v) 218.34 349.33 P
-0.58 (ely  composed out of a combination of literals, function calls on literals,) 223.19 349.33 P
(and references to other constants. More precisely) 108 337.33 T
(, le) 303.68 337.33 T
(g) 315.75 337.33 T
(al assignments are to) 320.7 337.33 T
(\245) 108 319.33 T
(a character) 121.54 319.33 T
(, boolean, string, inte) 164.72 319.33 T
(ger or \337oating point literal) 249.01 319.33 T
(\245) 108 304.33 T
(a) 121.54 304.33 T
7 F
(void) 128.48 304.33 T
5 F
( or) 146.82 304.33 T
7 F
(void) 160.15 304.33 T
5 F
( test e) 178.49 304.33 T
(xpression) 201.67 304.33 T
(\245) 108 289.33 T
(an) 121.54 289.33 T
7 F
(and) 133.48 289.33 T
5 F
( or) 150.16 289.33 T
7 F
(or) 163.49 289.33 T
5 F
( e) 172.38 289.33 T
(xpression, each of whose components is a constant e) 179.17 289.33 T
(xpression) 389.26 289.33 T
(\245) 108 274.33 T
(an array literal, each of whose components is a constant e) 121.54 274.33 T
(xpression) 351.61 274.33 T
(\245) 108 259.33 T
(a routine call applied to a constant e) 121.54 259.33 T
(xpression, each of whose ar) 265.53 259.33 T
(guments is a constant e) 376.15 259.33 T
(xpres-) 468.77 259.33 T
(sion) 121.54 247.33 T
6 F
(other than void) 140.71 247.33 T
5 F
(.  This ca) 210.71 247.33 T
(v) 247.17 247.33 T
(eat is imporant, since) 252.02 247.33 T
7 9 Q
(create) 339.51 247.33 T
5 10 Q
( routines are called on v) 364.52 247.33 T
(oid.  Thus) 460.13 247.33 T
(the follo) 121.54 235.33 T
(wing is ille) 154.9 235.33 T
(g) 199.2 235.33 T
(al:) 204.15 235.33 T
5 8 Q
(3) 214.15 239.33 T
108 120 504 140.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 131.09 240.98 131.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(3.  Implementation Note: The compiler curr) 108 114.67 T
(ently does not always detect this illegal case) 261.69 114.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(private shared i,j:INT;) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly shared c:CHAR := \325x\325) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(shared s:STR := "name";) 144 514.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- ILLEGAL shared s,p:STR := "name";) 144 505.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- cannot use initializing expression if two shareds are) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- declared at the same time) 144 485.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- ILLEGAL const  a:POINT := #POINT\0503,3\051;) 144 215.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(const a:POINT := void;) 144 205.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The only legal kind of constant POINT is void) 144 196.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(40) 108 710.84 T
8 8 Q
(Classes and Objects :) 209.67 710.84 T
0 F
(2.3 Class Data: shar) 294.88 710.84 T
(ed and const) 370.01 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(\245) 108 659.33 T
(a reference to another constant in the same class or in another class using the) 121.54 659.33 T
7 9 Q
(\324::\325) 431.19 659.33 T
5 10 Q
( notation.) 440.19 659.33 T
4 F
(Integ) 108 535.33 T
(er constants and En) 131.99 535.33 T
(umerated T) 227.47 535.33 T
(ypes) 280.77 535.33 T
5 F
0.28 (If a type speci\336er is not pro) 108 512.33 P
0.28 (vided, then no initializing e) 219.49 512.33 P
0.28 (xpression is required and  the construct de-) 330.16 512.33 P
0.17 (\336nes one or more successi) 108 500.33 P
0.17 (v) 213.4 500.33 P
0.17 (e inte) 218.26 500.33 P
0.17 (ger constants. The \336rst identi\336er is assigned the v) 240.21 500.33 P
0.17 (alue zero by de-) 439.35 500.33 P
-0.42 (f) 108 488.33 P
-0.42 (ault;  its v) 111.23 488.33 P
-0.42 (alue may also be speci\336ed by a constant  e) 149.46 488.33 P
-0.42 (xpression of type) 315.26 488.33 P
7 9 Q
-0.42 (INT) 385.39 488.33 P
5 10 Q
-0.42 (. The remaining identi\336ers) 399.15 488.33 P
0.26 (are assigned successi) 108 476.33 P
0.26 (v) 192.7 476.33 P
0.26 (e inte) 197.55 476.33 P
0.26 (ger v) 219.6 476.33 P
0.26 (alues.  This is the w) 239.88 476.33 P
0.26 (ay to do enumeration types in Sather) 320.54 476.33 P
0.26 (.  It is an) 468.23 476.33 P
(error if no type is speci\336ed and there is an assignment that is not of type) 108 464.33 T
7 9 Q
(INT) 398.52 464.33 T
5 10 Q
(.) 412.28 464.33 T
4 F
(P) 108 394.33 T
(oints to note) 114.27 394.33 T
5 F
(\245) 108 378.33 T
(There must not be c) 121.54 378.33 T
(yclic dependencies among constant initializers.) 200.82 378.33 T
(\245) 108 281.33 T
(Since constant initialization in) 121.54 281.33 T
(v) 242.53 281.33 T
(olv) 247.33 281.33 T
(es permits operations on the b) 259.96 281.33 T
(uilt-in types, the operations on) 379.47 281.33 T
(the b) 121.54 269.33 T
(uilt-in types are designed so that no observ) 141.06 269.33 T
(able side-ef) 312.18 269.33 T
(fects can occur during constant ini-) 358.3 269.33 T
(tialization.) 121.54 257.33 T
(\245) 108 242.33 T
(The pre\336x readonly cannot be applied to constants, since constants cannot be modi\336ed in an) 121.54 242.33 T
(y) 489.95 242.33 T
(case.) 121.54 230.33 T
(\245) 108 215.33 T
(Due to their de\336nition, constants are only useful for the basic classes such as numbers, bool-) 121.54 215.33 T
(eans and characters.  All other constants can only be assigned to be v) 121.54 203.33 T
(oid!) 397.39 203.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(const r:FLT:=45.6;) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(        -- Reader routine is private r:FLT;) 244.8 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(private const a,b,c;) 144 629.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private const d:=4,e,f) 144 620.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const bar:BOOL := r > 10;) 144 611.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Function call on constants) 268.8 611.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(const foo:ARRAY{INT} := |1,2,4,5,6|;) 144 601.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Sather arrays are explained later) 144 592.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const  baz ::= BAR::foz ;) 144 583.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- foz must be a constant expression in foz) 144 574.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(const a;) 144 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- a is of type INT and gets the value 0) 230.4 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(const c,d;) 144 434.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- c gets 0 and d gets 1) 220.8 434.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(const e := 3;) 144 424.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(   -- e is also of type INT) 216 424.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class FOO is) 144 358.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     const b:INT := BAR::c;) 144 349.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class BAR is) 144 340.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const c:INT := BAZ::d;) 178.2 331.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class BAZ is) 144 322.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- ILLEGAL!  const d:INT := FOO::b;) 144 313.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Introduces a cycle between b, c and d) 144 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class FOO is) 144 183.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const a:BAR := void;) 156.6 174.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- only legal value) 262.2 174.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 226.8 710.84 T
0 F
(2.3) 312.01 710.84 T
(Class Data: shar) 325.31 710.84 T
(ed and const) 387.15 710.84 T
6 10 Q
(41) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(2.3.3   Accessing Class Data - the :: notation) 108 658 T
5 10 Q
(It is possible to directly access the class data or features using the :: notation.) 108 635.33 T
(The shared and const class data can then be accessed using the :: notation) 108 474.33 T
-0.43 (When a method is called using the) 108 421.33 P
7 9 Q
-0.43 (\325::\324) 245.27 421.33 P
5 10 Q
-0.43 ( notation, it is equi) 254.27 421.33 P
-0.43 (v) 327.05 421.33 P
-0.43 (alent to calling the method on a v) 331.8 421.33 P
-0.43 (oid object.) 462.21 421.33 P
-0.35 (Calling a method on a v) 108 409.33 P
-0.35 (oid object mak) 201.9 409.33 P
-0.35 (es sense if the feature only mak) 260.55 409.33 P
-0.35 (es use of shared data and local) 384.45 409.33 P
(state.  If the method mak) 108 397.33 T
(es use of object data, a run-time error will result.) 207.33 397.33 T
(\245) 108 325.33 T
( The usual pri) 121.54 325.33 T
(v) 176.56 325.33 T
(ac) 181.31 325.33 T
(y and modi\336cation restrictions are maintained) 190.04 325.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class FOO is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const a:INT := 3;) 178.2 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private const b:INT := 5;) 178.2 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly shared c:INT := 6;) 178.2 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(shared d:INT := 7;) 178.2 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr f:INT;) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create\050i:INT\051:SAME is res:SAME := new; res.f := i; return res; end;) 144 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   method1:INT is return d+a; end;) 144 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   method2:INT is return f+a; end;) 144 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+ FOO::a+"\134n";) 144 454.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FOO::d := 3;) 144 445.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+FOO::method1;) 144 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Prints out d+a = 10) 230.4 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+FOO::method2;) 144 367.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Tries to print out self.f+a) 235.2 367.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- However, self \050the object\051 is void, so trying to access \325f\325) 144 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- results in a run-time error - Attribute access of void) 144 347.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a_copy:INT := FOO::a;) 144 305.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- ILLEGAL FOO::c :=3; -- c is readonly) 144 296.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- FOO::a := 7;  -- a is a constant) 144 286.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 493.12 2 L
V
0 Z
N
489.6 623.88 489.6 493.12 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 493 489.73 493 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(42) 108 710.84 T
8 8 Q
(Classes and Objects :) 231.53 710.84 T
0 F
(2.4 Routine de\336nitions) 316.74 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.4  Routine de\336nitions) 108 654 T
5 10 Q
-0.26 (The beha) 108 625.31 P
-0.26 (vior of a class is speci\336ed by routines in the class body) 144.46 625.31 P
-0.26 (.   Routines may tak) 360.6 625.31 P
-0.26 (e ar) 439.17 625.31 P
-0.26 (guments and) 453.43 625.31 P
(may return a v) 108 613.31 T
(alue.) 165.79 613.31 T
0.1 (A routine de\336nition may be) 108 452.31 P
0.1 (gin with the k) 218.81 452.31 P
0.1 (e) 274.3 452.31 P
0.1 (yw) 278.59 452.31 P
0.1 (ord) 290.71 452.31 P
7 9 Q
0.1 (\324private\325) 306.64 452.31 P
5 10 Q
0.1 (to indicate that the routine may be called) 340.25 452.31 P
0.58 (from within the class b) 108 440.31 P
0.58 (ut is not visible from outside the class.  The methods that are visible from) 201.77 440.31 P
(outside the class are referred to as the class interf) 108 428.31 T
(ace.) 304.23 428.31 T
-0.24 (The body of a routine  is a list of statements, separated by semicolons. In a routine with a return v) 108 406.31 P
-0.24 (al-) 493.45 406.31 P
0.04 (ue, the \336nal statement along each e) 108 394.31 P
0.04 (x) 248.35 394.31 P
0.04 (ecution path must be  a) 253.2 394.31 P
7 F
0.05 (return) 348.44 394.31 P
5 F
0.04 ( statement .  Thus, the follo) 374.56 394.31 P
0.04 (wing) 484 394.31 P
(is not le) 108 382.31 T
(g) 139.52 382.31 T
(al) 144.47 382.31 T
0.38 ( A) 108 273.31 P
7 F
0.43 (raise) 120.99 273.31 P
5 F
0.38 ( statement raises an e) 142.66 273.31 P
0.38 (xception, and can be used where) 229.03 273.31 P
0.38 (v) 360.66 273.31 P
0.38 (er  a return statement might be re-) 365.51 273.31 P
-0.17 (quired.  Raise statements will be described in more detail in the chapter on) 108 261.31 P
10 F
-0.17 (Exceptions on pa) 406.39 261.31 P
-0.17 (g) 474.83 261.31 P
-0.17 (e 131) 479.73 261.31 P
5 F
-0.17 (.) 501.5 261.31 P
0.29 (F) 108 249.31 P
0.29 (or no) 113.41 249.31 P
0.29 (w) 134.28 249.31 P
0.29 (, we merely note that the follo) 140.85 249.31 P
0.29 (wing v) 262.59 249.31 P
0.29 (ersion of the routine) 290.23 249.31 P
7 9 Q
0.29 (\325scale_x\325) 374.71 249.31 P
5 10 Q
0.29 ( does not return a v) 409.21 249.31 P
0.29 (alue) 487.34 249.31 P
(in the second branch of the if statement, b) 108 237.31 T
(ut  raises an e) 275.27 237.31 T
(xception instead, which is perfectly le) 329.55 237.31 T
(g) 481.04 237.31 T
(al.) 485.99 237.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class CALCULATOR is) 144 593.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr running_sum:INT;) 178.2 584.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create:CALCULATOR is) 178.2 566.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:CALCULATOR := new;) 190.8 557.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.running_sum := 0;) 190.8 548.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 190.8 539.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 530.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(add\050x:INT\051:INT is) 178.2 512.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:INT := running_sum + x;) 190.8 503.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 190.8 494.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 485.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 476.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(scale_x\050x:INT\051:INT is) 144 362.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Illegal routine - the else clause has no return value) 158.4 353.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(if x > 0 then) 178.2 343.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return 15;) 190.8 334.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else) 178.2 325.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"Error!";) 171 316.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- last statement on this branch is not return) 238.2 316.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 178.2 306.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 297.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(scale_x\050x:INT\051:INT is) 144 217.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if x > 0 then) 178.2 208.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return 15;) 250.2 208.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else  raise "An error occurred!";  end;) 178.2 199.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 190.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 601.85 129.6 471.1 2 L
V
0.25 H
0 Z
N
489.6 601.85 489.6 471.1 2 L
V
N
129.48 601.98 489.73 601.98 2 L
V
N
129.48 470.98 489.73 470.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 248.67 710.84 T
0 F
(2.4) 333.88 710.84 T
(Routine de\336nitions) 347.17 710.84 T
6 10 Q
(43) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(Using the return v) 108 659.33 T
(alue) 193.37 659.33 T
5 F
-0.22 (Note that, unlik) 108 636.33 P
-0.22 (e most other languages, Sather) 169.96 636.33 P
10 F
-0.22 (for) 293.84 636.33 P
-0.22 (ces) 305.14 636.33 P
5 F
-0.22 ( you to mak) 317.91 636.33 P
-0.22 (e use of  the return v) 364.65 636.33 P
-0.22 (alue. This may) 445.28 636.33 P
0.3 (be considered an e) 108 624.33 P
0.3 (xtension of strong typing - the presence or absence of a return v) 182.88 624.33 P
0.3 (alue is a part of) 441.16 624.33 P
(the signature that should not be ignored.) 108 612.33 T
(The return v) 108 558.33 T
(alue can also be used as part of an e) 157.18 558.33 T
(xpression.) 300.04 558.33 T
4 12 Q
(2.4.1   Routine Ar) 108 494 T
(guments and Modes) 205.85 494 T
5 10 Q
0.16 (The ar) 108 471.33 P
0.16 (guments to a routine are speci\336ed as a comma-separated list.  Each ar) 133.8 471.33 P
0.16 (gument   must pro) 413.52 471.33 P
0.16 (vide) 486.78 471.33 P
-0.25 (a  name and type. The types of consecuti) 108 459.33 P
-0.25 (v) 268.78 459.33 P
-0.25 (e ar) 273.63 459.33 P
-0.25 (guments may be declared with) 287.91 459.33 P
-0.25 (a single type speci\336er) 411.36 459.33 P
-0.25 (.) 497 459.33 P
9 9 Q
(create\050x,y:INT\051:POINT ...) 144 442 T
5 10 Q
-0.17 (The scope of method ar) 108 421.33 P
-0.17 (guments is the entire body of the method, and also shado) 201.54 421.33 P
-0.17 (ws methods and at-) 427.03 421.33 P
0.22 (trib) 108 409.33 P
0.22 (utes in the class.  If a routine has a return v) 121.69 409.33 P
0.22 (alue, it is declared by a colon and a speci\336er for the) 295.51 409.33 P
(return type.  Y) 108 397.33 T
(ou can get around this restriction by using the) 165.22 397.33 T
7 F
(self) 350.48 397.33 T
5 F
( e) 366.04 397.33 T
(xpression e) 372.83 397.33 T
(xplicitly) 417.95 397.33 T
-0.1 (Each ar) 108 317.33 P
-0.1 (gument also has a) 137.98 317.33 P
6 F
-0.1 (mode) 211.44 317.33 P
5 F
-0.1 ( which determines ho) 237 317.33 P
-0.1 (w that ar) 322.26 317.33 P
-0.1 (gument is treated when the routine is) 356.86 317.33 P
-0.26 (called.  If no mode is e) 108 305.33 P
-0.26 (xplicitly stated, the ar) 197.68 305.33 P
-0.26 (gument mode is) 283.39 305.33 P
7 9 Q
-0.26 (in) 349.01 305.33 P
5 10 Q
-0.26 (.  That means it is simply a v) 356.01 305.33 P
-0.26 (alue sent) 468.99 305.33 P
0.48 (into the routine. The other possible modes are) 108 293.33 P
7 9 Q
0.48 (out) 297.63 293.33 P
5 10 Q
0.48 (,) 310.14 293.33 P
7 9 Q
0.48 (inout) 315.62 293.33 P
5 10 Q
0.48 ( and) 335.13 293.33 P
7 9 Q
0.48 (once) 355.53 293.33 P
5 10 Q
0.48 ( \050which will be described in the) 375.04 293.33 P
(section on iterators\051.) 108 281.33 T
4 F
(Multiple return v) 108 253.33 T
(alues and) 185.59 253.33 T
7 12 Q
(out) 234.5 253.33 T
4 10 Q
( ar) 251.18 253.33 T
(guments) 263.26 253.33 T
5 F
-0.06 (An out) 108 230.33 P
-0.06 (ar) 137.89 230.33 P
-0.06 (gument is really lik) 145.48 230.33 P
-0.06 (e an e) 222.7 230.33 P
-0.06 (xtra return v) 245.76 230.33 P
-0.06 (alue.  An) 294.82 230.33 P
7 F
-0.06 (out) 333.53 230.33 P
5 F
-0.06 ( ar) 347.43 230.33 P
-0.06 (gument is not set when the routine is) 357.46 230.33 P
0.38 (called; rather) 108 218.33 P
0.38 (, it is \336lled in by the routine itself.  Consider an inte) 160.46 218.33 P
0.38 (ger di) 371.61 218.33 P
0.38 (vision function that returns) 394.79 218.33 P
(both the di) 108 206.33 T
(vident and remainder of the tw) 150.53 206.33 T
(o inte) 273.46 206.33 T
(ger ar) 295.81 206.33 T
(guments) 318.67 206.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(new_x:INT := scale_x\05015\051;) 144 592.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Legal, the return value used) 264 592.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(scale_x\05015\051;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- ILLEGAL! Return value unused) 268.8 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 9 Q
(a := scale_x\05015\051 + 3;) 165.6 538 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POINT is) 144 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  attr x,y:INT;) 144 368.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  add_x\050x:INT\051 is) 144 359.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     self.x := self.x + x;) 144 350.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end;) 144 341.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(divide\050x,y, out dividend, out remainder:INT\051 is) 144 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Note that the \325INT\325 type specifier applies to  multiple) 158.4 177.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- arguments while the mode qualifiers apply to only one) 158.4 167.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- argument.) 158.4 157.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(dividend := x/y;) 156.6 147.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Integer division result) 281.4 147.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(remainder := x - y*\050x/y\051;) 156.6 137.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Remainder after the division.) 281.4 137.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       -- Could also use x.mod\050y\051) 249.6 127.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 117.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 385.88 129.6 336.12 2 L
V
0 Z
N
489.6 385.88 489.6 336.12 2 L
V
N
129.48 386 489.73 386 2 L
V
N
129.48 336 489.73 336 2 L
V
N
129.6 194.88 129.6 112.13 2 L
V
N
489.6 194.88 489.6 112.13 2 L
V
N
129.48 195 489.73 195 2 L
V
N
129.48 112 489.73 112 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(44) 108 710.84 T
8 8 Q
(Classes and Objects :) 231.53 710.84 T
0 F
(2.4 Routine de\336nitions) 316.74 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(The di) 108 659.33 T
(vide routine may be used as sho) 133.58 659.33 T
(wn belo) 261.09 659.33 T
(w:) 292.78 659.33 T
0.07 (Note that the) 108 578.33 P
7 F
0.08 (out) 162.37 578.33 P
5 F
0.07 (ar) 181.99 578.33 P
0.07 (gument has to be mark) 189.58 578.33 P
0.07 (ed both where the method is de\336ned \050i.e. as a mark) 280.87 578.33 P
0.07 (er of) 485.33 578.33 P
-0.37 (the formal parameter\051 and at the point of call, or the compiler will complain \050) 108 566.33 P
7 F
-0.41 (once) 411.98 566.33 P
5 F
-0.37 ( and) 433.66 566.33 P
7 F
-0.41 ( in) 450.23 566.33 P
5 F
-0.37 (ar) 462.52 566.33 P
-0.37 (guments) 470.11 566.33 P
(need not be mentioned at the point of call\051) 108 554.33 T
7 F
(inout) 108 526.33 T
4 F
(ar) 132.18 526.33 T
(guments) 141.48 526.33 T
7 9 Q
-0.07 (inout) 108 503.33 P
5 10 Q
-0.07 (ar) 129.94 503.33 P
-0.07 (guments are a combination of) 137.53 503.33 P
7 9 Q
-0.07 (in) 258.55 503.33 P
5 10 Q
-0.07 ( and) 265.55 503.33 P
7 9 Q
-0.07 (out) 284.85 503.33 P
5 10 Q
-0.07 ( ar) 297.36 503.33 P
-0.07 (guments.  The) 307.38 503.33 P
-0.07 (y tak) 364.03 503.33 P
-0.07 (e a v) 383.58 503.33 P
-0.07 (alue into the function and) 402.07 503.33 P
(return a v) 108 491.33 T
(alue out of the function.  W) 146.07 491.33 T
(e can thus write the sw) 255.53 491.33 T
(ap function compactly as:) 346.8 491.33 T
(The table belo) 108 374.33 T
(w describes the ar) 164.96 374.33 T
(gument  modes in more detail:) 236.7 374.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:INT := 15;  b:INT := 10;) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(div, rem:INT;) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- These are defined but not assigned) 297.6 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(divide\050a,b,out div, out rem\051;) 144 620.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"Divident="+div+" Remainder="+rem+"\134n";) 144 611.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- Prints out Divident=1 Remainder=5) 144 602.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(swap\050inout x, inout y:INT\051 is) 144 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(tmp:INT := x;) 178.2 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(x := y;) 178.2 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(y := tmp;) 178.2 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:INT := 5;  b:INT := 10;) 144 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- a and b have an initial value) 278.4 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(swap\050inout a,inout b\051;) 144 407.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"a="+a+" b="+b;) 144 398.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(        -- Prints a=10 b=5) 249.6 398.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 12 Q
(Mode) 112.63 343 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 298 343 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(in) 122.74 320.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (All ar) 152.62 320.33 P
-0.17 (guments are \324in\325 by def) 175.33 320.33 P
-0.17 (ault; there is no \324in\325 k) 267.88 320.33 P
-0.17 (e) 353.33 320.33 P
-0.17 (yw) 357.62 320.33 P
-0.17 (ord.  \324In\325 ar) 369.74 320.33 P
-0.17 (guments pass a cop) 415.15 320.33 P
-0.17 (y) 492.04 320.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the ar) 152.62 308.33 T
(gument from the caller to the called method.  W) 185.76 308.33 T
(ith reference types, this is a) 377.55 308.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (cop) 152.62 296.33 P
-0.25 (y of the reference to an object; the called method sees the same object as the caller) 166.96 296.33 P
-0.25 (.) 492.37 296.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(out) 119.68 276.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(An \324) 152.62 276.33 T
7 F
(out) 170.68 276.33 T
5 F
(\325 ar) 184.57 276.33 T
(gument is passed from the called method to the caller when the called) 197.99 276.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method returns.  It is a f) 152.62 264.33 T
(atal error for the called method to e) 248.35 264.33 T
(xamine the v) 389.55 264.33 T
(alue of the) 440.95 264.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324) 152.62 252.33 T
7 F
(out) 155.96 252.33 T
5 F
(\325 ar) 169.85 252.33 T
(gument before assigning to it.  The v) 183.27 252.33 T
(alue of an \324) 330.23 252.33 T
7 F
(out) 375.49 252.33 T
5 F
(\325 ar) 389.39 252.33 T
(gument may only be) 402.82 252.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(used after it has appeared on the left side of an assignment.) 152.62 240.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(inout) 115.79 220.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(An \324) 152.62 220.33 T
7 F
(inout) 170.68 220.33 T
5 F
(\325 ar) 192.35 220.33 T
(gument is passed to the called method and then back to the caller when) 205.77 220.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the method returns.  It is not passed by reference; modi\336cations by the called method) 152.62 208.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(are not observ) 152.62 196.33 T
(ed until the method returns \050v) 209.12 196.33 T
(alue-result\051.) 327.48 196.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(once) 115.79 176.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Once parameters are discussed in detail in the chapter on) 152.62 176.33 T
10 F
(Loops and Iter) 382.57 176.33 T
(ator) 441.3 176.33 T
(s on pa) 457.88 176.33 T
(g) 486.67 176.33 T
(e) 491.57 176.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (59) 152.62 164.33 P
5 F
-0.13 (.  Only iterators may ha) 162.62 164.33 P
-0.13 (v) 256.2 164.33 P
-0.13 (e \324) 261.05 164.33 P
7 F
-0.14 (once) 271.19 164.33 P
5 F
-0.13 (\325 ar) 292.87 164.33 P
-0.13 (guments.  Such ar) 306.16 164.33 P
-0.13 (guments are e) 377.25 164.33 P
-0.13 (v) 432.28 164.33 P
-0.13 (aluated e) 437.03 164.33 P
-0.13 (xactly) 472.57 164.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(once, the \336rst time the iterator is encountered in the containing loop.  \324) 152.62 152.33 T
7 F
(once) 434.54 152.33 T
5 F
(\325 ar) 456.21 152.33 T
(gu-) 469.64 152.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ments otherwise beha) 152.62 140.33 T
(v) 239.07 140.33 T
(e as \324in\325 ar) 243.93 140.33 T
(guments, and are not mark) 286.23 140.33 T
(ed at the point of call.) 392.49 140.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
129.6 479.88 129.6 393.13 2 L
V
0 Z
N
489.6 479.88 489.6 393.13 2 L
V
N
129.48 480 489.73 480 2 L
V
N
129.48 393 489.73 393 2 L
V
N
106.62 358 106.62 134 2 L
V
2 H
N
146.62 360 146.62 132 2 L
V
0.5 H
N
505.38 358 505.38 134 2 L
V
2 H
N
105.62 359 506.38 359 2 L
V
N
105.62 333 506.38 333 2 L
V
N
105.62 289 506.38 289 2 L
V
0.5 H
N
105.62 233 506.38 233 2 L
V
N
105.62 189 506.38 189 2 L
V
N
105.62 133 506.38 133 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 248.67 710.84 T
0 F
(2.4) 333.88 710.84 T
(Routine de\336nitions) 347.17 710.84 T
6 10 Q
(45) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(2.4.2   Local V) 108 658 T
(ariab) 186.66 658 T
(les - Scoping and Shado) 215.22 658 T
(wing) 354.41 658 T
5 10 Q
0.34 (Declaration Statements are used to declare the type of one or more local v) 108 635.33 P
0.34 (ariables. The scope of a) 407.95 635.33 P
0.26 (local v) 108 623.33 P
0.26 (ariable declaration be) 134.96 623.33 P
0.26 (gins at the declaration and continues to the end of the statement list in) 221.41 623.33 P
-0 (which the declaration occurs.   Local v) 108 611.33 P
-0 (ariables shado) 262.67 611.33 P
-0 (w routines \050including  the accessor routines of) 319.35 611.33 P
(attrib) 108 599.33 T
(utes\051 in the class which ha) 128.91 599.33 T
(v) 233.97 599.33 T
(e the same name and no ar) 238.82 599.33 T
(guments.) 344.72 599.33 T
-0.3 (W) 108 500.33 P
-0.3 (ithin the scope of a local v) 117.04 500.33 P
-0.3 (ariable it is ille) 220.56 500.33 P
-0.3 (g) 279.24 500.33 P
-0.3 (al to declare another local v) 284.19 500.33 P
-0.3 (ariable with the same name.) 393.26 500.33 P
4 F
(P) 108 472.33 T
(oints to note) 114.27 472.33 T
5 F
(\245) 108 456.33 T
(Local v) 121.54 456.33 T
(ariables are initialized to) 151.56 456.33 T
7 9 Q
(void) 252.65 456.33 T
5 10 Q
( when the containing method is called.) 271.93 456.33 T
(\245) 108 441.33 T
(Local v) 121.54 441.33 T
(ariables are) 151.56 441.33 T
6 F
(not re-initialized) 199.87 441.33 T
5 F
( when the declaration is encountered in the \337o) 276.79 441.33 T
(w of con-) 460.95 441.33 T
(trol.  This is particularly rele) 121.54 429.33 T
(v) 235.72 429.33 T
(ant in loop statements, which are discussed in the ne) 240.47 429.33 T
(xt chapter) 449.74 429.33 T
(.) 488.9 429.33 T
(The inte) 121.54 417.33 T
(ger) 154.44 417.33 T
7 9 Q
(\325a\325) 169.71 417.33 T
5 10 Q
( is initialized to zero when the function) 178.71 417.33 T
7 9 Q
(\325compute\325) 337.58 417.33 T
5 10 Q
( is entered.  It is not initialized) 376.09 417.33 T
(e) 121.54 405.33 T
(v) 125.73 405.33 T
(ery time through the loop.) 130.58 405.33 T
(\245) 108 309.33 T
(Note that e) 121.54 309.33 T
(xplicit initialization \050in this case) 165.27 309.33 T
7 9 Q
(\325a:=15\325) 296.66 309.33 T
5 10 Q
(\051 is performed e) 325.92 309.33 T
(v) 389.26 309.33 T
(ery time it is encountered) 394.11 309.33 T
4 12 Q
(2.4.3   Routine calls) 108 192 T
5 10 Q
0.13 (The most common e) 108 169.33 P
0.13 (xpressions in Sather programs are method calls) 190.17 169.33 P
5 8 Q
0.1 (4) 379.79 173.33 P
5 10 Q
0.13 (.   A routine call usually tak) 383.79 169.33 P
0.13 (es) 495.67 169.33 P
0.27 (the form of a \325) 108 157.33 P
0.27 (dotted\325 e) 166.34 157.33 P
0.27 (xpression such as) 201.73 157.33 P
7 9 Q
0.27 (a.foo\050b\051.) 275.03 157.33 P
5 10 Q
0.27 (The object on which the routine is being called) 314.09 157.33 P
108 129 504 149.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 140.09 240.98 140.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
-0.19 (4.  W) 108 123.67 P
-0.19 (e use the term \325method\325 her) 124.89 123.67 P
-0.19 (e to indicate that the same description is applicable to both iterators, which have) 220.96 123.67 P
(not yet been intr) 108 114.67 T
(oduced,  and r) 165.87 114.67 T
(outines.) 216.78 114.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(... in the POINT class ...) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(swap_x_y is) 144 569.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(temp:INT;) 178.2 560.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(temp := x;) 178.2 551.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(x := y;) 178.2 542.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(y := temp;) 178.2 533.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 524.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(compute is) 144 385.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   loop 3.times!;) 144 376.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     a:INT;) 144 367.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     a := a + 3;) 144 358.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     #OUT+a+"\134n";) 144 349.67 T
11 F
(-- Prints out successively 3, 6, 9) 230.4 349.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   end;) 144 340.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 331.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(compute is) 144 289.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   loop 3.times!;) 144 280.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     a:INT := 15) 144 271.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     a := a + 3;) 144 262.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     #OUT+a+"\134n";) 144 253.67 T
11 F
(-- Prints out successively 18, 18, 18) 230.4 253.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   end;) 144 244.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 235.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 587.88 129.6 519.12 2 L
V
0.25 H
0 Z
N
489.6 587.88 489.6 519.12 2 L
V
N
129.48 588 489.73 588 2 L
V
N
129.48 519 489.73 519 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(46) 108 710.84 T
8 8 Q
(Classes and Objects :) 231.53 710.84 T
0 F
(2.4 Routine de\336nitions) 316.74 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.24 (\050) 108 659.33 P
7 9 Q
0.25 (\325a\325) 111.33 659.33 P
5 10 Q
0.24 ( in this e) 120.33 659.33 P
0.24 (xample\051 is determined by what precedes the dot.  If no object name precedes the \325) 155.08 659.33 P
0.24 (dot\325,) 485.39 659.33 P
-0.32 (the) 108 647.33 P
7 9 Q
-0.32 (self) 122.4 647.33 P
5 10 Q
-0.32 ( object i.e. the current object, is assumed. W) 136.4 647.33 P
-0.32 (e use the follo) 310.19 647.33 P
-0.32 (wing de\336nition of the POINT class) 365.35 647.33 P
(to  illustrate dif) 108 635.33 T
(ferent kinds of routine calls) 169.14 635.33 T
2 F
(\245) 108 411.33 T
( If nothing pr) 121.54 411.33 T
(ecedes the method name, then the form is syntactic sugar for a call on) 180.17 411.33 T
7 F
(self) 121.54 399.33 T
2 F
(  If the method name is pr) 137.1 399.33 T
(eceded by an expr) 250.81 399.33 T
(ession and a dot \324) 330.98 399.33 T
7 F
(.) 407.98 399.33 T
2 F
(\325, then the method is) 410.76 399.33 T
(called on the object r) 121.54 387.33 T
(eturned by the expr) 212.44 387.33 T
(ession. In the following example,  pair \0503,7\051 is) 299.38 387.33 T
(\336rst added to) 121.54 375.33 T
7 9 Q
(p1) 183.38 375.33 T
2 10 Q
( and the pair \0504,9\051 is  added to that r) 193.38 375.33 T
(esult. Note that the intermediate) 351.31 375.33 T
(point that is cr) 121.54 363.33 T
(eated after the \336rst 3,7 is added is not accessible fr) 185.2 363.33 T
(om any variable and) 405.7 363.33 T
(will be garbage collected.) 121.54 351.33 T
5 F
(\245) 108 300.33 T
( If the method name  is preceded by a type speci\336er and a double colon \324) 121.54 300.33 T
7 F
(::) 412.03 300.33 T
5 F
(\325 it is presumed to) 417.59 300.33 T
(be a call on a) 121.54 288.33 T
7 F
(void) 176.8 288.33 T
5 F
( object of the speci\336ed class \050) 195.14 288.33 T
7 9 Q
(POINT) 313.45 288.33 T
5 10 Q
(in the case belo) 343.45 288.33 T
(w\051) 405.13 288.33 T
(This w) 121.54 246.33 T
(orks for the) 148.94 246.33 T
7 9 Q
(create) 197.54 246.33 T
5 10 Q
( routine, since it creates a ne) 222.55 246.33 T
(w object,) 335.88 246.33 T
7 9 Q
(res,) 375.04 246.33 T
5 10 Q
(and then mak) 392.54 246.33 T
(es use of it.) 446.32 246.33 T
(Ho) 121.54 234.33 T
(we) 133.51 234.33 T
(v) 144.92 234.33 T
(er) 149.77 234.33 T
(, this will not w) 157.14 234.33 T
(ork for a call on, say) 219.55 234.33 T
(,) 301.1 234.33 T
7 9 Q
(add) 306.1 234.33 T
5 10 Q
(Since) 121.54 192.33 T
7 9 Q
(xsum := x + xval;) 146.26 192.33 T
5 10 Q
( is actually equi) 213.78 192.33 T
(v) 276.58 192.33 T
(alent to saying) 281.33 192.33 T
7 9 Q
(xsum := self.x + xval;) 342.16 192.33 T
5 10 Q
( the routine access-) 426.2 192.33 T
(es) 121.54 180.33 T
7 9 Q
(self) 132.37 180.33 T
5 10 Q
(,  which is v) 146.37 180.33 T
(oid and cannot be accessed.) 194.78 180.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POINT is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  attr x,y:INT;) 144 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  create\050x,y:INT\051:POINT is) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:POINT := new; res.x := x;  res.y := y;  return res;) 190.8 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  add\050xval,yval:INT\051:POINT is) 144 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     xsum:INT := x + xval;) 144 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     ysum:INT := y+yval;) 144 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     res:POINT := #POINT\050xsum, ysum\051;) 144 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     return res;) 144 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(offset_by\050val:INT\051:POINT is) 178.2 480.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return add\050val,val\051;) 190.8 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
-1.65 (-- short for \325return self.add\050val,val\051;\325) 301.2 471.67 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   end;) 144 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p1:POINT := #POINT\0503,5\051;) 144 331.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p2:POINT := p1.add\0503,7\051.add\0504,9\051;) 144 322.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:POINT := POINT::create\0503,5\051;) 144 268.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:POINT := POINT::add\0504,7\051;) 144 214.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Runtime Error!) 288 214.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 448.13 2 L
V
0 Z
N
489.6 623.88 489.6 448.13 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 448 489.73 448 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 241.14 710.84 T
0 F
(2.5) 326.35 710.84 T
(Conditional Execution) 339.64 710.84 T
6 10 Q
(47) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(2.4.4   Simple Overloading - Selecting a r) 108 658 T
(outine to call) 339.19 658 T
5 10 Q
-0.42 (Sather supports routine) 108 635.33 P
1 F
-0.42 (overloading) 204.09 635.33 P
5 F
-0.42 (.     W) 251.31 635.33 P
-0.42 (e will present a simpli\336ed  v) 272.85 635.33 P
-0.42 (ersion of the o) 383.51 635.33 P
-0.42 (v) 439.59 635.33 P
-0.42 (erloading here,) 444.44 635.33 P
-0.23 (as it applies to the simple reference classes we ha) 108 623.33 P
-0.23 (v) 303.2 623.33 P
-0.23 (e discussed.  The full o) 308.05 623.33 P
-0.23 (v) 398.97 623.33 P
-0.23 (erloading rule will be de-) 403.82 623.33 P
(scribed in more detail in the  section on) 108 611.33 T
10 F
(The Overloading Rule on pa) 268.26 611.33 T
(g) 382.04 611.33 T
(e 91) 386.94 611.33 T
5 F
(.) 403.88 611.33 T
-0.23 (T) 108 589.33 P
-0.23 (w) 113.31 589.33 P
-0.23 (o routines in a class may ha) 120.43 589.33 P
-0.23 (v) 229.39 589.33 P
-0.23 (e the same name pro) 234.24 589.33 P
-0.23 (vided the) 315.36 589.33 P
-0.23 (y dif) 351.92 589.33 P
-0.23 (fer in at least one of the follo) 370.05 589.33 P
-0.23 (wing) 484 589.33 P
(aspect:) 108 577.33 T
(\245) 108 559.33 T
(the number of ar) 121.54 559.33 T
(guments) 187.73 559.33 T
(\245) 108 544.33 T
(the presence or absence of a return v) 121.54 544.33 T
(alue) 267.62 544.33 T
(\245) 108 529.33 T
(the type of one of the ar) 121.54 529.33 T
(guments \050pro) 216.89 529.33 T
(vided the types are not abstract\051.) 269.79 529.33 T
(Here are some e) 108 507.33 T
(xamples of  properly o) 172.54 507.33 T
(v) 262.93 507.33 T
(erloaded routines.) 267.78 507.33 T
-0.01 (All of the abo) 108 445.33 P
-0.01 (v) 163.08 445.33 P
-0.01 (e routines could co-e) 167.93 445.33 P
-0.01 (xist in a single class interf) 251.34 445.33 P
-0.01 (ace.  The right one w) 355.33 445.33 P
-0.01 (ould be selected) 439.59 445.33 P
(at the point of call.   The follo) 108 433.33 T
(wing tw) 227.46 433.33 T
(o routines, ho) 259.86 433.33 T
(we) 314.33 433.33 T
(v) 325.74 433.33 T
(er cannot co-e) 330.59 433.33 T
(xist in the same interf) 387.08 433.33 T
(ace) 473.64 433.33 T
108 330.98 504 334 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 332.49 540 332.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.5  Conditional Ex) 108 340 T
(ecution) 268.87 340 T
2 10 Q
2.14 (Sather supports the standar) 108 311.31 P
2.14 (d constr) 236.25 311.31 P
2.14 (ucts for conditional execution - if statements and) 274.08 311.31 P
(multi-way case statements) 108 299.31 T
4 12 Q
(2.5.1) 108 257.98 T
7 F
(if) 144.7 257.98 T
4 F
( statements) 150.7 257.98 T
1 10 Q
0.57 (if statements) 108 235.31 P
5 F
0.57 ( are used to conditionally e) 159.96 235.31 P
0.57 (x) 270.7 235.31 P
0.57 (ecute statement lists according to the v) 275.55 235.31 P
0.57 (alue of a boolean) 433.7 235.31 P
-0.42 (e) 108 223.31 P
-0.42 (xpression. In this form, the) 112.29 223.31 P
7 F
-0.47 ( if) 218.39 223.31 P
5 F
-0.42 ( k) 225.7 223.31 P
-0.42 (e) 232.68 223.31 P
-0.42 (yw) 236.97 223.31 P
-0.42 (ord is follo) 249.09 223.31 P
-0.42 (wed by a boolean e) 291.89 223.31 P
-0.42 (xpression, the k) 367.27 223.31 P
-0.42 (e) 429.39 223.31 P
-0.42 (yw) 433.67 223.31 P
-0.42 (ord) 445.8 223.31 P
7 F
-0.47 (then) 461.21 223.31 P
5 F
-0.42 (, a list) 480.67 223.31 P
-0.16 (of statements and the \336nal k) 108 211.31 P
-0.16 (e) 219.62 211.31 P
-0.16 (yw) 223.91 211.31 P
-0.16 (ord) 236.03 211.31 P
7 F
-0.17 (end) 251.7 211.31 P
5 F
-0.16 (. When the statement is e) 268.38 211.31 P
-0.16 (x) 368 211.31 P
-0.16 (ecuted, the boolean e) 372.85 211.31 P
-0.16 (xpression is) 456.65 211.31 P
-0.04 (e) 108 199.31 P
-0.04 (v) 112.19 199.31 P
-0.04 (aluated and if the result is) 116.94 199.31 P
7 F
-0.04 (true) 222.26 199.31 P
5 F
-0.04 (the statements in the statement list are e) 242.23 199.31 P
-0.04 (x) 400.97 199.31 P
-0.04 (ecuted. If it is) 405.82 199.31 P
7 F
-0.04 (false) 463.16 199.31 P
5 F
-0.04 (,then) 484.28 199.31 P
(control passes directly to the end of the) 108 187.31 T
7 F
(if) 267.42 187.31 T
5 F
( statement.) 272.42 187.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(foo\050a:INT, b:INT\051;) 144 487.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050a:INT\051;) 144 478.67 T
11 F
( -- Different number of arguments) 273.6 478.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:INT,b:INT\051:INT;) 144 469.67 T
11 F
(-- Has a return value) 278.4 469.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:INT,b:INT\051:INT;) 144 413.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- foo\050a:INT,b:INT\051:BOOL) 144 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- differs only in return type, cannot overload \325foo\325) 144 394.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(i:INT :=-15) 144 167.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if i < 0 then i:=-i end) 144 158.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + i;) 144 149.64 T
11 F
(                -- Prints out 15) 196.8 149.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(j:INT :=15) 144 140.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if j < 0 then j:=-j end) 144 131.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + j;) 144 122.64 T
11 F
(-- Prints out 15) 273.6 122.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 175.85 129.6 117.1 2 L
V
0.25 H
0 Z
N
489.6 175.85 489.6 117.1 2 L
V
N
129.48 175.98 489.73 175.98 2 L
V
N
129.48 116.98 489.73 116.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(48) 108 710.84 T
8 8 Q
(Classes and Objects :) 224 710.84 T
0 F
(2.5 Conditional Execution) 309.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.31 (It often happens that one wishes to perform a sequence of tests, e) 108 659.33 P
-0.31 (x) 364.3 659.33 P
-0.31 (ecuting only the statements which) 369.15 659.33 P
0.49 (correspond to the \336rst test in the sequence which e) 108 647.33 P
0.49 (v) 314.08 647.33 P
0.49 (aluates to) 318.83 647.33 P
7 F
0.55 (true) 360.36 647.33 P
5 F
0.49 (. F) 377.59 647.33 P
0.49 (or e) 388.49 647.33 P
0.49 (xample, we may w) 404.1 647.33 P
0.49 (ant to) 481.01 647.33 P
0.82 (produce a inte) 108 635.33 P
0.82 (ger v) 166.15 635.33 P
0.82 (alue) 186.99 635.33 P
7 9 Q
0.82 (\325y\325) 206.97 635.33 P
5 10 Q
0.82 ( from an inte) 215.47 635.33 P
0.82 (ger v) 269.17 635.33 P
0.82 (alue) 290.01 635.33 P
7 9 Q
0.82 (\325x\325) 309.99 635.33 P
5 10 Q
0.82 ( which has the shape of a triangular b) 318.49 635.33 P
0.82 (ump. It) 474.29 635.33 P
0.04 (should be zero when) 108 623.33 P
7 9 Q
0.04 (\325x<0\325) 193.15 623.33 P
5 10 Q
0.04 (, equal to) 211.9 623.33 P
7 9 Q
0.04 (\325x\325) 251.47 623.33 P
5 10 Q
0.04 (when) 262.51 623.33 P
7 9 Q
0.04 (\3250<=x<100\325) 286.71 623.33 P
5 10 Q
0.04 (, equal to) 330.99 623.33 P
7 9 Q
0.04 (\325200-x\325) 370.56 623.33 P
5 10 Q
0.04 ( when \325) 397.07 623.33 P
7 9 Q
0.04 (100 <= x<200\325) 427.14 623.33 P
5 10 Q
0.04 (, and) 484.52 623.33 P
(equal to) 108 611.33 T
7 9 Q
(\3250\325) 142.44 611.33 T
5 10 Q
( when) 151.44 611.33 T
7 9 Q
(\325x>=200\325) 178.1 611.33 T
5 10 Q
(. This can be accomplished with a nested series of) 212.12 611.33 T
7 F
(if) 414.58 611.33 T
5 F
( statements:) 419.58 611.33 T
0.05 (Because this kind of construct is so common and the deeply nested) 108 513.33 P
7 F
0.05 (if) 378.55 513.33 P
5 F
0.05 ( statements can get confusing,) 383.55 513.33 P
0.37 (Sather pro) 108 501.33 P
0.37 (vides a special form for it. A series of) 149.6 501.33 P
7 F
0.41 (elsif) 306.2 501.33 P
5 F
0.37 (clauses may appear after the statements fol-) 326.85 501.33 P
(lo) 108 489.33 T
(wing the) 115.53 489.33 T
7 F
( then) 150.25 489.33 T
5 F
(k) 178.05 489.33 T
(e) 182.95 489.33 T
(yw) 187.24 489.33 T
(ord:) 199.36 489.33 T
0.09 (There may be an arbitrary number of such) 108 418.33 P
7 F
0.1 (elsif) 279.76 418.33 P
5 F
0.09 ( clauses. Each is e) 300.42 418.33 P
0.09 (v) 372.99 418.33 P
0.09 (aluated in turn until one returns) 377.74 418.33 P
0.29 (true. The statement list follo) 108 406.33 P
0.29 (wing this clause is e) 221.94 406.33 P
0.29 (v) 303.39 406.33 P
0.29 (aluated and the statement \336nishes. If none of the) 308.14 406.33 P
(e) 108 394.33 T
(xpressions is true, the statements follo) 112.29 394.33 T
(wing the \336nal) 264.81 394.33 T
7 F
(else) 322.31 394.33 T
5 F
( clause are e) 340.65 394.33 T
(v) 389.54 394.33 T
(aluated.) 394.29 394.33 T
4 12 Q
(2.5.2) 108 353 T
7 F
(case) 144.7 353 T
4 F
( statements) 170.04 353 T
5 10 Q
1.27 (Multi-w) 108 330.33 P
1.27 (ay branches are implemented by) 140.68 330.33 P
1 F
1.27 (case statements) 278.96 330.33 P
5 F
1.27 (. There may be an arbitrary number of) 342.35 330.33 P
7 F
-0.22 (when) 108 318.33 P
5 F
-0.2 (clauses and an optional) 134.46 318.33 P
7 F
-0.22 (else) 229.21 318.33 P
5 F
-0.2 (clause. The initial construct is e) 249.85 318.33 P
-0.2 (v) 375.27 318.33 P
-0.2 (aluated \336rst and may ha) 380.02 318.33 P
-0.2 (v) 474.57 318.33 P
-0.2 (e a re-) 479.42 318.33 P
(turn v) 108 306.33 T
(alue of an) 131.36 306.33 T
(y type.) 170.64 306.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
( if x < 0 then y:=0) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( else) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   if x < 100 then y := x) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   else) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     if x < 200 then y := 200 - x else y := 0 end;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end;) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if x < 0 then y := 0) 144 469.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(elsif x < 100 then y := x) 144 460.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(elsif x < 200 then y := 200 - x) 144 451.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else y := 0 end) 144 442.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i:INT := 7;) 144 286.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(switch i) 144 277.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when 1,2,3 then j := 3) 144 268.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when 4,5,6 then j := 4) 144 259.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when 7,8,9 then j := 5) 144 250.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else j := 10 end) 144 241.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+j;) 144 232.67 T
11 F
(-- Prints out 5) 230.4 232.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 599.88 129.6 532.12 2 L
V
0 Z
N
489.6 599.88 489.6 532.12 2 L
V
N
129.48 600 489.73 600 2 L
V
N
129.48 532 489.73 532 2 L
V
N
129.6 477.88 129.6 437.12 2 L
V
N
489.6 477.88 489.6 437.12 2 L
V
N
129.48 478 489.73 478 2 L
V
N
129.48 437 489.73 437 2 L
V
N
129.6 294.88 129.6 227.13 2 L
V
N
489.6 294.88 489.6 227.13 2 L
V
N
129.48 295 489.73 295 2 L
V
N
129.48 227 489.73 227 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 241.14 710.84 T
0 F
(2.5) 326.35 710.84 T
(Conditional Execution) 339.64 710.84 T
6 10 Q
(49) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.09 (This type must de\336ne one or more routines named) 108 659.33 P
7 9 Q
0.09 (\324is_eq\325) 312.42 659.33 P
5 10 Q
0.09 ( with a single ar) 337.92 659.33 P
0.09 (gument and a boolean re-) 401.99 659.33 P
(turn v) 108 647.33 T
(alue.) 131.36 647.33 T
(Points can then be used in a case statement as sho) 108 477.33 T
(wn belo) 306.61 477.33 T
(w) 338.3 477.33 T
0.26 (Note that the equal sign is really short hand for the routine) 108 343.33 P
7 9 Q
0.26 (is_eq.) 347.25 343.33 P
5 10 Q
0.26 (The case statement is equi) 374.02 343.33 P
0.26 (v) 479.81 343.33 P
0.26 (alent) 484.56 343.33 P
(to an) 108 331.33 T
7 F
(if) 130.22 331.33 T
5 F
( statement, each of whose branches tests a call of) 135.22 331.33 T
7 9 Q
( is_eq) 331.28 331.33 T
5 10 Q
(. Thus the abo) 355.29 331.33 T
(v) 411.8 331.33 T
(e case is equv) 416.65 331.33 T
(alent to) 471.66 331.33 T
0.42 (The e) 108 242.33 P
0.42 (xpressions tested in the branches of the) 130.76 242.33 P
7 9 Q
0.42 (if) 292.83 242.33 P
5 10 Q
0.42 (statement are the  e) 300.26 242.33 P
0.42 (xpressions of successi) 378.98 242.33 P
0.42 (v) 467.89 242.33 P
0.42 (e) 472.74 242.33 P
7 F
0.47 (when) 480.1 242.33 P
5 F
-0.54 (lists. The \336rst one of these calls to returns) 108 230.33 P
7 F
-0.6 (true) 272.55 230.33 P
5 F
-0.54 ( causes the corresponding statement list to be e) 289.78 230.33 P
-0.54 (x) 473.05 230.33 P
-0.54 (ecuted) 477.9 230.33 P
0.06 (and control passed to the statement follo) 108 218.33 P
0.06 (wing the) 269.75 218.33 P
7 F
0.06 (case) 307.08 218.33 P
5 F
0.06 ( statement. If none of the) 328.2 218.33 P
7 F
0.06 (when) 431.03 218.33 P
5 F
0.06 ( e) 454.93 218.33 P
0.06 (xpressions) 461.78 218.33 P
(matches and an) 108 206.33 T
7 F
(else) 172.15 206.33 T
5 F
( clause is present, then the statement list follo) 190.49 206.33 T
(wing the) 372.17 206.33 T
7 F
(else) 409.39 206.33 T
5 F
(clause is e) 430.51 206.33 T
(x) 471.46 206.33 T
(ecuted) 476.31 206.33 T
0.19 (There is one dif) 108 184.33 P
0.19 (ference between the) 171.35 184.33 P
7 F
0.21 ( case) 251.69 184.33 P
5 F
0.19 (statement and the equi) 278.49 184.33 P
0.19 (v) 368.51 184.33 P
0.19 (alent) 373.26 184.33 P
7 F
0.21 (if) 395.39 184.33 P
5 F
0.19 ( statement.  If none of the) 400.39 184.33 P
0.17 (branches of an) 108 172.33 P
7 F
0.19 (if) 169.32 172.33 P
5 F
0.17 ( statement match and no) 174.32 172.33 P
7 F
0.19 (else) 274.89 172.33 P
5 F
0.17 ( clause is present, then e) 293.23 172.33 P
0.17 (x) 391.14 172.33 P
0.17 (ecution just continues onto) 395.99 172.33 P
0.57 (the ne) 108 160.33 P
0.57 (xt statement after the) 132.59 160.33 P
7 F
0.64 (if) 221.53 160.33 P
5 F
0.57 (statement.  Ho) 229.61 160.33 P
0.57 (we) 288.56 160.33 P
0.57 (v) 299.97 160.33 P
0.57 (er) 304.82 160.33 P
0.57 (, if none of the branches of the) 312.19 160.33 P
7 F
0.64 (case) 441.48 160.33 P
5 F
0.57 ( statement) 462.6 160.33 P
(matches and there is no) 108 148.34 T
7 F
(else) 204.37 148.34 T
5 F
(clause, then a f) 225.21 148.34 T
(atal run-time error will result.) 285.09 148.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POINT is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr x,y:INT;) 178.2 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050x,y:INT\051:POINT is) 178.2 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:POINT := new;  res.x := x; res.y := y; return res;) 190.8 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is_eq\050point2:POINT\051:BOOL is) 178.2 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- In Sather,= is short hand for a call on \325is_eq\325) 168 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  return x = point2.x and y = point2.y;) 178.2 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(str:STR is return "X="+x+" Y="+y;  end) 178.2 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p:POINT := #POINT\0503,4\051;) 144 457.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(zero_point:POINT := #POINT\0500,0\051;) 144 448.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(case p) 144 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when zero_point then) 144 421.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT+"Zero point\134n";) 144 412.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when #POINT\0501,1\051, #POINT\0501,-1\051,#POINT\050-1,-1\051, #POINT\050-1,1\051 then) 144 403.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"Unit point:"+p.str+"\134n":) 190.8 394.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else) 144 385.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   #OUT+" Some other point\134n") 178.2 376.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 367.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if p = zero_point then #OUT+ "Zero point\134n";) 144 311.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(elsif p = #POINT\0501,1\051 or p = #POINT\0501,-1\051 or ... etc. then) 144 302.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+ "Unit point:"+p.str+"\134n";) 178.2 293.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else) 144 284.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+" Some other point\134n";) 178.2 275.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 266.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 496.12 2 L
V
0 Z
N
489.6 635.88 489.6 496.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 496 489.73 496 2 L
V
N
129.6 465.88 129.6 362.13 2 L
V
N
489.6 465.88 489.6 362.13 2 L
V
N
129.48 466 489.73 466 2 L
V
N
129.48 362 489.73 362 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(50) 108 710.84 T
8 8 Q
(Classes and Objects :) 224 710.84 T
0 F
(2.5 Conditional Execution) 309.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(P) 108 659.33 T
(oints to note) 114.27 659.33 T
5 F
(\245) 108 643.33 T
(It is a f) 121.54 643.33 T
(atal error if no branch matches and there is no) 149.49 643.33 T
7 F
(else) 335.55 643.33 T
5 F
( clause for) 353.89 643.33 T
7 F
(case) 398.04 643.33 T
5 F
( statements b) 419.16 643.33 T
(ut not) 471.18 643.33 T
(for) 121.54 631.33 T
7 F
(if) 135.7 631.33 T
5 F
( statements.) 140.7 631.33 T
4 12 Q
(2.5.3) 108 590 T
(Shor) 144.7 590 T
(t cir) 172.27 590 T
(cuit boolean e) 194.04 590 T
(xpressions:) 274.55 590 T
7 F
(and) 345.24 590 T
4 F
( and) 365.26 590 T
7 F
(or) 393.26 590 T
1 10 Q
-0.48 (and expressions) 108 567.33 P
5 F
-0.48 ( compute the conjunction of tw) 171.14 567.33 P
-0.48 (o boolean e) 293.35 567.33 P
-0.48 (xpressions and return boolean v) 338.35 567.33 P
-0.48 (alues. The) 463.38 567.33 P
0.25 (\336rst e) 108 555.33 P
0.25 (xpression is e) 130.6 555.33 P
0.25 (v) 185.28 555.33 P
0.25 (aluated and if) 190.03 555.33 P
7 9 Q
0.25 (false) 247.69 555.33 P
5 10 Q
0.25 (,) 266.7 555.33 P
7 9 Q
0.25 (false) 271.95 555.33 P
5 10 Q
0.25 ( is immediately returned as the result. Otherwise, the) 290.95 555.33 P
-0.27 (second e) 108 543.33 P
-0.27 (xpression is e) 142.29 543.33 P
-0.27 (v) 195.94 543.33 P
-0.27 (aluated and its v) 200.69 543.33 P
-0.27 (alue returned.) 264.9 543.33 P
1 F
-0.27 (or expressions) 321.83 543.33 P
5 F
-0.27 ( compute the disjunction of tw) 378.51 543.33 P
-0.27 (o) 499 543.33 P
0.01 (boolean e) 108 531.33 P
0.01 (xpressions and return boolean v) 146.46 531.33 P
0.01 (alues. The \336rst e) 273.45 531.33 P
0.01 (xpression is e) 339.43 531.33 P
0.01 (v) 393.64 531.33 P
0.01 (aluated and if) 398.39 531.33 P
7 F
0.01 (true) 455.35 531.33 P
5 F
0.01 (,) 472.58 531.33 P
7 F
0.01 (true) 477.59 531.33 P
5 F
0.01 ( is) 494.82 531.33 P
0.38 (immediately returned as the result. Otherwise, the second e) 108 519.33 P
0.38 (xpression is e) 347.5 519.33 P
0.38 (v) 402.45 519.33 P
0.38 (aluated and its v) 407.2 519.33 P
0.38 (alue re-) 473.36 519.33 P
(turned.) 108 507.33 T
(Consider the code) 108 485.33 T
0.22 (The abo) 108 432.33 P
0.22 (v) 140.56 432.33 P
0.22 (e block of code will w) 145.41 432.33 P
0.22 (ork if) 235.54 432.33 P
7 9 Q
0.22 (p) 260.42 432.33 P
5 10 Q
0.22 (is not v) 268.14 432.33 P
0.22 (oid. If it is v) 297.82 432.33 P
0.22 (oid, ho) 347.66 432.33 P
0.22 (we) 375.41 432.33 P
0.22 (v) 386.82 432.33 P
0.22 (er) 391.67 432.33 P
0.22 (, the test) 399.04 432.33 P
7 9 Q
0.22 (p.x >3) 435.8 432.33 P
5 10 Q
0.22 ( will result) 460.79 432.33 P
-0.27 (in a runtime error) 108 420.33 P
-0.27 (, since it is attempting to dot into a v) 177.06 420.33 P
-0.27 (oid reference type.  W) 320.59 420.33 P
-0.27 (e can catch this problem) 407.86 420.33 P
(by using the follo) 108 408.33 T
(wing piece of code, and the semantics of the short-circuit and) 178.03 408.33 T
-0.31 (The abo) 108 337.33 P
-0.31 (v) 140.03 337.33 P
-0.31 (e piece of code will not generate an error) 144.88 337.33 P
-0.31 (, e) 305.8 337.33 P
-0.31 (v) 314.68 337.33 P
-0.31 (en if) 319.53 337.33 P
7 9 Q
-0.31 (p) 339.45 337.33 P
5 10 Q
-0.31 ( is v) 344.45 337.33 P
-0.31 (oid.  The \336rst part of the and e) 360.3 337.33 P
-0.31 (xpres-) 479.01 337.33 P
-0.23 (sion tests for whether) 108 325.33 P
7 9 Q
-0.23 (p) 195.39 325.33 P
5 10 Q
-0.23 ( is v) 200.39 325.33 P
-0.23 (oid.  If it is v) 216.4 325.33 P
-0.23 (oid, then the v) 266.71 325.33 P
-0.23 (oid test returns true and the) 323.03 325.33 P
7 F
-0.26 (not) 433.29 325.33 P
5 F
-0.23 ( turns this into) 447.19 325.33 P
(a f) 108 313.33 T
(alse.  The) 118.17 313.33 T
7 F
(and) 159.27 313.33 T
5 F
( therefore f) 175.95 313.33 T
(ails before trying to e) 220.27 313.33 T
(v) 305.56 313.33 T
(aluate the dotted e) 310.31 313.33 T
(xpression) 383.2 313.33 T
7 9 Q
(p.x) 424.03 313.33 T
5 10 Q
(.) 436.04 313.33 T
0.33 (A similar beha) 108 291.33 P
0.33 (vior can be seen with the short-circuit) 167.35 291.33 P
7 F
0.37 (or) 323.26 291.33 P
5 F
0.33 (statement, where the second e) 335.3 291.33 P
0.33 (xpression is) 456.17 291.33 P
(not e) 108 279.33 T
(xamine if the \336rst e) 127.57 279.33 T
(xpression e) 205.19 279.33 T
(v) 250.21 279.33 T
(aluates to true) 254.96 279.33 T
(\245) 108 201.33 T
(Note that booleans also de\336ne an) 121.54 201.33 T
7 9 Q
(and_rout) 256.52 201.33 T
5 10 Q
(routine, which does not ha) 294.54 201.33 T
(v) 400.16 201.33 T
(e the same short-circuit) 405.01 201.33 T
(beha) 121.54 189.33 T
(vior:) 140.22 189.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(p:POINT;) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if p.x > 3 then  #OUT+p.x; end;) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Runtime error if p is void) 297.6 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(if  ~void\050p\051 and p.x > 3 then) 144 388.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The ~ symbol indicates logical negation) 178.2 379.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+p.x;) 178.2 370.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 361.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:INT := 15;) 144 259.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p:POINT;) 144 250.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if a>10 or p.x < 10 then) 144 241.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Since a>10 is true, the second expression is not evaluated) 158.4 232.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(if ~void\050p\051.and_rout\050p.x > 3\051 then) 144 169.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- May generate a run-time error, when \325p\325 is void) 144 160.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- The argument to the \325and_rout\325 routine \050p.x\051 is evaluated) 144 150.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- even when the first condition, ~void\050p\051 fails.) 144 140.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Hence, if \325p\325 is void, p.x is still evaluated and generates a) 144 130.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- run-time error \050attribute access of void\051) 144 120.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 230.77 710.84 T
0 F
(2.6) 315.98 710.84 T
(Attr) 329.27 710.84 T
(ibute Accessor Routines) 343.18 710.84 T
6 10 Q
(51) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.6  Attrib) 108 654 T
(ute Accessor Routines) 190.66 654 T
5 10 Q
-0.09 (The distinction between data and beha) 108 625.31 P
-0.09 (vior is not as strong as has been described abo) 260.92 625.31 P
-0.09 (v) 444.63 625.31 P
-0.09 (e. In f) 449.48 625.31 P
-0.09 (act, it is) 472.79 625.31 P
-0.08 (possible to implement a feature such that outside the class it is impossible to tell whether it is a fea-) 108 613.31 P
(ture or a pair of functions This section describes ho) 108 601.31 T
(w this le) 312.99 601.31 T
(v) 346.63 601.31 T
(el of uniformity is achie) 351.48 601.31 T
(v) 447.33 601.31 T
(ed.) 452.18 601.31 T
-0.05 (Each attrib) 108 579.31 P
-0.05 (ute  de\336nition adds a \336eld to the object\325) 151.35 579.31 P
-0.05 (s state  and  causes the de\336nition of a reader rou-) 309.3 579.31 P
0.2 (tine and a writer routine, both  with the same name. The reader routine tak) 108 567.31 P
0.2 (es no ar) 407.85 567.31 P
0.2 (guments and re-) 439.17 567.31 P
0.01 (turns the v) 108 555.31 P
0.01 (alue of the attrib) 150 555.31 P
0.01 (ute. Its return type is the attrib) 215.66 555.31 P
0.01 (ute\325) 336.37 555.31 P
0.01 (s type. The reader routine  is pri) 351.37 555.31 P
0.01 (v) 478.97 555.31 P
0.01 (ate if) 483.72 555.31 P
0.31 (the attrib) 108 543.31 P
0.31 (ute is declared \324) 143.95 543.31 P
7 F
0.35 (private) 208.48 543.31 P
5 F
0.31 (\325. The writer routine sets the v) 238.49 543.31 P
0.31 (alue of the attrib) 360.94 543.31 P
0.31 (ute, taking a single) 427.51 543.31 P
-0.06 (ar) 108 531.31 P
-0.06 (gument whose type is the attrib) 115.59 531.31 P
-0.06 (ute\325) 240.34 531.31 P
-0.06 (s type, and has no return v) 255.34 531.31 P
-0.06 (alue. The writer routine  is pri) 359.97 531.31 P
-0.06 (v) 479.04 531.31 P
-0.06 (ate if) 483.79 531.31 P
(the attrib) 108 519.31 T
(ute is declared either) 143.63 519.31 T
7 F
(private) 229.16 519.31 T
5 F
( or) 259.17 519.31 T
7 F
(readonly) 272.5 519.31 T
5 F
(.) 310.2 519.31 T
-0.49 (Thus,  the le) 108 372.31 P
-0.49 (v) 155.74 372.31 P
-0.49 (els of pri) 160.59 372.31 P
-0.49 (v) 194.91 372.31 P
-0.49 (ac) 199.66 372.31 P
-0.49 (y are de\336ned by whether the reader and writer routines are public or pri) 208.4 372.31 P
-0.49 (v) 487.59 372.31 P
-0.49 (ate) 492.34 372.31 P
-0.05 (The same holds true for shared attrib) 108 301.31 P
-0.05 (ubtes.  Each shared  de\336nition causes the de\336nition of a reader) 254.66 301.31 P
0.23 (routine and a writer routine, both  with the same name. The reader routine tak) 108 289.31 P
0.23 (es no ar) 421.57 289.31 P
0.23 (guments and) 452.94 289.31 P
(returns the v) 108 277.31 T
(alue of the shared. Its return type is the shared\325) 157.74 277.31 T
(s type.) 344.92 277.31 T
0.15 (Constants do not de\336ne a writer routine.  Each constant  de\336nition causes the implicit de\336nition of) 108 152.31 P
-0.1 (a reader routine with the same name. It tak) 108 140.31 P
-0.1 (es no ar) 277.92 140.31 P
-0.1 (guments and returns the v) 308.65 140.31 P
-0.1 (alue of the constant. Its) 411.34 140.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class INTERVAL is) 144 499.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr start:FLT;) 156.6 490.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Defines the public reader start:FLT) 252.6 490.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(                    -- and the public writer     start\050FLT\051) 158.4 480.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(attr finish; INT;) 178.2 470.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050st,fin:INT\051:SAME is) 178.2 452.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Create a new interval) 190.8 443.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:SAME := new;) 190.8 434.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.start\050st\051;) 171 425.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(   -- Equivalent to res.start := st;) 262.2 425.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(res.finish\050fin\051;) 171 415.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- Equivalent to res.finish := fin;) 267 415.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 178.2 405.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 396.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr a:FLT;) 144 352.64 T
11 F
( -- Defines the reader, private a:FLT) 244.8 352.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- and the writer  private a\050FLT\051;) 249.6 343.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(readonly attr b:FLT;) 144 334.64 T
11 F
(--Defines the public reader, b:FLT) 249.6 334.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- and the private writer b\050FLT\051) 255.6 325.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class FOO is) 144 257.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(shared a:INT := 3;) 178.2 248.64 T
11 F
(-- Defines a:INT and a\050arg:INT\051;) 288.6 248.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(readonly shared b:INT;) 178.2 239.64 T
11 F
(-- Defines a:INT and private a\050arg:INT\051;) 288.6 239.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(...) 144 230.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + FOO::a;) 144 221.64 T
11 F
(-- Prints out 3) 268.8 221.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(FOO::a\0504\051;) 144 212.64 T
11 F
( -- \325a\325 is set to 4, same as FOO::a := 4;) 264 212.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+ FOO::a;) 144 203.64 T
11 F
(-- Prints out 4;) 268.8 203.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(FOO::a := 7;) 144 194.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- \325a\325 is set to \3257\325 , equivalent to FOO::a\0507\051;) 144 185.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( FOO::b\0503\051;     -- ILLEGAL! The writer routine is private) 144 176.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 507.85 129.6 391.1 2 L
V
0.25 H
0 Z
N
489.6 507.85 489.6 391.1 2 L
V
N
129.48 507.98 489.73 507.98 2 L
V
N
129.48 390.98 489.73 390.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(52) 108 710.84 T
8 8 Q
(Classes and Objects :) 213.63 710.84 T
0 F
(2.6 Attr) 298.84 710.84 T
(ibute Accessor Routines) 326.05 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.29 (return type is the constant\325) 108 659.33 P
0.29 (s type. The routine is pri) 215.25 659.33 P
0.29 (v) 314.2 659.33 P
0.29 (ate if and only if the constant is declared \324) 318.95 659.33 P
7 F
0.32 (pri-) 489.56 659.33 P
(vate) 108 647.33 T
5 F
(\325.) 126.9 647.33 T
4 12 Q
(2.6.1   Attrib) 108 555 T
(ute assignment) 176.45 555 T
5 10 Q
0.25 (In order to achie) 108 532.33 P
0.25 (v) 174.32 532.33 P
0.25 (e the  uni\336cation of  attrib) 179.18 532.33 P
0.25 (ute assignment and routine calls, for attrib) 284.39 532.33 P
0.25 (utes, assign-) 454.3 532.33 P
(ment has to be gi) 108 520.33 T
(v) 176.08 520.33 T
(en a meaning in terms of function calls.) 180.93 520.33 T
0.15 (By def) 108 498.33 P
0.15 (ault, the assignment is syntactic sug) 134.99 498.33 P
0.15 (ar for a call of the routine with the same name as the at-) 279.03 498.33 P
(trib) 108 486.33 T
(ute with the right hand side of the assignment as the only ar) 121.69 486.33 T
(gument) 359.82 486.33 T
-0.14 (In the abo) 108 433.33 P
-0.14 (v) 147.55 433.33 P
-0.14 (e e) 152.4 433.33 P
-0.14 (xample, the assignment to \325x\325 is the same as calling the routine \325x\325 with a single ar) 163.49 433.33 P
-0.14 (gu-) 490.67 433.33 P
(ment.) 108 421.33 T
4 F
(Replacing an attrib) 108 393.33 T
(ute b) 197.82 393.33 T
(y a r) 221.51 393.33 T
(outine) 241.88 393.33 T
5 F
-0.12 (The beauty of this treatment of assignment is that an attrib) 108 370.33 P
-0.12 (ute in a class can later be substituted by a) 339.87 370.33 P
-0.52 (pair of routines.  Consider a class to represent inte) 108 358.33 P
-0.52 (ger interv) 303.68 358.33 P
-0.52 (als, where we store the \336rst and last v) 341.51 358.33 P
-0.52 (alue) 487.34 358.33 P
(in the interv) 108 346.33 T
(al) 156.08 346.33 T
(W) 108 167.33 T
(e can mak) 116.64 167.33 T
(e calls on this class) 157.08 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(const r:FLT:=45.6;) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(   -- Reader routine is r:FLT;) 240 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(private const a,b,c;) 144 617.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- Reader routine is private a:INT;) 244.8 617.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(private const d:=4,e,f) 144 607.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const bar:BOOL := r > 10;) 144 598.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Function call on constants) 268.8 598.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(p:POINT := #POINT\0503,5\051;) 144 466.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p.x := 3;) 144 457.67 T
11 F
(-- Is syntactic sugar for  p.x\0503\051;) 192 457.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class I_INTERVAL is) 144 326.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Integer intervals) 178.2 317.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(attr start:INT;) 178.2 308.67 T
11 F
(-- Defines start:INT and start\050INT\051) 274.2 308.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(attr finish:INT;) 178.2 299.67 T
11 F
(-- Defines finish:INT and finish\050INT\051) 274.2 299.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(create\050start,finish:INT\051:SAME is) 178.2 281.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:SAME := new;) 190.8 272.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.start := start;) 190.8 263.67 T
11 F
(-- Equivalent to res.start\050start\051;) 315.6 263.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(res.finish := finish;) 190.8 254.67 T
11 F
( -- Equivalent to) 310.8 254.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.finish\050finish\051;) 144 245.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(return res;) 190.8 236.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 227.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(size:INT is return finish - start + 1; end;) 178.2 209.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Returns the number of integers in the interval) 207 200.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 191.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i:I_INTERVAL := #I_INTERVAL\0503,10\051;) 144 147.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i.finish := 11;) 144 138.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Equivalent to a call i.finish\05011\051;) 225.6 138.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+ i.finish;) 144 128.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Prints out 11) 225.6 128.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(i.start := 15;) 144 118.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Equivalent to the call i.start\05015\051;) 225.6 118.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 334.88 129.6 186.13 2 L
V
0 Z
N
489.6 334.88 489.6 186.13 2 L
V
N
129.48 335 489.73 335 2 L
V
N
129.48 186 489.73 186 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 52
%%Page: "53" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 243.2 710.84 T
0 F
(2.7) 328.4 710.84 T
(Static T) 341.7 710.84 T
(ype Inf) 368.57 710.84 T
(er) 394.77 710.84 T
(ence) 402.35 710.84 T
6 10 Q
(53) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.47 (Suppose we then realize that we usually w) 108 659.33 P
0.47 (ant to kno) 280.87 659.33 P
0.47 (w the size of the interv) 321.55 659.33 P
0.47 (al,  and rarely need to) 415.02 659.33 P
-0.44 (kno) 108 647.33 P
-0.44 (w the end point.  It w) 122.75 647.33 P
-0.44 (ould then be cheaper to store the size directly) 205.29 647.33 P
-0.44 (, rather than computing it.  The) 382.2 647.33 P
(class can be changed so that we store the) 108 635.33 T
7 9 Q
(first) 273.79 635.33 T
5 10 Q
( and) 288.29 635.33 T
7 9 Q
(size) 307.73 635.33 T
5 10 Q
( and compute) 323.73 635.33 T
7 9 Q
(finish) 380.11 635.33 T
5 10 Q
(.) 401.12 635.33 T
-0.1 (All the calls described abo) 108 393.33 P
-0.1 (v) 213.52 393.33 P
-0.1 (e will continue to w) 218.37 393.33 P
-0.1 (ork as before.  The assignment to) 297.3 393.33 P
7 9 Q
-0.1 (finish) 432.1 393.33 P
5 10 Q
-0.1 ( in particular) 453.11 393.33 P
0.38 (will no) 108 381.33 P
0.38 (w be a call on the user) 136.19 381.33 P
0.38 (-de\336ned \336nish routine, instead of a call to the implicit writer routine) 227.66 381.33 P
(for the attrib) 108 369.33 T
(ute) 157.79 369.33 T
7 9 Q
(finish) 172.51 369.33 T
5 10 Q
(.) 193.52 369.33 T
108 307.98 504 311 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 309.49 540 309.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.7  Static T) 108 317 T
(ype Inf) 206.96 317 T
(erence) 264.8 317 T
5 10 Q
-0.08 (F) 108 288.31 P
-0.08 (or the sak) 113.41 288.31 P
-0.08 (e of con) 152.02 288.31 P
-0.08 (v) 183.67 288.31 P
-0.08 (enience, Sather pro) 188.52 288.31 P
-0.08 (vides a mechanism for statically inferring the type of a v) 265.12 288.31 P
-0.08 (ari-) 490.12 288.31 P
-0.29 (able from the conte) 108 276.31 P
-0.29 (xt. This type-inference tak) 184.46 276.31 P
-0.29 (es place in dif) 289.02 276.31 P
-0.29 (ferent situations, where the type is a) 343.72 276.31 P
-0.29 (v) 485.92 276.31 P
-0.29 (ail-) 490.67 276.31 P
(able from the conte) 108 264.31 T
(xt.) 185.33 264.31 T
4 12 Q
(2.7.1   Creation Expressions) 108 222.98 T
5 10 Q
-0.03 (In a creation e) 108 200.31 P
-0.03 (xpression, it is tedious to ha) 164.68 200.31 P
-0.03 (v) 275.99 200.31 P
-0.03 (e to repeat the type of a class on both sides of a creation) 280.84 200.31 P
(e) 108 188.31 T
(xpression and assignment.  Hence, the # symbol may infer its type from the conte) 112.29 188.31 T
(xt.) 438.21 188.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class I_INTERVAL is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Integer intervals) 178.2 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(attr start:INT;) 178.2 597.67 T
11 F
(-- Defines start:INT and start\050INT\051) 298.2 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(readonly attr size:INT;) 178.2 588.67 T
11 F
( -- Defines  size:INT and private) 293.4 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(size\050INT\051) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- size is readonly, since we only need size:INT in the interface) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(create\050start,finish:INT\051:SAME is) 178.2 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:SAME := new;) 190.8 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.start := start;) 190.8 534.67 T
11 F
(-- Equivalent to) 330 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.start\050start\051;) 144 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(res.size :=  finish-start+1;) 190.8 516.67 T
11 F
(-- Store the result in res.size) 330 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(return res;) 190.8 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(finish:INT is return start+size-1 end;) 178.2 480.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Replacement for the reader routine for \325finish\325) 178.2 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Compute finish using \325start\325 and \325size\325) 178.2 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(finish\050new_finish:INT\051 is  size:=new_finish-start+1  end;) 178.2 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Replacement for the writer routine for \325finish\325) 178.2 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:POINT;) 144 168.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a := #\0503,4\051;) 144 159.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Equivalent to a := #POINT\0503,4\051;) 206.4 159.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 412.13 2 L
V
0.25 H
0 Z
N
489.6 623.88 489.6 412.13 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 412 489.73 412 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 53
%%Page: "54" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(54) 108 710.84 T
8 8 Q
(Classes and Objects :) 226.06 710.84 T
0 F
(2.7 Static T) 311.27 710.84 T
(ype Inf) 351.44 710.84 T
(er) 377.64 710.84 T
(ence) 385.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(2.7.2   Assignments and ::=) 108 658 T
5 10 Q
0.02 (T) 108 635.33 P
0.02 (ype inference can also tak) 113.31 635.33 P
0.02 (e place in a declaration, if it is combined with an assignment.  Since the) 217.13 635.33 P
0.27 (declared type of the right hand side of the assignment is kno) 108 623.33 P
0.27 (wn, its type is used as  the type of the) 351.56 623.33 P
(v) 108 611.33 T
(ariable.  This combination of declaration and assignment is e) 112.75 611.33 T
(xtremely common in Sather code.) 355.9 611.33 T
-0.19 (When an assignment is associated with a creation, we can mak) 108 531.33 P
-0.19 (e use of either form of type inference) 356.77 531.33 P
4 12 Q
(2.7.3   Ar) 108 459 T
(guments to a function call) 157.85 459 T
5 10 Q
0.4 (The type of the ar) 108 436.33 P
0.4 (guments to a function call are also kno) 180.52 436.33 P
0.4 (wn and can be used to infer the type of a) 337.79 436.33 P
(creation e) 108 424.33 T
(xpression in a call to the function.) 147 424.33 T
-0.19 (This form of type inference may be used for closure creation e) 108 343.33 P
-0.19 (xpressions as well, which will be dis-) 355.42 343.33 P
(cussed in the chapter on Closures) 108 331.33 T
-0.28 (If the plus routine in the INT class is o) 108 278.33 P
-0.28 (v) 259.49 278.33 P
-0.28 (erloaded, then the appropriate routine is chosen based on the) 264.34 278.33 P
-0.26 (declared type of the ar) 108 266.33 P
-0.26 (gument to \325apply\325 i.e. R) 196.19 266.33 P
-0.26 (OUT{INT}:INT) 290.3 266.33 P
-0.26 (.  Note that if both the \325apply\325 routine) 355.82 266.33 P
0.34 (and the \325plus\325 routine are o) 108 254.33 P
0.34 (v) 217.58 254.33 P
0.34 (erloaded,  type inference may not be able to determine the type and it) 222.43 254.33 P
(might be necessary to create a temporary v) 108 242.33 T
(ariable with the right type) 279.09 242.33 T
-0.32 (In an) 108 189.33 P
-0.32 (y case, we strongly  recommend that static type inference) 127.8 189.33 P
13 F
-0.32 (not) 356.5 189.33 P
5 F
-0.32 ( be used in cases where confusion) 370.39 189.33 P
(might result; the e) 108 177.33 T
(xtra typing is  usually w) 180.35 177.33 T
(orthwhile!) 276.64 177.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a ::= 3;) 144 591.67 T
11 F
(-- Equivalent to a:INT := 3;) 283.2 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(p1:POINT := #POINT\0503,5\051;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p2:POINT := #POINT\0504,5\051;) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p3 ::= p1.add\050p2\051;) 144 564.67 T
11 F
(   -- \325p3\325 is of type POINT.) 268.8 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Assumes the function \325add\325  in POINT i.e. POINT::add\050POINT,POINT\051;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a ::= #POINT\0503,4\051;) 144 511.67 T
11 F
(-- Equivalent to a:POINT := #POINT\0503,4\051;) 240 511.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a:POINT := #\0503,4\051;) 144 502.67 T
11 F
(-- Means the same) 240 502.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:POINT\051 is  ...) 144 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050#\0503,5\051\051;) 144 386.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- The create expression infers its type) 144 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( -- from the type of the argument that \325foo\325 is expecting) 144 367.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(apply\050arg:ROUT{INT}:INT\051 is ....) 144 311.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(apply\050bind\0503.plus\050_\051\051;) 144 302.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r:ROUT{INT}:INT := bind\0503.plus\050_\051\051;) 144 222.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(apply\050r\051;) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 54
%%Page: "55" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 250.73 710.84 T
0 F
(2.8) 335.94 710.84 T
(Class P) 349.24 710.84 T
(ar) 375.8 710.84 T
(ameter) 383.52 710.84 T
(s) 412.16 710.84 T
6 10 Q
(55) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.8  Class P) 108 654 T
(arameter) 207.52 654 T
(s) 283.28 654 T
5 10 Q
1.01 (W) 108 625.31 P
1.01 (e will brie\337y describe simple parametrized classes here so that the) 116.64 625.31 P
1.01 (y may be used in e) 391.03 625.31 P
1.01 (xamples) 470.67 625.31 P
-0.08 (through the rest of the te) 108 613.31 P
-0.08 (xt.  F) 205.5 613.31 P
-0.08 (or a full description of parametrized classes, please see the chapter on) 226.04 613.31 P
(P) 108 601.31 T
(arametrized Classes.) 113.41 601.31 T
-0.15 (A Sather class may ha) 108 579.31 P
-0.15 (v) 196.09 579.31 P
-0.15 (e v) 200.94 579.31 P
-0.15 (arious type parameters, which are basically place holders for types which) 212.48 579.31 P
0.17 (are speci\336ed  when the class is actually used.   This allo) 108 567.31 P
0.17 (ws us to write code that is) 332.85 567.31 P
10 F
0.17 (g) 440.44 567.31 P
0.17 (eneric) 445.34 567.31 P
5 F
0.17 ( and can) 470.33 567.31 P
0.07 (be used with a dif) 108 555.31 P
0.07 (ferent types.  By con) 179.12 555.31 P
0.07 (v) 262.03 555.31 P
0.07 (ention, these type parameters are gi) 266.88 555.31 P
0.07 (v) 408.59 555.31 P
0.07 (en names lik) 413.44 555.31 P
0.07 (e) 464.03 555.31 P
7 9 Q
0.07 (T) 471.03 555.31 P
5 10 Q
0.07 ( or) 476.53 555.31 P
7 9 Q
0.07 (TP.) 490 555.31 P
5 10 Q
0.34 (W) 108 543.31 P
0.34 (e sho) 116.64 543.31 P
0.34 (w belo) 137.56 543.31 P
0.34 (w a class) 164.59 543.31 P
7 9 Q
0.34 (TUP) 204.2 543.31 P
5 10 Q
0.34 (, which holds pairs of objects.  Since we w) 221.09 543.31 P
0.34 (ould lik) 394.85 543.31 P
0.34 (e to be able to hold) 425.93 543.31 P
-0.31 (objects of an) 108 531.31 P
-0.31 (y types, we just specify type parameters,) 158.33 531.31 P
7 9 Q
-0.31 (T1) 320.85 531.31 P
5 10 Q
-0.31 ( and) 331.35 531.31 P
7 9 Q
-0.31 (T2) 350.17 531.31 P
5 10 Q
-0.31 (.  These  parameters are  place-hold-) 360.67 531.31 P
-0.14 (ers, which must be set to actual honest-to-goodness concrete classes when the) 108 519.31 P
7 9 Q
-0.14 (TUP) 419.89 519.31 P
5 10 Q
-0.14 ( is actually used) 437.89 519.31 P
-0.25 (W) 108 349.31 P
-0.25 (e can no) 116.64 349.31 P
-0.25 (w create a tuple object that holds, for instance, a pair consisting of a string and an inte) 149.22 349.31 P
-0.25 (ger:) 488.45 349.31 P
4 12 Q
(2.8.1   Arra) 108 265.98 T
(ys) 169.13 265.98 T
5 10 Q
0.18 (A standard  parametrized class  is the array class,) 108 243.31 P
7 9 Q
0.18 (ARRAY{T}) 311.55 243.31 P
5 10 Q
0.18 (.  Arrays are e) 354.07 243.31 P
0.18 (xplained in more detail) 410.98 243.31 P
-0.37 (on page 105.  When an array is actually used to hold objects, the type parameter must be instantiated) 108 231.31 P
(to indicate the kind of objects being held.) 108 219.31 T
(F) 108 156.31 T
(or e) 113.41 156.31 T
(xample, arrays are used to pass in the ar) 128.53 156.31 T
(guments to a program into the main procedure.) 288.03 156.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class TUP{T1,T2} is) 144 499.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Simple version of the library tuple class) 153.6 490.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(attr t1:T1;) 178.2 481.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr t2:T2;) 178.2 472.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050t1:T1, t2:T2\051: SAME is) 178.2 463.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--  Standard create routine. Arguments use the type) 190.8 454.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(parameters) 144 445.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res) 190.8 436.64 T
(::= new;) 210 436.64 T
11 F
(-- Using static type inference - new returns) 258 436.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(SAME) 144 427.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(res.t1 := t1;) 190.8 418.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The types of res.t1 and the argument t1) 258 418.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        -- are both T1 so the assignment is legal) 216 409.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(res.t2 := t2;) 190.8 400.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 190.8 391.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 382.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 373.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(t ::= #TUP{INT,STR}\0505,"this"\051;) 144 329.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Create a new tuple.) 302.4 329.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Uses ::= to determine the type of \325t\325) 144 319.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT + t.t1 + "\134n";) 144 309.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:ARRAY{INT} := |2,5,7|;) 144 199.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Special syntax for initializing an array with values 2,5,7) 144 190.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+a[1];) 144 180.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Return the second element of the array) 201.6 180.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(main\050args:ARRAY{STR}\051  is) 144 136.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+args[0];) 156.6 127.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(    -- On unix, args[0] is the name of the program) 219 127.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 117.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 507.85 129.6 368.1 2 L
V
0.25 H
0 Z
N
489.6 507.85 489.6 368.1 2 L
V
N
129.48 507.98 489.73 507.98 2 L
V
N
129.48 367.98 489.73 367.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 55
%%Page: "56" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(56) 108 710.84 T
8 8 Q
(Classes and Objects :) 215.85 710.84 T
0 F
(2.9 Comm) 301.06 710.84 T
(and line ar) 340.94 710.84 T
(guments) 382.23 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(W) 108 659.33 T
(e can hold a collection of points using an array) 116.64 659.33 T
(, as follo) 302.9 659.33 T
(ws) 337.37 659.33 T
108 548.98 504 552 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 550.49 540 550.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.9  Command line ar) 108 558 T
(guments) 288.79 558 T
5 10 Q
0.12 (It is v) 108 529.31 P
0.12 (ery easy to access command line ar) 130.86 529.31 P
0.12 (guments from within a Sather program.  Just specify your) 272.44 529.31 P
(main routine with an ar) 108 517.31 T
(gument of type ARRA) 201.14 517.31 T
(Y{STR}.) 290.92 517.31 T
(If the preceeding program is in a \336le \325foo.sa\325 it can be compiled:) 108 410.31 T
(and then run as follo) 108 366.31 T
(ws:) 189.96 366.31 T
5 8 Q
(5) 203.85 370.31 T
108 246.95 504 249.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 248.47 540 248.47 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(2.10  A Running Example: Emplo) 108 255.98 T
(y) 388.71 255.98 T
(ees) 398.54 255.98 T
5 10 Q
0.3 (W) 108 227.29 P
0.3 (e will illustrate the points made abo) 116.64 227.29 P
0.3 (v) 261.05 227.29 P
0.3 (e by using a simple e) 265.9 227.29 P
0.3 (xample, which will be something of a) 351.39 227.29 P
0.11 (running e) 108 215.29 P
0.11 (xample to be e) 146.01 215.29 P
0.11 (xtended in later chapters.  W) 204.79 215.29 P
0.11 (e will start here by de\336ning a class) 319.52 215.29 P
7 9 Q
0.11 ( \325EMPLOY-) 458.88 215.29 P
-0.42 (EE\325) 108 203.29 P
5 10 Q
-0.42 (.  Please bear in mind that this e) 122 203.29 P
-0.42 (xample is used to illustrate v) 245.99 203.29 P
-0.42 (arious language features,  not object-) 358.36 203.29 P
(oriented design.) 108 191.29 T
108 156 504 176.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 167.09 240.98 167.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(5.  A string can be converted to an INT or a \337oat by using the STR_CURSOR class as follows:) 108 150.67 T
9 F
(a: STR := "5";) 114 138.67 T
( b:INT := a.cursor.int;) 108 126.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:ARRAY{POINT} := #\0503\051;) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a[0] := #POINT\0500.0,0.0\051;) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a[1] := #POINT\0500.0,1.0\051;) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a[2] := #POINT\0502.0,2.0\051;) 144 612.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class MAIN is) 144 497.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    main\050args: ARRAY{STR}\051 is) 144 488.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT+"Program name is:"+args[0]+"\134n";) 144 479.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT+"First argument:"+args[1]+"\134n";) 144 470.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT+"Second argument:"+args[2]+"\134n";) 144 461.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT+"Number of arguments:"+\050args.size-1\051+"\134n";) 144 452.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 144 443.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 434.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(cs foo.sa -o foo) 144 390.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>./foo this that 1) 144 346.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Program name is:foo) 144 337.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(First argument:this) 144 328.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Second argument:that) 144 319.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Number of arguments:3) 144 310.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 505.85 129.6 429.1 2 L
V
0.25 H
0 Z
N
489.6 505.85 489.6 429.1 2 L
V
N
129.48 505.98 489.73 505.98 2 L
V
N
129.48 428.98 489.73 428.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 56
%%Page: "57" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Classes and Objects :) 221.01 710.84 T
0 F
(2.10) 306.22 710.84 T
(A Running Example: Emplo) 323.95 710.84 T
(y) 427.36 710.84 T
(ees) 431.48 710.84 T
6 10 Q
(57) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(EMPLO) 108 659.33 T
(YEE de\336nition) 142.86 659.33 T
5 F
0.32 (The class is composed of se) 108 636.33 P
0.32 (v) 220.71 636.33 P
0.32 (eral attrib) 225.56 636.33 P
0.32 (utes which hold the emplo) 264.28 636.33 P
0.32 (yee information. V) 371.01 636.33 P
0.32 (arious de) 446.35 636.33 P
0.32 (grees) 482.9 636.33 P
(of pri) 108 624.33 T
(v) 129.69 624.33 T
(ac) 134.44 624.33 T
(y are illustrated) 143.17 624.33 T
0.54 (Note the use of the special type) 108 436.33 P
7 9 Q
0.54 (SAME) 239.8 436.33 P
5 10 Q
0.54 (as the return type of the) 268.35 436.33 P
7 9 Q
0.54 (create) 368.79 436.33 P
5 10 Q
0.54 (routine, which denotes the) 396.84 436.33 P
0.32 (current class name.) 108 424.33 P
7 9 Q
0.32 (SAME) 191.19 424.33 P
5 10 Q
0.32 ( changes to mean the including class when it is included, as will be e) 216.69 424.33 P
0.32 (x-) 495.67 424.33 P
(plained in the ne) 108 412.33 T
(xt chapter on code inclusion.) 174.23 412.33 T
4 F
(TESTEMP de\336nition) 108 384.33 T
5 F
(The emplo) 108 361.33 T
(yee class may be e) 150.95 361.33 T
(x) 225.22 361.33 T
(ercised using the follo) 230.07 361.33 T
(wing main class.) 318.42 361.33 T
(Note that the follo) 108 236.33 T
(wing calls w) 180.8 236.33 T
(ould be ille) 231.25 236.33 T
(g) 276.1 236.33 T
(al:) 281.05 236.33 T
0.42 (A distinguished class must be speci\336ed when a Sather program is compiled \050the def) 108 183.33 P
0.42 (ault is to look) 448.02 183.33 P
-0.31 (for a class called) 108 171.33 P
7 9 Q
-0.31 (MAIN) 176.2 171.33 P
5 10 Q
-0.31 (\051. This class must de\336ne a routine named) 198.7 171.33 P
7 9 Q
-0.31 (\324main\325) 362.62 171.33 P
5 10 Q
-0.31 (. When the program e) 386.11 171.33 P
-0.31 (x) 471.66 171.33 P
-0.31 (ecutes,) 476.51 171.33 P
(an object of the speci\336ed type is created and) 108 159.33 T
7 9 Q
( \324main\325) 285.18 159.33 T
5 10 Q
( is called on it.) 311.18 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class EMPLOYEE is) 144 604.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr wage:INT;) 178.2 586.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly attr name:STR;) 178.2 577.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr id:INT;) 178.2 568.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const high_salary:INT := 40000;) 178.2 559.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050a_name:STR, a_id:INT, a_wage:INT\051:SAME is) 178.2 541.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res ::= new;) 190.8 532.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.id := a_id;) 190.8 523.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.name := a_name;) 190.8 514.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.wage := a_wage;) 190.8 505.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return\050res\051;) 190.8 496.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 487.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(highly_paid:BOOL is   return wage >= high_salary;   end;) 178.2 469.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 460.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class TESTEMP is) 144 341.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 323.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        john:EMPLOYEE := #EMPLOYEE\050"John",100,10000\051;) 144 314.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        peter:EMPLOYEE := #EMPLOYEE\050"Peter",3,10000\051;) 144 305.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        john.id := 100;) 144 296.67 T
11 F
(-- Set the attr "id" in john to 100) 297.6 296.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(        #OUT+ john.name+"\134n";) 144 287.67 T
11 F
(-- Prints "John") 297.6 287.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(        #OUT+ peter.id+"\134n";) 144 278.67 T
11 F
(-- Prints "3") 297.6 278.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(    end;) 144 269.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 260.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(#OUT+john.wage+"\134n";  -- ILLEGAL! "wage" is private) 144 216.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(john.name := "martha";   -- ILLEGAL! "name" is readonly.) 144 207.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 612.88 129.6 455.13 2 L
V
0 Z
N
489.6 612.88 489.6 455.13 2 L
V
N
129.48 613 489.73 613 2 L
V
N
129.48 455 489.73 455 2 L
V
N
129.6 349.88 129.6 255.13 2 L
V
N
489.6 349.88 489.6 255.13 2 L
V
N
129.48 350 489.73 350 2 L
V
N
129.48 255 489.73 255 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 57
%%Page: "58" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(58) 108 710.84 T
8 8 Q
(Classes and Objects :) 203.88 710.84 T
0 F
(2.10 A Running Example: Emplo) 289.08 710.84 T
(y) 410.22 710.84 T
(ees) 414.35 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(Running the e) 108 659.33 T
(xample) 174.52 659.33 T
5 F
(T) 108 636.33 T
(o run the abo) 113.31 636.33 T
(v) 165.65 636.33 T
(e e) 170.5 636.33 T
(xample - type the code into a \336le emp.sa and then run the e) 181.73 636.33 T
(x) 417.65 636.33 T
(ecutable \325emp\325) 422.5 636.33 T
9 8 Q
(cs emp.sa -main TESTEMP -o emp) 122.4 619.67 T
5 10 Q
-0.48 (This generates the e) 108 599.33 P
-0.48 (x) 186.1 599.33 P
-0.48 (ecutable "emp", using the "main" routine in) 190.96 599.33 P
7 9 Q
-0.48 (TESTEMP) 364.44 599.33 P
5 10 Q
-0.48 ( as its starting point. Y) 406.95 599.33 P
-0.48 (ou) 494 599.33 P
(can bro) 108 587.33 T
(wse the resulting code by calling) 137.46 587.33 T
9 8 Q
(bs emp.sa -main TESTEMP) 122.4 570.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 58
%%Page: "59" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Loops and Iter) 259.37 710.84 T
(ator) 314.33 710.84 T
(s :) 330.31 710.84 T
0 F
(3.1) 340.06 710.84 T
(Using iter) 353.36 710.84 T
(ator) 387.54 710.84 T
(s) 403.53 710.84 T
6 10 Q
(59) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Loops and Iter) 108 642 S
-0.25 (ator) 351.84 642 S
-0.25 (s) 422.78 642 S
5 10 Q
-0.43 (Until no) 108 517.33 P
-0.43 (w  we ha) 140.38 517.33 P
-0.43 (v) 174.73 517.33 P
-0.43 (e only made use of the simple loop constructs, while! and until!.  These are similar) 179.58 517.33 P
0.1 (to the loop constructs found in other languages, aside from the terminal \325!\325. Ho) 108 505.33 P
0.1 (we) 424.33 505.33 P
0.1 (v) 435.74 505.33 P
0.1 (er) 440.59 505.33 P
0.1 (, that terminal) 447.96 505.33 P
-0.49 (\325!\325 hides something v) 108 493.33 P
-0.49 (ery special about these loop constructs in Sather; a programmer can de\336ne such) 191.64 493.33 P
-0.21 (looping constructs as easily as he or she could de\336ne a standard routine.  Once de\336ned, the) 108 481.33 P
-0.21 (y may be) 467.76 481.33 P
(used as con) 108 469.33 T
(v) 153.7 469.33 T
(eniently as the while! and until! iterators.) 158.55 469.33 T
-0.61 (T) 108 447.33 P
-0.61 (o a \336rst approximation, iterators are lik) 113.31 447.33 P
-0.61 (e streams that can "yield" dif) 265.91 447.33 P
-0.61 (ferent v) 378.24 447.33 P
-0.61 (alues on successi) 408.2 447.33 P
-0.61 (v) 475.04 447.33 P
-0.61 (e loop) 479.89 447.33 P
-0.1 (iterations. When an iterator has no more v) 108 435.33 P
-0.1 (alues to yield, it "quit"s.  This,  in turn, terminates the en-) 275.36 435.33 P
(closing loop.) 108 423.33 T
0.41 (Iterators are de\336ned as class features, just lik) 108 401.33 P
0.41 (e routines, b) 290.14 401.33 P
0.41 (ut iterator names must terminate with an) 339.91 401.33 P
-0.12 (\325!\325. When an iterator is called, it e) 108 389.33 P
-0.12 (x) 242.27 389.33 P
-0.12 (ecutes the statements in its body in order) 247.12 389.33 P
-0.12 (. If it e) 408.79 389.33 P
-0.12 (x) 434.95 389.33 P
-0.12 (ecutes a) 439.8 389.33 P
9 F
-0.28 (yield) 474 389.33 P
5 F
0.32 (statement, control is returned to the caller) 108 377.33 P
0.32 (. In this, the iterator is similar to a coroutine whose state) 275.75 377.33 P
0.46 (remains persistent o) 108 365.33 P
0.46 (v) 188.75 365.33 P
0.46 (er multiple calls.  Subsequent calls on the iterator resume e) 193.6 365.33 P
0.46 (x) 433.8 365.33 P
0.46 (ecution with the) 438.65 365.33 P
0.84 (statement follo) 108 353.33 P
0.84 (wing the) 168.31 353.33 P
9 F
2.02 (yield) 207.21 353.33 P
5 F
0.84 ( statement. If an iterator e) 237.21 353.33 P
0.84 (x) 344.02 353.33 P
0.84 (ecutes) 348.87 353.33 P
9 F
2.02 (quit) 377.2 353.33 P
5 F
0.84 ( or reaches the end of its) 401.2 353.33 P
0.08 (body) 108 341.33 P
0.08 (, control passes immediately to the end of the innermost enclosing loop statement in the caller) 127.35 341.33 P
(and no v) 108 329.33 T
(alue is returned.) 142.19 329.33 T
108 267.98 504 271 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 269.49 540 269.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(3.1  Using iterator) 108 277 T
(s) 259.78 277 T
4 12 Q
(3.1.1) 108 228.98 T
7 F
( loop) 144.7 228.98 T
4 F
( statements) 170.71 228.98 T
5 10 Q
-0.14 (Iteration is done with) 108 206.31 P
1 F
-0.14 (loop statements) 195.2 206.31 P
5 F
-0.14 (, used in conjunction with iterator calls. In the absence of iter-) 257.55 206.31 P
-0.14 (ator calls, a loop statement simply e) 108 194.31 P
-0.14 (x) 250.6 194.31 P
-0.14 (ecutes an in\336nite loop.  The dif) 255.45 194.31 P
-0.14 (ference between an iterator call) 379.07 194.31 P
0.17 (and a routine call is that the iterator call "remembers" its state after it yields a v) 108 182.31 P
0.17 (alue and, on subse-) 426.85 182.31 P
-0.08 (quent calls, it simply resumes e) 108 170.31 P
-0.08 (x) 233.02 170.31 P
-0.08 (ecution.  The "lifetime" of an iterator usually includes se) 237.87 170.31 P
-0.08 (v) 463.4 170.31 P
-0.08 (eral calls) 468.26 170.31 P
0.06 (within a particular loop.  Hence, an e) 108 158.31 P
0.06 (x) 256.3 158.31 P
0.06 (ecution state is maintained for each iterator call te) 261.15 158.31 P
0.06 (xtually en-) 460.89 158.31 P
0.27 (closed within a loop - this e) 108 146.31 P
0.27 (x) 220.03 146.31 P
0.27 (ecution state will be used to "remember"  the state of  the iterator be-) 224.88 146.31 P
1.71 (tween in) 108 134.31 P
1.71 (v) 143.46 134.31 P
1.71 (ocations. When a loop is entered, the e) 148.26 134.31 P
1.71 (x) 314.74 134.31 P
1.71 (ecution state of all enclosed iterator calls is) 319.59 134.31 P
0.83 (initialized. When an iterator is encountered, control is transferred to the iterator until the iterator) 108 122.31 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 59
%%Page: "60" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(60) 108 710.84 T
8 8 Q
(Loops and Iter) 242.23 710.84 T
(ator) 297.19 710.84 T
(s :) 313.18 710.84 T
0 F
(3.1 Using iter) 322.93 710.84 T
(ator) 370.41 710.84 T
(s) 386.39 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.51 ("yields" control.  Just as a routine may pro) 108 659.33 P
-0.51 (vide a v) 273.89 659.33 P
-0.51 (alue when it returns, so too an iterator may pro) 304.29 659.33 P
-0.51 (vide) 486.78 659.33 P
(a v) 108 647.33 T
(alue when it yields.) 119.69 647.33 T
-0 (Instead of yielding control back to the enclosing loop, an iterator may also terminate or quit, which) 108 585.33 P
(terminates the enclosing loop.) 108 573.33 T
0.42 (Note that each loop may contain more than one iterator call, thus pro) 108 551.33 P
0.42 (viding much more \337e) 388.15 551.33 P
0.42 (xibility) 475.1 551.33 P
0.11 (than con) 108 539.33 P
0.11 (v) 141.87 539.33 P
0.11 (entional languages.  When an) 146.72 539.33 P
0.11 (y of the iterators terminates, the whole loop terminates, and) 265.02 539.33 P
(e) 108 527.33 T
(x) 112.29 527.33 T
(ecution continues at the ne) 117.14 527.33 T
(xt statement after the loop.) 223.64 527.33 T
4 12 Q
(3.1.2   Built-in iterator) 108 486 T
(s) 230.52 486 T
5 10 Q
0.07 (The) 108 463.33 P
9 F
0.17 (until!) 126.12 463.33 P
5 F
0.07 (,) 162.12 463.33 P
9 F
0.17 (while!) 167.19 463.33 P
5 F
0.07 (and) 209.36 463.33 P
9 F
0.17 (break!) 226.37 463.33 P
5 F
0.07 (iterators are b) 268.54 463.33 P
0.07 (uilt-in.  The) 323.46 463.33 P
0.07 (y ha) 370.96 463.33 P
0.07 (v) 387.77 463.33 P
0.07 (e the standard de\336nitions of) 392.62 463.33 P
0.06 (until, while and break in other languages and may occur an) 108 451.33 P
0.06 (ywhere in the loop body) 344.8 451.33 P
0.06 (.) 441.61 451.33 P
9 F
0.15 (while!) 449.23 451.33 P
5 F
0.06 (e) 491.38 451.33 P
0.06 (x-) 495.67 451.33 P
0.22 (pressions are iterator calls which tak) 108 439.33 P
0.22 (e a single boolean ar) 254.79 439.33 P
0.22 (gument that is re-e) 337.68 439.33 P
0.22 (v) 412.8 439.33 P
0.22 (aluated on each itera-) 417.55 439.33 P
0.98 (tion. The) 108 427.33 P
0.98 (y yield when the ar) 144.94 427.33 P
0.98 (gument is true and quit when it is f) 225.31 427.33 P
0.98 (alse.) 372.46 427.33 P
9 F
2.34 (until!) 397.46 427.33 P
5 F
0.98 (e) 441.8 427.33 P
0.98 (xpressions are) 446.09 427.33 P
-0.16 (iterator calls which tak) 108 415.33 P
-0.16 (e a single boolean ar) 198.78 415.33 P
-0.16 (gument that is re-e) 280.16 415.33 P
-0.16 (v) 354.13 415.33 P
-0.16 (aluated on each iteration. The) 358.88 415.33 P
-0.16 (y yield) 476.66 415.33 P
0.26 (when the ar) 108 403.33 P
0.26 (gument is f) 154.99 403.33 P
0.26 (alse and quit when it is true.) 200.41 403.33 P
9 F
0.62 ( break!) 317.21 403.33 P
5 F
0.26 ( e) 359.83 403.33 P
0.26 (xpressions are iterator calls which) 366.88 403.33 P
(immediately quit when the) 108 391.33 T
(y are called.) 214.79 391.33 T
-0.19 (The) 108 302.33 P
9 F
-0.46 (break!) 125.86 302.33 P
5 F
-0.19 (iterator can be used to terminate a loop at an) 167.4 302.33 P
-0.19 (y time. W) 343 302.33 P
-0.19 (e illustrate this with the b) 381.54 302.33 P
-0.19 (ubble) 481.78 302.33 P
-0.29 (sort routine sho) 108 290.33 P
-0.29 (w belo) 169.38 290.33 P
-0.29 (w) 195.77 290.33 P
-0.29 (, which terminates the \336rst time a pass through the data occurs with no order) 202.34 290.33 P
(change.) 108 278.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(sum: INT := 0;) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop sum := sum + 1.upto!\05010\051; end;) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + sum + \325\134n\325;) 144 609.67 T
11 F
(-- Prints sum of integers from 1 to 10) 297.6 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(sum:INT := 0; i: INT := 0;) 144 371.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop while!\050i < 5\051;) 144 362.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   sum := sum + i;) 144 353.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   i := i + 1;) 144 344.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 335.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+ "Sum="+sum+\325\134n\325;) 144 326.67 T
11 F
(         -- Prints out Sum=10) 249.6 326.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(bubble_sort\050a:ARRAY{INT}\051 is) 144 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   loop) 144 249.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     done: BOOL := true;) 144 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     i:INT := 0;) 144 231.67 T
11 F
( -- Loop until the "break!" is encountered) 220.8 231.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(     loop until!\050i = \050a.size-2\051\051;) 144 222.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        if a[i] > a[i+1] then) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(          done := false) 144 204.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(          swap\050inout a[i], inout a[i+1]\051;) 144 195.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       end;) 144 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       i := i + 1;) 144 177.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end;) 144 168.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     if done then break!; end;) 144 159.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 150.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 141.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 604.12 2 L
V
0 Z
N
489.6 635.88 489.6 604.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 604 489.73 604 2 L
V
N
129.6 379.88 129.6 321.12 2 L
V
N
489.6 379.88 489.6 321.12 2 L
V
N
129.48 380 489.73 380 2 L
V
N
129.48 321 489.73 321 2 L
V
N
129.6 266.88 129.6 136.13 2 L
V
N
489.6 266.88 489.6 136.13 2 L
V
N
129.48 267 489.73 267 2 L
V
N
129.48 136 489.73 136 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 60
%%Page: "61" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Loops and Iter) 259.37 710.84 T
(ator) 314.33 710.84 T
(s :) 330.31 710.84 T
0 F
(3.1) 340.06 710.84 T
(Using iter) 353.36 710.84 T
(ator) 387.54 710.84 T
(s) 403.53 710.84 T
6 10 Q
(61) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(The) 108 659.33 T
9 F
(\325swap\325) 126.05 659.33 T
5 F
( routine is as we ha) 162.05 659.33 T
(v) 238.78 659.33 T
(e described earlier) 243.63 659.33 T
(.) 316.38 659.33 T
(Note that the abo) 108 597.33 T
(v) 176.45 597.33 T
(e) 181.3 597.33 T
9 F
(\325bubblesort\325) 188.24 597.33 T
5 F
(routine could easily be re) 266.24 597.33 T
(written to only use) 367.08 597.33 T
9 F
(until!) 444.3 597.33 T
5 F
(.) 480.3 597.33 T
-0.47 (In addition to the b) 108 575.33 P
-0.47 (uilt-in iterators, there are man) 182.02 575.33 P
-0.47 (y commonly used iterators in the INT class that pro-) 299.12 575.33 P
-0.48 (vide for interation o) 108 563.33 P
-0.48 (v) 186.11 563.33 P
-0.48 (er a range of v) 190.96 563.33 P
-0.48 (alues.  F) 246.54 563.33 P
-0.48 (or instance, the iterator) 279.03 563.33 P
9 F
-1.16 (upto!) 371.8 563.33 P
5 F
-0.48 (yileds successi) 406.64 563.33 P
-0.48 (v) 465.07 563.33 P
-0.48 (e inte) 469.92 563.33 P
-0.48 (ger) 491.23 563.33 P
(v) 108 551.33 T
(alues.) 112.75 551.33 T
-0.05 (The) 108 507.33 P
9 F
-0.13 (upto!) 126 507.33 P
5 F
-0.05 ( iterator returns successi) 155.99 507.33 P
-0.05 (v) 252.5 507.33 P
-0.05 (e inte) 257.35 507.33 P
-0.05 (gers from 10 upto 20, inclusi) 279.09 507.33 P
-0.05 (v) 394.11 507.33 P
-0.05 (e.  Belo) 398.96 507.33 P
-0.05 (w) 429.43 507.33 P
-0.05 (, are e) 436 507.33 P
-0.05 (xamples of) 459.89 507.33 P
(a fe) 108 495.33 T
(w other common iterators) 122.46 495.33 T
0.24 (The) 108 442.33 P
9 F
0.57 (\325times\325) 126.29 442.33 P
5 F
0.24 (iterator yields a certain number of times.  F) 174.86 442.33 P
0.24 (or iterating o) 349.63 442.33 P
0.24 (v) 401.61 442.33 P
0.24 (er a range with a certain) 406.46 442.33 P
(stride, use the) 108 430.33 T
9 F
(\325step\325) 165.77 430.33 T
5 F
(iterator. The follo) 207.77 430.33 T
(wing e) 278.34 430.33 T
(xample counts 11 e) 305.13 430.33 T
(v) 382.37 430.33 T
(en numbers starting at 18) 387.22 430.33 T
-0.42 (The) 108 359.33 P
9 F
-1.01 (\325step_upto!\325) 125.63 359.33 P
5 F
-0.42 ( iterator is similar) 197.63 359.33 P
-0.42 (, b) 266.79 359.33 P
-0.42 (ut instead of specifying a number of iterations, it speci\336es) 276.17 359.33 P
(the maxium v) 108 347.33 T
(alue to be reached. The follo) 162.75 347.33 T
(wing loop is equi) 276.91 347.33 T
(v) 345.83 347.33 T
(alent to the preceeding one.) 350.58 347.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(swap\050inout x:INT, inout y:INT\051 is) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   tmp:INT := x; x := y; y := tmp;) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum:INT:= 0; loop sum := sum+ 10.upto!\05020\051; end;) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i:INT :== 10; sum:INT := 0;) 144 475.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop 11.times!; sum := sum + i; i := i + 1; end;) 144 466.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum: INT := 0;) 144 410.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop sum := sum + 18.step!\05011,2\051; end;) 144 401.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The first argument is the number of iterations, 11 in this case) 144 392.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- the second argument is the stride) 144 383.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(sum: INT := 0;) 144 327.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop sum := sum + 18.step_upto!\05040,2\051; end;) 144 318.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 616.12 2 L
V
0 Z
N
489.6 647.88 489.6 616.12 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 616 489.73 616 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 61
%%Page: "62" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(62) 108 710.84 T
8 8 Q
(Loops and Iter) 236.34 710.84 T
(ator) 291.3 710.84 T
(s :) 307.28 710.84 T
0 F
(3.2 De\336ning Iter) 317.03 710.84 T
(ator) 376.3 710.84 T
(s) 392.29 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(3.2  De\336ning Iterator) 108 654 T
(s) 281.77 654 T
4 12 Q
(3.2.1) 108 605.98 T
7 F
(yield) 144.7 605.98 T
4 F
( statements) 169.37 605.98 T
5 10 Q
0.54 (Iterator de\336nitions are similar to routine de\336nitions, e) 108 583.31 P
0.54 (xcept that we need to indicate when control) 326.08 583.31 P
-0.16 (should be transferred back to the calling point.  In a routine, this transfer of control is indicated by a) 108 571.31 P
9 F
1.23 (return) 108 559.31 P
5 F
0.51 ( statement, which terminates the routine.  An iterator) 144 559.31 P
0.51 (, ho) 358.78 559.31 P
0.51 (we) 374.04 559.31 P
0.51 (v) 385.45 559.31 P
0.51 (er) 390.3 559.31 P
0.51 (, can return control in tw) 397.67 559.31 P
0.51 (o) 499 559.31 P
(dif) 108 547.31 T
(ferent w) 118.86 547.31 T
(ays.  It can either) 151.8 547.31 T
(\245) 108 529.31 T
(T) 121.54 529.31 T
(emporarily yield control to the callig point, ready to continue the ne) 126.95 529.31 T
(xt time it is encountered.) 397.88 529.31 T
(This yield of control is done by a) 121.54 517.31 T
9 F
(yield) 256.53 517.31 T
5 F
(statement) 292.53 517.31 T
(\245) 108 502.31 T
(Permanently yield control to the calling loop, terminating the loop in the process. This termina-) 121.54 502.31 T
(tion of the enclosing loop is achie) 121.54 490.31 T
(v) 256.28 490.31 T
(ed by a) 261.13 490.31 T
9 F
(quit) 292.51 490.31 T
5 F
( statemen or by reaching the end of the itera-) 316.51 490.31 T
(tort.) 121.54 478.31 T
(The) 108 456.31 T
9 F
(yield) 126.05 456.31 T
5 F
( must return a v) 156.05 456.31 T
(alue \050of the appropriate type\051, if the iterator has a return v) 218.57 456.31 T
(alue.) 448.81 456.31 T
(This iterator can be used to add up all the numbers in a particular inte) 108 349.31 T
(ger range) 385.58 349.31 T
4 12 Q
(3.2.2   Explicitl) 108 285.98 T
(y lea) 190.54 285.98 T
(ving an iterator using) 217.04 285.98 T
7 F
(quit) 342.41 285.98 T
5 10 Q
0.3 (When an iterator has yielded as man) 108 263.31 P
0.3 (y times as needed, it can either reach the end of it\325) 255.17 263.31 P
0.3 (s statement) 458.98 263.31 P
0.03 (list or e) 108 251.31 P
0.03 (xplicitly call a quit statement.) 137.9 251.31 P
1 F
0.03 (quit statements) 259.14 251.31 P
5 F
0.03 ( are used to terminate loops and may only ap-) 321.3 251.31 P
0.01 (pear in iterator de\336nitions. No v) 108 239.31 P
0.01 (alue is returned from an iterator when it quits.   No statements may) 236.12 239.31 P
-0.33 (follo) 108 227.31 P
-0.33 (w a) 126.64 227.31 P
9 F
-0.8 (quit) 142.63 227.31 P
5 F
-0.33 (statement in a statement list. The follo) 171.83 227.31 P
-0.33 (wing de\336nition of \325) 322.63 227.31 P
-0.33 (range!\325 is equi) 398.63 227.31 P
-0.33 (v) 455.48 227.31 P
-0.33 (alent to the) 460.23 227.31 P
(preceeding de\336nition:) 108 215.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(range!\050min, max:INT\051:INT is) 144 436.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    i:INT := min;) 144 427.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    loop until!\050i > max\051;) 144 418.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        yield i;           --) 144 409.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        i := i + 1;) 144 400.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 391.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 382.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum: INT := 0;  loop sum := sum+range!\0501,10\051; end;) 144 329.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(range!\050min, max:INT\051:INT is) 144 195.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    x:INT := min;) 144 186.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    loop if x > max then quit end;) 144 177.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        yield x;) 144 168.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        x := x + 1;) 144 159.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 150.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 141.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 444.85 129.6 368.1 2 L
V
0.25 H
0 Z
N
489.6 444.85 489.6 368.1 2 L
V
N
129.48 444.98 489.73 444.98 2 L
V
N
129.48 367.98 489.73 367.98 2 L
V
N
129.6 203.85 129.6 136.1 2 L
V
N
489.6 203.85 489.6 136.1 2 L
V
N
129.48 203.98 489.73 203.98 2 L
V
N
129.48 135.98 489.73 135.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 62
%%Page: "63" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Loops and Iter) 253.47 710.84 T
(ator) 308.43 710.84 T
(s :) 324.42 710.84 T
0 F
(3.2) 334.17 710.84 T
(De\336ning Iter) 347.46 710.84 T
(ator) 393.44 710.84 T
(s) 409.42 710.84 T
6 10 Q
(63) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(3.2.3   Contr) 108 658 T
(ol \337o) 176.45 658 T
(w within an iterator) 204.94 658 T
5 10 Q
(The follo) 108 635.33 T
(wing \336gures  illustrate the control \337o) 144.69 635.33 T
(w between an interator and its calling loop.) 292.77 635.33 T
-0.59 ( When the iterator is \336rst called,) 108 613.33 P
2.93 (control goes into the iterator) 108 601.33 P
2.51 (and then returns to the outer) 108 589.33 P
-0.44 (loop, when the iterator yields in) 108 577.33 P
(step [7]) 108 565.33 T
3.71 (After the \336rst yield, control) 108 483.01 P
-0.59 (continues in the outer loop until) 108 471.01 P
6.8 (the iterator is encountered) 108 459.01 P
-0.34 (ag) 108 447.01 P
-0.34 (ain in step [11] and control is) 117.39 447.01 P
-0.34 (ag) 108 435.01 P
-0.34 (ain transferred to the iterator) 117.39 435.01 P
-0.34 (,) 230.03 435.01 P
-0.58 (right after the point of the yield,) 108 423.01 P
(in step [12]) 108 411.01 T
1.13 (The abo) 108 345.01 P
1.13 (v) 141.48 345.01 P
1.13 (e sequence will con-) 146.32 345.01 P
0.01 (tinue until the) 108 333.01 P
9 F
0.03 (if) 166.1 333.01 P
5 F
0.01 (statement is) 184.13 333.01 P
-0.43 (true and  the) 108 321.01 P
9 F
-1.02 (quit) 158.5 321.01 P
5 F
-0.43 ( statement is) 182.5 321.01 P
5.48 (encountered in the iterator) 108 309.01 P
5.48 (.) 229.15 309.01 P
2.03 (Control is then transferred to) 108 297.01 P
1.07 (the end of the enclosing loop.) 108 285.01 P
3.18 (The iterator calling  conte) 108 273.01 P
3.18 (xt) 223.87 273.01 P
-0.19 (k) 108 261.01 P
-0.19 (eeps track of the internal state) 112.9 261.01 P
3.23 (of the iterator from the last) 108 249.01 P
(yield.) 108 237.01 T
239.03 489.68 504 620 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 7 Q
0 X
0 0 0 1 0 0 0 K
([1] sum := 0) 259.31 610.65 T
([2] loop) 259.31 592.2 T
([3]   i := range!\0501,10\051) 259.31 576.21 T
([8]   sum := sum + i;) 259.31 560.22 T
(    end;) 259.31 542.95 T
([4] x: INT  := min;) 382.36 576.21 T
([5] loop) 382.36 560.22 T
([6]  if x>max then quit end;) 382.36 544.24 T
([7]  yield x;) 382.36 528.25 T
(     x := x +1;) 382.36 512.26 T
(   end;) 382.36 496.27 T
375.65 577.83 375.65 578.9 377.5 577.83 375.65 576.77 4 Y
0.5 H
0 Z
N
375.65 577.83 375.65 578.9 377.5 577.83 375.65 576.77 4 Y
V
367.33 577.83 375.4 577.83 2 L
2 Z
N
263.14 601.28 264.21 601.28 263.14 599.43 262.08 601.28 4 Y
0 Z
N
263.14 601.28 264.21 601.28 263.14 599.43 262.08 601.28 4 Y
V
263.14 608.01 263.14 601.53 2 L
2 Z
N
263.14 584.54 264.21 584.54 263.14 582.7 262.08 584.54 4 Y
0 Z
N
263.14 584.54 264.21 584.54 263.14 582.7 262.08 584.54 4 Y
V
263.14 589.3 263.14 584.79 2 L
2 Z
N
386.24 569.35 387.3 569.35 386.24 567.5 385.17 569.35 4 Y
0 Z
N
386.24 569.35 387.3 569.35 386.24 567.5 385.17 569.35 4 Y
V
386.24 574.51 386.24 569.6 2 L
2 Z
N
387.07 552.29 388.14 552.29 387.07 550.44 386 552.29 4 Y
0 Z
N
387.07 552.29 388.14 552.29 387.07 550.44 386 552.29 4 Y
V
387.07 557.44 387.07 552.54 2 L
2 Z
N
386.24 534.69 387.3 534.69 386.24 532.84 385.17 534.69 4 Y
0 Z
N
386.24 534.69 387.3 534.69 386.24 532.84 385.17 534.69 4 Y
V
386.24 541.42 386.24 534.94 2 L
2 Z
N
275.61 557.41 275.34 556.38 273.82 557.88 275.87 558.45 4 Y
0 Z
N
275.61 557.41 275.34 556.38 273.82 557.88 275.87 558.45 4 Y
V
381.45 530.1 275.85 557.35 2 L
2 Z
N
J
505.2 622.17 503.53 201.33 2 L
1 H
N
(range!\050min, max: INT\051: INT is) 380.5 589.5 T
0 0 612 792 C
238.53 376.04 504 489.68 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 7 Q
0 X
0 0 0 1 0 0 0 K
([10] loop) 261.92 481.87 T
([11]   i := range!\0501,10\051) 261.92 465.3 T
([17]   sum := sum + i;) 261.92 448.72 T
(x: INT  := min;) 376.95 465.3 T
([14] loop) 376.95 448.72 T
9 8 Q
([15]) 376.95 432.15 T
9 7 Q
(if x>max then quit end) 405.75 432.15 T
([16]   yield x;) 376.95 414.91 T
([12]   x := x +1;) 376.95 399 T
([13] end;) 376.95 382.42 T
376.3 403.44 377.34 403.67 376.7 401.63 375.26 403.21 4 Y
0.5 H
0 Z
N
376.3 403.44 377.34 403.67 376.7 401.63 375.26 403.21 4 Y
V
362.67 465.33 376.25 403.68 2 L
2 Z
N
267.58 474.26 268.65 474.26 267.58 472.41 266.51 474.26 4 Y
0 Z
N
267.58 474.26 268.65 474.26 267.58 472.41 266.51 474.26 4 Y
V
267.58 479.28 267.58 474.51 2 L
2 Z
N
382.95 441.32 384.02 441.32 382.95 439.47 381.89 441.32 4 Y
0 Z
N
382.95 441.32 384.02 441.32 382.95 439.47 381.89 441.32 4 Y
V
382.95 446.74 382.95 441.57 2 L
2 Z
N
382.95 391.85 384.02 391.85 382.95 390 381.89 391.85 4 Y
0 Z
N
382.95 391.85 384.02 391.85 382.95 390 381.89 391.85 4 Y
V
382.95 397.28 382.95 392.1 2 L
2 Z
N
356.59 447.35 355.68 446.78 355.6 448.91 357.49 447.92 4 Y
0 Z
N
356.59 447.35 355.68 446.78 355.6 448.91 357.49 447.92 4 Y
V
375.2 417.86 356.72 447.14 2 L
2 Z
N
J
256.38 485.21 256.38 486.28 258.23 485.21 256.38 484.15 4 Y
0 Z
N
256.38 485.21 256.38 486.28 258.23 485.21 256.38 484.15 4 Y
V
257.92 432.42 250.51 432.42 250.03 485.21 256.13 485.21 4 L
2 Z
N
([9] end;) 262.56 430.07 T
438.62 448.28 438.62 447.21 436.77 448.28 438.62 449.34 4 Y
0 Z
N
438.62 448.28 438.62 447.21 436.77 448.28 438.62 449.34 4 Y
V
416.95 382.9 500.98 383.29 500.98 448.28 438.87 448.28 4 L
2 Z
N
383.62 423.71 384.69 423.71 383.62 421.86 382.55 423.71 4 Y
0 Z
N
383.62 423.71 384.69 423.71 383.62 421.86 382.55 423.71 4 Y
V
383.62 429.14 383.62 423.96 2 L
2 Z
N
0 0 612 792 C
237.65 230.34 504 373.68 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 7 Q
0 X
0 0 0 1 0 0 0 K
([19] loop) 257.72 347.92 T
([20]   i := range!\0501,10\051) 257.72 331.35 T
(       sum := sum + i;) 257.72 314.77 T
( [26] #OUT + sum+\325\134n\325;) 253.72 265.62 T
(x: INT  := min;) 373.57 330.51 T
([23] loop) 373.57 313.94 T
([24]    if x > max then) 373.57 297.36 T
(        yield x;) 373.57 271.46 T
([21]    x := x +1;) 373.57 259.55 T
([22] end;) 373.57 241.64 T
266.31 272.41 266.5 271.36 264.49 272.09 266.12 273.46 4 Y
0.5 H
0 Z
N
266.31 272.41 266.5 271.36 264.49 272.09 266.12 273.46 4 Y
V
372.67 291.33 266.56 272.46 2 L
2 Z
N
J
([18] end;) 258.36 296.12 T
([25]       quit) 373.57 289.36 T
(        end;) 373.57 281.36 T
377.35 266.25 378.37 266.55 377.86 264.48 376.32 265.96 4 Y
0 Z
N
377.35 266.25 378.37 266.55 377.86 264.48 376.32 265.96 4 Y
V
358.67 330.67 377.28 266.49 2 L
2 Z
N
430.58 316.17 430.58 315.1 428.73 316.17 430.58 317.23 4 Y
0 Z
N
430.58 316.17 430.58 315.1 428.73 316.17 430.58 317.23 4 Y
V
412.9 243.46 479.59 243.89 479.59 316.17 430.83 316.17 4 L
2 Z
N
379.57 250.99 380.63 250.99 379.57 249.14 378.5 250.99 4 Y
0 Z
N
379.57 250.99 380.63 250.99 379.57 249.14 378.5 250.99 4 Y
V
379.57 256.42 379.57 251.24 2 L
2 Z
N
378.23 307.32 379.3 307.32 378.23 305.48 377.17 307.32 4 Y
0 Z
N
378.23 307.32 379.3 307.32 378.23 305.48 377.17 307.32 4 Y
V
378.23 312.06 378.23 307.57 2 L
2 Z
N
254.73 349.7 254.73 350.77 256.58 349.7 254.73 348.63 4 Y
0 Z
N
254.73 349.7 254.73 350.77 256.58 349.7 254.73 348.63 4 Y
V
256.24 295.91 248.5 295.91 248 349.7 254.48 349.7 4 L
2 Z
N
265.56 340.13 266.62 340.13 265.56 338.28 264.49 340.13 4 Y
0 Z
N
265.56 340.13 266.62 340.13 265.56 338.28 264.49 340.13 4 Y
V
265.56 345.15 265.56 340.38 2 L
2 Z
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 63
%%Page: "64" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(64) 108 710.84 T
8 8 Q
(Loops and Iter) 236.34 710.84 T
(ator) 291.3 710.84 T
(s :) 307.28 710.84 T
0 F
(3.2 De\336ning Iter) 317.03 710.84 T
(ator) 376.3 710.84 T
(s) 392.29 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(3.2.4   The) 108 658 T
7 F
(once) 169.37 658 T
4 F
( ar) 195.38 658 T
(gument mode) 209.88 658 T
5 10 Q
0.25 (One problem with the abo) 108 635.33 P
0.25 (v) 213.29 635.33 P
0.25 (e de\336nition of) 218.15 635.33 P
9 F
0.61 (\325range!\325) 277.52 635.33 P
5 F
0.25 ( is that the ar) 325.52 635.33 P
0.25 (guments to the function will be) 378.01 635.33 P
(e) 108 623.33 T
(v) 112.19 623.33 T
(aluated each time through the loop. Consider the follo) 116.94 623.33 T
(wing loop) 332.5 623.33 T
0.82 (This, some) 108 543.33 P
0.82 (what silly) 152.46 543.33 P
0.82 (, e) 191.79 543.33 P
0.82 (xample will go into an in\336nite loop, since the ar) 201.9 543.33 P
0.82 (gument) 400.72 543.33 P
9 F
1.96 (\325max\325) 434.03 543.33 P
5 F
0.82 ( increases) 464.03 543.33 P
(each time through the loop.) 108 531.33 T
-0.05 (Iterator ar) 108 509.33 P
-0.05 (gument are) 147.47 509.33 P
1 F
-0.05 (hot) 194.59 509.33 P
5 F
-0.05 ( by def) 207.36 509.33 P
-0.05 (ault. This means that the ar) 234.93 509.33 P
-0.05 (guments will be re-e) 342.83 509.33 P
-0.05 (v) 424.37 509.33 P
-0.05 (aluated and passed) 429.12 509.33 P
0.16 (to the iterator each time through the loop. When the ar) 108 497.33 P
0.16 (guments to the iterator are constant, it is not) 326.89 497.33 P
-0.3 (important whether the) 108 485.33 P
-0.3 (y are re e) 195.57 485.33 P
-0.3 (v) 231.33 485.33 P
-0.3 (aluated or not. Ho) 236.08 485.33 P
-0.3 (we) 307.14 485.33 P
-0.3 (v) 318.55 485.33 P
-0.3 (er) 323.4 485.33 P
-0.3 (, in man) 330.77 485.33 P
-0.3 (y cases it is important to ensure that) 362.51 485.33 P
(the ar) 108 473.33 T
(gument is only e) 130.31 473.33 T
(v) 196.45 473.33 T
(aluated the \336rst time through the loop.) 201.2 473.33 T
0.6 (This happens to) 108 451.33 P
9 F
1.43 (once-) 175.62 451.33 P
5 F
0.6 (ar) 205.62 451.33 P
0.6 (guments. Ar) 213.21 451.33 P
0.6 (guments which are mark) 263.07 451.33 P
0.6 (ed with the mode  \324) 363.35 451.33 P
9 F
1.43 (once) 443.82 451.33 P
5 F
0.6 ( are only) 467.82 451.33 P
-0.26 (e) 108 439.33 P
-0.26 (v) 112.19 439.33 P
-0.26 (aluated the \336rst time the) 116.94 439.33 P
-0.26 (y are encountered during a loop e) 212.43 439.33 P
-0.26 (x) 344.59 439.33 P
-0.26 (ecution.  Thus, the correct de\336nition of) 349.44 439.33 P
(the \325) 108 427.33 T
(range\325 iterator is:) 125.55 427.33 T
0.6 (Note that) 108 329.33 P
9 F
1.43 (\325once\325) 148.63 329.33 P
5 F
0.6 (ar) 192.07 329.33 P
0.6 (guments are only mark) 199.66 329.33 P
0.6 (ed at the point of de\336nition, not at the point of call.) 293.28 329.33 P
(Thus, in) 108 317.33 T
(v) 140.38 317.33 T
(oking the loop will look the same as before) 145.18 317.33 T
0.45 (The) 108 273.33 P
9 F
1.07 (\325self\325) 126.5 273.33 P
5 F
0.45 ( parameter \050i.e. the object on which the iterator is being called\051 is) 162.5 273.33 P
10 F
0.45 (always) 431.29 273.33 P
5 F
0.45 ( a once pa-) 459.07 273.33 P
(rameter) 108 261.33 T
(.) 137.99 261.33 T
1.07 (In the abo) 108 199.33 P
1.07 (v) 149.98 199.33 P
1.07 (e e) 154.83 199.33 P
1.07 (xample, though the v) 167.12 199.33 P
1.07 (alue of) 254.52 199.33 P
9 F
2.56 (\325i\325) 286.65 199.33 P
5 F
1.07 (changes the second time through the loop, the) 313.21 199.33 P
(change is ignored - the \336rst v) 108 187.33 T
(alue of) 224.4 187.33 T
9 F
(\325i\325) 254.39 187.33 T
5 F
(is used.) 278.39 187.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(sum:INT := 0;) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(max:INT := 5;) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop  sum := sum + range!\0503,max\051;) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(max := max+2;) 178.2 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(range!\050once min, once max:INT\051:INT is) 144 407.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i:INT := min;) 178.2 398.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop until!\050i > max\051;) 178.2 389.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(yield i) 190.8 380.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i := i + 1;) 190.8 371.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 362.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 353.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum:INT := 0; loop sum := sum + range!\0503,5\051; end;) 144 297.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i: INT := 5;) 144 241.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop #OUT+i.upto!\05011\051!+\325 \325; i:=1; end;) 144 232.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The above loop prints out 5 6 7 8 9 10 11) 144 223.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 562.12 2 L
V
0 Z
N
489.6 611.88 489.6 562.12 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 562 489.73 562 2 L
V
N
129.6 415.88 129.6 348.13 2 L
V
N
489.6 415.88 489.6 348.13 2 L
V
N
129.48 416 489.73 416 2 L
V
N
129.48 348 489.73 348 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 64
%%Page: "65" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Loops and Iter) 253.47 710.84 T
(ator) 308.43 710.84 T
(s :) 324.42 710.84 T
0 F
(3.2) 334.17 710.84 T
(De\336ning Iter) 347.46 710.84 T
(ator) 393.44 710.84 T
(s) 409.42 710.84 T
6 10 Q
(65) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.29 (The  follo) 108 659.33 P
0.29 (wing more comple) 147.76 659.33 P
0.29 (x e) 223.18 659.33 P
0.29 (xample will sum up some of the elements of the \336rst ro) 235.26 659.33 P
0.29 (w although) 458.99 659.33 P
(the v) 108 647.33 T
(ariable) 127.47 647.33 T
9 F
(row) 157.18 647.33 T
5 F
( will contain dif) 175.18 647.33 T
(ferent ro) 238.54 647.33 T
(ws in consecuti) 272.44 647.33 T
(v) 333.85 647.33 T
(e loop iterations.) 338.7 647.33 T
4 12 Q
(3.2.5) 108 548 T
7 F
(out) 144.7 548 T
4 F
( and) 161.38 548 T
7 F
(inout) 189.38 548 T
4 F
( ar) 215.4 548 T
(gument modes) 229.9 548 T
5 10 Q
-0.31 (Y) 108 525.33 P
-0.31 (ield causes assignment to) 114.67 525.33 P
9 F
-0.74 (out) 217.31 525.33 P
5 F
-0.31 ( and) 235.31 525.33 P
9 F
-0.74 (inout) 254.13 525.33 P
5 F
-0.31 ( r) 284.13 525.33 P
-0.31 (guments in the caller i.e. these ar) 289.48 525.33 P
-0.31 (guments are assigned) 419.08 525.33 P
(each time when the iterator yields..) 108 513.33 T
(Which may be used by:) 108 406.33 T
(Note that no assignment to) 108 317.33 T
9 F
(out) 217.72 317.33 T
5 F
(and) 241.72 317.33 T
9 F
(inout) 258.66 317.33 T
5 F
( ar) 288.66 317.33 T
(guments tak) 298.75 317.33 T
(es place when an iterator quits.) 347.26 317.33 T
4 12 Q
(3.2.6) 108 276 T
7 F
(pre) 144.7 276 T
4 F
( and) 162.04 276 T
7 F
(post) 190.04 276 T
4 F
( conditions in iterator) 212.72 276 T
(s) 335.23 276 T
5 10 Q
-0.28 (The beha) 108 253.33 P
-0.28 (vior of pre- and post- conditions in iterator de\336nitions is a natural e) 144.45 253.33 P
-0.28 (xtension of their beha) 409.78 253.33 P
-0.28 (v-) 495.67 253.33 P
-0.25 (ior in routine de\336nitions.  The) 108 241.33 P
9 F
-0.61 (pre) 228.97 241.33 P
5 F
-0.25 ( clause must be true each time the iterator is called and the) 246.97 241.33 P
9 F
-0.61 (post) 480 241.33 P
5 F
(clause must be true each time it yields. The) 108 229.33 T
9 F
(post) 283.53 229.33 T
5 F
( clause is not e) 307.53 229.33 T
(v) 366.16 229.33 T
(aluated when an iterator quits.) 370.91 229.33 T
4 12 Q
(3.2.7   Ar) 108 188 T
(gument e) 157.85 188 T
(v) 211.01 188 T
(aluation in iterator) 217.44 188 T
(s) 321.95 188 T
5 10 Q
-0.17 (At a more technical le) 108 165.33 P
-0.17 (v) 195.38 165.33 P
-0.17 (el, when an iterator is \336rst called in a loop, the e) 200.23 165.33 P
-0.17 (xpressions for) 390.7 165.33 P
9 F
-0.41 (self) 449.24 165.33 P
5 F
-0.17 ( and for) 473.24 165.33 P
0.28 (each) 108 153.33 P
9 F
0.67 (once) 129.1 153.33 P
5 F
0.28 ( ar) 153.1 153.33 P
0.28 (gument are e) 163.47 153.33 P
0.28 (v) 215.43 153.33 P
0.28 (aluated left to right. Then the e) 220.18 153.33 P
0.28 (xpressions for ar) 345.31 153.33 P
0.28 (guments which are not) 412.34 153.33 P
9 F
0.71 (once) 108 141.33 P
5 F
0.3 ( \050) 132 141.33 P
9 F
0.71 (in) 138.13 141.33 P
5 F
0.3 ( or) 150.13 141.33 P
9 F
0.71 ( inout) 161.25 141.33 P
5 F
0.3 ( before the call,) 197.96 141.33 P
9 F
0.71 (out) 263.85 141.33 P
5 F
0.3 ( or) 281.85 141.33 P
9 F
0.71 (inout) 295.77 141.33 P
5 F
0.3 ( after the call\051 are e) 325.77 141.33 P
0.3 (v) 404.46 141.33 P
0.3 (aluated left to right. On) 409.21 141.33 P
0.36 (subsequent calls, only the e) 108 129.33 P
0.36 (xpressions for ar) 218.99 129.33 P
0.36 (guments which are not) 286.18 129.33 P
9 F
0.86 (once) 380.94 129.33 P
5 F
0.36 ( are re-e) 404.94 129.33 P
0.36 (v) 438.15 129.33 P
0.36 (aluated.) 442.9 129.33 P
9 F
0.86 (self) 480 129.33 P
5 F
(and an) 108 117.33 T
(y) 134.23 117.33 T
9 F
(once) 141.73 117.33 T
5 F
( ar) 165.73 117.33 T
(guments retain their earlier v) 175.82 117.33 T
(alues.) 291.1 117.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(loop) 144 627.67 T
11 F
(-- Sum up some of the elements of the first row!) 187.2 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(row := matrix.row!;) 178.2 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum := sum + row.elt!;) 178.2 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- row is only evaluated at the first iteration!) 168 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(range!\050once min, once max:INT, out val:INT\051 is) 144 493.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i: INT := min;) 178.2 484.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop until!\050i > max\051;) 178.2 475.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(val := i;) 190.8 466.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(yield;) 190.8 457.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i := i + 1;) 190.8 448.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 439.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum:INT := 0;) 144 386.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop res:INT;) 144 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(range2!\0503,5, out res\051;) 178.2 368.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum :=  sum + res;) 178.2 359.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 350.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+sum+\325\134n\325; -- Prints out 12) 144 341.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 586.12 2 L
V
0 Z
N
489.6 635.88 489.6 586.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 586 489.73 586 2 L
V
N
129.6 501.88 129.6 425.12 2 L
V
N
489.6 501.88 489.6 425.12 2 L
V
N
129.48 502 489.73 502 2 L
V
N
129.48 425 489.73 425 2 L
V
N
129.6 394.88 129.6 336.13 2 L
V
N
489.6 394.88 489.6 336.13 2 L
V
N
129.48 395 489.73 395 2 L
V
N
129.48 336 489.73 336 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 65
%%Page: "66" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(66) 108 710.84 T
8 8 Q
(Loops and Iter) 236.34 710.84 T
(ator) 291.3 710.84 T
(s :) 307.28 710.84 T
0 F
(3.2 De\336ning Iter) 317.03 710.84 T
(ator) 376.3 710.84 T
(s) 392.29 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(3.2.8    P) 108 658 T
(oints to note) 155.56 658 T
4 10 Q
(Iterator usa) 108 629.33 T
(g) 162.36 629.33 T
(e) 168.57 629.33 T
5 F
(\245) 108 613.33 T
(Iterators may only be called within) 121.54 613.33 T
9 F
(loop) 263.74 613.33 T
5 F
( statements.) 287.74 613.33 T
(\245) 108 598.33 T
9 F
(once) 121.54 598.33 T
5 F
(mode ar) 151.54 598.33 T
(guments are only mark) 183.85 598.33 T
(ed at the point of de\336nition, not at the point of call, un-) 275.68 598.33 T
(lik) 121.54 586.33 T
(e) 132 586.33 T
9 F
(out) 138.94 586.33 T
5 F
(and) 162.94 586.33 T
9 F
(inout) 179.88 586.33 T
5 F
( ar) 209.88 586.33 T
(guments.) 219.97 586.33 T
9 F
(out) 261.36 586.33 T
5 F
( and) 279.36 586.33 T
9 F
(inout) 298.8 586.33 T
5 F
(ar) 334.8 586.33 T
(guments cannot be) 342.39 586.33 T
9 F
(once) 419.88 586.33 T
5 F
(ar) 449.88 586.33 T
(guments) 457.47 586.33 T
(as well.) 121.54 574.33 T
(\245) 108 559.33 T
(Each te) 121.54 559.33 T
(xtual instance of an iterator in a loop is distinct. The follo) 151.1 559.33 T
(wing loop prints out  [2,2]) 380.83 559.33 T
([3,3] [4,4] \050and not [2,3]\051) 121.54 547.33 T
(\245) 108 469.33 T
(Not all iterators reach their end or quit - e) 121.54 469.33 T
(x) 287.74 469.33 T
(ecution may be terminated because some other itera-) 292.59 469.33 T
(tor in the same loop quit.  See the ne) 121.54 457.33 T
(xt point.) 267.49 457.33 T
(\245) 108 442.33 T
(Iterator instances in a conditional statement are e) 121.54 442.33 T
(v) 317.08 442.33 T
(aluated e) 321.83 442.33 T
(v) 357.4 442.33 T
(ery time the) 362.25 442.33 T
(y are encountered.) 409.87 442.33 T
(The follo) 121.54 430.33 T
(wing loop prints out [2,2] [3,2] [4,3] and then is terminated when the \336rst iterator) 158.23 430.33 T
(quits, e) 121.54 418.33 T
(v) 150.18 418.33 T
(en though the second iterator is not yet complete) 155.03 418.33 T
(\245) 108 340.33 T
(The e) 121.54 340.33 T
(xpressions for) 143.88 340.33 T
9 F
(self) 202.76 340.33 T
5 F
( and for) 226.76 340.33 T
9 F
(once) 260.36 340.33 T
5 F
( ar) 284.36 340.33 T
(guments may not themselv) 294.45 340.33 T
(es contain iterator calls.) 401.8 340.33 T
(\050Such iter calls w) 121.54 328.33 T
(ould not be useful an) 191.15 328.33 T
(yw) 274.88 328.33 T
(ay) 287 328.33 T
(, since the) 295.79 328.33 T
(y w) 335.91 328.33 T
(ould only e) 350.53 328.33 T
(x) 395.38 328.33 T
(ecute their \336rst itera-) 400.23 328.33 T
(tion.\051 Thus, the follo) 121.54 316.33 T
(wing code is ille) 203.79 316.33 T
(g) 269.47 316.33 T
(al, e) 274.42 316.33 T
(v) 290.83 316.33 T
(en though the \325) 295.68 316.33 T
(times!\325 iterator is a perfectly v) 355.77 316.33 T
(alid it-) 476.88 316.33 T
(erator on inte) 121.54 304.33 T
(gers.) 174.71 304.33 T
(\245) 108 262.33 T
(Iterators may call themselv) 121.54 262.33 T
(es recursi) 229.98 262.33 T
(v) 267.77 262.33 T
(ely as routines do. As iterators are normally supposed to) 272.62 262.33 T
(yield more than once, one should not for) 121.54 250.33 T
(get to de\336ne a loop within the iterator to catch all of) 283.56 250.33 T
(these results.) 121.54 238.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(loop) 144 527.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a: INT := range!\0502,4\051;) 178.2 518.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b: INT := range!\0502,4\051;) 178.2 509.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+ "["+a +","+ b+"] ";) 178.2 500.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 491.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b: INT := 0;) 144 398.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop a: INT := range!\0502,4\051;) 144 389.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if a.is_even then  b := range!\0502,4\051; end;) 178.2 380.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+ "["+a +","+ b+"] ";) 178.2 371.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 362.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop a: INT := range!\0503,4\051.times!; end;) 144 284.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class BINARY_TREE is) 144 218.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr left,right: SAME; -- subtrees) 178.2 209.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr data: INT;) 178.2 200.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(elt!: INT) 178.2 191.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is) 178.2 182.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if void\050self\051 then quit end;) 190.8 173.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(yield data;) 190.8 164.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop yield left.elt! end; -- yield data in the left subtree.) 190.8 155.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop yield right.elt! end;) 190.8 146.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- elt!) 178.2 137.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class BINARY_TREE) 144 128.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 535.88 129.6 486.12 2 L
V
0 Z
N
489.6 535.88 489.6 486.12 2 L
V
N
129.48 536 489.73 536 2 L
V
N
129.48 486 489.73 486 2 L
V
N
129.6 406.88 129.6 357.12 2 L
V
N
489.6 406.88 489.6 357.12 2 L
V
N
129.48 407 489.73 407 2 L
V
N
129.48 357 489.73 357 2 L
V
N
129.6 226.88 129.6 123.13 2 L
V
N
489.6 226.88 489.6 123.13 2 L
V
N
129.48 227 489.73 227 2 L
V
N
129.48 123 489.73 123 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 66
%%Page: "67" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Loops and Iter) 252.77 710.84 T
(ator) 307.73 710.84 T
(s :) 323.72 710.84 T
0 F
(3.3) 333.47 710.84 T
(Iter) 346.76 710.84 T
(ator Examples) 358.73 710.84 T
6 10 Q
(67) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(\245) 108 659.33 T
(If an iterator in comple) 121.54 659.33 T
(x e) 213.59 659.33 T
(xpression quits, the surrounding e) 225.38 659.33 T
(xpression might not be fully e) 360.5 659.33 T
(v) 479.97 659.33 T
(alu-) 484.72 659.33 T
(ated.) 121.54 647.33 T
2 F
(When the iterator elt! terminates the surr) 121.54 605.33 T
(ounding loop, an opening bracket has al-) 301.87 605.33 T
(r) 121.54 593.33 T
(eady been printed. The expr) 125.31 593.33 T
(ession pr) 249.52 593.33 T
(oducing the matching closing bracket will not) 289.26 593.33 T
(be evaluated, hence the algorithm will always print a bogus closing bracket in the) 121.54 581.33 T
(end. The standar) 121.54 569.33 T
(d solution looks as follows:) 195.7 569.33 T
(The extra paratheses for) 121.54 527.33 T
(ce the whole line to be evaluated \336rst. As this evaluation will) 227.6 527.33 T
(be aborted by the quit of the iterator the printing evaluation will not happen for the) 121.54 515.33 T
(last iterator call.) 121.54 503.33 T
4 F
(Iterator de\336nitions) 108 475.33 T
5 F
(\245) 108 459.33 T
(Iterator names al) 121.54 459.33 T
(w) 188.64 459.33 T
(ays end with an e) 195.76 459.33 T
(xclamation mark \324) 265.04 459.33 T
9 F
(!) 338.36 459.33 T
5 F
(\325.) 344.36 459.33 T
(\245) 108 444.33 T
(Y) 121.54 444.33 T
(ield is not permitted within a protect statement \050see the Chapter on Exceptions\051) 128.21 444.33 T
(\245) 108 429.33 T
(Iterators enjo) 121.54 429.33 T
(y the same access options as routines. Just as with routine de\336nitions, iterator de-) 174.48 429.33 T
(\336nintions may be mark) 121.54 417.33 T
(ed pri) 213.94 417.33 T
(v) 236.74 417.33 T
(ate.) 241.49 417.33 T
(\245) 108 402.33 T
(Iterator o) 121.54 402.33 T
(v) 158.32 402.33 T
(erloading and conformance rules are the same as those for routines.) 163.17 402.33 T
(\245) 108 387.33 T
(An iter ar) 121.54 387.33 T
(gument may ha) 159.68 387.33 T
(v) 221.14 387.33 T
(e only one mode. Thus, it is neither possible nor meaningful to ha) 225.99 387.33 T
(v) 488.55 387.33 T
(e) 493.4 387.33 T
(\325) 121.54 375.33 T
9 F
(once inout) 124.87 375.33 T
5 F
(\325 or \325) 184.87 375.33 T
9 F
(once out) 204.86 375.33 T
5 F
(\325 ar) 252.86 375.33 T
(guments.) 266.28 375.33 T
108 313.98 504 317 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 315.49 540 315.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(3.3) 108 323 T
(Iterator Examples) 143.03 323 T
5 10 Q
-0.06 (Some of the follo) 108 294.31 P
-0.06 (wing e) 177.28 294.31 P
-0.06 (xamples mak) 204.01 294.31 P
-0.06 (e use of arrays, which will be introduced in the chapter on P) 256.9 294.31 P
-0.06 (a-) 496.23 294.31 P
(rametrized Classes) 108 282.31 T
-0.23 (Because the) 108 260.31 P
-0.23 (y are so useful, the \324) 155.65 260.31 P
9 F
-0.56 (while!) 235.57 260.31 P
5 F
-0.23 (\325, \324) 271.57 260.31 P
9 F
-0.56 (until!) 283 260.31 P
5 F
-0.23 (\325 and \324) 319 260.31 P
9 F
-0.56 (break!) 344.63 260.31 P
5 F
-0.23 (\325 iterators are b) 380.63 260.31 P
-0.23 (uilt into the lan-) 440.53 260.31 P
(guage.  Here\325) 108 248.31 T
(s ho) 161.59 248.31 T
(w \324) 177.73 248.31 T
9 F
(while!) 190.78 248.31 T
5 F
(\325 could be written if it were not a primiti) 226.78 248.31 T
(v) 387.9 248.31 T
(e) 392.75 248.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(loop  #OUT + "\050" + c.elt! + "\051\134n"  end;) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + \050 "\050" + c.elt! + "\051\134n" \051; end;) 178.2 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(while!\050pred:BOOL\051 is) 144 228.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Yields as long as \324pred\325 is true) 178.2 219.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(loop) 178.2 210.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if pred then yield) 190.8 201.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else quit) 190.8 192.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end) 190.8 183.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end) 178.2 174.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end.) 144 165.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 236.85 129.6 160.1 2 L
V
0.25 H
0 Z
N
489.6 236.85 489.6 160.1 2 L
V
N
129.48 236.98 489.73 236.98 2 L
V
N
129.48 159.98 489.73 159.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 67
%%Page: "68" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(68) 108 710.84 T
8 8 Q
(Loops and Iter) 235.64 710.84 T
(ator) 290.6 710.84 T
(s :) 306.58 710.84 T
0 F
(3.3 Iter) 316.33 710.84 T
(ator Examples) 341.6 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.35 (The b) 108 659.33 P
-0.35 (uilt-in class \324) 130.5 659.33 P
9 F
-0.83 (INT) 182.03 659.33 P
5 F
-0.35 (\325 de\336nes some useful iterators.  Here\325) 200.03 659.33 P
-0.35 (s the de\336nition of \324) 347.64 659.33 P
9 F
-0.83 (upto!) 422.37 659.33 P
5 F
-0.35 (\325.  Unlik) 452.37 659.33 P
-0.35 (e the) 485.19 659.33 P
-0.14 (ar) 108 647.33 P
-0.14 (gument \324) 115.59 647.33 P
9 F
-0.34 (pred) 151.28 647.33 P
5 F
-0.14 (\325 used abo) 175.28 647.33 P
-0.14 (v) 215.95 647.33 P
-0.14 (e, \324) 220.8 647.33 P
9 F
-0.34 (i) 233.43 647.33 P
5 F
-0.14 (\325 here is declared to be \324) 239.43 647.33 P
9 F
-0.34 (once) 335.22 647.33 P
5 F
-0.14 (\325; when \324) 359.22 647.33 P
9 F
-0.34 (upto!) 395.04 647.33 P
5 F
-0.14 (\325 is called, the ar) 425.04 647.33 P
-0.14 (gu-) 490.67 647.33 P
(ment is only e) 108 635.33 T
(v) 164.14 635.33 T
(aluated once, the \336rst time the iterator is called in the loop.) 168.89 635.33 T
(T) 108 519.33 T
(o add up the inte) 113.31 519.33 T
(gers 1 through 10, one might say) 179.82 519.33 T
0.09 (Or) 108 475.33 P
0.09 (, using the library iterator \324) 118.15 475.33 P
9 F
0.21 (sum!) 226.35 475.33 P
5 F
0.09 (\325 lik) 250.35 475.33 P
0.09 (e this.  \324) 266.72 475.33 P
9 F
0.21 (x) 299.2 475.33 P
5 F
0.09 (\325 needs to be declared \050b) 305.2 475.33 P
0.09 (ut not initialized\051 outside) 403.46 475.33 P
(the loop, so its v) 108 463.33 T
(alue is a) 173.59 463.33 T
(v) 206.16 463.33 T
(ailable after the loop terminates.) 210.91 463.33 T
-0.09 (Some of the most common uses of iters are with container objects.  Arrays, lists, sets, trees, strings,) 108 419.33 P
-0.27 (and v) 108 407.33 P
-0.27 (ectors all ha) 129.52 407.33 P
-0.27 (v) 177.11 407.33 P
-0.27 (e iterators to yield all their elements.  Here we print all the elements of some con-) 181.96 407.33 P
(tainer \324) 108 395.33 T
9 F
(a) 136.6 395.33 T
5 F
(\325) 142.6 395.33 T
(This doubles the elements of array \324) 108 342.33 T
9 F
(a) 251.86 342.33 T
5 F
(\325) 257.86 342.33 T
0.02 (This computes the dot product of tw) 108 298.33 P
0.02 (o v) 253.01 298.33 P
0.02 (ectors \324) 265.38 298.33 P
9 F
0.05 (a) 295.11 298.33 P
5 F
0.02 (\325 and \324) 301.11 298.33 P
9 F
0.05 (b) 327.26 298.33 P
5 F
0.02 (\325.  There is also a b) 333.26 298.33 P
0.02 (uilt-in method \324) 409.55 298.33 P
9 F
0.05 (dot) 472.37 298.33 P
5 F
0.02 (\325 to) 490.37 298.33 P
(do this.  \324) 108 286.33 T
9 F
(x) 145.78 286.33 T
5 F
(\325 needs to be declared \050b) 151.78 286.33 T
(ut not initialized\051 before the loop.) 249.6 286.33 T
4 F
(Separating elements of a list) 108 236.33 T
5 F
-0.01 (When printing out the elements of a container) 108 213.33 P
-0.01 (, or other kinds of lists, it is usually appropriate to in-) 291.09 213.33 P
-0.02 (sert a separator between all the elements \050b) 108 201.33 P
-0.02 (ut, of course, not after the last element\051.  There is a con-) 280.12 201.33 P
(v) 108 189.33 T
(enient iterator in the string class that does e) 112.85 189.33 T
(xactly this:.) 286.01 189.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(upto!\050once i:SAME\051:SAME is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Yield successive integers from self to `i' inclusive.) 178.2 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(r::=self;) 178.2 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop) 178.2 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(until!\050r>i\051;) 190.8 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(yield r;) 190.8 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r:=r+1) 190.8 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end) 178.2 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum: INT := 0; loop sum := sum + 1.upto!\05010\051 end) 144 499.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(x: INT; loop x:=INT::sum!\0501.upto!\05010\051\051 end) 144 443.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a: ARRAY{INT} := |1,2,7|;) 144 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop #OUT + a.elt!.str + \325\134n\325  end) 144 366.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop a.set!\050a.elt! * 2\051 end) 144 322.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop x:=sum!\050a.elt! * b.elt!\051 end) 144 266.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a: ARRAY{INT} := |1,2,3|;) 144 169.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop) 144 160.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT +  ",".separate!\050a.elt!.str\051; end;) 178.2 160.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Prints out 1,2,3) 144 151.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 538.12 2 L
V
0 Z
N
489.6 623.88 489.6 538.12 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 538 489.73 538 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 68
%%Page: "69" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Loops and Iter) 252.77 710.84 T
(ator) 307.73 710.84 T
(s :) 323.72 710.84 T
0 F
(3.3) 333.47 710.84 T
(Iter) 346.76 710.84 T
(ator Examples) 358.73 710.84 T
6 10 Q
(69) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.34 (The) 108 659.33 P
9 F
0.81 (separate!) 126.39 659.33 P
5 F
0.34 ( iterator is called on the string which you wish to use to separate components of) 180.39 659.33 P
0.23 (the list.  In this case, the list elements will be separated by a comma. The de\336nition of this iterator) 108 647.33 P
(is as sho) 108 635.33 T
(wn belo) 141.64 635.33 T
(w) 173.33 635.33 T
0.24 (Note that the ar) 108 537.33 P
0.24 (gument to the iterator is not a) 170.47 537.33 P
9 F
0.57 (once) 292.41 537.33 P
5 F
0.24 ( ar) 316.41 537.33 P
0.24 (gument, and will be e) 326.74 537.33 P
0.24 (v) 413.83 537.33 P
0.24 (aluated each time the) 418.58 537.33 P
(iterator is called.) 108 525.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class STR is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  ...) 144 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  separate!\050s: STR\051: STR is) 144 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- On the first iteration just outputs `s', on later iterations) 168 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     -- it outputs self followed by `s'.) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(     yield s.str; loop yield self + s.str end) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end;) 144 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 556.12 2 L
V
0 Z
N
489.6 623.88 489.6 556.12 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 556 489.73 556 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 69
%%Page: "70" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(70) 108 710.84 T
8 8 Q
(Loops and Iter) 235.64 710.84 T
(ator) 290.6 710.84 T
(s :) 306.58 710.84 T
0 F
(3.3 Iter) 316.33 710.84 T
(ator Examples) 341.6 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 70
%%Page: "71" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Code Inclusion and P) 226.33 710.84 T
(ar) 308.96 710.84 T
(tial Classes :) 316.99 710.84 T
0 F
(4.1) 365.31 710.84 T
(Include Clauses) 378.6 710.84 T
6 10 Q
(71) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Code Inclusion and) 108 642 S
-0.25 (P) 108 600 S
-0.25 (ar) 128.34 600 S
-0.25 (tial Classes) 163.99 600 S
5 10 Q
0.04 (Object oriented languages usually support the deri) 108 475.33 P
0.04 (v) 309.09 475.33 P
0.04 (ation of ne) 313.84 475.33 P
0.04 (w classes by inheriting from e) 356.44 475.33 P
0.04 (xisting) 476.77 475.33 P
0.06 (classes and modifying them.  In Sather) 108 463.33 P
0.06 (, the notion of inheritance is split into tw) 263.23 463.33 P
0.06 (o separate concepts) 426.13 463.33 P
-0.46 (- type relations between classes and code relations between classes.  In this chapter we will deal with) 108 451.33 P
0.01 (the latter \050and simpler\051 concept, that of reusing the code of one class in another) 108 439.33 P
0.01 (.  W) 423.92 439.33 P
0.01 (e refer to this as) 440.08 439.33 P
(implementation inheritance or code inclusion.) 108 427.33 T
108 365.98 504 369 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 367.49 540 367.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(4.1  Inc) 108 375 T
(lude Clauses) 168.68 375 T
5 10 Q
-0.16 (The re-use of code from one class in another class is de\336ned by) 108 346.31 P
1 F
-0.16 (include clauses) 362.23 346.31 P
5 F
-0.16 (. These cause the in-) 422.73 346.31 P
0.39 (corporation of the implementation of the speci\336ed class, possibly unde\336ning or renaming features) 108 334.31 P
0.56 (with feature modi\336er clauses. The) 108 322.31 P
9 F
1.34 (include) 249.66 322.31 P
5 F
0.56 ( clause may be) 291.66 322.31 P
0.56 (gin with the k) 352.34 322.31 P
0.56 (e) 409.2 322.31 P
0.56 (yw) 413.49 322.31 P
0.56 (ord \324) 425.61 322.31 P
9 F
1.34 (private) 445.33 322.31 P
5 F
0.56 (\325, in) 487.33 322.31 P
(which case an) 108 310.31 T
(y unmodi\336ed included feature is made pri) 163.94 310.31 T
(v) 330.89 310.31 T
(ate.) 335.64 310.31 T
0.26 (Code inclusion permits the re-use of code from a parent concrete class in child concrete class . In-) 108 257.31 P
-0.21 (cluding code is a purely syntactic operation in Sather) 108 245.31 P
-0.21 (.  T) 317.98 245.31 P
-0.21 (o help illustrate the follo) 330.38 245.31 P
-0.21 (wing e) 427.63 245.31 P
-0.21 (xamples, we) 454.22 245.31 P
(repeat the interf) 108 233.31 T
(ace of) 171.21 233.31 T
9 F
(EMPLOYEE) 197.86 233.31 T
5 F
(from page 56.) 251.86 233.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(include A a->b, c->, d->private d;) 144 290.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private include D e->readonly f;) 144 281.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class EMPLOYEE is) 144 213.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr wage:INT;) 156.6 204.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly attr name:STR;) 156.6 195.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr id:INT;) 156.6 186.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const high_salary:INT := 40000;) 156.6 177.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050a_name:STR, a_id:INT, a_wage:INT\051:SAME is ...) 156.6 159.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(highly_paid:BOOL is ...) 156.6 141.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 132.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 221.85 129.6 127.1 2 L
V
0.25 H
0 Z
N
489.6 221.85 489.6 127.1 2 L
V
N
129.48 221.98 489.73 221.98 2 L
V
N
129.48 126.98 489.73 126.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 71
%%Page: "72" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(72) 108 710.84 T
8 8 Q
(Code Inclusion and P) 209.2 710.84 T
(ar) 291.82 710.84 T
(tial Classes :) 299.85 710.84 T
0 F
(4.1 Include Clauses) 348.17 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.67 (Routines that are rede\336ned in the child class o) 108 659.33 P
0.67 (v) 297.61 659.33 P
0.67 (er) 302.46 659.33 P
0.67 (-ride the corresponding routines in the included) 310.03 659.33 P
0.03 (class. F) 108 647.33 P
0.03 (or instance suppose we de\336ne a ne) 137.88 647.33 P
0.03 (w kind of) 276.08 647.33 P
9 F
0.06 (EMPLOYEE) 316.98 647.33 P
5 F
0.03 (- a) 371.04 647.33 P
9 F
0.06 (MANAGER) 383.86 647.33 P
5 F
0.03 (, who has a number) 425.86 647.33 P
(of subordinates.) 108 635.33 T
0.11 (See the EMPLO) 108 465.33 P
0.11 (YEE de\336nition on page 56.  The create routine  of the) 173.28 465.33 P
9 F
0.27 (MANAGER) 392.1 465.33 P
5 F
0.11 ( class e) 434.1 465.33 P
0.11 (xtends the) 463.06 465.33 P
9 F
-0.58 (EMPLOYEE) 108 453.33 P
5 F
-0.24 ( create routine, which has been renamed to oldcreate \050renaming is e) 156 453.33 P
-0.24 (xplained belo) 423.09 453.33 P
-0.24 (w\051 and) 476.75 453.33 P
(is called by the ne) 108 441.33 T
(w create routine.) 179.96 441.33 T
4 F
(P) 108 413.33 T
(oints to Note) 114.27 413.33 T
5 F
(\245) 108 397.33 T
(The order of inclusion is not signi\336cant and cannot af) 121.54 397.33 T
(fect con\337icts.) 335.43 397.33 T
(\245) 108 382.33 T
(External classes may be included if the interf) 121.54 382.33 T
(ace to the language permits this; e) 301.68 382.33 T
(xternal F) 437.62 382.33 T
(ortran) 473.3 382.33 T
(and C classes may not be included.) 121.54 370.33 T
(\245) 108 355.33 T
(Immutable \050see page 119\051 and reference classes cannot be mix) 121.54 355.33 T
(ed into a single class during  in-) 371.59 355.33 T
(clusion. In the case of arrays \050see page 105\051, there cannot be include paths from reference) 121.54 343.33 T
(types to) 121.54 331.33 T
9 F
(AVAL) 155.43 331.33 T
5 F
( or from immutable types to) 179.43 331.33 T
9 F
(AREF) 293.87 331.33 T
5 F
( i.e. reference types cannot include an immu-) 317.87 331.33 T
(table array portion and immutable classes cannot include a reference array portion.) 121.54 319.33 T
(\245) 108 304.33 T
(There must be no c) 121.54 304.33 T
(ycle of classes such that each class includes the ne) 198.04 304.33 T
(xt, ignoring the v) 399.23 304.33 T
(alues of) 467.87 304.33 T
(an) 121.54 292.33 T
(y type parameters.) 130.83 292.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MANAGER is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include EMPLOYEE) 156.6 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create->private oldcreate;) 171 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Include employee code and rename create to \325oldcreate\325) 190.8 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(readonly attr numsubordinates:INT;) 171 570.67 T
11 F
(-- Public attribute) 339 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(create\050aname:STR, aid:INT,awage:INT,nsubs:INT\051:SAME is) 156.6 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Create a new manager with the name \324aname\325) 171 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- and the id \324aid\325 and number of subordinates = \324nsubs\325) 156.6 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(res ::= oldcreate\050aname,aid,awage\051;) 171 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.numsubordinates := nsubs;) 171 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 171 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 489.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class A is include B;...) 144 272.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class B is include  C;...) 144 263.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class C is include A; ..) 144 254.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 484.13 2 L
V
0 Z
N
489.6 623.88 489.6 484.13 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 484 489.73 484 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 72
%%Page: "73" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Code Inclusion and P) 226.33 710.84 T
(ar) 308.96 710.84 T
(tial Classes :) 316.99 710.84 T
0 F
(4.1) 365.31 710.84 T
(Include Clauses) 378.6 710.84 T
6 10 Q
(73) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(\245) 108 659.33 T
( If) 121.54 659.33 T
9 F
(SAME) 133.2 659.33 T
5 F
( occurs in included code  it is interpreted as the e) 157.2 659.33 T
(v) 352.19 659.33 T
(entual type of the class \050as late as) 357.04 659.33 T
(possible\051.  W) 121.54 647.33 T
(e mak) 173.79 647.33 T
(e use of this f) 197.85 647.33 T
(act e) 251.63 647.33 T
(v) 269.98 647.33 T
(ery time we include a create routine that returns) 274.83 647.33 T
9 F
(SAME) 468.39 647.33 T
4 12 Q
(4.1.1   Renaming) 108 485 T
5 10 Q
0.22 (The include clause may selecti) 108 462.33 P
0.22 (v) 231.37 462.33 P
0.22 (ely rename some of the included features.  It is also possible to in-) 236.22 462.33 P
(clude a class and mak) 108 450.33 T
(e all routines pri) 195.1 450.33 T
(v) 260.12 450.33 T
(ate, or some selecti) 264.87 450.33 T
(v) 341.27 450.33 T
(ely public) 346.12 450.33 T
0.04 (If no clause follo) 108 361.33 P
0.04 (ws the \324) 175.9 361.33 P
9 F
0.09 (->) 207.63 361.33 P
5 F
0.04 (\325 symbol, then the named features are not included in the class.  This is) 219.63 361.33 P
(equi) 108 349.33 T
(v) 124.97 349.33 T
(alent to \325unde\336ning\325 the routine or attrib) 129.72 349.33 T
(ute.) 291.17 349.33 T
4 F
(P) 108 281.33 T
(oints to note) 114.27 281.33 T
5 F
(\245) 108 265.33 T
(All o) 121.54 265.33 T
(v) 141.67 265.33 T
(erloaded features must be renamed at the same time - there is no w) 146.52 265.33 T
(ay to specify them in-) 413.3 265.33 T
(di) 121.54 253.33 T
(vidually) 129.07 253.33 T
(.) 161.2 253.33 T
(\245) 108 238.33 T
(A public routine can be made pri) 121.54 238.33 T
(v) 252.93 238.33 T
(ate by either a pri) 257.68 238.33 T
(v) 327.41 238.33 T
(ate include or by renaming the indi) 332.16 238.33 T
(vidual) 471.89 238.33 T
(routine to be pri) 121.54 226.33 T
(v) 185.45 226.33 T
(ate) 190.2 226.33 T
(\245) 108 166.33 T
(In a pri) 121.54 166.33 T
(v) 150.17 166.33 T
(ate include, renaming a particular feature has the ef) 154.92 166.33 T
(fect of making just that one feature) 359.88 166.33 T
(public. F) 121.54 154.33 T
(or instance) 156.95 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class  FOO is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create:SAME is  return new; end;) 156.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class SON_OF_FOO is) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include FOO;) 156.6 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Since create returns SAME, we have create:SON_OF_FOO;) 158.4 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class GRANDSON_OF_FOO is) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include SON_OF_FOO;) 156.6 555.67 T
11 F
(-- Now we have create:GRANDSON_OF_FOO;) 262.2 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a ::= #GRANDSON_OF_FOO;) 144 537.67 T
11 F
(-- Calls GRANDSON_OF_FOO::create:SAME,) 259.2 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- which returns a GRANDSON_OF_FOO.) 253.8 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MANAGER is) 144 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private include EMPLOYEE;) 156.6 421.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- All included features are made private) 156.6 412.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MANAGER is) 144 403.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private include EMPLOYEE  id->id;) 156.6 394.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Makes the "id" routine public and others stay private) 156.6 385.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MANAGER is) 144 329.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include EMPLOYEE  id->;) 156.6 320.67 T
11 F
(-- Undefine the "id" routine) 271.8 320.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(attr id:MANAGER_ID;) 156.6 311.67 T
11 F
(-- This \325 id\325 has a different type) 271.8 311.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MANAGER is) 144 206.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    include EMPLOYEE id->private id;) 144 197.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Renames both reader and writer routines of the attribute \325id\325) 168 188.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MANAGER is) 144 134.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private include EMPLOYEE) 156.6 125.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(name->name;) 169.2 116.67 T
11 F
(-- only \325name\325 is made public) 274.8 116.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 523.12 2 L
V
0 Z
N
489.6 635.88 489.6 523.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 523 489.73 523 2 L
V
N
129.6 438.88 129.6 380.13 2 L
V
N
489.6 438.88 489.6 380.13 2 L
V
N
129.48 439 489.73 439 2 L
V
N
129.48 380 489.73 380 2 L
V
N
129.6 337.88 129.6 306.13 2 L
V
N
489.6 337.88 489.6 306.13 2 L
V
N
129.48 338 489.73 338 2 L
V
N
129.48 306 489.73 306 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 73
%%Page: "74" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(74) 108 710.84 T
8 8 Q
(Code Inclusion and P) 209.2 710.84 T
(ar) 291.82 710.84 T
(tial Classes :) 299.85 710.84 T
0 F
(4.1 Include Clauses) 348.17 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(\245) 108 659.33 T
(Iterator names may only be renamed as iterator names.) 121.54 659.33 T
(\245) 108 644.33 T
(It is an error if there are no appropriate methods to rename in the included class.) 121.54 644.33 T
(\245) 108 629.33 T
(Both a reader and a writer method must e) 121.54 629.33 T
(xist if \324) 286.91 629.33 T
9 F
(readonly) 315.8 629.33 T
5 F
(\325 is used in a renaming clause.) 363.8 629.33 T
4 12 Q
(4.1.2   Multiple Inc) 108 476 T
(lusion) 210.47 476 T
5 10 Q
-0.08 (Sather permits inclusion of code from multiple source classes. The order of inclusion does not mat-) 108 453.33 P
0.85 (ter) 108 441.33 P
0.85 (, b) 118.15 441.33 P
0.85 (ut all con\337icts between classes must be resolv) 128.8 441.33 P
0.85 (ed by renaming. The e) 318.18 441.33 P
0.85 (xample belo) 411.13 441.33 P
0.85 (w sho) 460.89 441.33 P
0.85 (ws a) 485.1 441.33 P
-0.21 (common idiom that is used in create routines to permit an including class to call the attrib) 108 429.33 P
-0.21 (ute initial-) 462.82 429.33 P
(ization routines \050by con) 108 417.33 T
(v) 202.31 417.33 T
(ention, this is frequently called \325init\325\051 of parent classes.) 207.16 417.33 T
0.47 (In the abo) 108 337.33 P
0.47 (v) 148.78 337.33 P
0.47 (e class, the attrib) 153.63 337.33 P
0.47 (utes are initialized in the) 222.06 337.33 P
9 F
1.13 (init) 325.24 337.33 P
5 F
0.47 ( routine. The use of such initialization) 349.24 337.33 P
-0.47 (routines is a good practice to a) 108 325.33 P
-0.47 (v) 227.21 325.33 P
-0.47 (oid the problem of assigning attriutes to the "self" object in the create) 232.01 325.33 P
(routine \050which is v) 108 313.33 T
(oid\051) 183.07 313.33 T
(The other parent is similarly de\336ned) 108 291.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class I_INTERVAL is) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr  first, size:INT;) 156.6 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(finish:INT is  return first + size - 1 end;) 156.6 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(finish\050fin:INT\051 is size := fin - first + 1; end;) 156.6 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class LINE_SEGMENT is) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include I_INTERVAL) 156.6 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(finish->readonly finish;) 171 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- makes private finish\050fin:INT\051) 175.8 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( -- and leaves public finish:INT;) 169.2 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class PARENT1 is) 144 397.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr a:INT;) 144 388.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is  return new.init;  end;) 144 379.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private init:SAME is a := 42; return self; end;) 144 370.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 361.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class PARENT2 is) 144 271.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr c:INT;) 144 262.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is return new.init end;) 144 253.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private init:SAME is c := 72 end;) 144 244.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 235.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 617.88 129.6 514.12 2 L
V
0 Z
N
489.6 617.88 489.6 514.12 2 L
V
N
129.48 618 489.73 618 2 L
V
N
129.48 514 489.73 514 2 L
V
N
129.6 405.88 129.6 356.13 2 L
V
N
489.6 405.88 489.6 356.13 2 L
V
N
129.48 406 489.73 406 2 L
V
N
129.48 356 489.73 356 2 L
V
N
129.6 279.88 129.6 230.13 2 L
V
N
489.6 279.88 489.6 230.13 2 L
V
N
129.48 280 489.73 280 2 L
V
N
129.48 230 489.73 230 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 74
%%Page: "75" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Code Inclusion and P) 195.06 710.84 T
(ar) 277.68 710.84 T
(tial Classes :) 285.71 710.84 T
0 F
(4.2) 334.03 710.84 T
(P) 347.33 710.84 T
(ar) 351.9 710.84 T
(tial Classes and Stub r) 359.94 710.84 T
(outines) 443.34 710.84 T
6 10 Q
(75) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.7 (In the child class, both parents are initialized by calling the initialization routines in the included) 108 659.33 P
(classes) 108 647.33 T
4 12 Q
(4.1.3   Resolving con\337icts) 108 476 T
5 10 Q
-0.27 (T) 108 453.33 P
-0.27 (w) 113.31 453.33 P
-0.27 (o methods which are included from dif) 120.43 453.33 P
-0.27 (ferent classes may not be able to coe) 274.1 453.33 P
-0.27 (xist in the same inter-) 418.42 453.33 P
0.34 (f) 108 441.33 P
0.34 (ace.  The) 111.23 441.33 P
0.34 (y are said to con\337ict with each other) 148.14 441.33 P
0.34 (.  F) 295.24 441.33 P
0.34 (or a full discussion of resolving con\337icts, please) 308.84 441.33 P
-0.15 (see page 98.  W) 108 429.33 P
-0.15 (e ha) 170.18 429.33 P
-0.15 (v) 186.2 429.33 P
-0.15 (e to \336rst present the general o) 191.05 429.33 P
-0.15 (v) 308.29 429.33 P
-0.15 (erloading rule, before discussing when included) 313.14 429.33 P
(signatures will con\337ict and what can then be done about it.) 108 417.33 T
-0.17 (F) 108 395.33 P
-0.17 (or no) 113.41 395.33 P
-0.17 (w) 133.82 395.33 P
-0.17 (, we simply note that if we ha) 140.39 395.33 P
-0.17 (v) 257.3 395.33 P
-0.17 (e  signatures with the same name in tw) 262.15 395.33 P
-0.17 (o included classes, we) 415.65 395.33 P
(can simply rename one of them a) 108 383.33 T
(w) 240.6 383.33 T
(ay i.e.) 247.72 383.33 T
108 281.98 504 285 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 283.49 540 283.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(4.2  P) 108 291 T
(ar) 154.49 291 T
(tial Classes and Stub r) 171.86 291 T
(outines) 364.57 291 T
5 10 Q
-0.13 (P) 108 262.31 P
-0.13 (artial classes ha) 113.41 262.31 P
-0.13 (v) 175.71 262.31 P
-0.13 (e no associated type and contain code that may only be included by other classes.) 180.57 262.31 P
-0.11 (P) 108 250.31 P
-0.11 (artial classes may not be instantiated: no routine calls from another class into a partial class are al-) 113.41 250.31 P
(lo) 108 238.31 T
(wed, and no v) 115.53 238.31 T
(ariables may be declared in another class of such a type.) 171.38 238.31 T
0.19 (A stub feature may only be present in a partial class.  The) 108 216.31 P
0.19 (y ha) 340.35 216.31 P
0.19 (v) 357.28 216.31 P
0.19 (e no body and are used to reserv) 362.13 216.31 P
0.19 (e a) 492.43 216.31 P
0.1 (signature for rede\336nition by an including class.  If code in a partial class contains calls to an unim-) 108 204.31 P
-0.03 (plemented method, that method must be e) 108 192.31 P
-0.03 (xplicitly pro) 275.15 192.31 P
-0.03 (vided as a stub) 324.14 192.31 P
-0.03 (.  The follo) 382.81 192.31 P
-0.03 (wing class is a stub) 426.9 192.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class DERIVED is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PARENT1 init-> PARENT_init;) 156.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PARENT2 init-> PARENT2_init; -- Rename init) 156.6 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr b:INT;) 156.6 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create:SAME is) 156.6 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- a gets the value 42, b the value 99 and c the value 72) 156.6 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return new.PARENT1_init.PARENT2_init.init) 171 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private init:SAME is b := 99; return self;) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class DERIVED) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FOO is) 144 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include BAR bar->;) 156.6 354.67 T
11 F
(-- eliminate this \325bar\325 routine) 267 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(include BAR2;) 156.6 345.67 T
11 F
(-- Use the \325bar\325 routine from BAR2) 267 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 514.12 2 L
V
0.25 H
0 Z
N
489.6 635.88 489.6 514.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 514 489.73 514 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 75
%%Page: "76" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(76) 108 710.84 T
8 8 Q
(Code Inclusion and P) 177.92 710.84 T
(ar) 260.54 710.84 T
(tial Classes :) 268.58 710.84 T
0 F
(4.2 P) 316.9 710.84 T
(ar) 334.77 710.84 T
(tial Classes and Stub r) 342.8 710.84 T
(outines) 426.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.45 (deb) 108 659.33 P
0.45 (ugging class which checks on the v) 122.24 659.33 P
0.45 (alue of a boolean and then prints out a deb) 265.81 659.33 P
0.45 (ugging message) 439.39 659.33 P
(\050preceeding by the class name of \325) 108 647.33 T
(self) 244.63 647.33 T
(\325\051) 259.62 647.33 T
0.27 (This class can be used by some other class - for instance, a main routine that w) 108 423.33 P
0.27 (ants to print out all) 427.38 423.33 P
0.35 (the ar) 108 411.33 P
0.35 (guments to main.  The stub routine \325) 130.66 411.33 P
0.35 (deb) 278.15 411.33 P
0.35 (ug\325 must be \336lled in using either an attrib) 292.39 411.33 P
0.35 (ute \050a con-) 460.54 411.33 P
(stant, in this case\051 or a routine.) 108 399.33 T
4 F
(P) 108 259.33 T
(oints to note) 114.27 259.33 T
5 F
(\245) 108 243.33 T
(P) 121.54 243.33 T
(artial classes cannot be used to instantiate parameters of a parametrized class. F) 126.95 243.33 T
(or e) 444.78 243.33 T
(xample,) 459.9 243.33 T
(\325ARRA) 121.54 231.33 T
(Y{DEB) 151.6 231.33 T
(UG_MSG}\325 w) 183.52 231.33 T
(ould not be le) 242.38 231.33 T
(g) 296.95 231.33 T
(al.) 301.9 231.33 T
(\245) 108 216.33 T
(Create cannot be called on  a partial class, nor can a partial class occur as the type of a v) 121.54 216.33 T
(ariable) 473.69 216.33 T
(or attrib) 121.54 204.33 T
(ute.) 153.28 204.33 T
4 12 Q
(4.2.1   Mixins: A Pr) 108 163 T
(ompt Example) 213.8 163 T
5 10 Q
0.42 (This  code demonstrates the use of partial classes.  Each) 108 140.33 P
9 F
1.01 (MIXIN) 339.24 140.33 P
5 F
0.42 ( class pro) 369.24 140.33 P
0.42 (vides a dif) 407.7 140.33 P
0.42 (ferent w) 449.95 140.33 P
0.42 (ay of) 483.31 140.33 P
0.17 (prompting the user; each can be combined with) 108 128.33 P
9 F
0.41 (COMPUTE) 301.58 128.33 P
5 F
0.17 ( to mak) 343.58 128.33 P
0.17 (e a complete program.  The stub) 373.82 128.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(partial class DEBUG_MSG is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(stub debug:BOOL;) 156.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(debug_msg\050msg:STR\051 is) 156.6 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Prints out the type of "self" and a debugging message) 171 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if not debug then) 171 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- Don\325t print out the message if the debug flag is false) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return) 185.4 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 171 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(type_str:STR;) 171 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- Declared here since used in both branches of the if) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if ~void\050self\051 then) 171 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(type_id:INT := SYS::tp\050self\051;) 185.4 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        -- SYS::tp will not work if self is void!) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(type_str:STR := SYS::str_for_tp\050type_id\051;) 185.4 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else) 171 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(type_str := "VOID SELF";) 185.4 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 171 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+ "Debug in class:"+type_str +" "+ msg+"\134n";) 171 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class MAIN is) 144 379.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include DEBUG_MSG;) 156.6 370.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const debug:BOOL := true;           -- Fill in the stub.) 156.6 352.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(main\050args:ARRAY{STR}\051 is) 156.6 334.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop arg:STR := args.elt!) 171 325.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(debug_msg\050"Argument:"+arg\051;    -- Print out the argument) 185.4 316.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 171 307.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 298.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 289.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 442.13 2 L
V
0 Z
N
489.6 635.88 489.6 442.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 442 489.73 442 2 L
V
N
129.6 387.88 129.6 284.13 2 L
V
N
489.6 387.88 489.6 284.13 2 L
V
N
129.48 388 489.73 388 2 L
V
N
129.48 284 489.73 284 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 76
%%Page: "77" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Code Inclusion and P) 195.06 710.84 T
(ar) 277.68 710.84 T
(tial Classes :) 285.71 710.84 T
0 F
(4.2) 334.03 710.84 T
(P) 347.33 710.84 T
(ar) 351.9 710.84 T
(tial Classes and Stub r) 359.94 710.84 T
(outines) 443.34 710.84 T
6 10 Q
(77) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
1.85 (in) 108 659.33 P
9 F
4.43 (COMPUTE) 120.13 659.33 P
5 F
1.85 ( allo) 162.13 659.33 P
1.85 (ws that class to be type check) 181.23 659.33 P
1.85 (ed without needing either mix-in class.  Only) 310.52 659.33 P
9 F
(COMPUTE_A) 108 647.33 T
5 F
( and) 162 647.33 T
9 F
(COMPUTE_B) 181.44 647.33 T
5 F
( may actually be instantiated.) 235.44 647.33 T
2 F
-0.19 (This style of code reuse is very flexible because the stub routines can access private data in) 108 623.33 P
9 F
(COMPUTE) 108 611.33 T
2 F
(.) 150 611.33 T
5 F
0.17 (No) 108 459.33 P
0.17 (w suppose that we ha) 119.97 459.33 P
0.17 (v) 205.99 459.33 P
0.17 (e a \325COMPUTE\325 class that requires a prompt for some input data.  It can) 210.84 459.33 P
(lea) 108 447.33 T
(v) 119.46 447.33 T
(e the prompt routine as a stub, which will later be \336lled in by some prompt class) 124.31 447.33 T
-0.08 (W) 108 304.33 P
-0.08 (e can no) 116.64 304.33 P
-0.08 (w create dif) 149.54 304.33 P
-0.08 (ferent computation classes by mixing an arbitrary prompt style with the main) 196.33 304.33 P
(computation partial class.) 108 292.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(partial class PROMPT_STYLE_A is) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(prompt_user:STR  is) 178.2 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+">";) 190.8 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return IN::get_str;) 190.8 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- partial class PROMPT_SYTLE_A) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(partial class PROMPT_STYLE_B is) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(prompt_user:STR  is) 178.2 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"Please enter a command:\134n";) 190.8 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return IN::get_str;) 190.8 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end;) 178.2 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- partial class PROMPT_STYLE_B) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(partial class COMPUTE is) 144 427.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(stub prompt_user:STR;) 156.6 418.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(main is) 156.6 400.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res ::= prompt_user;) 171 391.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Convert it to an integer and do something with it) 171 382.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i:INT := res.cursor.get_int;) 171 373.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+" I\325m going to compute with this number, now:"+i+"\134n";) 171 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(....) 171 355.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 346.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- partial class COMPUTE) 144 328.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class COMPUTE_A is) 144 272.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include COMPUTE;) 156.6 263.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PROMPT_STYLE_A;) 156.6 254.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class COMPUTE_A) 144 245.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class COMPUTE_B is) 144 227.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include COMPUTE;) 156.6 218.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PROMPT_STYLE_B;) 156.6 209.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class COMPUTE_B) 144 200.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 599.88 129.6 478.12 2 L
V
0 Z
N
489.6 599.88 489.6 478.12 2 L
V
N
129.48 600 489.73 600 2 L
V
N
129.48 478 489.73 478 2 L
V
N
129.6 435.88 129.6 323.13 2 L
V
N
489.6 435.88 489.6 323.13 2 L
V
N
129.48 436 489.73 436 2 L
V
N
129.48 323 489.73 323 2 L
V
N
129.6 280.88 129.6 195.13 2 L
V
N
489.6 280.88 489.6 195.13 2 L
V
N
129.48 281 489.73 281 2 L
V
N
129.48 195 489.73 195 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 77
%%Page: "78" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(78) 108 710.84 T
8 8 Q
(Code Inclusion and P) 177.92 710.84 T
(ar) 260.54 710.84 T
(tial Classes :) 268.58 710.84 T
0 F
(4.2 P) 316.9 710.84 T
(ar) 334.77 710.84 T
(tial Classes and Stub r) 342.8 710.84 T
(outines) 426.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 78
%%Page: "79" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 196.63 710.84 T
(act Classes and Subtyping :) 216.07 710.84 T
0 F
(5.1) 325.24 710.84 T
(Abstr) 338.54 710.84 T
(acting o) 357.98 710.84 T
(v) 390.41 710.84 T
(er Implementations) 394.68 710.84 T
6 10 Q
(79) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Abstr) 108 642 S
-0.25 (act Classes and) 194.24 642 S
-0.25 (Subtyping) 108 600 S
5 10 Q
-0.2 (Abstract class de\336nitions specify interf) 108 475.33 P
-0.2 (aces without implementations. Abstract class names must be) 263.19 475.33 P
-0.12 (entirely uppercase and must be) 108 463.33 P
-0.12 (gin with a dollar sign) 231.24 463.33 P
9 F
-0.28 (\324$\325) 318.15 463.33 P
5 F
-0.12 ( ; this mak) 336.15 463.33 P
-0.12 (es it easy to distinguish abstract) 377.65 463.33 P
-0.19 (type speci\336cations from other types, and may be thought of as a reminder that operations on objects) 108 451.33 P
(of these types might be more e) 108 439.33 T
(xpensi) 230.61 439.33 T
(v) 256.47 439.33 T
(e since the) 261.32 439.33 T
(y may in) 303.38 439.33 T
(v) 337.98 439.33 T
(olv) 342.78 439.33 T
(e dynamic dispatch. In order to moti-) 355.41 439.33 T
0.22 (v) 108 427.33 P
0.22 (ate the notion of abstract classes, we will start by considering dif) 112.75 427.33 P
0.22 (ferent implementations of a data) 373.72 427.33 P
(structure.) 108 415.33 T
108 353.98 504 357 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 355.49 540 355.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.1  Abstracting o) 108 363 T
(ver Implementations) 258.68 363 T
5 10 Q
-0.15 (W) 108 334.31 P
-0.15 (e will illustrate the need for abstraction by considering the implementation of a classic data struc-) 116.64 334.31 P
-0.21 (ture, the stack. Objects are remo) 108 322.31 P
-0.21 (v) 235.93 322.31 P
-0.21 (ed from a stack such that the last object to be inserted is the \336rst to) 240.78 322.31 P
-0.23 (be remo) 108 310.31 P
-0.23 (v) 140.11 310.31 P
-0.23 (ed \050Last In First Out\051.  F) 144.96 310.31 P
-0.23 (or the sak) 241.48 310.31 P
-0.23 (e of simplcity) 279.8 310.31 P
-0.23 (, we will de\336ne our stack to hold inte) 333.69 310.31 P
-0.23 (gers.) 480.3 310.31 P
4 12 Q
(5.1.1   Implementing a Stac) 108 268.98 T
(k using an Arra) 261.16 268.98 T
(y) 348.28 268.98 T
5 10 Q
-0.02 (The ob) 108 246.31 P
-0.02 (vious implementation of a stack is using an array and a pointer to the top of the stack. When) 135.88 246.31 P
0.31 (the stack outgro) 108 234.31 P
0.31 (ws the original array we allocate, we double the size of the array and cop) 172.25 234.31 P
0.31 (y the old) 468.38 234.31 P
0.52 (elements o) 108 222.31 P
0.52 (v) 151.42 222.31 P
0.52 (er) 156.27 222.31 P
0.52 (.  This technique is kno) 163.49 222.31 P
0.52 (wn as amortized doubling and is an ef) 259.18 222.31 P
0.52 (\336cient w) 414.5 222.31 P
0.52 (ay to allocate) 449.64 222.31 P
(space for a datastructure whose size is not kno) 108 210.31 T
(wn when it is created.) 293.26 210.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 79
%%Page: "80" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(80) 108 710.84 T
8 8 Q
(Abstr) 179.49 710.84 T
(act Classes and Subtyping :) 198.93 710.84 T
0 F
(5.1 Abstr) 308.11 710.84 T
(acting o) 340.84 710.84 T
(v) 373.28 710.84 T
(er Implementations) 377.55 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.47 (It w) 108 417.33 P
0.47 (ould be appropriate to also shrink the array when elements are popped from the stack, b) 124.2 417.33 P
0.47 (ut we) 481.59 417.33 P
(ignore this comple) 108 405.33 T
(xity for no) 182.29 405.33 T
(w) 224.26 405.33 T
(.) 230.83 405.33 T
4 12 Q
(5.1.2   A Stac) 108 364 T
(k Calculator) 181.8 364 T
5 10 Q
-0.08 (The stack class we de\336ned can no) 108 341.33 P
-0.08 (w be used in v) 242.8 341.33 P
-0.08 (arious applications.  F) 300 341.33 P
-0.08 (or instance, suppose we wish) 387.95 341.33 P
0.12 (to create an calculator using the stack.  This corresponds to a H-P style re) 108 329.33 P
0.12 (v) 402.97 329.33 P
0.12 (erse polish notation cal-) 407.82 329.33 P
(culator \050RPN\051 where you \336rst enter operands and then an operator) 108 129.33 T
(.) 371.83 129.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class ARR_STACK is) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr elems:ARRAY{INT};) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr index:INT;) 144 621.67 T
11 F
(-- Points to the next location to insert) 273.6 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   create:SAME is) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
-0.23 (     res::=new; res.elems:=#ARRAY{INT}\0505\051; res.index := 0; return res;) 144 594.67 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   push\050e:INT\051 is) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     if index > elems.size then) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         new_elems:ARRAY{INT} := #ARRAY{INT}\050index * 2\051;) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- copy over the old elements) 182.4 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(         loop new_elems.set!\050elems.elt!\051 end;) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         elems := new_elems;) 144 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end;) 144 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     elems[index] := e;) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     index := index + 1;) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 486.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   pop:INT is index := index - 1; return elems[index]; end;) 144 468.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   is_empty:INT is return index = 0 end;) 144 450.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class RPN_CALCULATOR is) 144 309.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr stack:ARR_STACK;) 144 300.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is res ::=new; res.stack := #ARR_STACK; return res; end;) 144 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   push\050e:INT\051 is stack.push\050e\051 end;) 144 264.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   add:INT is) 144 246.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Add the two top two eleemnts) 168 237.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(     if stack.is_empty then empty_err; return 0; end;) 144 228.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     arg1:INT := stack.pop;) 144 219.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     if stack.is_empty then empty_err; return 0 end;) 144 210.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     arg2:INT := stack.pop) 144 201.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     return arg1 + arg2;) 144 192.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 183.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private empty_err is #ERR+"No operands available!" end;) 144 165.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 156.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 436.13 2 L
V
0 Z
N
489.6 647.88 489.6 436.13 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 436 489.73 436 2 L
V
N
129.6 317.88 129.6 151.13 2 L
V
N
489.6 317.88 489.6 151.13 2 L
V
N
129.48 318 489.73 318 2 L
V
N
129.48 151 489.73 151 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 80
%%Page: "81" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 196.63 710.84 T
(act Classes and Subtyping :) 216.07 710.84 T
0 F
(5.1) 325.24 710.84 T
(Abstr) 338.54 710.84 T
(acting o) 357.98 710.84 T
(v) 390.41 710.84 T
(er Implementations) 394.68 710.84 T
6 10 Q
(81) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(5.1.3   A Linked List Representation of a Stac) 108 658 T
(k) 363.84 658 T
5 10 Q
0.59 (An alternati) 108 635.33 P
0.59 (v) 155.82 635.33 P
0.59 (e implementation of a stack might mak) 160.68 635.33 P
0.59 (e use  of a chain of elements i.e. a link) 320.19 635.33 P
0.59 (ed list) 479.24 635.33 P
(representation.  Each link in the chain has a pointer to the ne) 108 623.33 T
(xt element) 349.75 623.33 T
(The whole stack is then constructed using a chain of  element holders) 108 525.33 T
4 12 Q
(5.1.4   Switc) 108 318 T
(hing Representations:P) 175.92 318 T
(ol) 310.13 318 T
(ymorphism) 320.62 318 T
5 10 Q
0.22 (Each of these stack implementations has adv) 108 295.33 P
0.22 (antages and disadv) 287.92 295.33 P
0.22 (antages \050the trade-of) 363.64 295.33 P
0.22 (fs are not v) 446.02 295.33 P
0.22 (ery) 491.23 295.33 P
-0.42 (signi\336cant in our e) 108 283.33 P
-0.42 (xample, b) 181.3 283.33 P
-0.42 (ut can be quite considerable in other cases\051.  Either of these stacks could) 220.12 283.33 P
0.25 (be used in our calculator) 108 271.33 P
0.25 (.  T) 206.76 271.33 P
0.25 (o use the link) 220.07 271.33 P
0.25 (ed list stack we  w) 274.33 271.33 P
0.25 (ould need to replace) 349.09 271.33 P
9 F
0.6 (ARR_STACK) 433.4 271.33 P
5 F
0.25 (by) 494 271.33 P
(by) 108 259.33 T
9 F
(LINK_STACK) 123 259.33 T
5 F
(. where) 183 259.33 T
(v) 212.18 259.33 T
(er it is used.) 217.03 259.33 T
0.05 (It w) 108 237.33 P
0.05 (ould be nice to be able to write code such that we could transparently replace one kind of stack) 123.78 237.33 P
-0.23 (by the other) 108 225.33 P
-0.23 (.  If we are to do this, we w) 154.75 225.33 P
-0.23 (ould need to be able to refer to them indirectly) 261.7 225.33 P
-0.23 (, through some) 444.75 225.33 P
0.16 (interf) 108 213.33 P
0.16 (ace which hides which particular implementation we are using.  Interf) 129.56 213.33 P
0.16 (aces of this sort are de-) 410.73 213.33 P
(scribed by abstract classes in Sather) 108 201.33 T
(.   An abstract class that describes the stack abstraction is) 251.03 201.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class STACK_ELEM_HOLDER is) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   readonly attr data:INT;) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr next:INT_STACK_ELEM;) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create\050data:INT\051:SAME is) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res ::= new; res.data := data; res.next := void; return res;) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class LINK_STACK is) 144 505.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    private attr head:STACK_ELEM_HOLDER;) 144 496.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    create:SAME is  res ::= new; return res; end;) 144 487.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    push\050e:INT\051 is) 144 469.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       elem_holder ::= #STACK_ELEM_HOLDER\050e\051;) 144 460.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       elem_holder.ext := head;) 144 451.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       head := elem_holder;) 144 442.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 144 433.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    pop:INT is) 144 415.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res:INT :+ head.data;) 144 406.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      head := head.next;) 144 397.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 144 388.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    is_empty:BOOL is return void\050head\051 end;) 144 370.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 361.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $STACK is) 144 181.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME;) 144 172.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   push\050e:INT\051;) 144 163.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   pop:INT;) 144 154.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   is_empty:BOOL;) 144 145.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 136.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 544.12 2 L
V
0 Z
N
489.6 611.88 489.6 544.12 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 544 489.73 544 2 L
V
N
129.6 513.88 129.6 356.13 2 L
V
N
489.6 513.88 489.6 356.13 2 L
V
N
129.48 514 489.73 514 2 L
V
N
129.48 356 489.73 356 2 L
V
N
129.6 189.88 129.6 131.13 2 L
V
N
489.6 189.88 489.6 131.13 2 L
V
N
129.48 190 489.73 190 2 L
V
N
129.48 131 489.73 131 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 81
%%Page: "82" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(82) 108 710.84 T
8 8 Q
(Abstr) 196.88 710.84 T
(act Classes and Subtyping :) 216.32 710.84 T
0 F
(5.2 Abstr) 325.49 710.84 T
(act Class De\336nitions) 358.23 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.4 (Note that the interf) 108 659.33 P
-0.4 (ace just speci\336es the operations on the stack, and says nothing about ho) 182.52 659.33 P
-0.4 (w the) 463.3 659.33 P
-0.4 (y are) 484.69 659.33 P
0.46 (implemented.  W) 108 647.33 P
0.46 (e ha) 177.28 647.33 P
0.46 (v) 193.92 647.33 P
0.46 (e to then specify ho) 198.77 647.33 P
0.46 (w our tw) 278.67 647.33 P
0.46 (o implementations conform to this abstraction.) 315.04 647.33 P
0.56 (This is indicated in the de\336nition of our implementations.  More details on this will follo) 108 635.33 P
0.56 (w in the) 470.65 635.33 P
(sections belo) 108 623.33 T
(w) 159.69 623.33 T
(.) 166.26 623.33 T
(The calculator class can then be written as follo) 108 561.33 T
(ws) 298.26 561.33 T
0.02 (In this modi\336ed calculator) 108 472.33 P
0.02 (, we pro) 212.94 472.33 P
0.02 (vide a stack of our choice when creating the calculator) 245.32 472.33 P
0.02 (.  An) 462.97 472.33 P
0.02 (y im-) 482.59 472.33 P
(plementation that conforms to our stack abstraction my be used in place of the array based stackt) 108 460.33 T
108 349.98 504 353 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 351.49 540 351.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.2  Abstract Class De\336nitions) 108 359 T
5 10 Q
0.1 ( The body of an abstract class de\336nition consists of a semicolon separated list of   signatures. Each) 108 330.31 P
-0.36 (speci\336es the signature of a method without pro) 108 318.31 P
-0.36 (viding an implementation at that point. The ar) 292.82 318.31 P
-0.36 (gument) 474 318.31 P
(names are required for documentation purposes only and are ignored.) 108 306.31 T
0.25 ( Due to the rules of subtyping, which will be introduced on page 87, there is one restriction on the) 108 235.31 P
-0.47 (signatures -) 108 223.31 P
9 F
-1.12 (SAME) 157.98 223.31 P
5 F
-0.47 ( is permitted only for a return type or out ar) 181.98 223.31 P
-0.47 (guments in an abstract class signature.) 350.99 223.31 P
6 F
0.08 (Abstract types can never be created!) 108 201.31 P
5 F
0.08 (Unlik) 274.03 201.31 P
0.08 (e concrete classes,  the) 296.71 201.31 P
0.08 (y merely specify an interf) 387.7 201.31 P
0.08 (ace) 490.68 201.31 P
-0.22 (to an object, not an object itself. All you can do with an abstract type is to declare a v) 108 189.31 P
-0.22 (ariable to be of) 444.39 189.31 P
-0.51 (that type. Such a v) 108 177.31 P
-0.51 (ariable can point to an) 179.87 177.31 P
-0.51 (y actual object which is a subtype of that abstract class. Ho) 266.56 177.31 P
-0.51 (w) 496.78 177.31 P
(we determine what objects such an abstract v) 108 165.31 T
(ariable can point to is the subject of the ne) 288.54 165.31 T
(xt section.) 457.53 165.31 T
(Note that we can,  of course, pro) 108 143.31 T
(vide a create routine in the abstract class) 238.09 143.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class ARR_STACK < $STACK is ... same definition as before ...) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class LINK_STACK < $STACK is ... same definition as before ...) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class RPN_CALCULATOR is) 144 541.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr stack:$STACK;) 144 532.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create\050s:$STACK\051:SAME is res::= new; res.stack:=s; return res; end;) 144 523.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   ... \325add\325 and \325push\325 behave the same) 144 505.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 496.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(s:LINK_STACK := #LINK_STACK;) 144 440.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(calc:RPN_CALCULATOR := #RPN_CAlCULATOR\050s\051;) 144 431.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(calc.push\0503\051;  calc.push\0505\051;) 144 422.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+calc.add;) 144 413.67 T
11 F
( -- Prints out) 278.4 413.67 T
9 F
(8) 350.4 413.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $SHIPPING_CRATE  is) 144 286.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(destination:$LOCATION;) 156.6 277.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(weight:FLT;) 156.6 268.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- abstract class $SHIPPING_CRATE) 144 259.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $SHIPPING_CRATE is) 144 123.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create:SAME; ...) 156.6 114.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 294.85 129.6 254.1 2 L
V
0.25 H
0 Z
N
489.6 294.85 489.6 254.1 2 L
V
N
129.48 294.98 489.73 294.98 2 L
V
N
129.48 253.98 489.73 253.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 82
%%Page: "83" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 214.01 710.84 T
(act Classes and Subtyping :) 233.45 710.84 T
0 F
(5.2) 342.63 710.84 T
(Abstr) 355.92 710.84 T
(act Class De\336nitions) 375.36 710.84 T
6 10 Q
(83) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.25 (Ho) 108 659.33 P
0.25 (we) 119.97 659.33 P
0.25 (v) 131.38 659.33 P
0.25 (er) 136.23 659.33 P
0.25 (,  we can ne) 143.6 659.33 P
0.25 (v) 191.81 659.33 P
0.25 (er call this creation routine on a v) 196.66 659.33 P
0.25 (oid abstract class i.e. the follo) 332.31 659.33 P
0.25 (wing  is pro-) 452.44 659.33 P
(hibited) 108 647.33 T
11 8 Q
(crate:$SHIPPING_CRATE := #$SHIPPING_CRATE; -- ILLEGAL) 122.4 630.67 T
5 10 Q
(In f) 108 610.33 T
(act, all class calls \050:: calls\051 are prohibited on abstract classes) 122.06 610.33 T
11 8 Q
(f:FLT := $SHIPPING_CRATE::weight;  -- ILLEGAL) 122.4 593.67 T
5 10 Q
0.21 (Since abstract classes do not de\336ne objects, and do not contain shared attrib) 108 573.33 P
0.21 (utes or constants, such) 413.37 573.33 P
(calls on the class are not meaningful.) 108 561.33 T
4 F
(Example: An abstract emplo) 108 533.33 T
(y) 242.28 533.33 T
(ee) 247.74 533.33 T
9 F
-0.06 ($EMPLOYEE) 108 510.33 P
5 F
-0.03 ( illustrates an abstract type.) 162 510.33 P
9 F
-0.06 ( EMPLOYEE) 271.05 510.33 P
5 F
-0.03 (and) 330.92 510.33 P
9 F
-0.06 ( MANAGER) 345.36 510.33 P
5 F
-0.03 ( are subtypes. Abstract type) 393.3 510.33 P
0.56 (de\336nitions specify interf) 108 498.33 P
0.56 (aces without implementations.. Belo) 206.79 498.33 P
0.56 (w) 354.05 498.33 P
0.56 (, we will illustrate ho) 360.62 498.33 P
0.56 (w the abstract) 447.34 498.33 P
(type may be used.) 108 486.33 T
(This abstract type de\336nition merely states that an) 108 397.33 T
(y emplo) 304.22 397.33 T
(yee must ha) 336.62 397.33 T
(v) 384.19 397.33 T
(e a name and an id.) 389.04 397.33 T
4 F
( More abstract c) 108 369.33 T
(lass e) 184.49 369.33 T
(xamples) 212.14 369.33 T
5 F
0.4 (Here\325) 108 346.33 P
0.4 (s an e) 130.21 346.33 P
0.4 (xample from the standard library) 153.63 346.33 P
0.4 (.  The abstract class) 286.21 346.33 P
9 F
0.96 ($STR) 369.3 346.33 P
5 F
0.4 (  represents the set of types) 393.3 346.33 P
-0.28 (that ha) 108 334.33 P
-0.28 (v) 134.46 334.33 P
-0.28 (e a w) 139.31 334.33 P
-0.28 (ay to construct a string suitable for output.  All of the standard types such as) 159.76 334.33 P
9 F
-0.66 (INT) 462.26 334.33 P
5 F
-0.28 (,) 479.52 334.33 P
9 F
-0.66 (FLT) 484.24 334.33 P
5 F
-0.28 (,) 501.5 334.33 P
9 F
1.62 (BOOL) 108 322.33 P
5 F
0.68 ( and) 132 322.33 P
9 F
1.62 (CPX) 152.79 322.33 P
5 F
0.68 ( kno) 170.79 322.33 P
0.68 (w ho) 188.72 322.33 P
0.68 (w to do this, so the) 208.87 322.33 P
0.68 (y are subtypes of) 287.66 322.33 P
9 F
1.62 ($STR) 360.9 322.33 P
5 F
0.68 (. Attempting to subtype from) 384.9 322.33 P
9 F
($STR) 108 310.33 T
5 F
( a concrete class that didn\325) 132 310.33 T
(t pro) 238.18 310.33 T
(vide  a) 256.64 310.33 T
9 F
(str) 285.8 310.33 T
5 F
( method w) 303.8 310.33 T
(ould cause an error at compile time.) 345.92 310.33 T
0.45 (In this ille) 108 239.33 P
0.45 (g) 149.3 239.33 P
0.45 (al abstract class, A and B do not con\337ict because their ar) 154.25 239.33 P
0.45 (guments are concrete and are) 385.6 239.33 P
0.41 (not the same type.  Ho) 108 227.33 P
0.41 (we) 199.8 227.33 P
0.41 (v) 211.21 227.33 P
0.41 (er) 216.07 227.33 P
0.41 (, because the ar) 223.43 227.33 P
0.41 (gument of C is abstract and unrelated it con\337icts with) 286.13 227.33 P
(both A and B.  D does not con\337ict with A, B or C because it has a dif) 108 215.33 T
(ferent number of parameters.) 384.95 215.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $EMPLOYEE is) 144 466.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Definition of an abstract type.  Any concrete class that) 156.6 457.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- subtypes from this abstract class must provide these routines.) 156.6 448.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(name:STR;) 156.6 439.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(id:INT;) 156.6 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 421.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $STR is) 144 290.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Ensures that subtypes have a \325str\325 routine) 156.6 281.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(str:STR;) 156.6 272.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Return a string form of the object) 204.6 272.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 263.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $FOO is) 144 195.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050arg:INT\051;) 156.6 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- method A) 243 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050arg:BOOL\051;) 156.6 177.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- method B) 243 177.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050arg:$FOO\051;) 156.6 168.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- method C) 243 168.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a, b:INT\051) 156.6 159.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(;) 228.6 159.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- method D) 243 159.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 150.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 474.88 129.6 416.12 2 L
V
0 Z
N
489.6 474.88 489.6 416.12 2 L
V
N
129.48 475 489.73 475 2 L
V
N
129.48 416 489.73 416 2 L
V
N
129.6 298.88 129.6 258.13 2 L
V
N
489.6 298.88 489.6 258.13 2 L
V
N
129.48 299 489.73 299 2 L
V
N
129.48 258 489.73 258 2 L
V
N
129.6 203.88 129.6 145.13 2 L
V
N
489.6 203.88 489.6 145.13 2 L
V
N
129.48 204 489.73 204 2 L
V
N
129.48 145 489.73 145 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 83
%%Page: "84" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(84) 108 710.84 T
8 8 Q
(Abstr) 225.6 710.84 T
(act Classes and Subtyping :) 245.04 710.84 T
0 F
(5.3 Subtyping) 354.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.3   Subtyping) 108 654 T
5 10 Q
-0 (As promised, here is the other half of inheritance, subtyping. A subtyping clause \050) 108 625.31 P
9 F
-0 (\324<\325) 435.7 625.31 P
5 F
-0 ( follo) 453.7 625.31 P
-0 (wed by) 474.84 625.31 P
0.34 (type speci\336ers\051 indicates that the  abstract signatures of all types listed in the subtyping clause are) 108 613.31 P
(included in the interf) 108 601.31 T
(ace of the type being de\336ned.  In the e) 191.5 601.31 T
(xample, the subtyping clause is) 344.09 601.31 T
9 8 Q
(abstract class $SHIPPING_CRATE< $CRATE is ...) 122.4 584.64 T
5 10 Q
-0.05 ( The interf) 108 564.31 P
-0.05 (ace of an abstract type consists of an) 150.01 564.31 P
-0.05 (y e) 295.88 564.31 P
-0.05 (xplicitly speci\336ed signatures along with those in-) 307.62 564.31 P
(troduced by the subtyping clause.) 108 552.31 T
4 F
(P) 108 524.31 T
(oints to note about  subtyping:) 114.27 524.31 T
5 F
(\245) 108 508.31 T
(Ev) 121.54 508.31 T
(ery type is automatically a subtype of) 132.5 508.31 T
9 F
($OB) 284.98 508.31 T
5 F
(\245) 108 493.31 T
(Only abstract types can be mentioned in the subtyping clause) 121.54 493.31 T
(\245) 108 478.31 T
(When a subtyping clause is used in a partial class, it enforces the basic subtyping rule using) 121.54 478.31 T
(the stub routine.) 121.54 466.31 T
(\245) 108 451.31 T
(There must be no c) 121.54 451.31 T
(ycle of abstract types such that each appears in the subtype list of the ne) 198.04 451.31 T
(xt,) 485.61 451.31 T
(ignoring the v) 121.54 439.31 T
(alues of an) 177.4 439.31 T
(y type parameters b) 220.57 439.31 T
(ut not their number) 298.96 439.31 T
(.) 375.35 439.31 T
(\245) 108 424.31 T
( A subtyping clause may not refer to) 121.54 424.31 T
9 F
(SAME) 269.85 424.31 T
5 F
(.) 293.85 424.31 T
(\245) 108 409.31 T
9 F
(SAME) 121.54 409.31 T
5 F
( is only permitted as a return type or on) 145.54 409.31 T
9 F
(out) 305.52 409.31 T
5 F
(ar) 329.52 409.31 T
(guments in abstract class signatures.) 337.11 409.31 T
4 12 Q
(5.3.1   The T) 108 367.98 T
(ype Graph) 175.98 367.98 T
5 10 Q
0.28 (W) 108 345.31 P
0.28 (e frequently refer to the Sather type graph, which is a graph whose nodes represent Sather types) 116.64 345.31 P
0.5 (and whose edges represent subtyping relationships between sather types. Subtyping clauses intro-) 108 333.31 P
-0.05 (duce edges into  the type graph.  There is an edge in the type graph from each type in the subtyping) 108 321.31 P
-0.19 (clause to the type being de\336ned.   The type graph is ac) 108 309.31 P
-0.19 (yclic, and may be vie) 323.09 309.31 P
-0.19 (wed as a  tree with cross) 407.36 309.31 P
(edges \050the root of the tree is) 108 297.31 T
9 F
($OB) 222.14 297.31 T
5 F
(, which is an implicit supertype of all other types\051.) 240.14 297.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $TRANSPORT is ...) 144 277.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $FAST is ...) 144 268.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $ROAD_TRANSPORT < $TRANSPORT is ...) 144 259.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $AIR_TRANSPORT < $TRANSPORT, $FAST is ...) 144 250.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class CAR < $ROAD_TRANSPORT is ...) 144 241.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class DC10 < $AIR_TRANSPORT is ...) 144 232.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 285.85 129.6 227.1 2 L
V
0.25 H
0 Z
N
489.6 285.85 489.6 227.1 2 L
V
N
129.48 285.98 489.73 285.98 2 L
V
N
129.48 226.98 489.73 226.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 84
%%Page: "85" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 242.73 710.84 T
(act Classes and Subtyping :) 262.17 710.84 T
0 F
(5.3) 371.35 710.84 T
(Subtyping) 384.64 710.84 T
6 10 Q
(85) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.44 (Since it  is ne) 108 659.33 P
-0.44 (v) 159.87 659.33 P
-0.44 (er possible to subtype from a concrete class \050a reference, immutable or e) 164.72 659.33 P
-0.44 (xternal class\051,) 448.9 659.33 P
(these classes,  CAR and DC10  form the leaf nodes of the type graph.) 108 647.33 T
4 12 Q
(5.3.2   Dynamic Dispatc) 108 473.33 T
(h and  Subtyping) 241.27 473.33 T
5 10 Q
-0.32 (Once we ha) 108 450.67 P
-0.32 (v) 154.36 450.67 P
-0.32 (e introduced a typing relationship between a parent and a child class, we can use a v) 159.21 450.67 P
-0.32 (ari-) 490.12 450.67 P
0.2 (able of the type of the parent class to hold an object with the type of the child. Sather supports dy-) 108 438.67 P
0.07 (namic dispatch - when a function is called on a v) 108 426.67 P
0.07 (ariable of an abstract type, it will be dispatched to) 303.96 426.67 P
(the type of the object actually held by the v) 108 414.67 T
(ariable.  Thus, subtyping pro) 280.78 414.67 T
(vides polymorphism.) 395.62 414.67 T
4 F
(An e) 108 364.67 T
(xample: Generalizing Emplo) 129.52 364.67 T
(y) 263.25 364.67 T
(ees) 268.71 364.67 T
5 F
0.11 (T) 108 341.67 P
0.11 (o illustrate the use of dispatching, let us consider a system in which v) 113.31 341.67 P
0.11 (ariables denote abstract em-) 391.75 341.67 P
-0.25 (plo) 108 329.67 P
-0.25 (yees which can be either) 120.68 329.67 P
9 F
-0.61 (MANAGER) 220.21 329.67 P
5 F
-0.25 ( or) 262.21 329.67 P
9 F
-0.61 (EMPLOYEE) 275.03 329.67 P
5 F
-0.25 ( objects. Recall the de\336ntions of manager and) 323.03 329.67 P
(emplo) 108 317.67 T
(yee) 132.9 317.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class EMPLOYEE < $EMPLOYEE is ...) 144 298 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Employee, as defined earlier) 158.4 289 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MANAGER < $EMPLOYEE is ...) 144 271 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Manager as defined earlier on page 56) 158.4 262 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
108 511.33 504 644 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 10 Q
0 X
0 0 0 1 0 0 0 K
($TRANSPORT) 240.51 597.72 T
($ROAD_TRANSPORT) 171 570.72 T
($AIR_TRANSPORT) 298.68 571.79 T
(CAR) 207 544.79 T
(DC10) 315 544.79 T
($FAST) 362.81 598.79 T
250.91 590.93 249.58 593.59 260.19 595.57 252.24 588.27 4 Y
0.5 H
0 Z
N
250.91 590.93 249.58 593.59 260.19 595.57 252.24 588.27 4 Y
V
225 577.98 250.68 590.82 2 L
2 Z
N
289.7 592.41 288.76 589.59 279.86 595.69 290.65 595.23 4 Y
0 Z
N
289.7 592.41 288.76 589.59 279.86 595.69 290.65 595.23 4 Y
V
333 577.98 289.94 592.33 2 L
2 Z
N
324 557.69 321.02 557.69 324 568.07 326.98 557.69 4 Y
0 Z
N
324 557.69 321.02 557.69 324 568.07 326.98 557.69 4 Y
V
324 550.98 324 557.44 2 L
2 Z
N
216 557.69 213.02 557.69 216 568.07 218.98 557.69 4 Y
0 Z
N
216 557.69 213.02 557.69 216 568.07 218.98 557.69 4 Y
V
216 550.98 216 557.44 2 L
2 Z
N
361.02 588 358.92 590.1 368.36 595.34 363.12 585.89 4 Y
0 Z
N
361.02 588 358.92 590.1 368.36 595.34 363.12 585.89 4 Y
V
352.64 579.62 360.84 587.82 2 L
2 Z
N
($OB) 286 626 T
5 8 Q
(\050implicit supertype of all classes\051) 310.67 627.33 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 85
%%Page: "86" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(86) 108 710.84 T
8 8 Q
(Abstr) 221.71 710.84 T
(act Classes and Subtyping :) 241.15 710.84 T
0 F
(5.4 Super) 350.33 710.84 T
(typing) 385.7 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.86 (The abo) 108 659.33 P
0.86 (v) 141.2 659.33 P
0.86 (e de\336ntions can then be used to write code that deals with an) 146.05 659.33 P
0.86 (y emplo) 398.97 659.33 P
0.86 (yee, re) 432.23 659.33 P
0.86 (g) 459.59 659.33 P
0.86 (ardless of) 464.54 659.33 P
(whether it is a manager or not) 108 647.33 T
-0.07 (The main program sho) 108 486.33 P
-0.07 (ws that we can create an array that holds either re) 198.35 486.33 P
-0.07 (gular emplo) 395.18 486.33 P
-0.07 (yees or manag-) 443.06 486.33 P
-0.1 (ers. W) 108 474.33 P
-0.1 (e can then perform an) 133.2 474.33 P
-0.1 (y action on this array that is applicable to both types of emplo) 219.85 474.33 P
-0.1 (yees. The) 465.78 474.33 P
9 F
-0.78 (wage) 108 462.33 P
5 F
-0.33 ( routine is said to be) 132 462.33 P
9 F
-0.78 (dispatched) 213.37 462.33 P
5 F
-0.33 (. At compile time, we don\325) 273.37 462.33 P
-0.33 (t kno) 379.05 462.33 P
-0.33 (w which w) 398.76 462.33 P
-0.33 (age routine will) 441.88 462.33 P
0.04 (be called. At run time, the actual class of the object held by the) 108 450.33 P
9 F
0.1 (emp) 363 450.33 P
5 F
0.04 ( v) 381 450.33 P
0.04 (ariable is determined and the) 388.3 450.33 P
9 F
(wage) 108 438.33 T
5 F
( routine in that class is called.) 132 438.33 T
108 376.98 504 380 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 378.49 540 378.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.4  Super) 108 386 T
(typing) 194.4 386 T
5 10 Q
0.06 (Unlik) 108 357.31 P
0.06 (e most other object oriented languages, Sather also allo) 130.68 357.31 P
0.06 (ws the programmer to introduce types) 351.75 357.31 P
0.6 (abo) 108 345.31 P
0.6 (v) 122.29 345.31 P
0.6 (e an e) 127.14 345.31 P
0.6 (xisting class.) 151.51 345.31 P
0.6 (A supertyping clause \050) 209.98 345.31 P
9 F
1.44 (\324>\325) 302.04 345.31 P
5 F
0.6 ( follo) 320.04 345.31 P
0.6 (wed by type speci\336ers\051 adds to the type) 341.77 345.31 P
-0.07 (graph an edge from the type being de\336ned to each type in the supertyping clause. These type speci-) 108 333.31 P
0.26 (\336ers may not be type parameters \050though the) 108 321.31 P
0.26 (y may include type parameters as components\051 or e) 288.24 321.31 P
0.26 (x-) 495.67 321.31 P
-0.22 (ternal types. There must be no c) 108 309.31 P
-0.22 (ycle of abstract classes such that each class appears in the supertype) 234.56 309.31 P
-0.56 (list of the ne) 108 297.31 P
-0.56 (xt, ignoring the v) 155.88 297.31 P
-0.56 (alues of an) 222.82 297.31 P
-0.56 (y type parameters b) 264.87 297.31 P
-0.56 (ut not their number) 341.56 297.31 P
-0.56 (. A supertyping clause) 416.26 297.31 P
(may not refer to) 108 285.31 T
9 F
(SAME) 174.65 285.31 T
5 F
(.) 198.65 285.31 T
-0.19 (If both subtyping and supertyping clauses are present, then each type in the supertyping list must be) 108 263.31 P
0.08 (a subtype of each type in the subtyping list using only edges introduced by subtyping clauses. This) 108 251.31 P
-0.23 (ensures that the subtype relationship can be tested by e) 108 239.31 P
-0.23 (xamining only de\336nitions reachable from the) 324.9 239.31 P
0.04 (tw) 108 227.31 P
0.04 (o types in question, and that errors of supertyping are localized.Y) 117.9 227.31 P
0.04 (ou de\336ne supertypes of already) 378.86 227.31 P
0.44 (e) 108 215.31 P
0.44 (xisting types. The supertype can only contain routines that are found in the subtype i.e. it cannot) 112.29 215.31 P
(e) 108 203.31 T
(xtend the interf) 112.29 203.31 T
(ace of the subtype.) 173.29 203.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class TESTEMPLOYEE is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(main is) 156.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(employees:ARRAY{$EMPLOYEE} := #ARRAY{$EMPLOYEE}\0503\051;) 171 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- employees is a 3 element array of employees) 185.4 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(i:INT := 0; wage:INT := 0;) 185.4 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop until!\050i = employees.size\051;) 185.4 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(emp:$EMPLOYEE := employees[i];) 199.8 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(emp_wage:INT := emp.wage;) 199.8 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- emp.wage is a dispatched call on "\325age\325) 199.8 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(wage := wage+emp_wage;) 199.8 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 185.4 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+wage+"\134n";) 171 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( abstract class $IS_EMPTY > $LIST, $SET is) 144 183.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    is_empty:BOOL;) 144 174.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end;) 144 165.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 505.12 2 L
V
0.25 H
0 Z
N
489.6 635.88 489.6 505.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 505 489.73 505 2 L
V
N
129.6 191.85 129.6 160.1 2 L
V
N
489.6 191.85 489.6 160.1 2 L
V
N
129.48 191.98 489.73 191.98 2 L
V
N
129.48 159.98 489.73 159.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 86
%%Page: "87" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 224.58 710.84 T
(act Classes and Subtyping :) 244.02 710.84 T
0 F
(5.5) 353.2 710.84 T
(T) 366.5 710.84 T
(ype Conf) 369.5 710.84 T
(or) 405.48 710.84 T
(m) 413.35 710.84 T
(ance) 420.7 710.84 T
6 10 Q
(87) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(5.4.1   Using super) 108 658 T
(typing) 214.28 658 T
5 10 Q
-0.5 (The main use of supertyping arises in de\336ning appropriate type bounds for parametrized classes, and) 108 635.33 P
(will be discussed in the ne) 108 623.33 T
(xt chapter \050see Supertyping and T) 213.12 623.33 T
(ype Bounds on page 109\051.) 347.57 623.33 T
108 561.98 504 565 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 563.49 540 563.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.5  T) 108 571 T
(ype Conf) 152.95 571 T
(ormance) 229.59 571 T
5 10 Q
-0.42 (In order for a child class to le) 108 542.31 P
-0.42 (g) 222.4 542.31 P
-0.42 (ally subtype from a parent abstract class, we ha) 227.35 542.31 P
-0.42 (v) 412.92 542.31 P
-0.42 (e to determine wheth-) 417.77 542.31 P
-0 (er the signatures in the child class are consistent with the signatures in the parent class. The consis-) 108 530.31 P
0.06 (tenc) 108 518.31 P
0.06 (y check must ensure that in an) 124.51 518.31 P
0.06 (y code, if the parent class is replaced by the child class, the code) 245.8 518.31 P
-0.22 (w) 108 506.31 P
-0.22 (ould continue to w) 115.12 506.31 P
-0.22 (ork.  This guarantee of substuitability which is guaranteed to be safe at compile) 189.09 506.31 P
(time is at the heart of the Sather guarantee of type-safety) 108 494.31 T
(.) 333.96 494.31 T
4 12 Q
(5.5.1   Contra) 108 452.98 T
(v) 183.18 452.98 T
(ariant conf) 189.61 452.98 T
(ormance) 250.72 452.98 T
5 10 Q
0.03 (The type-safe rule for determining whether a signature in a child class is consistent with the de\336ni-) 108 430.31 P
0.51 (tion of the signature in the parent class is referred to as the  conformance rule) 108 418.31 P
5 8 Q
0.41 (1) 424.7 422.31 P
5 10 Q
0.51 (. The  rule is quite) 428.7 418.31 P
0.01 (simple, b) 108 406.31 P
0.01 (ut counter) 144.48 406.31 P
0.01 (-intuiti) 184.56 406.31 P
0.01 (v) 211.54 406.31 P
0.01 (e at \336rst.   Assume the simple abstract classes  which we will use for ar-) 216.39 406.31 P
(gument types) 108 394.31 T
(If we no) 108 332.31 T
(w ha) 141.07 332.31 T
(v) 160.03 332.31 T
(e an abstract class with a signature) 164.88 332.31 T
-0.07 (What are the ar) 108 270.31 P
-0.07 (guments types  of) 168.97 270.31 P
9 F
-0.17 (foo) 242.03 270.31 P
5 F
-0.07 (in a subytpe of) 265.86 270.31 P
9 F
-0.17 ($SUPER) 327.25 270.31 P
5 F
-0.07 (?  The rule says that  in the subtype) 363.25 270.31 P
(de\336nition of foo) 108 258.31 T
(\245) 108 240.31 T
(Normal ar) 121.54 240.31 T
(guments \050with the mode) 162.18 240.31 T
5 8 Q
(in) 261.62 244.31 T
5 10 Q
(\051 must ha) 267.84 240.31 T
(v) 304.86 240.31 T
(e the same type  or a supertypes) 309.71 240.31 T
(\245) 108 225.31 T
9 F
(out) 121.54 225.31 T
5 F
(ar) 145.54 225.31 T
(guments and return v) 153.13 225.31 T
(alues must ha) 237.59 225.31 T
(v) 291.83 225.31 T
(e the same type or a subtype) 296.68 225.31 T
(\245) 108 210.31 T
9 F
(inout) 121.54 210.31 T
5 F
( ar) 151.54 210.31 T
(guments must ha) 161.63 210.31 T
(v) 229.21 210.31 T
(e the same type) 234.06 210.31 T
108 138 504 158.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 149.09 240.98 149.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(1.  Fr) 108 132.67 T
(equently called the contravariant conformance r) 125.46 132.67 T
(ule to distinguish it fr) 295.08 132.67 T
(om the mor) 371.5 132.67 T
(e r) 412.48 132.67 T
(estrictive C++ r) 421.33 132.67 T
(ule of) 475.95 132.67 T
(invariance and the unsafe Eif) 108 123.67 T
(fel r) 210.78 123.67 T
(ule \050of covariance in the ar) 224.7 123.67 T
(gument types\051.  Hence, the  co- vs. contra variance) 318.44 123.67 T
(debate just r) 108 114.67 T
(efers to the behavior of the ar) 151.3 114.67 T
(gument types) 254.68 114.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(abstract class $UPPER is ...) 144 374.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $MIDDLE < $UPPER is...) 144 365.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $LOWER < $MMIDDLE is ...) 144 356.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $SUPER is) 144 312.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050a1:$MIDDLE, out a2:$MIDDLE, inout a3:$MIDDLE\051:$MIDDLE;) 156.6 303.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 294.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 320.85 129.6 289.1 2 L
V
0.25 H
0 Z
N
489.6 320.85 489.6 289.1 2 L
V
N
129.48 320.98 489.73 320.98 2 L
V
N
129.48 288.98 489.73 288.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 87
%%Page: "88" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(88) 108 710.84 T
8 8 Q
(Abstr) 207.45 710.84 T
(act Classes and Subtyping :) 226.89 710.84 T
0 F
(5.5 T) 336.06 710.84 T
(ype Conf) 352.37 710.84 T
(or) 388.34 710.84 T
(m) 396.22 710.84 T
(ance) 403.56 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(Thus, a v) 108 659.33 T
(alid subtype of) 144.69 659.33 T
9 F
($SUPER) 206.63 659.33 T
5 F
( is) 242.63 659.33 T
(W) 108 597.33 T
(e will e) 116.64 597.33 T
(xplain this rule and its rami\336cations using an e) 145.93 597.33 T
(xtended e) 332.44 597.33 T
(xample.) 370.89 597.33 T
(Suppose we start with herbi) 108 575.33 T
(v) 218.85 575.33 T
(ores and carni) 223.65 575.33 T
(v) 279.49 575.33 T
(ores, each of which are capable of eating) 284.29 575.33 T
4 F
(What does not w) 108 416.33 T
(ork) 187.25 416.33 T
5 F
(It w) 108 393.33 T
(ould appear that both herbi) 123.73 393.33 T
(v) 231.24 393.33 T
(ores and carni) 236.04 393.33 T
(v) 291.88 393.33 T
(ores could be subtypes of omni) 296.68 393.33 T
(v) 421.14 393.33 T
(ores.) 425.94 393.33 T
-0.62 (Ho) 108 331.33 P
-0.62 (we) 119.97 331.33 P
-0.62 (v) 131.38 331.33 P
-0.62 (er) 136.23 331.33 P
-0.62 (,) 143.6 331.33 P
6 F
-0.62 (subtyping  conformance  will not permit this!) 147.98 331.33 P
5 F
-0.62 ( The ar) 352.39 331.33 P
-0.62 (gument to eat in) 379.28 331.33 P
9 F
-1.5 ($HERBIVORE) 444 331.33 P
5 F
-0.27 (is) 108 319.33 P
9 F
-0.65 ($PLANT) 116.9 319.33 P
5 F
-0.27 ( which is not the same as or a supertype of) 152.9 319.33 P
9 F
-0.65 ($FOOD) 322.38 319.33 P
5 F
-0.27 (, the ar) 352.38 319.33 P
-0.27 (gument to eat in) 379.14 319.33 P
9 F
-0.65 ($OMNIVORE) 445.27 319.33 P
5 F
-0.27 (.) 499.27 319.33 P
( T) 108 297.33 T
(o illustrate this, consider a v) 115.81 297.33 T
(ariable of type) 228.33 297.33 T
9 F
($OMNIVORE,) 288.59 297.33 T
5 F
( which holds a herbi) 348.59 297.33 T
(v) 429.44 297.33 T
(ore.) 434.24 297.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $SUPER is) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050a1:$MIDDLE, out a2:$MIDDLE, inout a3:$MIDDLE\051:$MIDDLE;) 156.6 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $HERBIVORE is) 122.4 554.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(eat\050food:$PLANT\051;) 149.4 545.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $CARNIVORE is) 122.4 527.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(eat\050food:$MEAT\051;) 135 518.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $FOOD is ...) 122.4 500.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $PLANT < $FOOD) 122.4 491.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is...) 122.4 482.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $MEAT < $FOOD) 122.4 473.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is...) 122.4 464.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $OMNIVORE is eat\050food:$FOOD\051;) 144 373.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $CARNIVORE < $OMNIVORE is ..) 144 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $HERBIVORE < $OMNIVORE is ...) 144 355.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(cow:$HERBIVORE :=) 144 277.67 T
11 F
(-- assigned to a COW object) 235.2 277.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(animal:$OMNIVORE := cow;) 144 268.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(meat:$MEAT;) 144 259.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(animal.eat\050meat\051;) 144 250.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 616.12 2 L
V
0 Z
N
489.6 647.88 489.6 616.12 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 616 489.73 616 2 L
V
N
288 560 288 442 2 L
V
2 H
N
486 560 486 442 2 L
V
N
287 441 487 441 2 L
V
N
129.6 381.88 129.6 350.13 2 L
V
0.25 H
N
489.6 381.88 489.6 350.13 2 L
V
N
129.48 382 489.73 382 2 L
V
N
129.48 350 489.73 350 2 L
V
N
129.6 285.88 129.6 245.13 2 L
V
N
489.6 285.88 489.6 245.13 2 L
V
N
129.48 286 489.73 286 2 L
V
N
129.48 245 489.73 245 2 L
V
N
288 458 486.67 552 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
($FOOD) 357.33 540 T
($MEAT) 328 511 T
($PLANT) 390 514 T
367.09 535.12 365.77 537.32 370.9 537.41 368.41 532.92 4 Y
0.5 H
0 Z
N
367.09 535.12 365.77 537.32 370.9 537.41 368.41 532.92 4 Y
V
341.33 519.67 366.88 534.99 2 L
2 Z
N
379.63 534.55 378.35 532.32 375.77 536.75 380.9 536.78 4 Y
0 Z
N
379.63 534.55 378.35 532.32 375.77 536.75 380.9 536.78 4 Y
V
403.33 521 379.84 534.42 2 L
2 Z
N
($HERBIVORE) 396 480.33 T
(     eat\050$PLANT\051) 396 471.33 T
($CARNIVORE) 304 479 T
(     eat\050$MEAT\051) 304 470 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 88
%%Page: "89" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 224.58 710.84 T
(act Classes and Subtyping :) 244.02 710.84 T
0 F
(5.5) 353.2 710.84 T
(T) 366.5 710.84 T
(ype Conf) 369.5 710.84 T
(or) 405.48 710.84 T
(m) 413.35 710.84 T
(ance) 420.7 710.84 T
6 10 Q
(89) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.43 (This last call w) 108 659.33 P
0.43 (ould try to feed the animal meat, which is quite le) 170.02 659.33 P
0.43 (g) 372.76 659.33 P
0.43 (al according to the signature of) 377.71 659.33 P
9 F
-1.28 ($OMNIVORE::eat\050$FOOD\051) 108 647.33 P
5 F
-0.53 (, since) 234 647.33 P
9 F
-1.28 ($MEAT) 260.98 647.33 P
5 F
-0.53 ( is a subtype of) 290.98 647.33 P
9 F
-1.28 ($FOOD) 351.36 647.33 P
5 F
-0.53 (.  Ho) 381.36 647.33 P
-0.53 (we) 399.76 647.33 P
-0.53 (v) 411.17 647.33 P
-0.53 (er) 416.02 647.33 P
-0.53 (, the animal happens) 423.39 647.33 P
(to be a co) 108 635.33 T
(w) 146.35 635.33 T
(, which is a herbi) 152.92 635.33 T
(v) 221.27 635.33 T
(ore and cannot eat meat.) 226.07 635.33 T
4 F
(What does w) 108 506.33 T
(ork) 168.92 506.33 T
5 F
-0.17 (When contravariance does not permit a subtyping relationship this is usually an indication of an ex-) 108 483.33 P
-0.12 (ceptional case or an error in our conceptual understanding.  In this case, we note that omnivores are) 108 471.33 P
0.13 (creatures that can eat anything.  But a herbivore really is not an omnivore,  since it cannot eat any-) 108 459.33 P
0.35 (thing.  More importantly, a herbivore could not be substuted for an omnivore.) 108 447.33 P
0.35 ( It is, ho) 425.88 447.33 P
0.35 (we) 459.47 447.33 P
0.35 (v) 470.88 447.33 P
0.35 (er) 475.73 447.33 P
0.35 (, true) 483.1 447.33 P
(that an omni) 108 435.33 T
(v) 157.75 435.33 T
(ore can act as both a carni) 162.55 435.33 T
(v) 266.15 435.33 T
(ore and a herbi) 270.95 435.33 T
(v) 330.4 435.33 T
(ore.) 335.2 435.33 T
-0.19 (The ar) 108 364.33 P
-0.19 (gument of eat in the omni) 133.45 364.33 P
-0.19 (v) 235.27 364.33 P
-0.19 (ore is) 240.07 364.33 P
9 F
-0.47 ($FOOD) 264.12 364.33 P
5 F
-0.19 (, which is a supertype of) 294.12 364.33 P
9 F
-0.47 ($MEAT) 393.22 364.33 P
5 F
-0.19 (, the ar) 422.48 364.33 P
-0.19 (gument of eat) 449.4 364.33 P
0.09 (in) 108 352.33 P
9 F
0.21 ($CARNIVORE) 118.37 352.33 P
5 F
0.09 (.) 178.37 352.33 P
9 F
0.21 ($FOOD) 186.05 352.33 P
5 F
0.09 ( is also a supertype of) 216.05 352.33 P
9 F
0.21 ($PLANT) 308.6 352.33 P
5 F
0.09 ( which is the ar) 344.6 352.33 P
0.09 (gument of eat in) 405.87 352.33 P
9 F
0.21 ($HER-) 474 352.33 P
(BIVORE) 108 340.33 T
5 F
(.) 144 340.33 T
4 12 Q
(5.5.2   Subtyping = substitutability) 108 204 T
5 10 Q
0.25 (A k) 108 181.33 P
0.25 (e) 122.87 181.33 P
0.25 (y distinction is that between is-a and as-a relationships.  When a class, say) 127.16 181.33 P
9 F
0.6 ($OMNIVORE) 430.03 181.33 P
5 F
0.25 ( sub-) 484.03 181.33 P
-0.1 (types from another class such as) 108 169.33 P
9 F
-0.24 ($CARNIVORE) 239.05 169.33 P
5 F
-0.1 (, it means that an omni) 299.05 169.33 P
-0.1 (v) 389.42 169.33 P
-0.1 (ore can be used in an) 394.22 169.33 P
-0.1 (y code) 477.72 169.33 P
-0.36 (which deals with carni) 108 157.33 P
-0.36 (v) 196.92 157.33 P
-0.36 (ores i.e. an omni) 201.72 157.33 P
-0.36 (v) 266.76 157.33 P
-0.36 (ore can substitute for a carni) 271.56 157.33 P
-0.36 (v) 383.07 157.33 P
-0.36 (ore.   In order for this to w) 387.87 157.33 P
-0.36 (ork) 490.67 157.33 P
-0.12 (properly) 108 145.33 P
-0.12 (, the child class omni) 141.23 145.33 P
-0.12 (v) 225.23 145.33 P
-0.12 (ore must be able to beha) 230.03 145.33 P
-0.12 (v) 326.71 145.33 P
-0.12 (e) 331.57 145.33 P
6 F
-0.12 (as-a) 338.39 145.33 P
5 F
-0.12 ( carni) 356.16 145.33 P
-0.12 (v) 378.28 145.33 P
-0.12 (ore.  In man) 383.08 145.33 P
-0.12 (y cases, an is-a re-) 430.89 145.33 P
0.33 (lationship does not satisfy the constraints required by the as-a relationship. The contra) 108 133.33 P
0.33 (v) 455.88 133.33 P
0.33 (ariant con-) 460.63 133.33 P
(formance rule captures the necessary as-a relationship between a subtype and a supertype.) 108 121.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $CARNIVORE is   eat\050food:$MEAT\051; ...) 144 415.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $HERBIVORE is   eat\050food:$PLANT\051;...) 144 406.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $OMNIVORE < $HERBIVORE, $CARNIVORE is) 144 397.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( eat\050food:$FOOD\051; ...) 216 388.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 423.88 129.6 383.12 2 L
V
0 Z
N
489.6 423.88 489.6 383.12 2 L
V
N
129.48 424 489.73 424 2 L
V
N
129.48 383 489.73 383 2 L
V
N
108 531 504 632 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
11 8 Q
0 X
0 0 0 1 0 0 0 K
($CARNIVORE::eat\050$MEAT\051) 172.23 558.02 T
($HERBIVORE::eat\050$PLANT\051) 318.23 558.02 T
($OMNIVORE::eat\050$FOOD\051) 242.75 600.32 T
242.19 573.96 243.55 571.79 238.42 571.6 240.82 576.14 4 Y
0.5 H
0 Z
N
242.19 573.96 243.55 571.79 238.42 571.6 240.82 576.14 4 Y
V
272 592.67 242.4 574.09 2 L
2 Z
N
328.37 573.35 330.11 575.24 331.63 570.34 326.62 571.47 4 Y
0 Z
N
328.37 573.35 330.11 575.24 331.63 570.34 326.62 571.47 4 Y
V
306 594 328.18 573.52 2 L
2 Z
N
J
231.33 611.33 361 546.67 2 L
J
231.33 611.33 234.46 609.77 2 L
1 H
N
[7.258 7.258] 7.258 I
234.46 609.77 357.87 548.23 2 L
N
J
357.87 548.23 361 546.67 2 L
N
J
220 544.67 354 615.33 2 L
J
220 544.67 223.1 546.3 2 L
N
[6.88 6.88] 6.88 I
223.1 546.3 350.9 613.7 2 L
N
J
350.9 613.7 354 615.33 2 L
N
J
0 0 612 792 C
108 242 504 337 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 10 Q
0 X
0 0 0 1 0 0 0 K
($FOOD) 393.82 292.27 T
($MEAT) 360.49 261.07 T
($PLANT) 427.15 261.07 T
398.91 286.49 397.59 288.69 402.73 288.78 400.23 284.29 4 Y
0.5 H
0 Z
N
398.91 286.49 397.59 288.69 402.73 288.78 400.23 284.29 4 Y
V
373.15 271.03 398.7 286.36 2 L
2 Z
N
421.45 288.58 420.17 286.35 417.59 290.79 422.72 290.81 4 Y
0 Z
N
421.45 288.58 420.17 286.35 417.59 290.79 422.72 290.81 4 Y
V
445.15 275.03 421.67 288.46 2 L
2 Z
N
($HERBIVORE::eat\050$PLANT\051) 245.82 297.7 T
($CARNIVORE::eat\050$MEAT\051) 113.82 297.7 T
($OMNIVORE::eat\050$FOOD\051) 171.67 260.67 T
259.11 293.1 256.91 294.43 261.41 296.91 261.3 291.77 4 Y
0 Z
N
259.11 293.1 256.91 294.43 261.41 296.91 261.3 291.77 4 Y
V
244.33 268.67 258.98 292.89 2 L
2 Z
N
187.58 289.6 185.64 287.92 184.66 292.96 189.51 291.28 4 Y
0 Z
N
187.58 289.6 185.64 287.92 184.66 292.96 189.51 291.28 4 Y
V
206.33 268 187.74 289.41 2 L
2 Z
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 89
%%Page: "90" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(90) 108 710.84 T
8 8 Q
(Abstr) 200.19 710.84 T
(act Classes and Subtyping :) 219.63 710.84 T
0 F
(5.6 The) 328.81 710.84 T
7 F
( typecase) 355.59 710.84 T
0 F
( statement) 389.83 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.6  The) 108 654 T
7 F
( typecase) 175.03 654 T
4 F
( statement) 252.07 654 T
5 10 Q
0.45 (It is sometimes necessary to bypass the  abstraction and mak) 108 625.31 P
0.45 (e use of information about the actual) 354.63 625.31 P
-0.35 (type of the object to perform a particular action.  Gi) 108 613.31 P
-0.35 (v) 311.16 613.31 P
-0.35 (en  a v) 316.01 613.31 P
-0.35 (ariable of an abstract type,  we might lik) 341.09 613.31 P
-0.35 (e) 499.56 613.31 P
-0.09 (to mak) 108 601.31 P
-0.09 (e use of the actual type of the object it refers to, in order to determine whether it  either has a) 135.32 601.31 P
(particular implementation or supports other abstractions.) 108 589.31 T
0.16 (The) 108 567.31 P
9 F
0.37 (typecase) 126.21 567.31 P
5 F
0.16 (statement pro) 180.58 567.31 P
0.16 (vides us with the ability to mak) 234.74 567.31 P
0.16 (e use of the actual type of an object) 361.13 567.31 P
(held by a v) 108 555.31 T
(ariable of an abstract type.t) 151.91 555.31 T
-0.31 (The typecase must act on a local v) 108 403.31 P
-0.31 (ariable or an ar) 243.04 403.31 P
-0.31 (gument of a method.On e) 302.17 403.31 P
-0.31 (x) 402.7 403.31 P
-0.31 (ecution, each successi) 407.55 403.31 P
-0.31 (v) 494.71 403.31 P
-0.31 (e) 499.56 403.31 P
-0.19 (type speci\336er is tested for being a supertype of the type of the object held by the v) 108 391.31 P
-0.19 (ariable. The state-) 432.47 391.31 P
0.2 (ment list follo) 108 379.31 P
0.2 (wing the \336rst matching type speci\336er is e) 164.27 379.31 P
0.2 (x) 330.21 379.31 P
0.2 (ecuted and control passes to the statement) 335.06 379.31 P
(follo) 108 367.31 T
(wing the) 126.64 367.31 T
9 F
(typecase) 163.86 367.31 T
5 F
(.) 211.86 367.31 T
4 F
(P) 108 339.31 T
(oints to note) 114.27 339.31 T
5 F
(\245) 108 323.31 T
( It is not le) 121.54 323.31 T
(g) 164.17 323.31 T
(al to assign to the) 169.12 323.31 T
9 F
(typecase) 241.62 323.31 T
5 F
( v) 289.62 323.31 T
(ariable within the statement lists.) 296.87 323.31 T
(\245) 108 308.31 T
(If the object\325) 121.54 308.31 T
(s type is not a subtype of an) 172.64 308.31 T
(y of the type speci\336ers and an) 283.87 308.31 T
9 F
(else) 405.79 308.31 T
5 F
( clause is present,) 429.79 308.31 T
(then the statement list follo) 121.54 296.31 T
(wing it is e) 230.18 296.31 T
(x) 274.2 296.31 T
(ecuted.) 279.05 296.31 T
(\245) 108 281.31 T
( It is a f) 121.54 281.31 T
(atal error for no branch to match in the absence of an) 151.99 281.31 T
9 F
(else) 366.37 281.31 T
5 F
( clause.) 390.37 281.31 T
(\245) 108 266.31 T
(If the v) 121.54 266.31 T
(alue of the v) 150.17 266.31 T
(ariable is) 199.63 266.31 T
9 F
(void) 238.51 266.31 T
5 F
( when the) 262.51 266.31 T
9 F
(typecase) 303.89 266.31 T
5 F
( is e) 351.89 266.31 T
(x) 367.85 266.31 T
(ecuted, then its type is tak) 372.7 266.31 T
(en to) 476.48 266.31 T
(be the declared type of the v) 121.54 254.31 T
(ariable.  In the abo) 234.59 254.31 T
(v) 309.14 254.31 T
(e e) 313.99 254.31 T
(xample, the declared type of) 325.22 254.31 T
9 F
(a) 441.3 254.31 T
5 F
( is) 453.3 254.31 T
9 F
($OB) 464.97 254.31 T
5 F
(,) 488.97 254.31 T
(which does not match an) 121.54 242.31 T
(y of the branches, so the) 220.82 242.31 T
9 F
(else) 320.52 242.31 T
5 F
(clause is tak) 356.52 242.31 T
(en) 405.3 242.31 T
(\245) 108 227.31 T
(The v) 121.54 227.31 T
(ariable of the typecase must be a local v) 144.34 227.31 T
(ariable or a method ar) 304.05 227.31 T
(gument.) 391.62 227.31 T
(\245) 108 212.31 T
( If the) 121.54 212.31 T
9 F
(typecase) 147.92 212.31 T
5 F
( appears in an iterator) 195.92 212.31 T
(, then the mode of the ar) 282.16 212.31 T
(gument must be) 379.46 212.31 T
9 F
(once) 445.85 212.31 T
5 F
(; other-) 469.85 212.31 T
(wise, the type of object that such an ar) 121.54 200.31 T
(gument holds could change.) 274.94 200.31 T
(\245) 108 185.31 T
(The typecase does not search for the branch with the tightest match - it goes do) 121.54 185.31 T
(wn the \336rst) 437.62 185.31 T
(branch that matches.) 121.54 173.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:$OB := 5;) 144 535.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(... some other code...) 144 526.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(res:STR;) 144 517.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typecase a) 144 508.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when INT then) 144 499.64 T
11 F
(-- \325a\325 is of type INT in this branch) 283.2 499.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(     #OUT+"Integer result:"+a;) 144 490.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when FLT then) 144 481.64 T
11 F
( -- \325a\325 is of type FLT in this branch) 278.4 481.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(     #OUT+"Real result:"+a) 144 472.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when $STR then) 144 463.64 T
11 F
(-- \325a\325 is $STR and supports \325.str\325) 283.2 463.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(      #OUT+"Other printable result:"+a.str;) 144 454.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else) 144 445.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    #OUT+"Non printable result";) 144 436.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 427.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 543.85 129.6 422.1 2 L
V
0.25 H
0 Z
N
489.6 543.85 489.6 422.1 2 L
V
N
129.48 543.98 489.73 543.98 2 L
V
N
129.48 421.98 489.73 421.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 90
%%Page: "91" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 220.5 710.84 T
(act Classes and Subtyping :) 239.94 710.84 T
0 F
(5.7) 349.12 710.84 T
(The Ov) 362.42 710.84 T
(er) 389.34 710.84 T
(loading Rule) 397.11 710.84 T
6 10 Q
(91) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(\245) 108 659.33 T
(After a branch has been selected, the typecase tries to cast the v) 121.54 659.33 T
(ariable to as narro) 375.38 659.33 T
(w a type as) 447.05 659.33 T
(possible - if the declared type of the v) 121.54 647.33 T
(ariable is actually stronger than \050a subtype of\051 the chosen) 272.37 647.33 T
(branch, then the v) 121.54 635.33 T
(ariable will k) 192.94 635.33 T
(eep the stronger) 245.61 635.33 T
(, declared type.  F) 309.08 635.33 T
(or instance) 380.58 635.33 T
4 F
(T) 108 549.33 T
(ypecase Example) 113.51 549.33 T
5 F
0.06 (F) 108 526.33 P
0.06 (or instance, suppose we w) 113.41 526.33 P
0.06 (ant to kno) 218.25 526.33 P
0.06 (w the total number of subordinates in an array of general em-) 258.12 526.33 P
(plo) 108 514.33 T
(yees.) 120.68 514.33 T
0.55 (W) 108 371.33 P
0.55 (ithin each branch of the typecase, the v) 117.04 371.33 P
0.55 (ariable has the type of that branch \050or a more restricti) 276.72 371.33 P
0.55 (v) 494.71 371.33 P
0.55 (e) 499.56 371.33 P
(type, if the declared type of the v) 108 359.33 T
(ariable is a subtype of the type of that branch\051.) 239.94 359.33 T
108 297.98 504 301 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 299.49 540 299.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.7  The Overloading Rule) 108 307 T
5 10 Q
-0.26 (W) 108 278.31 P
-0.26 (e mentioned an abridged form of the o) 116.64 278.31 P
-0.26 (v) 268.22 278.31 P
-0.26 (erloading rule in the chapter on Classes and Objects.  That) 273.07 278.31 P
0.54 (simple o) 108 266.31 P
0.54 (v) 142.55 266.31 P
0.54 (erloading rule  w) 147.4 266.31 P
0.54 (as v) 216.95 266.31 P
0.54 (ery limited - it only permitted o) 233.16 266.31 P
0.54 (v) 362.33 266.31 P
0.54 (erloading based on the number of) 367.18 266.31 P
(ar) 108 254.31 T
(guments and the presence or absence of a return v) 115.59 254.31 T
(alue. Here, it is generalized.) 315 254.31 T
-0.1 (As a preliminary w) 108 232.31 P
-0.1 (arning:the  o) 184.52 232.31 P
-0.1 (v) 234.72 232.31 P
-0.1 (erloading are \337e) 239.57 232.31 P
-0.1 (xible,  b) 304.19 232.31 P
-0.1 (ut are intended  to support the coe) 336.29 232.31 P
-0.1 (xistance) 471.23 232.31 P
-0 (of  multiple functions that) 108 220.31 P
6 F
-0 (have the same meaning,  but differ in some implementation de-) 214.36 220.31 P
-0 (tail.) 108 208.31 P
5 F
-0 (Calling functions that do dif) 135.47 208.31 P
-0 (ferent things by the same name is  wrong, unwholesome and se-) 247.98 208.31 P
-0.09 (v) 108 196.31 P
-0.09 (erely fro) 112.85 196.31 P
-0.09 (wned upon!  Hence, using the function name times with dif) 146.65 196.31 P
-0.09 (ferent number of ar) 382.92 196.31 P
-0.09 (guments to) 459.92 196.31 P
(mean) 108 184.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:$SET{INT};) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typecase a) 144 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when INT then ...) 144 597.67 T
11 F
(-- a will never get here, INT is not < $SET{INT}) 230.4 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(when $OB then  ...) 144 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- a has the type of $SET{INT} which is stronger than $OB) 169.2 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(peter ::=  #EMPLOYEE\050"Peter",1\051;) 144 494.67 T
11 F
(-- Name = "Peter", id = 1) 326.4 494.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(paul  ::=  #MANAGER\050"Paul",12,10\051;) 144 485.67 T
11 F
( -- id = 12,10 subordinates) 321.6 485.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(mary  ::=  #MANAGER\050"Mary",15,11\051;) 144 476.67 T
11 F
(-- id = 15,11 subordinates) 326.4 476.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(employees:ARRAY{$EMPLOYEE} := |peter,paul,mary|;) 144 467.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(totalsubs:INT := 0;) 144 458.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop employee:$EMPLOYEE := employees.elt!;) 144 449.67 T
11 F
(-- yields array elements) 350.4 449.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(typecase employee) 156.6 440.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when MANAGER then) 156.6 431.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(totalsubs := totalsubs + employee.numsubordinates;) 171 422.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else  end;) 156.6 413.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+"Number of subordinates:"+totalsubs+"\134n";) 144 395.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 502.88 129.6 390.13 2 L
V
0.25 H
0 Z
N
489.6 502.88 489.6 390.13 2 L
V
N
129.48 503 489.73 503 2 L
V
N
129.48 390 489.73 390 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 91
%%Page: "92" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(92) 108 710.84 T
8 8 Q
(Abstr) 203.37 710.84 T
(act Classes and Subtyping :) 222.81 710.84 T
0 F
(5.7 The Ov) 331.98 710.84 T
(er) 372.21 710.84 T
(loading Rule) 379.98 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(5.7.1   Extending Overloading) 108 658 T
4 10 Q
(Overloading based on Concrete Ar) 108 629.33 T
(gument T) 272.89 629.33 T
(ypes) 317.29 629.33 T
5 F
0.17 ( Ho) 108 606.33 P
0.17 (we) 122.64 606.33 P
0.17 (v) 134.04 606.33 P
0.17 (er) 138.9 606.33 P
0.17 (, we often w) 146.26 606.33 P
0.17 (ant to o) 196.09 606.33 P
0.17 (v) 226.27 606.33 P
0.17 (erload a function based on the actual type of the ar) 231.12 606.33 P
0.17 (guments.  F) 434.76 606.33 P
0.17 (or in-) 481.89 606.33 P
-0.13 (stance, it is common to w) 108 594.33 P
-0.13 (ant to de\336ne addition routines \050) 209.46 594.33 P
9 F
-0.32 (plus) 334.07 594.33 P
5 F
-0.13 (\051 that w) 358.07 594.33 P
-0.13 (ork for dif) 388.25 594.33 P
-0.13 (ferent types of v) 428.84 594.33 P
-0.13 (al-) 493.45 594.33 P
(ues.  In the) 108 582.33 T
9 F
(INT) 154.38 582.33 T
5 F
( class, we could de\336ne) 172.38 582.33 T
-0.24 (W) 108 529.33 P
-0.24 (e can clearly o) 116.64 529.33 P
-0.24 (v) 173.79 529.33 P
-0.24 (erload based on a the type of the ar) 178.64 529.33 P
-0.24 (gument if it is a non-abstract class - at the point) 316.46 529.33 P
(of the call, the ar) 108 517.33 T
(gument can match only one of the o) 175.3 517.33 T
(v) 318.74 517.33 T
(erloaded signatures.) 323.59 517.33 T
4 F
(Overloading based on Abstract Ar) 108 489.33 T
(gument T) 270.11 489.33 T
(ypes) 314.51 489.33 T
5 F
0.52 (Extending the rule to handle abstract types is not quite as simple. T) 108 466.33 P
0.52 (o illustrate the problem, let us) 381.98 466.33 P
(\336rst introduce the) 108 454.33 T
9 F
($STR) 181.05 454.33 T
5 F
( abstract class) 205.05 454.33 T
-0.23 (The) 108 392.33 P
9 F
-0.56 ($STR) 125.82 392.33 P
5 F
-0.23 ( absraction indicates that subtypes pro) 149.82 392.33 P
-0.23 (vide a routine that renders a string v) 300.99 392.33 P
-0.23 (ersion of them-) 443.36 392.33 P
-0.6 (selv) 108 380.33 P
-0.6 (es.  Thus, all the common basic types such as) 123.96 380.33 P
9 F
-1.43 (INT) 301.88 380.33 P
5 F
-0.6 (,) 319.14 380.33 P
9 F
-1.43 ( BOOL) 323.55 380.33 P
5 F
-0.6 ( etc. are subtypes of) 352.12 380.33 P
9 F
-1.43 ($STR) 431.35 380.33 P
5 F
-0.6 ( and pro) 455.35 380.33 P
-0.6 (vide) 486.78 380.33 P
(a) 108 368.33 T
9 F
(str: STR) 114.94 368.33 T
5 F
( routine that returns a string representation of themselv) 162.94 368.33 T
(es.) 382.2 368.33 T
0.62 (No) 108 346.33 P
0.62 (w consider the interf) 119.97 346.33 P
0.62 (ace to the) 204.2 346.33 P
9 F
1.48 (FILE) 246.88 346.33 P
5 F
0.62 ( class.  In the \336le class  we w) 270.88 346.33 P
0.62 (ould  lik) 392.43 346.33 P
0.62 (e to ha) 426.91 346.33 P
0.62 (v) 454.6 346.33 P
0.62 (e a general) 459.45 346.33 P
-0.52 (purpose routine that appends an) 108 334.33 P
-0.52 (y old) 232.95 334.33 P
9 F
-1.26 ($STR) 254.68 334.33 P
5 F
-0.52 ( object, by calling the str routine on it and then appending) 278.68 334.33 P
-0.17 (the resulting string.  This allo) 108 322.33 P
-0.17 (ws us to append an) 224.65 322.33 P
-0.17 (y subtype of) 299.9 322.33 P
9 F
-0.42 ($STR) 351.32 322.33 P
5 F
-0.17 ( to a \336le at the cost of a run-time) 375.32 322.33 P
-0.03 (dispatch. W) 108 310.33 P
-0.03 (e also w) 154.94 310.33 P
-0.03 (ant to de\336ne more ef) 187.55 310.33 P
-0.03 (\336cient, special case routines \050that a) 269.95 310.33 P
-0.03 (v) 409.58 310.33 P
-0.03 (oid the dispatched call) 414.38 310.33 P
(to the str routine\051 for common classes, such as inte) 108 298.33 T
(gers .) 310.6 298.33 T
(The problem arises at the point of call) 108 226.33 T
0.1 (No) 108 164.33 P
0.1 (w which plus routine should we in) 119.97 164.33 P
0.1 (v) 257.92 164.33 P
0.1 (ok) 262.73 164.33 P
0.1 (e? Clearly) 272.62 164.33 P
0.1 (, both routines are v) 312.89 164.33 P
0.1 (alid, since) 392.74 164.33 P
9 F
0.23 (INT) 435.99 164.33 P
5 F
0.1 ( is a subtype) 453.99 164.33 P
-0.01 (of) 108 152.33 P
9 F
-0.03 ($STR) 118.82 152.33 P
5 F
-0.01 (.  W) 142.82 152.33 P
-0.01 (e w) 158.93 152.33 P
-0.01 (ant the) 172.98 152.33 P
10 F
-0.01 (str) 202.39 152.33 P
-0.01 (ong) 212.5 152.33 P
-0.01 (est) 227.4 152.33 P
5 F
-0.01 (  or) 238.51 152.33 P
10 F
-0.01 (most speci\336c) 254.3 152.33 P
5 F
-0.01 ( among the matching methods, \0502\051 in the e) 305.67 152.33 P
-0.01 (xample) 474.56 152.33 P
0.61 (abo) 108 140.33 P
0.61 (v) 122.29 140.33 P
0.61 (e.  Though the notion of the most speci\336c routine may be clear in this case, it can easily get) 127.14 140.33 P
(murk) 108 128.33 T
(y when there are more ar) 128.96 128.33 T
(guments and the type graph is more comple) 228.46 128.33 T
(x.) 403.01 128.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(plus\050a:INT\051:INT is ...) 144 562.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(plus\050a:FLT\051:INT is ...) 144 553.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $STR is) 144 434.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  str:STR;) 144 425.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 416.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FILE is) 144 278.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(   -- Standard output class) 144 269.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(\0501\051  plus\050s:$STR\051 is ....) 144 259.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0502\051  plus\050s:INT\051 is ...) 144 250.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f:FILE := FILE::open_for_read\050"myfile"\051;) 144 206.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:INT := 3;) 144 197.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f+a;) 144 188.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 442.88 129.6 411.12 2 L
V
0 Z
N
489.6 442.88 489.6 411.12 2 L
V
N
129.48 443 489.73 443 2 L
V
N
129.48 411 489.73 411 2 L
V
N
129.6 286.88 129.6 245.13 2 L
V
N
489.6 286.88 489.6 245.13 2 L
V
N
129.48 287 489.73 287 2 L
V
N
129.48 245 489.73 245 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 92
%%Page: "93" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 220.5 710.84 T
(act Classes and Subtyping :) 239.94 710.84 T
0 F
(5.7) 349.12 710.84 T
(The Ov) 362.42 710.84 T
(er) 389.34 710.84 T
(loading Rule) 397.11 710.84 T
6 10 Q
(93) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(The Demon of Ambiguity) 108 659.33 T
5 F
-0.23 (It is not dif) 108 636.33 P
-0.23 (\336cult to construct cases where there is no single most speci\336c routine.  The follo) 151.23 636.33 P
-0.23 (wing e) 469.11 636.33 P
-0.23 (x-) 495.67 636.33 P
0.48 (ample is h) 108 624.33 P
0.48 (ypotheical and not from the current Sather library) 150.02 624.33 P
0.48 (, b) 351.31 624.33 P
0.48 (ut illustrates the point. Suppose we) 361.59 624.33 P
-0.23 (had an abstraction for classes that can render a binary v) 108 612.33 P
-0.23 (ersions of themselv) 327.16 612.33 P
-0.23 (es.  This might be useful,) 404.32 612.33 P
-0.02 (for instance, for the \337oating point classes, where a binary representation may be more compact and) 108 600.33 P
(reliable than a decimal string v) 108 588.33 T
(ersion) 231.44 588.33 T
(No) 108 516.33 T
(w suppose we ha) 119.97 516.33 T
(v) 187.81 516.33 T
(e the follo) 192.66 516.33 T
(wing interf) 232.96 516.33 T
(ace to the) 277.02 516.33 T
9 F
(FILE) 317.84 516.33 T
5 F
( class) 341.84 516.33 T
-0.3 (No) 108 445.33 P
-0.3 (w certain classes, such as) 119.97 445.33 P
9 F
-0.72 (FLT) 222.33 445.33 P
5 F
-0.3 ( could subtype from) 240.33 445.33 P
9 F
-0.72 ($BINARY_STR) 321.9 445.33 P
5 F
-0.3 ( instead of from) 387.9 445.33 P
9 F
-0.72 ($STR) 452.8 445.33 P
5 F
-0.3 (. Thus,) 476.8 445.33 P
(in the follo) 108 433.33 T
(wing e) 151.64 433.33 T
(xample, second plus routine w) 178.43 433.33 T
(ould be seletected) 300.26 433.33 T
(Ev) 108 380.33 T
(erything is still \336ne, b) 118.96 380.33 T
(ut suppose we no) 206.27 380.33 T
(w consider) 275.18 380.33 T
-0.35 (The plus routine in) 108 318.33 P
9 F
-0.84 (FILE) 184.93 318.33 P
5 F
-0.35 ( cannot be unambiguously called with an ar) 208.93 318.33 P
-0.35 (gument of type) 380.45 318.33 P
9 F
-0.84 (FLTD) 442.45 318.33 P
5 F
-0.35 ( i.e. a call) 466.45 318.33 P
0.56 (lik) 108 306.33 P
0.56 (e  \325) 118.46 306.33 P
9 F
1.35 (f+3.0d\325) 132.36 306.33 P
5 F
0.56 ( is ambiguous. None of the \325plus\325 routines match e) 174.36 306.33 P
0.56 (xactly; \0501\051 and \0502\051 both match) 381.48 306.33 P
(equally well.) 108 294.33 T
0.33 (The abo) 108 272.33 P
0.33 (v) 140.67 272.33 P
0.33 (e problem arises because neither \0501\051 nor \0502\051 is more speci\336c than the other - the problem) 145.52 272.33 P
0.68 (could be solv) 108 260.33 P
0.68 (ed if we could al) 162.54 260.33 P
0.68 (w) 231.81 260.33 P
0.68 (ays impose some ordering on the o) 238.93 260.33 P
0.68 (v) 382.28 260.33 P
0.68 (erloaded methods,  such that) 387.13 260.33 P
(there is a most speci\336c method for an) 108 248.33 T
(y call.) 257.55 248.33 T
-0.16 (W) 108 226.33 P
-0.16 (e could resolv) 116.64 226.33 P
-0.16 (e the abo) 172.27 226.33 P
-0.16 (v) 207.9 226.33 P
-0.16 (e problem by ruling the) 212.75 226.33 P
9 F
-0.38 (FILE) 308.33 226.33 P
5 F
-0.16 ( class to be ille) 332.33 226.33 P
-0.16 (g) 390.98 226.33 P
-0.16 (al, since there is a common) 395.93 226.33 P
-0.56 (subtype to both) 108 214.33 P
9 F
-1.34 ($STR) 170.49 214.33 P
5 F
-0.56 ( and) 194.49 214.33 P
9 F
-1.34 ($BINARY_STR) 212.81 214.33 P
5 F
-0.56 (, namely) 278.81 214.33 P
9 F
-1.34 (FLTD) 314.63 214.33 P
5 F
-0.56 (.  Thus, a possible rule w) 338.63 214.33 P
-0.56 (ould be that o) 435.16 214.33 P
-0.56 (v) 488.05 214.33 P
-0.56 (er-) 492.9 214.33 P
-0.28 (loading based on abstract ar) 108 202.33 P
-0.28 (guments is permitted, pro) 218.35 202.33 P
-0.28 (vided that the  abstract types in) 319.58 202.33 P
-0.28 (v) 441.94 202.33 P
-0.28 (olv) 446.74 202.33 P
-0.28 (ed  ha) 459.37 202.33 P
-0.28 (v) 482.49 202.33 P
-0.28 (e no) 487.34 202.33 P
(subtypes in common.) 108 190.33 T
0 (Ho) 108 168.33 P
0 (we) 119.97 168.33 P
0 (v) 131.38 168.33 P
0 (er) 136.23 168.33 P
0 (, the problem is some) 143.6 168.33 P
0 (what w) 229.2 168.33 P
0 (orse than this in Sather) 258.26 168.33 P
0 (, since both subtyping and supertyping) 349.54 168.33 P
(edges can be introduced after the f) 108 156.33 T
(act.  Thus, if we ha) 245.63 156.33 T
(v) 321.8 156.33 T
(e the follo) 326.65 156.33 T
(wing de\336nition of) 366.95 156.33 T
9 F
(FLTD) 441.12 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $BINARY_PRINTABLE is) 144 568.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(   -- Subtypes can provide a binary version of themselves) 144 559.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   binary_str:STR;) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FILE is) 144 496.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0501\051  plus\050s:$STR\051 is ..) 144 487.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0502\051  plus\050s:$BINARY_STR\051 is ...) 144 478.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0503\051  plus\050s:INT\051 is ...) 144 469.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f:FILE;) 144 413.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f+3.0;) 144 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FLTD < $BINARY_STR, $STR is) 144 360.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  binary_str:STR is) 144 351.67 T
11 F
(... binary version) 240 351.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  str:STR is) 144 342.67 T
11 F
(... decimal version) 206.4 342.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class FLTD < $BINARY_STR is) 144 136.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     binary_str:STR is ...) 144 127.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     str:STR is ...) 144 118.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 576.88 129.6 535.12 2 L
V
0 Z
N
489.6 576.88 489.6 535.12 2 L
V
N
129.48 577 489.73 577 2 L
V
N
129.48 535 489.73 535 2 L
V
N
129.6 504.88 129.6 464.12 2 L
V
N
489.6 504.88 489.6 464.12 2 L
V
N
129.48 505 489.73 505 2 L
V
N
129.48 464 489.73 464 2 L
V
N
129.6 144.88 129.6 113.13 2 L
V
N
489.6 144.88 489.6 113.13 2 L
V
N
129.48 145 489.73 145 2 L
V
N
129.48 113 489.73 113 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 93
%%Page: "94" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(94) 108 710.84 T
8 8 Q
(Abstr) 203.37 710.84 T
(act Classes and Subtyping :) 222.81 710.84 T
0 F
(5.7 The Ov) 331.98 710.84 T
(er) 372.21 710.84 T
(loading Rule) 379.98 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.47 (the \336le class will w) 108 659.33 P
-0.47 (ork.  Ho) 183.23 659.33 P
-0.47 (we) 215.09 659.33 P
-0.47 (v) 226.49 659.33 P
-0.47 (er) 231.35 659.33 P
-0.47 (, at a later point, a user can introduce ne) 238.71 659.33 P
-0.47 (w edges that cause the same) 393.89 659.33 P
(ambiguity described abo) 108 647.33 T
(v) 206.17 647.33 T
(e to reappear!) 211.02 647.33 T
0.75 (Adding this ne) 256.67 603.33 P
0.75 (w class introduces an additional edge into the) 316.81 603.33 P
(type graph and breaks e) 256.67 591.33 T
(xisting code.) 351.49 591.33 T
1.42 (The essense of the full-\337edged o) 256.67 569.33 P
1.42 (v) 393.89 569.33 P
1.42 (erloading rule a) 398.74 569.33 P
1.42 (v) 464.15 569.33 P
1.42 (oids this) 468.95 569.33 P
0.61 (problem by requiring that the type of the ar) 256.67 557.33 P
0.61 (gument in one of) 434.12 557.33 P
0.41 (the routines must be kno) 256.67 545.33 P
0.41 (wn to be more speci\336c than the type) 356.4 545.33 P
-0.25 (of the ar) 256.67 533.33 P
-0.25 (gument in the corresponding position in the other rou-) 289.32 533.33 P
2.08 (tine. Insisting that a subtyping relationship between corre-) 256.67 521.33 P
-0.01 (sponding ar) 108 509.33 P
-0.01 (guments must e) 154.75 509.33 P
-0.01 (xist, ef) 217.35 509.33 P
-0.01 (fecti) 244.31 509.33 P
-0.01 (v) 261.83 509.33 P
-0.01 (ely ensures that one of the methods will be more speci\336c in) 266.68 509.33 P
-0.44 (an) 108 497.33 P
-0.44 (y gi) 117.29 497.33 P
-0.44 (v) 131.88 497.33 P
-0.44 (en conte) 136.73 497.33 P
-0.44 (xt.  Most importantly) 169.73 497.33 P
-0.44 (, this speci\336city cannot be af) 252.76 497.33 P
-0.44 (fected by the addition of ne) 364.72 497.33 P
-0.44 (w edges) 471.95 497.33 P
0.13 (to the type graph.  Thus, the follo) 108 485.33 P
0.13 (wing de\336nition of) 242.24 485.33 P
9 F
0.31 ($BINARY_STR) 316.79 485.33 P
5 F
0.13 ( w) 382.79 485.33 P
0.13 (ould permit the o) 392.54 485.33 P
0.13 (v) 461.38 485.33 P
0.13 (erloading) 466.23 485.33 P
(in the) 108 473.33 T
9 F
(FILE) 133 473.33 T
5 F
( class to w) 157 473.33 T
(ork properly) 198.84 473.33 T
6.47 (When the) 194 411.33 P
9 F
15.54 (\325plus\325) 248.05 411.33 P
5 F
6.47 ( routine is called with a) 284.05 411.33 P
9 F
15.54 (FLTD) 419 411.33 P
5 F
6.47 (, the routine) 443 411.33 P
9 F
22.48 (\325plus\050$BINARY_STR\051\325) 194 399.33 P
5 F
9.37 ( is unambiguously more speci\336c than) 308 399.33 P
9 F
(\325plus\050$STR\051\325) 194 387.33 T
5 F
(.) 266 387.33 T
4 12 Q
(5.7.2   P) 108 302 T
(ermissib) 152.34 302 T
(le o) 201.58 302 T
(verloading) 222.01 302 T
5 10 Q
-0.04 (T) 108 279.33 P
-0.04 (w) 113.31 279.33 P
-0.04 (o signatures \050of routines or iterators\051  can  o) 120.43 279.33 P
-0.04 (v) 295.14 279.33 P
-0.04 (erload, if the) 299.99 279.33 P
-0.04 (y can be distinguised in some manner) 350.58 279.33 P
-0.04 (-) 500.67 279.33 P
(thus, the) 108 267.33 T
(y must dif) 141.74 267.33 T
(fer in one of the follo) 182.05 267.33 T
(wing w) 267.06 267.33 T
(ays) 296.68 267.33 T
3 9 Q
(Ov) 108 249.33 T
(er) 120.42 249.33 T
(load 1.:) 129.24 249.33 T
2 10 Q
(The pr) 166.68 249.33 T
(esence/absence of a r) 195.7 249.33 T
(eturn value) 290.3 249.33 T
3 9 Q
(Ov) 108 234.33 T
(er) 120.42 234.33 T
(load 2.:) 129.24 234.33 T
2 10 Q
(The number of ar) 166.68 234.33 T
(guments) 243.43 234.33 T
3 9 Q
(Ov) 108 219.33 T
(er) 120.42 219.33 T
(load 3.:) 129.24 219.33 T
2 10 Q
(In at least one case corr) 166.68 219.33 T
(esponding ar) 268.99 219.33 T
(guments must have dif) 326.98 219.33 T
(fer) 428.8 219.33 T
(ent marked) 440.69 219.33 T
(modes \050in and once modes ar) 121.54 207.33 T
(e not marked at the point of call and ar) 251.17 207.33 T
(e tr) 422.58 207.33 T
(eated as being) 436.9 207.33 T
(the same fr) 121.54 195.33 T
(om the point of view of overloading\051.) 170.37 195.33 T
3 9 Q
(Ov) 108 180.33 T
(er) 120.42 180.33 T
(load 4.:) 129.24 180.33 T
2 10 Q
(In at least one of the) 166.68 180.33 T
9 F
(in, once) 260.56 180.33 T
2 F
(or) 314.56 180.33 T
9 F
( inout) 323.97 180.33 T
2 F
( ar) 365.97 180.33 T
(gument positions: \050) 377.24 180.33 T
6 F
(a) 462.67 180.33 T
2 F
(\051 both) 467.67 180.33 T
(types ar) 121.54 168.33 T
(e concr) 156.67 168.33 T
(ete and dif) 187.89 168.33 T
(fer) 234.83 168.33 T
(ent or \050) 246.72 168.33 T
6 F
(b) 278.33 168.33 T
2 F
(\051 ther) 284.44 168.33 T
(e is a subtyping r) 307.91 168.33 T
(elationship between the) 383.54 168.33 T
(corr) 121.54 156.33 T
(esponding ar) 139.16 156.33 T
(guments i.e. one must be mor) 197.15 156.33 T
(e speci\336c than the other) 327.69 156.33 T
(. Note that this) 431.67 156.33 T
(subtyping or) 121.54 144.33 T
(dering between the two ar) 178.19 144.33 T
(guments cannot be changed by other addi-) 294.35 144.33 T
(tions to the type graph, so that working libraries cannot be br) 121.54 132.33 T
(oken by adding new) 392.03 132.33 T
(code.) 121.54 120.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $BRIDGE_FLTD < $STR > FLTD is end;) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $BINARY_STR < $STR is) 144 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    binary_str:STR;) 144 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 622.12 2 L
V
0 Z
N
489.6 635.88 489.6 622.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 622 489.73 622 2 L
V
N
129.6 461.88 129.6 430.12 2 L
V
N
489.6 461.88 489.6 430.12 2 L
V
N
129.48 462 489.73 462 2 L
V
N
129.48 430 489.73 430 2 L
V
N
108 528 250.67 610 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
0 X
0 0 0 1 0 0 0 K
($STR) 118 594 T
($BIN) 176.67 594 T
(AR) 198.54 594 T
(Y_STR) 211.78 594 T
(FL) 138.67 536.67 T
(TD) 149.42 536.67 T
($BRIDGE_FL) 156 568.67 T
(TD) 213.97 568.67 T
J
198.77 588.26 196.82 589.93 201.67 591.62 200.71 586.58 4 Y
0.5 H
0 Z
N
198.77 588.26 196.82 589.93 201.67 591.62 200.71 586.58 4 Y
V
189.33 577.33 198.6 588.07 2 L
2 Z
N
133.05 585.36 130.65 584.47 131.51 589.53 135.46 586.26 4 Y
0 Z
N
133.05 585.36 130.65 584.47 131.51 589.53 135.46 586.26 4 Y
V
146.67 548.67 133.14 585.13 2 L
2 Z
N
171.56 558.8 169.9 560.77 174.95 561.68 173.22 556.85 4 Y
0 Z
N
171.56 558.8 169.9 560.77 174.95 561.68 173.22 556.85 4 Y
V
158 547.33 171.37 558.64 2 L
2 Z
N
0 0 612 792 C
108 342 188 418 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
0 X
0 0 0 1 0 0 0 K
($STR) 130 408 T
($BIN) 116 379.33 T
(AR) 137.87 379.33 T
(Y_STR) 151.11 379.33 T
(FL) 130 351.33 T
(TD) 140.75 351.33 T
141.33 371.05 138.77 371.05 141.33 375.5 143.9 371.05 4 Y
0.5 H
0 Z
N
141.33 371.05 138.77 371.05 141.33 375.5 143.9 371.05 4 Y
V
141.33 361.33 141.33 370.8 2 L
2 Z
N
141.33 400.39 138.77 400.39 141.33 404.83 143.9 400.39 4 Y
0 Z
N
141.33 400.39 138.77 400.39 141.33 404.83 143.9 400.39 4 Y
V
141.33 389.33 141.33 400.14 2 L
2 Z
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 94
%%Page: "95" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 220.5 710.84 T
(act Classes and Subtyping :) 239.94 710.84 T
0 F
(5.7) 349.12 710.84 T
(The Ov) 362.42 710.84 T
(er) 389.34 710.84 T
(loading Rule) 397.11 710.84 T
6 10 Q
(95) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.21 (Note that this de\336nition of permissible permissible coe) 108 659.33 P
0.21 (xistance  is the con) 328.47 659.33 P
0.21 (v) 405 659.33 P
0.21 (erse of the de\336nition of) 409.85 659.33 P
(con\337ict in the speci\336cation.  That is, if tw) 108 647.33 T
(o signatures cannot coe) 274.56 647.33 T
(xist, the) 368 647.33 T
(y con\337ict and vice-v) 399.52 647.33 T
(ersa.) 481.3 647.33 T
(Gi) 108 558.33 T
(v) 117.75 558.33 T
(en the abo) 122.6 558.33 T
(v) 163.55 558.33 T
(e de\336nitions of v) 168.4 558.33 T
(ectors, we can de\336ne a multiply and add routine in the matrix class) 235.75 558.33 T
0.38 (While an) 108 388.33 P
0.38 (y of the abo) 144.61 388.33 P
0.38 (v) 193.07 388.33 P
0.38 (e  conditions ensures that a pair of routines  can co-e) 197.92 388.33 P
0.38 (xist  in an interf) 412.14 388.33 P
0.38 (ace,  it) 476.87 388.33 P
(still does not describe which one will be chosen during a call.) 108 376.33 T
4 F
(Finding matc) 108 348.33 T
(hing signatures) 170.13 348.33 T
5 F
-0.08 (When the time comes to mak) 108 325.33 P
-0.08 (e a call, some of the coe) 224.45 325.33 P
-0.08 (xisting routines will match - these are the rou-) 320.2 325.33 P
-0.37 (tines whose ar) 108 313.33 P
-0.37 (guments are supertypes of the ar) 164.28 313.33 P
-0.37 (gument types in the call.   Among these matching sig-) 291.92 313.33 P
0.1 (natures, there must be a single most speci\336c signature.  In the e) 108 301.33 P
0.1 (xample belo) 361.83 301.33 P
0.1 (w) 410.85 301.33 P
0.1 (, we will ab) 417.42 301.33 P
0.1 (use sather) 464.19 301.33 P
0.31 (notation slightly to demonstrate the types directly) 108 289.33 P
0.31 (, rather than using v) 307.56 289.33 P
0.31 (ariables of those types in the) 388.28 289.33 P
(ar) 108 277.33 T
(guments) 115.59 277.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $VEC is ...) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $SPARSE_VEC <  $VEC is ...) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $DENSE_VEC  < $VEC is...) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class DENSE_VEC  < $DENSE_VEC is ...) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class SPARSE_VEC < $SPARSE_VEC is ....) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $MATRIX is) 144 538.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0501\051 mul_add\050by1:$VEC, add1:$SPARSE_VEC\051;) 156.6 520.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0502\051 mul_add\050by2:$DENSE_VEC,  add2:$VEC\051;) 156.6 511.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- \0501\051 and \0502\051 can overload, since the arg types can be ordered) 158.4 502.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- by2:$DENSE_VEC < by1:$VEC,) 144 493.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- add2:$VEC       > add1:$SPARSE_VEC) 144 484.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(\0503\051 mul_add\050by3:DENSE_VEC, add3:SPARSE_VEC\051;) 156.6 466.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- \0503\051 does not conflict with the \0501\051 and \0502\051 because there) 163.2 457.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     --     is a subtyping relation between corresponding arguments.) 144 448.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     -- \050vs 1\051 by3:DENSE_VEC    < by1:$VEC ,) 144 439.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     --        add3:SPARSE_VEC < add1:$SPARSE_VEC) 144 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     -- \050vs 2\051 by3:DENSE_VEC    < by2:$DENSE_VEC ,) 144 421.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     --        add3:SPARSE_VEC < add2:$VEC) 144 412.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f:$MATRIX;) 144 257.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f.mul_add\050DENSE_VEC, SPARSE_VEC\051;) 144 248.67 T
11 F
(-- Matches \0501\051, \0502\051 and \0503\051) 326.4 248.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f.mul_add\050$DENSE_VEC, $SPARSE_VEC\051;) 144 239.67 T
11 F
( -- Matches \0501\051 and \0502\051) 321.6 239.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f.mul_add\050$DENSE_VEC, $DENSE_VEC\051;) 144 230.67 T
11 F
(-- Matches \0502\051) 326.4 230.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f.mul_add\050$SPARSE_VEC, SPARSE_VEC\051;) 144 221.67 T
11 F
(-- Matches \0501\051) 326.4 221.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 577.12 2 L
V
0 Z
N
489.6 635.88 489.6 577.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 577 489.73 577 2 L
V
N
129.6 546.88 129.6 407.13 2 L
V
N
489.6 546.88 489.6 407.13 2 L
V
N
129.48 547 489.73 547 2 L
V
N
129.48 407 489.73 407 2 L
V
N
129.6 265.88 129.6 216.13 2 L
V
N
489.6 265.88 489.6 216.13 2 L
V
N
129.48 266 489.73 266 2 L
V
N
129.48 216 489.73 216 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 95
%%Page: "96" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(96) 108 710.84 T
8 8 Q
(Abstr) 203.37 710.84 T
(act Classes and Subtyping :) 222.81 710.84 T
0 F
(5.7 The Ov) 331.98 710.84 T
(er) 372.21 710.84 T
(loading Rule) 379.98 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(Finding a most speci\336c matc) 108 659.33 T
(hing signature) 245.16 659.33 T
5 F
0.5 (F) 108 636.33 P
0.5 (or the method call to w) 113.41 636.33 P
0.5 (ork, the call must no) 208.3 636.33 P
0.5 (w \336nd an unique signature which is most speci\336c in) 292 636.33 P
(each ar) 108 624.33 T
(gument position) 136.41 624.33 T
-0.08 (The method call) 108 553.33 P
9 F
-0.19 (\325f.mul_add\050$DENSE_VEC, $SPARSE_VEC\051\325) 175.26 553.33 P
5 F
-0.08 ( is ille) 391.07 553.33 P
-0.08 (g) 415.21 553.33 P
-0.08 (al, since both \0501\051 and) 420.16 553.33 P
(\0502\051 match, b) 108 541.33 T
(ut neither is more speci\336c.) 156.4 541.33 T
4 F
(More e) 108 513.33 T
(xamples) 140.08 513.33 T
5 F
(Let us illustrate o) 108 490.33 T
(v) 177.57 490.33 T
(erloading with some more e) 182.42 490.33 T
(xamples. Consider) 293.92 490.33 T
9 F
(\325foo\050a:A, out b:B\051;\325) 370.86 490.33 T
5 F
(All the follo) 108 468.33 T
(wing can co-e) 156.64 468.33 T
(xist with the abo) 212.58 468.33 T
(v) 278.82 468.33 T
(e signature) 283.67 468.33 T
(The follo) 108 388.33 T
(wing cannot be o) 144.69 388.33 T
(v) 213.14 388.33 T
(erloaded with) 217.99 388.33 T
9 F
(foo\050a:A,out b:B\051:INT;) 275.2 388.33 T
5 F
-0.5 (F) 108 326.33 P
-0.5 (or another e) 113.41 326.33 P
-0.5 (xample, this time using abstract classes, consider the mathematical abstraction of a ring) 160.02 326.33 P
0.19 (o) 108 314.33 P
0.19 (v) 112.85 314.33 P
0.19 (er numbers and inte) 117.7 314.33 P
0.19 (gers.  The follo) 197.26 314.33 P
0.19 (wing can be o) 258.68 314.33 P
0.19 (v) 314.91 314.33 P
0.19 (erloaded with the) 319.76 314.33 P
9 F
0.45 (\325plus\325) 392.26 314.33 P
5 F
0.19 ( function in a class) 428.26 314.33 P
(which describes the mathematical notion of rings) 108 302.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(f:$MATRIX;) 144 604.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f.mul_add\050DENSE_VEC, SPARSE_VEC\051) 144 595.67 T
11 F
(-- \0503\051 is most specific) 326.4 595.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f.mul_add\050$DENSE_VEC, $DENSE_VEC\051;) 144 586.67 T
11 F
(-- Only one match) 326.4 586.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f.mul_add\050$SPARSE_VEC, $SPARSE_VEC\051;) 144 577.67 T
11 F
(-- Only one match) 326.4 577.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:A, out b:B\051:INT) 144 448.67 T
11 F
(-- Presence return value \050Overload 1\051) 264 448.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:A\051) 144 439.67 T
11 F
(-- Number of arguments \050Overload 2\051) 264 439.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:A, b:B\051) 144 430.67 T
11 F
(-- Mode of second argument \050Overload 3\051) 264 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:B, out b:B\051) 144 421.67 T
11 F
(-- Different concrete types in) 264 421.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- the first argument \050Overload 4a\051) 263.4 412.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050a:A,b:B\051:BOOL;) 144 368.67 T
11 F
(-- Same number, types of arguments) 240 368.67 T
9 F
(,) 403.2 368.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- both have a return type.) 243 359.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Difference in actual return type cannot be used to overload) 144 350.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(abstract class $RING is) 144 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(plus\050arg:$RING\051:$RING;) 171 273.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $INT  < $RING is) 144 255.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(plus\050arg:$INT\051:$RING;) 171 246.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(--  By Overload 4 since he type of  arg:$INT  < arg:$RING) 171 237.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(abstract class $CPX < $RING is) 144 219.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(plus\050arg:$CPX\051:$RING;) 171 210.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-) 171 201.67 T
11 F
(- By Overload 4b, since the type of arg:$CPX < arg:$RING) 175.8 201.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 612.88 129.6 572.12 2 L
V
0 Z
N
489.6 612.88 489.6 572.12 2 L
V
N
129.48 613 489.73 613 2 L
V
N
129.48 572 489.73 572 2 L
V
N
129.6 456.88 129.6 407.12 2 L
V
N
489.6 456.88 489.6 407.12 2 L
V
N
129.48 457 489.73 457 2 L
V
N
129.48 407 489.73 407 2 L
V
N
129.6 376.88 129.6 345.13 2 L
V
N
489.6 376.88 489.6 345.13 2 L
V
N
129.48 377 489.73 377 2 L
V
N
129.48 345 489.73 345 2 L
V
N
129.6 290.88 129.6 196.13 2 L
V
N
489.6 290.88 489.6 196.13 2 L
V
N
129.48 291 489.73 291 2 L
V
N
129.48 196 489.73 196 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 96
%%Page: "97" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 220.5 710.84 T
(act Classes and Subtyping :) 239.94 710.84 T
0 F
(5.7) 349.12 710.84 T
(The Ov) 362.42 710.84 T
(er) 389.34 710.84 T
(loading Rule) 397.11 710.84 T
6 10 Q
(97) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.98 (The o) 108 659.33 P
0.98 (v) 131.88 659.33 P
0.98 (erloading w) 136.73 659.33 P
0.98 (orks because there is a subtyping relationship between the ar) 185.09 659.33 P
0.98 (guments \325ar) 436.13 659.33 P
0.98 (g\325 to) 484.42 659.33 P
(\325plus\325    The follo) 108 647.33 T
(wing o) 178.02 647.33 T
(v) 205.37 647.33 T
(erloading also w) 210.22 647.33 T
(orks) 276.22 647.33 T
0.31 (No) 108 548.33 P
0.31 (w there is a subtyping relationship between) 119.97 548.33 P
9 F
0.74 ($INT::mul_add) 297.93 548.33 P
5 F
0.31 ( and) 382.67 548.33 P
9 F
0.74 ($RING::mul_add) 402.73 548.33 P
5 F
0.31 (  for) 486.73 548.33 P
(both) 108 536.33 T
9 F
(\325arg1\325) 128.28 536.33 T
5 F
( and) 164.28 536.33 T
9 F
(\325arg2\325) 183.72 536.33 T
5 F
(, b) 219.72 536.33 T
(ut there is no subtyping) 229.52 536.33 T
-0.01 (This some) 108 514.33 P
-0.01 (what comple) 149.12 514.33 P
-0.01 (x rule permits interesting kinds of o) 200.34 514.33 P
-0.01 (v) 342.87 514.33 P
-0.01 (erloading that are needed to implement) 347.72 514.33 P
0.3 (a kind of statically resolv) 108 502.33 P
0.3 (ed, type-safe co-v) 210.16 502.33 P
0.3 (ariance which is useful in the libraries, while not sacri-) 281.88 502.33 P
0.32 (\336cing compositionality) 108 490.33 P
0.32 (.  Externally introducing subtyping or supertyping edges into the type) 200.18 490.33 P
0.32 (graph) 481.23 490.33 P
(cannot suddenly break o) 108 478.33 T
(v) 205.33 478.33 T
(erloading in a  library) 210.18 478.33 T
(.) 296.18 478.33 T
4 12 Q
(5.7.3   Overloading as Staticall) 108 437 T
(y resolved Multi-Methods) 280.57 437 T
5 10 Q
0.05 (F) 108 414.33 P
0.05 (or the curious reader) 113.41 414.33 P
0.05 (,  we  w) 195.62 414.33 P
0.05 (ould lik) 227.08 414.33 P
0.05 (e to point out  a connection to the issue of co and contra-v) 257.86 414.33 P
0.05 (ari-) 490.12 414.33 P
0.03 (ance. It w) 108 402.33 P
0.03 (as this connection that actually moti) 147.12 402.33 P
0.03 (v) 291.19 402.33 P
0.03 (ated our o) 295.94 402.33 P
0.03 (v) 335.84 402.33 P
0.03 (erloading rules.  The \336rst point to note is) 340.69 402.33 P
0.27 (that o) 108 390.33 P
0.27 (v) 130.62 390.33 P
0.27 (erloading is essentially lik) 135.47 390.33 P
0.27 (e statically resolv) 240.9 390.33 P
0.27 (ed multi-methods i.e. methods that can dispatch) 311.28 390.33 P
0.09 (on more than one ar) 108 378.33 P
0.09 (gument.  Ov) 188.15 378.33 P
0.09 (erloaded methods are f) 237.9 378.33 P
0.09 (ar more restricted than multi-methods since) 329.42 378.33 P
0.6 (the declared type must be used to perform the resolution.  The second point to note is that multi-) 108 366.33 P
0.39 (methods can permit safe \325co) 108 354.33 P
0.39 (v) 222.14 354.33 P
0.39 (ariance\325 of ar) 226.89 354.33 P
0.39 (gument types.  F) 280.78 354.33 P
0.39 (or instance, consider the follo) 348.46 354.33 P
0.39 (wing ab-) 468.34 354.33 P
(stractions) 108 342.33 T
0.07 (Note that all the abo) 108 235.33 P
0.07 (v) 189.24 235.33 P
0.07 (e de\336nitions of the) 194.09 235.33 P
9 F
0.17 (\325plus\325) 271.59 235.33 P
5 F
0.07 ( routines safely o) 307.59 235.33 P
0.07 (v) 376.26 235.33 P
0.07 (erload each other) 381.11 235.33 P
0.07 (.  As a conse-) 449.56 235.33 P
(quence, it is possible to pro) 108 223.33 T
(vide more speci\336c v) 217.29 223.33 T
(ersions of functions in sub-types.) 297.96 223.33 T
4 12 Q
(5.7.4   Con\337icts when subtyping) 108 182 T
5 10 Q
-0.26 (When we described subtyping earlier) 108 159.33 P
-0.26 (, we said that the interf) 255.39 159.33 P
-0.26 (ace of the abstract class being de\336ned is) 345.61 159.33 P
0.05 (augmented by all the signatures of the types in the subtyping clause.  But what if some of these su-) 108 147.33 P
(pertypes contain con\337icting signatures?) 108 135.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $RING is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(mul_add\050ring_arg1:$RING, ring_arg2:$RING\051;) 156.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $INT < $RING is) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 9 Q
(mul_add\050int_arg1:$INT, int_arg2:$INT\051;) 178.2 591 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 8 Q
(-- int_arg1:$INT  < ring_arg:$INT and) 190.8 581.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  -- int_arg2:$INT < ring_arg2:$INT) 181.8 572.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(abstract class $FIELD_ELEMENT is) 144 322.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  add\050f:$FIELD_ELEMENT\051:$FIELD_ELEMENT;) 144 313.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $NUMBER < $FIELD_ELEMENT is) 144 295.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  add\050f:$NUMBER\051:$NUMBER) 144 286.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $INTEGER < $NUMBER is) 144 268.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  add\050f:$INTEGER\051:$INGEGER) 144 259.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 567.12 2 L
V
0 Z
N
489.6 635.88 489.6 567.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 567 489.73 567 2 L
V
N
129.6 330.88 129.6 254.13 2 L
V
N
489.6 330.88 489.6 254.13 2 L
V
N
129.48 331 489.73 331 2 L
V
N
129.48 254 489.73 254 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 97
%%Page: "98" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(98) 108 710.84 T
8 8 Q
(Abstr) 203.37 710.84 T
(act Classes and Subtyping :) 222.81 710.84 T
0 F
(5.7 The Ov) 331.98 710.84 T
(er) 372.21 710.84 T
(loading Rule) 379.98 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.06 (It is important to note that a con\337ict occurs when tw) 108 659.33 P
-0.06 (o signatures are so similar that the) 316.14 659.33 P
-0.06 (y cannot  co-) 452.26 659.33 P
-0.01 (e) 108 647.33 P
-0.01 (xist by the o) 112.29 647.33 P
-0.01 (v) 161.28 647.33 P
-0.01 (er) 166.13 647.33 P
-0.01 (-loading rules.  This happens when there is not e) 173.7 647.33 P
-0.01 (v) 367.21 647.33 P
-0.01 (en one ar) 372.06 647.33 P
-0.01 (gument where there is a) 408.51 647.33 P
-0.16 (sub- or supertyping relationship or where both ar) 108 635.33 P
-0.16 (guments are concrete.   As a consequence, you can) 302.48 635.33 P
(al) 108 623.33 T
(w) 115.12 623.33 T
(ays construct a signature that is) 122.24 623.33 T
10 F
(mor) 250 623.33 T
(e g) 265.74 623.33 T
(ener) 277.58 623.33 T
(al) 295.2 623.33 T
5 F
( than  the con\337icting signatures) 302.98 623.33 T
0.29 (In the abo) 108 471.33 P
0.29 (v) 148.41 471.33 P
0.29 (e e) 153.26 471.33 P
0.29 (xample, when we create a more general f) 164.78 471.33 P
0.29 (arm, we must pro) 331.07 471.33 P
0.29 (vide a signature that con-) 401.76 471.33 P
-0.31 (forms to all the con\337icting signatures by generalizing the in ar) 108 459.33 P
-0.31 (guments.  If  the ar) 353.61 459.33 P
-0.31 (guments in the par-) 427.43 459.33 P
-0.12 (ent used the) 108 447.33 P
9 F
-0.29 (out) 160.29 447.33 P
5 F
-0.12 ( mode, we w) 184.01 447.33 P
-0.12 (ould ha) 234.65 447.33 P
-0.12 (v) 264.05 447.33 P
-0.12 (e to use a subtype in the child.  A problem is e) 268.9 447.33 P
-0.12 (xposed if the) 452.58 447.33 P
(mode of the ar) 108 435.33 T
(guments in the parents is) 165.86 435.33 T
9 F
(inout) 267.8 435.33 T
4 12 Q
(5.7.5   Con\337icts during code inc) 108 327 T
(lusion) 288.48 327 T
5 10 Q
0.68 (Since Sather permits inclusion from mulitple classes,  con\337icts can easily arise between methods) 108 304.33 P
0.03 (from dif) 108 292.33 P
0.03 (ferent classes. The resolution of inclusion con\337icts is slightly dif) 140.82 292.33 P
0.03 (ferent for attrib) 399.12 292.33 P
0.03 (utes than it) 460.06 292.33 P
(is for methods, so let us consider them separately) 108 280.33 T
(.) 304.27 280.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $ANIMAL is ...) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class  $PIG < $ANIMAL is ...) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $COW  < $ANIMAL is ...) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $COW_FARM is    has\050a:$COW\051;  end;) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $PIG_FARM is    has\050a:$PIG\051;     end;) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $ANIMAL_FARM < $COW_FARM, $PIG_FARM is) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The signatures for has\050a:$COW\051 and has\050a:$PIG\051 must) 171 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- be generalized) 171 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(has\050a:$ANIMAL\051;) 156.6 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- $ANIMAL is a supertype of $COW and $PIG, so this \325has\325) 171 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- conforms to both the supertype \325has\325 signatures) 171 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $COW_FARM is   processes\050inout a:$COW\051;  end;) 144 415.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $PIG_FARM is   processes\050inout a:$PIG\051;  end;) 144 406.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- ILLEGAL! abstract class $ANIMAL_FARM < $COW_FARM, $PIG_FARM is) 144 388.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- No signature can conform to both the \325processes\325 signatures) 144 379.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- in the $COW_FARM and $PIG_FARM) 144 370.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 490.12 2 L
V
0 Z
N
489.6 611.88 489.6 490.12 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 490 489.73 490 2 L
V
N
129.6 423.88 129.6 365.13 2 L
V
N
489.6 423.88 489.6 365.13 2 L
V
N
129.48 424 489.73 424 2 L
V
N
129.48 365 489.73 365 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 98
%%Page: "99" 99
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 220.5 710.84 T
(act Classes and Subtyping :) 239.94 710.84 T
0 F
(5.7) 349.12 710.84 T
(The Ov) 362.42 710.84 T
(er) 389.34 710.84 T
(loading Rule) 397.11 710.84 T
6 10 Q
(99) 494 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(Con\337icting Methods) 108 659.33 T
3 9 Q
(1.) 108 643.33 T
2 10 Q
(First, let us consider the r) 121.54 643.33 T
(esolution method for r) 233.05 643.33 T
(outines. Con\337icts can occur between) 332.21 643.33 T
(methods in dif) 121.54 631.33 T
(fer) 185.95 631.33 T
(ent classes that have been included  and must be r) 197.84 631.33 T
(esolved by r) 418.6 631.33 T
(enam-) 472.41 631.33 T
(ing the of) 121.54 619.33 T
(fending featur) 163.31 619.33 T
(e in all but one of the included classes.) 226.33 619.33 T
3 9 Q
(2.) 108 487.33 T
2 10 Q
(The other way to r) 121.54 487.33 T
(esolve method con\337icts is to explicitly de\336ne a method in the child) 202.95 487.33 T
(class that will then over) 121.54 475.33 T
(-ride all the par) 226.14 475.33 T
(ent methods.) 294.2 475.33 T
4 F
(Con\337icting Attrib) 108 380.33 T
(utes) 189.46 380.33 T
5 F
-0.22 (W) 108 357.33 P
-0.22 (ith con\337icting attrib) 117.04 357.33 P
-0.22 (utes \050including shareds and consts\051,  the of) 195.84 357.33 P
-0.22 (fending attrib) 364.56 357.33 P
-0.22 (utes) 418.3 357.33 P
10 F
-0.22 (must) 436.69 357.33 P
5 F
-0.22 ( be renamed) 455.58 357.33 P
0.04 (a) 108 345.33 P
0.04 (w) 112.29 345.33 P
0.04 (ay) 119.41 345.33 P
0.04 (, e) 128.2 345.33 P
0.04 (v) 137.43 345.33 P
0.04 (en if the) 142.28 345.33 P
0.04 (y are going to be replaced by  other attrib) 174.99 345.33 P
0.04 (utes i.e. Method 2 described abo) 340.41 345.33 P
0.04 (v) 470.17 345.33 P
0.04 (e is not) 475.02 345.33 P
(allo) 108 333.33 T
(wed for attrib) 122.75 333.33 T
(utes:) 176.98 333.33 T
0.06 (Also the implicit reader and writer routines  of attrib) 108 253.33 P
0.06 (utes de\336ned in the child must not con\337ict with) 317.99 253.33 P
(routines in a parent) 108 241.33 T
-0.56 (In other w) 108 143.33 P
-0.56 (ords, as f) 147.88 143.33 P
-0.56 (ar as attrib) 183.04 143.33 P
-0.56 (utes are concerned, the) 223.92 143.33 P
-0.56 (y must al) 313.72 143.33 P
-0.56 (w) 349.17 143.33 P
-0.56 (ays be e) 356.29 143.33 P
-0.56 (xplicitly renamed a) 387.22 143.33 P
-0.56 (w) 463.16 143.33 P
-0.56 (ay - the) 470.28 143.33 P
-0.56 (y) 499 143.33 P
(are ne) 108 131.33 T
(v) 131.9 131.33 T
(er silently o) 136.75 131.33 T
(v) 183.82 131.33 T
(er) 188.67 131.33 T
(-ridden.) 196.24 131.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class PARENT1 is  foo\050INT\051:INT;) 144 599.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class PARENT2 is  foo\050INT\051:BOOL;) 144 590.67 T
11 F
(-- conflicts with PARENT1::foo) 302.4 590.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class PARENT3 is  foo\050INT\051:FLT;) 144 581.67 T
11 F
(-- would similarly conflict) 302.4 581.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class CHILD is) 144 563.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PARENT1 foo -> parent1_foo;) 171 554.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Include and rename away the routine \325foo\325) 199.8 545.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(include PARENT2 foo -> parent2_foo;) 171 536.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Include and rename away the routine \325foo\325) 199.8 527.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(include PARENT3;) 171 518.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Use the routine from this class) 201 509.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class CHILD is) 144 455.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PARENT1;) 171 446.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PARENT2;) 171 437.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PARENT3;) 171 428.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050INT\051:BOOL is) 156.6 419.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- over-rides all the included, conflicting routines.) 169.2 410.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class PARENT is) 144 313.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr foo:INT;) 156.6 304.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class CHILD is) 144 295.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo:BOOL;) 156.6 286.67 T
11 F
(-- ILLEGAL!) 214.2 286.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Conflicts with the included reader for \325foo\325 i.e. foo:INT) 156.6 277.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class PARENT is) 144 221.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050arg:INT\051;) 156.6 212.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class CHILD is) 144 203.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include PARENT;) 156.6 194.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- ILLEGAL! attr foo:INT;) 156.6 185.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- the writer routine foo\050INT\051 conflicts) 156.6 176.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- with the writer for the include attribute foo\050INT\051) 156.6 167.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 607.88 129.6 504.12 2 L
V
0 Z
N
489.6 607.88 489.6 504.12 2 L
V
N
129.48 608 489.73 608 2 L
V
N
129.48 504 489.73 504 2 L
V
N
129.6 463.88 129.6 405.13 2 L
V
N
489.6 463.88 489.6 405.13 2 L
V
N
129.48 464 489.73 464 2 L
V
N
129.48 405 489.73 405 2 L
V
N
129.6 321.88 129.6 272.13 2 L
V
N
489.6 321.88 489.6 272.13 2 L
V
N
129.48 322 489.73 322 2 L
V
N
129.48 272 489.73 272 2 L
V
N
129.6 229.88 129.6 162.13 2 L
V
N
489.6 229.88 489.6 162.13 2 L
V
N
129.48 230 489.73 230 2 L
V
N
129.48 162 489.73 162 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 99
%%Page: "100" 100
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(100) 108 710.84 T
8 8 Q
(Abstr) 194.06 710.84 T
(act Classes and Subtyping :) 213.5 710.84 T
0 F
(5.8 When Co) 322.68 710.84 T
(v) 372.34 710.84 T
(ar) 376.53 710.84 T
(iance Ails Y) 384.56 710.84 T
(ou) 427.56 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(5.7.6   P) 108 658 T
(oints to note) 152.22 658 T
5 10 Q
(\245) 108 638.33 T
(It is not possible to o) 121.54 638.33 T
(v) 205.01 638.33 T
(erload based based solely on) 209.86 638.33 T
9 F
(out) 326.78 638.33 T
5 F
(or) 350.78 638.33 T
9 F
(inout) 361.61 638.33 T
5 F
( ar) 391.61 638.33 T
(guments \050by the pre-con-) 401.7 638.33 T
(dition for applying  the o) 121.54 626.33 T
(v) 221.11 626.33 T
(erload rule 4a and 4b\051) 225.96 626.33 T
(\245) 108 611.33 T
(When a class e) 121.54 611.33 T
(xplicitly de\336nes a signature and includes  a con\337icting signature from another) 181.09 611.33 T
(class, the included signature is o) 121.54 599.33 T
(v) 250.82 599.33 T
(er) 255.67 599.33 T
(-ridden.  This might lead to included signatures une) 263.24 599.33 T
(xpected-) 469.46 599.33 T
(ly disappearing, instead of o) 121.54 587.33 T
(v) 234.43 587.33 T
(erloading.) 239.28 587.33 T
(\245) 108 572.33 T
(In certain special cases, subtyping from tw) 121.54 572.33 T
(o classes with con\337icting signatures that use) 292.24 572.33 T
9 F
(out) 471.95 572.33 T
5 F
(or) 121.54 560.33 T
9 F
( inout) 129.87 560.33 T
5 F
(ar) 171.87 560.33 T
(guments might not be possible, since the con\337ict cannot be resolv) 179.46 560.33 T
(ed.) 442.35 560.33 T
4 12 Q
(5.7.7   Overloading in P) 108 519 T
(arametriz) 239.7 519 T
(ed Classes) 293.17 519 T
5 10 Q
(The o) 108 496.33 T
(v) 130.9 496.33 T
(erloading rule for parametrized classes is discussed on page 112) 135.75 496.33 T
4 12 Q
(5.7.8   Wh) 108 455 T
(y not use the return type to resolve con\337icts?) 163.12 455 T
5 10 Q
0.18 (According to the current o) 108 432.33 P
0.18 (v) 214.1 432.33 P
0.18 (erloading rules, the type of the return v) 218.95 432.33 P
0.18 (alue and) 376.04 432.33 P
9 F
0.43 (out) 412.5 432.33 P
5 F
0.18 ( ar) 430.5 432.33 P
0.18 (guments cannot) 440.77 432.33 P
-0.16 (be used to dif) 108 420.33 P
-0.16 (ferentiate between methods in the interf) 161.45 420.33 P
-0.16 (ace.  There is no theoretical reason to disallo) 319.7 420.33 P
-0.16 (w) 496.78 420.33 P
0.2 (this possibility) 108 408.33 P
0.2 (.   Ho) 166.18 408.33 P
0.2 (we) 188.75 408.33 P
0.2 (v) 200.16 408.33 P
0.2 (er permitting o) 205.01 408.33 P
0.2 (v) 264.7 408.33 P
0.2 (erloading based on such return v) 269.55 408.33 P
0.2 (alues  in) 400.54 408.33 P
0.2 (v) 433.87 408.33 P
0.2 (olv) 438.67 408.33 P
0.2 (es signi\336cant) 451.3 408.33 P
0.5 (implementation  w) 108 396.33 P
0.5 (ork and w) 183.91 396.33 P
0.5 (as not needed for the usages we en) 224.81 396.33 P
0.5 (visaged.  Thus, o) 366.51 396.33 P
0.5 (v) 435.92 396.33 P
0.5 (erloading is not) 440.77 396.33 P
-0.01 (permitted based on dif) 108 384.33 P
-0.01 (ferences in the return type \050or) 197.43 384.33 P
9 F
-0.02 ( out) 318.44 384.33 P
5 F
-0.01 ( ar) 348.39 384.33 P
-0.01 (guments, which are equi) 358.47 384.33 P
-0.01 (v) 455.95 384.33 P
-0.01 (alent to re-) 460.7 384.33 P
(turn types\051 of a method) 108 372.33 T
108 310.98 504 314 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 312.49 540 312.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(5.8  When Co) 108 320 T
(v) 220.66 320 T
(ariance Ails Y) 230.31 320 T
(ou) 346.57 320 T
5 10 Q
0.06 (In some cases, ho) 108 291.31 P
0.06 (we) 178.48 291.31 P
0.06 (v) 189.89 291.31 P
0.06 (er) 194.74 291.31 P
0.06 (, one type can substitute for the other type b) 202.11 291.31 P
0.06 (ut with a fe) 378.01 291.31 P
0.06 (w e) 423.21 291.31 P
0.06 (xceptions. There) 437.29 291.31 P
(are se) 108 279.31 T
(v) 130.79 279.31 T
(eral w) 135.64 279.31 T
(ays to deal with this problem when it occurs.) 160.25 279.31 T
0.43 ([) 108 257.31 P
10 F
0.43 (This section attempts to pr) 111.33 257.31 P
0.43 (o) 218.73 257.31 P
0.43 (vide some insight into dealing with co) 223.63 257.31 P
0.43 (variance) 377.79 257.31 P
0.43 (.   It is not essential to) 412.63 257.31 P
(under) 108 245.31 T
(standing the langua) 131.23 245.31 T
(g) 210.58 245.31 T
(e) 215.48 245.31 T
(, b) 219.82 245.31 T
(ut might help in the design of your  type hier) 229.62 245.31 T
(ar) 407.24 245.31 T
(c) 415.76 245.31 T
(hy) 420.05 245.31 T
(.]) 428.94 245.31 T
4 12 Q
(5.8.1   But don\325t animals eat f) 108 203.98 T
(ood?) 273.14 203.98 T
5 10 Q
-0.59 ( W) 108 181.31 P
-0.59 (e will consider the de\336nition of an animal class, where both herbi) 118.55 181.31 P
-0.59 (v) 373.44 181.31 P
-0.59 (ores and carni) 378.24 181.31 P
-0.59 (v) 432.9 181.31 P
-0.59 (ores are animals.) 437.7 181.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $ANIMAL is   eat\050food:$FOOD\051; ....) 144 161.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $HERBIVORE < $ANIMAL is...) 144 152.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $CARNIVORE < $ANIMAL is...) 144 143.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 169.85 129.6 138.1 2 L
V
0.25 H
0 Z
N
489.6 169.85 489.6 138.1 2 L
V
N
129.48 169.98 489.73 169.98 2 L
V
N
129.48 137.98 489.73 137.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 100
%%Page: "101" 101
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Abstr) 211.2 710.84 T
(act Classes and Subtyping :) 230.64 710.84 T
0 F
(5.8) 339.82 710.84 T
(When Co) 353.11 710.84 T
(v) 389.47 710.84 T
(ar) 393.66 710.84 T
(iance Ails Y) 401.7 710.84 T
(ou) 444.7 710.84 T
6 10 Q
(101) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.17 (The problem is similar to that in the pre) 108 659.33 P
-0.17 (vious section, b) 265.3 659.33 P
-0.17 (ut is dif) 327.27 659.33 P
-0.17 (ferent in certain w) 357.24 659.33 P
-0.17 (ays that lead to the) 429.67 659.33 P
(need for dif) 108 647.33 T
(ferent solutions) 154.4 647.33 T
4 12 Q
(5.8.2   Solution 1: Refactor the type hierar) 108 606 T
(c) 344.5 606 T
(h) 351.05 606 T
(y) 358.14 606 T
5 10 Q
-0.11 (The ideal solution w) 108 583.33 P
-0.11 (ould be to do what we did in the pre) 189.52 583.33 P
-0.11 (vious section - realize the conceptual prob-) 332.46 583.33 P
-0.33 (lem and rearrange the type hierarch) 108 571.33 P
-0.33 (y to be more accurate.   There is a dif) 248.17 571.33 P
-0.33 (ference in this case, though.) 393.7 571.33 P
-0.1 (When considering omni) 108 559.33 P
-0.1 (v) 203.64 559.33 P
-0.1 (ores, the \325eat\325 operation w) 208.44 559.33 P
-0.1 (as central to the de\336nition of the subtyping rela-) 312.62 559.33 P
-0.4 (tionship.  In the case of animals, the eat operation is not nearly as central - the subtyping relationship) 108 547.33 P
0.18 (is determined by man) 108 535.33 P
0.18 (y other features, completely unrelated to eating.  It w) 194.77 535.33 P
0.18 (ould be unreasonable to) 408.2 535.33 P
(force animals to be subtypes of carni) 108 523.33 T
(v) 254.94 523.33 T
(ores or herbi) 259.74 523.33 T
(v) 310.03 523.33 T
(ores.) 314.83 523.33 T
4 12 Q
(5.8.3   Solution 2: Eliminate the off) 108 482 T
(ending method) 303.26 482 T
5 10 Q
-0.49 (A simple solution w) 108 459.33 P
-0.49 (ould be to determine whether we really need the \325eat\325 routine in the animal class.) 187.28 459.33 P
0.45 (In human cate) 108 447.33 P
0.45 (gories, it appears that higher le) 165.39 447.33 P
0.45 (v) 290.68 447.33 P
0.45 (el cate) 295.54 447.33 P
0.45 (gories often contain features that are present,) 321.65 447.33 P
0.2 (b) 108 435.33 P
0.2 (ut v) 112.8 435.33 P
0.2 (ary greatly in the sub-cate) 128.03 435.33 P
0.2 (gories.  The feature in the higher le) 232.55 435.33 P
0.2 (v) 374.24 435.33 P
0.2 (el cate) 379.09 435.33 P
0.2 (gory is not "operational") 404.96 435.33 P
-0.05 (in the sense that it is ne) 108 423.33 P
-0.05 (v) 200.8 423.33 P
-0.05 (er used directly with the higher le) 205.65 423.33 P
-0.05 (v) 339.54 423.33 P
-0.05 (el cate) 344.39 423.33 P
-0.05 (gory) 370.01 423.33 P
-0.05 (.   It merely denotes the pres-) 387.69 423.33 P
(ence of the feature in all sub-cate) 108 411.33 T
(gories.) 240.58 411.33 T
0.3 (Since we do not kno) 108 389.33 P
0.3 (w the kind of food a general animal can eat, it may be reasonable to just omit) 190.62 389.33 P
(the \325eat\325 signature from the de\336nition of $ANIMAL.  W) 108 377.33 T
(e w) 332.16 377.33 T
(ould thus ha) 346.22 377.33 T
(v) 394.91 377.33 T
(e) 399.76 377.33 T
4 12 Q
(5.8.4   Solution 3:  Dynamicall) 108 270 T
(y Determine the T) 276.55 270 T
(ype) 376.52 270 T
5 10 Q
-0.14 (Another solution, that should be adopted with care, is to permit the \325eat\050$FOOD\051\325 routine in the an-) 108 247.33 P
0.06 (imal class, and de\336ne the subclasses to also eat an) 108 235.33 P
0.06 (y food.  Ho) 308.32 235.33 P
0.06 (we) 353.79 235.33 P
0.06 (v) 365.2 235.33 P
0.06 (er) 370.05 235.33 P
0.06 (, each subclass dynamically de-) 377.42 235.33 P
(termines whether it w) 108 223.33 T
(ants to eat a particular kind of food.) 194.83 223.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $ANIMAL is   eat\050arg:$FOOD\051; ...) 144 203.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $HERBIVORE < $ANIMAL is) 144 194.67 T
11 F
(-- supports eat\050f:$FOOD\051;) 331.2 194.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class COW < $HERBIVORE is) 144 176.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(eat\050arg:$FOOD\051 is) 156.6 167.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typecase arg) 171 158.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when $PLANT then ..) 171 149.67 T
11 F
(-- eat it!) 267 149.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(else raise "Cows only eat plants!"; end;) 171 140.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 131.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 122.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 211.88 129.6 117.12 2 L
V
0 Z
N
489.6 211.88 489.6 117.12 2 L
V
N
129.48 212 489.73 212 2 L
V
N
129.48 117 489.73 117 2 L
V
N
108 308 504 374 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
($HERBIVORE::eat\050$PLANT\051) 311.23 319.36 T
($CARNIVORE::eat\050$MEAT\051) 175.9 318.02 T
2 10 Q
($ANIMAL \050no eat signature\051) 243.75 357.66 T
323.55 332.21 325.39 334 326.65 329.02 321.71 330.43 4 Y
0.5 H
0 Z
N
323.55 332.21 325.39 334 326.65 329.02 321.71 330.43 4 Y
V
304.33 352 323.38 332.39 2 L
2 Z
N
244.06 331.25 245.75 329.31 240.71 328.33 242.38 333.18 4 Y
0 Z
N
244.06 331.25 245.75 329.31 240.71 328.33 242.38 333.18 4 Y
V
268.67 352.67 244.25 331.41 2 L
2 Z
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 101
%%Page: "102" 102
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(102) 108 710.84 T
8 8 Q
(Abstr) 194.06 710.84 T
(act Classes and Subtyping :) 213.5 710.84 T
0 F
(5.8 When Co) 322.68 710.84 T
(v) 372.34 710.84 T
(ar) 376.53 710.84 T
(iance Ails Y) 384.56 710.84 T
(ou) 427.56 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.41 (The \325eat\325 routine in the CO) 108 659.33 P
0.41 (W class accepts all food, b) 218.26 659.33 P
0.41 (ut then dynamically determines whether the) 326.73 659.33 P
(food is appropriate i.e. whether it is a plant.) 108 647.33 T
-0.25 (This approach carries the danger that if a co) 108 625.33 P
-0.25 (w is fed some non-plant food, the error may only be dis-) 281.24 625.33 P
-0.52 (co) 108 613.33 P
-0.52 (v) 117.29 613.33 P
-0.52 (ered at run-time, when the routine is actually called.  Furthermore, such errors may be disco) 122.14 613.33 P
-0.52 (v) 481.94 613.33 P
-0.52 (ered) 486.79 613.33 P
-0.07 (after an arbitrarily long time, when the incorrect call to the \325eat\325 routine actually occurs during e) 108 601.33 P
-0.07 (x) 491.38 601.33 P
-0.07 (e-) 496.23 601.33 P
(cution.) 108 589.33 T
0.03 (This loss of static type-safety is inherent in languages that support co-v) 108 567.33 P
0.03 (ariance, such as Eif) 392.76 567.33 P
0.03 (fel.  The) 470.34 567.33 P
-0.59 (problem can be some) 108 555.33 P
-0.59 (what ameliorated though the use of type-inference, b) 191.25 555.33 P
-0.59 (ut there will al) 398 555.33 P
-0.59 (w) 454.18 555.33 P
-0.59 (ays be cas-) 461.3 555.33 P
(es where type-inference cannot pro) 108 543.33 T
(v) 248.35 543.33 T
(e that a certain call is type-safe.) 253.2 543.33 T
-0.45 (Sather permits the user to break type-safety) 108 521.33 P
-0.45 (, b) 278.51 521.33 P
-0.45 (ut only through the use of a typecase on the ar) 287.86 521.33 P
-0.45 (guments.) 467.61 521.33 P
0.26 (Such case of type un-safety uses are clearly visible in the code and are f) 108 509.33 P
0.26 (ar from the def) 398.67 509.33 P
0.26 (ault in user) 459.04 509.33 P
(code.) 108 497.33 T
4 12 Q
(5.8.5   Solution 4: P) 108 456 T
(arametriz) 217.68 456 T
(e b) 271.15 456 T
(y the Ar) 288.25 456 T
(gument T) 332.75 456 T
(ype) 386.03 456 T
5 10 Q
0.41 ( Another typesafe solution is to parametrize the animal abstraction by the kind of food the animal) 108 433.33 P
(eats.) 108 421.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 102
%%Page: "103" 103
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 204.04 710.84 T
(ar) 208.62 710.84 T
(ametr) 216.33 710.84 T
(ized Classes and Arr) 239.78 710.84 T
(ays :) 316.59 710.84 T
0 F
(6.1) 336.09 710.84 T
(P) 349.39 710.84 T
(ar) 353.96 710.84 T
(ametr) 361.68 710.84 T
(ized concr) 385.12 710.84 T
(ete types) 425.87 710.84 T
6 10 Q
(103) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (P) 108 642 S
-0.25 (ar) 128.34 642 S
-0.25 (ametr) 162.55 642 S
-0.25 (ized Classes) 266.83 642 S
-0.25 (and Arr) 108 600 S
-0.25 (ays) 235.03 600 S
5 10 Q
-0.28 (All Sather classes may be parametrized by one or more type parameters. T) 108 475.33 P
-0.28 (ype parameters are essen-) 401.83 475.33 P
0.34 (tially placeholders for actual types; the actual type is only  kno) 108 463.33 P
0.34 (wn when the class is actually used.) 362.27 463.33 P
-0.06 (The array class, which we ha) 108 451.33 P
-0.06 (v) 223.55 451.33 P
-0.06 (e already seen, is an e) 228.4 451.33 P
-0.06 (xample of a parametrized class.Whene) 315.13 451.33 P
-0.06 (v) 469.3 451.33 P
-0.06 (er a pa-) 474.15 451.33 P
-0.32 (rameterized type is referred to, its parameters are speci\336ed by type speci\336ers. The class beha) 108 439.33 P
-0.32 (v) 473.74 439.33 P
-0.32 (es lik) 478.59 439.33 P
-0.32 (e) 499.56 439.33 P
-0.36 (a non-parameterized v) 108 427.33 P
-0.36 (ersion whose body is a te) 196.54 427.33 P
-0.36 (xtual cop) 295.42 427.33 P
-0.36 (y of the original class in which each param-) 331.9 427.33 P
(eter occurrence is replaced by its speci\336ed type.) 108 415.33 T
108 353.98 504 357 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 355.49 540 355.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(6.1  P) 108 363 T
(arametriz) 154.49 363 T
(ed concrete types) 234.7 363 T
5 10 Q
0.22 (As an e) 108 334.31 P
0.22 (xample of a parametrized class, consider the class P) 138.27 334.31 P
0.22 (AIR, which can hold tw) 346.52 334.31 P
0.22 (o objects of ar-) 443.1 334.31 P
(bitrary types.  W) 108 322.31 T
(e will refer to the types as T1 and T2:) 174.41 322.31 T
(W) 108 188.31 T
(e can use this class to hold a pair of inte) 116.64 188.31 T
(gers or a pair of an inte) 275.91 188.31 T
(ger and a real etc.) 368.51 188.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class PAIR{T1,T2} is) 144 302.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   readonly attr first:T1;) 144 293.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   readonly attr second:T2;) 144 284.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    create\050a_first:T1, a_second:T2\051:SAME is) 144 266.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res ::= new;) 144 257.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.first := a_first;) 144 248.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.second := a_second;) 144 239.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res;) 144 230.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 144 221.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 212.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(c ::= #PAIR{INT,INT}\0505,5\051;) 144 168.64 T
11 F
(-- Holds a  pair of integers) 292.8 168.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(d ::= #PAIR{INT,FLT}\0505,5.0\051;) 144 159.64 T
11 F
( -- Holds an integer and a FLT) 288 159.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(e ::= #PAIR{STR,INT}\050"this",5\051;) 144 150.64 T
11 F
(-- A string and an integer) 292.8 150.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f:INT := e.second;) 144 141.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(g:FLT := d.second;) 144 132.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 310.85 129.6 207.1 2 L
V
0.25 H
0 Z
N
489.6 310.85 489.6 207.1 2 L
V
N
129.48 310.98 489.73 310.98 2 L
V
N
129.48 206.98 489.73 206.98 2 L
V
N
129.6 176.85 129.6 127.1 2 L
V
N
489.6 176.85 489.6 127.1 2 L
V
N
129.48 176.98 489.73 176.98 2 L
V
N
129.48 126.98 489.73 126.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 103
%%Page: "104" 104
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(104) 108 710.84 T
8 8 Q
(P) 186.91 710.84 T
(ar) 191.48 710.84 T
(ametr) 199.2 710.84 T
(ized Classes and Arr) 222.64 710.84 T
(ays :) 299.45 710.84 T
0 F
(6.1 P) 318.96 710.84 T
(ar) 336.83 710.84 T
(ametr) 344.54 710.84 T
(ized concr) 367.99 710.84 T
(ete types) 408.73 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.55 (Thus, instead of de\336ning a ne) 108 659.33 P
-0.55 (w class for each dif) 223.33 659.33 P
-0.55 (ferent type of pair) 298.64 659.33 P
-0.55 (, we can just parametrize the P) 368.52 659.33 P
-0.55 (AIR) 486.78 659.33 P
(class with dif) 108 647.33 T
(ferent parameters.) 161.08 647.33 T
4 12 Q
(6.1.1   Wh) 108 606 T
(y P) 163.12 606 T
(arametriz) 180.77 606 T
(e?) 234.24 606 T
5 10 Q
-0.21 (P) 108 583.33 P
-0.21 (arametrization is normally presented as a mechanism for achie) 113.41 583.33 P
-0.21 (ving ef) 361.39 583.33 P
-0.21 (\336cienc) 388.98 583.33 P
-0.21 (y by specializing code) 415.49 583.33 P
0.3 (to use particular types.    Ho) 108 571.33 P
0.3 (we) 222.59 571.33 P
0.3 (v) 234 571.33 P
0.3 (er) 238.85 571.33 P
0.3 (,  parametrization plays an e) 246.22 571.33 P
0.3 (v) 360.21 571.33 P
0.3 (en more important conceptual role) 365.06 571.33 P
(in a language with strong typing lik) 108 559.33 T
(e Sather) 250.12 559.33 T
(.) 282.06 559.33 T
( F) 108 537.33 T
(or instance, we could de\336ne a pair to hold $OBs) 115.91 537.33 T
(There is no problem with de\336ning OB_P) 108 412.33 T
(AIR objects; in f) 270.41 412.33 T
(act, it looks a little simpler) 337.25 412.33 T
(.) 443.37 412.33 T
(Ho) 108 359.33 T
(we) 119.97 359.33 T
(v) 131.38 359.33 T
(er) 136.23 359.33 T
(, when the time comes to e) 143.6 359.33 T
(xtract the components of the pair) 250.38 359.33 T
(, we are in trouble:) 381.9 359.33 T
9 9 Q
(-- f:INT := e.second; ILLEGAL! second is declared to be a $OB) 144 342 T
7 F
(We can typecase on the return value:) 115.2 322 T
5 10 Q
0.17 (The abo) 108 261.33 P
0.17 (v) 140.51 261.33 P
0.17 (e code has the desired ef) 145.35 261.33 P
0.17 (fect, b) 243.95 261.33 P
0.17 (ut is e) 268.91 261.33 P
0.17 (xtremely cumbersome. Imagine if you had to do this) 292.98 261.33 P
0.37 (e) 108 249.33 P
0.37 (v) 112.19 249.33 P
0.37 (ery time you remo) 117.04 249.33 P
0.37 (v) 191.59 249.33 P
0.37 (ed an INT from an ARRA) 196.44 249.33 P
0.37 (Y{INT}! Note that the abo) 301.92 249.33 P
0.37 (v) 411.14 249.33 P
0.37 (e code w) 415.99 249.33 P
0.37 (ould raise an) 452.17 249.33 P
(error if the branch in the typecase does not match.) 108 237.33 T
0.29 (The parametrized v) 108 215.33 P
0.29 (ersion of the pair container gets around all these problems by essentially anno-) 186.17 215.33 P
0.37 (tating the type of the container with the types of the objects it contains; the types of the contained) 108 203.33 P
(objects are the type parameter) 108 191.33 T
(.) 227.41 191.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class OB_PAIR is) 144 517.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   readonly attr first,second:$OB;) 144 508.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    create\050a_first, a_second:$OB\051:SAME is) 144 490.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res ::= new;) 144 481.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.first := a_first;) 144 472.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.second := a_second;) 144 463.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res;) 144 454.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 144 445.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class OB_PAIR) 144 436.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(c ::= #OB_PAIR\0505,5\051;     -- Holds a  pair of integers) 144 392.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(d ::= #OB_PAIR\0505,5.0\051;   -- Holds an integer and a FLT) 144 383.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f_ob:$OB := e.second;) 144 302.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f:INT;) 144 293.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typecase f_ob when INT then f := f_ob end;) 144 284.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 525.88 129.6 431.12 2 L
V
0 Z
N
489.6 525.88 489.6 431.12 2 L
V
N
129.48 526 489.73 526 2 L
V
N
129.48 431 489.73 431 2 L
V
N
129.6 400.88 129.6 378.12 2 L
V
N
489.6 400.88 489.6 378.12 2 L
V
N
129.48 401 489.73 401 2 L
V
N
129.48 378 489.73 378 2 L
V
N
129.6 310.88 129.6 279.13 2 L
V
N
489.6 310.88 489.6 279.13 2 L
V
N
129.48 311 489.73 311 2 L
V
N
129.48 279 489.73 279 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 104
%%Page: "105" 105
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 226.34 710.84 T
(ar) 230.91 710.84 T
(ametr) 238.62 710.84 T
(ized Classes and Arr) 262.07 710.84 T
(ays :) 338.88 710.84 T
0 F
(6.2) 358.38 710.84 T
(Suppor) 371.68 710.84 T
(t f) 399.25 710.84 T
(or Arr) 406.37 710.84 T
(ays) 426.81 710.84 T
6 10 Q
(105) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(6.2  Suppor) 108 654 T
(t f) 206.39 654 T
(or Arra) 223.02 654 T
(ys) 282.67 654 T
5 10 Q
-0.4 (Arrays \050and, in f) 108 625.31 P
-0.4 (act, most container classes\051 are realized using parametrized classes in Sather) 172.79 625.31 P
-0.4 (.  There) 473.98 625.31 P
0.21 (is  language support for the main array class) 108 613.31 P
9 F
0.5 (ARRAY{T}) 289.02 613.31 P
5 F
0.21 ( in the form of a literal e) 337.02 613.31 P
0.21 (xpressions of the) 435.81 613.31 P
(form) 108 601.31 T
-0.03 (In addition to the standard accessing function, arrays pro) 108 557.31 P
-0.03 (vide man) 334.55 557.31 P
-0.03 (y operations, ranging from tri) 371.31 557.31 P
-0.03 (vial) 489 557.31 P
-0.26 (routines that return the size of the array to routines that will sort arbitrary arrays.  See the array class) 108 545.31 P
(in the container library for more details.  There are se) 108 533.31 T
(v) 321.3 533.31 T
(eral aspects to supporting arrays:) 326.15 533.31 T
(\245) 108 515.31 T
(Support for accessing array elements) 121.54 515.31 T
(\245) 108 500.31 T
(Support for objects which represent arrays) 121.54 500.31 T
(\245) 108 485.31 T
(Support for initializing these arrays using literals) 121.54 485.31 T
4 12 Q
(6.2.1   Arra) 108 443.98 T
(y Access) 169.13 443.98 T
5 10 Q
-0.35 (The form \325) 110.14 421.31 P
9 F
-0.85 (a[4]:=..\325) 152.75 421.31 P
5 F
-0.35 (is syntactic sug) 211.9 421.31 P
-0.35 (ar for a call of a routine named) 272.25 421.31 P
9 F
-0.85 (aset) 395.48 421.31 P
5 F
-0.35 (\325 with the array inde) 419.48 421.31 P
-0.35 (x) 499 421.31 P
0.52 (e) 108 409.31 P
0.52 (xpressions and the right hand side of the assignment as ar) 112.29 409.31 P
0.52 (guments.  In the class TRIO belo) 347.29 409.31 P
0.52 (w we) 482.1 409.31 P
(ha) 108 397.31 T
(v) 117.24 397.31 T
(e three elements which can be accessed using array notation.) 122.09 397.31 T
(The array notation can then be used with objects of type TRIO) 108 209.31 T
(See the section on operator rede\336nition \050page 118\051 for more details.) 108 147.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
( a:ARRAY{INT} := |1,2,3|;) 144 581.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class TRIO is) 144 377.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  private attr a,b,c:FLT;) 144 368.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  create:SAME is return new end;) 144 359.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  aget\050i:INT\051:FLT is) 144 350.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     case i) 144 341.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     when 0 then return a) 144 332.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     when 1 then return b) 144 323.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     when 2 then return c) 144 314.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     else raise "Bad array index!\134n"; end;) 144 305.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 296.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   aset\050i:INT, val:FLT\051 is) 144 287.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      case i) 144 278.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when 0 then a := val;) 144 269.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when 1 then b := val;) 144 260.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when 2 then c := val;) 144 251.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 242.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 233.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(trio:TRIO := #TRIO;) 144 189.64 T
11 F
( -- Calls TRIO::create) 240 189.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(trio[2] := 1;) 144 180.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+trio[2];) 144 171.64 T
11 F
(-- Prints out 1) 244.8 171.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 385.85 129.6 228.1 2 L
V
0.25 H
0 Z
N
489.6 385.85 489.6 228.1 2 L
V
N
129.48 385.98 489.73 385.98 2 L
V
N
129.48 227.98 489.73 227.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 105
%%Page: "106" 106
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(106) 108 710.84 T
8 8 Q
(P) 209.2 710.84 T
(ar) 213.78 710.84 T
(ametr) 221.49 710.84 T
(ized Classes and Arr) 244.94 710.84 T
(ays :) 321.74 710.84 T
0 F
(6.2 Suppor) 341.25 710.84 T
(t f) 382.11 710.84 T
(or Arr) 389.23 710.84 T
(ays) 409.67 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(6.2.2   Arra) 108 658 T
(y Classes: Inc) 169.13 658 T
(luding) 248.93 658 T
7 F
(AREF) 288.26 658 T
4 F
( and calling) 320.27 658 T
7 F
(new\050\051) 389.63 658 T
4 F
(;) 419.63 658 T
5 10 Q
0.41 (Sather permits the user to de\336ne array classes which support an array portion whose size is deter-) 108 635.33 P
(mined when the array is created.  An object can ha) 108 623.33 T
(v) 310.24 623.33 T
(e an array portion by including) 315.09 623.33 T
9 F
(AREF{T}) 441.18 623.33 T
5 F
(.) 483.18 623.33 T
-0.08 (Since) 108 399.33 P
9 F
-0.18 (AREF{T}) 132.65 399.33 P
5 F
-0.08 ( already de\336nes) 174.65 399.33 P
9 F
-0.18 (\325aget\325) 239.68 399.33 P
5 F
-0.08 ( and) 275.68 399.33 P
9 F
-0.18 (\325aset\325) 294.97 399.33 P
5 F
-0.08 ( to do the right thing, we can pro) 330.97 399.33 P
-0.08 (vide wrap-) 461.04 399.33 P
0.43 (pers around these routines to, for instance, pro) 108 387.33 P
0.43 (vide an additional w) 296.07 387.33 P
0.43 (arning message. The abo) 378.62 387.33 P
0.43 (v) 479.16 387.33 P
0.43 (e e) 484.01 387.33 P
0.43 (x-) 495.67 387.33 P
0.96 (ample mak) 108 375.33 P
0.96 (e) 153.02 375.33 P
0.96 (x use of the) 157.31 375.33 P
9 F
2.3 (POINT) 210.02 375.33 P
5 F
0.96 ( class from page 35.  W) 240.02 375.33 P
0.96 (e could ha) 339.67 375.33 P
0.96 (v) 382.48 375.33 P
0.96 (e also used the) 387.33 375.33 P
9 F
2.3 ( PAIR) 448.8 375.33 P
5 F
0.96 ( class) 481.1 375.33 P
(de\336ned on page 103.  The follo) 108 363.33 T
(wing e) 233.01 363.33 T
(xample uses the polygon class to de\336ne a triangle.) 259.8 363.33 T
9 F
(AREF) 108 292.33 T
5 F
( de\336nes se) 132 292.33 T
(v) 173.41 292.33 T
(eral useful routines:) 178.26 292.33 T
0.45 (When possible, use the abo) 108 149.34 P
0.45 (v) 218.82 149.34 P
0.45 (e iterators since the) 223.66 149.34 P
0.45 (y are b) 302.36 149.34 P
0.45 (uilt-in and can be more ef) 330.27 149.34 P
0.45 (\336cient than other) 435.32 149.34 P
(iterators.) 108 137.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POLYGON is) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private include AREF{POINT}) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        aget->private old_aget, aset->private old_aset;) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(           -- Rename aget and aset) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   create\050n_points:INT\051:SAME  is) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- Create a new polygon with a \325n_points\325 points) 168 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(       res:SAME := new\050n_points\051;) 144 540.67 T
11 F
(-- Note that the new takes) 312 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       -- as argument of the size of the array) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   end;) 144 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   aget\050i:INT\051:POINT is) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if i > asize then raise "Not enough polygon points!" end;) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return old_aget\050i\051;) 144 486.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   aset\050i:INT, val:POINT\051 is) 144 459.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if i > asize then raise "Not enough polygon points!" end;) 144 450.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      old_aset\050i,val\051;) 144 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(poly:POLYGON := #POLYGON\0503\051;) 144 343.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(poly[0] := #POINT\0503,4\051;) 144 334.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(poly[1] := #POINT\0505,6\051;) 144 325.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(poly[2] := #POINT\0500,0\051;) 144 316.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(asize:INT) 144 272.67 T
11 F
(-- Returns the size of the array) 302.4 272.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(aelt!:T;) 144 263.67 T
11 F
(-- Yields successive array elements) 302.4 263.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(aelt!\050once beg:INT\051:T;) 144 254.67 T
11 F
( -- Yields elements from index \325beg\325) 297.6 254.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(aelt!\050once beg,once num:INT\051:T;) 144 245.67 T
11 F
(-- Yields \325num\325 elts from index \325beg\325) 302.4 245.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(aelt!\050once beg,once num,once step:INT\051:T;) 144 236.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- Yields \325num\325 elements, starting at index \325beg\325 with a \325step\325) 158.4 227.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(... Analgous versions of aset! ..) 144 218.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(acopy\050src:SAME\051;) 144 209.67 T
11 F
(       -- Copy what fits from \325src\325 to self) 273.6 209.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(acopy\050beg:INT,src:SAME\051;) 144 200.67 T
11 F
(  -- Start copying into index \325beg\325) 297.6 200.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(acopy\050beg:INT,num:INT,src:SAME\051;) 144 191.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Copy \325num\325 elements into self starting at index \325beg\325 of self) 163.2 182.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(aind!:INT;) 144 173.67 T
11 F
(     -- Yields successive array indices) 288 173.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 418.13 2 L
V
0 Z
N
489.6 611.88 489.6 418.13 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 418 489.73 418 2 L
V
N
129.6 281 489.6 281 2 L
V
2 H
N
129.6 168 489.6 168 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 106
%%Page: "107" 107
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 226.34 710.84 T
(ar) 230.91 710.84 T
(ametr) 238.62 710.84 T
(ized Classes and Arr) 262.07 710.84 T
(ays :) 338.88 710.84 T
0 F
(6.2) 358.38 710.84 T
(Suppor) 371.68 710.84 T
(t f) 399.25 710.84 T
(or Arr) 406.37 710.84 T
(ays) 426.81 710.84 T
6 10 Q
(107) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(6.2.3   Standar) 108 658 T
(d Arra) 189.13 658 T
(ys: ARRA) 224.23 658 T
(Y{T}) 278.24 658 T
5 10 Q
0.48 (The class) 108 635.33 P
9 F
1.16 (ARRAY{T}) 148.96 635.33 P
5 F
0.48 ( in the standard library is not a primiti) 196.96 635.33 P
0.48 (v) 352.24 635.33 P
0.48 (e data type.  It is based on a b) 357.09 635.33 P
0.48 (uilt-in) 479.55 635.33 P
-0.24 (class) 108 623.33 P
9 F
-0.57 (AREF{T}) 129.7 623.33 P
5 F
-0.24 ( which pro) 171.7 623.33 P
-0.24 (vides objects with an array portion.) 213.85 623.33 P
9 F
-0.57 (ARRAY) 358.28 623.33 P
5 F
-0.24 ( obtains this functionality us-) 388.28 623.33 P
-0.11 (ing an) 108 611.33 P
9 F
-0.25 (include) 135.01 611.33 P
5 F
-0.11 (, b) 177.01 611.33 P
-0.11 (ut chooses to modify the visibility of some of the methods.  It also de\336nes addi-) 186.7 611.33 P
0.29 (tional methods such a) 108 599.33 P
9 F
0.7 (contains) 198.6 599.33 P
5 F
0.29 (,) 246.6 599.33 P
9 F
0.7 (sort) 251.9 599.33 P
5 F
0.29 ( etc.  The methods) 275.9 599.33 P
9 F
0.7 (aget) 353.45 599.33 P
5 F
0.29 (,) 377.45 599.33 P
9 F
0.7 (aset) 382.74 599.33 P
5 F
0.29 ( and) 406.74 599.33 P
9 F
0.7 (asize) 426.77 599.33 P
5 F
0.29 ( are de\336ned) 456.77 599.33 P
(as) 108 587.33 T
9 F
(private) 118.83 587.33 T
5 F
( in) 160.83 587.33 T
9 F
(AREF) 173.61 587.33 T
5 F
(, b) 196.81 587.33 T
(ut) 206.61 587.33 T
9 F
(ARRAY) 216.89 587.33 T
5 F
( rede\336nes them to be public.) 246.89 587.33 T
0.19 (The array portion appears if there is an) 108 460.33 P
9 F
0.46 (include) 267.25 460.33 P
5 F
0.19 ( path  from the type to) 309.25 460.33 P
9 F
0.46 (AREF) 401.97 460.33 P
5 F
0.19 ( for reference types) 425.97 460.33 P
(or to) 108 448.33 T
9 F
(AVAL) 129.11 448.33 T
5 F
( for immutable types.) 153.11 448.33 T
4 F
(Arra) 108 420.33 T
(y Literals) 128.36 420.33 T
5 F
(Sather pro) 108 397.33 T
(vides support for directly creating arrays from literal e) 149.23 397.33 T
(xpressions.) 366.25 397.33 T
-0.62 (The type is tak) 108 344.33 P
-0.62 (en to be the declared type of the conte) 165.19 344.33 P
-0.62 (xt in which it appears and it must be) 312.24 344.33 P
9 F
-1.5 (ARRAY{T}) 456 344.33 P
5 F
(for some type) 108 332.33 T
9 F
(T) 165.49 332.33 T
5 F
(. An array creation e) 170.75 332.33 T
(xpression may not appear) 252.51 332.33 T
(\245) 108 314.33 T
(as the right hand side of a \324) 121.54 314.33 T
9 F
(::=) 230.13 314.33 T
5 F
(\325 assignment) 248.13 314.33 T
(\245) 108 299.33 T
( as a method ar) 121.54 299.33 T
(gument in which the o) 181.9 299.33 T
(v) 271.19 299.33 T
(erloading resolution is ambiguous) 276.04 299.33 T
(\245) 108 284.33 T
(as the left ar) 121.54 284.33 T
(gument of the dot \324) 170.51 284.33 T
9 F
(.) 247.17 284.33 T
5 F
(\325 operator) 252.47 284.33 T
(.) 291.07 284.33 T
11 8 Q
(a:INT := |1,2,3|.size -- ILLEGAL) 144 273.67 T
5 10 Q
-0.24 (The types of each e) 108 253.33 P
-0.24 (xpression in the  array literal must be subtypes of) 184.63 253.33 P
9 F
-0.58 (T) 381.63 253.33 P
5 F
-0.24 (. The size of the created array) 386.89 253.33 P
0.48 (is equal to the number of speci\336ed e) 108 241.33 P
0.48 (xpressions. The e) 255.92 241.33 P
0.48 (xpressions in the literal are e) 326.44 241.33 P
0.48 (v) 443.3 241.33 P
0.48 (aluated left to) 448.05 241.33 P
(right and the results are assigned to successi) 108 229.33 T
(v) 284.11 229.33 T
(e array elements.) 288.96 229.33 T
4 12 Q
(6.2.4   Multi-dimensional Arra) 108 188 T
(ys) 274.48 188 T
5 10 Q
1.63 (Special support is neither present nor needed for multi-dimensional arrays.  The) 108 165.33 P
9 F
3.91 (\325aget\325) 449.43 165.33 P
5 F
1.63 ( and) 485.43 165.33 P
9 F
0.34 (\325aset\325) 108 153.33 P
5 F
0.14 ( routines can tak) 144 153.33 P
0.14 (e multiple ar) 210.14 153.33 P
0.14 (guments, thus permitting multiple indices.   The library does) 260.79 153.33 P
-0.3 (pro) 108 141.33 P
-0.3 (vide) 121.18 141.33 P
9 F
-0.72 ( ARRAY2) 140.6 141.33 P
5 F
-0.3 ( and) 181.88 141.33 P
9 F
-0.72 ( ARRAY3) 198.52 141.33 P
5 F
-0.3 (classes, which pro) 245.09 141.33 P
-0.3 (vide the necesary inde) 317.38 141.33 P
-0.3 (x computation.  All stan-) 405.48 141.33 P
-0.58 (dard array classes are addressed in ro) 108 129.33 P
-0.58 (w-major order) 253.11 129.33 P
-0.58 (.  Ho) 309.46 129.33 P
-0.58 (we) 327.77 129.33 P
-0.58 (v) 339.18 129.33 P
-0.58 (er) 344.03 129.33 P
-0.58 (, the MA) 351.4 129.33 P
-0.58 (T class is addressed in column) 384.96 129.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class ARRAY{T} is) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private include AREF{T}) 156.6 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Make these public.) 171 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(aget->aget,) 171 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(aset->aset,) 171 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(asize->asize;) 171 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
2 10 Q
(...) 156.6 512.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(contains\050e:T\051:BOOL is ... end) 156.6 502.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 156.6 493.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 484.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:ARRAY{INT} := |2,4,6,8|;) 144 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b:ARRAY{STR} := |"apple","orange"|;) 144 368.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 575.88 129.6 479.12 2 L
V
0 Z
N
489.6 575.88 489.6 479.12 2 L
V
N
129.48 576 489.73 576 2 L
V
N
129.48 479 489.73 479 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 107
%%Page: "108" 108
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(108) 108 710.84 T
8 8 Q
(P) 219.03 710.84 T
(ar) 223.6 710.84 T
(ametr) 231.32 710.84 T
(ized Classes and Arr) 254.76 710.84 T
(ays :) 331.57 710.84 T
0 F
(6.3 T) 351.08 710.84 T
(ype Bounds) 367.38 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.21 (major order for compatibility with e) 108 659.33 P
0.21 (xternal FOR) 253.05 659.33 P
0.21 (TRAN routines) 302.38 659.33 P
5 8 Q
0.17 (2) 364.52 663.33 P
5 10 Q
0.21 ( .  Multi-dimensonal array literals) 368.52 659.33 P
(may be e) 108 647.33 T
(xpressed by nesting of standard array literals) 143.95 647.33 T
108 563.98 504 567 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 565.49 540 565.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(6.3  T) 108 573 T
(ype Bounds) 152.95 573 T
5 10 Q
0.23 (When writing more comple) 108 544.31 P
0.23 (x parametrized classes, it is frequently useful to be able to perform op-) 218.8 544.31 P
0.04 (erations on v) 108 532.31 P
0.04 (ariables which are of the type of the parameter) 159.49 532.31 P
0.04 (. F) 345.29 532.31 P
0.04 (or instance, in writing a sorting algo-) 355.73 532.31 P
0.23 (rithm for arrays, you might w) 108 520.31 P
0.23 (ant to mak) 227.4 520.31 P
0.23 (e use of the "less than" operator on the array elements.If a) 269.98 520.31 P
-0.26 (parameter declaration is follo) 108 508.31 P
-0.26 (wed by a type constraint clause \050\325) 224.45 508.31 P
9 F
-0.62 (<) 357.32 508.31 P
5 F
-0.26 (\325 follo) 363.32 508.31 P
-0.26 (wed by a type speci\336er\051, then) 387.53 508.31 P
0.26 (the parameter can only be replaced by subtypes of the constraining type. If a type constraint is not) 108 496.31 P
-0.48 (e) 108 484.31 P
-0.48 (xplicitly speci\336ed, then \324) 112.29 484.31 P
9 F
-1.16 (< $OB) 210.28 484.31 P
5 F
-0.48 (\325 is tak) 239.12 484.31 P
-0.48 (en as the constraint. A type constraint speci\336er may not refer) 265.27 484.31 P
-0.3 (to) 108 472.31 P
9 F
-0.73 (SAME) 117.98 472.31 P
5 F
-0.3 (\325. The body of a parameterized class must be type-correct when the parameters are replaced) 141.98 472.31 P
(by an) 108 460.31 T
(y subtype of their constraining types this allo) 129.79 460.31 T
(ws type-safe independent compilation.) 309.81 460.31 T
0.39 (F) 108 438.31 P
0.39 (or our e) 113.41 438.31 P
0.39 (xample, we will return to emplo) 145.14 438.31 P
0.39 (yees and managers. Recall that the emplo) 275.31 438.31 P
0.39 (yee abstraction) 443.35 438.31 P
(w) 108 426.31 T
(as de\336ned as:) 115.12 426.31 T
108 145 504 165.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 156.09 240.98 156.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
5 10 Q
0 X
0 0 0 1 0 0 0 K
-0.38 (2.  Ef) 108 138.33 P
-0.38 (\336cienc) 128.94 138.33 P
-0.38 (y in con) 155.45 138.33 P
-0.38 (v) 186.51 138.33 P
-0.38 (erting to FOR) 191.36 138.33 P
-0.38 (TRAN w) 245.57 138.33 P
-0.38 (as more important for mathematical entitites which will) 282.03 138.33 P
(be used with e) 108 127.33 T
(xisting mathematical libraries such as BLAS and LAP) 165.34 127.33 T
(A) 381.35 127.33 T
(CK, most of which are in) 388.17 127.33 T
(FOR) 108 116.33 T
(TRAN) 126.85 116.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:ARRAY{ARRAY{INT}} := ||1,2,3|,|3,4,5|,|5,6,7||;) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $EMPLOYEE is) 144 406.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    name:STR;) 144 397.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    id:INT;) 144 388.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 379.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 414.85 129.6 374.1 2 L
V
0.25 H
0 Z
N
489.6 414.85 489.6 374.1 2 L
V
N
129.48 414.98 489.73 414.98 2 L
V
N
129.48 373.98 489.73 373.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 108
%%Page: "109" 109
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 236.16 710.84 T
(ar) 240.74 710.84 T
(ametr) 248.45 710.84 T
(ized Classes and Arr) 271.9 710.84 T
(ays :) 348.71 710.84 T
0 F
(6.3) 368.21 710.84 T
(T) 381.51 710.84 T
(ype Bounds) 384.52 710.84 T
6 10 Q
(109) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.18 (W) 108 659.33 P
0.18 (e can no) 116.64 659.33 P
0.18 (w b) 150.07 659.33 P
0.18 (uild a container class that holds emplo) 164.77 659.33 P
0.18 (yees. The container class mak) 319.09 659.33 P
0.18 (es use of a stan-) 439.4 659.33 P
(dard library class, a LIST) 108 647.33 T
(, which is also parametrized o) 209.18 647.33 T
(v) 328.45 647.33 T
(er the types of things being held.) 333.3 647.33 T
-0.32 (The  routine of interest is "longest_name". The use of this routine is not important, b) 108 387.33 P
-0.32 (ut we can imag-) 440.82 387.33 P
-0.13 (ine that such a routine might be useful in formatting some printout of emplo) 108 375.33 P
-0.13 (yee data. In this routine) 410.37 375.33 P
-0.44 (we go through all emplo) 108 363.33 P
-0.44 (yees in the list, and for each emplo) 203.89 363.33 P
-0.44 (yee we look at the "name". W) 340.1 363.33 P
-0.44 (ith the type-) 456.56 363.33 P
-0.26 (bound on) 108 351.33 P
9 F
-0.63 (ETP) 147.47 351.33 P
5 F
-0.26 (, we kno) 164.36 351.33 P
-0.26 (w that) 197.75 351.33 P
9 F
-0.63 (ETP) 224.44 351.33 P
13 F
-0.26 (must) 244.68 351.33 P
5 F
-0.26 ( be a subtype of) 265.79 351.33 P
9 F
-0.63 ($EMPLOYEE) 330.29 351.33 P
5 F
-0.26 (. Hence, it) 384.29 351.33 P
10 F
-0.26 (must) 427.1 351.33 P
5 F
-0.26 ( ha) 445.99 351.33 P
-0.26 (v) 457.47 351.33 P
-0.26 (e a routine) 462.32 351.33 P
("name" which returns a) 108 339.33 T
9 F
(STR) 204.47 339.33 T
5 F
(.) 222.47 339.33 T
-0.13 (If we did not ha) 108 317.33 P
-0.13 (v) 170.61 317.33 P
-0.13 (e the typebound \050there is an implicit typebound of) 175.46 317.33 P
9 F
-0.31 ($OB) 376.8 317.33 P
5 F
-0.13 (\051, we could not do an) 394.8 317.33 P
-0.13 (ything) 478.44 317.33 P
(with the resulting "emplo) 108 305.33 T
(yee"; all we could assume is that it w) 209.48 305.33 T
(as a) 357.89 305.33 T
9 F
($OB) 375.66 305.33 T
5 F
(, which is not v) 393.66 305.33 T
(ery useful.) 454.9 305.33 T
4 12 Q
(6.3.1   Wh) 108 264 T
(y ha) 163.12 264 T
(ve typebounds?) 186.95 264 T
5 10 Q
0.25 (The purpose of the type bound is to permit type checking of a parametrized class) 108 241.33 P
10 F
0.25 (o) 437.49 241.33 P
0.25 (ver all possible) 442.39 241.33 P
-0.15 (instantiations) 108 229.33 P
5 F
-0.15 (. Note that the current compiler does not do this, thus permitting some possibly ille) 162.46 229.33 P
-0.15 (g) 491.83 229.33 P
-0.15 (al) 496.78 229.33 P
(code to go uncheck) 108 217.33 T
(ed until an instantiation is attempted.) 185.38 217.33 T
4 12 Q
(6.3.2   Super) 108 176 T
(typing and T) 178.94 176 T
(ype Bounds) 249.56 176 T
5 10 Q
0.04 (The need for supertyping clauses arises from our de\336nitition of type-bounds in parametrized types.) 108 153.33 P
(The parameters can only  be instantiated by subtypes of their type bounds.) 108 141.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(    class EMPLOYEE_REGISTER{ETP < $EMPLOYEE} is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr emps:LIST{ETP};) 178.2 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create:SAME is res ::= new; res.emps := #; return res;  end;) 178.2 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(add_employee\050e:ETP\051 is  emps.append\050e\051;    end;) 178.2 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(n_employees:INT is return emps.size end;) 178.2 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(longest_name:INT is) 178.2 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Return the length of the longest employee name) 192.6 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(i:INT := 0;) 190.8 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(cur_longest:INT := 0;) 190.8 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop) 190.8 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(until!\050i=n_employees\051;) 203.4 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(employee:ETP := emps[i];) 203.4 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(name:STR := employee.name;) 203.4 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The type-bound has the ".name" routine) 228.6 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(if name.size > cur_longest then) 203.4 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(cur_longest := name.size;) 216 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 203.4 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 190.8 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return cur_longest;) 190.8 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 178.2 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end;) 144 411.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 406.13 2 L
V
0 Z
N
489.6 635.88 489.6 406.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 406 489.73 406 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 109
%%Page: "110" 110
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(110) 108 710.84 T
8 8 Q
(P) 219.03 710.84 T
(ar) 223.6 710.84 T
(ametr) 231.32 710.84 T
(ized Classes and Arr) 254.76 710.84 T
(ays :) 331.57 710.84 T
0 F
(6.3 T) 351.08 710.84 T
(ype Bounds) 367.38 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.23 (Y) 108 659.33 P
-0.23 (ou may) 114.12 659.33 P
-0.23 (, ho) 142.96 659.33 P
-0.23 (we) 157.47 659.33 P
-0.23 (v) 168.88 659.33 P
-0.23 (er) 173.73 659.33 P
-0.23 (, wish to create a parametrized type which is instantiated with classes from an e) 181.1 659.33 P
-0.23 (x-) 495.67 659.33 P
0.06 (isting library   which are) 108 647.33 P
10 F
0.06 (not) 211.49 647.33 P
5 F
0.06 (   under the typebound you require. F) 224.27 647.33 P
0.06 (or instance, suppose you w) 373.23 647.33 P
0.06 (ant to) 481.43 647.33 P
-0.26 (create a class PRINT) 108 635.33 P
-0.26 (ABLE_ SET) 190.43 635.33 P
-0.26 (, whose parameters must support both hash and the standard string) 240.81 635.33 P
(printing routine) 108 623.33 T
9 F
(str) 173 623.33 T
5 F
(. The library contains the follo) 190.45 623.33 T
(wing abstract classes.) 311.85 623.33 T
0.23 (Ho) 108 570.33 P
0.23 (we) 119.97 570.33 P
0.23 (v) 131.38 570.33 P
0.23 (er) 136.23 570.33 P
0.23 (, our PRINT) 143.6 570.33 P
0.23 (ABLE_SET{T}  must tak) 192.85 570.33 P
0.23 (e all kinds of objects that support both $HASH and) 297.21 570.33 P
-0.16 ($STR, such as inte) 108 558.33 P
-0.16 (gers, \337oating point numbers etc.  Ho) 182.38 558.33 P
-0.16 (w do we support this, without modifying the) 327.3 558.33 P
(distrib) 108 546.33 T
(uted library?) 133.36 546.33 T
0.51 (The PRINT) 108 394.33 P
0.51 (ABLE_SET class can no) 154.52 394.33 P
0.51 (w be instantiated using  inte) 255.49 394.33 P
0.51 (gers, \337oating point  numbers and) 369.81 394.33 P
0.8 (strings.  Thus, supertyping pro) 108 382.33 P
0.8 (vides a w) 233.29 382.33 P
0.8 (ay of creating supertypes without modifying the original) 272.56 382.33 P
(classes \050which is not possible if the original types are in a dif) 108 370.33 T
(ferent library\051.) 351.61 370.33 T
0.4 (Note that this is) 108 348.33 P
10 F
0.4 ( only useful if the original classes cannot be modi\336ed) 172.25 348.33 P
5 F
0.4 (.  In general, it is usually f) 388.85 348.33 P
0.4 (ar) 496.23 348.33 P
(simpler and easier to understand if standard subtyping is used.) 108 336.33 T
-0.15 (A more complicated e) 108 314.33 P
-0.15 (xample arises if we w) 195.99 314.33 P
-0.15 (ant to create a sorted set, whose elements must be hash-) 282.49 314.33 P
(able and comparable.  From the library we ha) 108 302.33 T
(v) 289.7 302.33 T
(e.) 294.55 302.33 T
2.45 (Ho) 108 231.33 P
2.45 (we) 119.97 231.33 P
2.45 (v) 131.38 231.33 P
2.45 (er) 136.23 231.33 P
2.45 (, our SOR) 143.6 231.33 P
2.45 (T) 188.18 231.33 P
2.45 (ABLE_SET{T}  must only tak) 193.37 231.33 P
2.45 (e  objects that support both $HASH and) 327.12 231.33 P
($IS_L) 108 219.33 T
(T{T}) 132.08 219.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $HASH < $IS_EQ is    hash:INT;     end;) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class  $STR   is str:STR;   end;) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $HASH_AND_STR  > INT, FLT, STR is) 144 526.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( hash:INT;) 156.6 517.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(str:STR;) 156.6 508.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 499.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class PRINTABLE_SET{T < $HASH_AND_STR}  is ...) 144 481.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     -- Set whose elements can be printed) 144 472.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(str:STR is) 156.6 454.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:STR := "";) 171 445.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop res := res+",".separate!\050elt!.str\051; end;) 171 436.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 171 427.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 418.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $HASH < $IS_EQ is    hash:INT;     end;) 144 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class  $IS_LT{T}  < $IS_EQ  is  -- comparable values) 144 273.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is_lt\050elt:T\051:BOOL;) 185.4 264.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 255.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $ORDERED_HASH{T}  <  $HASH, $IS_LT{T} is  end;) 144 199.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class ORDERED_SET{T < $ORDERED_HASH{T}}  is ...) 144 181.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     -- Set whose elements can be sorted) 144 172.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sort is) 156.6 154.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- ... uses the < routine on elements which are of type T) 171 145.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 136.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 589.12 2 L
V
0 Z
N
489.6 611.88 489.6 589.12 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 589 489.73 589 2 L
V
N
129.6 534.88 129.6 413.13 2 L
V
N
489.6 534.88 489.6 413.13 2 L
V
N
129.48 535 489.73 535 2 L
V
N
129.48 413 489.73 413 2 L
V
N
129.6 290.88 129.6 250.13 2 L
V
N
489.6 290.88 489.6 250.13 2 L
V
N
129.48 291 489.73 291 2 L
V
N
129.48 250 489.73 250 2 L
V
N
129.6 207.88 129.6 131.13 2 L
V
N
489.6 207.88 489.6 131.13 2 L
V
N
129.48 208 489.73 208 2 L
V
N
129.48 131 489.73 131 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 110
%%Page: "111" 111
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 201.97 710.84 T
(ar) 206.54 710.84 T
(ametr) 214.26 710.84 T
(ized Classes and Arr) 237.7 710.84 T
(ays :) 314.51 710.84 T
0 F
(6.4) 334.02 710.84 T
(P) 347.31 710.84 T
(ar) 351.89 710.84 T
(ametr) 359.6 710.84 T
(ized Abstr) 383.05 710.84 T
(act Classes) 420.38 710.84 T
6 10 Q
(111) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.11 (The abo) 108 659.33 P
-0.11 (v) 140.23 659.33 P
-0.11 (e de\336nition w) 145.08 659.33 P
-0.11 (orks in a straightforw) 199.75 659.33 P
-0.11 (ard w) 285.12 659.33 P
-0.11 (ay  for user  classes.  F) 307.4 659.33 P
-0.11 (or instance, a POINT class) 397.54 659.33 P
(as de\336ned belo) 108 647.33 T
(w) 167.74 647.33 T
(, can be used in a ORDERED_SET{POINT}) 174.31 647.33 T
-0.44 (But ho) 108 594.33 P
-0.44 (w can you create an ordered set of inte) 134.26 594.33 P
-0.44 (gers, for instance?  The solution is some) 285 594.33 P
-0.44 (what laborious.) 442.78 594.33 P
-0.12 (Y) 108 582.33 P
-0.12 (ou ha) 114.12 582.33 P
-0.12 (v) 135.74 582.33 P
-0.12 (e to create dummy classes that specify the subtyping link for each dif) 140.59 582.33 P
-0.12 (ferent parametrization) 415.54 582.33 P
(of $ORDERED_HASH) 108 570.33 T
1.31 (Note that the abo) 321 508.33 P
1.31 (v) 393.38 508.33 P
1.31 (e classes are only needed) 398.23 508.33 P
1.8 (because we are not directly modifying INT) 321 496.33 P
20.84 (and FL) 321 484.33 P
20.84 (T to subtype from) 369.53 484.33 P
-0.16 ($ORDRED_HASH{T}.  In the follo) 321 472.33 P
-0.16 (wing dia-) 466.11 472.33 P
-0.21 (gram , recall that since there is no relationship) 321 460.33 P
-0.05 (between dif) 321 448.33 P
-0.05 (ferent  class parametrizations, it is) 367.63 448.33 P
(necessary to think of them as separate types.) 321 436.33 T
108 308.98 504 312 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 310.49 540 310.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(6.4  P) 108 318 T
(arametriz) 154.49 318 T
(ed Abstract Classes) 234.7 318 T
5 10 Q
0.49 (Abstract class de\336nitions may be) 108 289.31 P
1 F
0.49 (parameterized) 245.15 289.31 P
5 F
0.49 ( by one or more type parameters within enclosing) 301.8 289.31 P
-0.33 (braces; in the e) 108 277.31 P
-0.33 (xample, the type parameter is \324) 167.12 277.31 P
9 F
-0.79 (T) 289.33 277.31 P
5 F
-0.33 (\325.  There is no implicit type relationship between dif-) 295.33 277.31 P
-0.58 (ferent parametrizations of an abstract class.  P) 108 265.31 P
-0.58 (arameter names are local to the abstract class de\336nition) 287.61 265.31 P
-0.18 (and the) 108 253.31 P
-0.18 (y shado) 136.83 253.31 P
-0.18 (w non-parameterized types with the same name. P) 167.23 253.31 P
-0.18 (arameter names must be all upper-) 366.88 253.31 P
-0.25 (case, and the) 108 241.31 P
-0.25 (y may be used within the abstract type de\336nition as type speci\336ers. Whene) 158.73 241.31 P
-0.25 (v) 454.11 241.31 P
-0.25 (er a param-) 458.96 241.31 P
2.06 (eterized type is referred to, its parameters are speci\336ed by type speci\336ers. The abstract class) 108 229.31 P
-0.41 (de\336nition beha) 108 217.31 P
-0.41 (v) 167.11 217.31 P
-0.41 (es lik) 171.96 217.31 P
-0.41 (e a non-parameterized v) 192.84 217.31 P
-0.41 (ersion whose body is a te) 287.82 217.31 P
-0.41 (xtual cop) 386.44 217.31 P
-0.41 (y of the original def-) 422.87 217.31 P
0.03 (inition in which each parameter occurrence is replaced by its speci\336ed type.  P) 108 205.31 P
0.03 (arameterization may) 422.05 205.31 P
(be thought of as a structured macro f) 108 193.31 T
(acility) 254.81 193.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POINT < $ORDERED_HASH{POINT} is ....) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( -- define hash:INT and is_lt\050POINT\051:BOOL) 156.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $DUMMY_INT > INT  < $ORDERED_HASH{INT} is end;) 144 550.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $DUMMY_STR > STR  < $ORDERED_HASH{STR} is end;) 144 541.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $DUMMY_FLT > FLT  < $ORDERED_HASH{FLT} is end;) 144 532.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 613.12 2 L
V
0.25 H
0 Z
N
489.6 635.88 489.6 613.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 613 489.73 613 2 L
V
N
129.6 558.88 129.6 527.12 2 L
V
N
489.6 558.88 489.6 527.12 2 L
V
N
129.48 559 489.73 559 2 L
V
N
129.48 527 489.73 527 2 L
V
N
108 337 315 515 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
($ORDERED_HASH{T}) 160.54 454.81 T
($HASH) 131.92 498.74 T
($IS_L) 239.92 498.74 T
(T{T}) 263.91 498.74 T
($DUMMY_INT) 117 408.74 T
($DUMMY_FL) 239.92 408.74 T
(T) 301.96 408.74 T
(INT) 131.92 354.74 T
(FL) 258.86 354.74 T
(T) 269.79 354.74 T
159.05 490.37 157.3 487.96 150.65 496.47 160.8 492.78 4 Y
0.5 H
0 Z
N
159.05 490.37 157.3 487.96 150.65 496.47 160.8 492.78 4 Y
V
194 465 159.25 490.22 2 L
2 Z
N
248.54 490.73 246.88 493.21 257.17 496.5 250.19 488.26 4 Y
0 Z
N
248.54 490.73 246.88 493.21 257.17 496.5 250.19 488.26 4 Y
V
213 467 248.33 490.59 2 L
2 Z
N
176.89 445.23 175.11 447.61 185.19 451.46 178.68 442.85 4 Y
0 Z
N
176.89 445.23 175.11 447.61 185.19 451.46 178.68 442.85 4 Y
V
149.92 425 176.69 445.08 2 L
2 Z
N
223.83 443.6 222.4 440.98 214.72 448.57 225.25 446.21 4 Y
0 Z
N
223.83 443.6 222.4 440.98 214.72 448.57 225.25 446.21 4 Y
V
257.92 425 224.05 443.48 2 L
2 Z
N
J
140.92 391.72 137.94 391.72 140.92 402.09 143.9 391.72 4 Y
0 Z
N
140.92 391.72 137.94 391.72 140.92 402.09 143.9 391.72 4 Y
V
J
140.92 367 140.92 391.47 2 L
J
140.92 367 140.92 370.75 2 L
2 Z
N
[6.207 5.379] 6.207 I
140.92 370.75 140.92 387.71 2 L
N
J
140.92 387.71 140.92 391.47 2 L
N
J
266.92 395.72 263.94 395.72 266.92 406.09 269.9 395.72 4 Y
0 Z
N
266.92 395.72 263.94 395.72 266.92 406.09 269.9 395.72 4 Y
V
J
266.92 371 266.92 395.47 2 L
J
266.92 371 266.92 374.75 2 L
2 Z
N
[6.207 5.379] 6.207 I
266.92 374.75 266.92 391.71 2 L
N
J
266.92 391.71 266.92 395.47 2 L
N
J
1 F
(supertyping links) 167.92 381.67 T
2 F
(T=FL) 248.92 434 T
(T) 272.04 434 T
(T=INT) 135 434.81 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 111
%%Page: "112" 112
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(112) 108 710.84 T
8 8 Q
(P) 218.87 710.84 T
(ar) 223.45 710.84 T
(ametr) 231.16 710.84 T
(ized Classes and Arr) 254.61 710.84 T
(ays :) 331.42 710.84 T
0 F
(6.5 Ov) 350.92 710.84 T
(er) 375.44 710.84 T
(loading) 383.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.13 (Sather abstract classes may be similarly parametrized by an) 108 659.33 P
-0.13 (y number of type parameters. Each type) 345.1 659.33 P
0.01 (parameter may ha) 108 647.33 P
0.01 (v) 179.46 647.33 P
0.01 (e an optional type bound; this forces an) 184.31 647.33 P
0.01 (y actual parameter to be a subtype of the) 341.73 647.33 P
(corresponding type bound. Gi) 108 635.33 T
(v) 227.18 635.33 T
(en the follo) 232.03 635.33 T
(wing de\336nitions,) 277.33 635.33 T
0.61 (we may then instantiate an abstract v) 108 546.33 P
0.61 (ariable  a:$A{B) 259.13 546.33 P
0.61 (AR}.  B) 323.11 546.33 P
0.61 (AR instantiates the parameter T and) 356.83 546.33 P
-0.43 (hence must be under the type bound for  T) 108 534.33 P
-0.43 (, namely$B) 273.1 534.33 P
-0.43 (AR. If a type-bound is not speci\336ed then a type) 318.43 534.33 P
(bound of $OB is assumed.) 108 522.33 T
4 F
(Ho) 108 494.33 T
(w are diff) 121.18 494.33 T
(erent parametrizations related?) 164.98 494.33 T
5 F
0.91 (It is sometimes natural to w) 108 471.33 P
0.91 (ant a) 223.29 471.33 P
9 F
2.19 ($LIST{MY_FOO} < $LIST{$MY_FOO}) 246.77 471.33 P
5 F
0.91 (. Sather) 431.15 471.33 P
0.91 (, ho) 462.21 471.33 P
0.91 (we) 477.87 471.33 P
0.91 (v) 489.28 471.33 P
0.91 (er) 494.13 471.33 P
0.91 (,) 501.5 471.33 P
-0.29 (speci\336es no subtyping relationship between v) 108 459.33 P
-0.29 (arious parametrizations.  Permitting such implicit sub-) 288.24 459.33 P
-0.07 (typing relationships between dif) 108 447.33 P
-0.07 (ferent parametrizations of a class can lead to type safety violations.) 236.14 447.33 P
108 385.98 504 389 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 387.49 540 387.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(6.5  Overloading) 108 395 T
5 10 Q
-0.01 (There are tw) 108 366.31 P
-0.01 (o aspects to the use of  o) 158.4 366.31 P
-0.01 (v) 256.21 366.31 P
-0.01 (erloading in a parametrized class - one aspect is the beha) 261.06 366.31 P
-0.01 (vior) 487.89 366.31 P
-0.08 (of the interf) 108 354.31 P
-0.08 (ace of the parametrized class itself, and the other aspect is calls within the parametrized) 154.95 354.31 P
0.14 (class where one or more ar) 108 342.31 P
0.14 (guments ha) 216 342.31 P
0.14 (v) 261.77 342.31 P
0.14 (e the type of one of the type parameters, or is related to the) 266.62 342.31 P
(type parameters through static type inference \050see .) 108 330.31 T
4 12 Q
(6.5.1   Overloading In the P) 108 288.98 T
(arametriz) 261.04 288.98 T
(ed Class Interface) 314.51 288.98 T
5 10 Q
0.36 (Ar) 108 266.31 P
0.36 (gument with the type of a class parameter cannot be used to resolv) 118.37 266.31 P
0.36 (e o) 388.62 266.31 P
0.36 (v) 400.77 266.31 P
0.36 (erloading \050such an ar) 405.62 266.31 P
0.36 (gu-) 490.67 266.31 P
(ment is similar to an \325out\325 ar) 108 254.31 T
(gument or a return type in this respect\051.) 221.7 254.31 T
-0.06 (Ev) 108 183.31 P
-0.06 (en though the type bounds for T1 and T2 are distinct and one is more speci\336c than the other) 118.96 183.31 P
-0.06 (, this) 484.61 183.31 P
(is not a suf) 108 171.31 T
(\336cient constraint on the actual instantiation of  the parameter) 151.36 171.31 T
(.  In a class such as) 393.83 171.31 T
(   FOO{ARRA) 108 149.31 T
(Y{INT}, ARRA) 167.03 149.31 T
(Y{INT}}) 232.24 149.31 T
(for instance, the tw) 108 127.31 T
(o v) 184.55 127.31 T
(ersions of \325bar\325 will essentially be identical.) 196.9 127.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $A{T < $BAR} is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050b:T\051:T;) 156.6 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- abstract class $A{T}) 144 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract $BAR is end;) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class BAR < $BAR is end;) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FOO{T1<$STR ,T2<$ELT} is) 144 234.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0501\051  bar\050a:T1\051;) 144 216.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(\0502\051  bar\050a:T2\051;) 144 207.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 565.12 2 L
V
0.25 H
0 Z
N
489.6 623.88 489.6 565.12 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 565 489.73 565 2 L
V
N
129.6 242.85 129.6 202.1 2 L
V
N
489.6 242.85 489.6 202.1 2 L
V
N
129.48 242.98 489.73 242.98 2 L
V
N
129.48 201.98 489.73 201.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 112
%%Page: "113" 113
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 236.01 710.84 T
(ar) 240.58 710.84 T
(ametr) 248.3 710.84 T
(ized Classes and Arr) 271.74 710.84 T
(ays :) 348.55 710.84 T
0 F
(6.5) 368.06 710.84 T
(Ov) 381.35 710.84 T
(er) 392.58 710.84 T
(loading) 400.34 710.84 T
6 10 Q
(113) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(6.5.2   Overloading Resolution within the P) 108 658 T
(arametriz) 350.38 658 T
(ed Class) 403.85 658 T
10 10 Q
-0.1 (Note: The curr) 108 635.33 P
-0.1 (ent ICSI compiler does not yet have this behaviour implemented. In the curr) 166.87 635.33 P
-0.1 (ent com-) 469.39 635.33 P
(piler) 108 623.33 T
(,  o) 125.78 623.33 T
(verloading r) 138.18 623.33 T
(esolution is based on the actual instantiated class.) 187.53 623.33 T
5 F
0.11 (F) 108 601.33 P
0.11 (or all calls within the parametrized class, the resolution of o) 113.41 601.33 P
0.11 (v) 353.5 601.33 P
0.11 (erloading is done with respect to the) 358.35 601.33 P
(type bounds of the parameters.  Consider a class that mak) 108 589.33 T
(es use of output streams) 338.14 589.33 T
(A parametrized class can then write to an) 108 545.33 T
(y output stream) 273.08 545.33 T
(No) 108 438.33 T
(w) 119.97 438.33 T
(, suppose we instantiate the class) 126.54 438.33 T
9 F
(FOO) 260.69 438.33 T
5 F
( with a) 278.69 438.33 T
9 F
(FILE) 308.41 438.33 T
5 F
-0.24 (Only) 108 340.33 P
9 F
-0.57 ( \325\0501\051 plus\050$STR\051\325) 128 340.33 P
5 F
-0.24 ( will be called in) 228.86 340.33 P
9 F
-0.57 (FOO{FILE},) 296.84 340.33 P
5 F
-0.24 ( e) 356.84 340.33 P
-0.24 (v) 363.29 340.33 P
-0.24 (en though the more speci\336c) 368.14 340.33 P
9 F
-0.57 (\325\0502\051) 480 340.33 P
(plus\050INT\051\325) 108 328.33 T
5 F
(  is a) 168 328.33 T
(v) 186.41 328.33 T
(ailable in) 191.16 328.33 T
9 F
(FILE) 230.6 328.33 T
5 F
(.) 254.6 328.33 T
-0.05 (The reason for this beha) 108 306.33 P
-0.05 (vior is to prese) 204.26 306.33 P
-0.05 (v) 263.03 306.33 P
-0.05 (e the ability to analyze a stand alone class, which is needed) 267.88 306.33 P
-0.3 (for separate compilation of parametrized classes - this requires that the beha) 108 294.33 P
-0.3 (vior of the parametrized) 408.55 294.33 P
0.88 (class be completely determined by the typebounds and not based on the e) 108 282.33 P
0.88 (xistance of specialized) 411.71 282.33 P
(o) 108 270.33 T
(v) 112.85 270.33 T
(erloaded routines in particular instantiations.) 117.7 270.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $OSTREAM is  plus\050s:$STR\051;  end;) 144 569.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FOO{S < $OSTREAM} is) 144 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr x,y:INT;) 144 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   describe\050s:S\051 is) 144 489.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     s+"Self is:"; s+x; s+",";s+y;) 144 480.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FILE < $OSTREAM is) 144 418.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( \0501\051  plus\050s:$STR\051 is ...) 144 409.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( \0502\051  plus\050s:INT\051 is ...) 144 400.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:FOO{FILE} := ..) 144 382.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f:FILE := FILE::open_for_read\050"myfile"\051;) 144 373.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a.describe\050f\051) 144 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 577.88 129.6 564.12 2 L
V
0 Z
N
489.6 577.88 489.6 564.12 2 L
V
N
129.48 578 489.73 578 2 L
V
N
129.48 564 489.73 564 2 L
V
N
129.6 533.88 129.6 457.12 2 L
V
N
489.6 533.88 489.6 457.12 2 L
V
N
129.48 534 489.73 534 2 L
V
N
129.48 457 489.73 457 2 L
V
N
129.6 426.88 129.6 359.13 2 L
V
N
489.6 426.88 489.6 359.13 2 L
V
N
129.48 427 489.73 427 2 L
V
N
129.48 359 489.73 359 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 113
%%Page: "114" 114
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(114) 108 710.84 T
8 8 Q
(P) 218.87 710.84 T
(ar) 223.45 710.84 T
(ametr) 231.16 710.84 T
(ized Classes and Arr) 254.61 710.84 T
(ays :) 331.42 710.84 T
0 F
(6.5 Ov) 350.92 710.84 T
(er) 375.44 710.84 T
(loading) 383.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 114
%%Page: "115" 115
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Oper) 224.56 710.84 T
(ator Rede\336nition :) 244.42 710.84 T
0 F
(7.1) 314.65 710.84 T
(Method Names f) 327.95 710.84 T
(or Oper) 392.63 710.84 T
(ator) 422.35 710.84 T
(s) 438.33 710.84 T
6 10 Q
(115) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Oper) 108 642 S
-0.25 (ator Rede\336nition) 196.36 642 S
108 502.98 504 506 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 504.49 540 504.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(7.1  Method Names f) 108 512 T
(or Operator) 281.68 512 T
(s) 380.43 512 T
5 10 Q
0.55 (It is possible to de\336ne operators such as + and * to w) 108 483.31 P
0.55 (ork with objects of arbitrary classes.  These) 326.27 483.31 P
-0.07 (operators are transformed into standard routine calls in the class. Thus, if a class de\336nes the routine) 108 471.31 P
-0.18 (\325plus\325  you can then apply the + operator to objects from that class.  F) 108 459.31 P
-0.18 (or instance, the comple) 383.51 459.31 P
-0.18 (x num-) 475.57 459.31 P
(ber class POINT could de\336ne the plus routine to mean pairwise addition) 108 447.31 T
(we can no) 108 376.31 T
(w use the plus routine on tw) 148.29 376.31 T
(o points) 260.96 376.31 T
-0.16 (Most of the standard operators may be rede\336ned; in some cases, rede\336ning one operator such as the) 108 314.31 P
-0.24 (< operator implicitly rede\336nes the associated >,  >= and <= operators.  These operators are meant to) 108 302.31 P
0.38 (be used together in a consistent manner to indicate the mathematical notion of complete or partial) 108 290.31 P
(ordering.  The) 108 278.31 T
(y are not intended to be used as a con) 164.78 278.31 T
(v) 314.07 278.31 T
(enient short-hand for other purposes.) 318.92 278.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POINT is) 144 427.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly attr x,y:INT;) 156.6 418.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050x,y:INT\051:SAME is ... -- same as before) 156.6 409.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(plus\050s:POINT\051:POINT  is  return #POINT\050x + s.x, y + s.y\051; end;) 156.6 400.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p1:POINT := #POINT\0503,5\051;) 144 356.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p2:POINT := #POINT\0504,6\051;) 144 347.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p3:POINT := p1 + p2;  --  p3 is set to the point 7,11) 144 338.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 435.85 129.6 395.1 2 L
V
0.25 H
0 Z
N
489.6 435.85 489.6 395.1 2 L
V
N
129.48 435.98 489.73 435.98 2 L
V
N
129.48 394.98 489.73 394.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 115
%%Page: "116" 116
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(116) 108 710.84 T
8 8 Q
(Oper) 223.67 710.84 T
(ator Rede\336nition :) 243.53 710.84 T
0 F
(7.2 Oper) 313.76 710.84 T
(ator expr) 346.91 710.84 T
(essions) 381.82 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(7.2  Operator  e) 108 654 T
(xpressions) 238.79 654 T
5 10 Q
(The follo) 108 625.31 T
(wing table sho) 144.69 625.31 T
(ws ho) 202.77 625.31 T
(w the standard operators are directly con) 226.13 625.31 T
(v) 388.46 625.31 T
(erted into  routine calls.) 393.31 625.31 T
(Belo) 108 482.31 T
(w are the routines that correspond to unary operators, for arithmetic and logical ne) 126.64 482.31 T
(g) 455.86 482.31 T
(ation.) 460.81 482.31 T
-0.23 (In addition to the unary and binary operators, there are additional operators that are de\336ned in terms) 108 373.31 P
(of a combination of the unary and binary operators) 108 361.31 T
5 8 Q
(3) 311.29 365.31 T
5 10 Q
(.) 315.29 361.31 T
-0.39 (The form) 108 252.31 P
9 F
-0.94 (\325[expression list]\325) 147.21 252.31 P
5 F
-0.39 (is translated into a call on the routine) 265.34 252.31 P
9 F
-0.94 (aget.) 412.75 252.31 P
5 F
-0.39 (F) 452.88 252.31 P
-0.39 (or instance,) 458.29 252.31 P
(This is described in more detail later) 108 187.31 T
(.) 253.54 187.31 T
108 120 504 140.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 131.09 240.98 131.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(3.  Earlier versions of Sather 1.0 de\336ned separate r) 108 114.67 T
(outines for each of these operators.) 284.42 114.67 T
6 10 Q
(Operator) 119.78 597.31 T
14 F
( Routine) 212.14 597.31 T
6 F
( Operator) 312.7 597.31 T
14 F
(Routine) 429.05 597.31 T
10 F
-0.03 (e) 108.83 578.31 P
-0.03 (xpr1) 113.07 578.31 P
9 F
-0.07 ( +) 131.4 578.31 P
10 F
-0.03 (e) 149.26 578.31 P
-0.03 (xpr2) 153.5 578.31 P
(e) 188.85 578.31 T
(xpr1) 193.09 578.31 T
9 F
(.plus\050) 211.42 578.31 T
10 F
(e) 247.42 578.31 T
(xpr2) 251.66 578.31 T
9 F
(\051) 269.99 578.31 T
10 F
(e) 302.93 578.31 T
(xpr1) 307.17 578.31 T
9 F
( ^) 325.5 578.31 T
10 F
(e) 343.5 578.31 T
(xpr2) 347.74 578.31 T
(e) 407.51 578.31 T
(xpr1) 411.75 578.31 T
9 F
(.pow\050) 430.08 578.31 T
10 F
(e) 460.08 578.31 T
(xpr2) 464.32 578.31 T
9 F
(\051) 482.65 578.31 T
10 F
-0.03 (e) 108.83 561.31 P
-0.03 (xpr1) 113.07 561.31 P
9 F
-0.07 ( -) 131.4 561.31 P
10 F
-0.03 (e) 149.26 561.31 P
-0.03 (xpr2) 153.5 561.31 P
(e) 184.6 561.31 T
(xpr1) 188.84 561.31 T
9 F
(.minus\050) 207.17 561.31 T
10 F
(e) 249.17 561.31 T
(xpr2) 253.41 561.31 T
9 F
(\051) 271.74 561.31 T
10 F
(e) 302.93 561.31 T
(xpr1) 307.17 561.31 T
9 F
( %) 325.5 561.31 T
10 F
(e) 343.5 561.31 T
(xpr2) 347.74 561.31 T
(e) 407.51 561.31 T
(xpr1) 411.75 561.31 T
9 F
(.mod\050) 430.08 561.31 T
10 F
(e) 460.08 561.31 T
(xpr2) 464.32 561.31 T
9 F
(\051) 482.65 561.31 T
10 F
-0.03 (e) 108.83 544.31 P
-0.03 (xpr1) 113.07 544.31 P
9 F
-0.07 ( *) 131.4 544.31 P
10 F
-0.03 (e) 149.26 544.31 P
-0.03 (xpr2) 153.5 544.31 P
(e) 184.6 544.31 T
(xpr1) 188.84 544.31 T
9 F
(.times\050) 207.17 544.31 T
10 F
(e) 249.17 544.31 T
(xpr2) 253.41 544.31 T
9 F
(\051) 271.74 544.31 T
10 F
(e) 302.93 544.31 T
(xpr1) 307.17 544.31 T
9 F
( <) 325.5 544.31 T
10 F
(e) 343.5 544.31 T
(xpr2) 347.74 544.31 T
(e) 401.51 544.31 T
(xpr1) 405.75 544.31 T
9 F
(.is_lt\050) 424.08 544.31 T
10 F
(e) 466.08 544.31 T
(xpr2) 470.32 544.31 T
9 F
(\051) 488.65 544.31 T
10 F
-0.03 (e) 108.83 527.31 P
-0.03 (xpr1) 113.07 527.31 P
9 F
-0.07 ( /) 131.4 527.31 P
10 F
-0.03 (e) 149.26 527.31 P
-0.03 (xpr2) 153.5 527.31 P
(e) 190.6 527.31 T
(xpr1) 194.84 527.31 T
9 F
(.div\050) 213.17 527.31 T
10 F
(e) 243.17 527.31 T
(xpr2) 247.41 527.31 T
9 F
(\051) 265.74 527.31 T
10 F
(e) 302.93 527.31 T
(xpr1) 307.17 527.31 T
9 F
( =) 325.5 527.31 T
10 F
(e) 343.5 527.31 T
(xpr2) 347.74 527.31 T
(e) 401.51 527.31 T
(xpr1) 405.75 527.31 T
9 F
(.is_eq\050) 424.08 527.31 T
10 F
(e) 466.08 527.31 T
(xpr2) 470.32 527.31 T
9 F
(\051) 488.65 527.31 T
13 12 Q
(T) 238.39 506.98 T
(able 1: Binary Operators) 245.29 506.98 T
6 10 Q
(Unary Operator) 207.02 454.31 T
14 F
(Routine) 338.22 454.31 T
9 F
(-) 228.21 435.31 T
10 F
(e) 240.21 435.31 T
(xpr) 244.46 435.31 T
(e) 327.46 435.31 T
(xpr) 331.7 435.31 T
9 F
(.negate) 345.04 435.31 T
(~) 228.21 418.31 T
10 F
(e) 240.21 418.31 T
(xpr) 244.46 418.31 T
(e) 336.46 418.31 T
(xpr) 340.7 418.31 T
9 F
(.not) 354.04 418.31 T
13 12 Q
(T) 239.72 397.98 T
(able 2: Unary Operators) 246.62 397.98 T
6 10 Q
(Operator) 98.78 333.31 T
14 F
(T) 205.23 333.31 T
(ranslation) 210.42 333.31 T
6 F
(Operator) 327.61 333.31 T
14 F
(T) 441.9 333.31 T
(ranslation) 447.09 333.31 T
10 F
(e) 84.76 314.31 T
(xpr1) 89 314.31 T
9 F
( <=) 107.33 314.31 T
10 F
(e) 131.33 314.31 T
(xpr2) 135.57 314.31 T
(e) 173.85 314.31 T
(xpr2) 178.09 314.31 T
9 F
(.is_lt\050) 196.42 314.31 T
10 F
(e) 238.42 314.31 T
(xpr1) 242.66 314.31 T
9 F
(\051.not) 260.99 314.31 T
10 F
(e) 313.6 314.31 T
(xpr1) 317.84 314.31 T
9 F
( /=) 336.17 314.31 T
10 F
(e) 360.17 314.31 T
(xpr2) 364.41 314.31 T
(e) 410.51 314.31 T
(xpr1) 414.75 314.31 T
9 F
(.is_eq\050) 433.08 314.31 T
10 F
(e) 475.08 314.31 T
(xpr2) 479.32 314.31 T
9 F
(\051.not) 497.65 314.31 T
10 F
(e) 84.76 297.31 T
(xpr1) 89 297.31 T
9 F
( >=) 107.33 297.31 T
10 F
(e) 131.33 297.31 T
(xpr2) 135.57 297.31 T
(e) 173.85 297.31 T
(xpr1) 178.09 297.31 T
9 F
(.is_lt\050) 196.42 297.31 T
10 F
(e) 238.42 297.31 T
(xpr2) 242.66 297.31 T
9 F
(\051.not) 260.99 297.31 T
10 F
(e) 316.6 297.31 T
(xpr1) 320.84 297.31 T
9 F
( >) 339.17 297.31 T
10 F
(e) 357.17 297.31 T
(xpr2) 361.41 297.31 T
(e) 422.51 297.31 T
(xpr2) 426.75 297.31 T
9 F
(.is_lt\050) 445.08 297.31 T
10 F
(e) 487.08 297.31 T
(xpr1) 491.32 297.31 T
9 F
(\051) 509.65 297.31 T
13 12 Q
(T) 227.38 276.98 T
(able 3: Compound Operators) 234.28 276.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a := [3,5];) 144 220.64 T
11 F
(-- Equivalent to a := aget\0503,5\051; Used in the array class) 211.2 220.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(f := arr[2];) 144 211.64 T
11 F
(-- Equivalent to f := arr.aget\0502\051; Used outside the array) 211.2 211.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
102.83 609.73 102.83 521.23 2 L
V
0.5 H
0 Z
N
177.83 610.23 177.83 520.73 2 L
V
N
284.5 610.23 284.5 520.73 2 L
V
2 H
N
384.5 610.23 384.5 520.73 2 L
V
0.5 H
N
509.17 609.73 509.17 521.23 2 L
V
N
102.58 609.98 509.42 609.98 2 L
V
N
102.58 588.98 509.42 588.98 2 L
V
2 H
N
102.58 520.98 509.42 520.98 2 L
V
0.5 H
N
193 466.73 193 412.23 2 L
V
N
293 467.23 293 411.73 2 L
V
N
419 466.73 419 412.23 2 L
V
N
192.75 466.98 419.25 466.98 2 L
V
N
192.75 445.98 419.25 445.98 2 L
V
2 H
N
192.75 411.98 419.25 411.98 2 L
V
0.5 H
N
74.5 345.73 74.5 291.23 2 L
V
N
164.17 346.23 164.17 290.73 2 L
V
N
298.17 346.23 298.17 290.73 2 L
V
2 H
N
398.17 346.23 398.17 290.73 2 L
V
0.5 H
N
537.5 345.73 537.5 291.23 2 L
V
N
74.25 345.98 537.75 345.98 2 L
V
N
74.25 324.98 537.75 324.98 2 L
V
2 H
N
74.25 290.98 537.75 290.98 2 L
V
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 116
%%Page: "117" 117
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Oper) 240.81 710.84 T
(ator Rede\336nition :) 260.66 710.84 T
0 F
(7.2) 330.9 710.84 T
(Oper) 344.19 710.84 T
(ator expr) 364.05 710.84 T
(essions) 398.96 710.84 T
6 10 Q
(117) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(Gr) 108 659.33 T
(ouping) 119.47 659.33 T
5 F
0.14 (In addition to the abo) 108 636.33 P
0.14 (v) 193.94 636.33 P
0.14 (e mentioned operators, it is possible to group e) 198.79 636.33 P
0.14 (xpressions using plain paren-) 386.66 636.33 P
(theses, which ha) 108 624.33 T
(v) 173.62 624.33 T
(e the highest precedence.) 178.47 624.33 T
4 12 Q
(7.2.1   Operator precedence) 108 583 T
5 10 Q
0.12 (The precedence ordering sho) 108 560.33 P
0.12 (wn belo) 223.92 560.33 P
0.12 (w determines the grouping of the syntactic sug) 255.73 560.33 P
0.12 (ar forms. Sym-) 443.48 560.33 P
-0.56 (bols of the same precedence associate left to right and parentheses may be used for e) 108 548.33 P
-0.56 (xplicit grouping.) 437.89 548.33 P
(Ev) 108 536.33 T
(aluation order obe) 118.86 536.33 T
(ys e) 191.47 536.33 T
(xplicit parenthesis in all cases.) 207.15 536.33 T
4 F
(P) 108 359.33 T
(oints to note) 114.27 359.33 T
5 F
(\245) 108 343.33 T
(The >, >=  and /= operators are not directly translated into their o) 121.54 343.33 T
(wn routine. Rather) 382.14 343.33 T
(, the) 456.45 343.33 T
(y are) 473.52 343.33 T
(de\336ned in terms of is_lt and is_eq.) 121.54 331.33 T
(\245) 108 316.33 T
(Each of these transformations is applied after the component e) 121.54 316.33 T
(xpressions ha) 371.06 316.33 T
(v) 425.02 316.33 T
(e themselv) 429.87 316.33 T
(es) 472.77 316.33 T
(been transformed.) 121.54 304.33 T
(\245) 108 289.33 T
(\324) 121.54 289.33 T
9 F
(out) 124.87 289.33 T
5 F
(\325 and \324) 142.87 289.33 T
9 F
(inout) 168.97 289.33 T
5 F
(\325 modes may not be used with the syntactic sug) 198.97 289.33 T
(ar e) 388.07 289.33 T
(xpressions.) 402.63 289.33 T
(\245) 108 274.33 T
(The \324<=\325 and \324>\325 e) 121.54 274.33 T
(xpressions do not re) 196.06 274.33 T
(v) 276.08 274.33 T
(erse the original left to right order of ar) 280.93 274.33 T
(gument e) 437.38 274.33 T
(v) 474.07 274.33 T
(alua-) 478.82 274.33 T
(tion.) 121.54 262.33 T
(\245) 108 247.33 T
9 F
(and) 121.54 247.33 T
5 F
(\325 and) 139.54 247.33 T
9 F
(or) 162.31 247.33 T
5 F
(\325 are not listed as syntactic sug) 174.31 247.33 T
(ar for operations in) 297.02 247.33 T
9 F
(BOOL) 375.89 247.33 T
5 F
(\325; this allo) 398.97 247.33 T
(ws short-cir-) 439.28 247.33 T
(cuiting the e) 121.54 235.33 T
(v) 170.73 235.33 T
(aluation of sube) 175.48 235.33 T
(xpression.) 239.21 235.33 T
(\245) 108 220.33 T
(The aget and aset routines are meant to support array lik) 121.54 220.33 T
(e inde) 346.39 220.33 T
(x) 370.4 220.33 T
(ed access and require at least) 375.25 220.33 T
(one inde) 121.54 208.33 T
(x ar) 155.55 208.33 T
(gument.) 170.64 208.33 T
10 F
(Str) 225.93 510.33 T
(ong) 237.15 510.33 T
(est) 252.05 510.33 T
5 F
(.      ::     []    \050\051) 306.65 510.33 T
(^) 333.75 493.33 T
(~       Unary -) 309.23 476.33 T
(*      /     %) 314.29 459.33 T
(+        Binary -) 306.75 442.33 T
(<    <=    =    /=    >=    >) 287.14 425.33 T
10 F
(W) 228.4 408.33 T
(eak) 235.81 408.33 T
(est) 249.59 408.33 T
5 F
(and     or) 318.46 408.33 T
13 12 Q
(T) 285.38 388 T
(able 4:) 292.28 388 T
274.64 520 274.64 403 2 L
V
2 H
0 Z
N
397.55 520 397.55 403 2 L
V
N
273.64 521 398.55 521 2 L
V
N
273.64 504 398.55 504 2 L
V
0.5 H
N
273.64 487 398.55 487 2 L
V
N
273.64 470 398.55 470 2 L
V
N
273.64 453 398.55 453 2 L
V
N
273.64 436 398.55 436 2 L
V
N
273.64 419 398.55 419 2 L
V
N
273.64 402 398.55 402 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 117
%%Page: "118" 118
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(118) 108 710.84 T
8 8 Q
(Oper) 221.72 710.84 T
(ator Rede\336nition :) 241.58 710.84 T
0 F
(7.3 Arr) 311.81 710.84 T
(ay Access Routines) 335.68 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(Syntactic sugar e) 108 659.33 T
(xample) 190.66 659.33 T
5 F
0.54 (Here\325) 108 636.33 P
0.54 (s a formula written with syntactic sug) 130.21 636.33 P
0.54 (ar and the calls it is te) 283.93 636.33 P
0.54 (xtually equi) 374.22 636.33 P
0.54 (v) 422.01 636.33 P
0.54 (alent to.  It doesn\325) 426.76 636.33 P
0.54 (t) 501.22 636.33 P
(matter what the types of the v) 108 624.33 T
(ariables are; the sug) 226.62 624.33 T
(ar ignores types.) 306.27 624.33 T
108 504.98 504 508 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 506.49 540 506.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(7.3  Arra) 108 514 T
(y Access Routines) 179.68 514 T
5 10 Q
(Sather supports the standard array access syntax of square brack) 108 485.31 T
(ets.  F) 364.77 485.31 T
(or instance:) 388.79 485.31 T
-0.32 (Ho) 108 405.31 P
-0.32 (we) 119.97 405.31 P
-0.32 (v) 131.38 405.31 P
-0.32 (er) 136.23 405.31 P
-0.32 (, the array brack) 143.6 405.31 P
-0.32 (et notation is not b) 207.5 405.31 P
-0.32 (uilt into the array class. It is just a short hand for the rou-) 280.45 405.31 P
(tines) 108 393.31 T
9 F
(aget) 129.39 393.31 T
5 F
(and) 159.39 393.31 T
9 F
(aset) 176.33 393.31 T
5 F
(Thus, classes which are not arrays can mak) 108 340.31 T
(e use of the array notation as the) 280.63 340.31 T
(y please:) 410.17 340.31 T
-0.08 (In order for a class to actually ha) 108 269.31 P
-0.08 (v) 238.59 269.31 P
-0.08 (e an array portion, it must inherit from) 243.44 269.31 P
9 F
-0.19 (AREF{T}) 399.17 269.31 P
5 F
-0.08 (  \050if it is a refer-) 441.17 269.31 P
0.12 (ence class\051 or) 108 257.31 P
9 F
0.28 (AVAL{T}) 165.27 257.31 P
5 F
0.12 ( if it is a v) 207.27 257.31 P
0.12 (alue class.  The array setting notation is not as useful for immu-) 247.89 257.31 P
(table classes,  since an) 108 245.31 T
(y modi\336cation of an immutable class must return a whole ne) 197.55 245.31 T
(w object.) 439.5 245.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 8 Q
(-- Written using syntactic sugar) 144 604.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(r := \050x^2 + y^2\051.sqrt;) 144 595.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Written without sugar) 144 577.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(r := \050x.pow\0502\051.plus\050y.pow\0502\051\051\051.sqrt) 144 568.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:ARRAY{INT} := |1,2,3|;) 144 465.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a[2] := 5;) 144 456.64 T
11 F
(-- Sets the third element of the array to 5) 254.4 456.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+a[0];) 144 447.64 T
11 F
(-- Prints out \3251\325) 254.4 447.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(c:ARRAY2{INT} := ||1,2,3|,|4,5,6|,|7,8,9||;) 144 438.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + c[2,2];) 144 429.64 T
11 F
(-- Prints out \3259\325) 254.4 429.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(a[2] := 5;) 144 373.64 T
11 F
(-- equivalent to a.aset\0502,5\051;) 196.8 373.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(#OUT+a[1];) 144 364.64 T
11 F
(-- equivalent to #OUT+a.aget\0501\051;) 196.8 364.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class INT is) 144 320.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- The standard integer class) 158.4 311.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   aget\050i:INT\051:BOOL is) 144 302.64 T
11 F
(-- returns the \325i\325th bit of the integer) 254.4 302.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 293.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 612.88 129.6 563.12 2 L
V
0.25 H
0 Z
N
489.6 612.88 489.6 563.12 2 L
V
N
129.48 613 489.73 613 2 L
V
N
129.48 563 489.73 563 2 L
V
N
129.6 473.85 129.6 424.1 2 L
V
N
489.6 473.85 489.6 424.1 2 L
V
N
129.48 473.98 489.73 473.98 2 L
V
N
129.48 423.98 489.73 423.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 118
%%Page: "119" 119
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Imm) 233.62 710.84 T
(uta) 250.27 710.84 T
(ble Classes :) 263.47 710.84 T
0 F
(8.1) 312.67 710.84 T
(De\336ning Imm) 325.97 710.84 T
(uta) 376.63 710.84 T
(ble Classes) 389.83 710.84 T
6 10 Q
(119) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Imm) 108 642 S
-0.25 (uta) 182.21 642 S
-0.25 (ble Classes) 240.86 642 S
5 10 Q
0.08 (Sather  has special support for classes that de\336ne immutable objects.  Such objects cannot be mod-) 108 517.33 P
-0.39 (i\336ed after the) 108 505.33 P
-0.39 (y ha) 160.38 505.33 P
-0.39 (v) 176.73 505.33 P
-0.39 (e been created, and are said to ha) 181.58 505.33 P
-0.39 (v) 310.79 505.33 P
-0.39 (e v) 315.64 505.33 P
-0.39 (alue semantics. Man) 326.94 505.33 P
-0.39 (y of the basic types such) 407.93 505.33 P
-0.17 (as inte) 108 493.33 P
-0.17 (gers and \337oating point numbers \050the INT and FL) 133.51 493.33 P
-0.17 (T classes\051 are implemented using immutable) 326.24 493.33 P
-0.41 (classes.   This chapter illustrates ho) 108 481.33 P
-0.41 (w immutable classes may be de\336ned, and highlights the peculiar-) 246.64 481.33 P
(ities in their usage that may trip up a be) 108 469.33 T
(ginning user) 265.89 469.33 T
(.) 315.06 469.33 T
0.64 (At a fundamental le) 108 447.33 P
0.64 (v) 188.81 447.33 P
0.64 (el: immutable classes de\336ne objects which, once created, ne) 193.66 447.33 P
0.64 (v) 438.46 447.33 P
0.64 (er change their) 443.31 447.33 P
-0.16 (v) 108 435.33 P
-0.16 (alue. A v) 112.75 435.33 P
-0.16 (ariable of an immutable type may only be changed by re-assigning to that v) 148.55 435.33 P
-0.16 (ariable. When) 448.07 435.33 P
-0.4 (we wish to only modify some portion of an immutable class, we are compelled to reassign the whole) 108 423.33 P
(object.  F) 108 411.33 T
(or e) 145.35 411.33 T
(xperienced C programmers the dif) 160.47 411.33 T
(ference between immutable and reference classes is) 297.41 411.33 T
-0.2 (similar to the dif) 108 399.33 P
-0.2 (ference between structs \050immutable types\051 and pointers to structs \050reference types\051.) 173.55 399.33 P
2.12 (Because of that dif) 108 387.33 P
2.12 (ference, reference objects can be referred to from more than one v) 189.37 387.33 P
2.12 (ariable) 476.79 387.33 P
(\050aliased\051, while immutable objects cannot.) 108 375.33 T
-0.49 (This section illustrates the de\336nition of immutable types using a simple v) 108 353.33 P
-0.49 (ersion of the comple) 395.56 353.33 P
-0.49 (x num-) 475.88 353.33 P
0.12 (ber class, CPX. W) 108 341.33 P
0.12 (e also describe the bene\336ts of immutable classes and when the) 181.15 341.33 P
0.12 (y  should be used.) 431.59 341.33 P
-0.03 (Finally) 108 329.33 P
-0.03 (, we close with a description of a ho) 135.69 329.33 P
-0.03 (w  to transparently replace in immutable class by a stan-) 279.34 329.33 P
(dard reference class which implements v) 108 317.33 T
(alue semantics.) 270.76 317.33 T
108 255.98 504 259 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 257.49 540 257.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(8.1  De\336ning Imm) 108 265 T
(utab) 256.68 265 T
(le Classes) 294.5 265 T
5 10 Q
-0.46 (In most w) 108 236.31 P
-0.46 (ays,  de\336ning and using immutable classes is similar to de\336ning and using  reference class-) 146.99 236.31 P
0.37 (es. Immutable classes consist of a collection of attrib) 108 224.31 P
0.37 (utes and functions that can operate on the at-) 322.15 224.31 P
-0.17 (trib) 108 212.31 P
-0.17 (utes.   Since we ha) 121.69 212.31 P
-0.17 (v) 195.09 212.31 P
-0.17 (e already described reference classes in considerable detail, we will describe) 199.94 212.31 P
(immutable classes in terms of their dif) 108 200.31 T
(ferences from reference classes.) 261.07 200.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 119
%%Page: "120" 120
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(120) 108 710.84 T
8 8 Q
(Imm) 216.48 710.84 T
(uta) 233.14 710.84 T
(ble Classes :) 246.34 710.84 T
0 F
(8.1 De\336ning Imm) 295.54 710.84 T
(uta) 359.5 710.84 T
(ble Classes) 372.7 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(8.1.1   Imm) 108 658 T
(utab) 169.13 658 T
(le Class Example) 194.34 658 T
5 10 Q
-0.22 (W) 108 635.33 P
-0.22 (e illustrate the use of immutable classes through the e) 116.64 635.33 P
-0.22 (xample of the comple) 328.62 635.33 P
-0.22 (x class  CPX. The v) 414.73 635.33 P
-0.22 (er-) 492.9 635.33 P
-0.38 (sion sho) 108 623.33 P
-0.38 (wn here is a much simpli\336ed v) 140.43 623.33 P
-0.38 (ersion of the library class. The k) 260.78 623.33 P
-0.38 (e) 387.54 623.33 P
-0.38 (y point to note is the manner) 391.83 623.33 P
(in which attrib) 108 611.33 T
(ute v) 166.13 611.33 T
(alues are set in the create routine.) 185.6 611.33 T
(The comple) 108 432.33 T
(x class may then be used in the follo) 155.34 432.33 T
(wing manner) 300.63 432.33 T
(.) 352.57 432.33 T
4 12 Q
(8.1.2   Creating a ne) 108 351 T
(w object) 220.54 351 T
5 10 Q
-0.42 (Unlik) 108 328.33 P
-0.42 (e reference classes, instances of an immutable class are not e) 130.68 328.33 P
-0.42 (xplicitly allocated using the \325ne) 369.29 328.33 P
-0.42 (w\325) 493.45 328.33 P
0.19 (e) 108 316.33 P
0.19 (xpression.  A v) 112.29 316.33 P
0.19 (ariable of an immutable class al) 173.17 316.33 P
0.19 (w) 300.96 316.33 P
0.19 (ays has a v) 308.08 316.33 P
0.19 (alue associated with it, from the point) 352.02 316.33 P
-0.28 (of declaration.  In the e) 108 304.33 P
-0.28 (xample abo) 199.2 304.33 P
-0.28 (v) 245.15 304.33 P
-0.28 (e, the return v) 250 304.33 P
-0.28 (ariable of the create routine ,) 304.45 304.33 P
-0.28 (\325) 417.3 304.33 P
-0.28 (res\325  simply has to be) 420.13 304.33 P
(declared.) 108 292.33 T
4 12 Q
(8.1.3   Initial v) 108 251 T
(alue of imm) 185.81 251 T
(utab) 252.25 251 T
(le objects) 277.46 251 T
5 10 Q
-0.4 (The initial v) 108 228.33 P
-0.4 (alue of an immutable object is de\336ned to ha) 155.84 228.33 P
-0.4 (v) 327.43 228.33 P
-0.4 (e all its \336elds set to the \325) 332.28 228.33 P
-0.4 (v) 426.49 228.33 P
-0.4 (oid\325 v) 431.29 228.33 P
-0.4 (alue and this) 454.25 228.33 P
-0.62 (is de\336ned to be the \325) 108 216.33 P
-0.62 (v) 185.76 216.33 P
-0.62 (oid\325 v) 190.56 216.33 P
-0.62 (alue of the immutable object.  Note that this \325) 213.3 216.33 P
-0.62 (v) 388.83 216.33 P
-0.62 (oid\325 v) 393.63 216.33 P
-0.62 (alue means something) 416.37 216.33 P
-0.17 (dif) 108 204.33 P
-0.17 (ferent than it does for a reference class.  It does not mean that the object does not e) 118.86 204.33 P
-0.17 (xist, b) 446.48 204.33 P
-0.17 (ut rather) 470.57 204.33 P
(that all its \336elds ha) 108 192.33 T
(v) 183.36 192.33 T
(e the \325) 188.21 192.33 T
(v) 212.7 192.33 T
(oid\325 v) 217.5 192.33 T
(alue.) 240.86 192.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(immutable class CPX  is) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly attr real,imag:FLT;) 156.6 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050re,im:FLT\051:SAME is) 156.6 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Returns a complex number with real and imaginary parts set) 171 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:SAME;) 171 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res := res.real\050re\051;) 171 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res := res.im\050im\051;) 171 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 171 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(plus\050c:SAME\051:SAME is) 156.6 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Return a complex number, the sum of \325self\325 and c\325.) 171 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return  #SAME\050real+c.real,imag+c.imag\051;) 171 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- immutable class CPX) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( b:CPX := #\0502.0,3.0\051;) 144 412.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( d:CPX := #\0504.0,5.0\051;) 144 403.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( c:CPX := b+d;) 144 394.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 599.88 129.6 451.13 2 L
V
0 Z
N
489.6 599.88 489.6 451.13 2 L
V
N
129.48 600 489.73 600 2 L
V
N
129.48 451 489.73 451 2 L
V
N
129.6 420.88 129.6 389.13 2 L
V
N
489.6 420.88 489.6 389.13 2 L
V
N
129.48 421 489.73 421 2 L
V
N
129.48 389 489.73 389 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 120
%%Page: "121" 121
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Imm) 233.62 710.84 T
(uta) 250.27 710.84 T
(ble Classes :) 263.47 710.84 T
0 F
(8.1) 312.67 710.84 T
(De\336ning Imm) 325.97 710.84 T
(uta) 376.63 710.84 T
(ble Classes) 389.83 710.84 T
6 10 Q
(121) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(V) 108 659.33 T
(oid v) 113.77 659.33 T
(alue of  the basic c) 136.91 659.33 T
(lasses:) 226.19 659.33 T
5 F
-0.24 (The initial v) 108 569.33 P
-0.24 (alues for the b) 156.17 569.33 P
-0.24 (uilt-in immutable classes are de\336ned abo) 212.19 569.33 P
-0.24 (v) 374.45 569.33 P
-0.24 (e.  These v) 379.3 569.33 P
-0.24 (alues will return true) 421.67 569.33 P
(for the \325) 108 557.33 T
(v) 139.71 557.33 T
(oid\325 test.) 144.51 557.33 T
4 12 Q
(8.1.4   Attrib) 108 516 T
(ute access r) 176.45 516 T
(outines) 245.58 516 T
5 10 Q
1.56 (Since an immutable object cannot change its v) 108 493.33 P
1.56 (alue, what does assigning to an attrib) 304.45 493.33 P
1.56 (ute mean?) 461.62 493.33 P
0.28 (Sather\325) 108 481.33 P
0.28 (s immutable classes de\336ne attrib) 136.33 481.33 P
0.28 (ute assignment to create a cop) 267.22 481.33 P
0.28 (y of the original object, with) 388.74 481.33 P
-0.28 (the attrib) 108 469.33 P
-0.28 (ute modi\336ed.  Thus the attrib) 143.35 469.33 P
-0.28 (ute declaration \325attr re:FL) 257.83 469.33 P
-0.28 (T \325  of the CPX  class has an implicit) 359.08 469.33 P
(attrib) 108 457.33 T
(ute setting routine with the signature:) 128.91 457.33 T
1.37 (which returns a cop) 108 413.33 P
1.37 (y of the original CPX  object in which the attrib) 190.59 413.33 P
1.37 (ute \325) 395.15 413.33 P
1.37 (re\325 has the ne) 414.07 413.33 P
1.37 (w v) 471.5 413.33 P
1.37 (alue) 487.34 413.33 P
-0.4 (\325ne) 108 401.33 P
-0.4 (w_re_v) 120.52 401.33 P
-0.4 (alue\325. Contrast this with a reference class, in which the setting routine w) 150.26 401.33 P
-0.4 (ould ha) 434.18 401.33 P
-0.4 (v) 463.29 401.33 P
-0.4 (e the sig-) 468.14 401.33 P
(nature) 108 389.33 T
(The syntax of the setting routines of immutable classes is a common source of confusion.) 108 345.33 T
4 12 Q
(8.1.5    P) 108 304 T
(oints to note) 155.56 304 T
5 10 Q
(\245) 108 284.33 T
(There must be no c) 121.54 284.33 T
(ycle of immutable types such that each type has an attrib) 198.04 284.33 T
(ute whose type is) 424.47 284.33 T
(in the c) 121.54 272.33 T
(ycle. In the follo) 150.83 272.33 T
(wing e) 216.68 272.33 T
(xample, the class P) 243.47 272.33 T
(AIR has a FIRST_P) 319.21 272.33 T
(AR) 398.57 272.33 T
(T that contains a) 411.86 272.33 T
(P) 121.54 260.33 T
(AIR - leading to an in\336nite loop and an in\336nite size structure.) 126.18 260.33 T
(\245) 108 182.33 T
(Accessing an attrib) 121.54 182.33 T
(ute of a v) 197.99 182.33 T
(oid immutable object will al) 235.28 182.33 T
(w) 347.96 182.33 T
(ays w) 355.08 182.33 T
(ork. Accessing an attrib) 378.03 182.33 T
(ute of) 472.81 182.33 T
(a v) 121.54 170.33 T
(oid reference object results in a f) 133.28 170.33 T
(atal error) 264.25 170.33 T
(\245) 108 155.33 T
(The \325) 121.54 155.33 T
(v) 142.42 155.33 T
(oid\325 v) 147.22 155.33 T
(alue for the basic classes are useful v) 170.58 155.33 T
(alues - f) 318.34 155.33 T
(alse is the \325) 350.45 155.33 T
(v) 395.22 155.33 T
(oid\325 v) 400.02 155.33 T
(alue for the BOOL) 423.38 155.33 T
(class, and 0 for the number classes.) 121.54 143.33 T
6 F
(Class) 185.79 638.33 T
(Initial Value) 240.98 638.33 T
(Class) 329.79 638.33 T
(Initial Value) 384.98 638.33 T
5 F
(INT) 168 622.33 T
(0) 240 622.33 T
(CHAR) 312 622.33 T
(\325\1340\325) 384 622.33 T
(FL) 168 608.33 T
(T) 178.75 608.33 T
(0.0) 240 608.33 T
(FL) 312 608.33 T
(TD) 322.75 608.33 T
(0.0d) 384 608.33 T
(BOOL) 168 594.33 T
(f) 240 594.33 T
(alse) 243.23 594.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(re\050new_re_part:FLT\051:SAME) 144 437.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(re\050new_re_part:FLT\051;) 144 369.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(immutable class PAIR is) 144 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr  first:FIRST_PART;) 156.6 231.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr second:SECOND_PART; ...) 156.6 222.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(immutable class FIRST_PART is) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(attr begin:PAIR;...) 156.6 204.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
162 648 162 589.25 2 L
V
0.5 H
0 Z
N
234 650 234 588.75 2 L
V
N
306 650 306 588.75 2 L
V
2 H
N
378 650 378 588.75 2 L
V
0.5 H
N
450 648 450 589.25 2 L
V
N
161.75 649 450.25 649 2 L
V
2 H
N
161.75 631 450.25 631 2 L
V
N
161.75 617 450.25 617 2 L
V
0.5 H
N
161.75 603 450.25 603 2 L
V
N
161.75 589 450.25 589 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 121
%%Page: "122" 122
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(122) 108 710.84 T
8 8 Q
(Imm) 222.27 710.84 T
(uta) 238.93 710.84 T
(ble Classes :) 252.13 710.84 T
0 F
(8.2 Using Imm) 301.33 710.84 T
(uta) 353.7 710.84 T
(ble Classes) 366.9 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(8.2  Using Imm) 108 654 T
(utab) 234.68 654 T
(le Classes) 272.5 654 T
5 10 Q
-0.56 (Immutable classes beha) 108 625.31 P
-0.56 (v) 201.66 625.31 P
-0.56 (e dif) 206.51 625.31 P
-0.56 (ferently from reference classes both in terms of their abstract beha) 223.76 625.31 P
-0.56 (viour) 482.89 625.31 P
(\050v) 108 613.31 T
(alue semantics\051 and in terms of their implementation.) 116.08 613.31 T
0.4 (T) 108 591.31 P
0.4 (o be) 113.31 591.31 P
0.4 (gin with, immutable classes cannot suf) 130.5 591.31 P
0.4 (fer from aliasing problems, since the) 287.23 591.31 P
0.4 (y are immutable.) 435.71 591.31 P
-0.21 (Y) 108 579.31 P
-0.21 (ou can get the same ef) 114.12 579.31 P
-0.21 (fect with reference classes by not pro) 201.95 579.31 P
-0.21 (viding an) 349.38 579.31 P
-0.21 (y modifying operations in the) 386.52 579.31 P
0.43 (interf) 108 567.31 P
0.43 (ace - an) 129.56 567.31 P
0.43 (y operation that w) 161.36 567.31 P
0.43 (ould modify the object, returns a ne) 235.03 567.31 P
0.43 (w object instead. F) 379.83 567.31 P
0.43 (or e) 456.51 567.31 P
0.43 (xample,) 472.06 567.31 P
(tak) 108 555.31 T
(e a look at the  STR class) 120.12 555.31 T
-0.04 (Immutable classes may ha) 108 533.31 P
-0.04 (v) 212.93 533.31 P
-0.04 (e se) 217.79 533.31 P
-0.04 (v) 232.76 533.31 P
-0.04 (eral ef) 237.61 533.31 P
-0.04 (\336cienc) 262.58 533.31 P
-0.04 (y adv) 289.09 533.31 P
-0.04 (antages o) 310.74 533.31 P
-0.04 (v) 348.04 533.31 P
-0.04 (er reference classes in certain circum-) 352.89 533.31 P
0.71 (stances. Since the) 108 521.31 P
0.71 (y are usually stored on the stack, the) 180.09 521.31 P
0.71 (y ha) 330.44 521.31 P
0.71 (v) 347.89 521.31 P
0.71 (e no heap management o) 352.74 521.31 P
0.71 (v) 454.85 521.31 P
0.71 (erhead and) 459.7 521.31 P
0.14 (need not be g) 108 509.31 P
0.14 (arbage collected. The) 161.98 509.31 P
0.14 (y also don\325) 247.92 509.31 P
0.14 (t use space to store a tag, and the absence of aliasing) 292.47 509.31 P
-0.51 (mak) 108 497.31 P
-0.51 (es more C compiler optimizations possible. F) 125.12 497.31 P
-0.51 (or a small class lik) 303.28 497.31 P
-0.51 (e CPX, all these f) 375.57 497.31 P
-0.51 (actors combine) 443.69 497.31 P
-0.39 (to gi) 108 485.31 P
-0.39 (v) 125.42 485.31 P
-0.39 (e a signi\336cant win o) 130.27 485.31 P
-0.39 (v) 209.1 485.31 P
-0.39 (er a reference class implementation. On the other hand, cop) 213.95 485.31 P
-0.39 (ying lar) 448.3 485.31 P
-0.39 (ge im-) 478.56 485.31 P
-0.29 (mutable objects onto the stack can incur signi\336cant o) 108 473.31 P
-0.29 (v) 317.73 473.31 P
-0.29 (erhead. Unfortunately the ef) 322.58 473.31 P
-0.29 (\336cienc) 434.2 473.31 P
-0.29 (y of an im-) 460.71 473.31 P
0.36 (mutable class appears directly tied to ho) 108 461.31 P
0.36 (w smart the C compiler is; \322gcc\323 is not v) 270.43 461.31 P
0.36 (ery bright in this) 436.54 461.31 P
(respect.) 108 449.31 T
-0.17 (Note that when an immutable class is passed as an ar) 108 427.31 P
-0.17 (gument to a function which is e) 317.76 427.31 P
-0.17 (xpecting an ab-) 442.69 427.31 P
-0.16 (stract type, the compiler) 108 415.31 P
10 F
-0.16 (boxes) 206.52 415.31 P
5 F
-0.16 ( it i.e. it is gi) 229.29 415.31 P
-0.16 (v) 278.55 415.31 P
-0.16 (en a temporary reference class wrapper with a type-tag.) 283.4 415.31 P
(Thus, immutable objects beha) 108 403.31 T
(v) 227.79 403.31 T
(es e) 232.64 403.31 T
(xactly lik) 247.76 403.31 T
(e an immutable reference objects in this situation.) 285.16 403.31 T
4 F
(Rules of Thumb) 108 375.31 T
5 F
(So, when should you use an immutable class? Here are a fe) 108 352.31 T
(w rules of thumb) 344.92 352.31 T
(.) 412.57 352.31 T
(\245) 108 334.31 T
(Y) 121.54 334.31 T
(ou w) 127.66 334.31 T
(ant the class to ha) 147.28 334.31 T
(v) 218.18 334.31 T
(e immutable semantics. Y) 223.03 334.31 T
(ou could still consider an immutable refer-) 325.81 334.31 T
(ence class.) 121.54 322.31 T
(\245) 108 307.31 T
(The class is small - the e) 121.54 307.31 T
(xact speed trade-of) 219.71 307.31 T
(fs ha) 295.54 307.31 T
(v) 314.5 307.31 T
(e not been in) 319.35 307.31 T
(v) 370.33 307.31 T
(estig) 375.18 307.31 T
(ated, b) 394.02 307.31 T
(ut immutable class-) 420.48 307.31 T
(es ha) 121.54 295.31 T
(v) 141.61 295.31 T
(e so f) 146.46 295.31 T
(ar been used when there are a fe) 168.02 295.31 T
(wer than a handful of  attrib) 296.32 295.31 T
(utes.) 407.76 295.31 T
(\245) 108 280.31 T
(There are going to be a lar) 121.54 280.31 T
(ge number of objects of that class. This goes along with the pre) 226.88 280.31 T
(vious) 479.65 280.31 T
(point. F) 121.54 268.31 T
(or instance, if you are going to ha) 152.51 268.31 T
(v) 286.73 268.31 T
(e lar) 291.58 268.31 T
(ge arrays of comple) 308.89 268.31 T
(x numbers, then the space) 387.88 268.31 T
(that w) 121.54 256.31 T
(ould be required for an object pointer and an object tag may be considerable.) 146.16 256.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 122
%%Page: "123" 123
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Closur) 249.22 710.84 T
(es :) 272.91 710.84 T
0 F
(9.1) 287.86 710.84 T
(Cr) 301.16 710.84 T
(eating and Calling Closur) 310.04 710.84 T
(es) 408.47 710.84 T
6 10 Q
(123) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Closur) 108 642 S
-0.25 (es) 213.11 642 S
5 10 Q
0.22 (Routine and iter) 108 517.33 P
1 F
0.22 (closures) 175.62 517.33 P
5 F
0.22 ( are similar to the \324function pointer\325 and \324closure\325 constructs of other lan-) 208.03 517.33 P
-0.23 (guages. The) 108 505.33 P
-0.23 (y bind a reference to a method together with zero or more ar) 155.94 505.33 P
-0.23 (gument v) 394.1 505.33 P
-0.23 (alues \050possibly in-) 431.12 505.33 P
0.06 (cluding) 108 493.33 P
9 F
0.14 (self) 140.56 493.33 P
5 F
0.06 (\051.    The type of a closure be) 164.56 493.33 P
0.06 (gins with the k) 277.14 493.33 P
0.06 (e) 336.38 493.33 P
0.06 (yw) 340.67 493.33 P
0.06 (ords) 352.79 493.33 P
9 F
0.14 (ROUT) 372.57 493.33 P
5 F
0.06 ( or) 396.57 493.33 P
9 F
0.14 (ITER) 410.02 493.33 P
5 F
0.06 ( and  follo) 434.02 493.33 P
0.06 (wed by) 474.78 493.33 P
-0.07 (the modes and types  of the underscore ar) 108 481.33 P
-0.07 (guments, if an) 273.37 481.33 P
-0.07 (y) 330.02 481.33 P
-0.07 (, enclosed in braces \050) 334.37 481.33 P
10 F
-0.07 (e) 418.25 481.33 P
-0.07 (.g) 422.54 481.33 P
-0.07 (.) 429.89 481.33 P
5 F
-0.07 ( \324) 432.39 481.33 P
9 F
-0.16 (ROUT{A, out) 438.16 481.33 P
-0.91 (B, inout C}) 108 469.33 P
5 F
-0.38 (\325,) 172.18 469.33 P
9 F
-0.91 (\325ITER{once A, out B, C}\325) 180.13 469.33 P
5 F
-0.38 (\051. These are follo) 320.49 469.33 P
-0.38 (wed by a colon and the return) 387.41 469.33 P
(type, if there is one \050) 108 457.33 T
10 F
(e) 190.76 457.33 T
(.g) 195.05 457.33 T
(.) 202.4 457.33 T
5 F
( \324) 204.9 457.33 T
9 F
(ROUT{INT}:INT) 210.73 457.33 T
5 F
(\325,) 288.73 457.33 T
9 F
(\325ITER{once INT}:FLT\325) 297.06 457.33 T
5 F
(\051.) 417.06 457.33 T
108 395.98 504 399 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 397.49 540 397.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(9.1  Creating and Calling Closures) 108 405 T
4 12 Q
(9.1.1   Creating a c) 108 356.98 T
(losure) 213.14 356.98 T
5 10 Q
-0.17 (A closure is created by an e) 108 334.31 P
-0.17 (xpression that binds a routine or an iterator) 217.36 334.31 P
-0.17 (, along with some of its ar) 387.7 334.31 P
-0.17 (gu-) 490.67 334.31 P
-0.28 (ments. The outer part of the e) 108 322.31 P
-0.28 (xpression is \324) 224.21 322.31 P
9 F
-0.67 (bind\050...\051) 276.98 322.31 P
5 F
-0.28 (\325. This surrounds a routine or iterator call in) 330.98 322.31 P
-0.22 (which an) 108 310.31 P
-0.22 (y of the ar) 144.01 310.31 P
-0.22 (guments or) 184 310.31 P
9 F
-0.52 (self) 230.79 310.31 P
5 F
-0.22 ( may ha) 254.79 310.31 P
-0.22 (v) 285.81 310.31 P
-0.22 (e been replaced by the underscore character \324) 290.66 310.31 P
9 F
-0.52 (_) 469.89 310.31 P
5 F
-0.22 (\325. Such) 475.89 310.31 P
-0.18 (unspeci\336ed ar) 108 298.31 P
-0.18 (guments are) 163.46 298.31 P
1 F
-0.18 (unbound) 214.2 298.31 P
5 F
-0.18 (.  Unbound ar) 250.51 298.31 P
-0.18 (guments are speci\336ed when the closure  is e) 304.78 298.31 P
-0.18 (v) 478.6 298.31 P
-0.18 (entu-) 483.45 298.31 P
(ally called.) 108 286.31 T
-0.26 (Out and inout ar) 108 233.31 P
-0.26 (guments must be speci\336ed in the closure type. If the routine has) 172.32 233.31 P
9 F
-0.62 (inout) 426.7 233.31 P
5 F
-0.26 ( or) 456.7 233.31 P
9 F
-0.62 (out) 469.52 233.31 P
5 F
-0.26 (ar-) 492.9 233.31 P
(guments as sho) 108 221.31 T
(w belo) 168.86 221.31 T
(w) 195.55 221.31 T
(, the) 202.12 221.31 T
(y are mentioned in the type of the closure:) 219.19 221.31 T
-0.03 (The routine) 108 177.31 P
9 F
-0.06 (\325swap\325) 156.83 177.31 P
5 F
-0.03 ( sw) 192.83 177.31 P
-0.03 (aps the v) 206.31 177.31 P
-0.03 (alues of the tw) 241.56 177.31 P
-0.03 (o ar) 299.98 177.31 P
-0.03 (guments,) 315.04 177.31 P
9 F
-0.06 (\325x\325) 353.9 177.31 P
5 F
-0.03 (and) 377.84 177.31 P
9 F
-0.06 (\325y\325) 394.75 177.31 P
5 F
-0.03 (.) 412.75 177.31 P
-0.03 ( \325) 421.19 177.31 P
9 F
-0.06 (r\325) 426.99 177.31 P
5 F
-0.03 (is a closure for) 444.93 177.31 P
(binding the) 108 165.31 T
9 F
(\325swap\325) 155.78 165.31 T
5 F
( routine.) 191.78 165.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:ROUT{INT}:INT :=  bind\0503.plus\050_\051\051) 144 266.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b:ITER:INT := bind\0503.times!\051;) 144 257.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(swap\050inout x, inout y:INT\051 is  tmp::= x;  x := y; y:=tmp; end;) 144 201.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r:ROUT{inout INT, inout INT} := bind\050swap\050_,_\051\051;) 144 145.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 123
%%Page: "124" 124
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(124) 108 710.84 T
8 8 Q
(Closur) 232.09 710.84 T
(es :) 255.78 710.84 T
0 F
(9.1 Cr) 270.73 710.84 T
(eating and Calling Closur) 292.9 710.84 T
(es) 391.34 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(9.1.2   Calling a c) 108 658 T
(losure) 204.48 658 T
5 10 Q
0.59 (Each routine closure de\336nes a routine named \324) 108 635.33 P
9 F
1.41 (call) 297.89 635.33 P
5 F
0.59 (\325 and each iterator closure de\336nes an iterator) 321.89 635.33 P
0.07 (named) 108 623.33 P
9 F
0.17 (\325call!\325) 137.23 623.33 P
5 F
0.07 (. These ha) 179.23 623.33 P
0.07 (v) 219.99 623.33 P
0.07 (e ar) 224.84 623.33 P
0.07 (gument and return types that correspond to the closure type speci-) 239.45 623.33 P
-0.26 (\336ers. In) 108 611.33 P
-0.26 (v) 137.89 611.33 P
-0.26 (ocations of these features beha) 142.69 611.33 P
-0.26 (v) 264.21 611.33 P
-0.26 (e lik) 269.06 611.33 P
-0.26 (e a call on the original routine or iterator with the ar) 286.2 611.33 P
-0.26 (gu-) 490.67 611.33 P
0.14 (ments speci\336ed by a combination of the bound v) 108 599.33 P
0.14 (alues and those pro) 303.26 599.33 P
0.14 (vided to) 380.45 599.33 P
9 F
0.32 (call) 415.71 599.33 P
5 F
0.14 ( or) 439.71 599.33 P
9 F
0.32 (call!) 453.32 599.33 P
5 F
0.14 (. The) 483.32 599.33 P
(ar) 108 587.33 T
(guments to) 115.59 587.33 T
9 F
(call) 162.26 587.33 T
5 F
(and) 192.26 587.33 T
9 F
(call!) 209.2 587.33 T
5 F
(  match the underscores positionally from left to right .) 239.2 587.33 T
(The pre) 108 565.33 T
(viously de\336ned closures are in) 138.57 565.33 T
(v) 259.82 565.33 T
(ok) 264.62 565.33 T
(ed as sho) 274.52 565.33 T
(wn) 310.93 565.33 T
0.07 ( In the follo) 108 494.33 P
0.07 (wing e) 154.9 494.33 P
0.07 (xample, we de\336ne a bound routine that tak) 181.76 494.33 P
0.07 (es an) 352.67 494.33 P
9 F
0.17 (INT) 375.58 494.33 P
5 F
0.07 ( as an ar) 393.58 494.33 P
0.07 (gument and returns) 426.65 494.33 P
(an) 108 482.33 T
9 F
(INT) 122.44 482.33 T
5 F
(.) 139.7 482.33 T
-0.6 (The v) 108 429.33 P
-0.6 (ariable  br is typed as a bound routine which tak) 130.2 429.33 P
-0.6 (es an inte) 316.28 429.33 P
-0.6 (ger as ar) 352.7 429.33 P
-0.6 (gument and returns an inte) 385.18 429.33 P
-0.6 (ger) 489.28 429.33 P
-0.6 (.) 501.5 429.33 P
0.45 (The routine 1.plus, which is of the appropriate type, is then assigned to br) 108 417.33 P
0.45 (. The routine associated) 407.68 417.33 P
-0.09 (with  br may then be in) 108 405.33 P
-0.09 (v) 199.86 405.33 P
-0.09 (ok) 204.66 405.33 P
-0.09 (ed by the b) 214.56 405.33 P
-0.09 (uilt in function) 258.27 405.33 P
9 F
-0.2 (call) 319.97 405.33 P
5 F
-0.09 (. Just as we w) 343.97 405.33 P
-0.09 (ould when calling the rou-) 398.8 405.33 P
(tine) 108 393.33 T
9 F
(INT::plus\050INT\051) 125.5 393.33 T
5 F
(, we must supply the inte) 209.5 393.33 T
(ger ar) 309.35 393.33 T
(gument to the bound routine.) 332.21 393.33 T
4 12 Q
(9.1.3   Binding o) 108 352 T
(verloaded r) 199.79 352 T
(outines) 264.24 352 T
5 10 Q
-0.17 (When binding a routine which is o) 108 329.33 P
-0.17 (v) 245.15 329.33 P
-0.17 (erloaded, there might be some ambiguity about which routine is) 250 329.33 P
(meant to be bound) 108 317.33 T
(When binding the) 108 246.33 T
9 F
(plus) 182.16 246.33 T
5 F
(routine, it might not be ob) 212.16 246.33 T
(vious which routine is intended) 316.46 246.33 T
-0.28 (In case of ambiguity) 108 202.33 P
-0.28 (, the right method must be determined by the conte) 188.45 202.33 P
-0.28 (xt in which the binding tak) 389.66 202.33 P
-0.28 (es) 495.67 202.33 P
(place.) 108 190.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(#OUT+ a.call\0504\051;) 144 545.67 T
11 F
(-- Prints out 7, where a is bind\0503.plus\050_\051) 278.4 545.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(sum:INT := 0;) 144 536.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop  sum := sum + b.call!; end;) 144 527.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+sum;) 144 518.67 T
11 F
(-- Prints out 3 \0500+1+2\051) 278.4 518.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(br:ROUT{INT}:INT := bind\0501.plus\050_\051\051;) 144 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+br.call\0509\051;) 144 453.67 T
11 F
(-- Prints out \32510\325) 321.6 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class FLT is) 144 297.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   plus\050f:FLT\051:FLT) 144 288.67 T
11 F
(-- add self and \325i\325 and return the result) 240 288.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   plus\050i:INT\051:FLT;) 144 279.67 T
11 F
(-- add self and \325f\325 \050after converting \325i\325 to FLT\051) 240 279.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 270.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b ::= bind\050_.plus\050_\051\051;) 144 226.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 305.88 129.6 265.13 2 L
V
0 Z
N
489.6 305.88 489.6 265.13 2 L
V
N
129.48 306 489.73 306 2 L
V
N
129.48 265 489.73 265 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 124
%%Page: "125" 125
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Closur) 249.22 710.84 T
(es :) 272.91 710.84 T
0 F
(9.1) 287.86 710.84 T
(Cr) 301.16 710.84 T
(eating and Calling Closur) 310.04 710.84 T
(es) 408.47 710.84 T
6 10 Q
(125) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(Binding in an assignment) 108 659.33 T
5 F
0.03 (If there is ambiguity about which method is to be bound, the type of the v) 108 636.33 P
0.03 (ariable must be e) 402.67 636.33 P
0.03 (xplicitly) 470.66 636.33 P
(speci\336ed) 108 624.33 T
4 F
(Binding in a call) 108 574.33 T
5 F
-0.21 (A method may also be bound at the time a call is made. The type of the closure is determined by the) 108 551.33 P
(type of the ar) 108 539.33 T
(gument in the call.) 160.86 539.33 T
(W) 108 459.33 T
(e can call the reduction function as follo) 116.64 459.33 T
(ws:) 277.19 459.33 T
-0.35 (The second ar) 108 397.33 P
-0.35 (gument to the function) 163.21 397.33 P
9 F
-0.85 (reduce) 255.13 397.33 P
5 F
-0.35 ( e) 291.13 397.33 P
-0.35 (xpects a) 297.56 397.33 P
9 F
-0.85 (ROUT{FLT,FLT}:FLT) 331.85 397.33 P
5 F
-0.35 ( and this type w) 433.85 397.33 P
-0.35 (as) 495.67 397.33 P
0.01 (used to select which) 108 385.33 P
9 F
0.01 (plus) 191.34 385.33 P
5 F
0.01 ( routine should be bound.   When there could be doubt about which rou-) 215.34 385.33 P
(tine is actually being bound, it is v) 108 373.33 T
(ery good practice to specify the type e) 245.63 373.33 T
(xplicitly) 397.94 373.33 T
4 12 Q
(9.1.4   P) 108 301 T
(oints to note) 152.22 301 T
5 10 Q
(\245) 108 281.33 T
9 F
(out) 121.54 281.33 T
5 F
( and) 139.54 281.33 T
9 F
(inout) 158.98 281.33 T
5 F
( ar) 188.98 281.33 T
(guments must be left unbound. This is a reasonable restriction, since such) 199.07 281.33 T
(ar) 121.54 269.33 T
(guments must return a v) 129.13 269.33 T
(alue to the calling conte) 225.54 269.33 T
(xt. If such an ar) 320.93 269.33 T
(gument were bound, when) 383.23 269.33 T
(the closure is in) 121.54 257.33 T
(v) 184.19 257.33 T
(ok) 188.99 257.33 T
(ed, v) 198.89 257.33 T
(ariables that e) 218.08 257.33 T
(xisted at the point of closure binding w) 273.47 257.33 T
(ould be af) 429.75 257.33 T
(fected.) 469.49 257.33 T
(Such v) 121.54 245.33 T
(ariables might not e) 148.79 245.33 T
(v) 227.7 245.33 T
(en be ali) 232.55 245.33 T
(v) 266.18 245.33 T
(e at the point where the closure is actually in) 271.03 245.33 T
(v) 449.21 245.33 T
(ok) 454.01 245.33 T
(ed.) 463.91 245.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(b:ROUT{FLT,FLT}:FLT := bind\050_.plus\050_\051\051;) 144 604.67 T
11 F
(-- Selects the first \325plus\325) 336 604.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(reduce\050a:ARRAY{FLT}, br:ROUT{FLT,FLT}:FLT\051:FLT is) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  res:FLT := 0.0;) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  loop el:FLT := a.elt!; res := br.call\050res,el\051; end;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  return res;) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:ARRAY{FLT} := |1.0,7.0,3.0|;) 144 439.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + reduce\050a,bind\050_.plus\050_\051\051\051;) 144 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Prints \32511.0\325, the sum of the elements of \325a\325) 144 421.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r:ROUT{FLT,FLT}:FLT := bind\050_.plus\050_\051\051;) 144 353.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+reduce\050a,r\051;) 144 344.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 527.88 129.6 478.12 2 L
V
0 Z
N
489.6 527.88 489.6 478.12 2 L
V
N
129.48 528 489.73 528 2 L
V
N
129.48 478 489.73 478 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 125
%%Page: "126" 126
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(126) 108 710.84 T
8 8 Q
(Closur) 232.09 710.84 T
(es :) 255.78 710.84 T
0 F
(9.1 Cr) 270.73 710.84 T
(eating and Calling Closur) 292.9 710.84 T
(es) 391.34 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(9.1.5   Binding some ar) 108 658 T
(guments) 238.54 658 T
5 10 Q
(When a routine closure is created, it can preset some of the v) 108 635.33 T
(alues of the ar) 351.3 635.33 T
(guments.) 407.49 635.33 T
0.17 (In the e) 108 510.33 P
0.17 (xample abo) 138.18 510.33 P
0.17 (v) 184.58 510.33 P
0.17 (e,) 189.43 510.33 P
9 F
0.41 (br2) 199.04 510.33 P
5 F
0.17 ( binds the \336rst ar) 217.04 510.33 P
0.17 (gument of) 284.76 510.33 P
9 F
0.41 ( foo) 328.43 510.33 P
5 F
0.17 ( to 10 and the second ar) 352.84 510.33 P
0.17 (gument is left) 448.66 510.33 P
0.52 (unbound. This second ar) 108 498.33 P
0.52 (gument will ha) 207.7 498.33 P
0.52 (v) 268.54 498.33 P
0.52 (e to be supplied by the caller of the bound routine.) 273.39 498.33 P
9 F
1.25 (br1) 486 498.33 P
5 F
(binds neither ar) 108 486.33 T
(gument and hence when it is called, it must supply both ar) 170.03 486.33 T
(guments.) 402.61 486.33 T
-0.05 (Here we double e) 108 464.33 P
-0.05 (v) 177.86 464.33 P
-0.05 (ery element of an array by applying a routine closure) 182.71 464.33 P
9 F
-0.11 (r) 396.64 464.33 P
5 F
-0.05 ( to each element of an ar-) 402.64 464.33 P
(ray) 108 452.33 T
(.) 120.12 452.33 T
4 12 Q
(9.1.6   Lea) 108 362 T
(ving) 165.19 362 T
7 F
(self) 193.2 362 T
4 F
( unbound) 211.87 362 T
5 10 Q
0.18 ( bound routines are often used to apply a function to arbitrary objects of a particular class. F) 108 339.33 P
0.18 (or this) 478.54 339.33 P
-0.27 (usage, we need the self ar) 108 327.33 P
-0.27 (gument to be unbound. This illustrates ho) 209.2 327.33 P
-0.27 (w self may be left unbound.  The) 373.7 327.33 P
(type of self must be inferred from the type conte) 108 315.33 T
(xt \050) 301.42 315.33 T
9 F
(ROUT{INT}) 315.03 315.33 T
5 F
(\051.) 369.03 315.33 T
(In the follo) 108 262.33 T
(wing e) 152.19 262.33 T
(xample we will mak) 178.98 262.33 T
(e use of the) 260.26 262.33 T
9 F
(plus) 311.08 262.33 T
5 F
( routine from the) 335.08 262.33 T
9 F
(INT) 405.07 262.33 T
5 F
( class.) 423.07 262.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050a:INT, b:INT\051:INT is return\050a+b+10\051 end;) 156.6 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(main is) 156.6 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(br1:ROUT{INT,INT}:INT := bind\050foo\050_,_\051\051;) 171 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(br2:ROUT{INT}:INT := bind\050foo\05010,_\051\051;) 171 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT+br1.call\0504,3\051+","+br2.call\0509\051; -- Should print 17 and  29) 171 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r :ROUT{INT}:INT := bind\0502.times\050_\051\051;) 144 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop) 144 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a.set!\050r.call\050a.elt!\051\051) 156.6 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end) 144 405.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r :ROUT{INT} := bind\050_.plus\0503\051\051;) 144 295.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + r.call\0505\051;) 144 286.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(              --) 253.8 286.67 T
11 F
(prints) 335.4 286.67 T
9 F
( \3248\325) 364.2 286.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( ... from the INT class) 144 242.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(plus\050arg:INT\051:INT is        ... definition of plus) 144 233.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(main is) 144 215.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  plusbr1:ROUT{INT,INT}:INT:=bind\050_.plus\050_\051\051;) 144 206.67 T
11 F
(-- self and arg unbound) 369.6 206.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  br1res:INT := plusbr1.call\0509,10\051;) 144 197.67 T
11 F
(-- Returns 19) 355.2 197.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  plusbr2:ROUT{INT}:INT := bind\0503.plus\050_\051\051;) 144 188.67 T
11 F
(-- Binding self only) 355.2 188.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  br2res:INT := plusbr2.call\05015\051;) 144 179.67 T
11 F
(-- Returns 18) 355.2 179.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  plusbr3:ROUT{INT}:INT := bind\050_.plus\0509\051\051;) 144 170.67 T
11 F
(-- Binding arg only) 355.2 170.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  br3res:INT := plusbr3.call\05011\051;) 144 161.67 T
11 F
(-- Returns 20) 355.2 161.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  #OUT+br1res+","+br2res+","+br3res;) 144 152.67 T
11 F
(-- 19,18,20) 355.2 152.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 144 143.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 529.12 2 L
V
0 Z
N
489.6 623.88 489.6 529.12 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 529 489.73 529 2 L
V
N
129.6 250.88 129.6 138.13 2 L
V
N
489.6 250.88 489.6 138.13 2 L
V
N
129.48 251 489.73 251 2 L
V
N
129.48 138 489.73 138 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 126
%%Page: "127" 127
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Closur) 252.35 710.84 T
(es :) 276.04 710.84 T
0 F
(9.2) 290.99 710.84 T
(Fur) 304.29 710.84 T
(ther Examples of Closur) 315.6 710.84 T
(es) 405.34 710.84 T
6 10 Q
(127) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.02 ( In the abo) 108 659.33 P
0.02 (v) 150.39 659.33 P
0.02 (e e) 155.24 659.33 P
0.02 (xample,) 166.48 659.33 P
9 F
0.04 (plusbr1) 203.46 659.33 P
5 F
0.02 ( lea) 245.46 659.33 P
0.02 (v) 259.43 659.33 P
0.02 (es both self and the ar) 264.28 659.33 P
0.02 (gument to) 351.66 659.33 P
9 F
0.04 (plus) 396.99 659.33 P
5 F
0.02 (unbound. Note that) 427.03 659.33 P
0.54 (we must specify the type of  self when creating the bound routine, otherwise the compiler cannot) 108 647.33 P
-0.36 (kno) 108 635.33 P
-0.36 (w which class the routine belongs to \050the type could also be an abstract type that de\336nes that fea-) 122.75 635.33 P
-0.06 (ture in its interf) 108 623.33 P
-0.06 (ace\051.) 169.66 623.33 P
9 F
-0.14 ( plusbr2) 191.25 623.33 P
5 F
-0.06 ( binds  self to) 239.1 623.33 P
9 F
-0.14 (3) 295.19 623.33 P
5 F
-0.06 (, so that the only ar) 301.19 623.33 P
-0.06 (gument that need be supplied at) 377.37 623.33 P
-0.4 (call time is the ar) 108 611.33 P
-0.4 (gument to the  plus.) 175.09 611.33 P
9 F
-0.97 (plusbr3) 256.85 611.33 P
5 F
-0.4 ( binds the ar) 298.85 611.33 P
-0.4 (gument of) 346.62 611.33 P
9 F
-0.97 (plus) 391.24 611.33 P
5 F
-0.4 ( to) 415.24 611.33 P
9 F
-0.97 (15) 427.22 611.33 P
5 F
-0.4 (, so that the only) 439.22 611.33 P
(ar) 108 599.33 T
(gument that need be supplied at call time is  self for the routine.) 115.59 599.33 T
108 537.98 504 541 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 539.49 540 539.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(9.2  Fur) 108 547 T
(ther Examples of Closures) 172.39 547 T
5 10 Q
-0 (Just as is the case with C function pointers,  there will be programmers who \336nd closures indispen-) 108 518.31 P
0.12 (sible and others who will hardly e) 108 506.31 P
0.12 (v) 243.98 506.31 P
0.12 (er touch them. Since Sather\325) 248.83 506.31 P
0.12 (s closures are strongly typed, much) 362.33 506.31 P
(of the insecurity associated with function pointers in C disappears.) 108 494.31 T
4 12 Q
(9.2.1   Closures f) 108 452.98 T
(or Applicative Pr) 203.14 452.98 T
(ogramming) 298.26 452.98 T
5 10 Q
-0.56 (Closures are useful when you w) 108 430.31 P
-0.56 (ant to write Lisp-lik) 233.14 430.31 P
-0.56 (e "apply\323 routines in a class which contains other) 311.08 430.31 P
0.2 (data .  Routines that use routine closures in this w) 108 418.31 P
0.2 (ay may be found in the class ARRA) 308.55 418.31 P
0.2 (Y{T}. Some) 453.08 418.31 P
(e) 108 406.31 T
(xamples of which are sho) 112.29 406.31 T
(wn belo) 214.24 406.31 T
(w) 245.93 406.31 T
(.) 252.5 406.31 T
0.01 (The follo) 108 290.31 P
0.01 (wing routine which tak) 144.7 290.31 P
0.01 (es a routine closure as an ar) 237.13 290.31 P
0.01 (gument and uses it to select an element) 347.54 290.31 P
(from a list) 108 278.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(every\050test:ROUT{T}:BOOL\051:BOOL is) 144 386.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- True if every element of self satisfies \324test\325.) 156.6 377.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(loop) 156.6 368.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(e ::= elt!;) 171 359.64 T
11 F
(-- Iterate through the array elements) 238.2 359.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(if ~test.call\050e\051 then return false end) 171 350.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- If e fails the test, return false immediately) 171 341.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(end;) 156.6 332.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return true) 156.6 323.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 314.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(select\050e:ARRAY{INT}, r:ROUT{INT}:BOOL\051:INT is) 144 258.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
( -- Return the index of the first element in the array \325e\325 that) 148.8 249.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  -- satisfies the predicate \325r\325.) 144 240.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  -- Return -1 if no element of \325e\325 satisfies the predicate.) 144 231.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  loop i:INT := e.ind!;) 144 222.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       if r.call\050e[i]\051 then  return i end;) 144 213.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end;) 144 204.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  return -1;) 144 195.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 186.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 394.85 129.6 309.1 2 L
V
0.25 H
0 Z
N
489.6 394.85 489.6 309.1 2 L
V
N
129.48 394.98 489.73 394.98 2 L
V
N
129.48 308.98 489.73 308.98 2 L
V
N
129.6 266.85 129.6 163.1 2 L
V
N
489.6 266.85 489.6 163.1 2 L
V
N
129.48 266.98 489.73 266.98 2 L
V
N
129.48 162.98 489.73 162.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 127
%%Page: "128" 128
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(128) 108 710.84 T
8 8 Q
(Closur) 235.22 710.84 T
(es :) 258.9 710.84 T
0 F
(9.2 Fur) 273.86 710.84 T
(ther Examples of Closur) 298.46 710.84 T
(es) 388.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(The  selection routine may be used as sho) 108 659.33 T
(wn belo) 274.39 659.33 T
(w:) 306.08 659.33 T
4 12 Q
(9.2.2   Men) 108 547 T
(u Structures) 168.58 547 T
5 10 Q
-0.54 (Another  common use of function pointers is in the construction of an abstraction for a set of choices.) 108 524.33 P
-0.28 (The) 108 512.33 P
9 F
-0.67 (MENU) 125.77 512.33 P
5 F
-0.28 (class sho) 155.1 512.33 P
-0.28 (wn belo) 190.41 512.33 P
-0.28 (w maintains a mapping between strings and routine closures associated) 221.82 512.33 P
(with the strings.) 108 500.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a:ARRAY{INT} := |1,2,3,7|;) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(br:ROUT{INT}:BOOL := bind\050_.is_eq\0503\051\051;) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + select\050a,br\051;) 144 621.67 T
11 F
( -- Prints the index of the first element of \325a\325) 244.8 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(                      -- that is equal to \3253\325. The index printed is \3252\325) 144 612.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MENU is) 144 480.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  private attr menu_actions:MAP{STR,ROUT};) 144 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Hash table from strings to closures) 197.4 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  private attr default_action:ROUT{STR};) 144 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  create\050default_act:ROUT{STR}\051:SAME is) 144 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    res:SAME := new;) 144 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    res.menu_actions := #MAP{STR,ROUT};) 144 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    res.default_action := default_act;) 144 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    return\050res\051) 144 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end;) 144 381.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  add_item\050name:STR, func:ROUT\051 is menu_actions[name] := func end;) 144 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(  -- Add a menu item to the hash table, indexed by 'name') 158.4 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  run is) 144 336.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     loop) 144 327.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       #OUT+">";) 144 318.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       command: STR := IN::get_str;) 144 309.67 T
11 F
(-- Gets the next line of  input) 321.6 309.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(       if command = "done" then break!) 144 300.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       elsif menu_actions.has_ind\050command\051 then) 144 291.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  menu_actions[command].call;) 178.2 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       else) 144 273.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  default_action.call\050command\051;) 178.2 264.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       end;) 144 255.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end;) 144 246.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 237.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 228.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 488.88 129.6 223.13 2 L
V
0 Z
N
489.6 488.88 489.6 223.13 2 L
V
N
129.48 489 489.73 489 2 L
V
N
129.48 223 489.73 223 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 128
%%Page: "129" 129
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Closur) 252.35 710.84 T
(es :) 276.04 710.84 T
0 F
(9.2) 290.99 710.84 T
(Fur) 304.29 710.84 T
(ther Examples of Closur) 315.6 710.84 T
(es) 405.34 710.84 T
6 10 Q
(129) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(W) 108 659.33 T
(e use this opportunity to create a te) 116.64 659.33 T
(xtual interf) 256.19 659.33 T
(ace for the calculator described on page 80:) 300.25 659.33 T
(The main routines of the calculator computation are:) 108 471.33 T
(This  calculator can be started by a simple main routine:) 108 247.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class CALCULATOR is) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr stack:A_STACK{INT};) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr menu:MENU;) 144 612.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is res ::= new; res.init; return res; end;) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private init is) 144 576.67 T
11 F
( -- Initialize the calculator attributes) 240 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(      stack := #;) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      menu := #MENU\050bind\050push\050_\051\051\051;) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      menu.add_menu_item\050"add",bind\050add\051\051;) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      menu.add_menu_item\050"times",bind\050times\051\051;) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   run is menu.run; end;) 144 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   ....) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(push\050s:STR\051 is) 144 451.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Convert the value 's' into an INT and push it onto the stack) 172.8 442.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- Do nothing if the string is not a valid integer) 144 433.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(      c: STR_CURSOR := s.cursor;) 144 424.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i: INT := c.int;) 144 415.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if c.has_error then #ERR+"Bad integer value:"+s;) 144 406.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      else  stack.push\050i\051; end;) 144 397.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 388.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   add is) 144 370.67 T
11 F
(-- Add the two top stack values and push/print the result) 196.8 370.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(      sum:INT := stack.pop+stack.pop;) 144 361.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT+sum+"\134n";) 144 352.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stack.push\050sum\051;) 144 343.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 334.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   times is) 144 316.67 T
11 F
(-- Multiply the top stack values and push/print the result) 206.4 316.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(      product:INT := stack.pop*stack.pop;) 144 307.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT+product+"\134n";) 144 298.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stack.push\050product\051;) 144 289.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 280.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 271.67 T
11 F
( -- class CALCULATOR) 168 271.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class MAIN is  main is c: CALCULATOR := #;   c.run;  end;end;) 144 227.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 490 2 L
V
0 Z
N
489.6 647.88 489.6 490 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.6 460 129.6 266.13 2 L
V
N
489.6 460 489.6 266.13 2 L
V
N
129.48 266 489.73 266 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 129
%%Page: "130" 130
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(130) 108 710.84 T
8 8 Q
(Closur) 235.22 710.84 T
(es :) 258.9 710.84 T
0 F
(9.2 Fur) 273.86 710.84 T
(ther Examples of Closur) 298.46 710.84 T
(es) 388.21 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(After compiling the program, we can then run the resulting e) 108 659.33 T
(x) 350.86 659.33 T
(ecutable) 355.71 659.33 T
4 12 Q
(9.2.3   Iterator c) 108 506 T
(losures) 195.8 506 T
2 10 Q
-0.21 (An iterator closure is created that may be used to extract elements of a map that satisfy the) 108 481.33 P
(selection criteria defined by \324) 108 469.33 T
9 F
(select) 235.56 469.33 T
2 F
(\325.) 271.56 469.33 T
0.63 (This creates an iterator closure that returns  successive odd integers, and then prints the) 108 396.33 P
(first ten.) 108 384.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(pts/1 samosa:~/Sather>a.out) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>3) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>4) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>add) 144 612.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(7) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>10) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>11) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>times) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(110) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(>done) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(pts/1 samosa:~/Sather>) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(select:ROUT{T}:BOOL;) 144 449.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(select_elt:ITER{MAP{K,T}}:T;) 144 440.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 144 431.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(select_elt := bind\050_.filter!\050select\051\051;) 144 422.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(odd_ints :ITER{INT}:INT;) 144 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(odd_ints := bind\0501.step!\050_,2\051\051;) 144 355.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop) 144 346.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + odd_ints.call!\05010\051;) 156.6 337.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end) 144 328.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 372.88 129.6 323.13 2 L
V
0 Z
N
489.6 372.88 489.6 323.13 2 L
V
N
129.48 373 489.73 373 2 L
V
N
129.48 323 489.73 323 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 130
%%Page: "131" 131
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Exceptions :) 232.72 710.84 T
0 F
(10.1) 280.86 710.84 T
(Thr) 298.59 710.84 T
(o) 309.12 710.84 T
(wing and Catching Exceptions) 314.2 710.84 T
6 10 Q
(131) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Exceptions) 108 642 S
5 10 Q
0.15 (Exceptions are used to escape from method calls under unusual circumstances.  F) 108 517.33 P
0.15 (or e) 435.4 517.33 P
0.15 (xample, a ro-) 450.66 517.33 P
0.15 (b) 108 505.33 P
0.15 (ust numerical application may wish to pro) 112.8 505.33 P
0.15 (vide an alternate means of solving a problem under un-) 281.87 505.33 P
-0.25 (usual circumstances such as ill conditioning.  Exceptions bypass the ordinary w) 108 493.33 P
-0.25 (ay of returning from) 423.39 493.33 P
(methods and may be used to skip o) 108 481.33 T
(v) 248.12 481.33 T
(er multiple callers until a suitable handler is found.) 252.97 481.33 T
108 419.98 504 423 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 421.49 540 421.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(10.1  Thr) 108 429 T
(o) 181.67 429 T
(wing and Catc) 192.4 429 T
(hing Exceptions) 314.24 429 T
5 10 Q
0.21 (There are tw) 108 400.31 P
0.21 (o aspects to indicating errors using e) 158.84 400.31 P
0.21 (xceptions - ho) 306.03 400.31 P
0.21 (w the error is indicated at the point) 362.85 400.31 P
-0.44 (where it occurs.  This is usually referred to as thro) 108 388.31 P
-0.44 (wing the e) 304.11 388.31 P
-0.44 (xception. The other aspect of e) 344.73 388.31 P
-0.44 (xceptions) 465.67 388.31 P
(is ho) 108 376.31 T
(w the error message is handled, which is referred to as catching the e) 126.92 376.31 T
(xception.) 402.25 376.31 T
4 12 Q
(10.1.1   Thr) 108 334.98 T
(o) 170.46 334.98 T
(wing Exceptions with) 177.61 334.98 T
7 F
(raise) 302.98 334.98 T
5 10 Q
0.95 (Exceptions are e) 108 312.31 P
0.95 (xplicitly raised by) 175.83 312.31 P
1 F
0.95 (raise statements) 253.39 312.31 P
5 F
0.95 (. The raise statement speci\336es an e) 319.06 312.31 P
0.95 (xpression,) 463.17 312.31 P
(which is e) 108 300.31 T
(v) 148.3 300.31 T
(aluated to obtain the e) 153.05 300.31 T
(xception object.) 241.22 300.31 T
0.48 (In the e) 108 220.31 P
0.48 (xample abo) 138.8 220.31 P
0.48 (v) 185.51 220.31 P
0.48 (e, the object happens to be a string that indicates the problem. In general, the) 190.37 220.31 P
-0.04 (e) 108 208.31 P
-0.04 (xception object must pro) 112.29 208.31 P
-0.04 (vide enough information for the error handling mechanism.  Since the er-) 211.18 208.31 P
-0.01 (ror handling mechanism can discriminate between dif) 108 196.31 P
-0.01 (ferent objects of dif) 322.67 196.31 P
-0.01 (ferent types, it is standard) 400.99 196.31 P
(practice to use the type of the e) 108 184.31 T
(xception object to indicate the type of the error that occurred.) 232.54 184.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
( add_if_positive\050i:INT\051 is) 144 280.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    if i < 0 then) 144 271.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       raise "Negative value:"+i+"\134n";) 144 262.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 144 253.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end;) 144 244.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 288.85 129.6 239.1 2 L
V
0.25 H
0 Z
N
489.6 288.85 489.6 239.1 2 L
V
N
129.48 288.98 489.73 288.98 2 L
V
N
129.48 238.98 489.73 238.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 131
%%Page: "132" 132
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(132) 108 710.84 T
8 8 Q
(Exceptions :) 215.58 710.84 T
0 F
(10.1 Thr) 263.72 710.84 T
(o) 291.99 710.84 T
(wing and Catching Exceptions) 297.07 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(10.1.2   Catc) 108 658 T
(hing Exceptions with) 177.25 658 T
7 F
(protect) 300.61 658 T
5 10 Q
0.31 (Exceptions are passed to higher conte) 108 635.33 P
0.31 (xts until a handler is found and the e) 260.19 635.33 P
0.31 (xception is caught.  Ex-) 408.05 635.33 P
0.09 (ceptions are caught using protect statements.  The protect statement surrounds a piece of code, and) 108 623.33 P
0.63 (pro) 108 611.33 P
0.63 (vides an appropriate method of handling an) 121.18 611.33 P
0.63 (y e) 298.67 611.33 P
0.63 (xceptions that might occur when e) 311.1 611.33 P
0.63 (x) 451.58 611.33 P
0.63 (ecuting that) 456.43 611.33 P
(piece of code.) 108 599.33 T
0.09 (When there is an uncaught e) 108 501.33 P
0.09 (xception in a protect statement, the system \336nds the \336rst type speci\336er) 221.89 501.33 P
0.39 (listed in the \324) 108 489.33 P
9 F
0.94 (when) 161.67 489.33 P
5 F
0.39 (\325 lists which is a supertype of the e) 185.67 489.33 P
0.39 (xception object type. The statement list fol-) 327.51 489.33 P
0.46 (lo) 108 477.33 P
0.46 (wing this speci\336er is e) 115.53 477.33 P
0.46 (x) 206.68 477.33 P
0.46 (ecuted and then control passes to the statement follo) 211.53 477.33 P
0.46 (wing the) 423.85 477.33 P
9 F
1.11 (protect) 462 477.33 P
5 F
(statement.) 108 465.33 T
0.41 (In the protect clause, the e) 108 443.33 P
0.41 (xception raised may be referred to by the b) 214.86 443.33 P
0.41 (uilt in e) 389.54 443.33 P
0.41 (xpression) 420.76 443.33 P
9 F
0.98 (\325excep-) 462 443.33 P
0.1 (tion\325) 108 431.33 P
5 8 Q
0.03 (4) 138 435.33 P
5 10 Q
0.04 (, which refers to the e) 142 431.33 P
0.04 (xception object.  The type of the e) 228.69 431.33 P
0.04 (xception object can be used to cat-) 365.46 431.33 P
-0.45 (e) 108 419.33 P
-0.45 (gorize the e) 112.29 419.33 P
-0.45 (xception and to discriminate between e) 157.88 419.33 P
-0.45 (xceptions when the) 311.82 419.33 P
-0.45 (y are actually caught.  In f) 387.97 419.33 P
-0.45 (act,) 489.84 419.33 P
(the) 108 407.33 T
9 F
(when) 122.72 407.33 T
5 F
( clauses may be vie) 146.72 407.33 T
(wed as a) 224.23 407.33 T
9 F
(typecase) 261.16 407.33 T
5 F
( \050see page 90\051 on the e) 309.16 407.33 T
(xception object.) 398.98 407.33 T
4 F
(P) 108 379.33 T
(oints to note) 114.27 379.33 T
5 F
(\245) 108 363.33 T
(No statements may follo) 121.54 363.33 T
(w a) 219.34 363.33 T
9 F
(raise) 236 363.33 T
5 F
(statement in a statement list because the) 272 363.33 T
(y can ne) 431.83 363.33 T
(v) 464.9 363.33 T
(er be) 469.75 363.33 T
(e) 121.54 351.33 T
(x) 125.83 351.33 T
(ecuted.) 130.68 351.33 T
(\245) 108 336.33 T
(If there is no) 121.54 336.33 T
9 F
(else) 174.86 336.33 T
5 F
( clause in a) 198.86 336.33 T
9 F
(protect) 246.07 336.33 T
5 F
( statement, and none of the types in the) 288.07 336.33 T
9 F
(when) 446.94 336.33 T
5 F
( branch-) 470.94 336.33 T
(es matches the type of the e) 121.54 324.33 T
(xception object,  then the e) 231.92 324.33 T
(xception is passed to the ne) 339.53 324.33 T
(xt higher) 449.09 324.33 T
(protect statement) 121.54 312.33 T
4 12 Q
(10.1.3   Usa) 108 271 T
(g) 173.26 271 T
(e to a) 180.71 271 T
(v) 211.87 271 T
(oid) 218.18 271 T
5 10 Q
-0.15 (Exceptions can be signi\336cantly slo) 108 248.33 P
-0.15 (wer than ordinary routine calls, so the) 246.01 248.33 P
-0.15 (y should be a) 396.3 248.33 P
-0.15 (v) 448.68 248.33 P
-0.15 (oided e) 453.48 248.33 P
-0.15 (xcept) 482.34 248.33 P
0.22 (for truly e) 108 236.33 P
0.22 (xceptional \050une) 148.28 236.33 P
0.22 (xpected\051 cases.  Using e) 210.28 236.33 P
0.22 (xceptions to implement normal control \337o) 307.38 236.33 P
0.22 (w may) 476.84 236.33 P
108 146 504 166.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 157.09 240.98 157.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
5 10 Q
0 X
0 0 0 1 0 0 0 K
(4.   In f) 108 139.33 T
(act, you can look at the tail half of the protect as a typecase on the e) 137.06 139.33 T
(xception object.) 407.68 139.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
( protect) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      foo;) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  when $STR then #ERR+"An error in foo!:"+exception.str;) 144 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  when INT then #ERR+"INT error="+exception;) 144 552.67 T
11 F
(-- \325exception\325 of type INT) 360 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  else) 144 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Some other error handling) 168 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  end;) 144 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 587.88 129.6 520.12 2 L
V
0.25 H
0 Z
N
489.6 587.88 489.6 520.12 2 L
V
N
129.48 588 489.73 588 2 L
V
N
129.48 520 489.73 520 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 132
%%Page: "133" 133
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Exceptions :) 247.12 710.84 T
0 F
(10.2) 295.26 710.84 T
(A mor) 312.99 710.84 T
(e ela) 336.24 710.84 T
(bor) 356.08 710.84 T
(ate example) 369.03 710.84 T
6 10 Q
(133) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.4 (be tempting, b) 108 659.33 P
0.4 (ut should be a) 166.09 659.33 P
0.4 (v) 222.91 659.33 P
0.4 (oided. F) 227.71 659.33 P
0.4 (or instance, in the) 260.74 659.33 P
9 F
0.95 (STR_CURSOR) 335.92 659.33 P
5 F
0.4 ( class, we can mak) 395.92 659.33 P
0.4 (e use of) 472.11 659.33 P
(e) 108 647.33 T
(xceptions for parsing. It might be tempting to write code lik) 112.29 647.33 T
(e the follo) 351.34 647.33 T
(wing) 391.64 647.33 T
0.49 (   The abo) 108 540.33 P
0.49 (v) 149.78 540.33 P
0.49 (e code determines whether a boolean is present in the string by trying to read one and) 154.63 540.33 P
0.02 (treating  an error state as e) 108 528.33 P
0.02 (vidence that there is no boolean.  While it is perfectly correct code,   this) 213.42 528.33 P
0.1 (is an e) 108 516.33 P
0.1 (xample of what you should not do.  The implementation of a function should not rely on e) 133.6 516.33 P
0.1 (x-) 495.67 516.33 P
0.04 (ceptions for its normal functioning.  Doing so is e) 108 504.33 P
0.04 (xtremely inef) 307.08 504.33 P
0.04 (\336cient and can result in an unneces-) 360.47 504.33 P
(sarily complicated \337o) 108 492.33 T
(w of control.) 194.41 492.33 T
4 12 Q
(10.1.4   Alternatives to Exceptions) 108 451 T
5 10 Q
0.28 (The alternati) 108 428.33 P
0.28 (v) 158.85 428.33 P
0.28 (e to using e) 163.7 428.33 P
0.28 (xceptions is to use a stick) 210.2 428.33 P
0.28 (y error \337ag in the class, as is done by IEEE e) 313.37 428.33 P
0.28 (x-) 495.67 428.33 P
-0.26 (ceptions and the current) 108 416.33 P
9 F
-0.63 (FILE) 205.25 416.33 P
5 F
-0.26 ( classes. This has problems such as the f) 229.25 416.33 P
-0.26 (act that the outermost error is) 387.84 416.33 P
-0.02 (logged, not the most immediate one, and it is v) 108 404.33 P
-0.02 (ery easy to for) 295.19 404.33 P
-0.02 (get to test for  the error) 352.44 404.33 P
-0.02 (. Ho) 443.98 404.33 P
-0.02 (we) 460.94 404.33 P
-0.02 (v) 472.35 404.33 P
-0.02 (er) 477.2 404.33 P
-0.02 (, this) 484.57 404.33 P
(method has a much lo) 108 392.33 T
(wer o) 195.52 392.33 T
(v) 217.86 392.33 T
(erhead and is suitable in certain cases.) 222.71 392.33 T
108 330.98 504 334 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 332.49 540 332.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(10.2  A more elaborate e) 108 340 T
(xample) 314.82 340 T
5 10 Q
(Consider the follo) 108 311.31 T
(wing routine, which tries to read a boolean v) 179.97 311.31 T
(alue from a string:) 358.3 311.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
( test_bool:BOOL is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    protect) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        current_state ::= save_state;) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        b ::= get_bool;) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        restore_state\050current_state\051;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     when STR_CURSOR_EX then return\050false\051; end;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     return\050true\051;) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end;) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(get_bool\050file_name:STR\051:BOOL is) 144 291.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f:FILE := FILE::open_for_read\050file_name\051;) 156.6 282.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if f.error then) 156.6 273.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(raise #FILE_OPEN_EXC\050file_name\051;) 233.4 273.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 391.8 273.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(s:STR := f.str;  -- Read the file into a string) 156.6 264.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f.close;          -- Close the file) 156.6 255.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res:BOOL;) 156.6 246.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(bool ::= "";) 156.6 237.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i:INT := 0;) 156.6 228.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop until!\050~\050s[i].is_alpha\051 or \050s[i].is_space\051 or i >= s.size\051;) 156.6 219.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(bool := bool + s[i]; i := i + 1;) 171 210.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 201.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(case bool) 156.6 192.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when "true","t","True","T","TRUE" then  return true;) 156.6 183.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when "false","f","False","F","FALSE" then return false;) 156.6 174.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(else) 156.6 165.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(raise #PARSE_BAD_BOOL_EXC\050s\051;) 171 156.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 147.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 138.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 559.12 2 L
V
0.25 H
0 Z
N
489.6 635.88 489.6 559.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 559 489.73 559 2 L
V
N
129.6 299.85 129.6 133.1 2 L
V
N
489.6 299.85 489.6 133.1 2 L
V
N
129.48 299.98 489.73 299.98 2 L
V
N
129.48 132.98 489.73 132.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 133
%%Page: "134" 134
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(134) 108 710.84 T
8 8 Q
(Exceptions :) 229.98 710.84 T
0 F
(10.2 A mor) 278.12 710.84 T
(e ela) 319.11 710.84 T
(bor) 338.95 710.84 T
(ate example) 351.89 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.08 (In the abo) 108 659.33 P
-0.08 (v) 147.69 659.33 P
-0.08 (e routine there are tw) 152.54 659.33 P
-0.08 (o possible errors - either the \336le could not be opened or  it does not) 237.11 659.33 P
-0.44 (contain a v) 108 647.33 P
-0.44 (alid boolean.  The tw) 150.74 647.33 P
-0.44 (o cases can be distinguised at the point  when the e) 233.57 647.33 P
-0.44 (xception is caught) 432.12 647.33 P
(The classes that implement these e) 108 540.33 T
(xceptions can be f) 246.44 540.33 T
(airly simple) 318.82 540.33 T
(The other e) 108 451.33 T
(xception class is v) 153.39 451.33 T
(ery similar) 226.29 451.33 T
(.) 268.79 451.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(protect) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   file_name:STR; ... set to a value) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   b:BOOL := get_bool\050s\051;) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when FILE_OPEN_EXC then #ERR+"Could not) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(open:"+exception.file_name+"\134n";) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when PARSE_BAD_BOOL_EXC then) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    #ERR+"Error in reading boolean:"+exception.str+"\134n";) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class FILE_OPEN_EXC is) 144 520.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly attr str:STR:) 156.6 511.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050file_name:STR\051:SAME is) 156.6 502.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res::=new; res.str := file_name; return res;) 171 493.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 484.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 475.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 559.12 2 L
V
0 Z
N
489.6 635.88 489.6 559.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 559 489.73 559 2 L
V
N
129.6 528.88 129.6 470.12 2 L
V
N
489.6 528.88 489.6 470.12 2 L
V
N
129.48 529 489.73 529 2 L
V
N
129.48 470 489.73 470 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 134
%%Page: "135" 135
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Saf) 265.27 710.84 T
(ety F) 277.07 710.84 T
(eatur) 295.21 710.84 T
(es :) 315.82 710.84 T
0 F
(11.1) 330.78 710.84 T
(Pr) 348.5 710.84 T
(econditions) 355.62 710.84 T
6 10 Q
(135) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Saf) 108 642 S
-0.25 (ety F) 160.35 642 S
-0.25 (eatur) 240.73 642 S
-0.25 (es) 332.26 642 S
5 10 Q
0.15 (Methods de\336nitions may include optional pre-  and post-conditions.  T) 108 517.33 P
0.15 (ogether with \324) 391.18 517.33 P
9 F
0.36 (assert) 447.58 517.33 P
5 F
0.15 (\325 and) 483.58 517.33 P
-0.1 (these features allo) 108 505.33 P
-0.1 (w the earnest programmer to annotate the intention of code.  The Sather compiler) 179.76 505.33 P
0.59 (pro) 108 493.33 P
0.59 (vides f) 121.18 493.33 P
0.59 (acilities for turning on or of) 148.61 493.33 P
0.59 (f the runtime checking these safety features imply) 262.14 493.33 P
0.59 (.  Classes) 465.32 493.33 P
-0.03 (may also de\336ne a routine named \324) 108 481.33 P
9 F
-0.07 (invariant) 243.35 481.33 P
5 F
-0.03 (\325, which is a post condition that applies to all public) 297.35 481.33 P
(methods.) 108 469.33 T
-0.22 (These safety features are associated with the notion of programming contracts.  The precondition of) 108 447.33 P
-0.49 (a method is the contract that the method requires the caller to ful\336ll.  It is a statement of the condition) 108 435.33 P
-0.36 (of the w) 108 423.33 P
-0.36 (orld that the method needs to \336nd, in order to w) 139.96 423.33 P
-0.36 (ork correctly) 327.1 423.33 P
-0.36 (. The postcondition is a contract) 377.47 423.33 P
-0.34 (that the method guarantees, if its precondition has been met.  It is a statement of the state the method) 108 411.33 P
-0.26 (will lea) 108 399.33 P
-0.26 (v) 137.26 399.33 P
-0.26 (e the w) 142.11 399.33 P
-0.26 (orld in, when it is \336nished e) 170.37 399.33 P
-0.26 (x) 280.06 399.33 P
-0.26 (ecuting.  These programming contracts are v) 284.91 399.33 P
-0.26 (ery impor-) 461.77 399.33 P
(tant in the creation of rob) 108 387.33 T
(ust, reusable code.) 209.17 387.33 T
-0.29 (In addition to pro) 108 365.33 P
-0.29 (viding a le) 176.7 365.33 P
-0.29 (v) 218.09 365.33 P
-0.29 (el of checking, these safety features are also an in) 222.94 365.33 P
-0.29 (v) 418.2 365.33 P
-0.29 (aluable form of doc-) 422.95 365.33 P
0.34 (umentation.  Since preconditions and postconditions must actually e) 108 353.33 P
0.34 (x) 383.09 353.33 P
0.34 (ecute,  the) 387.94 353.33 P
0.34 (y can be trusted to) 429.3 353.33 P
-0.62 (be accurate and up-to-date, unlik) 108 341.33 P
-0.62 (e method comments which may easily f) 236.79 341.33 P
-0.62 (all out of sync with the code.) 391.87 341.33 P
108 279.98 504 283 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 281.49 540 281.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(11.1  Preconditions) 108 289 T
5 10 Q
0.49 (A precondition states the assumptions that a method mak) 108 260.31 P
0.49 (es.  It is the contract that the caller must) 340.15 260.31 P
0.03 (full\336l in order for the routine to w) 108 248.31 P
0.03 (ork properly) 243.91 248.31 P
0.03 (.  Preconditions frequently include checks that an ar-) 292.99 248.31 P
(gument is non-zero or non-v) 108 236.31 T
(oid.) 221.67 236.31 T
-0.17 (The optional \324) 108 214.31 P
9 F
-0.4 (pre) 164.33 214.31 P
5 F
-0.17 (\325 construct of method de\336nitions contains a boolean e) 182.33 214.31 P
-0.17 (xpression which must e) 395.28 214.31 P
-0.17 (v) 488.7 214.31 P
-0.17 (al-) 493.45 214.31 P
0.07 (uate to) 108 202.31 P
9 F
0.17 (true) 137.58 202.31 P
5 F
0.07 ( whene) 161.58 202.31 P
0.07 (v) 190 202.31 P
0.07 (er the method is called; it is a f) 194.85 202.31 P
0.07 (atal error if it e) 318.64 202.31 P
0.07 (v) 378.66 202.31 P
0.07 (aluates to) 383.41 202.31 P
9 F
0.17 (false) 424.1 202.31 P
5 F
0.07 (.The e) 454.1 202.31 P
0.07 (xpres-) 479.01 202.31 P
0.52 (sion may refer to) 108 190.31 P
9 F
1.24 (self) 180.6 190.31 P
5 F
0.52 ( and to the routine\325) 204.6 190.31 P
0.52 (s ar) 282.22 190.31 P
0.52 (guments.  F) 296.71 190.31 P
0.52 (or iterators, pre and post conditions are) 344.55 190.31 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 135
%%Page: "136" 136
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(136) 108 710.84 T
8 8 Q
(Saf) 246.64 710.84 T
(ety F) 258.44 710.84 T
(eatur) 276.57 710.84 T
(es :) 297.19 710.84 T
0 F
(11.2 P) 312.14 710.84 T
(ostconditions) 334.12 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.08 (check) 108 659.33 P
-0.08 (ed before and after e) 131.22 659.33 P
-0.08 (v) 212.85 659.33 P
-0.08 (ery in) 217.7 659.33 P
-0.08 (v) 240.27 659.33 P
-0.08 (ocation  of the iterator \050not just the \336rst or last time the iterator is) 245.07 659.33 P
(called\051.) 108 647.33 T
0.13 (Note that it is usually) 108 504.33 P
10 F
0.13 ( not) 196.73 504.33 P
5 F
0.13 ( appropriate to place conditions on the internal state in the precondition.) 214.78 504.33 P
0.01 (This is an inappropriate conduct, since it may be impossible for the caller to determine whether the) 108 492.33 P
(conduct can be properly ful\336lled.) 108 480.33 T
-0.32 (The test on \325) 108 436.33 P
-0.32 (start\325 is actually v) 156.76 436.33 P
-0.32 (erifying something about the internal state of the object, and has noth-) 227.02 436.33 P
0.26 (ing to do with the caller of the routine.  T) 108 424.33 P
0.26 (ests such as the one abo) 275.12 424.33 P
0.26 (v) 371.51 424.33 P
0.26 (e are more appropriately placed) 376.36 424.33 P
(in assertions.) 108 412.33 T
108 350.98 504 354 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 352.49 540 352.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(11.2  P) 108 360 T
(ostconditions) 164.32 360 T
5 10 Q
0.09 (Post conditions state what a method guarantees to the caller) 108 331.31 P
0.09 (.  It is the method\325) 346.83 331.31 P
0.09 (s end of the contract.) 420.05 331.31 P
(Post conditions are also stated as an optional initial construct in a method.) 108 319.31 T
1.15 (The optional \324) 108 297.31 P
9 F
2.77 (post) 166.97 297.31 P
5 F
1.15 (\325 construct of method de\336nitions contains a boolean e) 190.97 297.31 P
1.15 (xpression which must) 414.47 297.31 P
-0.2 (e) 108 285.31 P
-0.2 (v) 112.19 285.31 P
-0.2 (aluate to true whene) 116.94 285.31 P
-0.2 (v) 196.89 285.31 P
-0.2 (er the method returns; it is a f) 201.74 285.31 P
-0.2 (atal error if it e) 318.26 285.31 P
-0.2 (v) 377.18 285.31 P
-0.2 (aluates to) 381.93 285.31 P
9 F
-0.49 (false) 422.08 285.31 P
5 F
-0.2 (. The e) 452.08 285.31 P
-0.2 (xpres-) 479.01 285.31 P
(sion may refer to) 108 273.31 T
9 F
(self) 178.54 273.31 T
5 F
( and to the method\325) 202.54 273.31 T
(s ar) 279.76 273.31 T
(guments.) 293.74 273.31 T
0.14 (It is frequently useful to refer to the v) 108 184.31 P
0.14 (alues of the ar) 258.8 184.31 P
0.14 (guments) 315.4 184.31 P
10 F
0.14 (befor) 351.93 184.31 P
0.14 (e) 372.67 184.31 P
5 F
0.14 ( the call, as well as the result of) 377.11 184.31 P
0.23 (the method call.  A problem arises because the initial ar) 108 172.31 P
0.23 (gument v) 332.61 172.31 P
0.23 (alues are no longer kno) 370.1 172.31 P
0.23 (wn by the) 464.09 172.31 P
-0.44 (time the method terminates, since the) 108 160.31 P
-0.44 (y may ha) 255.07 160.31 P
-0.44 (v) 290.65 160.31 P
-0.44 (e been arbitrarily modi\336ed.  Also, since the post con-) 295.5 160.31 P
0.06 (dition is outside the scope of the method body) 108 148.31 P
0.06 (, it cannot easily  refer to v) 292.29 148.31 P
0.06 (alues which are computed) 399.67 148.31 P
0.36 (before the method e) 108 136.31 P
0.36 (x) 188.64 136.31 P
0.36 (ecutes.  The solution to this problem consists of using) 193.49 136.31 P
9 F
0.87 (result) 414.62 136.31 P
5 F
0.36 (e) 457.49 136.31 P
0.36 (xpressions) 461.78 136.31 P
-0.29 (which pro) 108 124.31 P
-0.29 (vide the return v) 147.83 124.31 P
-0.29 (alue of the method and) 212.53 124.31 P
9 F
-0.7 (initial) 305.23 124.31 P
5 F
-0.29 (e) 352.53 124.31 P
-0.29 (xpressions which are e) 356.82 124.31 P
-0.29 (v) 446.51 124.31 P
-0.29 (aluated at the) 451.26 124.31 P
(time the method is in) 108 112.31 T
(v) 192.05 112.31 T
(ok) 196.85 112.31 T
(ed.) 206.75 112.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class POSITIVE_INTERVAL is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly attr start, finish:INT;) 156.6 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050start, finish:INT\051) 156.6 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Ensure that the interval is positive on positive numbers) 171 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(pre start > 0 and finish > 0 and finish-start >= 0) 171 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is) 156.6 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res ::= new;) 171 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.start := start;) 171 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.finish := finish;) 171 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 171 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class POSITIVE_INTERVAL) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(move_by\050i:INT\051 pre start > 0  is ...) 144 460.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class VECTOR is) 144 253.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 156.6 244.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(norm:FLT; -- norm of the vector) 156.6 235.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(normalize post norm = 1.0 is ...) 156.6 217.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- Normalize the vector. The norm of the result must be 1.0) 144 208.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 523.12 2 L
V
0.25 H
0 Z
N
489.6 635.88 489.6 523.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 523 489.73 523 2 L
V
N
129.6 261.85 129.6 203.1 2 L
V
N
489.6 261.85 489.6 203.1 2 L
V
N
129.48 261.98 489.73 261.98 2 L
V
N
129.48 202.98 489.73 202.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 136
%%Page: "137" 137
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Saf) 272.67 710.84 T
(ety F) 284.47 710.84 T
(eatur) 302.6 710.84 T
(es :) 323.22 710.84 T
0 F
(11.3) 338.17 710.84 T
(Asser) 355.9 710.84 T
(tions) 375.8 710.84 T
6 10 Q
(137) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(11.2.1) 108 658 T
7 F
(initial) 151.37 658 T
4 F
( e) 178.7 658 T
(xpressions) 188.53 658 T
1 10 Q
-0.36 (initial expressions) 108 635.33 P
5 F
-0.36 ( may only appear in the) 180.71 635.33 P
9 F
-0.87 (post) 275.19 635.33 P
5 F
-0.36 ( e) 299.19 635.33 P
-0.36 (xpressions of methods. The ar) 305.61 635.33 P
-0.36 (gument to the initial) 424.25 635.33 P
-0.15 (e) 108 591.33 P
-0.15 (xpression must be an e) 112.29 591.33 P
-0.15 (xpression with a return v) 202.62 591.33 P
-0.15 (alue and must not itself  contain) 301.18 591.33 P
9 F
-0.37 (initial) 430.37 591.33 P
5 F
-0.15 ( e) 472.37 591.33 P
-0.15 (xpres-) 479.01 591.33 P
-0.11 (sions. When a routine is called or an iterator resumes, it e) 108 579.33 P
-0.11 (v) 336.2 579.33 P
-0.11 (aluates each) 340.95 579.33 P
9 F
-0.27 (initial) 391.82 579.33 P
5 F
-0.11 (e) 439.55 579.33 P
-0.11 (xpression from) 443.84 579.33 P
-0.56 (left to right. When the postcondition is check) 108 567.33 P
-0.56 (ed at the end, each) 284.49 567.33 P
9 F
-1.35 (initial) 358.32 567.33 P
5 F
-0.56 ( e) 400.32 567.33 P
-0.56 (xpression returns its pre-) 406.54 567.33 P
(computed v) 108 555.33 T
(alue.) 154.69 555.33 T
4 12 Q
(11.2.2) 108 514 T
7 F
(result) 151.37 514 T
4 F
( e) 180.71 514 T
(xpressions) 190.54 514 T
5 10 Q
0.27 (Result e) 108 491.33 P
0.27 (xpressions are essentially a w) 140.62 491.33 P
0.27 (ay to refer to the return v) 259.92 491.33 P
0.27 (alue of a method in a postcondition) 361.27 491.33 P
0.09 (\050the post condition is outside the scope of the routine and hence cannot access v) 108 479.33 P
0.09 (ariables in the rou-) 428.46 479.33 P
(tine\051.) 108 467.33 T
-0.59 (Result e) 108 423.33 P
-0.59 (xpressions may only appear within the postconditions of methods that ha) 139.76 423.33 P
-0.59 (v) 425.35 423.33 P
-0.59 (e return v) 430.2 423.33 P
-0.59 (alues and) 467.1 423.33 P
-0.02 (may not appear within) 108 411.33 P
9 F
-0.05 (initial) 200.12 411.33 P
5 F
-0.02 ( e) 242.12 411.33 P
-0.02 (xpressions. A) 248.89 411.33 P
9 F
-0.05 (result) 305.79 411.33 P
5 F
-0.02 ( e) 341.79 411.33 P
-0.02 (xpression returns the v) 348.56 411.33 P
-0.02 (alue returned by) 439.06 411.33 P
0.59 (the routine or yielded by the iterator) 108 399.33 P
0.59 (. The type of a) 255.4 399.33 P
9 F
1.41 (result) 318.89 399.33 P
5 F
0.59 (e) 362.3 399.33 P
0.59 (xpression is the return type of the) 366.6 399.33 P
(method in which it appears \050) 108 387.33 T
9 F
(INT) 222.15 387.33 T
5 F
(, in the abo) 239.41 387.33 T
(v) 283.7 387.33 T
(e e) 288.55 387.33 T
(xample\051.) 299.78 387.33 T
4 12 Q
(11.2.3   Example) 108 346 T
5 10 Q
0.07 (The abo) 108 323.33 P
0.07 (v) 140.41 323.33 P
0.07 (e routine maintains an \050al) 145.26 323.33 P
0.07 (w) 247.08 323.33 P
0.07 (ays positi) 254.2 323.33 P
0.07 (v) 292.08 323.33 P
0.07 (e\051 running sum in \325) 296.93 323.33 P
0.07 (sum\325. Only positi) 373.31 323.33 P
0.07 (v) 442.92 323.33 P
0.07 (e numbers are) 447.77 323.33 P
(added to the sum, and the result must al) 108 311.33 T
(w) 266.5 311.33 T
(ays be bigger than the ar) 273.62 311.33 T
(gument.) 371.47 311.33 T
108 182.98 504 186 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 184.49 540 184.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(11.3  Asser) 108 192 T
(tions) 203.42 192 T
5 10 Q
0.26 (Assertions are not part of the interf) 108 163.31 P
0.26 (ace to a routine.  Rather) 249.42 163.31 P
0.26 (, the) 345.85 163.31 P
0.26 (y are an internal consistenc) 363.18 163.31 P
0.26 (y check) 472.92 163.31 P
(within a piece of code, to ensure that the computation is proceeding as e) 108 151.31 T
(xpected.) 396.13 151.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(add\050a:INT\051:INT post initial\050a\051>result is ..) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum:INT) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(post result > 5 is .) 182.4 447.67 T
11 F
(-- Means that the value return must be > 5) 283.2 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(class CALCULATOR is) 144 291.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly attr sum:INT;  -- Always kept positive) 156.6 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(add_positive\050x:INT\051:INT pre x > 0 post result >= initial\050x\051 is) 156.6 264.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         return sum + x; end;) 144 255.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 299.88 129.6 241.12 2 L
V
0.25 H
0 Z
N
489.6 299.88 489.6 241.12 2 L
V
N
129.48 300 489.73 300 2 L
V
N
129.48 241 489.73 241 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 137
%%Page: "138" 138
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(138) 108 710.84 T
8 8 Q
(Saf) 255.99 710.84 T
(ety F) 267.79 710.84 T
(eatur) 285.93 710.84 T
(es :) 306.54 710.84 T
0 F
(11.4 In) 321.5 710.84 T
(v) 345.75 710.84 T
(ar) 349.94 710.84 T
(iants) 357.98 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(11.3.1) 108 658 T
7 F
(assert) 151.37 658 T
4 F
(statements) 187.38 658 T
1 10 Q
0.61 (assert statements) 108 635.33 P
5 F
0.61 ( specify a boolean e) 177.77 635.33 P
0.61 (xpression that must e) 259.49 635.33 P
0.61 (v) 345.8 635.33 P
0.61 (aluate to) 350.55 635.33 P
9 F
1.47 (true) 388.44 635.33 P
5 F
0.61 (; otherwise it is a f) 412.44 635.33 P
0.61 (atal) 489.56 635.33 P
(error) 108 623.33 T
(.) 126.88 623.33 T
0.22 (In the abo) 108 489.33 P
0.22 (v) 148.28 489.33 P
0.22 (e piece of code, we e) 153.13 489.33 P
0.22 (xpect the class to only be storing posti) 237.94 489.33 P
0.22 (v) 392.28 489.33 P
0.22 (e v) 397.13 489.33 P
0.22 (alues in the array \325arr\325 .) 409.04 489.33 P
-0.56 (T) 108 477.33 P
-0.56 (o double check this, when adding the elements together) 113.31 477.33 P
-0.56 (, we check whether each element is positi) 330.32 477.33 P
-0.56 (v) 492.21 477.33 P
-0.56 (e.) 497.06 477.33 P
108 415.98 504 419 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 417.49 540 417.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(11.4  In) 108 425 T
(v) 168.32 425 T
(ariants) 177.97 425 T
5 10 Q
-0.06 (A class in) 108 396.31 P
-0.06 (v) 146.92 396.31 P
-0.06 (ariant is a condition that should ne) 151.67 396.31 P
-0.06 (v) 288.84 396.31 P
-0.06 (er be violated in an) 293.69 396.31 P
-0.06 (y object, after it has been created.) 369.95 396.31 P
0.2 (In) 108 384.31 P
0.2 (v) 115.93 384.31 P
0.2 (ariants ha) 120.68 384.31 P
0.2 (v) 159.29 384.31 P
0.2 (e not pro) 164.13 384.31 P
0.2 (v) 199.94 384.31 P
0.2 (en to be as widely used as pre- and post- conditions, which are quite ubiq-) 204.79 384.31 P
(uitous in Sather code.) 108 372.31 T
4 12 Q
(11.4.1    The) 108 330.98 T
7 F
(invariant) 182.71 330.98 T
4 F
( r) 234.73 330.98 T
(outine) 242.5 330.98 T
5 10 Q
0.02 (If a routine with the signature \324) 108 308.31 P
9 F
0.05 (invariant:BOOL) 232.54 308.31 P
5 F
0.02 (\325, appears in a class, it de\336nes a class in) 315.62 308.31 P
0.02 (v) 473.98 308.31 P
0.02 (ariant.) 478.73 308.31 P
0.17 (It is a f) 108 296.31 P
0.17 (atal error for it to e) 136.47 296.31 P
0.17 (v) 212.91 296.31 P
0.17 (aluate to) 217.66 296.31 P
9 F
0.42 (false) 254.66 296.31 P
5 F
0.17 ( after an) 284.67 296.31 P
0.17 (y public method of the class returns, yields, or) 317.62 296.31 P
(quits.) 108 284.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(private attr arr:ARRAY{INT};) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum_of_elts is) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 156.6 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum:INT := 0;) 156.6 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(loop e ::= arr.elt!;) 156.6 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(assert e > 0;) 171 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(sum := sum + e;) 171 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return sum;) 156.6 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 508.12 2 L
V
0.25 H
0 Z
N
489.6 611.88 489.6 508.12 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 508 489.73 508 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 138
%%Page: "139" 139
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Saf) 273.13 710.84 T
(ety F) 284.93 710.84 T
(eatur) 303.06 710.84 T
(es :) 323.68 710.84 T
0 F
(11.4) 338.63 710.84 T
(In) 356.36 710.84 T
(v) 362.89 710.84 T
(ar) 367.08 710.84 T
(iants) 375.11 710.84 T
6 10 Q
(139) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.01 (Consider a class with a list \050we use the library class A_LIST\051 whose size must al) 108 659.33 P
0.01 (w) 431.03 659.33 P
0.01 (ays be at least 1.) 438.15 659.33 P
-0.01 (Such a situtation could arise  if the array usually contains the same sort of elements and we w) 108 647.33 P
-0.01 (ant to) 481.51 647.33 P
(use the \336rst element of the array as a prototypical element\051) 108 635.33 T
0.06 (If the \325) 108 483.33 P
0.06 (delete_last\325 operation is called on the last element, then the assertion will be violated and an) 134.83 483.33 P
(error will result.) 108 471.33 T
0.13 (The in) 108 391.33 P
0.13 (v) 133.56 391.33 P
0.13 (ariant is check) 138.31 391.33 P
0.13 (ed at the end of e) 196.24 391.33 P
0.13 (v) 265.23 391.33 P
0.13 (ery public method.  Ho) 270.08 391.33 P
0.13 (we) 362.85 391.33 P
0.13 (v) 374.26 391.33 P
0.13 (er) 379.11 391.33 P
0.13 (, the in) 386.48 391.33 P
0.13 (v) 413.84 391.33 P
0.13 (ariant  is not check) 418.59 391.33 P
0.13 (ed) 494.56 391.33 P
(after a pri) 108 379.33 T
(v) 146.62 379.33 T
(ate routine.  If we ha) 151.37 379.33 T
(v) 233.92 379.33 T
(e the additional routines) 238.77 379.33 T
(No) 108 263.33 T
(w we can call \325) 119.97 263.33 T
(delete_and_add\325) 180 263.33 T
0.16 (The pri) 108 201.33 P
0.16 (v) 137.07 201.33 P
0.16 (ate call to \325internal_delete_last\325) 141.82 201.33 P
10 F
0.16 (does) 274 201.33 P
5 F
0.16 ( violate the in) 292.33 201.33 P
0.16 (v) 347.14 201.33 P
0.16 (ariant, b) 351.89 201.33 P
0.16 (ut it is not check) 384.62 201.33 P
0.16 (ed, since it is) 451.29 201.33 P
(a pri) 108 189.33 T
(v) 125.8 189.33 T
(ate routine.) 130.55 189.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class PROTO_LIST is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr l:A_LIST{FOO};) 156.6 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050first_elt:FOO\051:SAME is) 156.6 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res ::= new;) 171 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.l := #;) 171 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res.l.append\050first_elt\051;) 171 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 171 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 156.6 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(invariant:BOOL is return l.size > 0 end;) 156.6 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(delete_last:FOO is) 156.6 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return l.delete_elt\050l.size-1\051;) 252.6 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 401.4 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(proto:FOO := #;   -- Some FOO object) 144 451.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:PROTO_LIST := #\050FOO\051;) 144 442.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(last :FOO := a.delete_last;) 144 433.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- At runtime, an invariant violation will occur) 185.4 424.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- for trying to remove the last element.) 181.8 415.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(delete_and_add is) 144 359.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(f :FOO) 230.4 359.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(res ::= internal_delete_last;) 156.6 350.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(l.append\050res\051;) 156.6 341.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return res;) 156.6 332.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 323.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private internal_delete_last:FOO is) 144 305.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return l.delete_elt\050l.size-1\051;) 156.6 296.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 287.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(proto:FOO := #;) 144 243.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:PROTO_LIST := #\050FOO\051;) 144 234.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(last:FOO := a.delete_and_add;  -- does not violate the class invariant) 144 225.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 502.12 2 L
V
0 Z
N
489.6 623.88 489.6 502.12 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 502 489.73 502 2 L
V
N
129.6 459.88 129.6 410.13 2 L
V
N
489.6 459.88 489.6 410.13 2 L
V
N
129.48 460 489.73 460 2 L
V
N
129.48 410 489.73 410 2 L
V
N
129.6 367.88 129.6 282.13 2 L
V
N
489.6 367.88 489.6 282.13 2 L
V
N
129.48 368 489.73 368 2 L
V
N
129.48 282 489.73 282 2 L
V
N
129.6 251.88 129.6 220.13 2 L
V
N
489.6 251.88 489.6 220.13 2 L
V
N
129.48 252 489.73 252 2 L
V
N
129.48 220 489.73 220 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 139
%%Page: "140" 140
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(140) 108 710.84 T
8 8 Q
(Saf) 255.99 710.84 T
(ety F) 267.79 710.84 T
(eatur) 285.93 710.84 T
(es :) 306.54 710.84 T
0 F
(11.4 In) 321.5 710.84 T
(v) 345.75 710.84 T
(ar) 349.94 710.84 T
(iants) 357.98 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 140
%%Page: "141" 141
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Built-in classes :) 252.96 710.84 T
0 F
(12.1) 313.08 710.84 T
(Fundamental Classes) 330.81 710.84 T
6 10 Q
(141) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Built-in classes) 108 642 S
5 10 Q
0.5 (This section pro) 108 517.33 P
0.5 (vides a short description of classes that are a part of e) 173.28 517.33 P
0.5 (v) 392.06 517.33 P
0.5 (ery Sather implementation) 396.91 517.33 P
0.67 (and which may not be modi\336ed. The detailed semantics and precise interf) 108 505.33 P
0.67 (ace are speci\336ed in the) 410.23 505.33 P
(class library documentation.) 108 493.33 T
108 431.98 504 435 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 433.49 540 433.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(12.1  Fundamental Classes) 108 441 T
5 10 Q
0.15 (There are a handful of classes that are specially recognized by the compiler and  are implicitly and) 108 412.31 P
(e) 108 400.31 T
(xplicitly used in most Sather code.) 112.29 400.31 T
4 12 Q
(12.1.1) 108 358.98 T
7 F
($OB) 151.37 358.98 T
9 10 Q
0.83 (\324$OB\325) 108 336.31 P
5 F
0.35 ( is automatically a supertype of e) 138 336.31 P
0.35 (v) 272.04 336.31 P
0.35 (ery type. V) 276.89 336.31 P
0.35 (ariables declared to be of  this type may hold) 321.18 336.31 P
(an) 108 324.31 T
(y object. It has no features.) 117.29 324.31 T
4 12 Q
(12.1.2   Arra) 108 282.98 T
(y suppor) 175.8 282.98 T
(t) 226.72 282.98 T
5 10 Q
-0.18 (Sather objects may ha) 108 260.31 P
-0.18 (v) 195.3 260.31 P
-0.18 (e an array portion, which is speci\336ed by including  either the primiti) 200.15 260.31 P
-0.18 (v) 470.19 260.31 P
-0.18 (e refer-) 475.04 260.31 P
(ence of v) 108 248.31 T
(alue array) 144.4 248.31 T
(\245) 108 230.31 T
9 F
(\324AREF{T}\325) 121.54 230.31 T
5 F
( is a reference array class. An) 175.54 230.31 T
(y reference class which includes it obtains an array) 293.39 230.31 T
(of elements of type) 121.54 218.31 T
9 F
(T) 200.97 218.31 T
5 F
( in addition to an) 206.97 218.31 T
(y attrib) 274.6 218.31 T
(utes it has de\336ned. In such classes,) 303.01 218.31 T
9 F
(new) 444.38 218.31 T
5 F
(has a) 468.38 218.31 T
(single inte) 121.54 206.31 T
(ger ar) 162.78 206.31 T
(gument that speci\336es the size of the array portion. It de\336nes routines and iters) 185.64 206.31 T
(named: \324) 121.54 194.31 T
9 F
(asize) 156.81 194.31 T
5 F
(\325, \324) 186.81 194.31 T
9 F
(aget) 198.47 194.31 T
5 F
(\325, \324) 222.47 194.31 T
9 F
(aset) 234.13 194.31 T
5 F
(\325, \324) 258.13 194.31 T
9 F
(aclear) 269.79 194.31 T
5 F
(\325, \324) 305.79 194.31 T
9 F
(acopy) 317.45 194.31 T
5 F
(\325, \324) 347.45 194.31 T
9 F
(aelt!) 359.11 194.31 T
5 F
(\325, \324) 389.11 194.31 T
9 F
(aset!) 400.77 194.31 T
5 F
(\325, and \324) 430.77 194.31 T
9 F
(aind!) 459.37 194.31 T
5 F
(\325.) 489.37 194.31 T
(Array indices start at zero.) 121.54 182.31 T
(\245) 108 167.31 T
(\324) 121.54 167.31 T
9 F
(ARRAY{T}) 124.87 167.31 T
5 F
(\325 includes from \324) 172.87 167.31 T
9 F
(AREF) 239.8 167.31 T
5 F
(\325 and de\336nes general purpose array objects. The) 263.8 167.31 T
(y may be) 455.26 167.31 T
(directly constructed by array  creation e) 121.54 155.31 T
(xpressions.) 280.23 155.31 T
(\245) 108 140.31 T
(\324) 121.54 140.31 T
9 F
(AVAL{T}) 124.87 140.31 T
5 F
(\325 is the immutable class analog of \324) 166.87 140.31 T
9 F
(AREF) 307.13 140.31 T
5 F
(\325. Classes which include \324) 331.13 140.31 T
9 F
(AVAL) 434.17 140.31 T
5 F
(\325 must de-) 457.25 140.31 T
(\336ne) 121.54 128.31 T
9 F
(asize) 139.04 128.31 T
5 F
( as an inte) 169.04 128.31 T
(ger constant which determines the size of the array portion.) 209.16 128.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 141
%%Page: "142" 142
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(142) 108 710.84 T
8 8 Q
(Built-in classes :) 265.31 710.84 T
0 F
(12.2 T) 325.43 710.84 T
(uples) 346.2 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(12.2  T) 108 654 T
(uples) 162.41 654 T
5 10 Q
0.08 (T) 108 625.31 P
0.08 (uples are not really a fundamental class, b) 113.66 625.31 P
0.08 (ut are  commonly  used for a v) 281.75 625.31 P
0.08 (ery fundamental purpose) 404.42 625.31 P
(- multiple return v) 108 613.31 T
(alues.) 180.8 613.31 T
0.13 (\324) 108 591.31 P
9 F
0.32 (TUP) 111.33 591.31 P
5 F
0.13 (\325 names a set of parameterized immutable types called tuples, one for each number of param-) 129.33 591.31 P
-0.48 (eters. Each has as man) 108 579.31 P
-0.48 (y attrib) 196.17 579.31 P
-0.48 (utes as parameters and the) 224.1 579.31 P
-0.48 (y are named \324) 326.98 579.31 P
9 F
-1.16 (t1) 380.23 579.31 P
5 F
-0.48 (\325, \324) 392.23 579.31 P
9 F
-1.16 (t2) 403.41 579.31 P
5 F
-0.48 (\325, etc. Each is declared) 415.41 579.31 P
0.44 (by the type of the corresponding parameter \050) 108 567.31 P
10 F
0.44 (e) 289.07 567.31 P
0.44 (.g) 293.36 567.31 P
0.44 (.) 300.71 567.31 P
5 F
0.44 ( \324) 303.21 567.31 P
9 F
1.05 (TUP{INT,FLT}) 309.47 567.31 P
5 F
0.44 (\325 has attrib) 381.47 567.31 P
0.44 (utes \324) 424.92 567.31 P
9 F
1.05 (t1:INT) 447.29 567.31 P
5 F
0.44 (\325 and) 483.29 567.31 P
(\324) 108 555.31 T
9 F
(t2:FLT) 111.33 555.31 T
5 F
(\325\051. It de\336nes \324) 147.33 555.31 T
9 F
(create) 201.76 555.31 T
5 F
(\325 with an ar) 237.76 555.31 T
(gument corresponding to each attrib) 283.4 555.31 T
(ute.) 427.62 555.31 T
108 493.95 504 496.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 495.46 540 495.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(12.3  The) 108 502.98 T
7 F
(SYS) 190.04 502.98 T
4 F
( Class) 226.06 502.98 T
9 10 Q
(SYS) 108 474.29 T
5 F
( de\336nes a number of routines for accessing system information:) 126 474.29 T
(Routine) 150.29 446.29 T
(Description) 361.5 446.29 T
9 F
(is_eq\050ob1, ob2:$OB\051:BOOL) 93.3 427.29 T
5 F
-0.54 (T) 250.96 427.29 P
-0.54 (ests tw) 256.37 427.29 P
-0.54 (o objects for equality) 283.24 427.29 P
-0.54 (.  If the ar) 365.69 427.29 P
-0.54 (guments are of dif) 402.52 427.29 P
-0.54 (ferent type,) 473.7 427.29 P
-0.57 (it returns \324) 250.96 415.29 P
9 F
-1.36 (false) 291.49 415.29 P
5 F
-0.57 (\325.  If both objects are immutable, this is a recursi) 321.49 415.29 P
-0.57 (v) 509.41 415.29 P
-0.57 (e) 514.26 415.29 P
0.32 (test on the ar) 250.96 403.29 P
0.32 (guments\325 attrib) 303.14 403.29 P
0.32 (utes.  If the) 364.09 403.29 P
0.32 (y are reference types, it re-) 409.91 403.29 P
-0.28 (turns \324) 250.96 391.29 P
9 F
-0.68 (true) 276.51 391.29 P
5 F
-0.28 (\325 if the ar) 300.51 391.29 P
-0.28 (guments are the same object.  It is a f) 336.41 391.29 P
-0.28 (atal error) 482.62 391.29 P
(to call with e) 250.96 379.29 T
(xternal, closure, or v) 302.75 379.29 T
(oid reference ar) 385.03 379.29 T
(guments.) 447.59 379.29 T
9 F
(is_lt\050ob1, ob2:$OB\051:BOOL) 93.3 362.29 T
5 F
0.29 (De\336nes an arbitrary total order on objects.  This ne) 250.96 362.29 P
0.29 (v) 457.18 362.29 P
0.29 (er returns true) 462.03 362.29 P
-0.1 (if \324) 250.96 350.29 P
9 F
-0.24 (is_eq) 262.8 350.29 P
5 F
-0.1 (\325 w) 292.8 350.29 P
-0.1 (ould return true with the same ar) 305.66 350.29 P
-0.1 (guments.  It is a f) 435.42 350.29 P
-0.1 (atal) 504.26 350.29 P
(error to call with e) 250.96 338.29 T
(xternal, closure, or v) 324.68 338.29 T
(oid reference ar) 406.96 338.29 T
(guments.) 469.52 338.29 T
9 F
(hash\050ob:$OB\051:INT) 93.3 321.29 T
5 F
-0.19 (De\336nes an arbitrary hash function.  F) 250.96 321.29 P
-0.19 (or reference ar) 398.83 321.29 P
-0.19 (guments, this is) 456.57 321.29 P
-0.4 (a hash of the pointer; for immutable types, a recursi) 250.96 309.29 P
-0.4 (v) 453.79 309.29 P
-0.4 (e hash of all at-) 458.64 309.29 P
-0.05 (trib) 250.96 297.29 P
-0.05 (utes.  Hash v) 264.65 297.29 P
-0.05 (alues for tw) 315.92 297.29 P
-0.05 (o objects are guaranteed to be identical) 362.93 297.29 P
(when \324is_eq\325 w) 250.96 285.29 T
(ould return true, b) 312.51 285.29 T
(ut the con) 384.52 285.29 T
(v) 423.56 285.29 T
(erse is not true.) 428.41 285.29 T
9 F
(type\050ob:$OB\051:INT) 93.3 268.29 T
5 F
(Returns the concrete type of an object encoded as an \324) 250.96 268.29 T
9 F
(INT) 467.01 268.29 T
5 F
(\325.) 485.01 268.29 T
9 F
(str_for_type\050i:INT\051:STR) 93.3 251.29 T
5 F
0.33 (Returns a string representation associated with the inte) 250.96 251.29 P
0.33 (ger) 471.67 251.29 P
0.33 (.  Useful) 483.89 251.29 P
(for deb) 250.96 239.29 T
(ugging in combination with \324) 279.36 239.29 T
9 F
(type) 396.03 239.29 T
5 F
(\325 abo) 420.03 239.29 T
(v) 440.15 239.29 T
(e.) 445 239.29 T
9 F
(destroy\050ob:$OB\051) 93.3 222.29 T
5 F
-0.18 (Explicitly deallocates an object. Sather is g) 250.96 222.29 P
-0.18 (arbage collected and ca-) 422.33 222.29 P
1.45 (sual use of \324) 250.96 210.29 P
9 F
3.48 (destroy) 303.91 210.29 P
5 F
1.45 (\325 is discouraged.  Sather implementations) 345.91 210.29 P
-0.13 (pro) 250.96 198.29 P
-0.13 (vide a w) 264.14 198.29 P
-0.13 (ay of detecting accesses to destro) 297.66 198.29 P
-0.13 (yed objects \050a f) 429.92 198.29 P
-0.13 (atal er-) 490.8 198.29 P
(ror\051.) 250.96 186.29 T
13 12 Q
(T) 215.54 165.95 T
(able 5: Operation in the SYS class) 222.44 165.95 T
87.3 457.95 87.3 180.95 2 L
V
2 H
0 Z
N
244.96 459.95 244.96 178.95 2 L
V
0.5 H
N
524.7 457.95 524.7 180.95 2 L
V
2 H
N
86.3 458.95 525.7 458.95 2 L
V
N
86.3 437.95 525.7 437.95 2 L
V
N
86.3 261.95 525.7 261.95 2 L
V
0.5 H
N
86.3 179.95 525.7 179.95 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 142
%%Page: "143" 143
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Built-in classes :) 238.24 710.84 T
0 F
(12.4) 298.36 710.84 T
(Object Finalization: $FINALIZE) 316.08 710.84 T
6 10 Q
(143) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(12.4  Object Finalization: $FINALIZE) 108 654 T
9 10 Q
-0.38 ($FINALIZE) 108 625.31 P
5 F
-0.16 ( de\336nes the single routine) 162 625.31 P
9 F
-0.38 (finalize) 266.49 625.31 P
5 F
-0.16 (.  An) 314.49 625.31 P
-0.16 (y class whose objects need to perform spe-) 333.74 625.31 P
-0.03 (cial operations before the) 108 613.31 P
-0.03 (y are g) 209.12 613.31 P
-0.03 (arbage collected should subtype from) 236.22 613.31 P
9 F
-0.07 ($FINALIZE) 388.54 613.31 P
5 F
-0.03 (.  The) 442.54 613.31 P
9 F
-0.07 (final-) 468 613.31 P
-0.59 (ize) 108 601.31 P
5 F
-0.24 ( routine will be called once on such objects before the program terminates.  This may happen at) 126 601.31 P
-0.49 (an) 108 589.31 P
-0.49 (y time, e) 117.29 589.31 P
-0.49 (v) 150.78 589.31 P
-0.49 (en concurrently with other code, and no guarantee is made about the order of \336nalization) 155.63 589.31 P
0.35 (of objects which refer to each other) 108 577.31 P
0.35 (.  Finalization will only occur once, e) 251.16 577.31 P
0.35 (v) 402.51 577.31 P
0.35 (en if ne) 407.36 577.31 P
0.35 (w references are) 437.79 577.31 P
-0.59 (created to the object during \336nalization.  Because fe) 108 565.31 P
-0.59 (w guarantees can be made about the en) 311.06 565.31 P
-0.59 (vironment) 462.89 565.31 P
-0.37 (in which \336nalization occurs, \336nalization is considered dangerous and should only be used in the rare) 108 553.31 P
(cases that con) 108 541.31 T
(v) 163.14 541.31 T
(entional coding will not suf) 167.99 541.31 T
(\336ce.) 277.74 541.31 T
108 479.95 504 482.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 481.46 540 481.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(12.5  Basic Classes and Literal Forms) 108 488.98 T
5 10 Q
0.68 (The basic Sather classes such as inte) 108 460.29 P
0.68 (gers and booleans are not treated specially  by the compiler) 258.04 460.29 P
0.68 (.) 501.5 460.29 P
0.8 (Ho) 108 448.29 P
0.8 (we) 119.97 448.29 P
0.8 (v) 131.38 448.29 P
0.8 (er) 136.23 448.29 P
0.8 (, the) 143.6 448.29 P
0.8 (y do ha) 161.47 448.29 P
0.8 (v) 192.32 448.29 P
0.8 (e language support in the form of con) 197.17 448.29 P
0.8 (v) 352.65 448.29 P
0.8 (enient literal forms that permit easy) 357.5 448.29 P
-0.33 (speci\336cation of v) 108 436.29 P
-0.33 (alues.    These literal forms all ha) 175.96 436.29 P
-0.33 (v) 306.14 436.29 P
-0.33 (e a concrete type deri) 310.99 436.29 P
-0.33 (v) 394.93 436.29 P
-0.33 (ed from the syntax; typing) 399.78 436.29 P
-0.23 (of literals is not dependent on conte) 108 424.29 P
-0.23 (xt. Each of these basic classes  also has a def) 249.24 424.29 P
-0.23 (ault v) 425.97 424.29 P
-0.23 (oid initial v) 448.04 424.29 P
-0.23 (al-) 493.45 424.29 P
(ue.) 108 412.29 T
(T) 106.72 382.29 T
(ype) 112.03 382.29 T
(Initial v) 143.2 382.29 T
(alue) 174.34 382.29 T
(Description) 333.17 382.29 T
9 F
(BOOL) 102.1 360.29 T
5 9 Q
(f) 158.65 360.95 T
(alse) 161.55 360.95 T
5 10 Q
(Immutable objects which represent boolean v) 203.1 360.29 T
(alues.) 384.76 360.29 T
9 F
(CHAR) 102.1 340.29 T
5 9 Q
(\325\1340\325) 160.6 340.95 T
5 10 Q
2.04 (Immutable objects which represent characters.  The number of bits in a) 203.1 340.29 P
(\324) 203.1 328.29 T
9 F
(CHAR) 206.43 328.29 T
5 F
(\325 object is less than or equal to the number in an \324) 230.43 328.29 T
9 F
(INT) 428.18 328.29 T
5 F
(\325 object.) 446.18 328.29 T
7 9 Q
(STR) 102.1 308.95 T
5 F
("" \050) 147.3 308.29 T
9 10 Q
(void) 159.89 308.29 T
5 9 Q
(\051) 183.89 308.29 T
5 10 Q
0.21 (Reference objects which represent strings for characters.  \324) 203.1 308.29 P
9 F
0.51 (void) 439.45 308.29 P
5 F
0.21 (\325 is a repre-) 463.45 308.29 P
(sentation for the null string.) 203.1 296.29 T
9 F
(INT) 102.1 276.29 T
5 9 Q
(0) 164.85 276.95 T
5 10 Q
0.53 (Immutable objects which represent ef) 203.1 276.29 P
0.53 (\336cient inte) 355.49 276.29 P
0.53 (gers. The size is de\336ned by) 398.38 276.29 P
-0.19 (the  implementation b) 203.1 264.29 P
-0.19 (ut must be at least 32 bits.  Bit operations are supported) 289.82 264.29 P
(in addition to numerical operations.) 203.1 252.29 T
9 F
(INTI) 102.1 232.29 T
5 9 Q
(0i) 163.6 232.95 T
5 10 Q
(Reference objects which represent in\336nite precision inte) 203.1 232.29 T
(gers.) 427.9 232.29 T
9 F
(FLT) 102.1 212.29 T
5 9 Q
(0.0) 161.47 212.95 T
5 10 Q
0.69 (Immutable objects which represent single precision \337oating point v) 203.1 212.29 P
0.69 (alues as) 477.83 212.29 P
(de\336ned by the IEEE-754-1985 standard.) 203.1 200.29 T
9 F
(FLTD) 102.1 180.29 T
5 9 Q
(0.0d) 159.22 180.95 T
5 10 Q
(Immutable objects for  double precision \337oating point v) 203.1 180.29 T
(alues.) 426.17 180.29 T
96.1 395.95 96.1 173.2 2 L
V
2 H
0 Z
N
137.1 397.95 137.1 172.7 2 L
V
0.5 H
N
197.1 397.95 197.1 172.7 2 L
V
N
515.9 395.95 515.9 173.2 2 L
V
2 H
N
95.1 396.95 516.9 396.95 2 L
V
N
95.1 372.95 516.9 372.95 2 L
V
N
95.1 352.95 516.9 352.95 2 L
V
0.5 H
N
95.1 320.95 516.9 320.95 2 L
V
N
95.1 288.95 516.9 288.95 2 L
V
N
95.1 244.95 516.9 244.95 2 L
V
N
95.1 224.95 516.9 224.95 2 L
V
N
95.1 192.95 516.9 192.95 2 L
V
N
95.1 172.95 516.9 172.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 143
%%Page: "144" 144
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(144) 108 710.84 T
8 8 Q
(Built-in classes :) 218.15 710.84 T
0 F
(12.5 Basic Classes and Liter) 278.27 710.84 T
(al For) 381.94 710.84 T
(ms) 402.97 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(12.5.1    Booleans and the BOOL c) 108 658 T
(lass) 302.5 658 T
9 10 Q
0.51 (BOOL) 108 571.33 P
5 F
0.21 ( objects represent boolean v) 132 571.33 P
0.21 (alues \050page 143\051. The tw) 244.24 571.33 P
0.21 (o possible v) 344.13 571.33 P
0.21 (alues are represented by the) 392.08 571.33 P
1 F
-0.16 (boolean literal expressions) 108 559.33 P
5 F
-0.16 (: \324) 212.88 559.33 P
9 F
-0.38 (true) 221.33 559.33 P
5 F
-0.16 (\325 and \324) 245.33 559.33 P
9 F
-0.38 (false) 271.11 559.33 P
5 F
-0.16 (\325.  Boolean objects support the standard logical op-) 301.11 559.33 P
-0.09 (erations.  Note that these logical operations are e) 108 547.33 P
-0.09 (v) 301.75 547.33 P
-0.09 (aluated in the standard w) 306.5 547.33 P
-0.09 (ay) 406.04 547.33 P
-0.09 (, and not short-circuit-) 414.83 547.33 P
(ed.  The Sather e) 108 535.33 T
(xpressions "and" and "or" pro) 175.33 535.33 T
(vide a short circuit logical operations.) 294.26 535.33 T
4 12 Q
(12.5.2   Character) 108 445 T
(s and the CHAR c) 207.2 445 T
(lass) 307.64 445 T
9 10 Q
-0.44 (CHAR) 108 378.33 P
5 F
-0.19 ( objects represent characters \050page 143\051.) 132 378.33 P
1 F
-0.19 (Character literal expressions) 294.44 378.33 P
5 F
-0.19 ( be) 408.7 378.33 P
-0.19 (gin and end with sin-) 420.3 378.33 P
0.23 (gle quote marks. These may enclose either an) 108 366.33 P
0.23 (y single ISO-Latin-1 printing character e) 291.67 366.33 P
0.23 (xcept single) 455.71 366.33 P
(quote or backslash or an escape code starting with a backslash.) 108 354.33 T
(\245) 108 336.33 T
9 F
(\325\134a\325) 124.04 336.33 T
5 F
( is an) 148.04 336.33 T
10 F
(alert) 171.65 336.33 T
5 F
( such as a bell,) 190.54 336.33 T
(\245) 108 321.33 T
9 F
(\325\134b\325) 121.54 321.33 T
5 F
( is the) 145.54 321.33 T
10 F
(bac) 171.93 321.33 T
(kspace) 186.17 321.33 T
5 F
( character) 213.38 321.33 T
(,) 252.12 321.33 T
(\245) 108 306.33 T
9 F
(\325\134f\325) 124.04 306.33 T
5 F
( is the) 148.04 306.33 T
10 F
(form feed) 174.43 306.33 T
5 F
( character) 212.48 306.33 T
(,) 251.22 306.33 T
(\245) 108 291.33 T
9 F
(\325\134n\325) 124.04 291.33 T
5 F
( is the) 148.04 291.33 T
10 F
(ne) 174.43 291.33 T
(wline) 183.72 291.33 T
5 F
( character) 205.39 291.33 T
(,) 244.13 291.33 T
(\245) 108 276.33 T
9 F
(\325\134r\325) 121.54 276.33 T
5 F
( is the) 145.54 276.33 T
10 F
(carria) 171.93 276.33 T
(g) 196.83 276.33 T
(e r) 201.73 276.33 T
(eturn) 212.19 276.33 T
5 F
(character) 235.8 276.33 T
(,) 272.04 276.33 T
(\245) 108 261.33 T
9 F
(\325\134t\325) 124.04 261.33 T
5 F
( is the) 148.04 261.33 T
10 F
(horizontal tab) 174.43 261.33 T
5 F
( character) 230.83 261.33 T
(,) 269.57 261.33 T
(\245) 108 246.33 T
9 F
(\325\134v\325) 124.04 246.33 T
5 F
( is the) 148.04 246.33 T
10 F
(vertical tab) 174.43 246.33 T
5 F
( character) 220.26 246.33 T
(,) 259 246.33 T
(\245) 108 231.33 T
9 F
(\325\134\134\325) 124.04 231.33 T
5 F
( is the) 148.04 231.33 T
10 F
(bac) 174.43 231.33 T
(kslash) 188.67 231.33 T
5 F
( character) 213.67 231.33 T
(,) 252.41 231.33 T
(\245) 108 216.33 T
9 F
(\325\134\325\325) 121.54 216.33 T
5 F
( is the) 145.54 216.33 T
10 F
(single quote) 171.93 216.33 T
5 F
(character) 223.04 216.33 T
(\245) 108 201.33 T
9 F
(\325\134"\325) 124.04 201.33 T
5 F
( is the) 148.04 201.33 T
10 F
(double quote) 174.43 201.33 T
5 F
( character) 226.37 201.33 T
(.) 264.96 201.33 T
-0.6 ( A backslash follo) 108 179.33 P
-0.6 (wed by one or more octal digits represents the character whose octal representation) 178.45 179.33 P
-0.4 (is gi) 108 167.33 P
-0.4 (v) 124.3 167.33 P
-0.4 (en. A backslash follo) 129.15 167.33 P
-0.4 (wed by an) 212.12 167.33 P
-0.4 (y other character is that character) 252.27 167.33 P
-0.4 (. The mapping of escape codes) 382.71 167.33 P
(to other characters is de\336ned by the Sather implementation.) 108 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Examples:) 108 635.33 T
0 0 1 0 1 1 0 K
306 632 504 642 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(a:BOOL := true) 320.4 636.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 622 504 632 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(b ::= false;) 320.4 626.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 612 504 622 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(c:BOOL := a.and\050b\051;) 320.4 616.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 602 504 612 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(if a.and\050b\051.or\050d\051 then) 320.4 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 592 504 602 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 596.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if  b.has_value and b.get_value > 3 then) 144 515.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( -- The short circuit and will only evaluate b.get_value) 156.6 506.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    -- if b.has_value is true) 144 497.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 488.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(Examples:) 108 422.33 T
0 0 1 0 1 1 0 K
306 419 504 429 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(c:CHAR := \325a\325) 320.4 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 409 504 419 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(new_line:CHAR := \325\134n\325;) 320.4 413.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 399 504 409 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(code_16:CHAR := \325\134016\325;) 320.4 403.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 523.88 129.6 483.12 2 L
V
0 Z
N
489.6 523.88 489.6 483.12 2 L
V
N
129.48 524 489.73 524 2 L
V
N
129.48 483 489.73 483 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 144
%%Page: "145" 145
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Built-in classes :) 235.28 710.84 T
0 F
(12.5) 295.4 710.84 T
(Basic Classes and Liter) 313.13 710.84 T
(al For) 399.08 710.84 T
(ms) 420.11 710.84 T
6 10 Q
(145) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(12.5.3   The string c) 108 658 T
(lass, STR) 219.14 658 T
9 10 Q
-0.34 (STR) 108 591.33 P
5 F
-0.14 ( objects represent strings.) 126 591.33 P
1 F
-0.14 (String literal expressions) 229.59 591.33 P
5 F
-0.14 ( be) 330.44 591.33 P
-0.14 (gin and end with double quote marks.  A) 342.08 591.33 P
0.26 (backslash starts an escape sequence as with character literals. All successi) 108 579.33 P
0.26 (v) 406.11 579.33 P
0.26 (e octal digits follo) 410.96 579.33 P
0.26 (wing) 484 579.33 P
0.04 (a backslash are tak) 108 567.33 P
0.04 (en to de\336ne a single character) 183.26 567.33 P
0.04 (.  Indi) 302.02 567.33 P
0.04 (vidual string literals  may not e) 325.45 567.33 P
0.04 (xtend be) 449.95 567.33 P
0.04 (yond) 484 567.33 P
-0.03 (a single line, b) 108 555.33 P
-0.03 (ut successi) 166.03 555.33 P
-0.03 (v) 208.8 555.33 P
-0.03 (e string literals are concated together) 213.65 555.33 P
-0.03 (. Thus, a break in a string literal can) 360.4 555.33 P
-0.23 (also be used to force the end of an octal encoded character) 108 543.33 P
-0.23 (. F) 338.41 543.33 P
-0.23 (or e) 348.59 543.33 P
-0.23 (xample:) 363.48 543.33 P
9 F
-0.56 ("\1340367") 397.96 543.33 P
5 F
-0.23 ( is a one charac-) 439.96 543.33 P
0.09 (ter string, while) 108 531.33 P
9 F
0.22 ("\13403""67") 173.83 531.33 P
5 F
0.09 ( is a three character string. Such se) 227.83 531.33 P
0.09 (gments may be separated by com-) 367.18 531.33 P
(ments and whitespace.) 108 519.33 T
4 12 Q
(12.5.4   Integ) 108 478 T
(er) 180.16 478 T
(s and the INT c) 191.32 478 T
(lass) 276.43 478 T
9 10 Q
0.28 (INT) 108 371.33 P
5 F
0.12 ( objects represent machine inte) 126 371.33 P
0.12 (gers.  Inte) 250.17 371.33 P
0.12 (ger literals can be represented in four bases: binary is) 289.96 371.33 P
0.47 (base 2, octal is base 8, decimal is base 10 and he) 108 359.33 P
0.47 (xadecimal is base 16. These are indicated by the) 307.2 359.33 P
-0.34 (pre\336x) 108 347.33 P
-0.34 (es: \324) 131.18 347.33 P
9 F
-0.81 (0b) 147.78 347.33 P
5 F
-0.34 (\325, \324) 159.78 347.33 P
9 F
-0.81 (0o) 171.1 347.33 P
5 F
-0.34 (\325, nothing, and \324) 183.1 347.33 P
9 F
-0.81 (0x) 246.24 347.33 P
5 F
-0.34 (\325 respecti) 258.24 347.33 P
-0.34 (v) 294.58 347.33 P
-0.34 (ely) 299.43 347.33 P
-0.34 (. Underscores may be used within inte) 311.01 347.33 P
-0.34 (ger literals) 461.85 347.33 P
0.6 (to impro) 108 335.33 P
0.6 (v) 142.62 335.33 P
0.6 (e readability and are ignored.) 147.47 335.33 P
9 F
1.44 (INT) 269.87 335.33 P
5 F
0.6 ( literals are only le) 287.87 335.33 P
0.6 (g) 364.54 335.33 P
0.6 (al if the) 369.49 335.33 P
0.6 (y are in the representable) 401.09 335.33 P
(range of the Sather implementation, which is at least 32 bits.) 108 323.33 T
0.6 (Underscores may be used to separate the digits of an inte) 108 301.33 P
0.6 (ger to impro) 341.54 301.33 P
0.6 (v) 392.02 301.33 P
0.6 (e readability - this may be) 396.87 301.33 P
(particularly useful for v) 108 289.33 T
(ery long binary numbers.) 202.55 289.33 T
4 12 Q
(12.5.5   In\336nite precision integ) 108 248 T
(er) 279.52 248 T
(s and the INTI c) 290.68 248 T
(lass) 379.13 248 T
5 10 Q
0.6 ( In\336nite precision inte) 108 191.33 P
0.6 (gers are are implemetned by the INTI class and supported by a literal form) 197.69 191.33 P
0.23 (which is essentially the same as that of inte) 108 179.33 P
0.23 (gers, b) 282.46 179.33 P
0.23 (ut with a trailing \325i\325.  All the standard arithmetic) 309.15 179.33 P
(operations are de\336ned on in\336nite precision inte) 108 167.33 T
(gers.) 296.16 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Examples:) 108 635.33 T
0 0 1 0 1 1 0 K
306 632 504 642 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(s:STR := "a string literal") 320.4 636.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 622 504 632 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(d:STR := "concat" "enation\134015") 320.4 626.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 612 504 622 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(-- d  is  "concatenation\134015") 320.4 616.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(Examples:) 108 455.33 T
0 0 1 0 1 1 0 K
306 452 504 462 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(a:INT := 14;) 320.4 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 442 504 452 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(b:INT := -4532) 320.4 446.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 432 504 442 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(c:INT := 39_8322_983_298) 320.4 436.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 422 504 432 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(binary:INT := 0b101011;) 320.4 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 412 504 422 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(bin:INT := -0b_101010_1010) 320.4 416.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 402 504 412 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(octal:ITN := 0o37323) 320.4 406.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 392 504 402 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(hex_num:INT:= 0x_ea_75_67) 320.4 396.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(Examples:) 108 225.33 T
0 0 1 0 1 1 0 K
306 222 504 232 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(b:INTI := -4532i) 320.4 226.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 212 504 222 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(infinite_hex:INTI := 0o373254i) 320.4 216.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 145
%%Page: "146" 146
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(146) 108 710.84 T
8 8 Q
(Built-in classes :) 238.92 710.84 T
0 F
(12.6 Libr) 299.04 710.84 T
(ar) 329.76 710.84 T
(y Con) 337.96 710.84 T
(v) 360.92 710.84 T
(entions) 365.2 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
0 X
(12.5.6   Floating point n) 108 658 T
(umber) 241.25 658 T
(s: the FL) 277.74 658 T
(T and FL) 326.66 658 T
(TD c) 375.59 658 T
(lasses) 401.35 658 T
5 10 Q
(Syntax:) 108 601.33 T
1 F
(flt_literal_expression) 129.6 583.33 T
( [) 227.41 583.33 T
9 F
(-) 233.24 583.33 T
1 F
(] decimal_int) 239.24 583.33 T
9 F
(.) 294.98 583.33 T
1 F
(decimal_int [) 306.98 583.33 T
9 F
(e) 360.23 583.33 T
1 F
( [) 366.23 583.33 T
9 F
(-) 372.05 583.33 T
1 F
(] decimal_int]  [) 378.05 583.33 T
9 F
( d) 442.95 583.33 T
1 F
( ]) 454.95 583.33 T
9 F
0.26 (FLT) 108 561.33 P
5 F
0.11 ( and) 126 561.33 P
9 F
0.26 (FLTD) 145.66 561.33 P
5 F
0.11 (objects represent \337oating point numbers according to the single and double repre-) 175.92 561.33 P
-0.09 (sentations de\336ned by the IEEE-754-1985 standard \050see also page 143\051.  A \337oating point literal is of) 108 549.33 P
-0.49 (type) 108 537.33 P
9 F
-1.18 (FLT) 127.23 537.33 P
5 F
-0.49 ( unless  suf) 145.23 537.33 P
-0.49 (\336x) 188.22 537.33 P
-0.49 (ed by \324d\325 designating  a) 198.63 537.33 P
9 F
-1.18 (FLTD) 292.33 537.33 P
5 F
-0.49 ( literal. The optional \324) 316.33 537.33 P
9 F
-1.18 (e) 401.86 537.33 P
5 F
-0.49 (\325 portion is used to spec-) 407.86 537.33 P
-0.01 (ify a po) 108 525.33 P
-0.01 (wer of 10 by which to multiply the decimal v) 138.29 525.33 P
-0.01 (alue. Underscores may be used within \337oating) 318.79 525.33 P
0.17 (point literals to impro) 108 513.33 P
0.17 (v) 195.32 513.33 P
0.17 (e readability and are ignored. Literal v) 200.18 513.33 P
0.17 (alues are only le) 354.55 513.33 P
0.17 (g) 420.18 513.33 P
0.17 (al if the) 425.13 513.33 P
0.17 (y are within) 455.88 513.33 P
(the range speci\336ed by the IEEE standard.) 108 501.33 T
-0.31 (Sather does not do implicit type coercions \050such as promoting an inte) 108 479.33 P
-0.31 (ger to \337oating point when used) 381.38 479.33 P
0.58 (in a \337oating point conte) 108 467.33 P
0.58 (xt.\051  T) 205.18 467.33 P
0.58 (ypes must instead be promoted e) 230.27 467.33 P
0.58 (xplicitly by the programmer) 363.86 467.33 P
0.58 (.  This) 477.55 467.33 P
-0.42 (a) 108 455.33 P
-0.42 (v) 112.24 455.33 P
-0.42 (oids a number of portability and precision issues \050for e) 117.04 455.33 P
-0.42 (xample, when an inte) 331.65 455.33 P
-0.42 (ger can\325) 415.77 455.33 P
-0.42 (t be represent-) 447.65 455.33 P
(ed by the \337oating point representation.) 108 443.33 T
-0.55 (The follo) 108 421.33 P
-0.55 (wing  tw) 144.14 421.33 P
-0.55 (o e) 177.95 421.33 P
-0.55 (xpressions are equi) 189.2 421.33 P
-0.55 (v) 264.51 421.33 P
-0.55 (alent.  In the \336rst, the \324) 269.26 421.33 P
9 F
-1.31 (d) 357.08 421.33 P
5 F
-0.55 (\325 is a literal suf) 363.08 421.33 P
-0.55 (\336x denoting the type.) 420.64 421.33 P
(In the second, \324) 108 409.33 T
9 F
(3.14) 169.65 409.33 T
5 F
(\325 is the literal and \324) 193.65 409.33 T
9 F
(.fltd) 269.47 409.33 T
5 F
(\325 is an e) 299.47 409.33 T
(xplicit con) 330.7 409.33 T
(v) 372.8 409.33 T
(ersion.) 377.65 409.33 T
108 316.98 504 320 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 318.49 540 318.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(12.6  Librar) 108 326 T
(y Con) 204.23 326 T
(ventions) 253.51 326 T
5 10 Q
(In addition to \324) 108 297.31 T
9 F
(create) 167.72 297.31 T
5 F
(\325, there are a number of other naming con) 203.72 297.31 T
(v) 369.66 297.31 T
(entions:) 374.51 297.31 T
(\245) 108 279.31 T
(Classes which are related should re\337ect this in their names.  F) 121.54 279.31 T
(or e) 368.58 279.31 T
(xample, there are man) 383.7 279.31 T
(y e) 472.41 279.31 T
(x-) 484.2 279.31 T
(amples in the library of an abstraction, classes implementing the abstraction, and code testing) 121.54 267.31 T
(implementations of the abstraction.  F) 121.54 255.31 T
(or e) 273.05 255.31 T
(xample, in the standard library the set abstraction is) 288.17 255.31 T
(named) 121.54 243.31 T
9 F
($SET, H_SET) 150.7 243.31 T
5 F
( is a hash table implementation, and the test code is) 216.7 243.31 T
9 F
(TEST_SET) 424.46 243.31 T
5 F
(.) 471.72 243.31 T
(\245) 108 228.31 T
(Some classes implement an immutable, \324mathematical\325 abstraction \050) 121.54 228.31 T
10 F
(e) 394.84 228.31 T
(g) 398.88 228.31 T
(.) 403.73 228.31 T
5 F
(inte) 408.73 228.31 T
(gers\051, and others) 423.58 228.31 T
(implement mutable "object" abstractions that can be modi\336ed in place \050) 121.54 216.31 T
10 F
(e) 408 216.31 T
(g) 412.04 216.31 T
(.) 416.89 216.31 T
5 F
( arrays\051.  F) 419.39 216.31 T
(or most) 462.56 216.31 T
(objects, the mutable, object semantics are natural and ef) 121.54 204.31 T
(\336cient. Ho) 345.13 204.31 T
(we) 387.1 204.31 T
(v) 398.51 204.31 T
(er) 403.36 204.31 T
(, for classes such as) 410.73 204.31 T
(sets, the semantics may be dif) 121.54 192.31 T
(ferent from those of the traditional mathematical set entities.) 240.72 192.31 T
(\245) 108 177.31 T
(Classes with immutable semantics are gi) 121.54 177.31 T
(v) 283.78 177.31 T
(en their \324mathematical\325 names: STR,) 288.63 177.31 T
9 F
(VEC) 438.61 177.31 T
5 F
(,) 456.61 177.31 T
9 F
($SET) 461.61 177.31 T
5 F
(.) 484.87 177.31 T
(When separate abstractions e) 121.54 165.31 T
(xist to handle v) 237.74 165.31 T
(alue and reference semantics,  the method) 298.88 165.31 T
9 F
(value) 468.83 165.31 T
5 F
(will be pro) 121.54 153.31 T
(vided in the reference v) 164.72 153.31 T
(ersion to pro) 258.98 153.31 T
(vide an immutable snapshop of the reference) 309.38 153.31 T
(class.) 121.54 141.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Examples:) 108 635.33 T
0 0 1 0 1 1 0 K
306 632 504 642 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(f:FLT := 12.34) 320.4 636.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 622 504 632 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(fd:FLTD := 3.498_239e-8d) 320.4 626.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(3.14d) 144 389.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- A double precision literal) 185.4 389.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(3.14.fltd) 144 380.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
11 F
(-- Single, but converted) 187.2 380.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 397.88 129.6 375.12 2 L
V
0.25 H
0 Z
N
489.6 397.88 489.6 375.12 2 L
V
N
129.48 398 489.73 398 2 L
V
N
129.48 375 489.73 375 2 L
V
N
217.11 580.11 227.42 591.08 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
15 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 216.52 583.33 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 146
%%Page: "147" 147
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Built-in classes :) 256.05 710.84 T
0 F
(12.6) 316.17 710.84 T
(Libr) 333.9 710.84 T
(ar) 346.9 710.84 T
(y Con) 355.09 710.84 T
(v) 378.06 710.84 T
(entions) 382.33 710.84 T
6 10 Q
(147) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(\245) 108 659.33 T
(Con) 121.54 659.33 T
(v) 137.81 659.33 T
(ersions from a type) 142.66 659.33 T
9 F
(FOO) 222.09 659.33 T
5 F
( to a type) 240.09 659.33 T
9 F
(BAR) 279.53 659.33 T
5 F
( occur in tw) 297.53 659.33 T
(o w) 344.92 659.33 T
(ays: by de\336ning an appropriate) 359.54 659.33 T
(\324) 121.54 647.33 T
9 F
(create\050f:FOO\051:BAR) 124.87 647.33 T
5 F
(\325 routine in) 226.87 647.33 T
9 F
(BAR) 273.81 647.33 T
5 F
( as seen abo) 291.81 647.33 T
(v) 339.7 647.33 T
(e, or be de\336ning a routine \324) 344.55 647.33 T
9 F
(bar:BAR) 453.14 647.33 T
5 F
(\325) 495.14 647.33 T
(in) 121.54 635.33 T
9 F
(FOO) 131.82 635.33 T
5 F
(.  F) 149.82 635.33 T
(or e) 162.73 635.33 T
(xample, in the standard library con) 177.85 635.33 T
(v) 316.87 635.33 T
(ersion of a) 321.72 635.33 T
9 F
(FLT) 366.43 635.33 T
5 F
( to a) 384.43 635.33 T
9 F
(FLTD) 404.15 635.33 T
5 F
( is done by calling) 428.15 635.33 T
(the routine \324) 121.54 623.33 T
9 F
(fltd:FLTD) 170.42 623.33 T
5 F
(\325 de\336ned in) 224.42 623.33 T
9 F
(FLT) 272.47 623.33 T
5 F
(.) 289.73 623.33 T
(\245) 108 608.33 T
(Methods which return a) 121.54 608.33 T
9 F
(BOOL) 219.3 608.33 T
5 F
( \050called) 243.3 608.33 T
1 F
(predicates) 275.51 608.33 T
5 F
(\051,  usually ha) 315.69 608.33 T
(v) 367.15 608.33 T
(e the pre\336x \324) 372 608.33 T
9 F
(is_) 422.82 608.33 T
5 F
(\325.  F) 440.82 608.33 T
(or e) 457.06 608.33 T
(xam-) 472.18 608.33 T
(ple, \324) 121.54 596.33 T
9 F
(is_prime) 142.09 596.33 T
5 F
(\325 tests inte) 190.09 596.33 T
(gers for primality) 231.05 596.33 T
(.) 300.39 596.33 T
(\245) 108 581.33 T
(Abstract classes that require a single method should be named after that method.  F) 121.54 581.33 T
(or e) 453.84 581.33 T
(xample,) 468.96 581.33 T
(subtypes of) 121.54 569.33 T
9 F
($HASH) 169.87 569.33 T
5 F
( de\336ne the method \324) 199.87 569.33 T
9 F
(hash) 279.86 569.33 T
5 F
(\325.) 303.86 569.33 T
(\245) 108 554.33 T
(If there is a single iterator in a container class which returns all of the items, it should be) 121.54 554.33 T
(named \324) 121.54 542.33 T
9 F
(elt!) 154.03 542.33 T
5 F
(\325.  If there is a single iterator which sets the items, it should be named \324) 178.03 542.33 T
9 F
(set!) 461.88 542.33 T
5 F
(\325.) 485.88 542.33 T
(In general, iterators should ha) 121.54 530.33 T
(v) 240.48 530.33 T
(e singular \050\324) 245.33 530.33 T
9 F
(elt!) 293.65 530.33 T
5 F
(\325\051 rather than plural \050\324) 317.65 530.33 T
9 F
(elts!) 404.84 530.33 T
5 F
(\325\051 names if the) 434.84 530.33 T
(choice is arbitrary) 121.54 518.33 T
(.) 193.09 518.33 T
4 12 Q
(12.6.1   Object Identity) 108 477 T
5 10 Q
-0.49 (Man) 108 454.33 P
-0.49 (y languages pro) 126.18 454.33 P
-0.49 (vide b) 188.37 454.33 P
-0.49 (uilt-in pointer and structural equality and comparison.  T) 212.4 454.33 P
-0.49 (o preserv) 434.61 454.33 P
-0.49 (e encap-) 470.9 454.33 P
0.11 (sulation, in Sather these operations must go through the class interf) 108 442.33 P
0.11 (ace lik) 377.6 442.33 P
0.11 (e e) 403.99 442.33 P
0.11 (v) 415.23 442.33 P
0.11 (ery method.  The \324) 420.08 442.33 P
9 F
0.27 (=) 494.67 442.33 P
5 F
0.11 (\325) 500.67 442.33 P
-0.02 (symbol is syntactic sug) 108 430.33 P
-0.02 (ar for a call to \324) 200.95 430.33 P
9 F
-0.05 (is_eq) 262.77 430.33 P
5 F
-0.02 (\325 \050page 116\051.  \324) 292.77 430.33 P
9 F
-0.05 (is_eq:BOOL) 352.38 430.33 P
5 F
-0.02 (\325 must be e) 411.46 430.33 P
-0.02 (xplicitly de-) 455.41 430.33 P
(\336ned by the type of the left side for this syntax to be useful.) 108 418.33 T
0.49 (The) 108 396.33 P
9 F
1.18 (SYS) 126.54 396.33 P
5 F
0.49 ( class \050page 142\051 can be used to obtain equality based on pointer or structural notions of) 144.54 396.33 P
(identity) 108 384.33 T
(.  This class also pro) 137.91 384.33 T
(vides b) 219.42 384.33 T
(uilt-in mechanisms for comparison  and hashing.) 247.83 384.33 T
4 F
(IS_EQ) 108 356.33 T
5 F
0.73 (Classes which de\336ne their o) 108 333.33 P
0.73 (wn notion of equality should subtype from) 222.88 333.33 P
9 F
1.75 ($IS_EQ) 401.03 333.33 P
5 F
0.73 (.  This class is a) 437.03 333.33 P
(common parameter bound in container classes.  In the standard library) 108 321.33 T
(, we ha) 388.68 321.33 T
(v) 417.08 321.33 T
(e) 421.93 321.33 T
0.02 (Man) 108 258.33 P
0.02 (y classes de\336ne a notion of equality which is dif) 126.18 258.33 P
0.02 (ferent than pointer equality) 318.57 258.33 P
0.02 (.  F) 426.56 258.33 P
0.02 (or e) 439.51 258.33 P
0.02 (xample, tw) 454.64 258.33 P
0.02 (o) 499 258.33 P
9 F
(STR) 108 246.33 T
5 F
( strings may be equal although, in general, strings are not unique.) 126 246.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $IS_EQ is) 144 301.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 9 Q
(is_eq\050e:$OB\051:BOOL;) 178.2 292 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(end;) 144 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class STR < $IS_EQ is) 144 226.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 244.8 226.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 9 Q
(is_eq\050arg:$OB\051:BOOL is ... end;) 178.2 217 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 178.2 207 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(end; -- class STR) 144 196.33 T
2 10 Q
(.) 225.6 196.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 309.88 129.6 277.12 2 L
V
0 Z
N
489.6 309.88 489.6 277.12 2 L
V
N
129.48 310 489.73 310 2 L
V
N
129.48 277 489.73 277 2 L
V
N
129.6 234.88 129.6 190.12 2 L
V
N
489.6 234.88 489.6 190.12 2 L
V
N
129.48 235 489.73 235 2 L
V
N
129.48 190 489.73 190 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 147
%%Page: "148" 148
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(148) 108 710.84 T
8 8 Q
(Built-in classes :) 238.92 710.84 T
0 F
(12.6 Libr) 299.04 710.84 T
(ar) 329.76 710.84 T
(y Con) 337.96 710.84 T
(v) 360.92 710.84 T
(entions) 365.2 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(Pr) 108 659.33 T
(ogrammer de\336ned hash functions and $HASH) 118.36 659.33 T
5 F
-0.29 (Man) 108 636.33 P
-0.29 (y container classes need to be able to compute hash v) 126.18 636.33 P
-0.29 (alues of their items. Just as with \324) 336.32 636.33 P
9 F
-0.7 (is_eq) 468.17 636.33 P
5 F
-0.29 (\325,) 498.17 636.33 P
0.02 (classes may subtype from) 108 624.33 P
9 F
0.04 ($HASH) 213.6 624.33 P
5 F
0.02 ( to indicate that the) 243.6 624.33 P
0.02 (y kno) 320.17 624.33 P
0.02 (w ho) 342.44 624.33 P
0.02 (w to compute their o) 361.93 624.33 P
0.02 (wn hash v) 444.51 624.33 P
0.02 (alue.) 484.84 624.33 P
($HASH is de\336ned in the library to be) 108 612.33 T
4 F
(Objects that can be copied and $COPY) 108 543.33 T
5 F
-0.22 (T) 108 520.33 P
-0.22 (o preserv) 113.31 520.33 P
-0.22 (e class encapsulation, Sather does not pro) 149.87 520.33 P
-0.22 (vide a b) 314.75 520.33 P
-0.22 (uilt-in w) 345.76 520.33 P
-0.22 (ay to cop) 379.61 520.33 P
-0.22 (y objects.  By con) 415.73 520.33 P
-0.22 (v) 486.38 520.33 P
-0.22 (en-) 491.23 520.33 P
0.67 (tion, objects are copied by a class-de\336ned routine \324) 108 508.33 P
9 F
1.62 (copy) 316.96 508.33 P
5 F
0.67 (\325, and classes which pro) 340.96 508.33 P
0.67 (vide this should) 439.31 508.33 P
(subtype from) 108 496.33 T
9 F
($COPY) 163.55 496.33 T
5 F
(.  $COPY is de\336ned in the standard library) 192.26 496.33 T
(.) 362.43 496.33 T
4 12 Q
(12.6.2   Nil and v) 108 412 T
(oid) 201.02 412 T
5 10 Q
-0.32 (Reference class v) 108 389.33 P
-0.32 (ariables can be declared without being allocated.  Unassigned reference or abstract) 177.08 389.33 P
0.04 (type v) 108 377.33 P
0.04 (ariables ha) 132.51 377.33 P
0.04 (v) 175.38 377.33 P
0.04 (e the) 180.23 377.33 P
9 F
0.09 (void) 201.97 377.33 P
5 F
0.04 ( v) 225.97 377.33 P
0.04 (alue, indicating the non-e) 233.26 377.33 P
0.04 (xistence of an object. Ho) 334.87 377.33 P
0.04 (we) 434.47 377.33 P
0.04 (v) 445.88 377.33 P
0.04 (er) 450.73 377.33 P
0.04 (, for immu-) 458.1 377.33 P
-0.05 (table types this unassigned v) 108 365.33 P
-0.05 (alue is not distinguished from other le) 222 365.33 P
-0.05 (gitimate v) 373.22 365.33 P
-0.05 (alues; for e) 413.2 365.33 P
-0.05 (xample, the) 457.39 365.33 P
9 F
(void) 108 353.33 T
5 F
( of type) 132 353.33 T
9 F
(INT) 165.05 353.33 T
5 F
( is the v) 183.05 353.33 T
(alue zero.) 214.19 353.33 T
-0.32 (It is often algorithmically con) 108 331.33 P
-0.32 (v) 225.2 331.33 P
-0.32 (enient to ha) 230.04 331.33 P
-0.32 (v) 275.86 331.33 P
-0.32 (e a sentinel v) 280.71 331.33 P
-0.32 (alue which has a special interpretation.  F) 331.99 331.33 P
-0.32 (or) 495.67 331.33 P
0.34 (e) 108 319.33 P
0.34 (xample, hash tables often distinguish empty table entries without a separate bit indicating that an) 112.29 319.33 P
-0.29 (entry is empty) 108 307.33 P
-0.29 (.  Because) 164 307.33 P
9 F
-0.69 (void) 206.45 307.33 P
5 F
-0.29 ( is a le) 230.45 307.33 P
-0.29 (gitimate v) 255.27 307.33 P
-0.29 (alue for immutable types,) 295.02 307.33 P
9 F
-0.69 (void) 398.58 307.33 P
5 F
-0.29 ( can\325) 422.58 307.33 P
-0.29 (t be used as this) 441.82 307.33 P
0.48 (sentinel v) 108 295.33 P
0.48 (alue.  F) 146.84 295.33 P
0.48 (or this reason, classes may de\336ne a \324) 177.38 295.33 P
9 F
1.16 (nil) 326.85 295.33 P
5 F
0.48 (\325 v) 344.85 295.33 P
0.48 (alue to be used to represent the non-) 355.92 295.33 P
1.77 (e) 108 283.33 P
1.77 (xistence of an immutable object.  Such classes subtype from) 112.29 283.33 P
9 F
4.26 ($NIL) 373.6 283.33 P
5 F
1.77 (and de\336ne the routines) 407.86 283.33 P
(\324) 108 271.33 T
9 F
(nil:SAME) 111.33 271.33 T
5 F
(\325 and) 159.33 271.33 T
9 F
(\324is_nil: BOOL) 182.1 271.33 T
5 F
(\325.) 259.18 271.33 T
0.14 (The \324) 108 249.33 P
9 F
0.34 (nil) 129.52 249.33 P
5 F
0.14 (\325 v) 147.52 249.33 P
0.14 (alue is generally a rarely used  or ille) 158.24 249.33 P
0.14 (g) 306.96 249.33 P
0.14 (al v) 311.91 249.33 P
0.14 (alue.  F) 326.52 249.33 P
0.14 (or) 356.37 249.33 P
9 F
0.34 (INT) 367.34 249.33 P
5 F
0.14 (, it is the most ne) 384.6 249.33 P
0.14 (g) 453.5 249.33 P
0.14 (ati) 458.45 249.33 P
0.14 (v) 468.2 249.33 P
0.14 (e repre-) 473.05 249.33 P
-0.23 (sentable inte) 108 237.33 P
-0.23 (ger) 157.88 237.33 P
-0.23 (.  F) 170.1 237.33 P
-0.23 (or \337oating point types, it is) 182.54 237.33 P
9 F
-0.56 (NaN) 291.42 237.33 P
5 F
-0.23 (.  \324) 309.42 237.33 P
9 F
-0.56 (is_nil) 319.78 237.33 P
5 F
-0.23 (\325 is necessary because) 355.78 237.33 P
9 F
-0.56 (NaN) 445.36 237.33 P
5 F
-0.23 ( is de\336ned) 463.36 237.33 P
(by) 108 225.33 T
9 F
(IEEE) 120.5 225.33 T
5 F
( to not be equal to itself.) 144.5 225.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $HASH is) 144 592.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 9 Q
(hash:INT;) 178.2 583 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(end;) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
2 10 Q
(.) 144 475.33 T
9 8 Q
(abstract class $COPY is) 146.5 475.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 9 Q
(copy:SAME;) 178.2 465 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(end;) 144 455.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $NIL is) 144 205.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 9 Q
(nil:SAME;) 178.2 196 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is_nil:BOOL;) 178.2 186 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(end; -- anstract class $NIL) 144 176.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 600.88 129.6 568.12 2 L
V
0 Z
N
489.6 600.88 489.6 568.12 2 L
V
N
129.48 601 489.73 601 2 L
V
N
129.48 568 489.73 568 2 L
V
N
129.6 484.88 129.6 450.12 2 L
V
N
489.6 484.88 489.6 450.12 2 L
V
N
129.48 485 489.73 485 2 L
V
N
129.48 450 489.73 450 2 L
V
N
129.6 213.88 129.6 171.12 2 L
V
N
489.6 213.88 489.6 171.12 2 L
V
N
129.48 214 489.73 214 2 L
V
N
129.48 171 489.73 171 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 148
%%Page: "149" 149
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 257.89 710.84 T
(acing with For) 277.09 710.84 T
(tr) 331.56 710.84 T
(an :) 336.52 710.84 T
0 F
(13.1) 353.51 710.84 T
(Ov) 371.24 710.84 T
(er) 382.46 710.84 T
(vie) 390.39 710.84 T
(w) 401.46 710.84 T
6 10 Q
(149) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Interf) 108 642 S
-0.25 (acing with For) 192.91 642 S
-0.25 (tr) 434.52 642 S
-0.25 (an) 456.35 642 S
5 10 Q
-0.06 (Pro) 108 517.33 P
-0.06 (viding a type-safe Sather interf) 121.74 517.33 P
-0.06 (ace to F) 245.26 517.33 P
-0.06 (ortran 77 is desirable for se) 276.65 517.33 P
-0.06 (v) 385.23 517.33 P
-0.06 (eral reasons. There is a lar) 390.08 517.33 P
-0.06 (ge) 494.56 517.33 P
0.39 (body of well deb) 108 505.33 P
0.39 (ugged and well tested high performance F) 176.46 505.33 P
0.39 (ortran source code for v) 346.95 505.33 P
0.39 (arious kinds of) 443.78 505.33 P
0.88 (numerical computations. Man) 108 493.33 P
0.88 (y v) 229.32 493.33 P
0.88 (endors pro) 242.55 493.33 P
0.88 (vide v) 285.77 493.33 P
0.88 (ersions of lo) 311.22 493.33 P
0.88 (w le) 362.17 493.33 P
0.88 (v) 379.74 493.33 P
0.88 (el numerical F) 384.59 493.33 P
0.88 (ortran libraries) 443.97 493.33 P
0.15 (tuned for particular hardw) 108 481.33 P
0.15 (are platforms. F) 213.04 481.33 P
0.15 (ortran 77 BLAS ha) 276.79 481.33 P
0.15 (v) 353.42 481.33 P
0.15 (e become a) 358.27 481.33 P
10 F
0.15 (de facto) 406.2 481.33 P
5 F
0.15 ( standard for the) 438.29 481.33 P
-0.15 (elementary v) 108 469.33 P
-0.15 (ector and matrix operations. The e) 159.63 469.33 P
-0.15 (xternal F) 295.92 469.33 P
-0.15 (ortran interf) 331.45 469.33 P
-0.15 (ace pro) 379.24 469.33 P
-0.15 (vides a standard mecha-) 408.09 469.33 P
0.02 (nism for F) 108 457.33 P
0.02 (ortran procedures and data to be accessed from Sather and vice v) 149.55 457.33 P
0.02 (ersa. It enables a Sather) 409.24 457.33 P
-0.67 (programmer to e) 108 445.33 P
-0.67 (xploit the wealth of a) 173.16 445.33 P
-0.67 (v) 255.27 445.33 P
-0.67 (ailable numerical softw) 260.02 445.33 P
-0.67 (are in a type safe and portable manner) 352.45 445.33 P
-0.67 (.) 499.67 445.33 P
-0.28 (Se) 108 423.33 P
-0.28 (v) 117.75 423.33 P
-0.28 (eral important issues need to be resolv) 122.6 423.33 P
-0.28 (ed to pro) 274.08 423.33 P
-0.28 (vide interoperability between Sather and F) 308.92 423.33 P
-0.28 (ortran.) 477.62 423.33 P
(The issues are:) 108 411.33 T
2 F
(\245) 108 393.33 T
(name binding) 121.54 393.33 T
(\245) 108 378.33 T
(datatype mapping) 121.54 378.33 T
(\245) 108 363.33 T
(parameter passing) 121.54 363.33 T
5 F
0.33 (Section 13.1 introduces the Sather/F) 108 341.33 P
0.33 (ortran interf) 254.43 341.33 P
0.33 (ace and pro) 302.7 341.33 P
0.33 (vides a fe) 349.3 341.33 P
0.33 (w illustrati) 388.02 341.33 P
0.33 (v) 431.16 341.33 P
0.33 (e e) 436.01 341.33 P
0.33 (xamples. Sec-) 447.57 341.33 P
-0.24 (tion 13.2 talks about binding Sather entities to corresponding F) 108 329.33 P
-0.24 (ortran entities. Section 13.3 pro) 357.9 329.33 P
-0.24 (vides) 482.89 329.33 P
-0.29 (a mapping of "basic" Sather types to F) 108 317.33 P
-0.29 (ortran types. Section 13.4 e) 259.77 317.33 P
-0.29 (xplains ho) 367.86 317.33 P
-0.29 (w ar) 408.71 317.33 P
-0.29 (guments in a Sather) 425.73 317.33 P
0.12 (call are passed to a F) 108 305.33 P
0.12 (ortran procedure or function that implements the feature. Finally) 192.06 305.33 P
0.12 (, section 13.5) 450.42 305.33 P
(talks about v) 108 293.33 T
(arious portability issues.) 158.86 293.33 T
108 231.98 504 235 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 233.49 540 233.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(13.1  Over) 108 241 T
(vie) 194.24 241 T
(w) 218.99 241 T
5 10 Q
-0.07 (Sather 1.1 pro) 108 212.31 P
-0.07 (vides an interf) 164.08 212.31 P
-0.07 (ace to a superset of F) 221.05 212.31 P
-0.07 (ortran 77 \050ANSI X3.9-1978\051. The interoperability) 305.23 212.31 P
0.03 (with F) 108 200.31 P
0.03 (ortran code is achie) 133.72 200.31 P
0.03 (v) 211.58 200.31 P
0.03 (ed with the help of e) 216.43 200.31 P
0.03 (xternal F) 298.35 200.31 P
0.03 (ortran classes. External F) 334.06 200.31 P
0.03 (ortran classes are) 435.08 200.31 P
-0.22 (used to implement a strongly typed bidirectional Sather/F) 108 188.31 P
-0.22 (ortran interf) 336.55 188.31 P
-0.22 (ace. The e) 384.26 188.31 P
-0.22 (xtended library pro-) 424.47 188.31 P
0.03 (vides a set of b) 108 176.31 P
0.03 (uilt-in classes corresponding to all F) 167.92 176.31 P
0.03 (ortran 77 types. Signatures of all inter) 313.2 176.31 P
0.03 (-language) 464.57 176.31 P
(calls must contain only these b) 108 164.31 T
(uilt-in classes as ar) 230.85 164.31 T
(gument or return types.) 306.49 164.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 149
%%Page: "150" 150
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(150) 108 710.84 T
8 8 Q
(Interf) 240.76 710.84 T
(acing with For) 259.96 710.84 T
(tr) 314.42 710.84 T
(an :) 319.38 710.84 T
0 F
(13.1 Ov) 336.37 710.84 T
(er) 365.32 710.84 T
(vie) 373.25 710.84 T
(w) 384.32 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(13.1.1   External For) 108 658 T
(tran Call Example) 221.63 658 T
5 10 Q
0.09 (The k) 108 635.33 P
0.09 (e) 131.04 635.33 P
0.09 (yw) 135.33 635.33 P
0.09 (ords) 147.45 635.33 P
7 F
0.1 ( \325external\325) 164.67 635.33 P
5 F
0.09 (and) 210.45 635.33 P
7 F
0.1 (\325FORTRAN\325) 227.48 635.33 P
5 F
0.09 ( preceding) 280.25 635.33 P
7 F
0.1 ( \325class\325) 322.27 635.33 P
5 F
0.09 ( indicate that some class features may) 352.37 635.33 P
0.34 (be implemented e) 108 623.33 P
0.34 (xternally in F) 179.63 623.33 P
0.34 (ortran and some other features are compiled in a w) 234.05 623.33 P
0.34 (ay that mak) 440.03 623.33 P
0.34 (es it) 487.27 623.33 P
-0.14 (possible to call them from F) 108 611.33 P
-0.14 (ortran. An e) 219.63 611.33 P
-0.14 (xample of a simple call to a F) 267.24 611.33 P
-0.14 (ortran function is gi) 384.68 611.33 P
-0.14 (v) 463.16 611.33 P
-0.14 (en belo) 468.01 611.33 P
-0.14 (w) 496.78 611.33 P
7 F
0.43 (F_INTEGER) 108 423.33 P
5 F
0.39 ( is a b) 164.12 423.33 P
0.39 (uilt-in type representing F) 188.7 423.33 P
0.39 (ortran inte) 293.88 423.33 P
0.39 (gers. A full list of b) 335.51 423.33 P
0.39 (uiltin-in F) 415.59 423.33 P
0.39 (ortran types) 456.12 423.33 P
-0.33 (will be gi) 108 411.33 P
-0.33 (v) 144.86 411.33 P
-0.33 (en in section Datatype Mapping on page 156. Standard libraries pro) 149.71 411.33 P
-0.33 (vide a set of construc-) 417.02 411.33 P
-0.06 (tors and con) 108 399.33 P
-0.06 (v) 156.37 399.33 P
-0.06 (ersion routines for con) 161.21 399.33 P
-0.06 (v) 250.9 399.33 P
-0.06 (ersion from Sather to F) 255.75 399.33 P
-0.06 (ortran types and vice v) 348.14 399.33 P
-0.06 (ersa. The de\336ni-) 438.85 399.33 P
-0.43 (tion of feature) 108 387.33 P
7 F
-0.48 (\325foo\325) 165.87 387.33 P
5 F
-0.43 ( in e) 184.21 387.33 P
-0.43 (xternal class FOO looks similar to abstract signatures in abstract classes. The) 200.42 387.33 P
-0.05 (implementation of e) 108 375.33 P
-0.05 (xternal classes methods without bodies is assumed to be gi) 188.31 375.33 P
-0.05 (v) 422.36 375.33 P
-0.05 (en in a correspond-) 427.21 375.33 P
-0.47 (ing language \050F) 108 363.33 P
-0.47 (ortran in the case of \325foo\325.\051 Such abstract signatures specify the interf) 169.69 363.33 P
-0.47 (ace from Sather) 441.62 363.33 P
(code to F) 108 351.33 T
(ortran code.) 145.07 351.33 T
4 12 Q
(13.1.2   Overall Or) 108 310 T
(ganization) 209.22 310 T
5 10 Q
0.05 (External F) 108 287.33 P
0.05 (ortran classes are used to pro) 149.84 287.33 P
0.05 (vide both Sather/F) 265.75 287.33 P
0.05 (ortran and F) 339.59 287.33 P
0.05 (ortran/Sather interf) 388.42 287.33 P
0.05 (aces.  Ex-) 464.75 287.33 P
-0.17 (ternal F) 108 275.33 P
-0.17 (ortran classes can contain methods of tw) 138.51 275.33 P
-0.17 (o kinds: bodyless routines indicating e) 299.6 275.33 P
-0.17 (xternally im-) 452.23 275.33 P
-0.36 (plemented features and methods with code bodies some of which could be called from F) 108 263.33 P
-0.36 (ortran code.) 456.6 263.33 P
0.87 (External F) 108 251.33 P
0.87 (ortran classes cannot be instantiated and e) 150.66 251.33 P
0.87 (xist only to pro) 323.49 251.33 P
0.87 (vide a bidirectional interf) 386.79 251.33 P
0.87 (ace) 490.68 251.33 P
(from Sather to F) 108 239.33 T
(ortran.) 173.68 239.33 T
0.94 (Only routines may ha) 108 217.33 P
0.94 (v) 196.99 217.33 P
0.94 (e no body in the e) 201.84 217.33 P
0.94 (xternal F) 277.74 217.33 P
0.94 (ortran classes \050not iterators\051. Bodyess routines) 314.36 217.33 P
0.44 (specify the interf) 108 205.33 P
0.44 (ace for Sather code \050both in e) 176.53 205.33 P
0.44 (xternal and "re) 296.74 205.33 P
0.44 (gular" Sather classes\051 to call F) 356.53 205.33 P
0.44 (ortran) 480.12 205.33 P
0.77 (code. The) 108 193.33 P
0.77 (y ha) 148.05 193.33 P
0.77 (v) 165.55 193.33 P
0.77 (e Sather signatures corresponding to the F) 170.4 193.33 P
0.77 (ortran functions and subroutines imple-) 343.17 193.33 P
0.56 (menting these features.  Calls to such routines are compiled using the F) 108 181.33 P
0.56 (ortran style name binding) 399.83 181.33 P
0.77 (and parameter passing con) 108 169.33 P
0.77 (v) 216.28 169.33 P
0.77 (ention. The full correspondence between F) 221.13 169.33 P
0.77 (ortran 77 types and Sather) 395.92 169.33 P
(b) 108 157.33 T
(uilt-in F) 112.8 157.33 T
(ortran classes is gi) 145.16 157.33 T
(v) 218.51 157.33 T
(en in section Datatype Mapping on page 156.) 223.36 157.33 T
-0.57 (Methods with bodies in e) 108 135.33 P
-0.57 (xternal F) 206.67 135.33 P
-0.57 (ortran classes serv) 241.77 135.33 P
-0.57 (e a dual purpose. Methods whose ar) 313.79 135.33 P
-0.57 (guments and) 453.74 135.33 P
0.3 (return types are a combination of Sather and e) 108 123.33 P
0.3 (xternal F) 294.62 123.33 P
0.3 (ortran types are merely helper routines and) 330.6 123.33 P
0.07 (iterators whose semantics is the same as that of re) 108 111.33 P
0.07 (gular routines and iterators. The) 307.6 111.33 P
0.07 (y could be called) 435.75 111.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(external FORTRAN class FOO is) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   foo\050a:F_INTEGER,b:F_INTEGER\051:F_INTEGER;) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- a feature with a missing body is implemented externally) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- in Fortran.) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- Fortran definition:) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- INTEGER FUNCTION foo\050A,B\051) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- INTEGER A) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- INTEGER B) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- ...) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- a call to an externally defined Fortran function) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i:F_INTEGER := FOO::foo\050#F_INTEGER\0501\051, #F_INTEGER\0502\051\051;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- #F_INTEGER\0501\051 creates a variable of Fortran type F_INTEGER and) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--  initializes it to 1,) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- #F_INTEGER\0502\051 does a similar job,but initializes a new variable to 2) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 599.88 129.6 442.13 2 L
V
0 Z
N
489.6 599.88 489.6 442.13 2 L
V
N
129.48 600 489.73 600 2 L
V
N
129.48 442 489.73 442 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 150
%%Page: "151" 151
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 257.89 710.84 T
(acing with For) 277.09 710.84 T
(tr) 331.56 710.84 T
(an :) 336.52 710.84 T
0 F
(13.1) 353.51 710.84 T
(Ov) 371.24 710.84 T
(er) 382.46 710.84 T
(vie) 390.39 710.84 T
(w) 401.46 710.84 T
6 10 Q
(151) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.37 (from an) 108 659.33 P
0.37 (y Sather or e) 139.6 659.33 P
0.37 (xternal classes and such calls support the Sather name binding and parameter) 191.38 659.33 P
(passing con) 108 647.33 T
(v) 154.54 647.33 T
(ention. Code for such methods can contain all sorts of calls without restrictions.) 159.39 647.33 T
-0.32 (If all ar) 108 625.33 P
-0.32 (gument types and a return type, if an) 136.6 625.33 P
-0.32 (y) 280.82 625.33 P
-0.32 (, in a routine with a body are b) 285.17 625.33 P
-0.32 (uilt-in F) 404.85 625.33 P
-0.32 (ortran types \050e.g.) 436.89 625.33 P
0.24 (F_INTEGER, F_REAL, etc.\051 , such routines are meant to be callable from F) 108 613.33 P
0.24 (ortran. The) 416.24 613.33 P
0.24 (y are com-) 460.76 613.33 P
-0.37 (piled using the F) 108 601.33 P
-0.37 (ortran name binding and parameter passing con) 173.7 601.33 P
-0.37 (v) 361.07 601.33 P
-0.37 (ention. In f) 365.92 601.33 P
-0.37 (act, the) 409.25 601.33 P
-0.37 (y could be freely) 437.62 601.33 P
-0.04 (substituted for F) 108 589.33 P
-0.04 (ortran 77 subroutines and functions that perform the same functions. Such routines) 173.34 589.33 P
-0.41 (could be also called from Sather code, b) 108 577.33 P
-0.41 (ut these calls will also support the F) 265.42 577.33 P
-0.41 (ortran parameter passing) 405.97 577.33 P
0.24 (con) 108 565.33 P
0.24 (v) 122.04 565.33 P
0.24 (ention which is often less ef) 126.89 565.33 P
0.24 (\336cient relati) 239.75 565.33 P
0.24 (v) 287.79 565.33 P
0.24 (e to re) 292.64 565.33 P
0.24 (gular Sather calls. There are no restrictions on) 317.95 565.33 P
-0.43 (the implementation of these function: the) 108 553.33 P
-0.43 (y can freely use internally an) 270.41 553.33 P
-0.43 (y methods implemented either) 383.91 553.33 P
(in Sather or F) 108 541.33 T
(ortran. Routines which are meant to be called from F) 162.57 541.33 T
(ortran cannot be o) 374.05 541.33 T
(v) 446.38 541.33 T
(erloaded.) 451.23 541.33 T
1 (In the diagram, arro) 108 519.33 P
1 (ws indicate the direction of calls. F) 190.17 519.33 P
1 (or e) 336.27 519.33 P
1 (xample, an arro) 352.39 519.33 P
1 (w connecting F) 416.61 519.33 P
1 (ortran) 480.12 519.33 P
-0.34 (classes with bodyless routines in External classes indicate calls in the re) 108 507.33 P
-0.34 (gular Sather code to abstract) 391.52 507.33 P
-0.09 (routines in the e) 108 495.33 P
-0.09 (xternal F) 171.74 495.33 P
-0.09 (ortran classes. The type of the arro) 207.34 495.33 P
-0.09 (w demonstrates that such calls are com-) 345.12 495.33 P
-0.53 (piled using the F) 108 483.33 P
-0.53 (ortran style call name binding and parameter passing con) 173.21 483.33 P
-0.53 (v) 396.85 483.33 P
-0.53 (ention. On the other hand,) 401.7 483.33 P
0.16 (calls from routines with bodies in the e) 108 471.33 P
0.16 (xternal F) 264.78 471.33 P
0.16 (ortran classes into re) 300.61 471.33 P
0.16 (gular Sather classes are repre-) 383.42 471.33 P
0.03 (sented by a solid arro) 108 459.33 P
0.03 (w which denotes the Sather call name binding and parameter passing con) 193.42 459.33 P
0.03 (v) 486.38 459.33 P
0.03 (en-) 491.23 459.33 P
(tion.) 108 447.33 T
108 136 504 422 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
153 341 207 413 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
387 341 441 413 R
4 X
V
0 X
N
252 152 342 359 R
7 X
V
0 X
N
261 296 333 341 R
4 X
V
0 X
N
261 161 333 278 R
5 X
V
0 X
N
270 170 324 215 R
4 X
V
0 X
N
5 10 Q
(Sather) 162 395 T
(classes) 162 385 T
(F) 396 397.17 T
(ortran) 401.41 397.17 T
(code) 396 385 T
(External F) 254.39 352.17 T
(ortran class) 296.18 352.17 T
(bodiless) 282.22 325.17 T
(routines) 282.78 316.17 T
(Methods with) 270 269 T
(bodies) 270 259 T
(\325F) 279 206 T
(ortran\325) 287.74 206 T
(routines) 279 196 T
270 224 324 251 R
7 X
V
0 X
N
(\325Sather\325) 279 244.17 T
(methods) 279 235.17 T
J
258.95 324.68 259.57 327.6 269.11 322.52 258.33 321.77 4 Y
0 Z
N
258.95 324.68 259.57 327.6 269.11 322.52 258.33 321.77 4 Y
V
[7.5 6.5] 3.75 I
198 395 M
 217.26 397.16 223.04 369.49 229.15 356.33 D
 235.73 342.18 244.73 327.7 258.7 324.73 D
2 Z
N
J
333.83 198.58 334.25 195.63 323.57 197.13 333.42 201.52 4 Y
0 Z
N
333.83 198.58 334.25 195.63 323.57 197.13 333.42 201.52 4 Y
V
[7.593 6.581] 3.797 I
423 363.33 M
 371.12 335.07 378.01 283.55 369.35 241.67 D
 366.05 225.73 356.48 201.78 334.08 198.61 D
2 Z
N
J
258.74 197.42 258.85 200.39 269.09 197.03 258.63 194.45 4 Y
0 Z
N
258.74 197.42 258.85 200.39 269.09 197.03 258.63 194.45 4 Y
V
[7.695 6.669] 3.848 I
197.33 358.73 M
 234.76 345.99 204.19 310.16 197.33 286.73 D
 190 261.67 189 227.02 207 215 D
 222.01 204.97 240.8 198.09 258.49 197.43 D
2 Z
N
J
324.9 211.43 326.33 208.82 315.8 206.44 323.47 214.04 4 Y
0 Z
N
324.9 211.43 326.33 208.82 315.8 206.44 323.47 214.04 4 Y
V
[8.099 7.019] 4.049 I
324 233 M
 338.92 229.64 335.59 217.29 325.12 211.55 D
2 Z
N
J
333.12 312.49 332.23 309.64 323.21 315.61 334.02 315.33 4 Y
0 Z
N
333.12 312.49 332.23 309.64 323.21 315.61 334.02 315.33 4 Y
V
[8.028 6.958] 4.014 I
315 236.89 M
 333.6 233 349.73 248.67 350.81 266.55 D
 351.86 284.18 350.44 307.03 333.36 312.41 D
2 Z
N
J
341.38 328.46 340.45 325.64 331.53 331.72 342.31 331.29 4 Y
0 Z
N
341.38 328.46 340.45 325.64 331.53 331.72 342.31 331.29 4 Y
V
[7.24 6.275] 3.62 I
324 204 M
 356.9 226.55 378.22 272.03 360.85 310.67 D
 356.9 319.46 350.01 325.61 341.62 328.38 D
2 Z
N
J
263.5 239.87 263.91 242.82 273.77 238.46 263.1 236.93 4 Y
0 Z
N
263.5 239.87 263.91 242.82 273.77 238.46 263.1 236.93 4 Y
V
208.81 373.86 207.98 371.01 198.87 376.75 209.64 376.71 4 Y
N
208.81 373.86 207.98 371.01 198.87 376.75 209.64 376.71 4 Y
V
209.05 373.79 M
 227.83 368.33 231.88 333.12 235.44 315 D
 240.22 290.59 235.06 243.79 263.25 239.91 D
N
263.52 229.3 263.08 232.23 273.77 230.86 263.97 226.36 4 Y
N
263.52 229.3 263.08 232.23 273.77 230.86 263.97 226.36 4 Y
V
270 206 M
 256.33 210.88 253.36 227.74 263.28 229.26 D
2 Z
N
J
312.62 158.69 309.89 157.51 308.53 168.23 315.36 159.86 4 Y
0 Z
N
312.62 158.69 309.89 157.51 308.53 168.23 315.36 159.86 4 Y
V
[7.105 6.158] 3.553 I
288.17 173.73 M
 272.14 172.39 273.96 155.63 286.84 148.89 D
 294.77 144.74 316.04 150.72 312.72 158.46 D
2 Z
N
J
183.45 349.87 181.22 347.91 176.6 357.65 185.68 351.83 4 Y
0 Z
N
183.45 349.87 181.22 347.91 176.6 357.65 185.68 351.83 4 Y
V
162 359 M
 140.45 360.35 141.11 323.17 153 314 D
 164.67 305 185.22 312.91 189 332 D
 190.81 341.14 187.8 344.93 183.61 349.68 D
2 Z
N
329.79 244.54 330.9 241.78 320.17 240.67 328.68 247.3 4 Y
0 Z
N
329.79 244.54 330.9 241.78 320.17 240.67 328.68 247.3 4 Y
V
306 251 M
 307.91 263.77 329.39 264.59 331.95 251 D
 332.48 248.22 332.06 245.46 330.02 244.64 D
2 Z
N
10 7 Q
(Sather interface to) 270 305 T
(  F) 282.25 298 T
(ortr) 289.29 298 T
(an) 300.08 298 T
(F) 277.33 180.52 T
(ortr) 280.87 180.52 T
(an interface) 291.66 180.52 T
(to Sather) 284.25 172 T
(helper) 288 228.22 T
(s) 305.82 228.22 T
J
423.15 343.42 420.27 344.17 425.77 353.46 426.03 342.67 4 Y
0 Z
N
423.15 343.42 420.27 344.17 425.77 353.46 426.03 342.67 4 Y
V
[7.819 6.777] 3.91 I
432 359 M
 460 358.33 470.67 326.33 454 315.6 D
 443.3 308.71 421.33 314.78 423 332 D
 423.44 336.59 422.27 340.04 423.09 343.17 D
2 Z
N
J
389.72 358.13 387.38 359.96 396.11 366.29 392.06 356.3 4 Y
0 Z
N
389.72 358.13 387.38 359.96 396.11 366.29 392.06 356.3 4 Y
V
[1.514 4.541] 0.757 I
324 332 M
 324.17 356.37 355.73 340.78 369.33 343.79 D
 377.84 345.67 384.38 351.32 389.56 357.93 D
2 Z
N
J
203.78 347.52 201.8 345.3 196.01 354.4 205.75 349.75 4 Y
0 Z
N
203.78 347.52 201.8 345.3 196.01 354.4 205.75 349.75 4 Y
V
270 188 M
 239.03 184.47 197.59 200.84 184.98 231 D
 170.48 265.66 198.05 294.45 204.55 327.67 D
 205.67 333.37 208.8 343.07 203.96 347.36 D
2 Z
N
384.71 197 384.71 199.98 395.09 197 384.71 194.02 4 Y
0 Z
N
384.71 197 384.71 199.98 395.09 197 384.71 194.02 4 Y
V
369 197 384.46 197 2 L
2 Z
N
2 10 Q
(Sather) 405 199.81 T
J
384.71 161 384.71 163.98 395.09 161 384.71 158.02 4 Y
0 Z
N
384.71 161 384.71 163.98 395.09 161 384.71 158.02 4 Y
V
J
369 161 384.46 161 2 L
J
369 161 369.75 161 2 L
2 Z
N
[1.27 3.809] 1.27 I
369.75 161 383.71 161 2 L
N
J
383.71 161 384.46 161 2 L
N
J
384.71 179 384.71 181.98 395.09 179 384.71 176.02 4 Y
0 Z
N
384.71 179 384.71 181.98 395.09 179 384.71 176.02 4 Y
V
J
369 179 384.46 179 2 L
J
369 179 372.75 179 2 L
2 Z
N
[9.191 7.965] 9.191 I
372.75 179 380.71 179 2 L
N
J
380.71 179 384.46 179 2 L
N
(Fortran) 405 179 T
(Call name binding and) 369 225.74 T
(parameter passing convention) 369 215.67 T
(Mapping of Sather) 405 161 T
(bodiless r) 405 150.93 T
(outines to) 447.46 150.93 T
(Fortran) 405 140.86 T
J
(Arr) 396 260 T
(ows indicate call) 411.5 260 T
(dir) 396 249.93 T
(ections) 408.79 249.93 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 151
%%Page: "152" 152
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(152) 108 710.84 T
8 8 Q
(Interf) 240.76 710.84 T
(acing with For) 259.96 710.84 T
(tr) 314.42 710.84 T
(an :) 319.38 710.84 T
0 F
(13.1 Ov) 336.37 710.84 T
(er) 365.32 710.84 T
(vie) 373.25 710.84 T
(w) 384.32 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.3 (In this e) 108 372.33 P
-0.3 (xample, a F) 139.47 372.33 P
-0.3 (ortran function implementing \325foo\325 is called in Sather code as if it were a re) 185.66 372.33 P
-0.3 (gular) 483.45 372.33 P
0.15 (Sather routine: FOO::foo\050i,a,c\051. Ho) 108 360.33 P
0.15 (we) 249.3 360.33 P
0.15 (v) 260.71 360.33 P
0.15 (er) 265.56 360.33 P
0.15 (, the call is generated using the F) 272.93 360.33 P
0.15 (ortran name binding and) 405.5 360.33 P
-0.02 (parameter passing con) 108 348.33 P
-0.02 (v) 196.98 348.33 P
-0.02 (ention. Calls to \325bar\325 are compiled in a similar f) 201.83 348.33 P
-0.02 (ashion; ho) 392.09 348.33 P
-0.02 (we) 433.21 348.33 P
-0.02 (v) 444.62 348.33 P
-0.02 (er) 449.47 348.33 P
-0.02 (, it could be) 456.84 348.33 P
-0.09 (called from both Sather or e) 108 336.33 P
-0.09 (xternal F) 219.34 336.33 P
-0.09 (ortran code. Finally) 254.94 336.33 P
-0.09 (, \325helper\325 has both Sather and e) 332.72 336.33 P
-0.09 (xternal F) 456.74 336.33 P
-0.09 (or-) 492.34 336.33 P
(tran types as ar) 108 324.33 T
(guments and therefore could be called from Sather code only) 168.08 324.33 T
(.) 411.54 324.33 T
4 F
(P) 108 296.33 T
(oints to note) 114.27 296.33 T
5 F
(\245) 108 280.33 T
(External F) 121.54 280.33 T
(ortran class routines without bodies \050abstract signatures\051 pro) 163.33 280.33 T
(vide Sather/F) 404.53 280.33 T
(ortran in-) 457.99 280.33 T
(terf) 121.54 268.33 T
(ace.) 135.32 268.33 T
(\245) 108 253.33 T
(Routines with bodies could be called from F) 121.54 253.33 T
(ortran if and only if their signatures contain only) 298.88 253.33 T
(b) 121.54 241.33 T
(uilt-in F) 126.34 241.33 T
(ortran types. Such routines can be also called from Sather) 158.7 241.33 T
(. Ho) 388.66 241.33 T
(we) 405.63 241.33 T
(v) 417.04 241.33 T
(er) 421.89 241.33 T
(, re) 429.26 241.33 T
(g) 441.88 241.33 T
(ardless of the) 446.83 241.33 T
(w) 121.54 229.33 T
(ay the) 128.66 229.33 T
(y are called, the) 152.67 229.33 T
(y al) 215.83 229.33 T
(w) 230.45 229.33 T
(ays support the F) 237.57 229.33 T
(ortran style name binding and parameter passing) 306.03 229.33 T
(con) 121.54 217.33 T
(v) 135.58 217.33 T
(ention.) 140.43 217.33 T
(\245) 108 202.33 T
(Methods with bodies whose signatures ha) 121.54 202.33 T
(v) 288.27 202.33 T
(e non-F) 293.12 202.33 T
(ortran types are re) 323.8 202.33 T
(gular Sather methods.) 396.12 202.33 T
(The) 121.54 190.33 T
(y could be used as helper methods for the interf) 136.94 190.33 T
(ace classes. The) 327.08 190.33 T
(y al) 391.07 190.33 T
(w) 405.69 190.33 T
(ays support Sather) 412.81 190.33 T
(style name binding and parameter passing.) 121.54 178.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(-- This is a Fortran definition for FOO) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(INTEGER FUNCTION FOO\050I,A,C\051) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(INTEGER I) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(REAL A) 144 612.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(CHARACTER C) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(....) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(END) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(external FORTRAN class FOO is) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this routine is implemented externally in Fortran and could) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- be called in Sather like this: tmp::=FOO::foo\050i,a,c\051) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   foo\050i:F_INTEGER,a:F_REAL,c:F_CHARACTER\051:F_INTEGER;) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this routine could be called from both Sather and Fortran) 144 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- all calls to bar \050either from Sather or Fortran\051 use the) 144 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- Fortran 77 parameter passing convention) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   bar\050i:F_INTEGER,a:F_REAL\051 is) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ...) 144 486.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this routine can only be called in Sather since) 144 459.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- argument size has a Sather type) 144 450.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   helper\050arr:F_ARRAY{F_INTEGER}, size:INT\051 is) 144 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ...) 144 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      t::=foo\050i,a,c\051;  --call uses Fortran parameter passing convention) 144 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      bar\050t,a\051;        --Fortran convention, but implemented in Sather) 144 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 405.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 396.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 391.13 2 L
V
0 Z
N
489.6 647.88 489.6 391.13 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 391 489.73 391 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 152
%%Page: "153" 153
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 248.97 710.84 T
(acing with For) 268.17 710.84 T
(tr) 322.63 710.84 T
(an :) 327.59 710.84 T
0 F
(13.2) 344.58 710.84 T
(Name Binding) 362.31 710.84 T
6 10 Q
(153) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(13.2  Name Binding) 108 654 T
5 10 Q
0.09 (Symbols for Sather calls to F) 108 625.31 P
0.09 (ortran code need to be generated in e) 224.69 625.31 P
0.09 (xactly the same w) 372.63 625.31 P
0.09 (ay as a F) 444.73 625.31 P
0.09 (ortran) 480.12 625.31 P
-0 (77  compile w) 108 613.31 P
-0 (ould. This is also necessary for the names of routines intended to be called from F) 164.83 613.31 P
-0 (or-) 492.34 613.31 P
0.03 (tran. This is dif) 108 601.31 P
0.03 (\336cult to ensure in a portable w) 168.94 601.31 P
0.03 (ay since neither Sather nor F) 290.65 601.31 P
0.03 (ortran 77 language spec-) 405.34 601.31 P
0.09 (i\336cation prescribes an) 108 589.31 P
0.09 (y symbol binding con) 195.79 589.31 P
0.09 (v) 282.62 589.31 P
0.09 (ention and the name mangling strate) 287.47 589.31 P
0.09 (gy is usually v) 433.04 589.31 P
0.09 (ery) 491.23 589.31 P
-0.2 (sensiti) 108 577.31 P
-0.2 (v) 133.31 577.31 P
-0.2 (e to particular F) 138.16 577.31 P
-0.2 (ortran platforms. Sather 1.1 attempts to solv) 201.01 577.31 P
-0.2 (e the name biding problem in an) 375.77 577.31 P
(easy to use, b) 108 565.31 T
(ut suf) 161.68 565.31 T
(\336ciently general manner) 183.93 565.31 T
(.) 280.58 565.31 T
4 12 Q
(13.2.1   Dif\336culties) 108 523.98 T
5 10 Q
-0.55 (V) 108 501.31 P
-0.55 (arious naming issues ha) 114.11 501.31 P
-0.55 (v) 207.52 501.31 P
-0.55 (e to be resolv) 212.37 501.31 P
-0.55 (ed to pro) 264.17 501.31 P
-0.55 (vide seamless platform independent interoperability) 298.46 501.31 P
-0.51 (between Sather and F) 108 489.31 P
-0.51 (ortran. Neither Sather nor F) 192.69 489.31 P
-0.51 (ortran speci\336es a w) 301.32 489.31 P
-0.51 (ay to mangle symbols generated) 377.17 489.31 P
0.33 (for the linking stage. Moreo) 108 477.31 P
0.33 (v) 221.09 477.31 P
0.33 (er) 225.94 477.31 P
0.33 (, v) 233.31 477.31 P
0.33 (arious F) 243.38 477.31 P
0.33 (ortran compilers adopt v) 276.06 477.31 P
0.33 (astly dif) 374.83 477.31 P
0.33 (ferent naming strate) 407.41 477.31 P
0.33 (gies) 487.89 477.31 P
-0.35 (and, in general, it is impossible to link together object \336les generated by dif) 108 465.31 P
-0.35 (ferent F) 405.15 465.31 P
-0.35 (ortran compilers.) 436.03 465.31 P
1.03 (Unfortunately) 108 453.31 P
1.03 (, this is the case e) 163.45 453.31 P
1.03 (v) 238.32 453.31 P
1.03 (en for relati) 243.18 453.31 P
1.03 (v) 291.63 453.31 P
1.03 (ely mainstream platforms: for instance, A) 296.48 453.31 P
1.03 (T&T f77) 467.14 453.31 P
(compiler name mangling is v) 108 441.31 T
(ery dif) 224.51 441.31 T
(ferent from that of Sun\325) 250.64 441.31 T
(s f77 compiler) 345.07 441.31 T
(.) 402.29 441.31 T
(This is an incomplete list of v) 108 419.31 T
(arious F) 226.64 419.31 T
(ortran 77 naming  practices) 258.99 419.31 T
(\245) 108 401.31 T
(long names may be truncated at v) 121.54 401.31 T
(arious lengths) 255.71 401.31 T
(\245) 108 386.31 T
(F) 121.54 386.31 T
(ortran names may ha) 126.95 386.31 T
(v) 210.34 386.31 T
(e one \050most common\051 or tw) 215.19 386.31 T
(o underscores appended) 325.91 386.31 T
(\245) 108 371.31 T
(F) 121.54 371.31 T
(ortran names are usually forced to lo) 126.95 371.31 T
(wer case) 273.33 371.31 T
(\245) 108 356.31 T
(e) 121.54 356.31 T
(xternal names \050e) 125.83 356.31 T
(xternal procedures and common blocks\051 may be mangled dif) 191.77 356.31 T
(ferently from in-) 434.25 356.31 T
(ternal names \050v) 121.54 344.31 T
(arious number of trailing underscores, etc.\051) 182.94 344.31 T
0.47 (The Sather symbols may be generated using quite dif) 108 322.31 P
0.47 (ferent naming con) 324.3 322.31 P
0.47 (v) 397.61 322.31 P
0.47 (entions. F) 402.46 322.31 P
0.47 (or instance, the) 442.23 322.31 P
-0 (ICSI Sather 1.1 compiler generates symbols for Sather routine and iterator names by concatenating) 108 310.31 P
0.59 (a class name \050including class parameters\051 with a routine name, truncating the resulting name to a) 108 298.31 P
-0.28 (length speci\336ed at the compiler con\336guration/installation step and appending a number at the end to) 108 286.31 P
-0.04 (mak) 108 274.31 P
-0.04 (e the name unique. Other Sather implementations are free to choose an) 125.12 274.31 P
-0.04 (y name binding con) 407.75 274.31 P
-0.04 (v) 486.38 274.31 P
-0.04 (en-) 491.23 274.31 P
(tion.) 108 262.31 T
0.44 (The set of problems we ha) 108 240.31 P
0.44 (v) 215.8 240.31 P
0.44 (e to deal with is the same set of problems that needs to be resolv) 220.65 240.31 P
0.44 (ed to) 483.84 240.31 P
0.43 (pro) 108 228.31 P
0.43 (vide interoperability between F) 121.18 228.31 P
0.43 (ortran and such an "old" language as C. T) 247.58 228.31 P
0.43 (o this day) 416.95 228.31 P
0.43 (, there is no) 456.05 228.31 P
0.57 (standard or e) 108 216.31 P
0.57 (v) 160.54 216.31 P
0.57 (en a concrete proposal to resolv) 165.38 216.31 P
0.57 (e F77/C, HPF/C or F95/C name binding issues in a) 294.98 216.31 P
(platform independent f) 108 204.31 T
(ashion.) 199.55 204.31 T
-0.39 (The Sather 1.1 implementation deals with the naming issues in a more fundamental f) 108 182.31 P
-0.39 (ashion, in some) 442.27 182.31 P
(respects,  than an) 108 170.31 T
(y of the mentioned e) 176.72 170.31 T
(xternal interf) 258.78 170.31 T
(ace proposals.) 310.61 170.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 153
%%Page: "154" 154
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(154) 108 710.84 T
8 8 Q
(Interf) 231.83 710.84 T
(acing with For) 251.03 710.84 T
(tr) 305.5 710.84 T
(an :) 310.46 710.84 T
0 F
(13.2 Name Binding) 327.45 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(13.2.2   Implementation) 108 658 T
5 10 Q
0.42 (The name mangling strate) 108 635.33 P
0.42 (gy for e) 213.25 635.33 P
0.42 (xternal F) 245.03 635.33 P
0.42 (ortran names generated by Sather is set at the compiler) 281.13 635.33 P
-0.22 (con\336guration time. Thus, to mo) 108 623.33 P
-0.22 (v) 233.66 623.33 P
-0.22 (e a mix) 238.51 623.33 P
-0.22 (ed language program or library from one platform to anoth-) 267.37 623.33 P
-0.1 (er) 108 611.33 P
-0.1 (, it is only necessary to recon\336gure the Sather compiler at the compiler installation time to inform) 115.37 611.33 P
0.66 (it about the naming con) 108 599.33 P
0.66 (v) 204.69 599.33 P
0.66 (ention of the F) 209.54 599.33 P
0.66 (ortran compiler on the ne) 269.99 599.33 P
0.66 (w platform. All user and library) 373.48 599.33 P
(code will continue w) 108 587.33 T
(orking as is.) 191.5 587.33 T
0.02 (There are at least three potential w) 108 565.33 P
0.02 (ays to insure the portability of name binding. The simplest \050con-) 246.31 565.33 P
-0.12 (ceptually) 108 553.33 P
-0.12 (, not practically!\051 w) 144.01 553.33 P
-0.12 (ay is to k) 222.4 553.33 P
-0.12 (eep a list of all kno) 258.32 553.33 P
-0.12 (wn F) 333.82 553.33 P
-0.12 (ortran compilers and used name man-) 353.83 553.33 P
1.49 (gling con) 108 541.33 P
1.49 (v) 146.59 541.33 P
1.49 (entions. The Sather compiler should be able to implement an) 151.44 541.33 P
1.49 (y of the possible name) 408.04 541.33 P
0.15 (binding strate) 108 529.33 P
0.15 (gies. This solution w) 162.72 529.33 P
0.15 (as adopted \050not implemented!\051 by the HPFF proposal to pro) 246.42 529.33 P
0.15 (vide) 486.78 529.33 P
(HPPF/C interoperability) 108 517.33 T
(. Problems with this approach:) 204.86 517.33 T
(\245) 108 499.33 T
(w) 121.54 499.33 T
(orks only with the e) 128.66 499.33 T
(xisting compilers for other languages. A ne) 207.95 499.33 T
(w compiler cannot be support) 380.73 499.33 T
(unless major modi\336cations to the e) 121.54 487.33 T
(xisting tools are performed.) 261.11 487.33 T
(\245) 108 472.33 T
(adds lots of comple) 121.54 472.33 T
(xity to the Sather compiler as it must kno) 199.44 472.33 T
(w man) 364.19 472.33 T
(y things about common) 390.98 472.33 T
(F) 121.54 460.33 T
(ortran compilers) 126.95 460.33 T
(\245) 108 445.33 T
(mo) 121.54 445.33 T
(ving to a ne) 134.17 445.33 T
(w F) 180.86 445.33 T
(ortran platform may potentially require lar) 195.99 445.33 T
(ge modi\336cations to the Sather) 365.5 445.33 T
(compiler internals as the mangling decisions for special cases are hardcoded in the Sather com-) 121.54 433.33 T
(piler) 121.54 421.33 T
0.27 (Another solution that tries to simplify Sather compiler comple) 108 399.33 P
0.27 (xity is to add a "F) 358.86 399.33 P
0.27 (ortran name bind") 431.07 399.33 P
0.07 (directi) 108 387.33 P
0.07 (v) 133.3 387.33 P
0.07 (e to the Sather language. This directi) 138.15 387.33 P
0.07 (v) 285.23 387.33 P
0.07 (e w) 290.08 387.33 P
0.07 (ould specify an actual binding name for each F) 304.21 387.33 P
0.07 (or-) 492.34 387.33 P
-0.22 (tran routine meant to be called from Sather and each Sather routine callable from F) 108 375.33 P
-0.22 (ortran. F95/C in-) 436.94 375.33 P
0.24 (teroperability proposal partially adopts this approach. This solution, ho) 108 363.33 P
0.24 (we) 393.52 363.33 P
0.24 (v) 404.92 363.33 P
0.24 (er tedious it may be for) 409.77 363.33 P
-0.46 (the user) 108 351.33 P
-0.46 (, may be una) 138.52 351.33 P
-0.46 (v) 188.03 351.33 P
-0.46 (oidable for F) 192.83 351.33 P
-0.46 (ortran to interf) 243.41 351.33 P
-0.46 (ace other languages since F) 300.71 351.33 P
-0.46 (ortran names are al) 408.68 351.33 P
-0.46 (w) 483.55 351.33 P
-0.46 (ays) 490.67 351.33 P
-0.07 (con) 108 339.33 P
-0.07 (v) 122.04 339.33 P
-0.07 (erted to lo) 126.89 339.33 P
-0.07 (wercase and to call an e) 167.05 339.33 P
-0.07 (xternal routine whose name in the symbol table has at least a) 261.77 339.33 P
-0.05 (single uppercase letter a ne) 108 327.33 P
-0.05 (w language construct needs to be added to F) 215.85 327.33 P
-0.05 (ortran. This particular prob-) 392.51 327.33 P
0.41 (lem, ho) 108 315.33 P
0.41 (we) 138.16 315.33 P
0.41 (v) 149.57 315.33 P
0.41 (er) 154.42 315.33 P
0.41 (, may be a) 161.79 315.33 P
0.41 (v) 203.91 315.33 P
0.41 (oided for Sather) 208.71 315.33 P
0.41 (. Ne) 273.4 315.33 P
0.41 (v) 290.22 315.33 P
0.41 (ertheless, there are some serious problems with this) 295.07 315.33 P
(approach:) 108 303.33 T
(\245) 108 285.33 T
(the b) 121.54 285.33 T
(urden is entirely on the user\325) 141.06 285.33 T
(s shoulders. He/she needs to be a) 255.21 285.33 T
(w) 386.98 285.33 T
(are about too man) 394.1 285.33 T
(y lo) 465.88 285.33 T
(w-) 480.91 285.33 T
(le) 121.54 273.33 T
(v) 128.51 273.33 T
(el name binding details) 133.36 273.33 T
(\245) 108 258.33 T
(the "name bind" directi) 121.54 258.33 T
(v) 214.16 258.33 T
(e pollutes the code with things that are irrele) 219.01 258.33 T
(v) 396.51 258.33 T
(ant for the program se-) 401.26 258.33 T
(mantics) 121.54 246.33 T
(\245) 108 231.33 T
(it is a pain to port a program to a dif) 121.54 231.33 T
(ferent F) 265.72 231.33 T
(ortran platform: name binding will need to change) 296.95 231.33 T
(accordingly) 121.54 219.33 T
0.46 (Finally) 108 197.33 P
0.46 (, a completely general solution is to pro) 135.69 197.33 P
0.46 (vide a Sather compiler at con\336guration time with a) 297.05 197.33 P
-0.36 (stand alone function that w) 108 185.33 P
-0.36 (ould tak) 214.79 185.33 P
-0.36 (e the Sather name as an input and generate a biding F) 246.83 185.33 P
-0.36 (ortran name) 456.32 185.33 P
-0.57 (as output that conforms to all con) 108 173.33 P
-0.57 (v) 238.07 173.33 P
-0.57 (entions of the current F) 242.93 173.33 P
-0.57 (ortran platform. A library of such functions) 333.83 173.33 P
0.04 (for most common platforms could be distrib) 108 161.33 P
0.04 (uted with the compiler) 284.67 161.33 P
0.04 (, and to port the Sather compiler) 374.64 161.33 P
-0.52 (to an e) 108 149.33 P
-0.52 (xotic F) 133.47 149.33 P
-0.52 (ortran platform, only a single function will need to be written \050or modi\336ed gi) 160.85 149.33 P
-0.52 (v) 461.56 149.33 P
-0.52 (en a v) 466.41 149.33 P
-0.52 (alid) 489 149.33 P
-0.12 (F) 108 137.33 P
-0.12 (ortran platform with a similar functionality) 113.41 137.33 P
-0.12 (.\051 This approach w) 284.1 137.33 P
-0.12 (as considered as superior in the F95/) 358.62 137.33 P
-0.45 (C Interoperability T) 108 125.33 P
-0.45 (echnical Report \050ISO/IEC JTC1/SC22/WG5 N1147\051, b) 186.38 125.33 P
-0.45 (ut it w) 404.45 125.33 P
-0.45 (as not accepted be-) 429 125.33 P
(cause of the F95 compiler implementation dif) 108 113.33 T
(\336culties.) 290.51 113.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 154
%%Page: "155" 155
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 248.97 710.84 T
(acing with For) 268.17 710.84 T
(tr) 322.63 710.84 T
(an :) 327.59 710.84 T
0 F
(13.2) 344.58 710.84 T
(Name Binding) 362.31 710.84 T
6 10 Q
(155) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.55 (Sather 1.1 tries to shield the user completely from the horrors of lo) 108 659.33 P
-0.55 (w-le) 368.02 659.33 P
-0.55 (v) 385.54 659.33 P
-0.55 (el mangling details. It adopts) 390.39 659.33 P
-0.32 (the third and most general strate) 108 647.33 P
-0.32 (gy) 234.85 647.33 P
-0.32 (. In addition, it also pro) 244.2 647.33 P
-0.32 (vides simple hooks for most common F) 336.06 647.33 P
-0.32 (or-) 492.34 647.33 P
(tran mangling con) 108 635.33 T
(v) 180.37 635.33 T
(entions.) 185.22 635.33 T
-0.18 (Most F) 108 613.33 P
-0.18 (ortran compilers simply append an underscore as a pre\336x or suf) 136.29 613.33 P
-0.18 (\336x to the te) 388.66 613.33 P
-0.18 (xtual name \050mod-) 433.26 613.33 P
-0.53 (ulo  necessary truncation\051 . The same beha) 108 601.33 P
-0.53 (vior for e) 274.62 601.33 P
-0.53 (xternal names could be achie) 310.63 601.33 P
-0.53 (v) 424.35 601.33 P
-0.53 (ed by setting either) 429.2 601.33 P
-0.16 (one or both con\336guration v) 108 589.33 P
-0.16 (ariables in the CONFIG \336le for a particular platform at installation time:) 216.01 589.33 P
0.35 (In this e) 108 536.33 P
0.35 (xample, the F) 140.78 536.33 P
0.35 (ortran binding name is generated from the routine name used in the e) 196.06 536.33 P
0.35 (xternal) 476.23 536.33 P
(F) 108 524.33 T
(ortran class by appending \325_\325.) 113.41 524.33 T
0.8 (If this is not suf) 108 502.33 P
0.8 (\336cient, a general F) 173.73 502.33 P
0.8 (ortran name mangling function can be speci\336ed at installation) 250.41 502.33 P
(time:) 108 490.33 T
-0.1 (When FOR) 108 446.33 P
-0.1 (TRAN_BIND_FUNC con\336guration v) 153.13 446.33 P
-0.1 (ariable is set to true, a general name binding func-) 304.35 446.33 P
-0.61 (tion BIND_FOR) 108 434.33 P
-0.61 (TRAN::bind_name\050name:STR\051:STR is in) 173.74 434.33 P
-0.61 (v) 339.34 434.33 P
-0.61 (ok) 344.14 434.33 P
-0.61 (ed whene) 354.04 434.33 P
-0.61 (v) 391.22 434.33 P
-0.61 (er F) 396.07 434.33 P
-0.61 (ortran symbols are gen-) 411.14 434.33 P
1.78 (erated. It, in turn, can call an) 108 422.33 P
1.78 (y user supplied mangling function capturing the peculiarity of a) 233.25 422.33 P
0.31 (particular F) 108 410.33 P
0.31 (ortran platform. BIND_FOR) 154.54 410.33 P
0.31 (TRAN class contains most common binding functions. T) 269.28 410.33 P
0.31 (o) 499 410.33 P
0.23 (port the system to an e) 108 398.33 P
0.23 (xotic F) 199.27 398.33 P
0.23 (ortran en) 227.41 398.33 P
0.23 (vironment, a single name binding routine needs to be added) 263.06 398.33 P
(to BIND_FOR) 108 386.33 T
(TRAN.) 166.57 386.33 T
-0.48 (Class BIND_FOR) 108 364.33 P
-0.48 (TRAN resides in the F) 179.98 364.33 P
-0.48 (ortran library) 268.45 364.33 P
-0.48 (. The follo) 320.36 364.33 P
-0.48 (wing F) 361.09 364.33 P
-0.48 (ortran name binding function) 388.52 364.33 P
(simply appends an underscore to the te) 108 352.33 T
(xtual name:) 263.38 352.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(FORTRAN_APPEND_UNDERSCORE:) 144 569.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(true;) 268.8 569.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FORTRAN_PREFIX_UNDERSCORE:) 144 560.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(false;) 268.8 560.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FORTRAN_BIND_FUNC:  true;) 144 470.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class BIND_FORTRAN is) 144 332.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- contains various functions binding Fortran names for exotic) 144 323.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- architectures. "bind_name" should always call the appropriate) 144 314.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- function and FORTRAN_FUNC_BIND in CONFIG should be set to true) 144 305.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   bind_name\050name:STR\051:STR is) 144 296.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res:STR;) 144 287.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- various Fortran mangling routines should be plugged in here) 144 278.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res := append_underscore\050name\051;) 144 269.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res;) 144 260.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 251.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   append_underscore\050s:STR\051:STR is) 144 233.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return s+"_";) 144 224.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 215.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 206.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 577.88 129.6 555.12 2 L
V
0 Z
N
489.6 577.88 489.6 555.12 2 L
V
N
129.48 578 489.73 578 2 L
V
N
129.48 555 489.73 555 2 L
V
N
129.6 478.88 129.6 465.12 2 L
V
N
489.6 478.88 489.6 465.12 2 L
V
N
129.48 479 489.73 479 2 L
V
N
129.48 465 489.73 465 2 L
V
N
129.6 340.88 129.6 201.13 2 L
V
N
489.6 340.88 489.6 201.13 2 L
V
N
129.48 341 489.73 341 2 L
V
N
129.48 201 489.73 201 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 155
%%Page: "156" 156
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(156) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(13.3  Datatype Mapping) 108 654 T
5 10 Q
-0.05 (The e) 108 625.31 P
-0.05 (xtended Sather 1.1 library pro) 130.29 625.31 P
-0.05 (vides a set of b) 249.66 625.31 P
-0.05 (uilt-in classes interf) 309.27 625.31 P
-0.05 (acing to F) 387.96 625.31 P
-0.05 (ortran. These types) 427.72 625.31 P
0.05 (are "binary" compatible with their F) 108 613.31 P
0.05 (ortran 77 counterparts. Only these b) 252.65 613.31 P
0.05 (uilt-in classes may be used) 396.58 613.31 P
-0.27 (in signatures of routines implemented in F) 108 601.31 P
-0.27 (ortran or Sather routines called from F) 275.67 601.31 P
-0.27 (ortran. F) 427.77 601.31 P
-0.27 (ortran sca-) 461.79 601.31 P
-0.1 (lar types can be used alone or as parametrizations for b) 108 589.31 P
-0.1 (uilt-in F) 326.73 589.31 P
-0.1 (ortran array classes. Sather also pro-) 358.99 589.31 P
1.28 (vides a con) 108 577.31 P
1.28 (v) 155.16 577.31 P
1.28 (enient w) 160.01 577.31 P
1.28 (ay for packaging Sather routines and passing them to F) 195.35 577.31 P
1.28 (ortran functions or) 427 577.31 P
1.41 (subroutines that e) 108 565.31 P
1.41 (xpect e) 181.22 565.31 P
1.41 (xternally de\336ned subroutines as ar) 211.07 565.31 P
1.41 (guments.) 353.73 565.31 P
1.41 ( There is also a f) 390.12 565.31 P
1.41 (acility for) 463.43 565.31 P
(F) 122.1 535.31 T
(ortran 77) 127.51 535.31 T
(Sather class) 195.75 535.31 T
(Features) 365.56 535.31 T
7 F
(integer) 114 513.31 T
5 F
(F_INTEGER) 192.83 513.31 T
1.8 (binary compatible with Fortran 77 integers and can be) 267 513.31 P
0.23 (used whenever Fortran integer type is expected. Supports) 267 501.31 P
2.54 (arithmetic and relational operations, construction from) 267 489.31 P
(and convention to INT) 267 477.31 T
7 F
(real) 114 457.31 T
5 F
(F_REAL) 201.16 457.31 T
-0.28 (represents Fortran 77 reals and can be used whenever For-) 267 457.31 P
1.21 (tran real type is expected. Supports arithmetic and rela-) 267 445.31 P
2.25 (tional operations, construction from and convention to) 267 433.31 P
(FLT) 267 421.31 T
7 F
(logical) 114 401.31 T
5 F
(F_LOGICAL) 192.27 401.31 T
0.32 (binary compatible with F) 267 401.31 P
0.32 (ortran 77 logical. Supports logi-) 368.65 401.31 P
(cal operations and constructors from Sather BOOL type.) 267 389.31 T
7 F
(double) 114 369.31 T
(precision) 114 357.31 T
5 F
(F_DOUBLE) 193.94 369.31 T
0.41 (binary compatible with F) 267 369.31 P
0.41 (ortran 77 double precision type.) 368.9 369.31 P
(Supports a set of features simialr to F_REAL) 267 357.31 T
7 F
(complex) 114 337.31 T
5 F
(F_COMPLEX) 190.32 337.31 T
-0.45 (binary compatible with F) 267 337.31 P
-0.45 (ortran 77 comple) 366.34 337.31 P
-0.45 (x type. Supports) 433.61 337.31 P
0.43 (arithmetic operations and creation from Sather CPX type) 267 325.31 P
0.07 (\050although the binary representation is quite dif) 267 313.31 P
0.07 (ferent from) 452.67 313.31 P
(CPX\051) 267 301.31 T
7 F
(double) 114 281.31 T
(complex) 114 269.31 T
5 F
(F_DOUBLE_CO) 184.49 281.31 T
(MPLEX) 202.55 269.31 T
0.74 (binary compatible with F) 267 281.31 P
0.74 (ortran 77 double comple) 369.91 281.31 P
0.74 (x type.) 470.04 281.31 P
1.37 (Supports a set of features similar to F_COMPLEX, b) 267 269.31 P
1.37 (ut) 490.22 269.31 P
(uses double precision arithmetic.) 267 257.31 T
7 F
(character,) 114 237.31 T
(character*1) 114 225.31 T
5 F
(F_CHARA) 184.13 237.31 T
(CTER) 229.29 237.31 T
2.51 (binary compatible with both F) 267 237.31 P
2.51 (ortran 77 character and) 398.01 237.31 P
3.13 (character*1 types. As an optimizations, inside Sather) 267 225.31 P
0.77 (space it is represented by a single byte and is, therefore,) 267 213.31 P
(more ef) 267 201.31 T
(\336cient than corresponding F) 297.57 201.31 T
(ortran 77 types.) 409.91 201.31 T
7 F
(character*n) 114 181.31 T
5 F
(F_STRING) 196.16 181.31 T
1.16 (binary compatible with F) 267 181.31 P
1.16 (ortran 77 character*n type \050in-) 371.17 181.31 P
0.79 (cluding character*1\051. Intra Sather calls are slightly more) 267 169.31 P
1.2 (ef) 267 157.31 P
1.2 (\336cient than corresponding F) 274.52 157.31 P
1.2 (ortran/F) 390.45 157.31 P
1.2 (ortran, Sather/F) 422.52 157.31 P
1.2 (or-) 486.34 157.31 P
(tran or F) 267 145.31 T
(ortran/Sather calls.) 301.29 145.31 T
13 F
(T) 242.65 125.31 T
(able 6: Built-in Scalar T) 248.4 125.31 T
(ypes) 350.45 125.31 T
177.98 550.98 177.98 137.73 2 L
V
0.5 H
0 Z
N
261 550.98 261 137.73 2 L
V
N
108 549.98 504 549.98 2 L
V
2 H
N
108 525.98 504 525.98 2 L
V
N
108 469.98 504 469.98 2 L
V
0.5 H
N
108 413.98 504 413.98 2 L
V
N
108 381.98 504 381.98 2 L
V
N
108 349.98 504 349.98 2 L
V
N
108 293.98 504 293.98 2 L
V
N
108 249.98 504 249.98 2 L
V
N
108 193.98 504 193.98 2 L
V
N
108 137.98 504 137.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "156" 156
%%Page: "157" 157
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 238.72 710.84 T
(acing with For) 257.92 710.84 T
(tr) 312.38 710.84 T
(an :) 317.34 710.84 T
0 F
(13.3) 334.34 710.84 T
(Datatype Ma) 352.06 710.84 T
(pping) 404.5 710.84 T
6 10 Q
(157) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99 108 495 666 R
7 X
V
5 F
0 X
-0.27 (Sather to pro) 99 375.33 P
-0.27 (vide e) 149.97 375.33 P
-0.27 (xception handlers for F) 173.71 375.33 P
-0.27 (ortran subroutines with alternate returns \050F) 265.79 375.33 P
-0.27 (ortran\325) 435.65 375.33 P
-0.27 (s w) 462.31 375.33 P
-0.27 (ay to) 475.55 375.33 P
(handle e) 99 363.33 T
(xceptional or abnormal conditions\051.) 132.45 363.33 T
4 12 Q
(13.3.1   Scalar T) 99 322 T
(ypes) 188.34 322 T
5 10 Q
4 (There are eight b) 99 299.33 P
4 (uilt-in scalar types: F_INTEGER, F_REAL, F_LOGICAL, F_DOUBLE,) 178.82 299.33 P
0.26 (F_COMPLEX, F_DOUBLE_COMPLEX, F_CHARA) 99 287.33 P
0.26 (CTER, and F_STRING. The) 316.91 287.33 P
0.26 (y correspond to) 432.27 287.33 P
1.66 (F) 99 275.33 P
1.66 (ortran 77 types as sho) 104.41 275.33 P
1.66 (wn in the table. All scalar F) 198.01 275.33 P
1.66 (ortran types are subtypes of $F_SCALAR) 318.65 275.33 P
-0.08 (\050$F_SCALAR is used as a bound for array parametrizations to ensure that arrays are parameterized) 99 263.33 P
(with scalar types only\051.) 99 251.33 T
-0.59 (It is important to distinguish between e) 99 229.33 P
-0.59 (xternal F) 251.44 229.33 P
-0.59 (ortran interf) 286.53 229.33 P
-0.59 (ace types and "re) 333.88 229.33 P
-0.59 (gular" Sather types with) 400.19 229.33 P
0.54 (similar semantics. F) 99 217.33 P
0.54 (or e) 180.21 217.33 P
0.54 (xample, Sather type INT is dif) 195.87 217.33 P
0.54 (ferent from F) 319.96 217.33 P
0.54 (ortran F_INTEGER, although) 374.21 217.33 P
-0.46 (both abstract the meaning of inte) 99 205.33 P
-0.46 (gers. There is no sub- or super) 227.92 205.33 P
-0.46 (-typing relationship between INT and) 346.31 205.33 P
0.05 (F_INTEGER and these types cannot be used interchangeably) 99 193.33 P
0.05 (. No assumption could be made about) 343.9 193.33 P
0.75 (the relati) 99 181.33 P
0.75 (v) 134.77 181.33 P
0.75 (e amounts of memory the Sather and F) 139.62 181.33 P
0.75 (ortran types need. This is de\336ned dif) 300.01 181.33 P
0.75 (ferently by) 450.65 181.33 P
0.14 (Sather and F) 99 169.33 P
0.14 (ortran 77 language speci\336cations. F) 149.69 169.33 P
0.14 (or instance, the only rele) 292.6 169.33 P
0.14 (v) 391.51 169.33 P
0.14 (ant F) 396.26 169.33 P
0.14 (ortran 77 rule guar-) 416.54 169.33 P
0.17 (antees that inte) 99 157.33 P
0.17 (ger) 159.18 157.33 P
0.17 (, logical, and real F) 171.55 157.33 P
0.17 (ortran types occup) 249.28 157.33 P
0.17 (y the same amount of memory) 323.38 157.33 P
0.17 (, and double) 445.5 157.33 P
1.17 (precision and comple) 99 145.33 P
1.17 (x types occup) 186.72 145.33 P
1.17 (y twice as much \050the language does not specify the absolute) 243.94 145.33 P
(amounts\051. Sather) 99 133.33 T
(, on the other hand, does not speci\336cally support these assumptions.) 166.37 133.33 T
(F) 113.1 651.33 T
(ortran 77) 118.51 651.33 T
(Sather T) 184.65 651.33 T
(ypes) 218.01 651.33 T
(Features) 356.56 651.33 T
7 F
(Various) 105 629.33 T
(array types) 105 617.33 T
5 9 Q
(F_ARRA) 180.76 630 T
(Yn{T<) 214.32 630 T
($F_SCALAR}) 183.58 619 T
(where n = 1,2,..) 182.34 608 T
5 10 Q
0.9 (Can be parametrized by an) 258 629.33 P
0.9 (y scalar F) 368.64 629.33 P
0.9 (ortran types, binary) 409.16 629.33 P
0.29 (compatible with the corresponding F) 258 617.33 P
0.29 (ortran 77 arrays: use) 406.21 617.33 P
0.62 (the same layout. Can be constructed using Sather arrays,) 258 605.33 P
1 (matrix and v) 258 593.33 P
1 (ector classes. arr:F_ARRA) 310.41 593.33 P
1 (Y{F_INTEGER}) 418.85 593.33 P
(corresponds to INTEGER arrr\050*\051 in F) 258 581.33 T
(ortran.) 408.65 581.33 T
13 F
(T) 251.86 561.33 T
(able 7: Array T) 257.61 561.33 T
(ypes) 323.25 561.33 T
5 F
(F) 113.1 531.33 T
(ortran 77) 118.51 531.33 T
(Sather T) 186.59 531.33 T
(ype) 219.95 531.33 T
(Features) 356.56 531.33 T
7 F
(External) 105 509.33 T
(subroutines) 105 497.33 T
(passed as) 105 485.33 T
(arguments) 105 473.33 T
5 9 Q
(F_R) 189.35 510 T
(OUT{}) 204.5 510 T
5 10 Q
-0.05 (Used to bind F) 258 509.33 P
-0.05 (ortran routines, strongly type check) 316.87 509.33 P
-0.05 (ed. Can) 458.5 509.33 P
1.09 (be passed as ar) 258 497.33 P
1.09 (guments to e) 320.8 497.33 P
1.09 (xternal F) 373.94 497.33 P
1.09 (ortran routines that) 410.71 497.33 P
(e) 258 485.33 T
(xpect e) 262.29 485.33 T
(xternally de\336ned subroutines as parameters.) 290.74 485.33 T
7 F
(Alternate) 105 453.33 T
(returns) 105 441.33 T
(\050exception) 105 429.33 T
(handling\051) 105 417.33 T
5 9 Q
(F_HANDLER) 184.24 454 T
5 10 Q
0.35 (Implements F) 258 453.33 P
0.35 (ortran e) 313.48 453.33 P
0.35 (xception handling in Sather) 344.49 453.33 P
0.35 (. Can be) 455.26 453.33 P
0.38 (passed as an ar) 258 441.33 P
0.38 (guments to F) 318.66 441.33 P
0.38 (ortran subroutines with alter-) 371.49 441.33 P
-0.51 (nate returns \050F) 258 429.33 P
-0.51 (ortran\325) 315.14 429.33 P
-0.51 (s w) 341.8 429.33 P
-0.51 (ay to handle e) 354.8 429.33 P
-0.51 (xceptional or abnor-) 408.93 429.33 P
(mal conditions.\051) 258 417.33 T
13 F
(T) 178.92 397.33 T
(able 8: F) 184.67 397.33 T
(ortran Routine and Exception Handler T) 221.64 397.33 T
(ypes) 396.19 397.33 T
168.98 667 168.98 573.75 2 L
V
0.5 H
0 Z
N
252 667 252 573.75 2 L
V
N
99 666 495 666 2 L
V
2 H
N
99 642 495 642 2 L
V
N
99 574 495 574 2 L
V
0.5 H
N
168.98 547 168.98 409.75 2 L
V
N
252 547 252 409.75 2 L
V
N
99 546 495 546 2 L
V
2 H
N
99 522 495 522 2 L
V
N
99 466 495 466 2 L
V
0.5 H
N
99 410 495 410 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "157" 157
%%Page: "158" 158
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(158) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(F_INTEGER) 108 659.33 T
5 F
0.46 (F_INTEGER is a Sather 1.1 class representing F) 108 636.33 P
0.46 (ortran 77 inte) 305.48 636.33 P
0.46 (ger type. It can be used whene) 360.13 636.33 P
0.46 (v) 483.98 636.33 P
0.46 (er a) 488.83 636.33 P
0.1 (F) 108 624.33 P
0.1 (ortran 77 inte) 113.41 624.33 P
0.1 (ger is e) 167.34 624.33 P
0.1 (xpected: calls to routines implemented in F) 196.26 624.33 P
0.1 (ortran, F) 369.47 624.33 P
0.1 (ortran array parametriza-) 403.85 624.33 P
(tions, etc. The Sather 1.1 library de\336nes the follo) 108 612.33 T
(wing features for F_INTEGER) 303.56 612.33 T
-0.22 (F_INTEGER could be created using a Sather INT type. An e) 108 384.33 P
-0.22 (xisting F_INTEGER could also yield a) 349.25 384.33 P
1.36 (corresponding Sather INT v) 108 372.33 P
1.36 (alue. Although the intended use for F_INTEGER v) 223.75 372.33 P
1.36 (ariables is to be) 437.43 372.33 P
-0.27 (passed as ar) 108 360.33 P
-0.27 (guments to and from e) 155.05 360.33 P
-0.27 (xternal F) 243.82 360.33 P
-0.27 (ortran routines, some simple operations on F_INTEGER) 279.23 360.33 P
-0.3 (v) 108 348.33 P
-0.3 (ariables are b) 112.75 348.33 P
-0.3 (uilt-in and could be performed in Sather directly without going through F) 165.26 348.33 P
-0.3 (ortran. Such) 455.42 348.33 P
0.14 (operations are the re) 108 336.33 P
0.14 (gular arithmetic operations \050+ -* /\051 and logical operations. Syntactic sug) 189.65 336.33 P
0.14 (ar and) 479.14 336.33 P
(operator precedence rules are same as those for Sather types.) 108 324.33 T
(F) 122.1 582.33 T
(ortran 77) 127.51 582.33 T
(Sather class) 195.75 582.33 T
(Features pro) 318.42 582.33 T
(vided by the library) 367.98 582.33 T
7 F
(INTEGER) 114 560.33 T
5 9 Q
(F_INTEGER) 195.49 561 T
2 10 Q
(create\050x:INT\051:F_INTEGER  -- construct from INT) 267 560.33 T
(int:INT                                  -- INT version of self) 267 548.33 T
(str:STR                                  -- string representation) 267 536.33 T
(zero:SAME                           -- zero and) 267 524.33 T
(nil:SAME                              -- nil values) 267 512.33 T
(is_nil:BOOL                          -- true if self is nil) 267 500.33 T
(plus\050i:SAME\051:SAME) 267 488.33 T
(minus\050i:SAME\051:SAME) 267 476.33 T
(times\050i:SAME\051:SAME) 267 464.33 T
(div\050i:SAME\051:SAME) 267 452.33 T
(is_eq\050i:SAME\051:BOOL) 267 440.33 T
(is_lt\050i:SAME\051:BOOL) 267 428.33 T
13 F
(T) 258.95 408.33 T
(able 9: F_INTEGER) 264.7 408.33 T
177.98 598 177.98 420.75 2 L
V
0.5 H
0 Z
N
261 598 261 420.75 2 L
V
N
108 597 504 597 2 L
V
2 H
N
108 573 504 573 2 L
V
N
108 421 504 421 2 L
V
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "158" 158
%%Page: "159" 159
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 238.72 710.84 T
(acing with For) 257.92 710.84 T
(tr) 312.38 710.84 T
(an :) 317.34 710.84 T
0 F
(13.3) 334.34 710.84 T
(Datatype Ma) 352.06 710.84 T
(pping) 404.5 710.84 T
6 10 Q
(159) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.12 (This e) 108 659.33 P
-0.12 (xample uses an e) 132.45 659.33 P
-0.12 (xternal function de\336ned in F) 199.96 659.33 P
-0.12 (ortran to implement a f) 313.2 659.33 P
-0.12 (actorial function missing) 404.81 659.33 P
(in the F_INTEGER interf) 108 647.33 T
(ace:) 210.39 647.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(*     A Fortran function that implements factorial of N) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      INTEGER FUNCTION FACTORIAL\050N\051) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      INTEGER N) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      FACTORIAL = 1) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      DO 10, I=1,N) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         FACTORIAL = FACTORIAL * I) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( 10   CONTINUE) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      END) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(external FORTRAN class USEFUL_FUNCTIONS is) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   factorial\050i:F_INTEGER\051:F_INTEGER;) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- a function implemented in Fortran that returns factorial of i) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class MAIN is) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i:F_INTEGER := #\0504\051;) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      a:F_INTEGER := USEFUL_FUNCTIONS::factorial\050i\051;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT + "This " + a.str + " should be 24\134n";) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 442.13 2 L
V
0 Z
N
489.6 635.88 489.6 442.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 442 489.73 442 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "159" 159
%%Page: "160" 160
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(160) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(F_REAL) 108 659.33 T
5 F
-0.31 (F_INTEGER, F_REAL represents F) 108 636.33 P
-0.31 (ortran 77 real type. Sather syntactic sug) 253.03 636.33 P
-0.31 (ar for arithmetic and re-) 409.71 636.33 P
3.33 (lational operations and operator precedence rules apply to F_REAL. No) 108 408.33 P
3.33 (w) 425.4 408.33 P
3.33 (, we can e) 431.97 408.33 P
3.33 (xtend) 481.78 408.33 P
(USEFUL_FUNCTIONS class with a po) 108 396.33 T
(wer routine for F_REAL:) 268.3 396.33 T
(F) 122.1 606.33 T
(ortran 77) 127.51 606.33 T
(Sather class) 195.75 606.33 T
(Features pro) 318.42 606.33 T
(vided by the library) 367.98 606.33 T
7 F
(REAL) 114 584.33 T
5 9 Q
(F_REAL) 202.99 585 T
2 10 Q
(create\050x:FLT\051:F_REAL         -- construct from FLT) 267 584.33 T
(flt:INT                                   -- FLT version of self) 267 572.33 T
(str:STR                                  -- string representation) 267 560.33 T
(zero:SAME                           -- zero and) 267 548.33 T
(nil:SAME                              -- nil values) 267 536.33 T
(is_nil:BOOL                          -- true if self is nil) 267 524.33 T
(plus\050i:SAME\051:SAME) 267 512.33 T
(minus\050i:SAME\051:SAME) 267 500.33 T
(times\050i:SAME\051:SAME) 267 488.33 T
(div\050i:SAME\051:SAME) 267 476.33 T
(is_eq\050i:SAME\051:BOOL) 267 464.33 T
(is_lt\050i:SAME\051:BOOL) 267 452.33 T
13 F
(T) 265.62 432.33 T
(able 10: F_REAL) 271.38 432.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(external FORTRAN class USEFUL_FUNCTIONS is) 144 376.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- external Fortran function that raises x to power y) 144 367.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   power\050x:F_REAL,y:F_REAL\051:F_REAL;) 144 358.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 349.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
177.98 622 177.98 444.75 2 L
V
0.5 H
0 Z
N
261 622 261 444.75 2 L
V
N
108 621 504 621 2 L
V
2 H
N
108 597 504 597 2 L
V
N
108 445 504 445 2 L
V
0.5 H
N
129.6 384.88 129.6 344.12 2 L
V
0.25 H
N
489.6 384.88 489.6 344.12 2 L
V
N
129.48 385 489.73 385 2 L
V
N
129.48 344 489.73 344 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "160" 160
%%Page: "161" 161
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 238.72 710.84 T
(acing with For) 257.92 710.84 T
(tr) 312.38 710.84 T
(an :) 317.34 710.84 T
0 F
(13.3) 334.34 710.84 T
(Datatype Ma) 352.06 710.84 T
(pping) 404.5 710.84 T
6 10 Q
(161) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(F_DOUBLE) 108 659.33 T
5 F
0.08 (F_DOUBLE represents F) 108 636.33 P
0.08 (ortran 77 double type. Sather syntactic sug) 210.23 636.33 P
0.08 (ar for arithmetic and relational) 381.48 636.33 P
(operations and operator precedence rules apply to F_DOUBLE.) 108 408.33 T
4 F
(F_LOGICAL) 108 380.33 T
5 F
0.44 (F_LOGICAL is a Sather class representing F) 108 357.33 P
0.44 (ortran 77 logical type. It is "binary" compatible with) 290.99 357.33 P
-0.34 (F) 108 345.33 P
-0.34 (ortran\325) 113.41 345.33 P
-0.34 (s "logical" type \050Sather BOOL has a v) 140.07 345.33 P
-0.34 (astly dif) 290.29 345.33 P
-0.34 (ferent representation in ICSI 1.1 compiler\051. In) 322.2 345.33 P
-0.4 (particular) 108 333.33 P
-0.4 (, F_LOGICAL occupies the same amount of space as F) 145.92 333.33 P
-0.4 (ortran inte) 363.81 333.33 P
-0.4 (ger and real types to con-) 404.64 333.33 P
(form to F) 108 321.33 T
(ortran 77 rules.) 145.63 321.33 T
(F) 122.1 606.33 T
(ortran 77) 127.51 606.33 T
(Sather class) 195.75 606.33 T
(Features pro) 318.42 606.33 T
(vided by the library) 367.98 606.33 T
7 F
(REAL) 114 584.33 T
5 9 Q
(F_REAL) 202.99 585 T
2 10 Q
(create\050x:FLTD\051:F_REAL       -- construct from FLTD) 267 584.33 T
(fltd:INT                                 -- FLTD version of self) 267 572.33 T
(str:STR                                  -- string representation) 267 560.33 T
(zero:SAME                           -- zero and) 267 548.33 T
(nil:SAME                              -- nil values) 267 536.33 T
(is_nil:BOOL                          -- true if self is nil) 267 524.33 T
(plus\050i:SAME\051:SAME) 267 512.33 T
(minus\050i:SAME\051:SAME) 267 500.33 T
(times\050i:SAME\051:SAME) 267 488.33 T
(div\050i:SAME\051:SAME) 267 476.33 T
(is_eq\050i:SAME\051:BOOL) 267 464.33 T
(is_lt\050i:SAME\051:BOOL) 267 452.33 T
13 F
(T) 258.4 432.33 T
(able 11: F_DOUBLE) 264.15 432.33 T
5 F
(F) 122.1 291.33 T
(ortran 77) 127.51 291.33 T
(Sather class) 195.75 291.33 T
(Features pro) 318.42 291.33 T
(vided by the library) 367.98 291.33 T
7 F
(LOGICAL) 114 269.33 T
5 9 Q
(F_LOGICAL) 194.99 270 T
2 10 Q
(create\050x:BOOL\051:F_LOGICAL -- construct from INT) 267 269.33 T
(bool:BOOL                              -- INT version of self) 267 257.33 T
(str:STR                                     -- string representation) 267 245.33 T
(not:SAME) 267 233.33 T
(is_eq\050B:SAME\051:BOOL) 267 221.33 T
(f_or\050b:SAME\051:SAME) 267 209.33 T
(f_and\050b:SAME\051:SAME) 267 197.33 T
13 F
(T) 255.9 177.33 T
(able 12: F_LOGICAL) 261.65 177.33 T
177.98 622 177.98 444.75 2 L
V
0.5 H
0 Z
N
261 622 261 444.75 2 L
V
N
108 621 504 621 2 L
V
2 H
N
108 597 504 597 2 L
V
N
108 445 504 445 2 L
V
0.5 H
N
177.98 307 177.98 189.75 2 L
V
N
261 307 261 189.75 2 L
V
N
108 306 504 306 2 L
V
2 H
N
108 282 504 282 2 L
V
N
108 190 504 190 2 L
V
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "161" 161
%%Page: "162" 162
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(162) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.41 (Logical operations are called f_or and f_and to a) 108 659.33 P
-0.41 (v) 298.9 659.33 P
-0.41 (oid name collisions with short-circuited Sather op-) 303.7 659.33 P
3.18 (erators) 108 647.33 P
7 F
3.53 (\325and\325) 140.89 647.33 P
5 F
3.18 ( and) 162.01 647.33 P
7 F
3.53 (\325or\325) 187.8 647.33 P
5 F
3.18 (. The follo) 201.13 647.33 P
3.18 (wing function implementing e) 249.17 647.33 P
3.18 (xclusi) 379.38 647.33 P
3.18 (v) 403.02 647.33 P
3.18 (e or can be added to) 407.87 647.33 P
(USEFUL_FUNCTIONS) 108 635.33 T
4 F
(F_COMPLEX) 108 567.33 T
5 F
1.6 (F_COMPLEX is a Sather class binary compatible with F) 108 544.33 P
1.6 (ortran 77 COMPLEX type. Although) 348.43 544.33 P
-0.32 (F_COMPLEX pro) 108 532.33 P
-0.32 (vides a constructor that accepts a v) 181.7 532.33 P
-0.32 (ariable of Sather CPX type, F_COMPLEX has) 318.97 532.33 P
-0.46 (a binary representation quite dif) 108 520.33 P
-0.46 (ferent from that of CPX. F_COMPLEX pro) 233.67 520.33 P
-0.46 (vides a set of features for) 405.49 520.33 P
0.06 (setting and returning the v) 108 508.33 P
0.06 (alues of the real and imaginary parts. It also pro) 212.98 508.33 P
0.06 (vides useful constructors) 404.45 508.33 P
(and supports a set of arithmetic operations.) 108 496.33 T
(This is a possible implementation of  addition of F_COMPLEX numbers:) 108 184.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(xor\050a:F_LOGICAL,b:F_LOGICAL\051:F_LOGICAL is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   return \050a.not.f_and\050b\051\051.f_or\050a.f_and\050b.not\051\051;) 144 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(F) 122.1 466.33 T
(ortran 77) 127.51 466.33 T
(Sather class) 195.75 466.33 T
(Features pro) 318.42 466.33 T
(vided by the library) 367.98 466.33 T
7 F
(COMPLEX) 114 444.33 T
5 9 Q
(F_COMPLEX) 193.24 445 T
2 10 Q
(re:F_REAL                            -- return real part) 267 444.33 T
(re\050x:F_REAL\051                       -- set real part) 267 432.33 T
(im:F_REAL                          -- return imaginary part) 267 420.33 T
(im\050x:F_REAL\051                      -- set imaginary part) 267 408.33 T
(create\050c:CPX\051:SAME            -- create new and) 267 396.33 T
(                                              -- initialize to value of c) 267 384.33 T
(create\050re:F_REAL,im:F_REAL\051:SAME) 267 372.33 T
(create\050re:FLT,im:FLT\051:SAME) 267 360.33 T
(create\050fc:F_COMPLEX\051:SAME) 267 348.33 T
(cpx:CPX                                -- Sather comlplex type) 267 336.33 T
(str:STR                                  -- string representation) 267 324.33 T
(zero:SAME                           -- zero and) 267 312.33 T
(nil:SAME                              -- nil value) 267 300.33 T
(is_nil:BOOL                          -- true if self is nil) 267 288.33 T
(plus\050c:SAME\051:SAME) 267 276.33 T
(minus\050c:SAME\051:SAME) 267 264.33 T
(times\050c:SAME\051:SAME) 267 252.33 T
(div\050c:SAME\051:SAME) 267 240.33 T
(is_eq\050c:SAME\051:BOOL) 267 228.33 T
13 F
(T) 253.96 208.33 T
(able 13: F_COMPLEX) 259.71 208.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(plus\050c:F_COMPLEX\051:F_COMPLEX is) 144 164.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   return #F_COMPLEX\050re+c.re,im+c.im\051;) 144 155.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 146.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 592.12 2 L
V
0 Z
N
489.6 623.88 489.6 592.12 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 592 489.73 592 2 L
V
N
177.98 482 177.98 220.75 2 L
V
0.5 H
N
261 482 261 220.75 2 L
V
N
108 481 504 481 2 L
V
2 H
N
108 457 504 457 2 L
V
N
108 221 504 221 2 L
V
0.5 H
N
129.6 172.88 129.6 141.13 2 L
V
0.25 H
N
489.6 172.88 489.6 141.13 2 L
V
N
129.48 173 489.73 173 2 L
V
N
129.48 141 489.73 141 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "162" 162
%%Page: "163" 163
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 238.72 710.84 T
(acing with For) 257.92 710.84 T
(tr) 312.38 710.84 T
(an :) 317.34 710.84 T
0 F
(13.3) 334.34 710.84 T
(Datatype Ma) 352.06 710.84 T
(pping) 404.5 710.84 T
6 10 Q
(163) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(F_DOUBLE_COMPLEX) 108 659.33 T
5 F
0.95 (Similar to F_COMPLEX, F_DOUBLE_COMPLEX is a Sather class binary compatible with the) 108 636.33 P
-0.39 (F) 108 624.33 P
-0.39 (ortran double comple) 113.41 624.33 P
-0.39 (x type. Double comple) 198.02 624.33 P
-0.39 (x type is an e) 287.8 624.33 P
-0.39 (xtension to F) 338.87 624.33 P
-0.39 (ortran 77 supported by man) 390.17 624.33 P
-0.39 (y) 499 624.33 P
0.3 (F77 compiler) 108 612.33 P
0.3 (. F_DOUBLE_COMPLEX class pro) 161.36 612.33 P
0.3 (vides functionality similar to F_COMPLEX, b) 308.78 612.33 P
0.3 (ut) 496.22 612.33 P
(w) 108 600.33 T
(orks with double precision \337oating point representations.) 115.12 600.33 T
4 F
(F_CHARA) 108 284.33 T
(CTER) 155.37 284.33 T
5 F
0.08 (F_CHARA) 108 261.33 P
0.08 (CTER is binary compatible with F) 153.16 261.33 P
0.08 (ortran 77 types character and character*1. F) 291.46 261.33 P
0.08 (ortran 77) 467.54 261.33 P
-0.06 (character and character*1 types are, in f) 108 249.33 P
-0.06 (act, instances of character*n types with n set to 1. In Sather) 267.2 249.33 P
-0.44 (terms, the) 108 237.33 P
-0.44 (y are strings with size al) 146.85 237.33 P
-0.44 (w) 241.48 237.33 P
-0.44 (ays set to one. F) 248.6 237.33 P
-0.44 (or parameter passing purposes, F) 311.41 237.33 P
-0.44 (ortran character) 441.42 237.33 P
-0.46 (and character*1 v) 108 225.33 P
-0.46 (ariables beha) 177.91 225.33 P
-0.46 (v) 229.73 225.33 P
-0.46 (e e) 234.58 225.33 P
-0.46 (xactly as generic character*n types \050the length of the string which) 245.34 225.33 P
-0.19 (is al) 108 213.33 P
-0.19 (w) 124.1 213.33 P
-0.19 (ays one is passed as an e) 131.22 213.33 P
-0.19 (xtra parameter for each character or character*1 ar) 228.24 213.33 P
-0.19 (gument\051. Since the) 429.11 213.33 P
0.25 (goal for F_CHARA) 108 201.33 P
0.25 (CTER is binary compatibility with F) 187.54 201.33 P
0.25 (ortran, this is ho) 335.61 201.33 P
0.25 (w F_CHARA) 401.12 201.33 P
0.25 (CTER class) 456.25 201.33 P
-0.07 (beha) 108 189.33 P
-0.07 (v) 126.68 189.33 P
-0.07 (e when a call crosses the language boundary) 131.53 189.33 P
-0.07 (. Ho) 307.82 189.33 P
-0.07 (we) 324.72 189.33 P
-0.07 (v) 336.13 189.33 P
-0.07 (er) 340.98 189.33 P
-0.07 (, as long as F_CHARA) 348.35 189.33 P
-0.07 (CTER v) 440.16 189.33 P
-0.07 (ariables) 472.9 189.33 P
-0.25 (stay within the Sather space, the) 108 177.33 P
-0.25 (y are represented and passed to routines more ef) 235.48 177.33 P
-0.25 (\336ciently) 425.96 177.33 P
-0.25 (, as a single) 458.09 177.33 P
(F) 122.1 570.33 T
(ortran 77) 127.51 570.33 T
(Sather class) 195.75 570.33 T
(Features pro) 318.42 570.33 T
(vided by the library) 367.98 570.33 T
7 F
(double) 114 548.33 T
(complex) 114 536.33 T
5 9 Q
(F_DOUBLE_) 194.24 549 T
(COMPLEX) 197.99 538 T
2 10 Q
(re:F_DOUBLE                     -- return real part) 267 548.33 T
(re\050x:F_DOUBLE\051                 -- set real part) 267 536.33 T
(im:F_DOUBLE                    -- return imagianry part) 267 524.33 T
(im\050x:F_DOUBLE\051               -- set imaginary part) 267 512.33 T
(create\050c:CPXD\051:SAME        -- create new and) 267 500.33 T
(                                              -- initialize to value of c) 267 488.33 T
(create\050re:F_DOUBLE,im:F_DOUBLE\051:SAME) 267 476.33 T
(create\050re:FLTD,im:FLTD\051:SAME) 267 464.33 T
(create\050fc:F_DOUBLE_COMPLEX\051:SAME) 267 452.33 T
(cpxd:CPXD                           -- CPXD version of self) 267 440.33 T
(str:STR                                  -- string representation) 267 428.33 T
(zero:SAME                           -- zero and) 267 416.33 T
(nil:SAME                              -- nil value) 267 404.33 T
(is_nil:BOOL                          -- true if self is nil) 267 392.33 T
(plus\050c:SAME\051:SAME) 267 380.33 T
(minus\050c:SAME\051:SAME) 267 368.33 T
(times\050c:SAME\051:SAME) 267 356.33 T
(div\050c:SAME\051:SAME) 267 344.33 T
(is_eq\050c:SAME\051:BOOL) 267 332.33 T
13 F
(T) 230.35 312.33 T
(able 14: F_DOUBLE_COMPLEX) 236.1 312.33 T
177.98 586 177.98 324.75 2 L
V
0.5 H
0 Z
N
261 586 261 324.75 2 L
V
N
108 585 504 585 2 L
V
2 H
N
108 561 504 561 2 L
V
N
108 325 504 325 2 L
V
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "163" 163
%%Page: "164" 164
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(164) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.86 (byte. As a result, simple character operations performed on F_CHARA) 108 659.33 P
0.86 (CTER class in Sather are) 400.02 659.33 P
(more ef) 108 647.33 T
(\336cient than their F) 138.57 647.33 T
(ortran v) 212.03 647.33 T
(ersions!) 243.26 647.33 T
4 F
(F_STRING) 108 475.33 T
5 F
5.74 (F_STRING is binary compatible with F) 108 452.33 P
5.74 (ortran 77 character*n types. Note, that both) 295.71 452.33 P
1.99 (F_CHARA) 108 440.33 P
1.99 (CTER and F_STRING can be used to interf) 153.16 440.33 P
1.99 (ace with F) 342.23 440.33 P
1.99 (ortran character*1 type, b) 387.72 440.33 P
1.99 (ut) 496.22 440.33 P
(F_CHARA) 108 428.33 T
(CTER yields better performance for computations performed in Sather) 153.16 428.33 T
(.) 435.89 428.33 T
0.03 (F_STRING is internally represented by a tuple: the \336rst \336eld points to the string itself, and the sec-) 108 406.33 P
0.28 (ond records the string length. An inter) 108 394.33 P
0.28 (-language call requires that both be passed as separate ar) 261.98 394.33 P
0.28 (gu-) 490.67 394.33 P
-0.21 (ments. The section P) 108 382.33 P
-0.21 (arameter P) 190.55 382.33 P
-0.21 (assing on page 171 pro) 233.23 382.33 P
-0.21 (vides more information on this. Inside Sather) 324.44 382.33 P
0.71 (ho) 108 370.33 P
0.71 (we) 117.75 370.33 P
0.71 (v) 129.16 370.33 P
0.71 (er \050calls using the Sather parameter passing con) 134.01 370.33 P
0.71 (v) 329.36 370.33 P
0.71 (ention\051, F_STRING is passed as a whole,) 334.21 370.33 P
(which is slightly more ef) 108 358.33 T
(\336cient than the F) 207.19 358.33 T
(ortran calls.) 274.54 358.33 T
4 12 Q
(13.3.2   For) 108 173 T
(tran Arra) 170.94 173 T
(y Classes) 221.38 173 T
5 10 Q
-0.18 (Pro) 108 150.33 P
-0.18 (viding a con) 121.74 150.33 P
-0.18 (v) 170.42 150.33 P
-0.18 (enient array interf) 175.27 150.33 P
-0.18 (ace is an important goal for Sather/F) 246.45 150.33 P
-0.18 (ortran interoperability) 391.32 150.33 P
-0.18 (. A set) 478.53 150.33 P
0.35 (of parametrized classes F_ARRA) 108 138.33 P
0.35 (Y{T<$F_SCALAR}, and F_ARRA) 242.13 138.33 P
0.35 (Yn{T<$F_SCALAR}, where) 385.64 138.33 P
-0 (n=2,3... are used for this purpose. Array classes can be parametrized by an) 108 126.33 P
-0 (y of the scalar types. F) 405.3 126.33 P
-0 (or) 495.67 126.33 P
(F) 122.1 617.33 T
(ortran 77) 127.51 617.33 T
(Sather class) 195.75 617.33 T
(Features pro) 318.42 617.33 T
(vided by the library) 367.98 617.33 T
7 F
(character) 114 595.33 T
(character*1) 114 583.33 T
5 9 Q
(F_CHARA) 187.67 596 T
(CTER) 228.31 596 T
2 10 Q
(create\050c:CHAR\051:SAME        -- create new and) 267 595.33 T
(                                              -- initialize to value of c) 267 583.33 T
(char:CHAR                           -- CHAR version of self) 267 571.33 T
(str:STR                                  -- STR version of self) 267 559.33 T
(zero:SAME                           -- zero) 267 547.33 T
(is_eq\050c:SAME\051:BOOL) 267 535.33 T
(is_lt\050c:SAME\051:BOOL) 267 523.33 T
13 F
(T) 247.57 503.33 T
(able 15: F_CHARA) 253.32 503.33 T
(CTER) 336.65 503.33 T
5 F
(F) 122.1 328.33 T
(ortran 77) 127.51 328.33 T
(Sather class) 195.75 328.33 T
(Features pro) 318.42 328.33 T
(vided by the library) 367.98 328.33 T
7 F
(character*n) 114 306.33 T
5 9 Q
(F_STRING) 198.49 307 T
2 10 Q
(create\050s:STR\051:SAME             -- create new and) 267 306.33 T
(                                              -- initialize to value of s) 267 294.33 T
(create\050n:INT\051:SAME            -- new of size n) 267 282.33 T
(create\050c:CHAR\051:SAME        -- create from c) 267 270.33 T
(address:C_CHAR_PTR       -- the "string" part) 267 258.33 T
(size:INT                                -- string length) 267 246.33 T
(str:STR                                  -- STR version of self) 267 234.33 T
13 F
(T) 260.35 214.33 T
(able 16: F_STRING) 266.1 214.33 T
177.98 633 177.98 515.75 2 L
V
0.5 H
0 Z
N
261 633 261 515.75 2 L
V
N
108 632 504 632 2 L
V
2 H
N
108 608 504 608 2 L
V
N
108 516 504 516 2 L
V
0.5 H
N
177.98 344 177.98 226.75 2 L
V
N
261 344 261 226.75 2 L
V
N
108 343 504 343 2 L
V
2 H
N
108 319 504 319 2 L
V
N
108 227 504 227 2 L
V
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "164" 164
%%Page: "165" 165
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 238.72 710.84 T
(acing with For) 257.92 710.84 T
(tr) 312.38 710.84 T
(an :) 317.34 710.84 T
0 F
(13.3) 334.34 710.84 T
(Datatype Ma) 352.06 710.84 T
(pping) 404.5 710.84 T
6 10 Q
(165) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
2.05 (e) 108 659.33 P
2.05 (xample, F_ARRA) 112.29 659.33 P
2.05 (Y{F_INTEGER} corresponds to a F) 186.07 659.33 P
2.05 (ortran 77 inte) 340.39 659.33 P
2.05 (ger array type. Similarly) 398.23 659.33 P
2.05 (,) 501.5 659.33 P
(F_ARRA) 108 647.33 T
(Y2{F_REAL} represents a F) 145.29 647.33 T
(ortran 77 tw) 261.67 647.33 T
(o-dimensional array of real numbers.) 310.45 647.33 T
-0.38 (F_ARRA) 108 625.33 P
-0.38 (Y classes must be binary compatible with the F) 145.29 625.33 P
-0.38 (ortran 77 arrays and therefore the) 331.51 625.33 P
-0.38 (y conform) 463 625.33 P
0.29 (to the F) 108 613.33 P
0.29 (ortran array layouts. F) 138.99 613.33 P
0.29 (or instance, this requires that in a tw) 228.58 613.33 P
0.29 (o dimensional arrays successi) 375.5 613.33 P
0.29 (v) 494.71 613.33 P
0.29 (e) 499.56 613.33 P
0.36 (elements of a column are in a contiguous memory locations \050i.e. column major layout.\051  Note that) 108 601.33 P
-0.6 (re) 108 589.33 P
-0.6 (gular Sather arrays \050ARRA) 115.62 589.33 P
-0.6 (Y{}, ARRA) 221.9 589.33 P
-0.6 (Y2{}, etc.\051 support C-lik) 269.85 589.33 P
-0.6 (e ro) 367.8 589.33 P
-0.6 (w-major layout. Thus, creation) 382.22 589.33 P
0.77 (of F) 108 577.33 P
0.77 (ortran arrays based on Sather arrays may require a layout change. On the other hand, matrix) 125.01 577.33 P
0.85 (classes pro) 108 565.33 P
0.85 (vided by the Sather Math library ha) 152.3 565.33 P
0.85 (v) 299.42 565.33 P
0.85 (e the same layout as F) 304.27 565.33 P
0.85 (ortran arrays. F_ARRA) 396.98 565.33 P
0.85 (Y2) 491.78 565.33 P
-0.4 (classes pro) 108 553.33 P
-0.4 (vide constructors from MA) 151.05 553.33 P
-0.4 (T classes that ha) 257.88 553.33 P
-0.4 (v) 322.3 553.33 P
-0.4 (e reference semantics - thus the creation pro-) 327.15 553.33 P
(cedure is f) 108 541.33 T
(airly ine) 149.55 541.33 T
(xpensi) 182.45 541.33 T
(v) 208.31 541.33 T
(e.) 213.16 541.33 T
0.79 (Combining materials from this chapter) 108 519.33 P
0.79 (, and using F) 265.75 519.33 P
0.79 (ortran array types, we can construct a simple) 319.64 519.33 P
-0.24 (Sather interf) 108 507.33 P
-0.24 (ace to standard F) 157.37 507.33 P
-0.24 (ortran BLAS single precision matrix multiplication routine as follo) 224.53 507.33 P
-0.24 (ws:) 490.11 507.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(    SUBROUTINE SGEMM \050TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC\051) 144 487.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    CHARACTER*1        TRANSA, TRANSB) 144 478.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    INTEGER            M, N, K, LDA, LDB, LDC) 144 469.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    REAL               ALPHA, BETA) 144 460.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    REAL               A\050 LDA, * \051, B\050 LDB, * \051, C\050 LDC, * \051) 144 451.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(external FORTRAN class BLAS is) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   sgemm\050transa:F_CHARACTER, transb:F_CHARACTER, m,n,k:F_INTEGER,) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( alpha:F_REAL, a:F_ARRAY2{F_REAL}, lda:F_INTEGER,) 178.2 411.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( b:F_ARRAY2{F_REAL}, ldb:F_INTEGER,beta:F_REAL,) 178.2 402.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( C:F_ARRAY2{F_REAL},ldc:F_INTEGER\051;) 178.2 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this corresponds to the fortran BLAS signature) 144 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class TEST_BLAS is) 144 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fa,fb,fc:F_ARRAY2{F_REAL};) 144 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      sa,sb,sc:MAT;) 144 330.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      initialize\050sa,sb,sc\051;) 144 312.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fa := #\050sa\051;  -- these creations has "reference" semantics) 144 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fb := #\050sb\051;) 144 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fc := #\050sc\051;) 144 285.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      dim:F_INTEGER := #\050fa.size\051;) 144 267.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      TEST_BLAS::sgemm\050#\050'N'\051,#\050'N'\051,#\050sa.nr\051,#\050sb.nc\051,#\050sa.nc\051,#\0501.0\051,) 144 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fa,#\050sa.size1\051,fb,#\050sb.size1\051,#\0500.0\051,fc,#\050sc.size1\051\051;) 144 249.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- at this point, both fc and sc have a multiplication result) 144 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 231.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   initialize\050sa:MAT,sb:MAT,sc:MAT\051 is) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- initialization code ...) 144 204.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 195.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 495.88 129.6 446.12 2 L
V
0 Z
N
489.6 495.88 489.6 446.12 2 L
V
N
129.48 496 489.73 496 2 L
V
N
129.48 446 489.73 446 2 L
V
N
129.6 437.88 129.6 181.13 2 L
V
N
489.6 437.88 489.6 181.13 2 L
V
N
129.48 438 489.73 438 2 L
V
N
129.48 181 489.73 181 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "165" 165
%%Page: "166" 166
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(166) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.41 (W) 108 659.33 P
-0.41 (e can go one step f) 116.64 659.33 P
-0.41 (ather and hide the details of F) 189.17 659.33 P
-0.41 (ortran implementation of sgemm entirely from the) 305.4 659.33 P
(user:) 108 647.33 T
0.23 (This code sho) 108 405.33 P
0.23 (ws that using high-performance F) 163.77 405.33 P
0.23 (ortran BLAS in Sather is, in f) 299.53 405.33 P
0.23 (act, much easier than) 418.88 405.33 P
-0.09 (in F) 108 393.33 P
-0.09 (ortran! The internal w) 123.6 393.33 P
-0.09 (orkings of BLAS could be b) 211.25 393.33 P
-0.09 (uried in the libraries. As a result, matrix mul-) 323.64 393.33 P
-0.01 (tiplication is e) 108 381.33 P
-0.01 (xpressed as easily as "a*b" in the e) 164.5 381.33 P
-0.01 (xample. If the code is compiled with compiler op-) 303.82 381.33 P
-0.31 (timizations on, the Sather inlining stage eliminates an e) 108 369.33 P
-0.31 (xtra routine call, and the end result will be as) 326.78 369.33 P
-0.18 (ef) 108 357.33 P
-0.18 (\336cient as calling "sgemm" from F) 115.52 357.33 P
-0.18 (ortran directly) 249.57 357.33 P
-0.18 (. Ho) 305.67 357.33 P
-0.18 (we) 322.46 357.33 P
-0.18 (v) 333.87 357.33 P
-0.18 (er) 338.72 357.33 P
-0.18 (, we get a) 346.09 357.33 P
-0.18 (w) 383.72 357.33 P
-0.18 (ay with not specifying about) 390.84 357.33 P
(a dozen parameters in the most general case.) 108 345.33 T
-0.35 (In the gi) 108 323.33 P
-0.35 (v) 140.37 323.33 P
-0.35 (en e) 145.22 323.33 P
-0.35 (xample, the space for the multiplication result \325) 161.1 323.33 P
7 F
-0.39 (fc) 348.05 323.33 P
5 F
-0.35 (\325 needs to be allocated in Sather \050F) 355.83 323.33 P
-0.35 (or-) 492.34 323.33 P
0.22 (tran 77 has no means for a dynamic memory allocation\051. This is also necessary e) 108 311.33 P
0.22 (v) 433.31 311.33 P
0.22 (en when F) 438.16 311.33 P
0.22 (ortran) 480.12 311.33 P
(arrays are returned by functions.) 108 299.33 T
4 F
(P) 108 271.33 T
(oints to note) 114.27 271.33 T
5 F
(\245) 108 255.33 T
(F) 121.54 255.33 T
(ortran arrays ha) 126.95 255.33 T
(v) 189.5 255.33 T
(e a dif) 194.35 255.33 T
(ferent layout from standard Sather arrays. In particular) 219.09 255.33 T
(, in) 436.96 255.33 T
(F_ARRA) 121.54 243.33 T
(Y2, consecuti) 158.83 243.33 T
(v) 213.57 243.33 T
(e elements in array columns occup) 218.42 243.33 T
(y consecuti) 356.9 243.33 T
(v) 401.92 243.33 T
(e storage, while) 406.77 243.33 T
(ARRA) 121.54 231.33 T
(Y2 has a ro) 148.27 231.33 T
(w-major layout.) 193.84 231.33 T
(\245) 108 216.33 T
(MA) 121.54 216.33 T
(T classes ha) 136.54 216.33 T
(v) 184.66 216.33 T
(e the same layout as F) 189.51 216.33 T
(ortran arrays, and con) 277.96 216.33 T
(v) 364.75 216.33 T
(ersion from MA) 369.6 216.33 T
(T to) 433.48 216.33 T
(F_ARRA) 121.54 204.33 T
(Y2 is v) 158.83 204.33 T
(ery light-weight \050reference semantics\051) 187.57 204.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAT is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  .....) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  various methods from MAT class) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  .....) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  times\050m:SAME\051:SAME is) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- multiply self by m and return the resulting matrix) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- For efficiency, uses high-performance Fortran 77 BLAS sgemm) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res:MAT := #\050nr,m.nc\051; -- storage for result) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fa,fb,fc:F_ARRAY2{F_REAL};) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fa := #\050self\051;) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fb := #\050m\051;) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fc := #\050res\051;) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- now, call the Fortran BLAS sgemm) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      TEST_BLAS::sgemm\050#\050'N'\051,#\050'N'\051,#\050nr\051,#\050m.nc\051,#\050nc\051,#\0501.0\051,) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fa,#\050size1\051,fb,#\050m.size1\051,#\0500.0\051,fc,#\050res.size1\051\051;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- at this point, both fc and res have a multiplication result) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res;) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- now it is really easy to multiply matrices!) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a,b,c:MAT;) 144 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(c := a*b;) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 424.13 2 L
V
0 Z
N
489.6 635.88 489.6 424.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 424 489.73 424 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "166" 166
%%Page: "167" 167
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 238.72 710.84 T
(acing with For) 257.92 710.84 T
(tr) 312.38 710.84 T
(an :) 317.34 710.84 T
0 F
(13.3) 334.34 710.84 T
(Datatype Ma) 352.06 710.84 T
(pping) 404.5 710.84 T
6 10 Q
(167) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(13.3.3   F_R) 108 658 T
(OUT and F_HANDLER T) 173.8 658 T
(ypes) 309.74 658 T
4 10 Q
(P) 108 629.33 T
(assing Routines as Ar) 114.37 629.33 T
(guments, F_R) 219.25 629.33 T
(OUT{}) 285.17 629.33 T
5 F
-0.04 (F) 108 606.33 P
-0.04 (ortran 77 supports passing procedures as ar) 113.41 606.33 P
-0.04 (guments to subroutines and functions. It is desirable to) 285.73 606.33 P
0.06 (be able to package a Sather routine and pass it as an ar) 108 594.33 P
0.06 (gument to F) 326.28 594.33 P
0.06 (ortran code. It may pro) 374.59 594.33 P
0.06 (v) 466.61 594.33 P
0.06 (e neces-) 471.46 594.33 P
0.41 (sary for e) 108 582.33 P
0.41 (xample, when F) 146.42 582.33 P
0.41 (ortran numerical code e) 211.24 582.33 P
0.41 (xpects a dif) 307 582.33 P
0.41 (ferentiation or inte) 353.66 582.33 P
0.41 (gration function to) 428.75 582.33 P
0.18 (be passed as an ar) 108 570.33 P
0.18 (gument. Since we w) 180.18 570.33 P
0.18 (ould lik) 261.71 570.33 P
0.18 (e to e) 292.63 570.33 P
0.18 (xploit Sather \337e) 314.5 570.33 P
0.18 (xibility and de) 378.59 570.33 P
0.18 (v) 436.48 570.33 P
0.18 (elopment speed) 441.33 570.33 P
-0.27 (whene) 108 558.33 P
-0.27 (v) 133.85 558.33 P
-0.27 (er possible, a natural thing to do is to write such inte) 138.7 558.33 P
-0.27 (gration routines in Sather and pass them) 345.05 558.33 P
(to numerical F) 108 546.33 T
(ortran code.) 166.18 546.33 T
0.37 (Sather 1.1 pro) 108 524.33 P
0.37 (vides a w) 164.96 524.33 P
0.37 (ay to b) 203.37 524.33 P
0.37 (undle an) 231.13 524.33 P
0.37 (y routine in the External class that supports the F) 265.5 524.33 P
0.37 (ortran pa-) 464.48 524.33 P
-0.46 (rameter passing con) 108 512.33 P
-0.46 (v) 186.66 512.33 P
-0.46 (ention and pass it as a functional ar) 191.51 512.33 P
-0.46 (gument to F) 328.91 512.33 P
-0.46 (ortran code that e) 376.18 512.33 P
-0.46 (xpects e) 444.35 512.33 P
-0.46 (xternal) 476.23 512.33 P
0.7 (procedures as parameters. A F) 108 500.33 P
0.7 (ortran routine type F_R) 232 500.33 P
0.7 (OUT{} serv) 327.85 500.33 P
0.7 (es this purpose. In man) 377.71 500.33 P
0.7 (y w) 472.85 500.33 P
0.7 (ays,) 488.17 500.33 P
-0.39 (F_R) 108 488.33 P
-0.39 (OUTs are similar to Sather routine closures. Just as routine closures, the) 124.83 488.33 P
-0.39 (y are strongly typed and) 408.92 488.33 P
-0.6 (pro) 108 476.33 P
-0.6 (vide similar creation f) 121.18 476.33 P
-0.6 (acilities. Ho) 207.33 476.33 P
-0.6 (we) 254.81 476.33 P
-0.6 (v) 266.22 476.33 P
-0.6 (er) 271.07 476.33 P
-0.6 (, unlik) 278.44 476.33 P
-0.6 (e routine closures, all ar) 303.3 476.33 P
-0.6 (guments in the F) 396.55 476.33 P
-0.6 (ortran rou-) 461.56 476.33 P
-0.22 (tine used for creation must be left unbound. This is necessary to adhere to F) 108 464.33 P
-0.22 (ortran semantics and for) 407.75 464.33 P
(performance considerations.) 108 452.33 T
0.36 (\325#F_R) 108 430.33 P
0.36 (OUT\050...\051\325 is a creation e) 133.16 430.33 P
0.36 (xpression that surrounds a F) 230.26 430.33 P
0.36 (ortran calls with all ar) 344.34 430.33 P
0.36 (guments replaced) 433.38 430.33 P
-0.12 (by the underscore character \325_\325. F) 108 418.33 P
-0.12 (or e) 242.2 418.33 P
-0.12 (xample, this code may be used to compute a distance between) 257.2 418.33 P
(tw) 108 406.33 T
(o points on the plane whose coordinates are represented by F) 117.9 406.33 T
(ortran comple) 361.59 406.33 T
(x numbers:) 417.26 406.33 T
-0.22 (In the abo) 108 245.33 P
-0.22 (v) 147.4 245.33 P
-0.22 (e e) 152.25 245.33 P
-0.22 (xample, an e) 163.26 245.33 P
-0.22 (xternally implemented F) 213.49 245.33 P
-0.22 (ortran subroutine process_points e) 311.22 245.33 P
-0.22 (xpects tw) 447.89 245.33 P
-0.22 (o ar-) 485.62 245.33 P
-0.44 (rays of comple) 108 233.33 P
-0.44 (x numbers and a function that will be applied to corresponding elements in the arrays:) 166.39 233.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(external FORTRAN class STAT is) 144 386.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   distance\050point1:F_COMPLEX, point2:F_COMPLEX,res:F_REAL\051 is) 144 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- this routine is compiled using the Fortran parameter) 144 368.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- passing convention and name binding. It could be called) 144 359.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      -- from either Sather or Fortran) 144 350.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      x1:FLT := point1.re.flt; y1:FLT := point1.im.flt;) 144 341.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      x2:FLT := point2.re.flt; y2:FLT := point2.im.flt;) 144 332.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res := #F_REAL\050\050\050x1-x2\051.square + \050y1-y2\051.square\051.sqrt\051;) 144 323.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 314.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this routine is implemented externally in Fortran) 144 296.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   process_points\050array1:F_ARRAY{F_COMPLEX}, array2:F_ARRAY{F_COMPLEX},) 144 287.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(               func:F_ROUT{F_COMPLEX,F_COMPLEX,F_REAL\051,size:F_INTEGER\051;) 144 278.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 269.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    SUBROUTINE PROCESS_POINTS\050ARRAY1,ARRAY2,FUNC,SIZE\051) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    COMPLEX ARRAY1\050*\051, ARRAY2\050*\051) 144 204.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    EXTERNAL FUNC) 144 195.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    INTEGER SIZE) 144 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    REAL RES) 144 168.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    DO 10 I=1,SIZE) 144 159.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      CALL FUNC\050ARRAY1\050I\051,ARRAY2\050I\051,RES\051) 144 150.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      PRINT *, RES) 144 141.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(10  CONTINUE) 144 132.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    END) 144 123.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 394.88 129.6 264.13 2 L
V
0 Z
N
489.6 394.88 489.6 264.13 2 L
V
N
129.48 395 489.73 395 2 L
V
N
129.48 264 489.73 264 2 L
V
N
129.6 221.88 129.6 118.13 2 L
V
N
489.6 221.88 489.6 118.13 2 L
V
N
129.48 222 489.73 222 2 L
V
N
129.48 118 489.73 118 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "167" 167
%%Page: "168" 168
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(168) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(W) 108 659.33 T
(e can pass a routine de\336ned in Sather to F) 116.64 659.33 T
(ortran subroutine process_points the follo) 283.41 659.33 T
(wing w) 449.81 659.33 T
(ay:) 479.43 659.33 T
-0.23 (V) 108 570.33 P
-0.23 (ariables of F_R) 114.11 570.33 P
-0.23 (OUT type beha) 174.91 570.33 P
-0.23 (v) 235.9 570.33 P
-0.23 (e similarly to R) 240.74 570.33 P
-0.23 (OUT v) 301.6 570.33 P
-0.23 (ariables. It is possible to assign to such v) 329.17 570.33 P
-0.23 (ari-) 490.12 570.33 P
(ables, pass them as parameters, etc.:) 108 558.33 T
4 F
(P) 108 481.33 T
(oints to note) 114.27 481.33 T
5 F
(\245) 108 465.33 T
(F_R) 121.54 465.33 T
(OUT type speci\336ers are v) 138.37 465.33 T
(ery similar to routine closure type speci\336ers, b) 240.97 465.33 T
(ut all types inside) 426.3 465.33 T
(F_R) 121.54 453.33 T
(OUT{} must be F) 138.37 453.33 T
(ortran types.) 210.32 453.33 T
(\245) 108 438.33 T
(All call ar) 121.54 438.33 T
(guments in #F_R) 161.35 438.33 T
(OUT\050\051 must remain unbound \050F) 229.85 438.33 T
(ortran 77 does not support binding) 358.02 438.33 T
(subroutine or function ar) 121.54 426.33 T
(guments\051) 220.51 426.33 T
(\245) 108 411.33 T
(F_R) 121.54 411.33 T
(OUT v) 138.37 411.33 T
(ariables could be assigned to just lik) 166.17 411.33 T
(e other Sather v) 311.06 411.33 T
(ariables. The types of the right-) 373.85 411.33 T
(hand side and the left-hand sides of such assignments are strongly check) 121.54 399.33 T
(ed the same w) 411.11 399.33 T
(ay as) 467.94 399.33 T
(for other assignments.) 121.54 387.33 T
(\245) 108 372.33 T
(Unlik) 121.54 372.33 T
(e Sather routine closures, there may be no subtyping relationship between dif) 144.22 372.33 T
(ferent) 452.81 372.33 T
(F_R) 121.54 360.33 T
(OUT types \050this is because all F) 138.37 360.33 T
(ortran types are concrete\051. Assignments or calls are possi-) 266.54 360.33 T
(ble only when the types are e) 121.54 348.33 T
(xactly the same.) 238.03 348.33 T
(\245) 108 333.33 T
(#F_R) 121.54 333.33 T
(OUT\050\051 could be used just as well to bind e) 143.37 333.33 T
(xternally de\336ned F) 312.92 333.33 T
(ortran routines \050routines) 388.32 333.33 T
(without bodies\051. These could be passed back to F) 121.54 321.33 T
(ortran or used in Sather without restrictions.) 318.31 321.33 T
(\245) 108 306.33 T
(T) 121.54 306.33 T
(ype inferencing for F_R) 126.85 306.33 T
(OUT creations w) 222.82 306.33 T
(orks e) 291.59 306.33 T
(xactly as that for closure creation e) 315.6 306.33 T
(xpressions.) 455.41 306.33 T
(\245) 108 291.33 T
(F_R) 121.54 291.33 T
(OUT ar) 138.37 291.33 T
(guments cannot be passed as) 169.01 291.33 T
7 F
("out") 286.49 291.33 T
5 F
( or) 307.49 291.33 T
7 F
("inout") 320.82 291.33 T
5 F
( ar) 349.6 291.33 T
(guments.) 359.69 291.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(-- This code appears in some STAT feature) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(array1, array2:F_ARRAY{F_COMPLEX}) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- some code to initialize array1 and array2) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(rout:F_ROUT{F_COMPLEX,F_COMPLEX,F_REAL} := #F_ROUT\050distance\050_,_,_\051\051;) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(process_points\050array1,array2,rout\051; -- call Fortran code) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(rout:F_ROUT{F_COMPLEX,F_COMPLEX,F_REAL} := #F_ROUT\050distance\050_,_,_\051\051;) 144 538.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(rout1:F_ROUT{F_COMPLEX,F_COMPLEX,F_REAL\051;) 144 520.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(rout1 := rout;  -- F_ROUT assignment: lhs and rhs types are the same) 144 511.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 589.12 2 L
V
0 Z
N
489.6 647.88 489.6 589.12 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 589 489.73 589 2 L
V
N
129.6 546.88 129.6 506.12 2 L
V
N
489.6 546.88 489.6 506.12 2 L
V
N
129.48 547 489.73 547 2 L
V
N
129.48 506 489.73 506 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "168" 168
%%Page: "169" 169
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 238.72 710.84 T
(acing with For) 257.92 710.84 T
(tr) 312.38 710.84 T
(an :) 317.34 710.84 T
0 F
(13.3) 334.34 710.84 T
(Datatype Ma) 352.06 710.84 T
(pping) 404.5 710.84 T
6 10 Q
(169) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(Exceptional Condition Handling, F_HANDLER) 108 659.33 T
5 F
-0.24 (It is possible in F) 108 636.33 P
-0.24 (ortran to anticipate e) 175.79 636.33 P
-0.24 (xceptional conditions and ha) 257.4 636.33 P
-0.24 (v) 371.19 636.33 P
-0.24 (e dif) 376.04 636.33 P
-0.24 (ferent \337o) 393.6 636.33 P
-0.24 (w paths depending) 429.49 636.33 P
0.14 (on whether the called subroutine has terminated properly) 108 624.33 P
0.14 (, or has detected abnormal circumstances.) 336.38 624.33 P
(This is achie) 108 612.33 T
(v) 158.3 612.33 T
(ed using the alternate RETURN f) 163.15 612.33 T
(acility) 296.64 612.33 T
(.) 320.99 612.33 T
-0.53 (In the gi) 108 325.33 P
-0.53 (v) 140.02 325.33 P
-0.53 (en e) 144.87 325.33 P
-0.53 (xample, the ar) 160.57 325.33 P
-0.53 (gument list of the call to subroutine FOO includes 2 labels corresponding) 216.25 325.33 P
0.33 (to the e) 108 313.33 P
0.33 (xception handler entries. If an e) 137.95 313.33 P
0.33 (xceptional condition of some sort arises, FOO will transfer) 266.09 313.33 P
0.26 (control to the appropriate e) 108 301.33 P
0.26 (xception handler \050passed as an ar) 217.21 301.33 P
0.26 (gument\051 rather than the caller) 350.81 301.33 P
0.26 (. F) 469.61 301.33 P
0.26 (or e) 480.29 301.33 P
0.26 (x-) 495.67 301.33 P
0.1 (ample, if the v) 108 289.33 P
0.1 (alue of ar) 165.82 289.33 P
0.1 (gument I is 0, the control is transferred to e) 203.6 289.33 P
0.1 (xception handler 1, if J is 0, e) 377.09 289.33 P
0.1 (x-) 495.67 289.33 P
-0.56 (ception handler 2 handles the e) 108 277.33 P
-0.56 (xception. The e) 229.21 277.33 P
-0.56 (xception handlers are indicated by the dummy asterisk) 289.88 277.33 P
(ar) 108 265.33 T
(guments in the subroutine ar) 115.59 265.33 T
(gument list. Only subroutines are allo) 229.29 265.33 T
(wed to ha) 379.59 265.33 T
(v) 418.27 265.33 T
(e such ar) 423.12 265.33 T
(guments.) 458.48 265.33 T
0.46 (Since alternate returns are a part of F) 108 243.33 P
0.46 (ortran, the) 259.05 243.33 P
0.46 (y may be present in the interf) 300.46 243.33 P
0.46 (aces pro) 420.3 243.33 P
0.46 (vided by the) 453.65 243.33 P
-0.62 (F) 108 231.33 P
-0.62 (ortran libraries. It is, therefore, desirable to call such subroutines from Sather and pro) 113.41 231.33 P
-0.62 (vide e) 446.17 231.33 P
-0.62 (xception) 469.56 231.33 P
(handlers written in Sather for such calls.) 108 219.33 T
-0.26 (The F_HANDLER class captures the essence of the F) 108 197.33 P
-0.26 (ortran e) 321.3 197.33 P
-0.26 (xception handlers and could be passed) 351.71 197.33 P
-0.36 (in as an ar) 108 185.33 P
-0.36 (gument to a subroutine with alternate returns. F_HANDLER pro) 147.57 185.33 P
-0.36 (vides a single constructor) 403.14 185.33 P
0.19 (create\050rout:R) 108 173.33 P
0.19 (OUT\051:SAME. The ar) 160.36 173.33 P
0.19 (gument is a bound routine with no ar) 245.82 173.33 P
0.19 (guments since F) 394.44 173.33 P
0.19 (ortran han-) 459.66 173.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(*       A call to a subroutine with "alternate returns") 144 592.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       This is a Fortran\325s way to handle exceptional conditions) 144 583.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       If, for some reason, FOO detects an abnormality) 144 574.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       it can choose to return to exception handlers) 144 565.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       \050passed as labels 100 and 200\051, rather than to the caller) 144 556.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        CALL FOO\050I,J,*100,*200\051) 144 547.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(1       ....) 144 538.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       Handle exceptions) 144 520.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       Exception Handler 1) 144 511.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(100     ....) 144 502.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        GO TO 1) 144 493.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(200     Exception Handler 2) 144 484.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        ....) 144 475.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        GO TO 1) 144 466.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       A subroutine with alternate returns) 144 448.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       Two exception handlers are passed in \050marked by *\051) 144 439.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       RETURN 1 transfers control to the first handler, and) 144 430.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       RETURN 2 transfers control to the second handler) 144 421.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       "Normal" RETURN transfers control to the caller) 144 412.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        SUBROUTINE FOO\050I,J,*,*\051) 144 403.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        ...) 144 394.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(*       Detect abnormal conditions and transfer control to) 144 385.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        the appropriate exception handlers) 144 376.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        IF \050I.EQ.0\051 RETURN 1) 144 367.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        IF \050J.EQ.0\051 RETURN 2) 144 358.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        END) 144 349.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 600.88 129.6 344.13 2 L
V
0 Z
N
489.6 600.88 489.6 344.13 2 L
V
N
129.48 601 489.73 601 2 L
V
N
129.48 344 489.73 344 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "169" 169
%%Page: "170" 170
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(170) 108 710.84 T
8 8 Q
(Interf) 221.58 710.84 T
(acing with For) 240.78 710.84 T
(tr) 295.25 710.84 T
(an :) 300.21 710.84 T
0 F
(13.3 Datatype Ma) 317.2 710.84 T
(pping) 387.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.2 (dlers do not ha) 108 659.33 P
0.2 (v) 167.57 659.33 P
0.2 (e an) 172.42 659.33 P
0.2 (y ar) 188.85 659.33 P
0.2 (guments. No) 204.15 659.33 P
0.2 (w) 255.21 659.33 P
0.2 (, we will call the F) 261.78 659.33 P
0.2 (ortran subroutine FOO, b) 337.08 659.33 P
0.2 (ut supply Sather) 438.59 659.33 P
(e) 108 647.33 T
(xception handlers at the moment of the call.) 112.29 647.33 T
(When this code is e) 108 450.33 T
(x) 186.17 450.33 T
(ecuted, it prints: "Sather handler for F) 191.02 450.33 T
(ortran e) 342.43 450.33 T
(xception 2".) 373.1 450.33 T
-0.1 (F_HANDLER mechanism allo) 108 428.33 P
-0.1 (ws to inte) 231.43 428.33 P
-0.1 (grate F) 269.97 428.33 P
-0.1 (ortran and Sather e) 297.77 428.33 P
-0.1 (xceptions e) 373.12 428.33 P
-0.1 (v) 418.04 428.33 P
-0.1 (en more closely) 422.89 428.33 P
-0.1 (. F) 485.36 428.33 P
-0.1 (or) 495.67 428.33 P
-0.45 (e) 108 416.33 P
-0.45 (xample, we can use Sather e) 112.29 416.33 P
-0.45 (xception handlers that catch F) 223.17 416.33 P
-0.45 (ortran e) 341.18 416.33 P
-0.45 (xceptions to raise standard Sather) 371.4 416.33 P
-0.52 (e) 108 404.33 P
-0.52 (xceptions that are caught by the  Sather protect mechanism. Essentially) 112.29 404.33 P
-0.52 (, this turns F) 391.11 404.33 P
-0.52 (ortran e) 439.41 404.33 P
-0.52 (xception) 469.56 404.33 P
(into re) 108 392.33 T
(gular Sather e) 133.68 392.33 T
(xceptions:) 189.07 392.33 T
(This code produces: "Sather e) 108 137.34 T
(xception for FOR) 227.46 137.34 T
(TRAN->Sather e) 297.41 137.34 T
(xception redirected by handler 2") 365.94 137.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class HANDLERS is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   h\050i:INT\051 is) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT + "Sather handler for Fortran exception "+i.str +"\134n";) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is return new; end;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(external FORTRAN class FOO is) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   foo\050i:F_INTEGER,j:F_INTEGER,handler1:F_HANDLER, handler2:F_HANDLER\051;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- note that foo can\325t have a return value - this is a Fortran) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- restriction on subroutine with alternate returns) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- code that calls Fortran FOO) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(handlers:HANDLERS := #;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(handler1:F_HANDLER := #\050bind\050handlers.h\0501\051\051\051; -- create first handler) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(handler2:F_HANDLER := #\050bind\050handlers.h\0502\051\051\051; -- create second handler) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FOO::foo\050#\0501\051,#\0500\051,handler1,handler2\051;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class HANDLERS is) 144 350.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   r_h\050i:INT\051 is) 144 341.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      raise "FORTRAN->Sather exception redirected by handler #"+i.str;) 144 332.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 323.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is return new; end;) 144 314.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 305.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(external FORTRAN class FOO is) 144 287.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   foo\050i:F_INTEGER,j:F_INTEGER,handler1:F_HANDLER, handler2:F_HANDLER\051;) 144 278.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- note that foo can\325t have a return value - this is a Fortran) 144 269.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- restriction on subroutine with alternate returns) 144 260.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 251.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- code that calls Fortran FOO) 144 233.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(handlers:HANDLERS := #;) 144 224.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(redirect_handler1:F_HANDLER := #\050bind\050handlers.r_h\0501\051\051\051;) 144 215.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(redirect_handler2:F_HANDLER := #\050bind\050handlers.r_h\0502\051\051\051;) 144 206.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(protect) 144 197.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   FOO::foo\050#\0501\051,#\0500\051,redirect_handler1,redirect_handler2\051;) 144 188.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(when STR then) 144 179.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   #OUT + "Sather exception for "+exception+\134n";) 144 170.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end) 144 161.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 469.13 2 L
V
0 Z
N
489.6 635.88 489.6 469.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 469 489.73 469 2 L
V
N
129.6 358.88 129.6 156.13 2 L
V
N
489.6 358.88 489.6 156.13 2 L
V
N
129.48 359 489.73 359 2 L
V
N
129.48 156 489.73 156 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "170" 170
%%Page: "171" 171
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 240.78 710.84 T
(acing with For) 259.98 710.84 T
(tr) 314.44 710.84 T
(an :) 319.4 710.84 T
0 F
(13.4) 336.39 710.84 T
(P) 354.12 710.84 T
(ar) 358.7 710.84 T
(ameter P) 366.41 710.84 T
(assing) 401.69 710.84 T
6 10 Q
(171) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 F
0 X
(P) 108 659.33 T
(oints to note) 114.27 659.33 T
5 F
(\245) 108 643.33 T
(Only routines that ha) 121.54 643.33 T
(v) 205.5 643.33 T
(e no return v) 210.35 643.33 T
(alue can ha) 260.92 643.33 T
(v) 305.7 643.33 T
(e F_HANDLER ar) 310.55 643.33 T
(guments. This is a F) 385.91 643.33 T
(ortran) 466.6 643.33 T
(restriction: only subroutines \050not functions\051 can ha) 121.54 631.33 T
(v) 323.54 631.33 T
(e alternate returns.) 328.39 631.33 T
(\245) 108 616.33 T
(F_HANDLER can be created from a standard closure with no ar) 121.54 616.33 T
(guments or return v) 379.07 616.33 T
(alue:) 457.42 616.33 T
(R) 121.54 604.33 T
(OUT) 127.81 604.33 T
(. An attempt to use closures of other types \050lik) 147.62 604.33 T
(e R) 332.5 604.33 T
(OUT{INT}\051 is reported as an error) 345.71 604.33 T
(.) 484.99 604.33 T
(This restriction is also necessitated by the semantics of alternate returns in F) 121.54 592.33 T
(ortran. F) 426.35 592.33 T
(ortran e) 460.64 592.33 T
(x-) 491.31 592.33 T
(ception handlers do not permit ar) 121.54 580.33 T
(guments.) 253.84 580.33 T
(\245) 108 565.33 T
(F_HANDLER types cannot be passed as ") 121.54 565.33 T
7 F
(out") 291.15 565.33 T
5 F
(or ") 311.38 565.33 T
7 F
(inout") 326.29 565.33 T
5 F
( ar) 351.52 565.33 T
(guments.) 361.61 565.33 T
108 503.98 504 507 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 505.49 540 505.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(13.4  P) 108 513 T
(arameter P) 164.5 513 T
(assing) 257 513 T
5 10 Q
-0.45 (Some routines and calls in e) 108 484.31 P
-0.45 (xternal F) 218.1 484.31 P
-0.45 (ortran classes are compiled using the F) 253.34 484.31 P
-0.45 (ortran parameter passing) 406.03 484.31 P
-0.25 (con) 108 472.31 P
-0.25 (v) 122.04 472.31 P
-0.25 (ention. This section describes ho) 126.89 472.31 P
-0.25 (w this is achie) 256.45 472.31 P
-0.25 (v) 312.37 472.31 P
-0.25 (ed. Routines without bodies in e) 317.22 472.31 P
-0.25 (xternal F) 444.69 472.31 P
-0.25 (ortran) 480.12 472.31 P
0.51 (classes and F) 108 460.31 P
0.51 (ortran routines \050routines whose return types and all ar) 161.64 460.31 P
0.51 (guments are F) 379.92 460.31 P
0.51 (ortran types\051 are) 437.45 460.31 P
0.21 (compiled as described belo) 108 448.31 P
0.21 (w) 216.98 448.31 P
0.21 (. The e) 223.55 448.31 P
0.21 (xplanation is done in terms of mapping the original Sather sig-) 251.32 448.31 P
0.24 (natures to C prototypes. All F) 108 436.31 P
0.24 (ortran types are assumed to ha) 227.95 436.31 P
0.24 (v) 350.33 436.31 P
0.24 (e corresponding C types de\336ned. F) 355.18 436.31 P
0.24 (or) 495.67 436.31 P
-0.36 (e) 108 424.31 P
-0.36 (xample, F_INTEGER class maps onto F_INTEGER C type. Section Portability Issues on page 174) 112.29 424.31 P
0.28 (describes ho) 108 412.31 P
0.28 (w this could be achie) 157.74 412.31 P
0.28 (v) 243.04 412.31 P
0.28 (ed in a portable f) 247.89 412.31 P
0.28 (ashion. The e) 316.67 412.31 P
0.28 (xamples are used to illustrate pa-) 370.68 412.31 P
(rameter passing only - the actual binding of function names is irrele) 108 400.31 T
(v) 378.54 400.31 T
(ant for this purpose.) 383.29 400.31 T
4 12 Q
(13.4.1   Return T) 108 358.98 T
(ypes) 199.98 358.98 T
5 10 Q
0.7 (Routines that return F_INTEGER, F_REAL, F_LOGICAL, and F_DOUBLE map to C functions) 108 336.31 P
-0.61 (that return corresponding C types. A routine that returns F_COMPLEX or F_DOUBLE_COMPLEX) 108 324.31 P
-0.62 (is equi) 108 312.31 P
-0.62 (v) 133.52 312.31 P
-0.62 (alent to a C routine with an e) 138.27 312.31 P
-0.62 (xtra initial ar) 249.57 312.31 P
-0.62 (guments preceding other ar) 299.8 312.31 P
-0.62 (guments in the ar) 406.89 312.31 P
-0.62 (gument) 474 312.31 P
(list. This initial ar) 108 300.31 T
(gument points to the storage for the return v) 178.94 300.31 T
(alue.) 354.78 300.31 T
0.17 (A routine that returns F_CHARA) 108 238.31 P
0.17 (CTER is mapped to a C routine with tw) 242.15 238.31 P
0.17 (o additional ar) 402.29 238.31 P
0.17 (guments: a) 460.22 238.31 P
(pointer to the data, and a string size, al) 108 226.31 T
(w) 262.32 226.31 T
(ays set to 1 in the case of F_CHARA) 269.44 226.31 T
(CTER.) 417.36 226.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(F_COMPLEX foo\050i:F_INTEGER,a:F_REAL\051;) 144 280.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this Sather signature is equivalent to) 144 271.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void foo\050F_COMPLEX* ret_val, F_INTEGER* i_address, F_REAL* a_address\051) 144 262.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_CHARACTER foo\050i:F_INTEGER, a:F_REAL\051;) 144 206.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this Sather signature maps to) 144 197.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void foo\050F_CHARACTER* address, F_LENGTH size, F_INTEGER* i_address,) 144 188.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_REAL* a_address\051;) 144 179.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 288.85 129.6 257.1 2 L
V
0.25 H
0 Z
N
489.6 288.85 489.6 257.1 2 L
V
N
129.48 288.98 489.73 288.98 2 L
V
N
129.48 256.98 489.73 256.98 2 L
V
N
129.6 214.85 129.6 174.1 2 L
V
N
489.6 214.85 489.6 174.1 2 L
V
N
129.48 214.98 489.73 214.98 2 L
V
N
129.48 173.98 489.73 173.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "171" 171
%%Page: "172" 172
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(172) 108 710.84 T
8 8 Q
(Interf) 223.64 710.84 T
(acing with For) 242.84 710.84 T
(tr) 297.3 710.84 T
(an :) 302.26 710.84 T
0 F
(13.4 P) 319.26 710.84 T
(ar) 341.56 710.84 T
(ameter P) 349.27 710.84 T
(assing) 384.55 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.08 (Similarly) 108 659.33 P
0.08 (, a routine returning F_STRING is equi) 144.58 659.33 P
0.08 (v) 302.28 659.33 P
0.08 (alent to a C routine with tw) 307.03 659.33 P
0.08 (o additional initial ar-) 416.83 659.33 P
(guments, a data pointer and a string length.) 108 647.33 T
5 8 Q
(1) 280.48 651.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
(13.4.2   Ar) 108 566 T
(gument T) 164.52 566 T
(ypes) 217.8 566 T
5 10 Q
4.2 (All F) 108 543.33 P
4.2 (ortran ar) 132.9 543.33 P
4.2 (guments are passed by reference. In addition, for each ar) 171.07 543.33 P
4.2 (gument of type) 435.04 543.33 P
0.49 (F_CHARA) 108 531.33 P
0.49 (CTER or F_STRING, an e) 153.16 531.33 P
0.49 (xtra parameter whose v) 261.92 531.33 P
0.49 (alue is the length of the string is ap-) 356.73 531.33 P
(pended to the end of the ar) 108 519.33 T
(gument list.) 214.46 519.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (Additional string length ar) 108 381.33 P
-0.4 (guments are passed by v) 212.45 381.33 P
-0.4 (alue. If there are more than one F_CHARA) 308.36 381.33 P
-0.4 (CTER) 478.44 381.33 P
-0.34 (or F_STRING ar) 108 369.33 P
-0.34 (guments, the lengths are appended to the end of the list in the te) 174.91 369.33 P
-0.34 (xtual order of string) 425.31 369.33 P
(ar) 108 357.33 T
(guments:) 115.59 357.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.55 (Sather signatures that ha) 108 286.33 P
-0.55 (v) 204.19 286.33 P
-0.55 (e F_HANDLER ar) 209.04 286.33 P
-0.55 (guments correspond to C inte) 283.3 286.33 P
-0.55 (ger functions whose return) 398.73 286.33 P
0.07 (v) 108 274.33 P
0.07 (alue represents the alternate return to tak) 112.75 274.33 P
0.07 (e. The actual handlers are not passed to the F) 275.77 274.33 P
0.07 (ortran code.) 456.17 274.33 P
-0.28 (Instead, code to do the branching based on the return v) 108 262.33 P
-0.28 (alue is emitted by the Sather compiler to con-) 324.05 262.33 P
(form to the alternate return semantics.) 108 250.33 T
(Ar) 108 228.33 T
(guments of type F_R) 118.37 228.33 T
(OUT are passed as function pointers.) 202.14 228.33 T
(Thus, the entire C ar) 108 206.33 T
(gument list including additional ar) 189.75 206.33 T
(guments consists of:) 327.35 206.33 T
(\245) 108 188.33 T
(one additional ar) 121.54 188.33 T
(gument due to F_COMPLEX or F_DOUBLE_COMPLEX return type, or tw) 188.57 188.33 T
(o) 495.68 188.33 T
(additional ar) 121.54 176.33 T
(guments due to F_CHARA) 171.63 176.33 T
(CTER or F_STRING return type) 280.4 176.33 T
(\245) 108 161.33 T
(references to "normal" ar) 121.54 161.33 T
(guments corresponding to a Sather signature ar) 221.98 161.33 T
(gument list) 410.1 161.33 T
108 129 504 149.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 140.09 240.98 140.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(1.  The curr) 108 123.67 T
(ent Sather 1.1 implementation disallows r) 147.94 123.67 T
(eturning Fortran strings of size gr) 294.69 123.67 T
(eater than 32 bytes. This) 413.63 123.67 T
(r) 108 114.67 T
(estriction may be lifted in the futur) 111.02 114.67 T
(e r) 234.28 114.67 T
(eleases.) 243.13 114.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(F_STRING foo\050i:F_INTEGER, a:F_REAL\051;) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this Sather signature maps to) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void foo\050F_CHARACTER* address, F_LENGTH size, F_INTEGER* i, F_REAL* a\051;) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050i:F_INTEGER,c:F_CHARACTER,a:F_REAL\051:F_INTEGER) 144 499.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this is mapped to) 144 490.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_INTEGER foo\050F_INTEGER* i_address,F_CHARACTER*c_address,F_REAL*) 144 481.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a_address,F_LENGTH c_length\051;) 144 472.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- all calls have c_length set to 1) 144 463.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050i:F_INTEGER,s:F_STRING,a:F_REAL\051:F_INTEGER) 144 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this is mapped to) 144 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_INTEGER foo\050F_INTEGER* i_address,F_CHARACTER* s_address,F_REAL*) 144 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a_address,F_LENGTH s_length\051;) 144 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- propoer s_length is supplied by the caller) 144 405.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(foo\050s1:F_STRING,i:F_INTEGER,s2:F_STRING,a:F_REAL\051;) 144 337.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this is mapped to) 144 328.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void foo\050F_CHARACTER* s1_address,F_INTEGER* i_address,F_CHARACTER*) 144 319.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(s2_address, F_REAL a_address,F_LENGTH s1_length, F_LENGTH s2_length\051;) 144 310.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 604.12 2 L
V
0.25 H
0 Z
N
489.6 635.88 489.6 604.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 604 489.73 604 2 L
V
N
129.6 507.88 129.6 458.12 2 L
V
N
489.6 507.88 489.6 458.12 2 L
V
N
129.48 508 489.73 508 2 L
V
N
129.48 458 489.73 458 2 L
V
N
129.6 449.88 129.6 400.12 2 L
V
N
489.6 449.88 489.6 400.12 2 L
V
N
129.48 450 489.73 450 2 L
V
N
129.48 400 489.73 400 2 L
V
N
129.6 345.88 129.6 305.13 2 L
V
N
489.6 345.88 489.6 305.13 2 L
V
N
129.48 346 489.73 346 2 L
V
N
129.48 305 489.73 305 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "172" 172
%%Page: "173" 173
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 240.78 710.84 T
(acing with For) 259.98 710.84 T
(tr) 314.44 710.84 T
(an :) 319.4 710.84 T
0 F
(13.4) 336.39 710.84 T
(P) 354.12 710.84 T
(ar) 358.7 710.84 T
(ameter P) 366.41 710.84 T
(assing) 401.69 710.84 T
6 10 Q
(173) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(\245) 108 659.33 T
(additional ar) 121.54 659.33 T
(guments for each F_CHARA) 171.63 659.33 T
(CTER or F_STRING ar) 288.16 659.33 T
(gument in the Sather signa-) 383.81 659.33 T
(ture) 121.54 647.33 T
(The follo) 108 625.33 T
(wing e) 144.69 625.33 T
(xample combines all rules:) 171.48 625.33 T
4 12 Q
(13.4.3   OUT and INOUT Ar) 108 517 T
(guments) 258.53 517 T
5 10 Q
0.45 (Sather 1.1 pro) 108 494.33 P
0.45 (vides the e) 165.13 494.33 P
0.45 (xtra \337e) 208.65 494.33 P
0.45 (xibility of) 237 494.33 P
7 F
0.5 (\325out\325) 280.13 494.33 P
5 F
0.45 ( and) 298.47 494.33 P
7 F
0.5 (\325inout\325) 318.82 494.33 P
5 F
0.45 (ar) 348.22 494.33 P
0.45 (gument modes for F) 355.81 494.33 P
0.45 (ortran calls. The) 437.84 494.33 P
-0.42 (Sather compiler ensures that the semantics of) 108 482.33 P
7 F
-0.47 (\325out\325) 288.64 482.33 P
5 F
-0.42 ( and \325) 306.98 482.33 P
7 F
-0.47 (inout\325) 328.91 482.33 P
5 F
-0.42 ( is preserv) 352.81 482.33 P
-0.42 (ed e) 392.92 482.33 P
-0.42 (v) 408.63 482.33 P
-0.42 (en when calls cross the) 413.48 482.33 P
0.05 (Sather language boundaries. In particular) 108 470.33 P
0.05 (, the changes to such ar) 272.48 470.33 P
0.05 (guments are not observ) 365.86 470.33 P
0.05 (ed until the) 458.9 470.33 P
(call is complete - thus the interlanguage calls ha) 108 458.33 T
(v) 299.99 458.33 T
(e the same semantics as re) 304.84 458.33 T
(gular Sather calls.) 409.94 458.33 T
1.05 (This additional mechanism mak) 108 436.33 P
1.05 (es the semantics of some ar) 239.1 436.33 P
1.05 (guments visually e) 353.86 436.33 P
1.05 (xplicit and conse-) 430.8 436.33 P
0.13 (quently helps catch some b) 108 424.33 P
0.13 (ugs caused by the modi\336cation of \325) 216.62 424.33 P
7 F
0.14 (in\325) 357.92 424.33 P
5 F
0.13 ( ar) 367.92 424.33 P
0.13 (guments \050all F) 378.13 424.33 P
0.13 (ortran ar) 436.01 424.33 P
0.13 (guments) 470.11 424.33 P
-0.43 (are passed by reference, and F) 108 412.33 P
-0.43 (ortran code can potentially modify all ar) 226.78 412.33 P
-0.43 (guments without restrictions.\051) 385.13 412.33 P
(A special compiler option may enable checking the in) 108 400.33 T
(v) 323.12 400.33 T
(ariance of F) 327.87 400.33 T
(ortran) 375.48 400.33 T
7 F
(\325in\325) 401.86 400.33 T
5 F
( ar) 414.08 400.33 T
(guments) 424.17 400.33 T
5 8 Q
(2) 458.06 404.33 T
5 10 Q
(.) 462.06 400.33 T
-0.45 (In the case of calling F) 108 378.33 P
-0.45 (ortran code, the Sather compiler ensures that the v) 196.99 378.33 P
-0.45 (alue/result semantics is pre-) 393.97 378.33 P
-0.57 (serv) 108 366.33 P
-0.57 (ed by the caller - the Sather compiler has no control o) 124.51 366.33 P
-0.57 (v) 332.8 366.33 P
-0.57 (er e) 337.65 366.33 P
-0.57 (xternal F) 351.64 366.33 P
-0.57 (ortran code. This may in) 386.76 366.33 P
-0.57 (v) 482.13 366.33 P
-0.57 (olv) 486.93 366.33 P
-0.57 (e) 499.56 366.33 P
-0.01 (cop) 108 354.33 P
-0.01 (ying) 122.34 354.33 P
7 F
-0.01 (\325inout\325) 142.61 354.33 P
5 F
-0.01 ( ar) 168.73 354.33 P
-0.01 (guments to temporaries and passing references to these temporaries to F) 178.8 354.33 P
-0.01 (ortran. In) 466.8 354.33 P
-0.29 (the case of Sather routines that are called from F) 108 342.33 P
-0.29 (ortran, the Sather compiler emits a special prologue) 299.38 342.33 P
0.21 (for such routines to ensure the v) 108 330.33 P
0.21 (alue/result semantics for the F) 237.34 330.33 P
0.21 (ortran caller) 358.58 330.33 P
0.21 (. In summary) 406.84 330.33 P
0.21 (, the v) 459.66 330.33 P
0.21 (alue/) 484.56 330.33 P
-0.16 (result semantics for e) 108 318.33 P
-0.16 (xternal calls to F) 192.64 318.33 P
-0.16 (ortran is ensured by the caller) 258.96 318.33 P
-0.16 (, and for Sather routines that are) 376.36 318.33 P
(meant to be called by F) 108 306.33 T
(ortran it is implemented by the callee.) 201.45 306.33 T
(This e) 108 284.33 T
(xample suggests ho) 132.57 284.33 T
(w a signature for a routine that sw) 210.65 284.33 T
(aps tw) 346.91 284.33 T
(o inte) 372.64 284.33 T
(gers:) 394.99 284.33 T
-0.02 (Note that using ar) 108 204.33 P
-0.02 (gument modes in this e) 179.14 204.33 P
-0.02 (xample mak) 271.68 204.33 P
-0.02 (es the semantics of the routine more ob) 320.73 204.33 P
-0.02 (vious.) 477.35 204.33 P
108 120 504 140.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 131.09 240.98 131.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(2.  The ICSI Sather 1.1 compiler curr) 108 114.67 T
(ently does not implement this functionality) 235.1 114.67 T
(.) 387.07 114.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(foo\050s1:F_STRING, i:F_INTEGER, a:F_REAL, c:F_CHARACTER\051:F_COMPLEX) 144 605.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- is mapped to) 144 596.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void foo\050F_COMPLEX* ret_address, F_CHARACTER* s1_address, F_INTEGER*) 144 587.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(i_address, F_REAL* a_address, F_CHARACTER* c_address, F_LENGTH) 144 578.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(s1_length, F_LENGTH c_length\051;) 144 569.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- all Sather calls have c_length set to 1) 144 560.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(SUBROUTINE SWAP\050A,B\051) 144 264.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(INTEGER A,B) 144 255.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- a Sather signature may look like) 144 237.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(swap\050inout a:F_INTEGER, inout b:F_INTEGER\051;) 144 228.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 613.88 129.6 555.12 2 L
V
0.25 H
0 Z
N
489.6 613.88 489.6 555.12 2 L
V
N
129.48 614 489.73 614 2 L
V
N
129.48 555 489.73 555 2 L
V
N
129.6 272.88 129.6 223.13 2 L
V
N
489.6 272.88 489.6 223.13 2 L
V
N
129.48 273 489.73 273 2 L
V
N
129.48 223 489.73 223 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "173" 173
%%Page: "174" 174
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(174) 108 710.84 T
8 8 Q
(Interf) 228.66 710.84 T
(acing with For) 247.86 710.84 T
(tr) 302.33 710.84 T
(an :) 307.29 710.84 T
0 F
(13.5 P) 324.28 710.84 T
(or) 346.26 710.84 T
(ta) 354.07 710.84 T
(bility Issues) 362.41 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.12 (In the follo) 108 659.33 P
-0.12 (wing e) 151.96 659.33 P
-0.12 (xample, compiling the program with all checks on may re) 178.63 659.33 P
-0.12 (v) 408.4 659.33 P
-0.12 (eal a b) 413.25 659.33 P
-0.12 (ug due to the in-) 438.92 659.33 P
(correct modi\336cation of the v) 108 647.33 T
(ector sizes:) 221.72 647.33 T
0.31 (In addition to e) 108 549.33 P
0.31 (xtra deb) 169.62 549.33 P
0.31 (ugging capabilities,) 202.22 549.33 P
7 F
0.35 (\325in\325) 283.67 549.33 P
5 F
0.31 ( ar) 295.89 549.33 P
0.31 (guments are passed slightly more ef) 306.29 549.33 P
0.31 (\336ciently than) 451.19 549.33 P
(\325) 108 537.33 T
9 F
(out\325) 111.33 537.33 T
5 F
( and) 135.33 537.33 T
7 F
(\325inout\325) 154.77 537.33 T
5 F
( ar) 180.89 537.33 T
(guments.) 190.98 537.33 T
4 F
(P) 108 509.33 T
(oints to note) 114.27 509.33 T
5 F
(\245) 108 493.33 T
(F_R) 121.54 493.33 T
(OUT and F_HANDLER types cannot be) 138.37 493.33 T
7 F
("out") 303.9 493.33 T
5 F
( or ") 324.9 493.33 T
7 F
(inout") 342.31 493.33 T
5 F
( ar) 367.54 493.33 T
(guments.) 377.63 493.33 T
108 409.98 504 413 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 411.49 540 411.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(13.5  P) 108 419 T
(or) 164.32 419 T
(tability Issues) 182.68 419 T
5 10 Q
-0.33 (This section discusses the portability of the Sather/F) 108 390.31 P
-0.33 (ortran interf) 314.69 390.31 P
-0.33 (ace. V) 362.3 390.31 P
-0.33 (arious name binding portabil-) 386.39 390.31 P
0.35 (ity issues where co) 108 378.31 P
0.35 (v) 184.71 378.31 P
0.35 (ered in section Name Binding on page 153. Issues rele) 189.56 378.31 P
0.35 (v) 410.16 378.31 P
0.35 (ant to code portability) 414.91 378.31 P
(are addressed here.) 108 366.31 T
4 12 Q
(13.5.1   P) 108 324.98 T
(or) 158.89 324.98 T
(tability of the Interface Implementation Code) 171.13 324.98 T
5 10 Q
-0.21 (It is important to distinguish between portability of the Sather compiler module that implements the) 108 302.31 P
-0.34 (Sather/F) 108 290.31 P
-0.34 (ortran interf) 141.74 290.31 P
-0.34 (ace and the portability of the code it generates. The F) 189.34 290.31 P
-0.34 (ortran 77 interf) 398.77 290.31 P
-0.34 (ace module) 458.52 290.31 P
0.47 (is written entirely in Sather and is inte) 108 278.31 P
0.47 (grated with the ICSI Sather compiler) 263.61 278.31 P
0.47 (. The F) 412.88 278.31 P
0.47 (ortran interf) 442.27 278.31 P
0.47 (ace) 490.68 278.31 P
0.22 (should be a) 108 266.31 P
0.22 (v) 153.78 266.31 P
0.22 (ailable on all platforms where the ICSI Sather compiler is a) 158.53 266.31 P
0.22 (v) 398.24 266.31 P
0.22 (ailable. In particular) 402.99 266.31 P
0.22 (, it is) 483.84 266.31 P
(a) 108 254.31 T
(v) 112.24 254.31 T
(ailable on most UNIX platforms.) 116.99 254.31 T
4 12 Q
(13.5.2   P) 108 212.98 T
(or) 158.89 212.98 T
(tability of the Generated Code) 171.13 212.98 T
5 10 Q
0.4 (The F) 108 190.31 P
0.4 (ortran 77 standards says that all F) 131.86 190.31 P
0.4 (ortran 77 types e) 268.57 190.31 P
0.4 (xcept for COMPLEX, DOUBLE PRECI-) 336.56 190.31 P
0.72 (SION, and CHARA) 108 178.31 P
0.72 (CTER of an) 189.31 178.31 P
0.72 (y \337a) 238.92 178.31 P
0.72 (v) 256.94 178.31 P
0.72 (or occup) 261.74 178.31 P
0.72 (y a single "unit" of storage space. COMPLEX and) 297.07 178.31 P
-0.2 (DOUBLE PRECISION types tak) 108 166.31 P
-0.2 (e tw) 240.36 166.31 P
-0.2 (o "units" of storage. This may need to be adjusted accordingly) 257 166.31 P
0.16 (when porting the Sather compiler to a dif) 108 154.31 P
0.16 (ferent platform. A modi\336cation to "System/Common/for-) 273.57 154.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(SUBROUTINE ADD_VECTORS\050A,B,RES,size\051) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(REAL A\050*\051,B\050*\051,RES\050*\051) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(INTEGER SIZE) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Sather signature) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(add_vectors\050a,b,res:F_ARRAY{F_REAL}, size:F_INTEGER\051) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- size is an \325in\325 parameter and cannot be modified by Fortran code) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 568.12 2 L
V
0.25 H
0 Z
N
489.6 635.88 489.6 568.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 568 489.73 568 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "174" 174
%%Page: "175" 175
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 245.8 710.84 T
(acing with For) 265 710.84 T
(tr) 319.46 710.84 T
(an :) 324.42 710.84 T
0 F
(13.5) 341.42 710.84 T
(P) 359.14 710.84 T
(or) 363.4 710.84 T
(ta) 371.21 710.84 T
(bility Issues) 379.54 710.84 T
6 10 Q
(175) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.19 (tran.h" may be necessary) 108 659.33 P
-0.19 (. "System/Common/fortran.h" contains a set of de\336nitions for F) 206.93 659.33 P
-0.19 (ortran stor-) 459.48 659.33 P
(age types used by the Sather/F) 108 647.33 T
(ortran interf) 229.78 647.33 T
(ace:) 277.72 647.33 T
0.21 (This pro) 108 513.33 P
0.21 (v) 141.67 513.33 P
0.21 (es to be adequate for most UNIX platforms. On the Cray) 146.52 513.33 P
0.21 (, ho) 374.86 513.33 P
0.21 (we) 389.82 513.33 P
0.21 (v) 401.23 513.33 P
0.21 (er) 406.08 513.33 P
0.21 (, both \337oat and double) 413.45 513.33 P
-0.11 (types occup) 108 501.33 P
-0.11 (y the same storage, and to conform to F) 155.28 501.33 P
-0.11 (ortran 77 speci\336cation, fortran.h needs to be ed-) 312.86 501.33 P
0.68 (ited to de\336ne F_DOUBLE as "long double". F) 108 489.33 P
0.68 (or the Macintosh, ho) 297.98 489.33 P
0.68 (we) 382.54 489.33 P
0.68 (v) 393.95 489.33 P
0.68 (er) 398.8 489.33 P
0.68 (, it should be de\336ned as) 406.17 489.33 P
("short double.") 108 477.33 T
(This is a full set of C types that are used by the interf) 108 455.33 T
(ace as return and ar) 319.82 455.33 T
(gument types:) 397.38 455.33 T
(Array types are represented as pointer to corresponding scalar types.) 108 321.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(typedef long int    F_INTEGER;) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef long int    F_LOGICAL;) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef float       F_REAL;) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef double      F_DOUBLE;) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef char        F_CHARACTER;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef long int    F_LENGTH;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef struct {) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  F_REAL re, im;) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(} F_COMPLEX_struct;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef F_COMPLEX_struct F_COMPLEX;) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(...) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_INTEGER) 144 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_LOGICAL) 144 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_REAL) 144 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_DOUBLE) 144 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_CHARACTER) 144 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_STRING) 144 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_LENGTH) 144 381.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_COMPLEX) 144 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_HANDLER) 144 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(F_ROUT) 144 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(integer or integer*4) 324 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(logical) 324 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(real) 324 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(double) 324 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(character or character*1) 324 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(character*n) 324 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(string length \050same as F_INTEGER\051) 324 381.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(complex) 324 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(call argument for a subroutine) 324 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(with alternate returns) 324 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a routine passed as argument) 324 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 532.12 2 L
V
0 Z
N
489.6 635.88 489.6 532.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 532 489.73 532 2 L
V
N
129.6 443.88 129.6 340.13 2 L
V
N
489.6 443.88 489.6 340.13 2 L
V
N
129.48 444 489.73 444 2 L
V
N
129.48 340 489.73 340 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "175" 175
%%Page: "176" 176
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(176) 108 710.84 T
8 8 Q
(Interf) 228.66 710.84 T
(acing with For) 247.86 710.84 T
(tr) 302.33 710.84 T
(an :) 307.29 710.84 T
0 F
(13.5 P) 324.28 710.84 T
(or) 346.26 710.84 T
(ta) 354.07 710.84 T
(bility Issues) 362.41 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "176" 176
%%Page: "177" 177
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 237 710.84 T
(acing with ANSI C :) 256.2 710.84 T
0 F
(14.1) 331.98 710.84 T
(Ov) 349.7 710.84 T
(er) 360.93 710.84 T
(all Or) 368.38 710.84 T
(g) 388.5 710.84 T
(anization) 393.76 710.84 T
6 10 Q
(177) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Interf) 108 642 S
-0.25 (acing with ANSI C) 192.91 642 S
5 10 Q
-0.13 (This chapter describes interf) 108 517.33 P
-0.13 (acing with ANSI C , X3.159-1989. Section 14.1 gi) 221.1 517.33 P
-0.13 (v) 422.6 517.33 P
-0.13 (es a short o) 427.45 517.33 P
-0.13 (v) 472.19 517.33 P
-0.13 (ervie) 477.04 517.33 P
-0.13 (w) 496.78 517.33 P
0.44 (of the C interf) 108 505.33 P
0.44 (ace functionality) 165.6 505.33 P
0.44 (. Section 14.2 introduces b) 232.33 505.33 P
0.44 (uilt-in C types pro) 340.55 505.33 P
0.44 (vided by the e) 414.79 505.33 P
0.44 (xtended) 472.34 505.33 P
1.44 (Sather library) 108 493.33 P
1.44 (. Section 14.3 talks about user de\336ned e) 163.5 493.33 P
1.44 (xternal C types, constants, attrib) 332.57 493.33 P
1.44 (utes, and) 467.01 493.33 P
-0.43 (shared elements. Section 14.4 co) 108 481.33 P
-0.43 (v) 237.22 481.33 P
-0.43 (ers parameter passing issues, and \336nally section 14.5 describes the) 242.07 481.33 P
(inline C f) 108 469.33 T
(acility) 145.68 469.33 T
(.) 170.03 469.33 T
108 407.98 504 411 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 409.49 540 409.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(14.1  Overall Or) 108 417 T
(ganization) 239.81 417 T
5 10 Q
0.18 (An e) 108 388.31 P
0.18 (xternal class which interf) 127.19 388.31 P
0.18 (aces to ANSI C is designated with the language identi\336er \324) 228.43 388.31 P
0.18 (C) 465.18 388.31 P
0.18 (\325. T) 471.85 388.31 P
0.18 (ypes) 485.67 388.31 P
-0.62 (de\336ned by e) 108 376.31 P
-0.62 (xternal C classes are called) 155.49 376.31 P
1 F
-0.62 (external C types) 263.18 376.31 P
5 F
-0.62 (. Similar to e) 327.49 376.31 P
-0.62 (xternal F) 377.15 376.31 P
-0.62 (ortran types, signatures) 412.2 376.31 P
0.41 (without bodies \050abstract signatures\051 are allo) 108 364.31 P
0.41 (wed in e) 284.49 364.31 P
0.41 (xternal C types. Such signatures must contain) 319.05 364.31 P
0.01 (only b) 108 352.31 P
0.01 (uilt-in or user de\336ned C types and the) 133.09 352.31 P
0.01 (y are implemented e) 283.83 352.31 P
0.01 (xternally in ANSI C. Abstract iter-) 365.08 352.31 P
-0.23 (ator signatures are not allo) 108 340.31 P
-0.23 (wed in e) 212.91 340.31 P
-0.23 (xternal C classes. Routines with bodies whose signatures contain) 246.17 340.31 P
0.26 (only C types may be called from C. Routines with bodies whose signatures use types other than C) 108 328.31 P
-0.09 (types are re) 108 316.31 P
-0.09 (gular Sather routines and are not accessible from C. External C routines cannot be o) 153.75 316.31 P
-0.09 (v) 488.05 316.31 P
-0.09 (er-) 492.9 316.31 P
(loaded.) 108 304.31 T
0.44 (In contrast with the e) 108 282.31 P
0.44 (xternal F) 194.02 282.31 P
0.44 (ortran classes, e) 230.13 282.31 P
0.44 (xternal C classes may ha) 294.44 282.31 P
0.44 (v) 394.85 282.31 P
0.44 (e attrib) 399.7 282.31 P
0.44 (utes and objects of) 427.99 282.31 P
-0.36 (e) 108 270.31 P
-0.36 (xternal C types may e) 112.29 270.31 P
-0.36 (xist. All attrib) 197.9 270.31 P
-0.36 (utes must also be of C types. The C interf) 252.81 270.31 P
-0.36 (ace pro) 415.54 270.31 P
-0.36 (vides a naming) 444.18 270.31 P
(f) 108 258.31 T
(acility that allo) 111.23 258.31 T
(ws interoperability with the e) 170.98 258.31 T
(xisting C header \336les.) 288.04 258.31 T
(Global C v) 108 236.31 T
(ariables can be accessed as shared attrib) 151.64 236.31 T
(utes of e) 311.38 236.31 T
(xternal C classes.) 345.11 236.31 T
0.21 (C symbols are generated by applying a platform speci\336c C name binding con) 108 214.31 P
0.21 (v) 418.95 214.31 P
0.21 (ention to the te) 423.8 214.31 P
0.21 (xtual) 484 214.31 P
-0.5 (e) 108 202.31 P
-0.5 (xternal C routine names. It is also possible to e) 112.29 202.31 P
-0.5 (xplicitly specify name binding for e) 294.88 202.31 P
-0.5 (xternal C classes.) 435.28 202.31 P
0.16 (Finally) 108 180.31 P
0.16 (, it is possible to inline ANSI C code into Sather sources. This allo) 135.69 180.31 P
0.16 (ws for e) 403.38 180.31 P
0.16 (v) 435.67 180.31 P
0.16 (en greater \337e) 440.52 180.31 P
0.16 (xi-) 492.89 180.31 P
(bility in achie) 108 168.31 T
(ving Sather/C interoperability) 162.75 168.31 T
(.) 281.54 168.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "177" 177
%%Page: "178" 178
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(178) 108 710.84 T
8 8 Q
(Interf) 228.42 710.84 T
(acing with ANSI C :) 247.62 710.84 T
0 F
(14.2 Built-in C classes) 323.39 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(14.2  Built-in C c) 108 654 T
(lasses) 247.68 654 T
5 10 Q
(The follo) 108 625.31 T
(wing C types are b) 144.69 625.31 T
(uilt into the e) 219.48 625.31 T
(xtended library:) 272.39 625.31 T
0.39 (V) 108 330.31 P
0.39 (ariable of the b) 114.11 330.31 P
0.39 (uilt-in types are binary compatible with the corresponding C types. These classes) 175.33 330.31 P
0.23 (de\336ne appropriate creation routines which may be used for con) 108 318.31 P
0.23 (v) 362.14 318.31 P
0.23 (enient casting between Sather and) 366.99 318.31 P
-0.59 (C types. Also, man) 108 306.31 P
-0.59 (y basic operations on the b) 182.47 306.31 P
-0.59 (uilt-in C types are pro) 286.26 306.31 P
-0.59 (vided by the library) 371.52 306.31 P
-0.59 (. F) 447.71 306.31 P
-0.59 (or e) 457.53 306.31 P
-0.59 (xample,) 472.06 306.31 P
0.17 (it is not necessary to call e) 108 294.31 P
0.17 (xternal C code to add tw) 214.43 294.31 P
0.17 (o C_INT v) 313.24 294.31 P
0.17 (ariables. All operations on b) 356.67 294.31 P
0.17 (uilt-in C) 470.21 294.31 P
0.29 (types de\336ned by the library ha) 108 282.31 P
0.29 (v) 230.63 282.31 P
0.29 (e the ANSI C semantics. Syntactic sug) 235.48 282.31 P
0.29 (ar for the b) 391.9 282.31 P
0.29 (uilt-in C types is) 436.72 282.31 P
(de\336ned e) 108 270.31 T
(xactly as for "re) 144.23 270.31 T
(gular" Sather classes.) 207.86 270.31 T
-0.03 (\324) 108 190.31 P
7 F
-0.03 (AREF{T}\325) 111.33 190.31 P
5 F
-0.03 ( de\336nes a routine \324) 153.01 190.31 P
7 F
-0.03 (array_ptr:C_PTR) 227.34 190.31 P
5 F
-0.03 (\325 which may be used to obtain a pointer to the \336rst) 302.91 190.31 P
-0.55 (item in the array portion of Sather objects. The e) 108 178.31 P
-0.55 (xternal routine may modify the contents of this array) 297.32 178.31 P
0.12 (portion, b) 108 166.31 P
0.12 (ut must not store the pointer; there is no guarantee that the pointer will remain v) 146.81 166.31 P
0.12 (alid after) 468.06 166.31 P
-0.09 (the e) 108 154.31 P
-0.09 (xternal routine returns. This restriction ensures that the Sather type system and g) 126.92 154.31 P
-0.09 (arbage collec-) 447.73 154.31 P
-0.38 (tor will not be corrupted by e) 108 142.31 P
-0.38 (xternal code while not sacri\336cing ef) 222.19 142.31 P
-0.38 (\336cienc) 363.6 142.31 P
-0.38 (y for the most important cas-) 390.11 142.31 P
(es.) 108 130.31 T
16 F
(Sather Class) 130.98 597.31 T
(ANSI C type) 223.1 597.31 T
(Sather Class) 325.9 597.31 T
(ANSI C type) 433.91 597.31 T
5 9 Q
(C_CHAR) 114.08 578.98 T
7 10 Q
(char) 217.11 578.31 T
5 9 Q
(C_UNSIGNED_CHAR_PTR) 296.11 578.98 T
7 10 Q
(unsigned char *) 424.92 578.31 T
5 9 Q
(C_UNSIGNED_CHAR) 114.08 561.98 T
7 10 Q
(unsigned char) 217.11 561.31 T
5 9 Q
(C_SIGNED_CHAR_PTR) 296.11 561.98 T
7 10 Q
(signed char *) 424.92 561.31 T
5 9 Q
(C_SIGNED_CHAR) 114.08 544.98 T
7 10 Q
(signed char) 217.11 544.31 T
5 9 Q
(C_SHORT_PTR) 296.11 544.98 T
7 10 Q
(short *) 424.92 544.31 T
5 9 Q
(C_SHORT) 114.08 527.98 T
7 10 Q
(short) 217.11 527.31 T
5 9 Q
(C_INT_PTR) 296.11 527.98 T
7 10 Q
(int *) 424.92 527.31 T
5 9 Q
(C_INT) 114.08 510.98 T
7 10 Q
(int) 217.11 510.31 T
5 9 Q
(C_LONG_PTR) 296.11 510.98 T
7 10 Q
(long *) 424.92 510.31 T
5 9 Q
(C_LONG) 114.08 493.98 T
7 10 Q
(long) 217.11 493.31 T
5 9 Q
(C_UNSIGNED_SHORT_PTR) 296.11 493.98 T
7 10 Q
(unsigned short *) 424.92 493.31 T
5 9 Q
(C_UNSIGNED_SHORT) 114.08 476.98 T
7 10 Q
(unsigned short) 217.11 476.31 T
5 9 Q
(C_UNSIGNED_INT_PTR) 296.11 476.98 T
7 10 Q
(unsigned int *) 424.92 476.31 T
5 9 Q
(C_UNSIGNED_INT) 114.08 459.98 T
7 10 Q
(unsigned int) 217.11 459.31 T
5 9 Q
(C_UNSIGNED_LONG_PTR) 296.11 459.98 T
7 10 Q
(unsigned long *) 424.92 459.31 T
5 9 Q
(C_UNSIGNED_LONG) 114.08 442.98 T
7 10 Q
(signed long) 217.11 442.31 T
5 9 Q
(C_FLOAT_PTR) 296.11 442.98 T
7 10 Q
(float *) 424.92 442.31 T
5 9 Q
(C_FLOAT) 114.08 425.98 T
7 10 Q
(float) 217.11 425.31 T
5 9 Q
(C_DOUBLE_PTR) 296.11 425.98 T
7 10 Q
(double *) 424.92 425.31 T
5 9 Q
(C_DOUBLE) 114.08 408.98 T
7 10 Q
(double) 217.11 408.31 T
5 9 Q
(C_LONG_DOUBLE_PTR) 296.11 408.98 T
7 10 Q
(long double *) 424.92 408.31 T
5 9 Q
(C_LONG_DOUBLE) 114.08 391.98 T
7 10 Q
(long double) 217.11 391.31 T
5 9 Q
(C_SIZE_T) 296.11 391.98 T
7 10 Q
(size_t) 424.92 391.31 T
5 9 Q
(C_PTR) 114.08 374.98 T
7 10 Q
(void *) 217.11 374.31 T
5 9 Q
(C_PTRDIFF_T) 296.11 374.98 T
7 10 Q
(ptrdiff_t) 424.92 374.31 T
5 9 Q
(C_CHAR_PTR) 114.08 357.98 T
7 10 Q
(char *) 217.11 357.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(-- "basic" operations may be done in Sather) 144 250.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:C_LONG := #\05010\051;) 144 241.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b:C_LONG := #\0505\051;) 144 232.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(c::= a + b;) 144 223.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + c.str + " should be 15\134n";) 144 214.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
108.08 608.98 108.08 351.98 2 L
V
2 H
0 Z
N
211.11 610.98 211.11 349.98 2 L
V
0.5 H
N
290.11 610.98 290.11 349.98 2 L
V
2 H
N
418.92 610.98 418.92 349.98 2 L
V
0.5 H
N
503.92 608.98 503.92 351.98 2 L
V
2 H
N
107.08 609.98 504.92 609.98 2 L
V
N
107.08 588.98 504.92 588.98 2 L
V
N
107.08 520.98 504.92 520.98 2 L
V
0.5 H
N
107.08 452.98 504.92 452.98 2 L
V
N
107.08 384.98 504.92 384.98 2 L
V
N
107.08 350.98 504.92 350.98 2 L
V
2 H
N
129.6 258.85 129.6 209.1 2 L
V
0.25 H
N
489.6 258.85 489.6 209.1 2 L
V
N
129.48 258.98 489.73 258.98 2 L
V
N
129.48 208.98 489.73 208.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "178" 178
%%Page: "179" 179
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 220.28 710.84 T
(acing with ANSI C :) 239.48 710.84 T
0 F
(14.3) 315.26 710.84 T
(User) 332.98 710.84 T
(-de\336ned Exter) 348.46 710.84 T
(nal C types) 402.08 710.84 T
6 10 Q
(179) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(The follo) 108 659.33 T
(wing e) 144.69 659.33 T
(xample sho) 171.48 659.33 T
(ws ho) 217.06 659.33 T
(w a Sather array could be passed to e) 240.42 659.33 T
(xternal C functions:) 388.56 659.33 T
0.48 (The second call is type-safe. It e) 108 435.33 P
0.48 (xploits the constructor for C_INT_PTR that allo) 239.87 435.33 P
0.48 (ws creation from) 435.28 435.33 P
(ARRA) 108 423.33 T
(Y{INT}.) 134.73 423.33 T
108 361.98 504 365 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 363.49 540 363.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(14.3  User) 108 371 T
(-de\336ned External C types) 192.69 371 T
5 10 Q
-0.01 (User) 108 342.31 P
-0.01 (-de\336ned e) 126.68 342.31 P
-0.01 (xternal C classes are used for multiple purposes. C routines in e) 166.23 342.31 P
-0.01 (xternal C classes im-) 420.42 342.31 P
-0.08 (plement Sather/C and C/Sather call interf) 108 330.31 P
-0.08 (aces. In addition, objects of e) 272.77 330.31 P
-0.08 (xternal C types could be cre-) 389.14 330.31 P
1.62 (ated and passed to or recei) 108 318.31 P
1.62 (v) 221.65 318.31 P
1.62 (ed from C. C global v) 226.5 318.31 P
1.62 (ariables are accessed from Sather as shared) 321.57 318.31 P
(attrib) 108 306.31 T
(utes of e) 128.91 306.31 T
(xternal C classes.) 162.64 306.31 T
4 12 Q
(14.3.1   Constants and C binding names) 108 264.98 T
5 10 Q
0.04 (Constants are allo) 108 242.31 P
0.04 (wed in e) 179.49 242.31 P
0.04 (xternal C classes. The rules for constant initialization are the same as for) 213.3 242.31 P
(constants in "re) 108 230.31 T
(gular" Sather classes.) 169.7 230.31 T
0.49 (There are tw) 108 208.31 P
0.49 (o constant features of e) 159.41 208.31 P
0.49 (xternal C classes that ha) 253.96 208.31 P
0.49 (v) 352.37 208.31 P
0.49 (e a special semantics. If present, the) 357.22 208.31 P
7 F
-0.68 (STR) 108 196.31 P
5 F
-0.62 ( constant \324) 128 196.31 P
7 F
-0.68 (C_name) 168.43 196.31 P
5 F
-0.62 (\325 may be used to force a particular C declaration for an e) 206.22 196.31 P
-0.62 (xternal C type. Sim-) 424.73 196.31 P
0.33 (ilarly the) 108 184.31 P
7 F
0.37 (STR) 147 184.31 P
5 F
0.33 ( constant \324) 167 184.31 P
7 F
0.37 (C_header) 209.33 184.31 P
5 F
0.33 (\325 may be used to specify a list of C header \336les that should be) 253.24 184.31 P
(included  in each \336le in which the C declaration appears.) 108 172.31 T
0.43 (The STR constant \325C_name\325 pro) 108 150.31 P
0.43 (vides a C binding name for the type in which it occurs. The STR) 240.11 150.31 P
0.21 (constant \325C_header\325 must be initialized to a space separated list of header \336les \050the standard C no-) 108 138.31 P
-0.18 (tation <foo.h> is allo) 108 126.31 P
-0.18 (wed\051. Note that if constants C_name and C_header are absent, the Sather com-) 191.26 126.31 P
0.37 (piler generates layouts for the e) 108 114.31 P
0.37 (xternal C objects. If the) 235.48 114.31 P
0.37 (y are present, no layouts are generated and) 330.94 114.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(/* ANSI C prototypes for functions called from Sather */) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void clear\050void* p, int size\051;) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void better_clear\050int *, int size\051;) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(external C class PROCESS_ARRAYS is) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- routines implemented externally in C that zero) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- all elements in an integer array of a specified size) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   clear\050p:C_PTR, size:C_INT\051;) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   better_clear\050p:C_INT_PTR, size:C_INT\051;) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- This code demonstrates how to call external C routines) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(a:ARRAY{INT} := #\05010\051;) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this call just passes an array portion and avoids typecheking) 144 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- This is not recommended \050"a" could be of type ARRAY{CHAR} and the) 144 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- call would still compile resulting in a runtime error\051) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(PROCESS_ARRAYS::clear\050a.arr_ptr, #\050a.size\051;) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- this is a better sequence achieving the same result) 144 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- if "a" is not an array of integers, an error is reported) 144 468.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(PROCESS_ARRAYS::better_clear\050#C_INT_PTR\050a\051, #\050a.size\051\051;) 144 459.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 454.13 2 L
V
0.25 H
0 Z
N
489.6 647.88 489.6 454.13 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 454 489.73 454 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "179" 179
%%Page: "180" 180
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(180) 108 710.84 T
8 8 Q
(Interf) 203.14 710.84 T
(acing with ANSI C :) 222.34 710.84 T
0 F
(14.3 User) 298.12 710.84 T
(-de\336ned Exter) 331.32 710.84 T
(nal C types) 384.94 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.01 (the necessary types must be de\336ned in the speci\336ed header \336les. In this case, it is the responsibility) 108 659.33 P
0.38 (of the programmer to ensure that attrib) 108 647.33 P
0.38 (ute names are e) 265.07 647.33 P
0.38 (xactly as the structure \336led names pro) 327.99 647.33 P
0.38 (vided) 481.78 647.33 P
(by the header \336les.) 108 635.33 T
4 F
(Examples) 108 607.33 T
5 F
0.58 (In this e) 108 387.33 P
0.58 (xample, the Sather compiler generates the layout for the e) 141.23 387.33 P
0.58 (xternal objec B) 377.35 387.33 P
0.58 (ARt. The corre-) 439.25 387.33 P
(sponding C layout and prototypes of C functions that are called from Sather are belo) 108 375.33 T
(w:) 445.48 375.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(external C class BAR is) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr bar_attr_int:C_INT;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr bar_attr_float:C_FLOAT;) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- the constructor is defined in C) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create_bar:BAR;) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this routine that does some processing of bar is also) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- defined in   C) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   process_bar\050bar:BAR\051;) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- create an object of type BAR by calling an external) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- C constructor) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(bar:BAR := BAR::create_bar;) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- now pass "bar" back to C from processing) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(BAR::process_bar\050bar\051;) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef struct {) 144 355.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   int integer_field;) 144 346.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   float float_field;) 144 337.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(} *C_BAR;) 144 328.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(/* Note that C names for the type and struct fields could be) 144 319.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   different from the corresponding names in Sather */) 144 310.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(C_BAR create_bar\050\051;) 144 292.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void process_bar\050C_BAR bar\051;) 144 283.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 572.88 129.6 406.13 2 L
V
0 Z
N
489.6 572.88 489.6 406.13 2 L
V
N
129.48 573 489.73 573 2 L
V
N
129.48 406 489.73 406 2 L
V
N
129.6 363.88 129.6 278.13 2 L
V
N
489.6 363.88 489.6 278.13 2 L
V
N
129.48 364 489.73 364 2 L
V
N
129.48 278 489.73 278 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "180" 180
%%Page: "181" 181
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 220.28 710.84 T
(acing with ANSI C :) 239.48 710.84 T
0 F
(14.3) 315.26 710.84 T
(User) 332.98 710.84 T
(-de\336ned Exter) 348.46 710.84 T
(nal C types) 402.08 710.84 T
6 10 Q
(181) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
(This is a similar e) 108 659.33 T
(xample, b) 178.96 659.33 T
(ut an e) 218.2 659.33 T
(xisting C header \336le is used with Sather code:) 244.71 659.33 T
(The C header "bar) 108 430.33 T
(.h" contains the follo) 180.67 430.33 T
(wing:) 263.94 430.33 T
1.22 (This creates a Sather type \324) 108 296.33 P
7 F
1.35 (X_WIDGET) 222.65 296.33 P
5 F
1.22 (\325 which may be used to declare v) 274.88 296.33 P
1.22 (ariables, parameterize) 415.05 296.33 P
0.27 (classes, and so forth. Furthermore, the C declaration used for v) 108 284.33 P
0.27 (ariables of type \324) 361.81 284.33 P
7 F
0.3 (X_WIDGET) 430.11 284.33 P
5 F
0.27 (\325 will) 482.34 284.33 P
-0.13 (be \324) 108 272.33 P
7 F
-0.14 (struct XSomeWidget *) 123.14 272.33 P
5 F
-0.13 (\325. An) 220.67 272.33 P
-0.13 (y generated C \336le containing an) 240.95 272.33 P
-0.13 (y v) 367.64 272.33 P
-0.13 (ariable of this type will also in-) 379.77 272.33 P
(clude \324) 108 260.33 T
7 F
(<widgets.h>) 135.49 260.33 T
5 F
(\325) 189.41 260.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(external C class BAR is) 144 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   const C_name:STR := "C_BAR";   -- C binding name for the type) 144 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   const C_header:STR := "bar.h <stdlib.h>";) 144 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr integer_field:C_INT;) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr float_field:C_FLOAT;) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- the constructor is defined in C) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create_bar:BAR;) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this routine that does some processing of bar is also) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- defined in C) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   process_bar\050bar:BAR\051;) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- code that creates an object of type BAR by calling an external) 144 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- C constructor and then passes the object back to C) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(bar:BAR := BAR::create_bar;) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- now pass "bar" back to C from processing) 144 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(BAR::process_bar\050bar\051;) 144 468.67 T
0 0 1 0 1 1 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef struct {) 144 410.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   int integer_field;) 144 401.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   float float_field;) 144 392.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(} *C_BAR;) 144 383.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(/* Note that C names for the type must be exactly as the binding C) 144 374.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   name specified by the C_name attribute.) 144 365.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   also, struct field names must be exactly the same as attribute) 144 356.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   names in the external C class*/) 144 347.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(C_BAR create_bar\050\051;) 144 329.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(void process_bar\050C_BAR bar\051;) 144 320.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
2 10 Q
(e) 144 239.33 T
9 8 Q
(xternal C class X_WIDGET is) 148.79 239.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const C_name:STR:=) 178.2 229.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
("struct XSomeWidget *";) 190.8 220.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(const C_header:STR:=) 178.2 211.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
("<widgets.h>";) 190.8 202.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- external class X_WIDGET) 144 193.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 449.13 2 L
V
0 Z
N
489.6 647.88 489.6 449.13 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 449 489.73 449 2 L
V
N
129.6 418.88 129.6 315.13 2 L
V
N
489.6 418.88 489.6 315.13 2 L
V
N
129.48 419 489.73 419 2 L
V
N
129.48 315 489.73 315 2 L
V
N
129.6 248.88 129.6 188.13 2 L
V
N
489.6 248.88 489.6 188.13 2 L
V
N
129.48 249 489.73 249 2 L
V
N
129.48 188 489.73 188 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "181" 181
%%Page: "182" 182
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(182) 108 710.84 T
8 8 Q
(Interf) 203.14 710.84 T
(acing with ANSI C :) 222.34 710.84 T
0 F
(14.3 User) 298.12 710.84 T
(-de\336ned Exter) 331.32 710.84 T
(nal C types) 384.94 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(14.3.2   Attrib) 108 658 T
(utes and C structs) 183.12 658 T
4 10 Q
(Attrib) 108 629.33 T
(utes and C structs) 134.46 629.33 T
5 F
-0.62 (Attrib) 108 606.33 P
-0.62 (utes may be placed in e) 131.69 606.33 P
-0.62 (xternal C classes; the) 222.04 606.33 P
-0.62 (y are interpreted as \336elds of a C struct. If the layout) 304.74 606.33 P
0.18 (of the class is generated by Sather \050C_name and C_header symbolic constants are absent\051, then at-) 108 594.33 P
-0.23 (trib) 108 582.33 P
-0.23 (utes can ha) 121.69 582.33 P
-0.23 (v) 165.46 582.33 P
-0.23 (e an) 170.31 582.33 P
-0.23 (y names. If a C layout from a header \336le speci\336ed by C_header is used, attrib) 186.31 582.33 P
-0.23 (ute) 491.78 582.33 P
-0.28 (te) 108 570.33 P
-0.28 (xtual names must be e) 115.07 570.33 P
-0.28 (xactly the same as a struct \336led names from a corresponding C type. It is the) 202.68 570.33 P
(responsibility of the programmer to ensure this correspondence.) 108 558.33 T
4 F
(P) 108 530.33 T
(oints to note) 114.27 530.33 T
5 F
(\245) 108 514.33 T
(External C class attrib) 121.54 514.33 T
(utes may only ha) 209.94 514.33 T
(v) 277.79 514.33 T
(e b) 282.64 514.33 T
(uilt-in or user) 294.38 514.33 T
(-de\336ned e) 348.62 514.33 T
(xternal C types.) 388.18 514.33 T
(\245) 108 499.33 T
(Class constants do not contrib) 121.54 499.33 T
(ute an) 241.34 499.33 T
(ything to the class layouts; all attrib) 265.35 499.33 T
(utes do.) 407.93 499.33 T
4 12 Q
(14.3.3   Shared Attrib) 108 458 T
(utes and C globals) 227.14 458 T
5 10 Q
0.89 (Global C v) 108 435.33 P
0.89 (ariables may be accessed from Sather as shared attrib) 153.42 435.33 P
0.89 (utes of e) 373.61 435.33 P
0.89 (xternal C classes. Such) 409.12 435.33 P
-0.09 (shared attrib) 108 423.33 P
-0.09 (utes must ha) 157.43 423.33 P
-0.09 (v) 207.05 423.33 P
-0.09 (e names corresponding to those of C globals. Similar to constants, shared) 211.9 423.33 P
(attrib) 108 411.33 T
(utes do not contrib) 128.91 411.33 T
(ute to the storage needed to layout the class objects.) 203.43 411.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(external C class FOO is) 144 369.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   C_name:STR := "FOO";) 144 360.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   C_header:STR := "foo.h";) 144 351.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   shared foo:FOO:) 144 333.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr val:C_INT;) 144 324.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- this is implemented in C) 144 306.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create_foo:FOO;) 144 297.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 288.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- accessing a global C variable) 144 270.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FOO::foo := FOO::create_foo;) 144 261.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FOO::foo.val := #\05010\051;) 144 252.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#ifndef _FOO_H_) 144 230.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#define _FOO_H_) 144 221.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(typedef struct {) 144 203.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   int val;) 144 194.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(} *FOO;) 144 185.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FOO create_foo\050\051;) 144 167.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#endif  _FOO_H_) 144 158.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(/* in some C file */) 144 136.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(FOO foo;) 144 127.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 377.88 129.6 247.13 2 L
V
0 Z
N
489.6 377.88 489.6 247.13 2 L
V
N
129.48 378 489.73 378 2 L
V
N
129.48 247 489.73 247 2 L
V
N
129.6 238.88 129.6 153.13 2 L
V
N
489.6 238.88 489.6 153.13 2 L
V
N
129.48 239 489.73 239 2 L
V
N
129.48 153 489.73 153 2 L
V
N
129.6 144.88 129.6 122.13 2 L
V
N
489.6 144.88 489.6 122.13 2 L
V
N
129.48 145 489.73 145 2 L
V
N
129.48 122 489.73 122 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "182" 182
%%Page: "183" 183
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Interf) 241.1 710.84 T
(acing with ANSI C :) 260.3 710.84 T
0 F
(14.4) 336.07 710.84 T
(P) 353.8 710.84 T
(ar) 358.38 710.84 T
(ameter P) 366.09 710.84 T
(assing) 401.37 710.84 T
6 10 Q
(183) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(14.4  P) 108 654 T
(arameter P) 164.5 654 T
(assing) 257 654 T
5 10 Q
-0.32 (The ANSI C standard prescribes that a cop) 108 625.31 P
-0.32 (y is made of each call ar) 277.01 625.31 P
-0.32 (gument and all ar) 372.1 625.31 P
-0.32 (gument-passing) 440.67 625.31 P
-0.09 (is done strictly by v) 108 613.31 P
-0.09 (alue. T) 186.28 613.31 P
-0.09 (o conform to ANSI C, all "in" ar) 213.15 613.31 P
-0.09 (guments are passed by v) 342.71 613.31 P
-0.09 (alue. In the case) 439.85 613.31 P
0 (of the b) 108 601.31 P
0 (uilt-in C types, a cop) 138.36 601.31 P
0 (y of a v) 221.89 601.31 P
0 (ariable is passed. In the case of user de\336ned e) 251.93 601.31 P
0 (xternal C types, a) 433.99 601.31 P
(pointer to the object is copied and passed by v) 108 589.31 T
(alue.) 292.45 589.31 T
0.51 (In addition, for e) 108 567.31 P
0.51 (xtra \337e) 176.6 567.31 P
0.51 (xibility) 205.02 567.31 P
0.51 (, Sather supports) 233.27 567.31 P
7 F
0.57 ("out") 304.25 567.31 P
5 F
0.51 ( and) 325.25 567.31 P
7 F
0.57 ("inout") 345.72 567.31 P
5 F
0.51 (ar) 377.85 567.31 P
0.51 (gument modes for e) 385.44 567.31 P
0.51 (xternal C) 466.55 567.31 P
-0.16 (routines.) 108 555.31 P
7 F
-0.18 ("out") 145.06 555.31 P
5 F
-0.16 (and ") 168.66 555.31 P
7 F
-0.18 (inout") 189.52 555.31 P
5 F
-0.16 ( ar) 214.75 555.31 P
-0.16 (guments are passed by a pointer to a local, which may be le) 224.68 555.31 P
-0.16 (g) 460.6 555.31 P
-0.16 (ally mod-) 465.55 555.31 P
0.17 (i\336ed by the called routine. The Sather implementation guarantee that such modi\336cations cannot be) 108 543.31 P
0.24 (observ) 108 531.31 P
0.24 (ed until the routine returns. F) 134.51 531.31 P
0.24 (or C routines called from Sather this is guaranteed by emitting) 252.21 531.31 P
-0.3 (special code for the caller) 108 519.31 P
-0.3 (. F) 208.98 519.31 P
-0.3 (or Sather routines that may be called from C, this is guaranteed by emit-) 219.09 519.31 P
(ting special function prologues for the callee.) 108 507.31 T
108 445.95 504 448.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 447.46 540 447.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(14.5  Inlining C Code) 108 454.98 T
5 10 Q
-0.28 (Sometimes it isn't possible to decide at the time the e) 108 426.29 P
-0.28 (xternal C class is written whether a routine will) 316.83 426.29 P
-0.07 (be implemented in the C code with a macro. This presents a portability problem, because the writer) 108 414.29 P
-0.06 (of the e) 108 402.29 P
-0.06 (xternal class can\325) 137.71 402.29 P
-0.06 (t kno) 206.83 402.29 P
-0.06 (w ahead of time whether the routine will be obtained by linking or by) 226.8 402.29 P
-0.62 (a header \336le. Such petulant cases can be dealt with by the call \324) 108 390.29 P
7 F
-0.69 (SYS::inlined_C) 352.68 390.29 P
5 F
-0.62 (\325. The ar) 419.93 390.29 P
-0.62 (gument must) 452.67 390.29 P
-0.26 (be a string literal, and is placed directly into the generated code, e) 108 378.29 P
-0.26 (xcept that identi\336ers follo) 367.5 378.29 P
-0.26 (wing \324) 469.54 378.29 P
7 F
-0.28 (#) 495.11 378.29 P
5 F
-0.26 (\325) 500.67 378.29 P
(that correspond to locals and ar) 108 366.29 T
(guments are) 233.07 366.29 T
(translated into the appropriate C names.) 284.17 366.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "183" 183
%%Page: "184" 184
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(184) 108 710.84 T
8 8 Q
(Interf) 229.52 710.84 T
(acing with ANSI C :) 248.72 710.84 T
0 F
(14.5 Inlining C Code) 324.49 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "184" 184
%%Page: "185" 185
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Statement and Expr) 226.9 710.84 T
(ession Catalogue :) 303.48 710.84 T
0 F
(15.1) 377.9 710.84 T
(Statements) 395.63 710.84 T
6 10 Q
(185) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Statement and) 108 642 S
-0.25 (Expr) 108 600 S
-0.25 (ession Catalogue) 178.83 600 S
5 10 Q
0.17 (This chapter presents a catalogue of statements and e) 108 475.33 P
0.17 (xpressions in Sather and descriptions of them) 321.35 475.33 P
-0.45 (that originated in the speci\336cation.  In some cases, these de\336nitions are duplicated else) 108 463.33 P
-0.45 (whwere in the) 448.25 463.33 P
-0.19 (te) 108 451.33 P
-0.19 (xt.  Ho) 115.07 451.33 P
-0.19 (we) 141.93 451.33 P
-0.19 (v) 153.35 451.33 P
-0.19 (er) 158.2 451.33 P
-0.19 (, the) 165.57 451.33 P
-0.19 (y ha) 182.44 451.33 P
-0.19 (v) 198.99 451.33 P
-0.19 (e been included here, sometimes with more elaborate e) 203.84 451.33 P
-0.19 (xamples, as a con) 421.82 451.33 P
-0.19 (v) 491.38 451.33 P
-0.19 (e-) 496.23 451.33 P
(nient reference.) 108 439.33 T
108 377.98 504 381 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 379.49 540 379.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(15.1  Statements) 108 387 T
4 12 Q
(15.1.1   Assignment statements) 108 338.98 T
1 10 Q
0.38 (Assignment statements) 108 232.31 P
5 F
0.38 ( are used to assign objects to v) 203.1 232.31 P
0.38 (ariables or attrib) 327.41 232.31 P
0.38 (utes. The e) 393.5 232.31 P
0.38 (xpression on the) 437.7 232.31 P
0.57 (right hand side must ha) 108 220.31 P
0.57 (v) 203.42 220.31 P
0.57 (e a return type which is a subtype of the declared type of the destination) 208.27 220.31 P
-0.18 (speci\336ed by the left hand side. When a reference object is assigned to a location, only a) 108 208.31 P
10 F
-0.18 (r) 456.88 208.31 P
-0.18 (efer) 460.39 208.31 P
-0.18 (ence) 475.58 208.31 P
5 F
-0.18 (to) 496.22 208.31 P
-0.47 (the object is assigned. This means that later changes to the state of the object will be observ) 108 196.31 P
-0.47 (able from) 465.87 196.31 P
-0.62 (the assigned location. Since immutable and closure objects cannot be modi\336ed once constructed, this) 108 184.31 P
(issue is not rele) 108 172.31 T
(v) 169.69 172.31 T
(ant to them.) 174.44 172.31 T
(An assignment can also  declare ne) 108 150.31 T
(w local v) 248.27 150.31 T
(ariables  using the) 284.68 150.31 T
7 F
(::=) 359.67 150.31 T
5 F
( syntax.) 371.07 150.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Examples:) 108 316.31 T
0 0 1 0 1 1 0 K
306 312.98 504 322.98 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(a:=5) 320.4 317.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 302.98 504 312.98 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(b\0507\051.c := 5;) 320.4 307.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 292.98 504 302.98 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(A::d := 5;) 320.4 297.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 282.98 504 292.98 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
([3] := 4;) 320.4 287.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 272.98 504 282.98 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(e[7,8] := 5;) 320.4 277.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 262.98 504 272.98 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(g:INT := 5;) 320.4 267.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 252.98 504 262.98 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(h ::= 5;) 320.4 257.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "185" 185
%%Page: "186" 186
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(186) 108 710.84 T
8 8 Q
(Statement and Expr) 209.76 710.84 T
(ession Catalogue :) 286.34 710.84 T
0 F
(15.1 Statements) 360.77 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.13 (The operation of assignment statements on attrib) 108 659.33 P
-0.13 (utes is described in the section on Attrib) 301.97 659.33 P
-0.13 (ute Acces-) 461.65 659.33 P
-0.29 (sor Routines.  The) 108 647.33 P
-0.29 (y are often syntactic sug) 180.31 647.33 P
-0.29 (ar for function calls with one ar) 276.29 647.33 P
-0.29 (gument, which is the right) 400.44 647.33 P
(hand side.) 108 635.33 T
4 F
(See) 108 607.33 T
5 F
(\245) 108 591.33 T
(T) 121.54 591.33 T
(ype inference in assignment statements on page 53.) 126.85 591.33 T
(\245) 108 576.33 T
(Attrib) 121.54 576.33 T
(ute assignment sug) 145.23 576.33 T
(ar on page 51.) 221.29 576.33 T
(\245) 108 561.33 T
(Array element assignment on page 118.) 121.54 561.33 T
(\245) 108 546.33 T
(Immutable class attrib) 121.54 546.33 T
(ute assignment on page 121.) 210.22 546.33 T
4 12 Q
(15.1.2) 108 505 T
7 11 Q
(case) 151.37 505 T
4 12 Q
( statements) 174.6 505 T
5 10 Q
-0.54 (Multi-w) 108 418.33 P
-0.54 (ay branches are implemented by) 140.68 418.33 P
1 F
-0.54 (case statements) 269.87 418.33 P
5 F
-0.54 (. There may be an arbitrary number of) 331.45 418.33 P
1 F
-0.54 (when) 482.33 418.33 P
-0.2 (clauses) 108 406.33 P
5 F
-0.2 ( and an optional) 136.52 406.33 P
1 F
-0.2 (else clause) 202.38 406.33 P
5 F
-0.2 (. The initial) 243.76 406.33 P
10 F
-0.2 (e) 292.05 406.33 P
-0.2 (xpr) 296.3 406.33 P
-0.2 (ession) 309.26 406.33 P
5 F
-0.2 ( construct is e) 334.26 406.33 P
-0.2 (v) 388.68 406.33 P
-0.2 (aluated \336rst and may ha) 393.43 406.33 P
-0.2 (v) 487.97 406.33 P
-0.2 (e a) 492.82 406.33 P
0.48 (return v) 108 394.33 P
0.48 (alue of an) 139.61 394.33 P
0.48 (y type. This type must de\336ne one or more routines named \324) 179.84 394.33 P
7 F
0.53 (is_eq) 421.73 394.33 P
5 F
0.48 (\325 with a single) 445.63 394.33 P
0.3 (ar) 108 382.33 P
0.3 (gument and a boolean return v) 115.59 382.33 P
0.3 (alue.The e) 238.74 382.33 P
0.3 (xpressions tested in the branches of the if statement are) 280.54 382.33 P
0.2 (the  e) 108 370.33 P
0.2 (xpressions of successi) 129.91 370.33 P
0.2 (v) 218.37 370.33 P
0.2 (e when lists. The \336rst one of these calls to returns true causes the cor-) 223.22 370.33 P
-0.43 (responding statement list to be e) 108 358.33 P
-0.43 (x) 234.86 358.33 P
-0.43 (ecuted and control passed to the statement follo) 239.71 358.33 P
-0.43 (wing the case state-) 426.7 358.33 P
0.05 (ment. If none of the when e) 108 346.33 P
0.05 (xpressions matches and an else clause is present, then the statement list) 218.43 346.33 P
(follo) 108 334.33 T
(wing the else clause is e) 126.64 334.33 T
(x) 222.86 334.33 T
(ecuted) 227.71 334.33 T
0.19 (There is one dif) 108 312.33 P
0.19 (ference between the) 171.35 312.33 P
7 F
0.21 (case) 254.38 312.33 P
5 F
0.19 (statement and the equi) 278.49 312.33 P
0.19 (v) 368.51 312.33 P
0.19 (alent) 373.26 312.33 P
7 F
0.21 (if) 395.39 312.33 P
5 F
0.19 ( statement.  If none of the) 400.39 312.33 P
0.17 (branches of an) 108 300.33 P
7 F
0.19 (if) 169.32 300.33 P
5 F
0.17 ( statement match and no) 174.32 300.33 P
7 F
0.19 (else) 274.89 300.33 P
5 F
0.17 ( clause is present, then e) 293.23 300.33 P
0.17 (x) 391.14 300.33 P
0.17 (ecution just continues onto) 395.99 300.33 P
0.56 (the ne) 108 288.33 P
0.56 (xt statement after the) 132.57 288.33 P
7 F
0.62 (if) 221.43 288.33 P
5 F
0.56 (statement.  Ho) 229.83 288.33 P
0.56 (we) 288.74 288.33 P
0.56 (v) 300.15 288.33 P
0.56 (er) 305 288.33 P
0.56 (, if none of the branches of the) 312.37 288.33 P
7 F
0.62 (case) 441.49 288.33 P
5 F
0.56 ( statement) 462.61 288.33 P
(matches and there is no) 108 276.33 T
7 F
(else) 204.37 276.33 T
5 F
(clause, then a f) 225.49 276.33 T
(atal run-time error will result.) 285.37 276.33 T
4 F
(P) 108 248.33 T
(oints to note) 114.27 248.33 T
5 F
(\245) 108 232.33 T
(It is a f) 121.54 232.33 T
(atal error if no branch matches and there is no) 149.49 232.33 T
7 F
(else) 335.55 232.33 T
5 F
( clause.) 353.89 232.33 T
4 F
(See) 108 204.33 T
5 F
(\245) 108 188.33 T
(Statement description on page 48.) 121.54 188.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Example:) 108 482.33 T
0 0 1 0 1 1 0 K
306 479 504 489 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(case i) 320.4 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 469 504 479 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when 5,6 then ...) 320.4 473.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 459 504 469 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when j then) 320.4 463.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 449 504 459 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(else ...) 320.4 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 439 504 449 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 443.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "186" 186
%%Page: "187" 187
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Statement and Expr) 226.9 710.84 T
(ession Catalogue :) 303.48 710.84 T
0 F
(15.1) 377.9 710.84 T
(Statements) 395.63 710.84 T
6 10 Q
(187) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(15.1.3) 108 658 T
7 11 Q
(if) 151.37 658 T
4 12 Q
( statements) 156.87 658 T
1 10 Q
0.57 (if statements) 108 581.33 P
5 F
0.57 ( are used to conditionally e) 159.96 581.33 P
0.57 (x) 270.7 581.33 P
0.57 (ecute statement lists according to the v) 275.55 581.33 P
0.57 (alue of a boolean) 433.7 581.33 P
-0.14 (e) 108 569.33 P
-0.14 (xpression. Each) 112.29 569.33 P
10 F
-0.14 (e) 177.84 569.33 P
-0.14 (xpr) 182.08 569.33 P
-0.14 (ession) 195.04 569.33 P
5 F
-0.14 ( that is tested must return a boolean v) 220.04 569.33 P
-0.14 (alue. The \336rst e) 368.13 569.33 P
-0.14 (xpression is e) 429.78 569.33 P
-0.14 (v) 483.7 569.33 P
-0.14 (alu-) 488.45 569.33 P
0.56 (ated and if it is true, the follo) 108 557.33 P
0.56 (wing statement list is e) 227.8 557.33 P
0.56 (x) 321.58 557.33 P
0.56 (ecuted. If it is f) 326.43 557.33 P
0.56 (alse, then the e) 389.41 557.33 P
0.56 (xpressions of) 450.39 557.33 P
-0.4 (successi) 108 545.33 P
-0.4 (v) 140.52 545.33 P
-0.4 (e) 145.37 545.33 P
7 F
-0.44 (elsif) 151.91 545.33 P
5 F
-0.4 ( clauses are e) 169.69 545.33 P
-0.4 (v) 221.27 545.33 P
-0.4 (aluated in order) 226.02 545.33 P
-0.4 (. The statement list follo) 287.43 545.33 P
-0.4 (wing the \336rst of these to return) 383.08 545.33 P
7 F
-0.3 (true) 108 533.33 P
5 F
-0.27 (is e) 127.71 533.33 P
-0.27 (x) 140.9 533.33 P
-0.27 (ecuted. If none of the e) 145.75 533.33 P
-0.27 (xpressions return true and there is an) 236.44 533.33 P
7 F
-0.3 (else) 384.25 533.33 P
5 F
-0.27 ( clause, then its statement) 402.59 533.33 P
(list is e) 108 521.33 T
(x) 136.19 521.33 T
(ecuted.   Note that the else clause is not compulsory) 141.04 521.33 T
(.) 347.86 521.33 T
4 F
(See) 108 493.33 T
5 F
(\245) 108 477.33 T
(Statement description on page 47.) 121.54 477.33 T
4 12 Q
(15.1.4) 108 436 T
7 11 Q
( protect) 154.7 436 T
4 12 Q
(statements) 194.45 436 T
5 10 Q
0.62 (Exceptions may be e) 108 329.33 P
0.62 (xplicitly raised by a program  or generated by the system. Each e) 192.76 329.33 P
0.62 (xception is) 459.77 329.33 P
0.18 (represented by an) 108 317.33 P
1 F
0.18 (exception object) 181.56 317.33 P
5 F
0.18 ( whose type is used to select a handler from a) 245.34 317.33 P
1 F
0.18 (protect statement) 431.43 317.33 P
5 F
0.18 (.) 501.5 317.33 P
0.75 (Ex) 108 305.33 P
0.75 (ecution of a) 118.96 305.33 P
7 F
0.83 (protect) 170.9 305.33 P
5 F
0.75 ( statement be) 201.47 305.33 P
0.75 (gins with the statement list follo) 255.58 305.33 P
0.75 (wing the \324) 387.68 305.33 P
7 F
0.83 (protect) 429.71 305.33 P
5 F
0.75 (\325 k) 460.29 305.33 P
0.75 (e) 471.76 305.33 P
0.75 (yw) 476.05 305.33 P
0.75 (ord.) 488.17 305.33 P
0.53 (These statements are e) 108 293.33 P
0.53 (x) 199.68 293.33 P
0.53 (ecuted to completion unless an e) 204.53 293.33 P
0.53 (xception is raised which is not caught by) 337.27 293.33 P
(some nested) 108 281.33 T
7 F
(protect) 159.66 281.33 T
5 F
(.) 190.23 281.33 T
2 F
1.48 (When ther) 108 263.33 P
1.48 (e is an uncaught exception in a pr) 156.05 263.33 P
1.48 (otect statement, the system \336nds the \336rst) 314.78 263.33 P
0.7 (type speci\336er listed in the \324) 108 251.33 P
7 F
0.78 (when) 230.4 251.33 P
2 F
0.7 (\325 lists which is a supertype of the exception object type.) 254.3 251.33 P
0.17 (The statement list following this speci\336er is executed and then contr) 108 239.33 P
0.17 (ol passes to the state-) 409.97 239.33 P
1.35 (ment following the) 108 227.33 P
7 F
1.5 (protect) 198.82 227.33 P
2 F
1.35 ( statement. An) 229.39 227.33 P
7 F
1.5 (exception) 300.3 227.33 P
2 F
1.35 ( expr) 343.1 227.33 P
1.35 (ession  may be used to access) 366.68 227.33 P
0.45 (the exception object in these handler statements. If none of the speci\336ed types ar) 108 215.33 P
0.45 (e super-) 467.91 215.33 P
1.94 (types, then the statements in an \324) 108 203.33 P
7 F
2.16 (else) 264.39 203.33 P
2 F
1.94 (\325 clause ar) 282.73 203.33 P
1.94 (e executed if it is pr) 330.57 203.33 P
1.94 (esent. If it is not) 426.27 203.33 P
2.03 (pr) 108 191.33 P
2.03 (esent, the same exception object is raised to the next most r) 117.78 191.33 P
2.03 (ecently enter) 399.48 191.33 P
2.03 (ed) 458 191.33 P
7 F
2.25 (protect) 473.43 191.33 P
2 F
1.07 (statement which is still in pr) 108 179.33 P
1.07 (ogr) 238.32 179.33 P
1.07 (ess. It is a fatal err) 253.11 179.33 P
1.07 (or to raise an exception which is not) 337.51 179.33 P
0.87 (handled by some) 108 167.33 P
7 F
0.97 (protect) 189.09 167.33 P
2 F
0.87 ( statement.) 219.66 167.33 P
7 F
0.97 (protect) 272.16 167.33 P
2 F
0.87 ( statements may only contain iterator calls if) 302.73 167.33 P
1.33 (they also contain the surr) 108 155.33 P
1.33 (ounding) 224.91 155.33 P
7 F
1.47 (loop) 266.45 155.33 P
2 F
1.33 ( statement.) 285.35 155.33 P
7 F
1.47 (protect) 342.57 155.33 P
2 F
1.33 ( statements without  an) 373.14 155.33 P
7 F
1.47 (else) 485.66 155.33 P
2 F
(clause must have at least one) 108 143.33 T
7 F
(when) 238.56 143.33 T
2 F
(.) 262.46 143.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 F
(Example:) 108 635.33 T
0 0 1 0 1 1 0 K
306 632 504 642 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(if a>5 then foo) 320.4 636.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 622 504 632 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(elsif a>2 then bar) 320.4 626.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 612 504 622 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(else error) 320.4 616.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 602 504 612 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(Example:) 108 413.33 T
0 0 1 0 1 1 0 K
306 410 504 420 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(protect < some statements >) 320.4 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 400 504 410 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when $STR  then) 320.4 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 390 504 400 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(    #ERR+exception.str;) 320.4 394.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 380 504 390 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when FOO then) 320.4 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 370 504 380 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(    #ERR+exception.foobar;) 320.4 374.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 360 504 370 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(else) 320.4 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 350 504 360 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "187" 187
%%Page: "188" 188
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(188) 108 710.84 T
8 8 Q
(Statement and Expr) 209.76 710.84 T
(ession Catalogue :) 286.34 710.84 T
0 F
(15.1 Statements) 360.77 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 10 Q
0 X
(See) 108 659.33 T
5 F
(\245) 108 643.33 T
(Statement description on page 132 and the chapter on e) 121.54 643.33 T
(xceptions in general.) 342.74 643.33 T
4 12 Q
(15.1.5) 108 602 T
7 11 Q
(loop) 151.37 602 T
4 12 Q
( statements) 172.16 602 T
5 10 Q
0.11 (Iteration is done with loop statements, used in conjunction with iterator calls. An e) 108 495.33 P
0.11 (x) 439.49 495.33 P
0.11 (ecution state is) 444.35 495.33 P
0.1 (maintained for each te) 108 483.33 P
0.1 (xtual iterator call. When a loop is entered, the e) 197.28 483.33 P
0.1 (x) 387.67 483.33 P
0.1 (ecution state of all enclosed) 392.52 483.33 P
0.1 (iterator calls is initialized. When an iterator is \336rst called in a loop, the e) 108 471.33 P
0.1 (xpressions for) 398.07 471.33 P
7 F
0.11 (self) 457.14 471.33 P
5 F
0.1 ( and for) 472.7 471.33 P
0.44 (each) 108 459.33 P
7 F
0.48 (once) 129.26 459.33 P
5 F
0.44 ( ar) 150.93 459.33 P
0.44 (gument are e) 161.46 459.33 P
0.44 (v) 213.73 459.33 P
0.44 (aluated left to right. Then the e) 218.48 459.33 P
0.44 (xpressions for ar) 344.53 459.33 P
0.44 (guments which are not) 411.87 459.33 P
7 F
-0.69 (once) 108 447.33 P
5 F
-0.62 ( \050) 129.68 447.33 P
7 F
-0.69 (in) 134.89 447.33 P
5 F
-0.62 ( or) 142.67 447.33 P
7 F
-0.69 (inout) 154.77 447.33 P
5 F
-0.62 ( before the call,) 176.45 447.33 P
7 F
-0.69 (out) 238.67 447.33 P
5 F
-0.62 ( or) 252.57 447.33 P
7 F
-0.69 (inout) 264.67 447.33 P
5 F
-0.62 ( after the call;  are e) 286.35 447.33 P
-0.62 (v) 361.8 447.33 P
-0.62 (aluated left to right. On subsequent) 366.55 447.33 P
0.28 (calls, only the e) 108 435.33 P
0.28 (xpressions for ar) 171.46 435.33 P
0.28 (guments which are not) 238.5 435.33 P
7 F
0.31 (once) 332.94 435.33 P
5 F
0.28 ( are re-e) 354.62 435.33 P
0.28 (v) 387.68 435.33 P
0.28 (aluated.) 392.43 435.33 P
7 F
0.31 (self) 429.38 435.33 P
5 F
0.28 (and an) 448.03 435.33 P
0.28 (y) 474.54 435.33 P
7 F
0.31 (once) 482.32 435.33 P
5 F
-0.62 (ar) 108 423.33 P
-0.62 (guments retain their earlier v) 115.59 423.33 P
-0.62 (alues. The e) 228.39 423.33 P
-0.62 (xpressions for) 275.04 423.33 P
7 F
-0.69 (self) 332.68 423.33 P
5 F
-0.62 ( and for) 348.24 423.33 P
7 F
-0.69 (once) 379.99 423.33 P
5 F
-0.62 ( ar) 401.67 423.33 P
-0.62 (guments may not them-) 411.14 423.33 P
(selv) 108 411.33 T
(es contain iterator calls \050such iters w) 123.96 411.33 T
(ould only e) 269.94 411.33 T
(x) 314.79 411.33 T
(ecute their \336rst iteration.\051  .) 319.64 411.33 T
-0.1 (When an iterator is called, it e) 108 389.33 P
-0.1 (x) 227.48 389.33 P
-0.1 (ecutes the statements in its body in order) 232.33 389.33 P
-0.1 (. If it e) 394.11 389.33 P
-0.1 (x) 420.31 389.33 P
-0.1 (ecutes a) 425.16 389.33 P
7 F
-0.11 (yield) 459.38 389.33 P
5 F
-0.1 ( state-) 479.94 389.33 P
0.7 (ment, control is returned to the caller) 108 377.33 P
0.7 (. Subsequent calls on the iterator resume e) 259.69 377.33 P
0.7 (x) 433.31 377.33 P
0.7 (ecution with the) 438.16 377.33 P
0.35 (statement follo) 108 365.33 P
0.35 (wing the) 167.82 365.33 P
7 F
0.39 (yield) 205.74 365.33 P
5 F
0.35 ( statement. If an iterator e) 226.3 365.33 P
0.35 (x) 330.64 365.33 P
0.35 (ecutes) 335.49 365.33 P
7 F
0.39 (quit) 363.33 365.33 P
5 F
0.35 ( or reaches the end of its body) 379.45 365.33 P
0.35 (,) 501.5 365.33 P
-0.25 (control passes immediately to the end of the innermost enclosing loop statement in the caller and no) 108 353.33 P
(v) 108 341.33 T
(alue is returned.) 112.75 341.33 T
4 F
(See) 108 313.33 T
5 F
(\245) 108 297.33 T
(Statement description on page 59 and the chapter on iterators in general.) 121.54 297.33 T
4 12 Q
(15.1.6) 108 256 T
7 11 Q
(return) 151.37 256 T
4 12 Q
( statements) 180.1 256 T
1 10 Q
0.64 (return statements) 108 199.33 P
5 F
0.64 ( are used to return from routine calls. No other statements may follo) 180.59 199.33 P
0.64 (w a) 459.94 199.33 P
7 F
0.71 (return) 477.88 199.33 P
5 F
-0.18 (statement in a statement list because the) 108 187.33 P
-0.18 (y could ne) 266.74 187.33 P
-0.18 (v) 307.79 187.33 P
-0.18 (er be e) 312.64 187.33 P
-0.18 (x) 338.78 187.33 P
-0.18 (ecuted. If a routine doesn\325) 343.63 187.33 P
-0.18 (t ha) 447.41 187.33 P
-0.18 (v) 461.75 187.33 P
-0.18 (e a return) 466.6 187.33 P
0.07 (v) 108 175.33 P
0.07 (alue then it may return either by e) 112.75 175.33 P
0.07 (x) 248.31 175.33 P
0.07 (ecuting a) 253.16 175.33 P
7 F
0.07 (return) 292.17 175.33 P
5 F
0.07 ( statement without an) 318.29 175.33 P
10 F
0.07 (e) 406.88 175.33 P
0.07 (xpr) 411.12 175.33 P
0.07 (ession) 424.08 175.33 P
5 F
0.07 (portion or by) 451.65 175.33 P
(e) 108 163.33 T
(x) 112.29 163.33 T
(ecuting the last statement in the routine body) 117.14 163.33 T
(.) 296.2 163.33 T
0.14 (If a routine has a return v) 108 141.33 P
0.14 (alue, then its) 209.69 141.33 P
7 F
0.16 (return) 263.45 141.33 P
5 F
0.14 ( statements must specify e) 289.57 141.33 P
0.14 (xpressions whose types are) 394.98 141.33 P
0.18 (subtypes of the routine\325) 108 129.33 P
0.18 (s declared return type \050see the chapter on Abstract Classes and Subtyping\051.) 202.69 129.33 P
-0.23 (Ex) 108 117.33 P
-0.23 (ecution of the) 118.96 117.33 P
7 F
-0.26 (return) 175.75 117.33 P
5 F
-0.23 ( statement causes the e) 201.87 117.33 P
-0.23 (xpression to be e) 291.88 117.33 P
-0.23 (v) 358.42 117.33 P
-0.23 (aluated and its v) 363.17 117.33 P
-0.23 (alue to be returned.) 427.5 117.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Example:) 108 579.33 T
0 0 1 0 1 1 0 K
306 576 504 586 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(f: INT:=4; --Compute b factorial) 320.4 580.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 566 504 576 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(res: INT := 1;) 320.4 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 556 504 566 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(i :INT := 1;) 320.4 560.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 546 504 556 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(loop until!\050i > f\051;) 320.4 550.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 536 504 546 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(    res:= res * i;) 320.4 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 526 504 536 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(    i := i + 1;) 320.4 530.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 516 504 526 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 520.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(Examples:) 108 233.33 T
0 0 1 0 1 1 0 K
306 230 504 240 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(foo\050a: INT\051: INT is) 320.4 234.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 220 504 230 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(  return a*10;  end;) 320.4 224.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "188" 188
%%Page: "189" 189
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Statement and Expr) 226.9 710.84 T
(ession Catalogue :) 303.48 710.84 T
0 F
(15.1) 377.9 710.84 T
(Statements) 395.63 710.84 T
6 10 Q
(189) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.31 (It is a f) 108 659.33 P
-0.31 (atal error if the \336nal statement e) 135.01 659.33 P
-0.31 (x) 260.73 659.33 P
-0.31 (ecuted in a routine with a return type is not a) 265.58 659.33 P
7 F
-0.35 (return) 443.51 659.33 P
5 F
-0.31 ( or) 469.62 659.33 P
7 F
-0.35 (raise) 482.33 659.33 P
5 F
(statement.) 108 647.33 T
4 12 Q
(15.1.7) 108 606 T
7 11 Q
(typecase) 151.37 606 T
4 12 Q
( statements) 195.39 606 T
5 10 Q
-0 (The typecase statement is described in the chapter on Abstract Classes and Subtyping on page 79.) 108 509.33 P
-0.1 (An operation that depends on the runtime type of an object held by a  v) 108 487.33 P
-0.1 (ariable of abstract type  may) 390.92 487.33 P
0.45 (be performed inside a typecase statement. The v) 108 475.33 P
0.45 (ariable in the typecase \050\325a\325 in the abo) 303.66 475.33 P
0.45 (v) 454.7 475.33 P
0.45 (e e) 459.55 475.33 P
0.45 (xample\051) 471.23 475.33 P
-0.08 (must name a local v) 108 463.33 P
-0.08 (ariable or an ar) 187.42 463.33 P
-0.08 (gument of a method. If the) 247.25 463.33 P
7 F
-0.09 (typecase) 355.92 463.33 P
5 F
-0.08 ( appears in an iterator) 395.94 463.33 P
-0.08 (, then) 481.86 463.33 P
0.12 (the mode of the ar) 108 451.33 P
0.12 (gument must be) 181.04 451.33 P
7 F
0.13 (once) 247.77 451.33 P
5 F
0.12 (; otherwise, the type of object that such an ar) 269.45 451.33 P
0.12 (gument holds) 449.71 451.33 P
(could change.) 108 439.33 T
-0.06 (On e) 108 417.33 P
-0.06 (x) 126.95 417.33 P
-0.06 (ecution, each successi) 131.8 417.33 P
-0.06 (v) 219.46 417.33 P
-0.06 (e type speci\336er is tested for being a supertype of the type of the object) 224.32 417.33 P
0.49 (held by the v) 108 405.33 P
0.49 (ariable. The statement list follo) 161.17 405.33 P
0.49 (wing the \336rst matching type speci\336er is e) 287.6 405.33 P
0.49 (x) 455.62 405.33 P
0.49 (ecuted and) 460.47 405.33 P
0.28 (control passes to the statement follo) 108 393.33 P
0.28 (wing the) 252.74 393.33 P
7 F
0.31 (typecase) 290.51 393.33 P
5 F
0.28 (. W) 330.53 393.33 P
0.28 (ithin each statement list, the type of the) 344.85 393.33 P
7 F
0.5 (typecase) 108 381.33 P
5 F
0.45 ( v) 148.02 381.33 P
0.45 (ariable is tak) 155.72 381.33 P
0.45 (en to be the type speci\336ed by the matching type speci\336er unless the v) 207.62 381.33 P
0.45 (ari-) 490.12 381.33 P
-0.56 (able\325) 108 369.33 P
-0.56 (s declared type is a subtype of it, in which case it retains its declared type. It is not le) 127.44 369.33 P
-0.56 (g) 455.17 369.33 P
-0.56 (al to assign) 460.12 369.33 P
-0.19 (to the) 108 357.33 P
7 F
-0.21 (typecase) 132.62 357.33 P
5 F
-0.19 ( v) 172.64 357.33 P
-0.19 (ariable within the statement lists. If the object\325) 179.7 357.33 P
-0.19 (s type is not a subtype of an) 363.92 357.33 P
-0.19 (y of the) 473.83 357.33 P
(type speci\336ers and an) 108 345.33 T
7 F
(else) 196.87 345.33 T
5 F
( clause is present, then the statement list follo) 215.21 345.33 T
(wing it is e) 396.89 345.33 T
(x) 440.91 345.33 T
(ecuted.) 445.76 345.33 T
0.14 ( It is a f) 108 323.33 P
0.14 (atal error for no branch to match in the absence of an) 139.02 323.33 P
7 F
0.16 (else) 355.12 323.33 P
5 F
0.14 ( clause. The declared type of the) 373.46 323.33 P
0.3 (v) 108 311.33 P
0.3 (ariable is not changed within the) 112.75 311.33 P
7 F
0.33 (else) 247.31 311.33 P
5 F
0.3 ( statement list. If the v) 265.65 311.33 P
0.3 (alue of the v) 356.34 311.33 P
0.3 (ariable is) 406.7 311.33 P
7 F
0.33 (void) 446.18 311.33 P
5 F
0.3 ( when the) 464.52 311.33 P
7 F
(typecase) 108 299.33 T
5 F
( is e) 148.02 299.33 T
(x) 163.98 299.33 T
(ecuted, then its type is tak) 168.83 299.33 T
(en to be the declared type of the v) 272.61 299.33 T
(ariable.) 407.88 299.33 T
4 F
(See) 108 271.33 T
5 F
(\245) 108 255.33 T
(Statement description on page 90.) 121.54 255.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Example:) 108 583.33 T
0 0 1 0 1 1 0 K
306 580 504 590 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(typecase a) 320.4 584.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 570 504 580 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when INT then ...) 320.4 574.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 560 504 570 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when FLT then ...) 320.4 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 550 504 560 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when $A then ...) 320.4 554.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 540 504 550 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(else ....) 320.4 544.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 530 504 540 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "189" 189
%%Page: "190" 190
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(190) 108 710.84 T
8 8 Q
(Statement and Expr) 210.4 710.84 T
(ession Catalogue :) 286.98 710.84 T
0 F
(15.2 Expr) 361.41 710.84 T
(essions) 395.1 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(15.1.8) 108 658 T
7 11 Q
(yield) 151.37 658 T
4 12 Q
( statements) 173.98 658 T
2 10 Q
0.08 (yield statements are used to return control to a loop and may appear only in iterator defi-) 108 551.33 P
0.21 (nitions. The yield statement must be followed by a value if the iterator has a return value) 108 539.33 P
0.29 (and must be absent if it does not. The value yielded must be a subtype of the return type) 108 527.33 P
-0.05 (of the iterator. Execution of a) 108 515.33 P
7 F
-0.05 (yield) 238.22 515.33 P
2 F
-0.05 ( statement causes the expression to be evaluated and its) 258.78 515.33 P
-0.09 (value to be returned to the caller of the iterator in which it appears.  Yield is not permitted) 108 503.33 P
0.2 (within a protect statement \050see page 187\051.  Yield causes assignment to) 108 491.33 P
7 F
0.22 (out) 419.52 491.33 P
2 F
0.2 ( and) 433.42 491.33 P
7 F
0.22 (inout) 455.75 491.33 P
2 F
0.2 ( argu-) 477.43 491.33 P
(ments in the caller) 108 479.33 T
(In the example above the iterator yields  odd numbers upto the specified value, "n".) 108 455.33 T
4 F
(See) 108 427.33 T
5 F
(\245) 108 411.33 T
(Statement description on page 62 and the chapter on iterators in general.) 121.54 411.33 T
4 12 Q
(15.1.9) 108 370 T
7 F
(quit) 151.37 370 T
4 F
( statements) 170.71 370 T
5 10 Q
0.17 (quit statements are used to terminate loops and may only appear in iterator de\336nitions. No v) 108 347.33 P
0.17 (alue is) 478 347.33 P
0.21 (returned from an iterator when it quits, and no assignment tak) 108 335.33 P
0.21 (es place to out or inout ar) 356.9 335.33 P
0.21 (guments in) 459.62 335.33 P
(the caller) 108 323.33 T
(. No statements may follo) 144.38 323.33 T
(w a quit statement in a statement list.) 247.18 323.33 T
4 F
(See) 108 295.33 T
5 F
(\245) 108 279.33 T
(Statement description on page 62 and the chapter on iterators in general.) 121.54 279.33 T
108 217.98 504 221 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 219.49 540 219.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(15.2  Expressions) 108 227 T
5 10 Q
-0.28 (W) 108 198.31 P
-0.28 (e describe belo) 116.64 198.31 P
-0.28 (w a fe) 175.82 198.31 P
-0.28 (w special e) 199.44 198.31 P
-0.28 (xpressions used in Sather -) 243.17 198.31 P
7 F
-0.31 (void) 351.5 198.31 P
5 F
-0.28 (,) 369.84 198.31 P
7 F
-0.31 (void\050\051) 374.56 198.31 P
5 F
-0.28 ( and the short circuit bool-) 399.56 198.31 P
(ean operations) 108 186.31 T
7 F
(or) 168.54 186.31 T
5 F
(and) 180.21 186.31 T
7 F
(and) 197.15 186.31 T
5 F
(.) 213.83 186.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
2 F
(Examples:) 108 635.33 T
0 0 1 0 1 1 0 K
306 632 504 642 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(odd_upto!\050n: INT\051: INT is) 320.4 636.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 622 504 632 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(   i: INT := 0;) 320.4 626.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 612 504 622 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(   loop until!\050i = n\051;) 320.4 616.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 602 504 612 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(      if i.is_odd then yield i end;) 320.4 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 592 504 602 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(      i := i + 1;) 320.4 596.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 582 504 592 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(    end;) 320.4 586.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 572 504 582 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "190" 190
%%Page: "191" 191
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Statement and Expr) 227.54 710.84 T
(ession Catalogue :) 304.12 710.84 T
0 F
(15.2) 378.54 710.84 T
(Expr) 396.27 710.84 T
(essions) 412.23 710.84 T
6 10 Q
(191) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(15.2.1) 108 658 T
7 11 Q
(void) 151.37 658 T
4 12 Q
( e) 171.54 658 T
(xpressions) 181.37 658 T
5 10 Q
0.56 (A) 108 635.33 P
1 F
0.56 (void expression) 118.28 635.33 P
5 F
0.56 ( returns a v) 180.78 635.33 P
0.56 (alue whose type is determined from conte) 226.91 635.33 P
0.56 (xt.) 397.3 635.33 P
7 F
0.62 (void) 410.63 635.33 P
5 F
0.56 ( is the v) 428.97 635.33 P
0.56 (alue that a) 461.79 635.33 P
0.17 (v) 108 623.33 P
0.17 (ariable of the type recei) 112.75 623.33 P
0.17 (v) 207.59 623.33 P
0.17 (es when it is declared b) 212.43 623.33 P
0.17 (ut not e) 306.67 623.33 P
0.17 (xplicitly initialized. The v) 336.86 623.33 P
0.17 (alue of) 441 623.33 P
7 F
0.19 (void) 471.33 623.33 P
5 F
0.17 ( for) 489.67 623.33 P
0.23 (objects \050e) 108 611.33 P
0.23 (xcept for immutable objects\051 is a special v) 146.68 611.33 P
0.23 (alue that indicates the absence of an object - it) 317.21 611.33 P
0.29 (is essentially the NULL pointer) 108 599.33 P
0.29 (.  Immutable objects are described in their o) 234.72 599.33 P
0.29 (wn chapter) 412.62 599.33 P
0.29 (, b) 456.66 599.33 P
0.29 (ut for the) 466.75 599.33 P
(sak) 108 587.33 T
(e of reference:) 121.23 587.33 T
-0.02 (F) 108 498.33 P
-0.02 (or other immutable types the v) 113.41 498.33 P
-0.02 (oid v) 235.62 498.33 P
-0.02 (alue is determined by recursi) 255.63 498.33 P
-0.02 (v) 370.85 498.33 P
-0.02 (ely setting each attrib) 375.7 498.33 P
-0.02 (ute and ar-) 461.27 498.33 P
(ray element to) 108 486.33 T
7 F
(void) 167.71 486.33 T
5 F
(.) 186.05 486.33 T
5 8 Q
(1) 188.55 490.33 T
5 10 Q
(  F) 192.55 486.33 T
(or numerical types, this results in the appropriate v) 202.96 486.33 T
(ersion of \324zero\325.) 405.84 486.33 T
7 F
(void) 108 464.33 T
5 F
( e) 126.34 464.33 T
(xpressions may appear) 133.13 464.33 T
(\245) 108 446.33 T
(as the initializer for a constant or shared attrib) 121.54 446.33 T
(ute. In f) 305.19 446.33 T
(act, for most b) 336.47 446.33 T
(uilt-in classes, the only le-) 394.04 446.33 T
(g) 121.54 434.33 T
(al constant v) 126.49 434.33 T
(alue is the v) 176.79 434.33 T
(oid v) 224.64 434.33 T
(alue e.g.) 244.67 434.33 T
9 8 Q
(const a: POINT := void;) 122.4 423.67 T
5 10 Q
(\245) 108 410.33 T
(as the right hand side of an assignment statement) 121.54 410.33 T
(\245) 108 395.33 T
(as the return v) 121.54 395.33 T
(alue in a) 178.22 395.33 T
7 F
(return) 214.6 395.33 T
5 F
( or) 240.72 395.33 T
7 F
(yield) 254.05 395.33 T
5 F
(statement) 277.39 395.33 T
(\245) 108 380.33 T
(as the v) 121.54 380.33 T
(alue of one of the e) 151.84 380.33 T
(xpressions in a) 228.61 380.33 T
7 F
(case) 290.55 380.33 T
5 F
(statement) 314.45 380.33 T
(\245) 108 365.33 T
(as the e) 121.54 365.33 T
(xception object in a) 151.38 365.33 T
7 F
(raise) 232.48 365.33 T
5 F
( statement \050see the chapter on Exceptions\051) 254.15 365.33 T
(\245) 108 350.33 T
(as an ar) 121.54 350.33 T
(gument v) 151.9 350.33 T
(alue in a method call) 189.15 350.33 T
(\245) 108 335.33 T
(in a creation e) 121.54 335.33 T
(xpression. In this last case, the ar) 177.76 335.33 T
(gument is ignored in resolving o) 309.78 335.33 T
(v) 439.35 335.33 T
(erloading.) 444.2 335.33 T
7 F
(void) 108 313.33 T
5 F
( e) 126.34 313.33 T
(xpressions may not appear:) 133.13 313.33 T
(\245) 108 295.33 T
(as the left ar) 121.54 295.33 T
(gument of the dot \324) 170.51 295.33 T
7 F
(.) 247.17 295.33 T
5 F
(\325 operator) 249.25 295.33 T
(.) 287.85 295.33 T
0.08 (It is a f) 108 242.33 P
0.08 (atal error to access object attrib) 136.18 242.33 P
0.08 (utes of a v) 261.61 242.33 P
0.08 (oid v) 303.03 242.33 P
0.08 (ariable of reference type or to mak) 323.14 242.33 P
0.08 (e an) 461.78 242.33 P
0.08 (y calls) 478.09 242.33 P
-0.4 (on a v) 108 230.33 P
-0.4 (oid v) 131.45 230.33 P
-0.4 (ariable of abstract type.  Calls on a v) 151.08 230.33 P
-0.4 (oid v) 294.07 230.33 P
-0.4 (ariable of an immutable type are, ho) 313.7 230.33 P
-0.4 (we) 455.77 230.33 P
-0.4 (v) 467.18 230.33 P
-0.4 (er) 472.03 230.33 P
-0.4 (, quite) 479.4 230.33 P
(le) 108 218.33 T
(g) 115.07 218.33 T
(al \050otherwise you w) 120.02 218.33 T
(ould not be able to dot into a f) 199.07 218.33 T
(alse boolean or a zero v) 319.52 218.33 T
(alued inte) 413.96 218.33 T
(ger!\051) 452.97 218.33 T
108 120 504 140.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 131.09 240.98 131.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(1.  The other built-in basic types ar) 108 114.67 T
(e de\336ned as arrays of BOOL and all have their values set to void by this r) 229.98 114.67 T
(ule.) 488.23 114.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
(Class) 185.79 566.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Initial Value) 240.98 566.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class) 329.79 566.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Initial Value) 384.98 566.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(INT) 168 550.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0) 240 550.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CHAR) 312 550.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\325\1340\325) 384 550.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FL) 168 536.33 T
(T) 178.75 536.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.0) 240 536.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FL) 312 536.33 T
(TD) 322.75 536.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.0d) 384 536.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BOOL) 168 522.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(f) 240 522.33 T
(alse) 243.23 522.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(a: POINT := #POINT\0503,3\051;) 144 275.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- ILLEGAL \050and silly\051 a.void) 144 266.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
162 576 162 517.25 2 L
V
0.5 H
0 Z
N
234 578 234 516.75 2 L
V
N
306 578 306 516.75 2 L
V
2 H
N
378 578 378 516.75 2 L
V
0.5 H
N
450 576 450 517.25 2 L
V
N
161.75 577 450.25 577 2 L
V
2 H
N
161.75 559 450.25 559 2 L
V
N
161.75 545 450.25 545 2 L
V
0.5 H
N
161.75 531 450.25 531 2 L
V
N
161.75 517 450.25 517 2 L
V
N
129.6 283.88 129.6 261.12 2 L
V
0.25 H
N
489.6 283.88 489.6 261.12 2 L
V
N
129.48 284 489.73 284 2 L
V
N
129.48 261 489.73 261 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "191" 191
%%Page: "192" 192
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(192) 108 710.84 T
8 8 Q
(Statement and Expr) 210.4 710.84 T
(ession Catalogue :) 286.98 710.84 T
0 F
(15.2 Expr) 361.41 710.84 T
(essions) 395.1 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(15.2.2) 108 658 T
7 11 Q
(void) 151.37 658 T
4 12 Q
( test e) 171.54 658 T
(xpressions) 206.04 658 T
1 10 Q
-0.24 (Void test expressions) 108 611.33 P
5 F
-0.24 ( e) 192.51 611.33 P
-0.24 (v) 198.96 611.33 P
-0.24 (aluate their ar) 203.71 611.33 P
-0.24 (gument and return a boolean v) 258.02 611.33 P
-0.24 (alue which is true if the v) 378.47 611.33 P
-0.24 (alue is) 478.41 611.33 P
7 F
(void) 108 599.33 T
5 F
(.) 129.12 599.33 T
4 12 Q
(15.2.3) 108 446 T
(Shor) 151.37 446 T
(t cir) 178.94 446 T
(cuit boolean e) 200.71 446 T
(xpressions:) 281.22 446 T
7 11 Q
(and) 351.91 446 T
4 12 Q
( and) 370.26 446 T
7 11 Q
(or) 398.27 446 T
1 10 Q
-0.48 (and expressions) 108 379.33 P
5 F
-0.48 ( compute the conjunction of tw) 171.14 379.33 P
-0.48 (o boolean e) 293.35 379.33 P
-0.48 (xpressions and return boolean v) 338.35 379.33 P
-0.48 (alues. The) 463.38 379.33 P
-0.04 (\336rst e) 108 367.33 P
-0.04 (xpression is e) 130.31 367.33 P
-0.04 (v) 184.43 367.33 P
-0.04 (aluated and if) 189.18 367.33 P
7 F
-0.04 (false) 246 367.33 P
5 F
-0.04 (,) 267.12 367.33 P
7 F
-0.04 (false) 272.09 367.33 P
5 F
-0.04 ( is immediately returned as the result. Otherwise, the) 293.21 367.33 P
(second e) 108 355.33 T
(xpression is e) 142.56 355.33 T
(v) 196.75 355.33 T
(aluated and its v) 201.5 355.33 T
(alue returned.) 266.52 355.33 T
1 F
0.25 (or expressions) 108 333.33 P
5 F
0.25 ( compute the disjunction of tw) 165.2 333.33 P
0.25 (o boolean e) 288.27 333.33 P
0.25 (xpressions and return boolean v) 334.71 333.33 P
0.25 (alues. The) 462.65 333.33 P
0.48 (\336rst e) 108 321.33 P
0.48 (xpression is e) 130.83 321.33 P
0.48 (v) 185.99 321.33 P
0.48 (aluated and if) 190.74 321.33 P
7 F
0.54 (true) 249.12 321.33 P
5 F
0.48 (,) 266.35 321.33 P
7 F
0.54 (true) 271.83 321.33 P
5 F
0.48 ( is immediately returned as the result. Otherwise, the) 289.06 321.33 P
(second e) 108 309.33 T
(xpression is e) 142.56 309.33 T
(v) 196.75 309.33 T
(aluated and its v) 201.5 309.33 T
(alue returned.) 266.52 309.33 T
4 F
(See) 108 281.33 T
5 F
(\245) 108 265.33 T
(Expression description on page 192.) 121.54 265.33 T
4 12 Q
(15.2.4) 108 224 T
7 11 Q
(exception) 151.37 224 T
4 12 Q
( e) 198.45 224 T
(xpressions) 208.28 224 T
1 10 Q
-0.4 (exception expressions) 108 127.33 P
2 F
-0.4 ( may only appear within the statements of the) 194.18 127.33 P
7 F
-0.45 (when) 396.05 127.33 P
2 F
-0.4 ( and) 419.95 127.33 P
7 F
-0.45 (else) 441.08 127.33 P
2 F
-0.4 ( clauses in) 459.42 127.33 P
7 F
-0.34 (protect) 108 115.33 P
2 F
-0.31 ( statements. They r) 138.57 115.33 P
-0.31 (eturn the exception object that caused the) 221.21 115.33 P
7 F
-0.34 (when) 404.57 115.33 P
2 F
-0.31 ( branch to be tak-) 428.47 115.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 F
(Example:) 108 635.33 T
0 0 1 0 1 1 0 K
306 632 504 642 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(void\050x\051) 320.4 636.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p: POINT;) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + void\050p\051;   -- Prints out true) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p := #POINT\0503,5\051;) 144 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + void\050p\051;   -- Prints out false) 144 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(p := void;) 144 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + void\050p\051;   -- Prints out true;) 144 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b: BOOL;) 144 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + void\050b\051;   -- Prints out true) 144 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(b := false;) 144 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(#OUT + void\050b\051;          -- Prints out true!) 144 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Even though b has been assigned, it has the void value) 144 489.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(Example) 108 423.33 T
0 0 1 0 1 1 0 K
306 420 504 430 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(if \0503>a and b>6\051 or \050c="Goo"\051 then) 320.4 424.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 410 504 420 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(     #OUT+"Success!") 320.4 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 400 504 410 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
5 10 Q
(Example:) 108 201.33 T
0 0 1 0 1 1 0 K
306 198 504 208 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
9 8 Q
0 X
0 0 0 1 0 0 0 K
(protect) 320.4 202.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 188 504 198 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(   .... some code) 320.4 192.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 178 504 188 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when STR then #OUT+exception.str end;) 320.4 182.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 168 504 178 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(when ...) 320.4 172.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 158 504 168 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(else ...) 320.4 162.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
306 148 504 158 R
6 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(end;) 320.4 152.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 587.88 129.6 484.12 2 L
V
0 Z
N
489.6 587.88 489.6 484.12 2 L
V
N
129.48 588 489.73 588 2 L
V
N
129.48 484 489.73 484 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "192" 192
%%Page: "193" 193
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Statement and Expr) 227.54 710.84 T
(ession Catalogue :) 304.12 710.84 T
0 F
(15.2) 378.54 710.84 T
(Expr) 396.27 710.84 T
(essions) 412.23 710.84 T
6 10 Q
(193) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 F
0 X
0.22 (en in the most tightly enclosing) 108 659.33 P
7 F
0.24 (protect) 250.53 659.33 P
2 F
0.22 ( statement. The r) 281.1 659.33 P
0.22 (eturn type is the type speci\336ed in) 355.52 659.33 P
(the corr) 108 647.33 T
(esponding) 141.99 647.33 T
7 F
(when) 191.21 647.33 T
2 F
( clause \050page 187\051. In an) 215.11 647.33 T
7 F
(else) 323.05 647.33 T
2 F
( clause the r) 341.39 647.33 T
(eturn type is \324) 393.94 647.33 T
7 F
($OB) 454.84 647.33 T
2 F
(\325.) 474.85 647.33 T
4 F
(See) 108 619.33 T
5 F
(\245) 108 603.33 T
(The description of the protect statement on page 132.) 121.54 603.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "193" 193
%%Page: "194" 194
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(194) 108 710.84 T
8 8 Q
(Statement and Expr) 210.4 710.84 T
(ession Catalogue :) 286.98 710.84 T
0 F
(15.2 Expr) 361.41 710.84 T
(essions) 395.1 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "194" 194
%%Page: "195" 195
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
V
0 36 Q
0 X
-1.8 (An Intr) 108 624 S
-1.8 (oduction to) 206.39 624 S
-1.8 (pSather 1.1) 108 588 S
0 12 Q
(Jer) 108 548 T
(ome  F) 124.96 548 T
(eldm) 164.1 548 T
(an) 193.54 548 T
1 10 Q
(August 24, 1996) 108 527.33 T
2 F
3.13 (The parallel and distributed extensions of Sather) 108 505.33 P
3.13 (, collectively r) 340.67 505.33 P
3.13 (eferr) 408.24 505.33 P
3.13 (ed to as) 428.87 505.33 P
0.11 (pSather) 108 493.33 P
0.11 (, wer) 141.34 493.33 P
0.11 (e designed hand-in-hand with the serial language.  In addition to de-) 163.35 493.33 P
0.05 (scribing the language featur) 108 481.33 P
0.05 (es of pSather) 231.72 481.33 P
0.05 (, this document pr) 287.98 481.33 P
0.05 (esents  a particular ap-) 368.87 481.33 P
(pr) 108 469.33 T
(oach to object-oriented parallel pr) 117.78 469.33 T
(ogramming.) 266.72 469.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "195" 195
%%Page: "196" 196
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "196" 196
%%Page: "197" 197
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(pSather T) 267.69 710.84 T
(utor) 303.05 710.84 T
(ial :) 318.43 710.84 T
0 F
(16.1) 333.74 710.84 T
(Intr) 351.47 710.84 T
(oduction) 363.12 710.84 T
6 10 Q
(197) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (pSather T) 108 642 S
-0.25 (utor) 264.89 642 S
-0.25 (ial) 333.12 642 S
108 502.98 504 506 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 504.49 540 504.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(16.1  Intr) 108 512 T
(oduction) 181.67 512 T
5 10 Q
0.2 ( P) 108 483.31 P
0.2 (arallel programming is often vie) 116.11 483.31 P
0.2 (wed as much harder than serial programming. Unfortunately the) 245.52 483.31 P
0.09 (general perception is correct, parallel programming is dif) 108 471.31 P
0.09 (\336cult. The parallel features of Sather) 336.67 471.31 P
0.09 (, col-) 483.36 471.31 P
0.15 (lecti) 108 459.31 P
0.15 (v) 124.97 459.31 P
0.15 (ely kno) 129.82 459.31 P
0.15 (wn as pSather) 159.44 459.31 P
0.15 (, ha) 215.43 459.31 P
0.15 (v) 229.82 459.31 P
0.15 (e been under de) 234.67 459.31 P
0.15 (v) 297.89 459.31 P
0.15 (elopment and e) 302.73 459.31 P
0.15 (xperimental use at ICSI for se) 363.98 459.31 P
0.15 (v) 484.16 459.31 P
0.15 (eral) 489.01 459.31 P
0.15 (years and ha) 108 447.31 P
0.15 (v) 158.07 447.31 P
0.15 (e recently been inte) 162.92 447.31 P
0.15 (grated into the general distrib) 241.24 447.31 P
0.15 (ution. Some of the simplest features) 359.39 447.31 P
0.68 (are supported on all platforms, e) 108 435.31 P
0.68 (v) 240.57 435.31 P
0.68 (en those with no parallel capabilities. This is mainly to pro) 245.42 435.31 P
0.68 (vide) 486.78 435.31 P
-0.58 (compatibility with parallel platforms. Unfortunately) 108 423.31 P
-0.58 (, to mak) 313.09 423.31 P
-0.58 (e an) 344.33 423.31 P
-0.58 (y interesting use of pSather or of this) 359.99 423.31 P
0.46 (tutorial you need access to a platform that supports pSather threads. A current list of these can be) 108 411.31 P
-0.52 (found on the pSather home page<>. Because there is no generally accepted portable thread interf) 108 399.31 P
-0.52 (ace,) 488.18 399.31 P
0.31 (it is a signi\336cant ef) 108 387.31 P
0.31 (fort to port pSather to a ne) 185.08 387.31 P
0.31 (w parallel system and there are separate compilation) 292.2 387.31 P
-0.23 (\337ags for each of these. The platforms that ha) 108 375.31 P
-0.23 (v) 284.56 375.31 P
-0.23 (e the most e) 289.41 375.31 P
-0.23 (xtensi) 336.63 375.31 P
-0.23 (v) 360.27 375.31 P
-0.23 (e history are v) 365.12 375.31 P
-0.23 (arious Solaris imple-) 421.12 375.31 P
(mentations and these are used for the e) 108 363.31 T
(xamples here.) 263.09 363.31 T
-0.14 (There are man) 108 341.31 P
-0.14 (y approaches to parallel programming languages and dozens of proposals for parallel) 165.32 341.31 P
-0.16 (\050or concurrent\051 OO languages. The design goals of pSather are the same as for the serial portions of) 108 329.31 P
-0.53 (the language. The most important criteria are e) 108 317.31 P
-0.53 (x) 291.31 317.31 P
-0.53 (ecution ef) 296.16 317.31 P
-0.53 (\336cienc) 335.09 317.31 P
-0.53 (y) 361.6 317.31 P
-0.53 (, safety and reusability) 365.95 317.31 P
-0.53 (. The project) 454.24 317.31 P
-0.19 (has, from the outset, been based on the belief that Sather\325) 108 305.31 P
-0.19 (s constructs and methodology will be e) 334.98 305.31 P
-0.19 (v) 489.71 305.31 P
-0.19 (en) 494.56 305.31 P
0.19 (more v) 108 293.31 P
0.19 (aluable in the more challenging domain of parallel computing. Extending Sather) 135.99 293.31 P
0.19 (, pSather is) 458.89 293.31 P
(an e) 108 281.31 T
(xplicit imperati) 124.23 281.31 T
(v) 185.37 281.31 T
(e object-oriented language.) 190.22 281.31 T
0.27 (The underlying model remains one lar) 108 259.31 P
0.27 (ge shared address space, although there are also features for) 262.2 259.31 P
-0.02 (placement of objects and threads for greater ef) 108 247.31 P
-0.02 (\336cienc) 293.35 247.31 P
-0.02 (y) 319.86 247.31 P
-0.02 (. The current) 324.21 247.31 P
6 F
-0.02 (cluster) 378.01 247.31 P
5 F
-0.02 ( model assumes that the) 408.55 247.31 P
-0.09 (underlying system has a speci\336ed number of clusters, each of which might support the parallel e) 108 235.31 P
-0.09 (x) 491.38 235.31 P
-0.09 (e-) 496.23 235.31 P
-0.22 (cution of multiple threads. The presumption is that the communication costs across clusters is much) 108 223.31 P
-0.37 (greater than within a cluster) 108 211.31 P
-0.37 (. The moti) 217.62 211.31 P
-0.37 (v) 258.02 211.31 P
-0.37 (ating e) 262.77 211.31 P
-0.37 (xample is a netw) 289.19 211.31 P
-0.37 (ork of SMP w) 355.48 211.31 P
-0.37 (orkstations. At ICSI we) 410.66 211.31 P
0.77 (ha) 108 199.31 P
0.77 (v) 117.24 199.31 P
0.77 (e been using a lo) 122.09 199.31 P
0.77 (w-latenc) 192.14 199.31 P
0.77 (y Myrinet/acti) 226.42 199.31 P
0.77 (v) 283.89 199.31 P
0.77 (e-message netw) 288.74 199.31 P
0.77 (ork of quad Sparc10s as a prototype.) 353 199.31 P
-0.23 (There is also an ethernet implementation, b) 108 187.31 P
-0.23 (ut the latencies mak) 279.43 187.31 P
-0.23 (e this impractical for all b) 358.34 187.31 P
-0.23 (ut the most) 460.02 187.31 P
-0.01 (loosely coupled parallel programs. An implementation on the Meik) 108 175.31 P
-0.01 (o CS-2 <>allo) 376.94 175.31 P
-0.01 (ws us to test scal-) 433.5 175.31 P
(ability to lar) 108 163.31 T
(ger systems.) 156.71 163.31 T
-0.03 (W) 108 141.31 P
-0.03 (e belie) 116.64 141.31 P
-0.03 (v) 142.74 141.31 P
-0.03 (e that pSather ef) 147.59 141.31 P
-0.03 (fecti) 212.51 141.31 P
-0.03 (v) 230.03 141.31 P
-0.03 (ely supports all the standard styles of parallel programming such as) 234.88 141.31 P
-0.02 (data parallel, task parallel, actor) 108 129.31 P
-0.02 (, etc. and this tutorial will pro) 235.25 129.31 P
-0.02 (vide some indication of ho) 353.29 129.31 P
-0.02 (w we think) 459.61 129.31 P
0.46 (this should go. The focus of the language design w) 108 117.31 P
0.46 (as to pro) 315.32 117.31 P
0.46 (vide con) 350.52 117.31 P
0.46 (v) 384.74 117.31 P
0.46 (enient constructs for writing) 389.59 117.31 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "197" 197
%%Page: "198" 198
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(198) 108 710.84 T
8 8 Q
(pSather T) 250.55 710.84 T
(utor) 285.91 710.84 T
(ial :) 301.3 710.84 T
0 F
(16.1 Intr) 316.61 710.84 T
(oduction) 345.98 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.32 (libraries of parallel and distrib) 108 659.33 P
0.32 (uted objects.The most fundamental additional e) 230.19 659.33 P
0.32 (xtension to Sather is) 421.64 659.33 P
0.14 (the notion of multiple) 108 647.33 P
6 F
0.14 (threads) 197.99 647.33 P
5 F
0.14 ( of e) 231.87 647.33 P
0.14 (x) 249.76 647.33 P
0.14 (ecution.Threads are not \336rst-class objects in pSather) 254.61 647.33 P
0.14 (. This and) 464.01 647.33 P
0.23 (other design decisions are discussed in a v) 108 635.33 P
0.23 (ariety of papers accessible through the web page<>. Al-) 278.47 635.33 P
-0.26 (though there are f) 108 623.33 P
-0.26 (acilities for mutual e) 177.94 623.33 P
-0.26 (xclusion \050at most one thread acti) 259.5 623.33 P
-0.26 (v) 388.23 623.33 P
-0.26 (e in an object\051, these are not) 393.08 623.33 P
0.83 (mandatory and man) 108 611.33 P
0.83 (y pSather programs depend upon multiple acti) 188.94 611.33 P
0.83 (v) 378.65 611.33 P
0.83 (e threads. In general, the lan-) 383.5 611.33 P
0.41 (guage attempts to pro) 108 599.33 P
0.41 (vide the library designer and application programmer with tools for creating) 195.47 599.33 P
0.39 (systems that achie) 108 587.33 P
0.39 (v) 181.3 587.33 P
0.39 (e maximum performance, b) 186.15 587.33 P
0.39 (ut also supports parallel computing styles that con-) 297.66 587.33 P
(centrate on simplicity and safety) 108 575.33 T
(.) 237.33 575.33 T
-0.51 (The parallel e) 108 553.33 P
-0.51 (xtensions to Sather that constitute pSather are currently di) 161.82 553.33 P
-0.51 (vided into three conceptually) 389.15 553.33 P
0.17 (distinct e) 108 541.33 P
0.17 (xtensions. The Threaded Extension \050Section 1.2\051 is the most basic and introduces the par) 144.41 541.33 P
0.17 (,) 501.5 541.33 P
-0.46 (fork and parloop constructs. Programs that require no synchronization can be coded using only these) 108 529.33 P
-0.13 (mechanisms.The Synchronization Extension  \050Section 1.3\051is the most comple) 108 517.33 P
-0.13 (x and includes the ab-) 416.77 517.33 P
0.06 (stract class $LOCK and its descendants and the v) 108 505.33 P
0.06 (arious forms of the lock statement. It includes the) 305.45 505.33 P
0.73 (po) 108 493.33 P
0.73 (werful GA) 117.75 493.33 P
0.73 (TE construct  \050Section 1.4\051that combines the semantics of futures, e) 160.41 493.33 P
0.73 (v) 438.53 493.33 P
0.73 (ents, and locks) 443.38 493.33 P
-0.48 (found in other languages. The Distrib) 108 481.33 P
-0.48 (uted Extension \050Section 1.5\051adds the placement annotation, @,) 255.39 481.33 P
-0.51 (and the with...near statement. These do not af) 108 469.33 P
-0.51 (fect the semantics of a correct program, b) 286.08 469.33 P
-0.51 (ut can support) 448.36 469.33 P
-0.57 (greatly impro) 108 457.33 P
-0.57 (v) 161.44 457.33 P
-0.57 (ed performance on distrib) 166.29 457.33 P
-0.57 (uted platforms such as a netw) 267.41 457.33 P
-0.57 (ork of w) 383.06 457.33 P
-0.57 (orkstations. Sather 1.2) 415.7 457.33 P
0.44 (will e) 108 445.33 P
0.44 (xtend these ideas with the Zone Extension, which supports a much richer model of data and) 130.79 445.33 P
(thread locality) 108 433.33 T
(.) 164.84 433.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "198" 198
%%Page: "199" 199
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Thr) 251.82 710.84 T
(eaded Extension :) 278.18 710.84 T
0 F
(17.1) 349.62 710.84 T
(Intr) 367.34 710.84 T
(oduction) 378.99 710.84 T
6 10 Q
(199) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (The Thr) 108 642 S
-0.25 (eaded) 224.92 642 S
-0.25 (Extension) 108 600 S
108 460.98 504 464 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 462.49 540 462.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(17.1  Intr) 108 470 T
(oduction) 181.67 470 T
5 10 Q
-0.08 (The most basic parallel e) 108 441.31 P
-0.08 (xtension to serial Sather adds only threads and the ability to fork them and) 207.52 441.31 P
-0.09 (w) 108 429.31 P
-0.09 (ait for a collection of threads to complete e) 115.12 429.31 P
-0.09 (x) 285.86 429.31 P
-0.09 (ecution. Although this e) 290.71 429.31 P
-0.09 (xtension pro) 386.39 429.31 P
-0.09 (vides no capabil-) 435.87 429.31 P
0.35 (ities for coordinating access to shared data or w) 108 417.31 P
0.35 (aiting for e) 301.25 417.31 P
0.35 (v) 345.59 417.31 P
0.35 (ents, a wide range of problems can be) 350.44 417.31 P
0.12 (coded in this e) 108 405.31 P
0.12 (xtension. ICSI compilers starting with 1.1 will compile programs using the threaded) 166.27 405.31 P
-0.16 (e) 108 393.31 P
-0.16 (xtension on all platforms; on platforms without thread support, the v) 112.29 393.31 P
-0.16 (arious threads will each be se-) 384.01 393.31 P
0.16 (rially run to completion. W) 108 381.31 P
0.16 (e will start with some simple \322Hello W) 217.01 381.31 P
0.16 (orld\323 v) 373.73 381.31 P
0.16 (ariants and then discuss a) 401.7 381.31 P
(range of medium sized tasks that use only the threaded e) 108 369.31 T
(xtension capabilities.) 333.92 369.31 T
4 12 Q
(17.1.1   Hello W) 108 327.98 T
(orlds) 194.65 327.98 T
5 10 Q
0.94 ( W) 108 305.31 P
0.94 (e will gi) 120.08 305.31 P
0.94 (v) 154.48 305.31 P
0.94 (e tw) 159.33 305.31 P
0.94 (o e) 177.1 305.31 P
0.94 (xample \322Hello W) 189.83 305.31 P
0.94 (orld\323 programs to illustrate some of the basic pSather con-) 261.44 305.31 P
0.4 (structs. The simplest one uses the tw) 108 293.31 P
0.4 (o most basic pSather constructs,) 256.69 293.31 P
7 F
0.45 (par) 389.8 293.31 P
5 F
0.4 (and) 407.15 293.31 P
7 F
0.45 (fork) 424.49 293.31 P
5 F
0.4 (.) 441.16 293.31 P
0.4 ( Here there are) 443.66 293.31 P
(tw) 108 281.31 T
(o e) 117.9 281.31 T
(xplicit threads fork) 129.69 281.31 T
(ed within the par .. end statement) 205.69 281.31 T
0.08 (Each) 108 147.31 P
7 F
0.08 (fork) 130.57 147.31 P
5 F
0.08 ( statement establishes a separate thread of control e) 147.24 147.31 P
0.08 (x) 352.63 147.31 P
0.08 (ecuting the enclosed statement. F) 357.48 147.31 P
0.08 (ork) 490.67 147.31 P
-0.02 (statements can only occur within) 108 135.31 P
7 F
-0.02 (par) 242.05 135.31 P
5 F
-0.02 ( ..) 256.5 135.31 P
7 F
-0.02 (end) 266.46 135.31 P
5 F
-0.02 ( brack) 283.14 135.31 P
-0.02 (ets. Control passes to the statement follo) 307.73 135.31 P
-0.02 (wing the) 469.3 135.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 252.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 243.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      par) 144 234.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     fork #OUT+"Hello World #1" +'\134n' end;) 178.2 225.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     fork #OUT+"Hello World #2" +'\134n' end;) 178.2 216.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 207.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 198.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MAIN) 144 189.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 269.85 129.6 166.1 2 L
V
0.25 H
0 Z
N
489.6 269.85 489.6 166.1 2 L
V
N
129.48 269.98 489.73 269.98 2 L
V
N
129.48 165.98 489.73 165.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "199" 199
%%Page: "200" 200
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(200) 108 710.84 T
8 8 Q
(The Thr) 234.68 710.84 T
(eaded Extension :) 261.05 710.84 T
0 F
(17.1 Intr) 332.48 710.84 T
(oduction) 361.86 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.05 (end after the termination of all of the statements fork) 108 659.33 P
0.05 (ed within the brack) 319.71 659.33 P
0.05 (ets. There is no \336x) 396.69 659.33 P
0.05 (ed order) 470.91 659.33 P
-0.59 (of e) 108 647.33 P
-0.59 (x) 122.53 647.33 P
-0.59 (ecution of the fork) 127.38 647.33 P
-0.59 (ed statements; e) 199.67 647.33 P
-0.59 (v) 262.13 647.33 P
-0.59 (en this tin) 266.98 647.33 P
-0.59 (y program might print the greetings in either order) 305.11 647.33 P
-0.59 (.) 501.5 647.33 P
0.2 ( This program can be compiled and run on an) 108 625.33 P
0.2 (y Sather platform in the usual w) 291.58 625.33 P
0.2 (ay) 421.01 625.33 P
0.2 (, b) 429.8 625.33 P
0.2 (ut of course can) 439.8 625.33 P
-0.17 (only e) 108 613.33 P
-0.17 (x) 132.4 613.33 P
-0.17 (ecute in parallel on systems with thread support. The list of supported pSather platforms can) 137.25 613.33 P
0.62 (be found <>. There is a whole range of command line options for pSather) 108 601.33 P
0.62 (, the most important of) 410.15 601.33 P
0.33 (which is the platform. It is easiest to de) 108 589.33 P
0.33 (v) 267.32 589.33 P
0.33 (elop code on a single processor) 272.17 589.33 P
0.33 (, e) 398.66 589.33 P
0.33 (v) 408.18 589.33 P
0.33 (en if it is to e) 413.03 589.33 P
0.33 (v) 466.93 589.33 P
0.33 (entually) 471.78 589.33 P
(run on a lar) 108 577.33 T
(ge system. F) 153.64 577.33 T
(or Solaris, there are currently tw) 203.77 577.33 T
(o platform designators:) 333.08 577.33 T
(Solaris/1cluster  -- this treats a uni- or multi-processor w) 108 555.33 T
(orkstation as one shared memory) 334.26 555.33 T
(Solaris/smp  -- this treats a w) 108 533.33 T
(orkstation with k processors as k distinct clusters) 224.56 533.33 T
(The command line to compile the initial program, stored as hello.sa, could be:) 108 511.33 T
(   cs -Solaris/1cluster -o hello hello.sa) 108 489.33 T
0 (The distinction between the tw) 108 467.33 P
0 (o Solaris platforms is not important for the \336rst e) 231.24 467.33 P
0 (xample, b) 426.96 467.33 P
0 (ut will be) 466.21 467.33 P
0.44 (in our second v) 108 455.33 P
0.44 (ersion of "Hello W) 170.55 455.33 P
0.44 (orld". This v) 247.08 455.33 P
0.44 (ersion introduces the third and last construct in the) 298.28 455.33 P
-0.31 (Threaded Extension,) 108 443.33 P
7 F
-0.35 (parloop) 192.63 443.33 P
5 F
-0.31 (. Using fork statements within a par .. end brack) 225.99 443.33 P
-0.31 (et, one can fork dif) 415.26 443.33 P
-0.31 (fer-) 489.57 443.33 P
0.28 (ent threads of an) 108 431.33 P
0.28 (y v) 175.07 431.33 P
0.28 (ariety; if all of the threads are essentially the same, it is often more con) 187.6 431.33 P
0.28 (v) 474.71 431.33 P
0.28 (enient) 479.56 431.33 P
(to use a parloop.) 108 419.33 T
0.19 (Here there will be separate threads fork) 108 303.33 P
0.19 (ed for each v) 266.79 303.33 P
0.19 (alue of) 319.04 303.33 P
7 F
0.22 ( i) 346.73 303.33 P
5 F
0.19 (and this v) 354.94 303.33 P
0.19 (alue will be passed as a pa-) 393.97 303.33 P
0.14 (rameter to the respecti) 108 291.33 P
0.14 (v) 197.32 291.33 P
0.14 (e thread. The annotation) 202.17 291.33 P
7 F
0.16 (@i) 302.45 291.33 P
5 F
0.14 (after) 317.76 291.33 P
7 F
0.16 (do) 338.72 291.33 P
5 F
0.14 (is part of the Distrib) 352.78 291.33 P
0.14 (uted Extension to) 433.71 291.33 P
-0.11 (be discussed in Section 1.5. It speci\336es that thread 1 is to be started on cluster 1, etc. This mak) 108 279.33 P
-0.11 (es no) 483.28 279.33 P
0.11 (sense on a platform with only one cluster lik) 108 267.33 P
0.11 (e Solaris/1cluster and a run-time error will result from) 286.52 267.33 P
-0.21 (trying to run a distrib) 108 255.33 P
-0.21 (uted code on such a platform. When compiled appropriately) 191.94 255.33 P
-0.21 (, the second e) 429.81 255.33 P
-0.21 (xam-) 483.45 255.33 P
(ple will print its greetings, b) 108 243.33 T
(ut almost certainly not in order) 220.58 243.33 T
(.) 343.63 243.33 T
-0.28 (Suppose that we w) 108 221.33 P
-0.28 (anted to be sure that the Hellos were printed in order without serializing the com-) 182.35 221.33 P
-0.61 (putation. One w) 108 209.33 P
-0.61 (ay w) 170.84 209.33 P
-0.61 (ould be to use a global ARRA) 189.29 209.33 P
-0.61 (Y{STR} inde) 305.14 209.33 P
-0.61 (x) 359.26 209.33 P
-0.61 (ed by the same loop v) 364.11 209.33 P
-0.61 (ariable) 448.3 209.33 P
7 F
-0.68 (i) 477.4 209.33 P
5 F
-0.61 (. Each) 479.62 209.33 P
-0.12 (thread could insert its greeting and the array printed after the parloop completes. Y) 108 197.33 P
-0.12 (ou might w) 436.4 197.33 P
-0.12 (ant to) 481.62 197.33 P
0.49 (try this. Notice that this depends on multiple threads writing to a single object; there is no danger) 108 185.33 P
0.05 (here because each thread writes to a disjoint piece of the array) 108 173.33 P
0.05 (. This \336x) 356.38 173.33 P
0.05 (es the output order) 392.16 173.33 P
0.05 (, b) 466.61 173.33 P
0.05 (ut says) 476.45 173.33 P
-0.32 (nothing about the order of e) 108 161.33 P
-0.32 (x) 217.59 161.33 P
-0.32 (ecution of the threads. In general there is no guarantee on the e) 222.44 161.33 P
-0.32 (x) 469.71 161.33 P
-0.32 (ecution) 474.56 161.33 P
0.14 (order and interlea) 108 149.33 P
0.14 (ving of pSather threads and this can be a signi\336cant problem in constructing reli-) 178.61 149.33 P
-0.04 (able code. The synchronization e) 108 137.33 P
-0.04 (xtensions discussed in the ne) 239.59 137.33 P
-0.04 (xt section help signi\336cantly) 354.82 137.33 P
-0.04 (, b) 464.33 137.33 P
-0.04 (ut it we) 474.08 137.33 P
(still usually f) 108 125.33 T
(all back on kno) 160.13 125.33 T
(wn patterns.) 221.26 125.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 381.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop i::=0.upto!\0503\051 do@i) 144 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     #OUT + \050"Hello World # " + i + '\134n'\051) 178.2 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MAIN) 144 336.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 407.88 129.6 322.13 2 L
V
0 Z
N
489.6 407.88 489.6 322.13 2 L
V
N
129.48 408 489.73 408 2 L
V
N
129.48 322 489.73 322 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "200" 200
%%Page: "201" 201
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Thr) 212.97 710.84 T
(eaded Extension :) 239.34 710.84 T
0 F
(17.2) 310.77 710.84 T
(Realistic Examples Using Thr) 328.5 710.84 T
(eads) 433.78 710.84 T
6 10 Q
(201) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(17.2  Realistic Examples Using Threads) 108 654 T
5 10 Q
-0.13 ( The ICSI pSather group has de) 108 625.31 P
-0.13 (v) 233.07 625.31 P
-0.13 (eloped v) 237.93 625.31 P
-0.13 (arious small and medium sized e) 271.71 625.31 P
-0.13 (xamples for use in testing) 401.74 625.31 P
-0 (and benchmarking the system. Se) 108 613.31 P
-0 (v) 241.88 613.31 P
-0 (eral of these use only the par) 246.73 613.31 P
-0 (, fork, and parloop constructs of the) 361.28 613.31 P
0.17 (threads e) 108 601.31 P
0.17 (xtension and these can serv) 143.84 601.31 P
0.17 (e as additional e) 253.78 601.31 P
0.17 (xamples at this elementary le) 318.84 601.31 P
0.17 (v) 435.91 601.31 P
0.17 (el. One ob) 440.76 601.31 P
0.17 (vious) 482.33 601.31 P
0.34 (benchmark is matrix multiplication <>. The follo) 108 589.31 P
0.34 (wing is the complete code for the parallel part of) 306.31 589.31 P
-0.61 (the e) 108 425.31 P
-0.61 (xample - just a parloop o) 126.4 425.31 P
-0.61 (v) 222.91 425.31 P
-0.61 (er the ro) 227.76 425.31 P
-0.61 (ws of the \336rst multiplicand. This is, of course, v) 259.61 425.31 P
-0.61 (ery nai) 445.64 425.31 P
-0.61 (v) 472.27 425.31 P
-0.61 (e com-) 477.12 425.31 P
-0.35 (pared to the sophisticated loop parallelization of modern FOR) 108 413.31 P
-0.35 (TRAN compilers. F) 352.36 413.31 P
-0.35 (or a v) 431.23 413.31 P
-0.35 (ariety of rea-) 453.06 413.31 P
0.77 (sons be) 108 401.31 P
0.77 (yond the scope of this tutorial, pSather and other OO languages tak) 138.34 401.31 P
0.77 (e an entirely dif) 415.58 401.31 P
0.77 (ferent) 480.68 401.31 P
1.73 (approach to the problems of parallelization. From the OO perspecti) 108 389.31 P
1.73 (v) 392.18 389.31 P
1.73 (e, lo) 397.03 389.31 P
1.73 (w-le) 415.73 389.31 P
1.73 (v) 433.25 389.31 P
1.73 (el optimizations) 438.1 389.31 P
0.47 (should be encsapsulated in classes. F) 108 377.31 P
0.47 (or standard matrix/v) 257.95 377.31 P
0.47 (ector operations, Sather can do no better) 339.84 377.31 P
-0.41 (than the well de) 108 365.31 P
-0.41 (v) 170.11 365.31 P
-0.41 (eloped FOR) 174.96 365.31 P
-0.41 (TRAN packages such as BLAS and does not try) 222.56 365.31 P
-0.41 (. ICSI Sather compilers) 411.36 365.31 P
(from 1.1 on pro) 108 353.31 T
(vide a FOR) 170.62 353.31 T
(TRAN interf) 216.13 353.31 T
(ace which is for just such purposes.) 267.41 353.31 T
0.09 (From the perspecti) 108 331.31 P
0.09 (v) 182.91 331.31 P
0.09 (e of the tutorial, the interesting thing is ho) 187.76 331.31 P
0.09 (w man) 356.26 331.31 P
0.09 (y standard benchmarks can be) 383.13 331.31 P
-0.12 (coded using only the threaded e) 108 319.31 P
-0.12 (xtension. Here is another typical e) 234.16 319.31 P
-0.12 (xample, the control loop of a pro-) 370.04 319.31 P
(gram to compute heat \337o) 108 307.31 T
(w e) 207.74 307.31 T
(xpansion o) 221.75 307.31 T
(v) 265.21 307.31 T
(er time.<>) 270.06 307.31 T
-0.17 (Here the parloop runs o) 108 128.31 P
-0.17 (v) 201.57 128.31 P
-0.17 (er the number of clusters in the current platform, breaking up the computa-) 206.43 128.31 P
0.43 (tion into that number of pieces by columns of the underlying) 108 116.31 P
7 F
0.48 (heat_of) 358 116.31 P
5 F
0.43 ( array) 391.36 116.31 P
0.43 (. Ag) 414.18 116.31 P
0.43 (ain, because there) 431.78 116.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MMULT is) 144 560.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   mult\050a,b,c:MATRIX{FLT}\051 is) 144 551.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop x::=b.rows.times!;) 144 542.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      do) 144 533.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop y::=b.rows.times!;) 178.2 524.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        loop z::=b.cols.times!;) 178.2 515.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        a[y,x]:=a[y,x]+b[z,x]*c[y,z];) 178.2 506.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        end;) 178.2 497.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 178.2 488.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 479.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 470.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 461.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   heat_step is) 144 278.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      cl_size:=cluster_size;   -- just for formating) 144 269.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      t::=t1;) 144 260.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      t1:=t2;) 144 251.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      t2:=t;) 144 242.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop p::=cl_size.times!;) 144 233.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      do) 144 224.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     loop x::=\050\050cols*p\051/cl_size\051.upto!\050cols*\050p+1\051/cl_size-1\051;) 178.2 215.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        loop y::=rows!;) 178.2 206.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(           t1[x,y]:=heat_of\050t2,x,y\051;) 178.2 197.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        end;) 178.2 188.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        end;) 144 179.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 170.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 161.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 577.85 129.6 447.1 2 L
V
0.25 H
0 Z
N
489.6 577.85 489.6 447.1 2 L
V
N
129.48 577.98 489.73 577.98 2 L
V
N
129.48 446.98 489.73 446.98 2 L
V
N
129.6 295.85 129.6 147.1 2 L
V
N
489.6 295.85 489.6 147.1 2 L
V
N
129.48 295.98 489.73 295.98 2 L
V
N
129.48 146.98 489.73 146.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "201" 201
%%Page: "202" 202
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(202) 108 710.84 T
8 8 Q
(The Thr) 195.83 710.84 T
(eaded Extension :) 222.2 710.84 T
0 F
(17.2 Realistic Examples Using Thr) 293.63 710.84 T
(eads) 416.65 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.17 (are no interactions and each thread treats a disjoint subarray) 108 659.33 P
-0.17 (, life is easy) 345.53 659.33 P
-0.17 (. This simplistic w) 392.15 659.33 P
-0.17 (ay of par-) 465.46 659.33 P
0 (titioning the problem is appropriate for a platform lik) 108 647.33 P
0 (e Solaris/smp where clusters are separate pro-) 320.69 647.33 P
(cessors sharing ph) 108 635.33 T
(ysical memory) 181.27 635.33 T
(. W) 239.78 635.33 T
(e will later see some more sophisticated partitioning.) 253.42 635.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "202" 202
%%Page: "203" 203
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 201.93 710.84 T
(onization Extension :) 243.09 710.84 T
0 F
(18.1) 322.71 710.84 T
(Barr) 340.44 710.84 T
(ier Synchr) 355.47 710.84 T
(onization and) 392.35 710.84 T
7 F
(sync) 447.62 710.84 T
6 10 Q
(203) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (The Synchr) 108 642 S
-0.25 (onization) 290.74 642 S
-0.25 (Extension) 108 600 S
108 460.98 504 464 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 462.49 540 462.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(18.1   Barrier Sync) 108 470 T
(hr) 264.91 470 T
(onization and) 282.55 470 T
7 F
(sync) 403.56 470 T
5 10 Q
0.5 (The simplest synchronization primiti) 108 441.31 P
0.5 (v) 256.76 441.31 P
0.5 (e is the) 261.61 441.31 P
7 F
0.56 (sync) 293.95 441.31 P
5 F
0.5 ( statement, which causes all the threads fork) 314.51 441.31 P
0.5 (ed) 494.56 441.31 P
-0.14 (within a par or parloop block to suspend until e) 108 429.31 P
-0.14 (v) 295.69 429.31 P
-0.14 (ery thread in the block has terminated or is also e) 300.54 429.31 P
-0.14 (x-) 495.67 429.31 P
0.17 (ecuting a) 108 417.31 P
7 F
0.19 (sync) 147.21 417.31 P
5 F
0.17 ( command. This is called barrier synchronization in the computational science liter-) 167.77 417.31 P
0.6 (ature for ob) 108 405.31 P
0.6 (vious reasons. One important feature of the) 155.7 405.31 P
7 F
0.67 (sync) 335.43 405.31 P
5 F
0.6 ( statement, in contrast with stopping) 355.99 405.31 P
0.45 (and restarting the threads, is that the participating threads all retain their state. After all threads in) 108 393.31 P
-0.38 (the block meet the sync criterion, the unterminated ones are resumed. One basic use of the sync con-) 108 381.31 P
-0.04 (struct is to assure that all threads in a parloop are set up before an) 108 369.31 P
-0.04 (y of them e) 368.97 369.31 P
-0.04 (x) 413.98 369.31 P
-0.04 (ecute; the dining phi-) 418.83 369.31 P
0.31 (losophers e) 108 357.31 P
0.31 (xample in Section 1.3.3 does this. W) 153.43 357.31 P
0.31 (e will see another use of the sync command in the) 301.45 357.31 P
0.51 (chunk maximum e) 108 345.31 P
0.51 (xample of the ne) 183.31 345.31 P
0.51 (xt section. A realistic e) 251.61 345.31 P
0.51 (xample can be found in the benchmark) 345.43 345.31 P
-0.49 (program <>. The ne) 108 333.31 P
-0.49 (xt tw) 186.53 333.31 P
-0.49 (o sections introduce more sophisticated control mechanisms. The sync con-) 206.22 333.31 P
0.6 (struct just has a collection of threads w) 108 321.31 P
0.6 (ait for one another) 267.91 321.31 P
0.6 (. The lock statement of the ne) 342.75 321.31 P
0.6 (xt section) 464.79 321.31 P
0.08 (pro) 108 309.31 P
0.08 (vides v) 121.18 309.31 P
0.08 (arious w) 149.62 309.31 P
0.08 (ays to control access to data among threads, b) 183.75 309.31 P
0.08 (ut is still passi) 367.19 309.31 P
0.08 (v) 424.13 309.31 P
0.08 (e. Acti) 428.98 309.31 P
0.08 (v) 455.46 309.31 P
0.08 (e signaling) 460.31 309.31 P
(between threads requires the GA) 108 297.31 T
(TE construct, described in Section 1.4.) 237.96 297.31 T
4 18 Q
(18.2  The) 108 244.98 T
7 F
(lock) 190.04 244.98 T
4 F
( Statement and the MUTEX) 222.05 244.98 T
108 214.95 504 217.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 216.46 540 216.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(Class) 108 223.98 T
5 10 Q
0.45 (All of the other synchronization constructions in pSather use v) 108 195.29 P
0.45 (arious forms of the) 362.01 195.29 P
7 F
0.5 (lock) 442.11 195.29 P
5 F
0.45 (statement.) 463.17 195.29 P
0.16 (W) 108 183.29 P
0.16 (e will start with the simplest form of the lock construct and gradually increase the comple) 116.64 183.29 P
0.16 (xity of) 477.45 183.29 P
-0.2 (both the form of lock statement and the classes of objects to be lock) 108 171.29 P
-0.2 (ed. The basic form with a single) 376.62 171.29 P
0.34 (unconditional mutual-e) 108 159.29 P
0.34 (xclusion lock suf) 201.24 159.29 P
0.34 (\336ces for man) 269.99 159.29 P
0.34 (y cases and should be considered \336rst. In the) 322.72 159.29 P
-0.27 (follo) 108 147.29 P
-0.27 (wing e) 126.64 147.29 P
-0.27 (xample, we suppose that a lar) 153.16 147.29 P
-0.27 (ge v) 269.91 147.29 P
-0.27 (ector has been stored as a number of separate "chunks") 286.43 147.29 P
0.43 (using a library class D) 108 135.29 P
0.43 (VEC. W) 198.76 135.29 P
0.43 (e talk later about the design of such distrib) 232.83 135.29 P
0.43 (uted classes, which uses) 406.06 135.29 P
0.07 (the con) 108 123.29 P
0.07 (v) 136.83 123.29 P
0.07 (ention of an iterator) 141.68 123.29 P
0.07 (,) 220.65 123.29 P
7 F
0.08 (chunks!) 225.73 123.29 P
5 F
0.07 (, for iterating the separate pieces of a distrib) 260.19 123.29 P
0.07 (uted object, such) 436.36 123.29 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "203" 203
%%Page: "204" 204
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(204) 108 710.84 T
8 8 Q
(The Synchr) 169.22 710.84 T
(onization Extension :) 210.38 710.84 T
0 F
(18.2 The) 290.01 710.84 T
7 F
(loc) 323.44 710.84 T
(k) 333.5 710.84 T
0 F
( Statement and the MUTEX Class) 337.5 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.6 (as a D) 108 659.33 P
-0.6 (VEC. The code belo) 131.38 659.33 P
-0.6 (w is from an arti\336cial e) 210.97 659.33 P
-0.6 (xample where the task is to print both the maximum) 300.84 659.33 P
0.44 (v) 108 647.33 P
0.44 (alue in the) 112.75 647.33 P
7 F
0.48 (DVEC vec) 158.22 647.33 P
5 F
0.44 (and the number of instances of it in each chunk. This mak) 208.09 647.33 P
0.44 (es prototypical) 444.4 647.33 P
(uses of a) 108 635.33 T
7 F
(MUTEX big_lk) 145.49 635.33 T
5 F
(, the lock statement and the sync command of Section 1.3.1.) 209.39 635.33 T
0.42 (The) 108 294.33 P
7 F
0.46 (parloop) 126.47 294.33 P
5 F
0.42 ( forks a thread for each chunk of data and also pro) 159.82 294.33 P
0.42 (vides a consecuti) 365.01 294.33 P
0.42 (v) 433.91 294.33 P
0.42 (e inde) 438.76 294.33 P
0.42 (x for each) 463.19 294.33 P
-0 (thread/chunk pair) 108 282.33 P
-0 (. The v) 177.71 282.33 P
-0 (ariables) 205.49 282.33 P
7 F
-0.01 (ch, i, dx, m, and ct) 239.09 282.33 P
5 F
-0 ( are all instantiated separately for each thread.) 320.21 282.33 P
-0.35 (Each thread computes the maximum v) 108 270.33 P
-0.35 (alue in its chunk and its multiplicity) 259.57 270.33 P
-0.35 (. The w) 400.7 270.33 P
-0.35 (ay we ha) 430.16 270.33 P
-0.35 (v) 464.79 270.33 P
-0.35 (e chosen) 469.64 270.33 P
0.15 (to calculate the global maximum uses a global v) 108 258.33 P
0.15 (ariable,) 301.73 258.33 P
7 F
0.17 (big) 334.1 258.33 P
5 F
0.15 (, and the accompan) 347.43 258.33 P
0.15 (ying mute) 424.94 258.33 P
0.15 (x,) 465.23 258.33 P
7 F
0.17 (big_lk) 475.38 258.33 P
5 F
0.15 (.) 501.5 258.33 P
-0.52 (After each thread computes its local maximum, it compares it with the current global maximum,) 108 246.33 P
7 F
-0.58 (big) 488.16 246.33 P
5 F
-0.52 (.) 501.5 246.33 P
(If the local one is bigger) 108 234.34 T
(, it should become the global maximum.) 205.08 234.34 T
0.23 (But there is a synchronization problem. It could happen that se) 108 212.34 P
0.23 (v) 360.84 212.34 P
0.23 (eral threads simultaneously ha) 365.69 212.34 P
0.23 (v) 487.54 212.34 P
0.23 (e a) 492.39 212.34 P
-0.4 (local maximum lar) 108 200.34 P
-0.4 (ger than the current global winner) 182.57 200.34 P
-0.4 (. Using the lock statement ensures that only one) 315.83 200.34 P
-0.15 (thread at a time will try to update) 108 188.34 P
7 F
-0.17 (big.) 242.33 188.34 P
5 F
-0.15 ( An additional subtlety is that, e) 258.45 188.34 P
-0.15 (v) 384.79 188.34 P
-0.15 (en after acquiring unique ac-) 389.64 188.34 P
-0.4 (cess to) 108 176.34 P
7 F
-0.44 (big) 136.65 176.34 P
5 F
-0.4 (, a thread can not assume that its local maximum still e) 149.99 176.34 P
-0.4 (xceeds the global one. Between the) 364.9 176.34 P
0.67 (time a thread checks the relati) 108 164.34 P
0.67 (v) 230.78 164.34 P
0.67 (e v) 235.63 164.34 P
0.67 (alues and when it acquires the lock, another thread might ha) 247.99 164.34 P
0.67 (v) 494.71 164.34 P
0.67 (e) 499.56 164.34 P
0.72 (changed) 108 152.34 P
7 F
0.8 (big) 144.54 152.34 P
5 F
0.72 (. This is the kind of problem that mak) 157.88 152.34 P
0.72 (es parallel programming trick) 314.4 152.34 P
0.72 (y and there is no) 435.01 152.34 P
-0.05 (good w) 108 140.34 P
-0.05 (ay around it while preserving performance. A helpful heuristic is to think about a thread be-) 137.57 140.34 P
(ing interrupted inde\336nitely between an) 108 128.34 T
(y tw) 262.83 128.34 T
(o statements.) 280.23 128.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      vec:DVEC:=#DVEC\0503,4\051;) 144 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( -- 3 chunks of size 4) 273.6 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      counts:ARRAY{INT}:=#\050vec.num_chunks\051; -- max of chunk) 144 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      big::= -FLT::infinity;) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- initialize) 278.4 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      big_lk::=#MUTEX;) 144 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      vec.init;) 144 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- kludge for example only) 216 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop) 144 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   ch::=vec.chunks!;) 178.2 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Iterate over each chunk) 274.2 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   idx::=0.up!;) 178.2 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Places for result of each thread) 250.2 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   do;) 178.2 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      m::= -FLT::infinity;) 178.2 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ct::=0;) 178.2 489.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop) 178.2 480.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        el::=ch.elt!;) 178.2 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Iterate over elements,1) 279 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        if m=el then ct:=ct+1) 178.2 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        elsif m<el then m:=el; ct:=1) 178.2 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        end;) 178.2 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 178.2 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   if big<m then lock big_lk then big:=big.max\050m\051 end end;) 178.2 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   sync;) 178.2 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Wait for all threads) 216.6 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   if m=big then counts[idx]:=ct end;) 178.2 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end; -- parloop) 144 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    #OUT + "The maximum value is: " + big + '\134n';) 144 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    loop i::=0.for!\050vec.num_chunks\051 ;) 144 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   #OUT + "Chunk "+i + " has "+counts[i]+" instances"+'\134n';) 178.2 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 144 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end; -- main) 144 336.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MAIN) 144 327.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 313.13 2 L
V
0 Z
N
489.6 623.88 489.6 313.13 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 313 489.73 313 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "204" 204
%%Page: "205" 205
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 186.36 710.84 T
(onization Extension :) 227.52 710.84 T
0 F
(18.2) 307.14 710.84 T
(The) 324.87 710.84 T
7 F
(loc) 340.58 710.84 T
(k) 350.64 710.84 T
0 F
( Statement and the MUTEX Class) 354.64 710.84 T
6 10 Q
(205) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.53 ( No) 108 659.33 P
-0.53 (w) 121.94 659.33 P
-0.53 (, after each thread has tried its luck at being the global maximum, the) 128.51 659.33 P
-0.53 (y all w) 398.39 659.33 P
-0.53 (ait at the) 424.45 659.33 P
7 F
-0.59 (sync) 459.81 659.33 P
5 F
-0.53 ( state-) 480.37 659.33 P
0.01 (ment barrier for the others. When all are \336nished, the true global maximum has been found and the) 108 647.33 P
-0.41 (v) 108 635.33 P
-0.41 (arious threads can output the number of occurrences of this in their chunk. Because we used a) 112.75 635.33 P
7 F
-0.46 (sync) 483.44 635.33 P
5 F
-0.17 (statement, all of the threads resume with conte) 108 623.33 P
-0.17 (xt retained, including the local count,) 292.75 623.33 P
7 F
-0.19 (ct) 443.39 623.33 P
5 F
-0.17 (, which is the) 451.17 623.33 P
0.46 (desired result. Rather than print the results in e) 108 611.33 P
0.46 (x) 298.42 611.33 P
0.46 (ecution order) 303.27 611.33 P
0.46 (, the) 356.37 611.33 P
0.46 (y are all stored in a global array) 373.89 611.33 P
0.01 (which is printed after the parloop. W) 108 599.33 P
0.01 (e will see man) 254.75 599.33 P
0.01 (y more e) 312.13 599.33 P
0.01 (xamples of the MUTEX, sync and lock) 347 599.33 P
0.26 (constructs. Section 1.3.4 discusses when one w) 108 587.33 P
0.26 (ould choose a read-write lock, R) 298.04 587.33 P
0.26 (W_LOCK, instead) 428.75 587.33 P
(of a MUTEX to control access to a global object.) 108 575.33 T
4 12 Q
(18.2.1   Memor) 108 534 T
(y Consistenc) 190.82 534 T
(y) 265.39 534 T
(, Round One) 271.1 534 T
5 10 Q
-0.12 (The synchronization e) 108 511.33 P
-0.12 (xtension of pSather plays another important role in the language, b) 196.48 511.33 P
-0.12 (ut one that) 462.02 511.33 P
0.7 (usually remains implicit. What we ha) 108 499.33 P
0.7 (v) 260.73 499.33 P
0.7 (e discussed abo) 265.58 499.33 P
0.7 (v) 329.04 499.33 P
0.7 (e is ho) 333.89 499.33 P
0.7 (w a MUTEX can k) 361.15 499.33 P
0.7 (eep tw) 439.94 499.33 P
0.7 (o threads) 466.92 499.33 P
0.96 (from making con\337icting updates to the same object. A more subtle problem can arise when one) 108 487.33 P
-0.17 (thread updates a v) 108 475.33 P
-0.17 (alue and one or more other threads w) 179.72 475.33 P
-0.17 (ant to use the ne) 326.99 475.33 P
-0.17 (w v) 391.05 475.33 P
-0.17 (alue; ho) 405.35 475.33 P
-0.17 (w can the) 436.87 475.33 P
-0.17 (y kno) 474.7 475.33 P
-0.17 (w) 496.78 475.33 P
0.79 (when the write has completed? Essentially the same problem arises in modern high performance) 108 463.33 P
-0.35 (processors as an aspect of cache consistenc) 108 451.33 P
-0.35 (y and is the subject of considerable w) 278.48 451.33 P
-0.35 (ork<>. F) 426.2 451.33 P
-0.35 (or pSather) 460.87 451.33 P
-0.35 (,) 501.5 451.33 P
-0.51 (the critical requirement is to supply a clean assignment semantics that the user can rely upon and that) 108 439.33 P
-0.12 (all compilers must implement.  P) 108 427.33 P
-0.12 (art of the semantics is that all assignments are atomic, it will ne) 239.48 427.33 P
-0.12 (v) 491.38 427.33 P
-0.12 (er) 496.23 427.33 P
-0.29 (happen that only part of an write command is e) 108 415.33 P
-0.29 (x) 293.85 415.33 P
-0.29 (ecuted. Furthermore, Sather guarantees that an) 298.7 415.33 P
-0.29 (y up-) 483.46 415.33 P
-0.33 (date e) 108 403.33 P
-0.33 (x) 131.12 403.33 P
-0.33 (ecuted by a thread will al) 135.97 403.33 P
-0.33 (w) 235.02 403.33 P
-0.33 (ays be observ) 242.14 403.33 P
-0.33 (able by that thread. What is trickier is ho) 295.66 403.33 P
-0.33 (w to specify) 455.78 403.33 P
(e) 108 391.33 T
(xactly when other threads will kno) 112.29 391.33 T
(w about such an update.) 250.63 391.33 T
0.28 (T) 108 369.33 P
0.28 (o understand this, we need to de\336ne notions of) 113.31 369.33 P
7 F
0.31 (import) 304.72 369.33 P
5 F
0.28 ( and) 332.5 369.33 P
7 F
0.31 (export) 352.5 369.33 P
5 F
0.28 (. Both of these are a) 380.29 369.33 P
0.28 (v) 461.48 369.33 P
0.28 (ailable as) 466.23 369.33 P
0.17 (e) 108 357.33 P
0.17 (xplicit commands in the SYS class, b) 112.29 357.33 P
0.17 (ut using them directly is unusual. An e) 262.26 357.33 P
0.17 (xample using e) 417.71 357.33 P
0.17 (xplicit) 478.44 357.33 P
7 F
-0.08 (import) 108 345.33 P
5 F
-0.07 ( and) 135.78 345.33 P
7 F
-0.08 (export) 155.08 345.33 P
5 F
-0.07 ( statements is sho) 182.87 345.33 P
-0.07 (wn in Section 1.4.2. An) 252.69 345.33 P
7 F
-0.08 (export) 349.57 345.33 P
5 F
-0.07 (. operation suspends the current) 377.36 345.33 P
0.4 (thread until all of the updates that it has done are publicly kno) 108 333.33 P
0.4 (wn.  An) 360.27 333.33 P
7 F
0.44 (import) 395.9 333.33 P
5 F
0.4 (operation) 426.9 333.33 P
0.4 (suspends) 467.89 333.33 P
0.15 (the e) 108 321.33 P
0.15 (x) 127.16 321.33 P
0.15 (ecuting thread until all publicly kno) 132.01 321.33 P
0.15 (wn updates are made in its conte) 275.56 321.33 P
0.15 (xt. It follo) 406.84 321.33 P
0.15 (ws that an up-) 447.17 321.33 P
0.13 (date is guaranteed to be seen by all threads that do an) 108 309.33 P
7 F
0.14 (import) 325.07 309.33 P
5 F
0.13 ( after the updating thread has done an) 352.85 309.33 P
7 F
0.69 (export) 108 297.33 P
5 F
0.62 (. It turns out that this can be  implemented ef) 135.79 297.33 P
0.62 (\336ciently on most  platforms, <> tells all.This) 320.88 297.33 P
0.72 (often doesn\325) 108 285.33 P
0.72 (t help the programer that much because the he/she w) 158.25 285.33 P
0.72 (ould still seem to need to kno) 374.9 285.33 P
0.72 (w) 496.78 285.33 P
-0.17 (when to issue these import and e) 108 273.33 P
-0.17 (xport commands. Ho) 237.38 273.33 P
-0.17 (we) 320.95 273.33 P
-0.17 (v) 332.36 273.33 P
-0.17 (er) 337.21 273.33 P
-0.17 (, pSather already has v) 344.58 273.33 P
-0.17 (arious synchroni-) 434.46 273.33 P
0.37 (zation constructs lik) 108 261.33 P
0.37 (e the par statment of  the pre) 189.18 261.33 P
0.37 (vious section and the lock statement described in) 305.63 261.33 P
0.32 (this section. The k) 108 249.33 P
0.32 (e) 182.18 249.33 P
0.32 (y idea is to associate implicit imports and e) 186.47 249.33 P
0.32 (xports with the appropriate pSather) 361.64 249.33 P
0.41 (constructs. These are spelled out in a chart on page 82 of the language description. The important) 108 237.33 P
-0.19 (point for no) 108 225.33 P
-0.19 (w is that one can not assume an) 154.58 225.33 P
-0.19 (ything about the relati) 279.45 225.33 P
-0.19 (v) 366.68 225.33 P
-0.19 (e timing of v) 371.53 225.33 P
-0.19 (arious threads that is) 422.09 225.33 P
0.25 (not speci\336ed by some synchronization constructs. But, gi) 108 213.33 P
0.25 (v) 338.08 213.33 P
0.25 (en the e) 342.93 213.33 P
0.25 (xplicit synchronization, your in-) 374.38 213.33 P
(tuition about memory consistenc) 108 201.33 T
(y is preserv) 238.68 201.33 T
(ed.) 284.63 201.33 T
4 12 Q
(18.2.2   Conjunctive Loc) 108 160 T
(king) 244.48 160 T
5 10 Q
-0.4 (One of the fundamental issues in synchronization is the treatment of multiple locks. A v) 108 137.33 P
-0.4 (ery common) 454.13 137.33 P
-0.19 (cause of deadlock is when tw) 108 125.33 P
-0.19 (o or more threads compete for multiple locks. There are theoretical re-) 224.45 125.33 P
-0.23 (sults that pro) 108 113.33 P
-0.23 (v) 159.05 113.33 P
-0.23 (e that no deadlock can arise from this situation if all the locks are linearly ordered and) 163.9 113.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "205" 205
%%Page: "206" 206
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(206) 108 710.84 T
8 8 Q
(The Synchr) 169.22 710.84 T
(onization Extension :) 210.38 710.84 T
0 F
(18.2 The) 290.01 710.84 T
7 F
(loc) 323.44 710.84 T
(k) 333.5 710.84 T
0 F
( Statement and the MUTEX Class) 337.5 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.05 (threads al) 108 659.33 P
0.05 (w) 146.55 659.33 P
0.05 (ays acquire locks according to this order) 153.68 659.33 P
0.05 (. Sometimes the pSather programmer will need) 315.08 659.33 P
-0.04 (to carefully arrange the \336x) 108 647.33 P
-0.04 (ed order) 213.76 647.33 P
-0.04 (, b) 246.36 647.33 P
-0.04 (ut most cases \050and a good bit more\051 are handled automatically) 256.12 647.33 P
-0.17 (by the conjuncti) 108 635.33 P
-0.17 (v) 171.85 635.33 P
-0.17 (e lock construct. This is illustrated with the classical dining philosophers problem.) 176.7 635.33 P
0.27 (The setting is a round table with one chopstick between each tw) 108 623.33 P
0.27 (o diners. Since tw) 366.66 623.33 P
0.27 (o chopsticks are) 439.03 623.33 P
(needed for eating the diners need some w) 108 611.33 T
(ay to manage the required resources.) 273.69 611.33 T
0.19 (This e) 108 356.33 P
0.19 (xample is complete and can be run and modi\336ed. W) 132.76 356.33 P
0.19 (e use a separate MUTEX for each chop-) 341.93 356.33 P
0.58 (stick and it is natural to mak) 108 344.33 P
0.58 (e these an array) 224.7 344.33 P
0.58 (. The main routine initializes this array and starts the) 288.26 344.33 P
0.13 (parloop which forks of) 108 332.33 P
0.13 (f a separate thread for each philosopher) 199.5 332.33 P
0.13 (. The sync command ensures that all) 357.43 332.33 P
-0.6 (the threads are established before an) 108 320.33 P
-0.6 (y start running;  this is often needed for f) 250.06 320.33 P
-0.6 (airness. The conjuncti) 408.13 320.33 P
-0.6 (v) 494.71 320.33 P
-0.6 (e) 499.56 320.33 P
-0.32 (lock is in the code for each philosopher) 108 308.33 P
-0.32 (. Each one tries to conjuncti) 262.64 308.33 P
-0.32 (v) 372.42 308.33 P
-0.32 (ely lock the mute) 377.27 308.33 P
-0.32 (x to its left and) 445.3 308.33 P
-0.35 (its right and, when it succeeds, prints its message and ends the lock statement, freeing the locks. The) 108 296.33 P
-0.34 (pSather lock implementation guarantees the absence of deadlock \050or li) 108 284.33 P
-0.34 (v) 386.02 284.33 P
-0.34 (elock\051 among the competing) 390.87 284.33 P
0.19 (threads and also a weak form of f) 108 272.33 P
0.19 (airness. No thread will compete inde\336nitely for an achie) 242.82 272.33 P
0.19 (v) 468.79 272.33 P
0.19 (able set) 473.54 272.33 P
-0.05 (of locks without e) 108 260.33 P
-0.05 (v) 179.54 260.33 P
-0.05 (entually winning and getting to e) 184.39 260.33 P
-0.05 (x) 315.92 260.33 P
-0.05 (ecute. Although it is not illustrated here, there) 320.77 260.33 P
0.34 (is also an e) 108 248.33 P
0.34 (xplicit unlock statement that can be used to release one of the conjuncti) 153.03 248.33 P
0.34 (v) 442.38 248.33 P
0.34 (e locks before) 447.23 248.33 P
0.25 (the entire body completes. More details on all this can be found in Claudio<>. Se) 108 236.33 P
0.25 (v) 436.46 236.33 P
0.25 (eral of our later) 441.31 236.33 P
(e) 108 224.33 T
(xamples rely on conjuncti) 112.29 224.33 T
(v) 215.64 224.33 T
(e locks so we w) 220.49 224.33 T
(on\325) 283.71 224.33 T
(t bother you with more at this point.) 296.86 224.33 T
4 12 Q
(18.2.3   Read-Write Loc) 108 183 T
(ks, three kinds) 239.14 183 T
5 10 Q
-0.25 (So f) 108 160.33 P
-0.25 (ar we ha) 124.04 160.33 P
-0.25 (v) 157.21 160.33 P
-0.25 (e seen only mutual e) 162.06 160.33 P
-0.25 (xclusion \050MUTEX\051 locks. F) 243.12 160.33 P
-0.25 (or man) 354.98 160.33 P
-0.25 (y applications, it is v) 382.63 160.33 P
-0.25 (ery useful) 464.54 160.33 P
0.84 (to ha) 108 148.33 P
0.84 (v) 128.36 148.33 P
0.84 (e other forms of locking, such as the classical read-write locks. The idea is to allo) 133.21 148.33 P
0.84 (w man) 471.37 148.33 P
0.84 (y) 499 148.33 P
-0.42 (threads to lock as a reader) 108 136.33 P
-0.42 (, b) 209.61 136.33 P
-0.42 (ut to restrict modi\336cation \050writer\051 to one thread at a time. This is another) 218.99 136.33 P
4.32 (classic concept and is captured in pSather by the classes) 108 124.33 P
7 F
4.8 (RW_LOCK, WR_LOCK) 377.8 124.33 P
5 F
4.32 (,and) 487.06 124.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 569.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr chopsticks:ARRAY{MUTEX}; -- need two adjacent ones to eat) 144 560.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 542.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      chopsticks:=#\0507\051;) 144 533.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop chopsticks.set!\050#MUTEX\051 end;) 144 524.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop i::=0.upto!\0506\051) 144 506.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      do  sync;) 144 497.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- wait for all to start) 220.8 497.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       philosopher\050i\051) 178.2 488.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- parloop;) 144 479.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- main) 144 470.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   philosopher\050k:INT\051 is) 144 452.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     loop 3.times!;) 144 443.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     lock chopsticks[k], chopsticks[\050k+1\051.mod\0507\051]) 178.2 434.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     then #OUT + \050 "philosopher  " + k + "  is eating.\134n" \051) 178.2 425.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end; -- lock) 178.2 416.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end; -- loop) 144 407.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- philosopher) 144 398.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- MAIN) 144 389.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 577.88 129.6 375.13 2 L
V
0 Z
N
489.6 577.88 489.6 375.13 2 L
V
N
129.48 578 489.73 578 2 L
V
N
129.48 375 489.73 375 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "206" 206
%%Page: "207" 207
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 186.36 710.84 T
(onization Extension :) 227.52 710.84 T
0 F
(18.2) 307.14 710.84 T
(The) 324.87 710.84 T
7 F
(loc) 340.58 710.84 T
(k) 350.64 710.84 T
0 F
( Statement and the MUTEX Class) 354.64 710.84 T
6 10 Q
(207) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
7 F
0 X
-0.09 (FRW_LOCK) 108 659.33 P
5 F
-0.08 (. There are also a number of other kinds of lock objects in pSather and all of them are) 163.56 659.33 P
(subtypes of the b) 108 647.33 T
(uilt-in abstract class) 175.85 647.33 T
7 F
($LOCK.) 258.34 647.33 T
5 F
-0.2 (Consider ag) 113.11 625.33 P
-0.2 (ain the e) 160.91 625.33 P
-0.2 (xample of Section 1.3.2 that computed the number of occurrences of the max-) 194.24 625.33 P
-0.45 (imum v) 108 613.33 P
-0.45 (alue in each chunk of a distrib) 138.14 613.33 P
-0.45 (uted v) 255.75 613.33 P
-0.45 (ector) 279.87 613.33 P
-0.45 (. The global maximum,) 299.31 613.33 P
7 F
-0.5 (big) 393.6 613.33 P
5 F
-0.45 (, w) 406.94 613.33 P
-0.45 (as protected by a lock) 418.61 613.33 P
7 F
(big_lk) 108 601.33 T
5 F
(:MUTEX and accessed using the statement:) 134.12 601.33 T
7 F
(if big<m then lock big_lk then big:=big.max\050m\051 end end;) 108 579.33 T
5 F
0.02 (The \336rst conditional did not need to be lock) 108 557.33 P
0.02 (ed because the test is atomic. No) 283.02 557.33 P
0.02 (w suppose instead that) 413.68 557.33 P
0.1 (we needed to calculate the number of occurrences of the second lar) 108 545.33 P
0.1 (gest v) 377.4 545.33 P
0.1 (alue rather than the maxi-) 400.86 545.33 P
0.06 (mum. The ob) 108 533.33 P
0.06 (vious code for this ag) 161.58 533.33 P
0.06 (ain  has each chunk thread compare its local v) 247.87 533.33 P
0.06 (alues ag) 432.27 533.33 P
0.06 (ainst both) 464.77 533.33 P
0 (big and the second v) 108 521.33 P
0 (alue, say) 189.97 521.33 P
7 F
0 (next) 227.47 521.33 P
5 F
0 (. The problem is that this multiple test is not atomic and can\325) 246.37 521.33 P
0 (t be) 489.28 521.33 P
0.3 (done unprotected by a lock. But we don\325) 108 509.33 P
0.3 (t need e) 272.68 509.33 P
0.3 (xclusi) 304.24 509.33 P
0.3 (v) 327.88 509.33 P
0.3 (e access to) 332.73 509.33 P
7 F
0.34 (big) 378.89 509.33 P
5 F
0.3 ( and) 392.23 509.33 P
7 F
0.34 (next) 412.27 509.33 P
5 F
0.3 ( for checking pur-) 431.17 509.33 P
0.38 (poses, just a guarantee that no changes will occur during our multiple tests. Enter the WR_LOCK) 108 497.33 P
2.21 (construct. Suppose that we modify the e) 108 485.33 P
2.21 (xample of 1.3.2 to ha) 281.39 485.33 P
2.21 (v) 375.04 485.33 P
2.21 (e a second FL) 379.89 485.33 P
2.21 (T) 441.43 485.33 P
2.21 (,) 446.8 485.33 P
7 F
2.46 (next,) 454.01 485.33 P
5 F
2.21 ( and a) 475.69 485.33 P
(WR_LOCK,) 108 473.33 T
7 F
(next_lk) 161.33 473.33 T
5 F
(. Then the global update code fragment becomes:) 193.01 473.33 T
1.96 (Actually) 108 348.33 P
1.96 (, testing just) 141.79 348.33 P
7 F
2.17 (m) 198.78 348.33 P
5 F
1.96 (>) 207.11 348.33 P
7 F
2.17 (next) 212.75 348.33 P
5 F
1.96 ( w) 231.65 348.33 P
1.96 (ould suf) 243.22 348.33 P
1.96 (\336ce, b) 277.43 348.33 P
1.96 (ut we will ignore this. Not only does the class) 303.63 348.33 P
7 F
0.29 (WR_LOCK) 108 336.33 P
5 F
0.27 ( subtype from $) 157.45 336.33 P
7 F
0.29 (LOCK) 221.3 336.33 P
5 F
0.27 ( b) 248.53 336.33 P
0.27 (ut it de\336nes tw) 256.09 336.33 P
0.27 (o methods,) 315.96 336.33 P
7 F
0.29 (reader) 362.88 336.33 P
5 F
0.27 ( and) 391.78 336.33 P
7 F
0.29 (writer) 411.75 336.33 P
5 F
0.27 (, that ha) 435.79 336.33 P
0.27 (v) 468.06 336.33 P
0.27 (e return) 472.91 336.33 P
0.03 (type $LOCK. There are se) 108 324.33 P
0.03 (v) 213.68 324.33 P
0.03 (eral other methods with return type $) 218.53 324.33 P
7 F
0.04 (LOCK) 367.04 324.33 P
5 F
0.03 ( and the) 394.27 324.33 P
0.03 (y play an important) 425.85 324.33 P
-0.27 (role in pSather) 108 312.33 P
-0.27 (. Here the) 165.8 312.33 P
7 F
-0.3 (reader) 206.65 312.33 P
5 F
-0.27 ( lock protects the tw) 235.55 312.33 P
-0.27 (o tests from changes. An) 315.48 312.33 P
-0.27 (y attempt to write-lock) 413.42 312.33 P
0.13 (the v) 108 300.33 P
0.13 (ariable) 127.6 300.33 P
7 F
0.15 (next_lk) 157.45 300.33 P
5 F
0.13 ( will w) 189.12 300.33 P
0.13 (ait until all reads ha) 217.07 300.33 P
0.13 (v) 296.28 300.33 P
0.13 (e completed. The local) 301.13 300.33 P
7 F
0.15 (BOOL) 395.25 300.33 P
0.15 (update) 425.67 300.33 P
5 F
0.13 ( is set if up-) 456.25 300.33 P
-0.44 (dates are needed. W) 108 288.33 P
-0.44 (e must e) 186.41 288.33 P
-0.44 (xit the reader lock before attempting to get the writer lock to a) 218.73 288.33 P
-0.44 (v) 462.14 288.33 P
-0.44 (oid dead-) 466.95 288.33 P
-0.42 (lock. There are tw) 108 276.33 P
-0.42 (o other v) 179.39 276.33 P
-0.42 (ariants of reader) 213.85 276.33 P
-0.42 (-writer locks de\336ned in pSather; the) 277.78 276.33 P
-0.42 (y dif) 419.13 276.33 P
-0.42 (fer in the relati) 437.07 276.33 P
-0.42 (v) 494.71 276.33 P
-0.42 (e) 499.56 276.33 P
0.54 (priority gi) 108 264.33 P
0.54 (v) 148.57 264.33 P
0.54 (en to readers and writers a) 153.42 264.33 P
0.54 (w) 261.21 264.33 P
0.54 (aiting the same lock. F) 268.33 264.33 P
0.54 (or a) 361.18 264.33 P
7 F
0.6 (RW_LOCK) 380.03 264.33 P
5 F
0.54 (, readers are gi) 429.48 264.33 P
0.54 (v) 489.71 264.33 P
0.54 (en) 494.56 264.33 P
-0.46 (priority) 108 252.33 P
-0.46 (. An) 137.35 252.33 P
7 F
-0.51 (WR_LOCK) 156.16 252.33 P
5 F
-0.46 ( gi) 205.61 252.33 P
-0.46 (v) 215.18 252.33 P
-0.46 (es priority to writers and a \050f) 220.03 252.33 P
-0.46 (air\051) 331.61 252.33 P
7 F
-0.51 (FRW_LOCK) 347.53 252.33 P
5 F
-0.46 ( treats readers and writers) 403.09 252.33 P
0.21 (the same. Which of these is best for the e) 108 240.33 P
0.21 (xample abo) 274.13 240.33 P
0.21 (v) 320.57 240.33 P
0.21 (e? Writing, in this case, should ha) 325.42 240.33 P
0.21 (v) 462 240.33 P
0.21 (e priority) 466.85 240.33 P
-0.01 (because this will sometimes eliminate e) 108 228.33 P
-0.01 (xtra lock-and-modify e) 266.39 228.33 P
-0.01 (x) 358.41 228.33 P
-0.01 (ecution by other threads. Therefore) 363.26 228.33 P
0.09 (a) 108 216.33 P
7 F
0.1 (WR_LOCK) 115.03 216.33 P
5 F
0.09 ( is best. F) 164.48 216.33 P
0.09 (or our realistic e) 202.93 216.33 P
0.09 (xample, we present the \336rst of three stories in) 268.29 216.33 P
0.09 (v) 451.05 216.33 P
0.09 (olving tuple) 455.85 216.33 P
(spaces.) 108 204.33 T
4 12 Q
(18.2.4   T) 108 163 T
(uple Space) 157.62 163 T
(, Round 1) 221.1 163 T
5 10 Q
0.14 ( One v) 108 140.33 P
0.14 (ery general parallel construct is a tuple-space. The most f) 134.78 140.33 P
0.14 (amous language based on this idea) 364.73 140.33 P
-0.41 (is Linda <>, which includes pattern matching on tuples as a fundamental construct. W) 108 128.33 P
-0.41 (e will e) 446.1 128.33 P
-0.41 (xamine) 474.56 128.33 P
0.21 (a simpler case where matching only happens on the \336rst element of a tuple, which must be a STR.) 108 116.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
( lock next_lk.reader then) 178.2 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    if \050m>big\051 or \050m>next\051 then update:=true end) 178.2 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end;) 178.2 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( if update then) 178.2 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    lock next_lk.writer  then) 178.2 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       if m>big then next:=big; big:=m) 178.2 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       elsif \050m>next and m<big\051 then next:=m end) 178.2 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    end;) 178.2 381.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end; -- if update) 178.2 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 461.88 129.6 367.13 2 L
V
0 Z
N
489.6 461.88 489.6 367.13 2 L
V
N
129.48 462 489.73 462 2 L
V
N
129.48 367 489.73 367 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "207" 207
%%Page: "208" 208
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(208) 108 710.84 T
8 8 Q
(The Synchr) 169.22 710.84 T
(onization Extension :) 210.38 710.84 T
0 F
(18.2 The) 290.01 710.84 T
7 F
(loc) 323.44 710.84 T
(k) 333.5 710.84 T
0 F
( Statement and the MUTEX Class) 337.5 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.29 (Our e) 108 659.33 P
-0.29 (xample follo) 130.05 659.33 P
-0.29 (ws that of F) 180.33 659.33 P
-0.29 (oster<>, p.152. His terminology is a bit confusing. The \336nal \325p\325 in rdp) 226.8 659.33 P
-0.34 (and inp can be thought of suggesting a predicate for the nonblocking cases.  The tw) 108 647.33 P
-0.34 (o v) 436.58 647.33 P
-0.34 (ersions of \325in\325) 448.59 647.33 P
-0.15 (commands can be thought of pulling tuples into w) 108 635.33 P
-0.15 (ork) 307.28 635.33 P
-0.15 (er objects and out of the tuple space. This v) 320.51 635.33 P
-0.15 (er-) 492.9 635.33 P
-0.61 (sion also allo) 108 623.33 P
-0.61 (ws only one tuple type in each tuple-space; this is consistent with Sather's strong typing.) 159.32 623.33 P
(Thus:) 108 611.33 T
(class TSP) 108 589.33 T
(A) 146.25 589.33 T
(CE{TT<$TUP} is...) 153.07 589.33 T
(F) 108 567.33 T
(oster includes \336v) 113.41 567.33 T
(e basic operations:) 181.59 567.33 T
(insert\050tup:TT\051 --  put a ne) 108 545.33 T
(w tuple into the space, duplicates Ok) 210.23 545.33 T
(rd\050s:STR\051:TT   --  blocking read, w) 110.5 523.33 T
(ait for match to appear) 251.49 523.33 T
(rdp\050s:STR\051:TT  -- return v) 110.5 501.33 T
(oid if no match) 215.84 501.33 T
(in\050s:STR\051:TT   -- blocking mo) 110.5 479.33 T
(v) 231.74 479.33 T
(e, w) 236.59 479.33 T
(ait then erase and read) 253.15 479.33 T
(inp\050s:STR\051:TT  -- non-blocking mo) 110.5 457.33 T
(v) 252.57 457.33 T
(e, return v) 257.42 457.33 T
(oid if no match) 298.04 457.33 T
-0.37 (   In round 1, we consider the non-blocking case for which we need only insert, inp and rdp. F) 108 435.33 P
-0.37 (or con-) 475.76 435.33 P
-0.06 (creteness suppose that the tuples are to be stored in an) 108 423.33 P
7 F
-0.07 (A_LIST) 325.9 423.33 P
5 F
-0.06 (.  In practice, one w) 358.51 423.33 P
-0.06 (ould use a more-) 437.25 423.33 P
0.54 (ef) 108 411.33 P
0.54 (\336cient container class. Then the code is v) 115.52 411.33 P
0.54 (ery straightforw) 284.12 411.33 P
0.54 (ard; the b) 348.71 411.33 P
0.54 (uilt-in) 387.36 411.33 P
7 F
0.6 (WR_LOCK) 414.85 411.33 P
5 F
0.54 ( construct) 464.3 411.33 P
-0.44 (pro) 108 399.33 P
-0.44 (vides the basic functionality needed for writers \050insert, inp\051 and readers \050rdp\051. An) 121.18 399.33 P
-0.44 (y number of rdp) 440.62 399.33 P
-0.31 (operations can run in parallel, b) 108 387.33 P
-0.31 (ut insert and inp modify the tuple space and thus require a lock spac-) 232.87 387.33 P
0.1 (erw) 108 375.33 P
0.1 (.writer) 122.34 375.33 P
0.1 (. Using a) 148.17 375.33 P
7 F
0.11 (WR_LOCK) 186.81 375.33 P
5 F
0.1 ( maximizes the chance that a tuple will be present when requested.) 236.26 375.33 P
0.19 (Using a) 108 363.33 P
7 F
0.22 (FRW_LOCK) 141.72 363.33 P
5 F
0.19 ( instead w) 197.28 363.33 P
0.19 (ould not change the code, b) 238.11 363.33 P
0.19 (ut w) 348.86 363.33 P
0.19 (ould ha) 366.45 363.33 P
0.19 (v) 396.17 363.33 P
0.19 (e the semantics of strictly) 401.02 363.33 P
-0.39 (obe) 108 351.33 P
-0.39 (ying the arri) 122.29 351.33 P
-0.39 (v) 170.15 351.33 P
-0.39 (al order of operations. Ho) 174.9 351.33 P
-0.39 (we) 276.13 351.33 P
-0.39 (v) 287.54 351.33 P
-0.39 (er) 292.39 351.33 P
-0.39 (, this arri) 299.76 351.33 P
-0.39 (v) 334.57 351.33 P
-0.39 (al order is usually not consistent in a mul-) 339.32 351.33 P
0.16 (tiple processor system; small v) 108 339.33 P
0.16 (ariations in load or initial conditions can change the order) 231.72 339.33 P
0.16 (. Both rdp) 463.4 339.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "208" 208
%%Page: "209" 209
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 186.36 710.84 T
(onization Extension :) 227.52 710.84 T
0 F
(18.2) 307.14 710.84 T
(The) 324.87 710.84 T
7 F
(loc) 340.58 710.84 T
(k) 350.64 710.84 T
0 F
( Statement and the MUTEX Class) 354.64 710.84 T
6 10 Q
(209) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.07 (and inp search for a tuple with a matching k) 108 659.33 P
0.07 (e) 284.35 659.33 P
0.07 (y) 288.64 659.33 P
0.07 (. The) 292.99 659.33 P
7 F
0.08 (inp) 316.18 659.33 P
5 F
0.07 ( search  iterates o) 329.52 659.33 P
0.07 (v) 399.08 659.33 P
0.07 (er indices using) 403.93 659.33 P
7 F
0.08 (ind) 469.42 659.33 P
5 F
0.07 (!  be-) 482.76 659.33 P
(cause) 108 647.33 T
7 F
(A_LIST::remove_index\050INT) 132.71 647.33 T
5 F
(\051  requires the inde) 253.86 647.33 T
(x.) 328.69 647.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $TUP is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   t1:STR;) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- all tuples have a STR key) 203.4 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class $TUP) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(------------------------------------------------------------------) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class TSPACE{ TT < $TUP } is) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr b:A_LIST{TT};) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr spacerw:WR_LOCK;    -- insert is mutator, rd*,in* are visitors) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME  is) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return\050res.init\051;) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   init:SAME is) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      b:=#;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      spacerw:=#;) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return self) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   insert\050tup:TT\051 is) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock spacerw.writer then) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       b.append\050tup\051;) 178.2 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- spacerw lock;) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   rdp\050s:STR\051:TT is) 144 402.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:TT;) 144 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock spacerw.reader then) 144 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop el:=b.elt!; if el.t1=s then break! end) 178.2 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 178.2 366.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock spacerw) 144 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if el.t1=s then return el else return void end;) 144 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   inp\050s:STR\051:TT is) 144 321.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i:INT;) 144 312.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:TT;) 144 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock spacerw.writer then) 144 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- mutator) 297.6 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     loop i:=b.ind!;) 178.2 285.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       if b.aget\050i\051.t1=s then) 178.2 276.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(          el:=b.aget\050i\051;) 178.2 267.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(          b.remove_index\050i\051;) 178.2 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(          break!) 178.2 249.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(        end) 178.2 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 178.2 231.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock spacerw.writer) 144 222.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if el.t1=s then return el else return void end;) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 204.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end; -- class TSPACE{TT<$TUP}) 144 195.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 190.13 2 L
V
0 Z
N
489.6 635.88 489.6 190.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 190 489.73 190 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "209" 209
%%Page: "210" 210
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(210) 108 710.84 T
8 8 Q
(The Synchr) 169.22 710.84 T
(onization Extension :) 210.38 710.84 T
0 F
(18.2 The) 290.01 710.84 T
7 F
(loc) 323.44 710.84 T
(k) 333.5 710.84 T
0 F
( Statement and the MUTEX Class) 337.5 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(18.2.5   Disjunctive Loc) 108 658 T
(king) 239.82 658 T
5 10 Q
0.7 (There are tw) 108 635.33 P
0.7 (o orthogonal dimensions of functionality in pSather locking, the v) 159.84 635.33 P
0.7 (arious subtypes of) 429.82 635.33 P
-0.31 ($LOCK and the dif) 108 623.33 P
-0.31 (ferent forms of the lock statement. W) 184.32 623.33 P
-0.31 (e ha) 331.36 623.33 P
-0.31 (v) 347.23 623.33 P
-0.31 (e seen ho) 352.08 623.33 P
-0.31 (w conjuncti) 388.43 623.33 P
-0.31 (v) 434.81 623.33 P
-0.31 (e locking can be) 439.66 623.33 P
0.16 (emplo) 108 611.33 P
0.16 (yed to solv) 132.9 611.33 P
0.16 (e hard problems in coordinating access to multiple resources. Disjuncti) 176.97 611.33 P
0.16 (v) 462.05 611.33 P
0.16 (e locking) 466.9 611.33 P
0.33 (is our current solution to a wide range of thread termination and related problems. The moti) 108 599.33 P
0.33 (v) 479.25 599.33 P
0.33 (ation) 484 599.33 P
0.08 (for the current design is discussed in Claudio<>. Brie\337y) 108 587.33 P
0.08 (, there appears to be no good w) 332.31 587.33 P
0.08 (ay to safely) 457.74 587.33 P
-0.37 (terminate a thread from the outside. Threads can cleanly self-destruct, b) 108 575.33 P
-0.37 (ut only if the) 391.3 575.33 P
-0.37 (y are e) 441.44 575.33 P
-0.37 (x) 467.21 575.33 P
-0.37 (ecuting.) 472.06 575.33 P
-0.39 (No) 108 563.33 P
-0.39 (w it is frequently con) 119.97 563.33 P
-0.39 (v) 203.01 563.33 P
-0.39 (enient to ha) 207.86 563.33 P
-0.39 (v) 253.54 563.33 P
-0.39 (e threads suspended w) 258.39 563.33 P
-0.39 (aiting for e) 346.83 563.33 P
-0.39 (v) 389.69 563.33 P
-0.39 (ents that might or might not) 394.54 563.33 P
0.21 (occur) 108 551.33 P
0.21 (. This is standard well-kno) 129.66 551.33 P
0.21 (wn problem with a v) 236.62 551.33 P
0.21 (ariety of proposed solutions. F) 319.98 551.33 P
0.21 (or pSather) 442.6 551.33 P
0.21 (, dis-) 483.79 551.33 P
-0.21 (juncti) 108 539.33 P
-0.21 (v) 130.53 539.33 P
-0.21 (e locking is by f) 135.38 539.33 P
-0.21 (ar the best. As al) 198.88 539.33 P
-0.21 (w) 264.87 539.33 P
-0.21 (ays, the construct is \336nding a v) 271.99 539.33 P
-0.21 (ariety of other applications.) 394.65 539.33 P
-0.07 (The proto) 108 517.33 P
-0.07 (ypical use of disjuncti) 146.99 517.33 P
-0.07 (v) 234.59 517.33 P
-0.07 (e locking w) 239.44 517.33 P
-0.07 (ould be in a procedure that w) 285.87 517.33 P
-0.07 (as w) 402.01 517.33 P
-0.07 (aiting for some e) 419.89 517.33 P
-0.07 (v) 486.93 517.33 P
-0.07 (ent) 491.78 517.33 P
0.36 (or ne) 108 505.33 P
0.36 (w data that might not materialize. At a higher le) 128.38 505.33 P
0.36 (v) 323.03 505.33 P
0.36 (el, a control program, probably the one that) 327.88 505.33 P
-0.24 (fork) 108 493.33 P
-0.24 (ed the w) 124.56 493.33 P
-0.24 (aiting thread, kno) 157.86 493.33 P
-0.24 (ws when the w) 227.4 493.33 P
-0.24 (aiter should terminate. W) 286.29 493.33 P
-0.24 (e can\325) 386.41 493.33 P
-0.24 (t present a real e) 410.14 493.33 P
-0.24 (xample) 474.56 493.33 P
1.34 (yet, because we \336rst need to introduce g) 108 481.33 P
1.34 (ates, which are the basic pSather constructs for e) 277.87 481.33 P
1.34 (v) 483.04 481.33 P
1.34 (ents) 487.89 481.33 P
(\050among other things\051. Schematically) 108 469.33 T
(, the code w) 252.89 469.33 T
(ould look lik) 301.11 469.33 T
(e:) 352.13 469.33 T
0.11 (The general construct also allo) 108 344.33 P
0.11 (ws one to prepend a boolean condition to an) 230.94 344.33 P
0.11 (y of the when branches.) 408.31 344.33 P
-0.24 (Each time through the loop these conditions are all e) 108 332.33 P
-0.24 (v) 315.88 332.33 P
-0.24 (aluated and an) 320.63 332.33 P
-0.24 (y branch whose prepended con-) 377.76 332.33 P
0.5 (dition is f) 108 320.33 P
0.5 (alse will be disabled. The idea of disjuncti) 147.24 320.33 P
0.5 (v) 319.37 320.33 P
0.5 (e guarded commands appears in se) 324.22 320.33 P
0.5 (v) 465.61 320.33 P
0.5 (eral lan-) 470.46 320.33 P
0.74 (guages, most prominently Ada<>. It is natural to incorporate these features into the pSather lock) 108 308.33 P
-0.22 (statement because, in a truly parallel en) 108 296.33 P
-0.22 (vironment, an e) 264.27 296.33 P
-0.22 (v) 326.07 296.33 P
-0.22 (ent that is not lock) 330.92 296.33 P
-0.22 (ed might well change be-) 403.81 296.33 P
0.25 (tween the time it is triggered and when it gets handled. As we will see in the ne) 108 284.33 P
0.25 (xt section, pSather) 429.33 284.33 P
0.2 (pro) 108 272.33 P
0.2 (vides mechanisms that simultaneously resume a thread that is w) 121.18 272.33 P
0.2 (aiting for some e) 378.7 272.33 P
0.2 (v) 446.54 272.33 P
0.2 (ent and grant) 451.39 272.33 P
(it a lock on the corresponding $LOCK object.) 108 260.33 T
0.15 (Thus there are four increasingly \337e) 108 238.33 P
0.15 (xible parallel cordination mechanisms in pSather) 248.82 238.33 P
0.15 (. The simplest,) 444.82 238.33 P
-0.41 (barrier synchronization, w) 108 226.33 P
-0.41 (as described in Section 1.3.1. Mutual e) 212.33 226.33 P
-0.41 (xclusion mechanisms and conjunc-) 364.97 226.33 P
0.58 (ti) 108 214.33 P
0.58 (v) 113.31 214.33 P
0.58 (e locking were discussed in Sections 1.3.2-3. Three v) 118.16 214.33 P
0.58 (ariations on reader) 335.55 214.33 P
0.58 (-writer locks were pre-) 410.92 214.33 P
-0.26 (sented in Section 1.3.4. All of these and the e) 108 202.33 P
-0.26 (v) 286.47 202.33 P
-0.26 (ent coordination constructions of the ne) 291.32 202.33 P
-0.26 (xt chapter can) 448.44 202.33 P
(be used disjuncti) 108 190.33 T
(v) 174.97 190.33 T
(ely as described in this section.) 179.82 190.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(   loop) 144 440.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock) 144 431.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when terminate then return) 144 422.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when event then action) 144 413.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- loop) 144 395.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 457.88 129.6 363.13 2 L
V
0 Z
N
489.6 457.88 489.6 363.13 2 L
V
N
129.48 458 489.73 458 2 L
V
N
129.48 363 489.73 363 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "210" 210
%%Page: "211" 211
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 214.39 710.84 T
(onization Extension :) 255.55 710.84 T
0 F
(18.3) 335.17 710.84 T
(GA) 352.9 710.84 T
(TE and GA) 365.44 710.84 T
(TE{T} classes) 405.92 710.84 T
6 10 Q
(211) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 644.98 504 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 646.49 540 646.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(18.3  GA) 108 654 T
(TE and GA) 178.42 654 T
(TE{T} c) 268.81 654 T
(lasses) 331.47 654 T
5 10 Q
0.02 (The Sather g) 108 625.31 P
0.02 (ate construct is the most comple) 159.09 625.31 P
0.02 (x and po) 287.64 625.31 P
0.02 (werful feature of the language e) 321.86 625.31 P
0.02 (xtensions and) 449.26 625.31 P
0.47 (will be discussed in this section and the ne) 108 613.31 P
0.47 (xt one. Our hope is that most application programmers) 281.62 613.31 P
0.47 (will be able to do \336ne using only the constructs described abo) 108 601.31 P
0.47 (v) 359.97 601.31 P
0.47 (e, once the pSather libraries are in) 364.82 601.31 P
-0.15 (place. But for writing ef) 108 589.31 P
-0.15 (\336cient and reusable libraries and for no) 203.51 589.31 P
-0.15 (v) 359.07 589.31 P
-0.15 (el applications, the po) 363.92 589.31 P
-0.15 (wer tools can) 450.98 589.31 P
-0.01 (mak) 108 577.31 P
-0.01 (e all the dif) 125.12 577.31 P
-0.01 (ference. The Sather 1.1 speci\336cation discusses g) 170.1 577.31 P
-0.01 (ates in conjunction with the classes) 363.25 577.31 P
7 F
-0.05 (FUTURE) 108 565.31 P
5 F
-0.05 ( and) 148.55 565.31 P
7 F
-0.05 (ATTACH) 167.9 565.31 P
5 F
-0.05 ( and the abstract class $) 207.9 565.31 P
7 F
-0.05 (ATTACH) 302.38 565.31 P
5 F
-0.05 (. These are minor v) 342.38 565.31 P
-0.05 (ariations on the basic) 419.42 565.31 P
0.26 (concept and can be ignored for tutorial purposes. W) 108 553.31 P
0.26 (e will present the v) 316.72 553.31 P
0.26 (arious aspects of g) 393.61 553.31 P
0.26 (ate func-) 468.48 553.31 P
0.22 (tionality separately and then gi) 108 541.31 P
0.22 (v) 231.94 541.31 P
0.22 (e e) 236.79 541.31 P
0.22 (xamples of ho) 248.24 541.31 P
0.22 (w the) 305.08 541.31 P
0.22 (y can be combined. The table on page 80 of) 327.09 541.31 P
(the 1.1 speci\336cation is complete and accurate, b) 108 529.31 T
(ut is not v) 299.15 529.31 T
(ery helpful in understanding g) 338.73 529.31 T
(ates.) 459.22 529.31 T
4 12 Q
(18.3.1   Gates as Sync) 108 487.98 T
(hr) 233.29 487.98 T
(oniz) 245.05 487.98 T
(er) 269.17 487.98 T
(s and Queues) 280.33 487.98 T
5 10 Q
-0.15 (W) 108 465.31 P
-0.15 (e will \336rst describe the more general) 116.64 465.31 P
7 F
-0.16 (GATE{T}) 264.19 465.31 P
5 F
-0.15 ( construct and then de\336ne ho) 304.21 465.31 P
-0.15 (w it specializes to the) 418.49 465.31 P
-0.33 (dataless) 108 453.31 P
7 F
-0.37 (GATE) 141.83 453.31 P
5 F
-0.33 ( v) 169.06 453.31 P
-0.33 (ersion. In early v) 176.07 453.31 P
-0.33 (ersions of pSather<>, g) 242.68 453.31 P
-0.33 (ates were called monitors b) 335.12 453.31 P
-0.33 (ut the function-) 443.01 453.31 P
-0.35 (ality has changed v) 108 441.31 P
-0.35 (ery little. Monitors were used, as g) 183.73 441.31 P
-0.35 (ates can be, to collect results returned by func-) 320.45 441.31 P
2.41 (tions fork) 108 429.31 P
2.41 (ed as separate threads. Since se) 148.92 429.31 P
2.41 (v) 285.7 429.31 P
2.41 (eral such threads could return v) 290.55 429.31 P
2.41 (alues to the same) 428.16 429.31 P
-0.5 (monitor\050g) 108 417.31 P
-0.5 (ate\051, there needed to be some discipline for ho) 147.95 417.31 P
-0.5 (w the multiple v) 328.35 417.31 P
-0.5 (alues were stored. The FIFO) 391.87 417.31 P
-0.39 (queue w) 108 405.31 P
-0.39 (as an ob) 141.11 405.31 P
-0.39 (vious choice and, as often happens, the queue functionality of g) 172.94 405.31 P
-0.39 (ates came to be used) 423.37 405.31 P
(much more widely than an) 108 393.31 T
(yone anticipated.) 214.5 393.31 T
0.01 (An object of type) 108 371.31 P
7 F
0.02 (GATE{T}) 180.27 371.31 P
5 F
0.01 ( can be created and used rather lik) 220.29 371.31 P
0.01 (e an) 356.63 371.31 P
0.01 (y other paramterized Sather con-) 372.87 371.31 P
0.49 (tainer) 108 359.31 P
0.49 (, b) 130.37 359.31 P
0.49 (ut has a number of  features b) 140.66 359.31 P
0.49 (uilt-in. One important feature is that the usual queue opera-) 262.44 359.31 P
0.43 (tions:) 108 347.31 P
7 F
0.48 (set\050T\051, get:T, enqueue\050T\051, and dequeue:T) 133.16 347.31 P
5 F
0.43 ( are guaranteed to be atomic. In addition, an) 319.62 347.31 P
0.43 (y) 499 347.31 P
-0.2 (attempt to get or dequeue a v) 108 335.31 P
-0.2 (alue from an empty queue will suspend until a v) 222.65 335.31 P
-0.2 (alue is present, pro) 413.1 335.31 P
-0.2 (vid-) 487.89 335.31 P
-0.06 (ing a simple "futures" capability) 108 323.31 P
-0.06 (. Objects of type GA) 236.35 323.31 P
-0.06 (TE de\336ne the same operations, b) 318.02 323.31 P
-0.06 (ut with mean-) 448.58 323.31 P
0.56 (ings appropriate for queues that ha) 108 311.31 P
0.56 (v) 249.15 311.31 P
0.56 (e only counts, not a collection of v) 254.01 311.31 P
0.56 (alues. This is all described) 395.96 311.31 P
(adequately in the speci\336cation.) 108 299.31 T
0.3 (As a \336rst e) 108 277.31 P
0.3 (xample, we point out that a subset of the typed g) 151.8 277.31 P
0.3 (ate functionality is just what is needed) 348.89 277.31 P
(for a simple message passing mechanism. Consider the follo) 108 265.31 T
(wing class.) 349.67 265.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class PORT{MSG} is) 144 223.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr channel:GATE{MSG}; -- GATE is a queue) 144 214.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is) 144 196.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 187.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.channel:=#;) 144 178.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res   end;) 144 169.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   send\050datum:MSG\051 is channel.enqueue\050datum\051 end;) 144 151.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   receive:MSG is  return channel.dequeue  end; -- blocks when empty) 144 133.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class PORT) 144 124.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 231.85 129.6 119.1 2 L
V
0.25 H
0 Z
N
489.6 231.85 489.6 119.1 2 L
V
N
129.48 231.98 489.73 231.98 2 L
V
N
129.48 118.98 489.73 118.98 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "211" 211
%%Page: "212" 212
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(212) 108 710.84 T
8 8 Q
(The Synchr) 197.25 710.84 T
(onization Extension :) 238.41 710.84 T
0 F
(18.3 GA) 318.04 710.84 T
(TE and GA) 348.3 710.84 T
(TE{T} classes) 388.79 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.62 (This implements a typed message port with the usual properties. The) 108 659.33 P
7 F
-0.69 (send) 378.91 659.33 P
5 F
-0.62 ( operation is non-blocking) 400.59 659.33 P
0.53 (and the) 108 647.33 P
7 F
0.59 (receive) 140.73 647.33 P
5 F
0.53 ( blocks until there is a message and atomically pulls it of) 172.96 647.33 P
0.53 (f the queue. W) 405.5 647.33 P
0.53 (e will see) 465.16 647.33 P
(some more elaborate message channels in later e) 108 635.33 T
(xamples.) 302.52 635.33 T
-0.06 (Since) 108 613.33 P
7 F
-0.07 (GATE) 132.66 613.33 P
5 F
-0.06 ( subtypes from) 159.89 613.33 P
7 F
-0.07 ($LOCK) 221.65 613.33 P
5 F
-0.06 (, we could ha) 254.43 613.33 P
-0.06 (v) 307.37 613.33 P
-0.06 (e used a g) 312.22 613.33 P
-0.06 (ate instead of a mute) 351.7 613.33 P
-0.06 (x in the e) 434.06 613.33 P
-0.06 (xamples) 470.67 613.33 P
0.34 (of sections 1.3.2 and 1.3.3. This is not normally useful in itself, b) 108 601.33 P
0.34 (ut becomes quite po) 372.38 601.33 P
0.34 (werful when) 453.4 601.33 P
0.3 (combined with the other features of g) 108 589.33 P
0.3 (ates. Our current focus is on the queue functionality and this) 259.69 589.33 P
0.14 (contains tw) 108 577.33 P
0.14 (o functions that ha) 153.87 577.33 P
0.14 (v) 228.26 577.33 P
0.14 (e return type $LOCK,) 233.11 577.33 P
7 F
0.16 (empty) 323.93 577.33 P
5 F
0.14 ( and) 351.16 577.33 P
7 F
0.16 (not_empty) 370.89 577.33 P
5 F
0.14 (. Lock statements can) 416.92 577.33 P
1.46 (include conditions) 108 565.33 P
7 F
1.63 (gate.empty) 187.03 565.33 P
5 F
1.46 ( or) 236.5 565.33 P
7 F
1.63 (gate.non_empty) 252.76 565.33 P
5 F
1.46 (. A) 323.82 565.33 P
7 F
1.63 (GATE{T}) 341.46 565.33 P
5 F
1.46 ( satis\336es the empty condition) 381.48 565.33 P
-0.25 (when there are zero elements in its queue. An untyped) 108 553.33 P
7 F
-0.27 (GATE) 325.21 553.33 P
5 F
-0.25 (satis\336es the empty condition when its) 354.95 553.33 P
0.89 (counter equals zero. There is also a non-locking function) 108 541.33 P
7 F
0.99 (size) 345.93 541.33 P
5 F
0.89 (:INT which returns the size of the) 363.71 541.33 P
(queue.) 108 529.33 T
-0.06 (The synchronization features of g) 108 507.33 P
-0.06 (ates can be used b) 242.12 507.33 P
-0.06 (uild other classes with similar capabilities. As a) 313.88 507.33 P
0.31 (simple e) 108 495.33 P
0.31 (xample, here is a class) 141.77 495.33 P
7 F
0.34 (PSTACK{T}) 235.49 495.33 P
5 F
0.31 (. The PST) 288.29 495.33 P
0.31 (A) 328.26 495.33 P
0.31 (CK class is a parallel computing interf) 335.08 495.33 P
0.31 (ace) 490.68 495.33 P
0.52 (to the standard Sather array-based stack. It guarantees atomicity of operations and also has a) 108 483.33 P
7 F
0.57 (pop) 487.32 483.33 P
5 F
0.08 (method that suspends when called on an empty stack. It is w) 108 471.33 P
0.08 (orth e) 350.45 471.33 P
0.08 (xamining ho) 373.43 471.33 P
0.08 (w the g) 423.54 471.33 P
0.08 (ate function-) 453.1 471.33 P
(ality supports this.) 108 459.33 T
(.) 108 437.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class PSTACK{T} is                        -- pop waits if empty) 144 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr s:A_STACK{T};) 144 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr ct:GATE;) 144 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create: SAME is) 144 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res ::= new;) 144 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.s := #A_STACK{T};) 144 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.ct:=#GATE;) 144 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return\050res\051;) 144 336.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 327.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   is_empty: BOOL pre ~void\050self\051 is return\050s.size = 0\051 end;) 144 309.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   push\050e: T\051 pre ~void\050self\051  is) 144 291.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock ct then) 144 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         s.push\050e\051;) 144 273.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( ct.enqueue;) 178.2 264.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 255.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 246.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   pop: T pre ~void\050self\051 is) 144 228.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock ct.not_empty then) 144 219.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( ct.dequeue;) 178.2 210.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         return\050s.pop\051;) 144 201.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 192.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 183.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   top: T pre ~void\050self\051 and ~is_empty is  return\050s.top\051  end;) 144 165.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   size: INT  pre ~void\050self\051 is return\050s.size\051 end;) 144 147.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class PSTACK{T}) 144 138.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 425.88 129.6 115.13 2 L
V
0 Z
N
489.6 425.88 489.6 115.13 2 L
V
N
129.48 426 489.73 426 2 L
V
N
129.48 115 489.73 115 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "212" 212
%%Page: "213" 213
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 214.39 710.84 T
(onization Extension :) 255.55 710.84 T
0 F
(18.3) 335.17 710.84 T
(GA) 352.9 710.84 T
(TE and GA) 365.44 710.84 T
(TE{T} classes) 405.92 710.84 T
6 10 Q
(213) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.46 ( All of the required functionality is con) 108 659.33 P
-0.46 (v) 260.72 659.33 P
-0.46 (eniently packaged using one untyped g) 265.57 659.33 P
-0.46 (ate,) 419.01 659.33 P
7 F
-0.52 (ct.) 435.21 659.33 P
5 F
-0.46 (The) 448.03 659.33 P
7 F
-0.52 (push) 465.62 659.33 P
5 F
-0.46 (and) 489.56 659.33 P
7 F
0.14 (pop) 108 647.33 P
5 F
0.12 ( methods are both destructi) 124.68 647.33 P
0.12 (v) 233.24 647.33 P
0.12 (e and require mutual e) 238.09 647.33 P
0.12 (xclusion. The g) 327.86 647.33 P
0.12 (ate) 389.99 647.33 P
7 F
0.14 (ct) 404.28 647.33 P
5 F
0.12 ( does this, b) 412.06 647.33 P
0.12 (ut it is also) 460.01 647.33 P
0.22 (used as a blocking counter of the size of the stack. Recall that) 108 635.33 P
7 F
0.25 (enqueue) 359.76 635.33 P
5 F
0.22 ( increments the counter of) 398.68 635.33 P
-0.61 (an untyped g) 108 623.33 P
-0.61 (ate and that) 158.39 623.33 P
7 F
-0.68 (dequeue) 205.17 623.33 P
5 F
-0.61 ( decrements a non-zero counter and blocks on zero. Here the) 244.09 623.33 P
7 F
-0.68 (push) 482.32 623.33 P
5 F
-0.36 (method does the appropriate enqueue; notice that this is while) 108 611.33 P
7 F
-0.4 (ct) 354.38 611.33 P
5 F
-0.36 ( is lock) 362.16 611.33 P
-0.36 (ed ag) 390.23 611.33 P
-0.36 (ainst other threads. The) 411.21 611.33 P
7 F
-0.32 (pop) 108 599.33 P
5 F
-0.29 ( method starts with a lock on) 124.68 599.33 P
7 F
-0.32 (ct.not_empty) 240.73 599.33 P
5 F
-0.29 (; this blocks on an empty stack and atomically locks) 297.98 599.33 P
7 F
-0.4 (ct) 108 587.33 P
5 F
-0.36 (  as soon as some other thread has pushed a v) 115.78 587.33 P
-0.36 (alue on to it. All of the coordination required for mul-) 292.36 587.33 P
0.2 (tiple users and for conjuncti) 108 575.33 P
0.2 (v) 220.19 575.33 P
0.2 (e and disjuncti) 225.04 575.33 P
0.2 (v) 283.51 575.33 P
0.2 (e locking is handled by the run-time lock manager) 288.36 575.33 P
0.2 (. In) 490.47 575.33 P
0.82 (general, the programmer just needs to understand that pSather has a v) 108 563.33 P
0.82 (ery \337e) 395.17 563.33 P
0.82 (xible e) 421.11 563.33 P
0.82 (v) 448.63 563.33 P
0.82 (ent and lock) 453.48 563.33 P
-0.19 (mechanism, b) 108 551.33 P
-0.19 (ut only for a restricted set of e) 163.16 551.33 P
-0.19 (v) 281.86 551.33 P
-0.19 (ent types under $LOCK. In our e) 286.71 551.33 P
-0.19 (xample, we were able) 417.37 551.33 P
-0.19 (to represent the e) 108 539.33 P
-0.19 (v) 175.76 539.33 P
-0.19 (ents and locks required for the task by pSather primiti) 180.61 539.33 P
-0.19 (v) 393.86 539.33 P
-0.19 (es and the result w) 398.71 539.33 P
-0.19 (as clean) 472.26 539.33 P
0.53 (and ef) 108 527.33 P
0.53 (\336cient code. There will be additional e) 132.99 527.33 P
0.53 (xamples belo) 290.15 527.33 P
0.53 (w) 343.48 527.33 P
0.53 (. F) 350.05 527.33 P
0.53 (or wizards, there is a w) 360.99 527.33 P
0.53 (ay to de\336ne) 456.28 527.33 P
-0.5 (custom classes that subtype from $LOCK. This can be done in Sather) 108 515.33 P
-0.5 (, b) 380.39 515.33 P
-0.5 (ut requires some understand-) 389.69 515.33 P
(ing of the lock manager details and is discussed in Section 1.6, Adv) 108 503.33 T
(anced T) 378.28 503.33 T
(opics.) 409.41 503.33 T
0.04 (Our ne) 108 481.33 P
0.04 (xt e) 135.38 481.33 P
0.04 (xample illustrates a pSather solution to another classic and important parallel computing) 149.99 481.33 P
-0.05 (problem, producers and consumers. W) 108 469.33 P
-0.05 (e describe code for one producer and one consumer) 261.4 469.33 P
-0.05 (, the gen-) 466.62 469.33 P
-0.54 (eral case is essentially the same and w) 108 457.33 P
-0.54 (ould mak) 257.11 457.33 P
-0.54 (e a good e) 293.96 457.33 P
-0.54 (x) 333 457.33 P
-0.54 (ercise. In order to help visualize the whole) 337.85 457.33 P
0.29 (mechanism, this e) 108 445.33 P
0.29 (xample is present as a monolithic program rather than encapsulated classes. An-) 180.36 445.33 P
(other good e) 108 433.33 T
(x) 157.84 433.33 T
(ercise w) 162.69 433.33 T
(ould be to use the POR) 195.63 433.33 T
(T class described earlier in this section.) 287.53 433.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 391.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr channel:GATE{INT};) 144 382.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- queue aspect of GATE exploited) 268.8 382.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr prod_cnt:GATE;) 144 373.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- used to count live producer) 249.6 373.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 355.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      channel:=#;) 144 346.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      prod_cnt:=#;) 144 337.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      par) 144 328.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      prod_cnt.enqueue; fork producer  end; -- one producer) 178.2 319.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      fork consumer end;) 178.2 310.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end) 144 301.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- main) 144 292.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   producer is) 144 274.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop i::=3.upto!\0508\051;) 144 265.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       channel.enqueue\050i*i\051) 178.2 256.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 247.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      prod_cnt.dequeue;) 144 238.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- done, decrement producer count) 254.4 238.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 229.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   consumer is) 144 211.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     loop) 144 202.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     -- disjunctive lock, here mutually exclusive branches) 178.2 193.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     lock) 178.2 184.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       when channel.not_empty then #OUT+channel.dequeue+ '\134n') 178.2 175.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       when channel.empty,  prod_cnt.empty  then  return) 178.2 166.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end; -- lock) 178.2 157.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     end -- loop) 144 148.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- consumer) 144 139.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end; -- MAIN) 144 130.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 399.88 129.6 125.13 2 L
V
0 Z
N
489.6 399.88 489.6 125.13 2 L
V
N
129.48 400 489.73 400 2 L
V
N
129.48 125 489.73 125 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "213" 213
%%Page: "214" 214
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(214) 108 710.84 T
8 8 Q
(The Synchr) 197.25 710.84 T
(onization Extension :) 238.41 710.84 T
0 F
(18.3 GA) 318.04 710.84 T
(TE and GA) 348.3 710.84 T
(TE{T} classes) 388.79 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.03 (Here there are tw) 108 637.33 P
0.03 (o g) 177.13 637.33 P
0.03 (ates emplo) 189.62 637.33 P
0.03 (yed. A typed g) 232.6 637.33 P
0.03 (ate,) 291.54 637.33 P
7 F
0.04 (channel) 308.23 637.33 P
5 F
0.03 (, is the queue of data between producers) 343.25 637.33 P
0.56 (and consumers. An untyped g) 108 625.33 P
0.56 (ate,) 229.35 625.33 P
7 F
0.62 (prod_cnt) 246.57 625.33 P
5 F
0.56 (, will count the number of acti) 285.48 625.33 P
0.56 (v) 409.42 625.33 P
0.56 (e producers. As in the) 414.27 625.33 P
-0.13 (stack e) 108 613.33 P
-0.13 (xample we map a task condition - no acti) 135.21 613.33 P
-0.13 (v) 298.3 613.33 P
-0.13 (e producers - onto an e) 303.15 613.33 P
-0.13 (v) 393.59 613.33 P
-0.13 (ent handled by the locking) 398.44 613.33 P
-0.06 (mechanism -) 108 601.33 P
7 F
-0.06 (prod_cnt.empty) 161.76 601.33 P
5 F
-0.06 (. The main program just forks a producer and a consumer while add-) 230.03 601.33 P
-0.41 (ing 1 to the) 108 589.33 P
7 F
-0.45 (prod_cnt) 154.16 589.33 P
5 F
-0.41 (. Our producer sends its squares to the communication channel and signals that) 193.07 589.33 P
0.46 (it is \336nished by decrementing) 108 577.33 P
7 F
0.51 (prod_cnt) 231.13 577.33 P
5 F
0.46 (. The consumer is a bit more comple) 270.04 577.33 P
0.46 (x and is our \336rst real) 419.21 577.33 P
-0.26 (e) 108 565.33 P
-0.26 (xample of a disjuncti) 112.29 565.33 P
-0.26 (v) 195.41 565.33 P
-0.26 (e lock. The \336rst disjunct is the normal case where data in the communication) 200.26 565.33 P
0.45 (channel is printed. The classical problem is that the consumer function has no w) 108 553.33 P
0.45 (ay to kno) 434.29 553.33 P
0.45 (w when) 472.17 553.33 P
0.07 (production has ceased. There are v) 108 541.33 P
0.07 (arious unattracti) 246.92 541.33 P
0.07 (v) 311.45 541.33 P
0.07 (e solutions such as putting special sentinel v) 316.3 541.33 P
0.07 (al-) 493.45 541.33 P
0.45 (ues in the data stream. Here the second disjunct w) 108 529.33 P
0.45 (aits for both the absence of data on the channel) 311.92 529.33 P
0.44 (and the signal that there are no acti) 108 517.33 P
0.44 (v) 250.51 517.33 P
0.44 (e producers. Ag) 255.36 517.33 P
0.44 (ain, this only w) 319.78 517.33 P
0.44 (orks out so nicely because we) 382.67 517.33 P
-0.1 (mapped problem conditions onto pSather primiti) 108 505.33 P
-0.1 (v) 301.98 505.33 P
-0.1 (es. F) 306.83 505.33 P
-0.1 (or our last e) 325.48 505.33 P
-0.1 (xample of this section, we re) 372.53 505.33 P
-0.1 (visit) 486.77 505.33 P
(the tuple space problem and add blocking reads and mo) 108 493.33 T
(v) 330.31 493.33 T
(es in an ef) 335.16 493.33 T
(\336cient w) 375.73 493.33 T
(ay) 410.35 493.33 T
(.) 419.14 493.33 T
4 12 Q
(18.3.2   T) 108 452 T
(uple Space) 157.62 452 T
(, Round T) 221.1 452 T
(w) 275.71 452 T
(o) 284.81 452 T
5 10 Q
-0.02 (In section 1.3.4 we described a reduced v) 108 429.33 P
-0.02 (ersion of the tuple space e) 272.95 429.33 P
-0.02 (xample from F) 376.85 429.33 P
-0.02 (oster<> in which) 436.1 429.33 P
0.79 (only the non-blocking read and mo) 108 417.33 P
0.79 (v) 252.06 417.33 P
0.79 (e operations were implemented. The more general case with) 256.91 417.33 P
0.01 (blocking read \050rd\051 and mo) 108 405.33 P
0.01 (v) 212.31 405.33 P
0.01 (e \050in\051 is considerably more comple) 217.16 405.33 P
0.01 (x because we w) 356.2 405.33 P
0.01 (ant to a) 419.16 405.33 P
0.01 (v) 448.42 405.33 P
0.01 (oid an) 453.22 405.33 P
0.01 (y b) 477.8 405.33 P
0.01 (usy) 490.11 405.33 P
-0.35 (w) 108 393.33 P
-0.35 (aiting or polling.  Our solution follo) 115.12 393.33 P
-0.35 (ws a standard  pSather pattern with each blocking read becom-) 256.41 393.33 P
0.01 (ing a suspended thread w) 108 381.33 P
0.01 (aiting on some e) 209.03 381.33 P
0.01 (v) 274.64 381.33 P
0.01 (ent. If we assume that block) 279.49 381.33 P
0.01 (ed reads are relati) 391.63 381.33 P
0.01 (v) 462.21 381.33 P
0.01 (ely infre-) 467.06 381.33 P
-0.54 (quent, a good solution is to treat these specially and lea) 108 369.33 P
-0.54 (v) 323.22 369.33 P
-0.54 (e the unblock) 328.07 369.33 P
-0.54 (ed case ef) 380.77 369.33 P
-0.54 (\336cient. The e) 418.86 369.33 P
-0.54 (xpanded) 470.12 369.33 P
-0.1 (TSP) 108 357.33 P
-0.1 (A) 124.31 357.33 P
-0.1 (CE class has a wish list, wish,  that holds elements of type WISH, each of which captures one) 131.13 357.33 P
(or more block) 108 345.33 T
(ed rd/in requests.  The class WISH is quite simple.) 164 345.33 T
0.6 (The full tuple space implementation is captured in the class) 108 193.33 P
7 F
0.67 (TSPACE) 353.95 193.33 P
5 F
0.6 (, which appears in the ne) 393.96 193.33 P
0.6 (xt) 496.22 193.33 P
0.39 (three codeblocks. Most of the code from the earlier v) 108 181.33 P
0.39 (ersion is preserv) 323.51 181.33 P
0.39 (ed. In addition, the) 389.68 181.33 P
7 F
0.43 (MUTEX) 469 181.33 P
-0.32 (wishlk) 108 169.33 P
5 F
-0.28 ( controls mutual e) 135.22 169.33 P
-0.28 (xclusion to) 206.16 169.33 P
7 F
-0.32 (wish) 252.26 169.33 P
5 F
-0.28 (. Since there is no guarantee that a block) 272.26 169.33 P
-0.28 (ed rd/in command) 431.8 169.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class WISH{TT} is) 144 325.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr key:STR;) 144 316.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr claimed:BOOL;) 144 307.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- an "in" will snarf this wish) 244.8 307.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr que:GATE{TT};) 144 298.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create\050s:STR\051:SAME is) 144 280.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 271.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.key:=s;) 144 262.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.claimed:=false;) 144 253.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.que:=#;) 144 244.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res) 144 235.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 226.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class WISH) 144 217.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 333.88 129.6 212.13 2 L
V
0 Z
N
489.6 333.88 489.6 212.13 2 L
V
N
129.48 334 489.73 334 2 L
V
N
129.48 212 489.73 212 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "214" 214
%%Page: "215" 215
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 214.39 710.84 T
(onization Extension :) 255.55 710.84 T
0 F
(18.3) 335.17 710.84 T
(GA) 352.9 710.84 T
(TE and GA) 365.44 710.84 T
(TE{T} classes) 405.92 710.84 T
6 10 Q
(215) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.05 (will e) 108 659.33 P
-0.05 (v) 130.2 659.33 P
-0.05 (er be satis\336ed, there should be some w) 135.05 659.33 P
-0.05 (ay to clean up a tuple space and the GA) 289.04 659.33 P
-0.05 (TE) 446.08 659.33 P
7 F
-0.05 (die) 460.75 659.33 P
5 F
-0.05 ( is used) 474.09 659.33 P
(to signal w) 108 647.33 T
(aiting threads that it is time to quit.) 151.79 647.33 T
0.36 (   The non-blocking) 108 189.34 P
7 F
0.4 (rdp) 191.18 189.34 P
5 F
0.36 ( and) 205.63 189.34 P
7 F
0.4 (inp) 225.79 189.34 P
5 F
0.36 ( methods do not need to change at all from our pre) 239.13 189.34 P
0.36 (vious solution.) 444.74 189.34 P
-0.45 (The blocking v) 108 177.34 P
-0.45 (ersions,) 167.5 177.34 P
7 F
-0.5 (rd) 200.38 177.34 P
5 F
-0.45 ( and) 209.27 177.34 P
7 F
-0.5 (in) 227.8 177.34 P
5 F
-0.45 (, each start with a call to the non-blocking counterpart. If the request) 235.58 177.34 P
0.79 (is found, thereis no loss of ef) 108 165.34 P
0.79 (\336cienc) 228.31 165.34 P
0.79 (y) 254.82 165.34 P
0.79 (. Similarly for the) 259.17 165.34 P
7 F
0.88 (insert) 335.94 165.34 P
5 F
0.79 ( method; if there are no unsatis\336ed) 360.39 165.34 P
-0.12 (wishes, the code is the same as the base case. The e) 108 153.34 P
-0.12 (xtra w) 312.28 153.34 P
-0.12 (ork is all in the wish list, and the synchro-) 337.33 153.34 P
0.04 (nization problems can also be isolated there. Since an) 108 141.34 P
0.04 (y of) 322.26 141.34 P
7 F
0.04 (insert) 340.66 141.34 P
5 F
0.04 (,) 365.11 141.34 P
7 F
0.04 (in) 370.14 141.34 P
5 F
0.04 (, or) 377.92 141.34 P
7 F
0.04 (rd) 393.83 141.34 P
5 F
0.04 ( can modify the wish list,) 402.71 141.34 P
0.24 (access to it is controlled by the MUTEX) 108 129.34 P
7 F
0.27 (wishlk) 273.81 129.34 P
5 F
0.24 (. Consider \336rst the) 301.03 129.34 P
7 F
0.27 (rd) 378.39 129.34 P
5 F
0.24 ( method. If there is no match) 387.28 129.34 P
0.22 (in the tuple space, a search of the wish list is done. Of course if there is also no match on the wish) 108 117.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class TSPACE{ TT < $TUP } is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  private attr b:A_LIST{TT};) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  private attr wish:A_LIST{WISH{TT}};) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- WISH has key:STR, que:GATE{TT}) 321.6 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  private attr spacerw:RW_LOCK;) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- insert, in* mutates space, rd* visits) 292.8 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  private attr wishlk:MUTEX;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  private attr die:GATE;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME  is) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return\050res.init\051;) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   init:SAME is) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      b:=#;) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      wish:=#;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      spacerw:=#;) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      wishlk:=#;) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      die:=#;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return self) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   insert\050tup:TT\051 is) 144 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i:INT:=0;) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      w:WISH{TT}:=#\050"*"\051;    -- initialize;) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock wishlk then -- #OUT+  wish.size  + '\134n';) 144 402.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop i:=wish.ind!;) 178.2 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         if wish.aget\050i\051.key= tup.t1 then) 178.2 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            w:=wish.aget\050i\051;) 178.2 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            break!) 178.2 366.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         end) 178.2 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 178.2 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if w.key=tup.t1 then) 178.2 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- if no matching wish, skip all this) 303 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         w.que.set\050tup\051;) 178.2 330.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- enables waiting rd/in threads) 293.4 330.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         lock) 178.2 321.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         when w.que.no_threads) 178.2 312.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         then  wish.remove_index\050i\051; -- zap the wish list entry) 178.2 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            if w.claimed then return end -- don't insert tuple) 178.2 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         when die.not_empty then return) 178.2 285.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         end; -- lock when) 178.2 276.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- if w.key=s) 178.2 267.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock wishlk) 144 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock spacerw.writer then) 144 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- OK, tuple gets added to space) 288 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       b.append\050tup\051;) 178.2 231.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- spacerw lock;) 144 222.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;-- insert) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 208.13 2 L
V
0 Z
N
489.6 635.88 489.6 208.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 208 489.73 208 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "215" 215
%%Page: "216" 216
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(216) 108 710.84 T
8 8 Q
(The Synchr) 197.25 710.84 T
(onization Extension :) 238.41 710.84 T
0 F
(18.3 GA) 318.04 710.84 T
(TE and GA) 348.3 710.84 T
(TE{T} classes) 388.79 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.57 (list then a ne) 108 659.33 P
-0.57 (w wish entry must be created and appended. It could also happen that there is a matching) 156.86 659.33 P
-0.03 (wish entry) 108 647.33 P
-0.03 (, b) 149.26 647.33 P
-0.03 (ut a pre) 159.04 647.33 P
-0.03 (vious) 188.72 647.33 P
7 F
-0.03 (in) 212.86 647.33 P
5 F
-0.03 ( call has stak) 220.64 647.33 P
-0.03 (ed a claim to the tuple-to-come and so a ne) 271.84 647.33 P
-0.03 (w wish entry is) 443.25 647.33 P
-0.47 (also needed in this case. All of this is e) 108 635.33 P
-0.47 (xpressed in the tw) 259.12 635.33 P
-0.47 (o statements within the wishlk. It is possible) 330.09 635.33 P
-0.24 (that, while this thread w) 108 623.33 P
-0.24 (as making its wish another thread inserted a matching tuple. This is handled) 203.32 623.33 P
(by ag) 108 611.33 T
(ain trying) 129.89 611.33 T
7 F
(rdp) 171 611.33 T
5 F
(.) 185.45 611.33 T
0.5 ( The \336nal code se) 108 284.33 P
0.5 (gment of) 180.37 284.33 P
7 F
0.55 (rd) 219.69 284.33 P
5 F
0.5 ( implements the w) 228.58 284.33 P
0.5 (ait for a matching tuple  using a disjuncti) 303.58 284.33 P
0.5 (v) 471.17 284.33 P
0.5 (e lock-) 476.02 284.33 P
0.56 (statement.The second when branch w) 108 272.33 P
0.56 (aits for a global signal to die. The \336rst branch is the normal) 260.38 272.33 P
0.07 (case and relies upon the properties of the pSather GA) 108 260.33 P
0.07 (TE{T} construct. Notice that a wish list entry) 321.12 260.33 P
0.72 (has three attrib) 108 248.33 P
0.72 (utes:) 168.66 248.33 P
7 F
0.8 (key:STR, claimed:BOOL) 190.77 248.33 P
5 F
0.72 (, and) 300.48 248.33 P
7 F
0.8 (que:GATE{TT}) 323.86 248.33 P
5 F
0.72 ( where TT is the tuple type.) 389.45 248.33 P
0.64 (The GA) 108 236.33 P
0.64 (TE construct supports multiple threads w) 140.02 236.33 P
0.64 (aiting for a v) 307.85 236.33 P
0.64 (alue and this is just what is needed) 360.9 236.33 P
0.09 (here. The \336rst when branch can be tak) 108 224.33 P
0.09 (en as soon as a v) 261.23 224.33 P
0.09 (alue \050here a tuple\051 is assigned to) 328.34 224.33 P
7 F
0.09 (w.que) 460.29 224.33 P
5 F
0.09 ( and) 486.97 224.33 P
(this v) 108 212.33 T
(alue is returned as the result of the original block) 129.7 212.33 T
(ed read.) 325.4 212.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(   rd\050s:STR\051:TT is) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      v:TT:=void;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:TT:=rdp\050s\051;) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if ~\050el=v\051 then return el end;) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      w:WISH{TT}:=#\050"*"\051;) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- initialize to non-match;) 264 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock wishlk then) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop w:=wish.elt!; if w.key=s then break! end end;) 178.2 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if ~\050w.key =s\051 or w.claimed then w:=#\050s\051; wish.append\050w\051) 178.2 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock wishlk) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:=rdp\050s\051;) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- maybe got in while making wish) 225.6 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if ~\050el=v\051 then return el end;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when w.que.not_empty then return w.que.get) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when die.not_empty then return void) 144 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   rdp\050s:STR\051:TT is) 144 402.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:TT;) 144 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock spacerw.reader then) 144 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop el:=b.elt!;) 178.2 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         if el.t1=s then break! end) 178.2 366.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 178.2 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock spacerw) 144 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if el.t1=s then return el else return void end;) 144 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 330.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 599.88 129.6 325.13 2 L
V
0 Z
N
489.6 599.88 489.6 325.13 2 L
V
N
129.48 600 489.73 600 2 L
V
N
129.48 325 489.73 325 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "216" 216
%%Page: "217" 217
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 214.39 710.84 T
(onization Extension :) 255.55 710.84 T
0 F
(18.3) 335.17 710.84 T
(GA) 352.9 710.84 T
(TE and GA) 365.44 710.84 T
(TE{T} classes) 405.92 710.84 T
6 10 Q
(217) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
-0.1 (The additional code required for the blocking) 108 659.33 P
7 F
-0.11 (in) 291.42 659.33 P
5 F
-0.1 ( command is quite similar to this. The search for an) 299.2 659.33 P
-0.08 (unclaimed matching tuple is identical, e) 108 647.33 P
-0.08 (xcept that the) 266.86 647.33 P
7 F
-0.09 (in') 322.99 647.33 P
5 F
-0.08 (commands mark the tuple as claimed. The) 335.36 647.33 P
(disjuncti) 108 635.33 T
(v) 142.2 635.33 T
(e lock that implements w) 147.05 635.33 T
(aiting is also the same as in) 247.5 635.33 T
7 F
(rd) 361.94 635.33 T
5 F
-0.54 ( It is the) 108 249.34 P
7 F
-0.6 (insert) 140.86 249.34 P
5 F
-0.54 ( method that in) 165.31 249.34 P
-0.54 (v) 223.59 249.34 P
-0.54 (olv) 228.39 249.34 P
-0.54 (es most of the e) 241.02 249.34 P
-0.54 (xtra comple) 301.5 249.34 P
-0.54 (xity for dealing with the wish list, when) 348.3 249.34 P
-0.1 (present. The \336rst loop searches for an e) 108 237.34 P
-0.1 (xisting wish inde) 264.36 237.34 P
-0.1 (x with the same k) 332.36 237.34 P
-0.1 (e) 402.43 237.34 P
-0.1 (y; if there is none, inser-) 406.72 237.34 P
0.28 (tion re) 108 225.34 P
0.28 (v) 133.86 225.34 P
0.28 (erts to our pre) 138.71 225.34 P
0.28 (vious case. If there is a matching wish, this insertion is its answer and this is) 195.12 225.34 P
-0.21 (indicated by setting) 108 213.34 P
7 F
-0.23 (w.que) 188.2 213.34 P
5 F
-0.21 (to ha) 217.42 213.34 P
-0.21 (v) 236.73 213.34 P
-0.21 (e a v) 241.58 213.34 P
-0.21 (alue of the tuple being inserted. No) 259.79 213.34 P
-0.21 (w) 399.08 213.34 P
-0.21 (, one or more threads are) 405.65 213.34 P
0.07 (w) 108 201.34 P
0.07 (aiting for this GA) 115.12 201.34 P
0.07 (TE{TT} to be set and the) 185.04 201.34 P
0.07 (y will all be enabled. The) 286.76 201.34 P
7 F
0.08 (insert) 391.31 201.34 P
5 F
0.07 ( routine no) 415.76 201.34 P
0.07 (w w) 458.98 201.34 P
0.07 (aits for) 475.88 201.34 P
-0.23 (these all to \336nish with a disjuncti) 108 189.34 P
-0.23 (v) 238.61 189.34 P
-0.23 (e lock. As in the other cases, the second branch catches the global) 243.46 189.34 P
0.16 (command to quit. The \336rst disjunct matches the condition that there are no threads still w) 108 177.34 P
0.16 (aiting for) 466.9 177.34 P
7 F
0.18 (w.que) 108 165.34 P
5 F
0.16 (. The current wish is remo) 134.68 165.34 P
0.16 (v) 240.31 165.34 P
0.16 (ed in an) 245.16 165.34 P
0.16 (y case and, if the tuple has been claimed, then the) 276.99 165.34 P
7 F
0.18 (insert) 479.55 165.34 P
5 F
0.84 (routine returns. If all of the w) 108 153.34 P
0.84 (aiting operations were) 230.98 153.34 P
7 F
0.94 (rd) 324.87 153.34 P
5 F
0.84 ( then the current tuple will not ha) 333.76 153.34 P
0.84 (v) 472.49 153.34 P
0.84 (e been) 477.34 153.34 P
-0.03 (claimed and will be added to the main tuple store by the last code se) 108 141.34 P
-0.03 (gment.  The only other method) 380.24 141.34 P
-0.54 (is) 108 129.34 P
7 F
-0.6 (done) 116.63 129.34 P
5 F
-0.54 ( which sets the) 138.87 129.34 P
7 F
-0.6 (GATE:die) 198.39 129.34 P
5 F
-0.54 (as the signal for w) 243.93 129.34 P
-0.54 (aiting threads to return. This completes the code) 315 129.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(   in\050s:STR\051:TT is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      v:TT:=void;) 144 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:TT:=inp\050s\051;) 144 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if ~\050el=v\051 then return el end;) 144 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      w:WISH{TT}:=#\050"*"\051;) 144 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- initialize to non-match;) 264 570.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock wishlk then) 144 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop w:=wish.elt!; if w.key=s then break! end end;) 178.2 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   if ~\050w.key =s\051 or w.claimethen w:=#\050s\051; wish.append\050w\051) 190.8 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      w.claimed:=true;) 178.2 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--  wish will be snarfed) 283.8 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock) 144 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:=inp\050s\051;) 144 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- maybe got in while making wish) 225.6 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if ~\050el=v\051 then return el end;) 144 489.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock) 144 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when w.que.not_empty then return w.que.get) 144 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      when die.not_empty  then return void) 144 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock) 144 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  inp\050s:STR\051:TT is) 144 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i:INT:=0;) 144 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      el:TT;) 144 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- non match;) 201.6 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      lock spacerw.writer then) 144 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- mutator) 288 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       loop i:=b.ind!;) 178.2 381.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(          if b.aget\050i\051.t1=s then) 178.2 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(             el:=b.aget\050i\051;) 178.2 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(             b.remove_index\050i\051;) 178.2 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(             break!) 178.2 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(          end) 178.2 336.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       end;) 178.2 327.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; -- lock spacerw.writer) 144 318.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if el.t1=s then return el else return void end;) 144 309.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 300.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   done is die.set end;) 144 282.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class TSPACE{TT<$TUP}) 144 273.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 268.13 2 L
V
0 Z
N
489.6 623.88 489.6 268.13 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 268 489.73 268 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "217" 217
%%Page: "218" 218
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(218) 108 710.84 T
8 8 Q
(The Synchr) 190.11 710.84 T
(onization Extension :) 231.27 710.84 T
0 F
(18.4 GA) 310.9 710.84 T
(TES and attached thr) 341.16 710.84 T
(eads) 422.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.32 (for the tuple space e) 108 659.33 P
-0.32 (xample from the perspecti) 187.09 659.33 P
-0.32 (v) 290.57 659.33 P
-0.32 (e of functionality) 295.42 659.33 P
-0.32 (. There will be a third round of con-) 363 659.33 P
0.69 (sideration of this task when we discuss performance and the distrib) 108 647.33 P
0.69 (uted e) 383.04 647.33 P
0.69 (xtension in Section 1.5.) 407.74 647.33 P
108 585.98 504 589 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 587.49 540 587.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(18.4   GA) 108 595 T
(TES and attac) 183.42 595 T
(hed threads) 302.27 595 T
5 10 Q
0.67 (Both the typed and untyped g) 108 566.31 P
0.67 (ate classes ha) 229.36 566.31 P
0.67 (v) 284.37 566.31 P
0.67 (e another area of functionality that interacts with the) 289.22 566.31 P
-0.03 (queue and $) 108 554.31 P
7 F
-0.03 (LOCK) 156.27 554.31 P
5 F
-0.03 ( properties described in the pre) 183.5 554.31 P
-0.03 (vious section. W) 306.7 554.31 P
-0.03 (e consider \336rst the typed case. In) 372.79 554.31 P
0.56 (certain programming styles, it is common to fork a \050v) 108 542.31 P
0.56 (alue returning\051 function link) 326.61 542.31 P
0.56 (ed to a v) 441.22 542.31 P
0.56 (ariable) 476.79 542.31 P
0.21 (that will e) 108 530.31 P
0.21 (v) 148.17 530.31 P
0.21 (entually hold the result of the fork) 153.02 530.31 P
0.21 (ed function, in the \325future\325. The ob) 290.83 530.31 P
0.21 (vious semantics is) 430.8 530.31 P
-0.02 (that an) 108 518.31 P
-0.02 (y access to such a future v) 134.77 518.31 P
-0.02 (alue will block until there is a v) 239.35 518.31 P
-0.02 (alue present. Historically) 365.32 518.31 P
-0.02 (, the orig-) 464.89 518.31 P
0.21 (inal moti) 108 506.31 P
0.21 (v) 143.8 506.31 P
0.21 (ations for the pSather g) 148.55 506.31 P
0.21 (ate \050originally monitor\051 construct w) 242.65 506.31 P
0.21 (as v) 386.13 506.31 P
0.21 (ery much concerned with) 402.02 506.31 P
-0.4 (future v) 108 494.31 P
-0.4 (alues. In our terminology) 138.73 494.31 P
-0.4 (, a thread w) 237.97 494.31 P
-0.4 (as \325attached\325 to the g) 283.3 494.31 P
-0.4 (ate that w) 364.95 494.31 P
-0.4 (ould recei) 402.92 494.31 P
-0.4 (v) 441.98 494.31 P
-0.4 (e its v) 446.83 494.31 P
-0.4 (alue. W) 469.66 494.31 P
-0.4 (e) 499.56 494.31 P
0.14 (considered it important to allo) 108 482.31 P
0.14 (w multiple threads to be attached to the same g) 228.84 482.31 P
0.14 (ate and this led to the) 418.05 482.31 P
0.44 (idea of a typed g) 108 470.31 P
0.44 (ate as a queue of v) 176.37 470.31 P
0.44 (alues. It w) 252.47 470.31 P
0.44 (as also clear that, in a true parallel en) 294.64 470.31 P
0.44 (vironment, re-) 446.35 470.31 P
0.72 (trie) 108 458.31 P
0.72 (ving a future must be atomic. The remaining three methods of the g) 121.08 458.31 P
0.72 (ate \050and $) 399.92 458.31 P
7 F
0.8 (ATTACH) 440.79 458.31 P
5 F
0.72 (, etc.\051) 480.79 458.31 P
2.73 (classes:h) 108 446.31 P
7 F
3.04 (as_thread:BOOL, gate.threads:$LOCK,) 143.55 446.31 P
5 F
2.73 ( and) 321.13 446.31 P
7 F
3.04 (gate.no_threads:$LOCK) 346.03 446.31 P
5 F
2.73 (  deal with) 453.87 446.31 P
(these issues.) 108 434.31 T
0.34 ( The) 108 412.31 P
7 F
0.37 (BOOL) 129.22 412.31 P
5 F
0.34 ( function,) 157.01 412.31 P
7 F
0.37 (has_thread) 198.51 412.31 P
5 F
0.34 (, is non-blocking and just gi) 248.54 412.31 P
0.34 (v) 361.63 412.31 P
0.34 (es a snapshot of whether there are) 366.48 412.31 P
-0.19 (an) 108 400.31 P
-0.19 (y threads attached to this g) 117.29 400.31 P
-0.19 (ate. The other tw) 223.23 400.31 P
-0.19 (o methods ha) 290.33 400.31 P
-0.19 (v) 343.08 400.31 P
-0.19 (e return type $) 347.93 400.31 P
7 F
-0.21 (LOCK) 405.4 400.31 P
5 F
-0.19 ( and participate in) 432.63 400.31 P
0.82 (the full range of lock constructs. As e) 108 388.31 P
0.82 (xpected,) 263.54 388.31 P
7 F
0.91 (gate.threads) 300.45 388.31 P
5 F
0.82 (will lock until g) 359.73 388.31 P
0.82 (ate has at least one) 425.75 388.31 P
0.61 (thread attached and) 108 376.31 P
7 F
0.68 (gate.no_threads) 190.08 376.31 P
5 F
0.61 ( will lock until there are no attached threads. Notice that in) 262.35 376.31 P
0.01 (these cases, as well as) 108 364.31 P
7 F
0.01 (empty) 198.56 364.31 P
5 F
0.01 ( and) 225.79 364.31 P
7 F
0.01 (not_empty) 245.25 364.31 P
5 F
0.01 (, the g) 291.29 364.31 P
0.01 (ate itself is also lock) 315.97 364.31 P
0.01 (ed. The) 397.55 364.31 P
7 F
0.01 (par ... end) 430.06 364.31 P
5 F
0.01 (syntax) 477.89 364.31 P
0.33 (w) 108 352.31 P
0.33 (as not included in earlier v) 115.12 352.31 P
0.33 (ersions of pSather because this can be e) 223 352.31 P
0.33 (xpressed in terms of the other) 383.75 352.31 P
0.59 (primiti) 108 340.31 P
0.59 (v) 134.98 340.31 P
0.59 (es. Y) 139.83 340.31 P
0.59 (ou might w) 159.87 340.31 P
0.59 (ant to try this; the answer will appear later in the te) 206.5 340.31 P
0.59 (xt. There is a speci\336c) 416.39 340.31 P
(syntax for attaching a thread to a g) 108 328.31 T
(ate:) 246.53 328.31 T
7 F
( gate :- expression) 165.5 306.31 T
5 F
1.07 (The :- notation is intended to con) 108 284.31 P
1.07 (v) 246.77 284.31 P
1.07 (e) 251.62 284.31 P
1.07 (y the notion of incomplete \050future\051 assignment. F) 255.91 284.31 P
1.07 (or untyped) 459.88 284.31 P
0.24 (g) 108 272.31 P
0.24 (ates, e) 112.95 272.31 P
0.24 (v) 137.93 272.31 P
0.24 (erything is analogous. The procedure that is attached to an untyped g) 142.78 272.31 P
0.24 (ate must not return a) 420.84 272.31 P
-0.09 (v) 108 260.31 P
-0.09 (alue; on completion the counter of the untyped g) 112.75 260.31 P
-0.09 (ate is incremented. In both cases, the calling code) 306.42 260.31 P
1.38 (can either test if the method has returned \050) 108 248.31 P
7 F
1.53 (gate.size>0) 287.89 248.31 P
5 F
1.38 (\051, block until this happens \050) 339.31 248.31 P
7 F
1.53 (gate.get) 455.65 248.31 P
5 F
1.38 ( or) 491.79 248.31 P
7 F
-0.41 (gate.enqueue) 108 236.31 P
5 F
-0.37 (\051 or lock on this condition \050) 169.16 236.31 P
7 F
-0.41 (lock gate.not_empty) 276.39 236.31 P
5 F
-0.37 ( ...\051. This pro) 365.46 236.31 P
-0.37 (vides a rich set of pro-) 416.15 236.31 P
-0.6 (gramming options for dealing with threads doing speculati) 108 224.31 P
-0.6 (v) 337.73 224.31 P
-0.6 (e computation., etc. F) 342.58 224.31 P
-0.6 (or e) 427.3 224.31 P
-0.6 (xample, instead) 441.83 224.31 P
0.57 (of enclosing a set of fork) 108 212.31 P
0.57 (ed functions in a) 210.43 212.31 P
7 F
0.63 (par ... end) 281.58 212.31 P
5 F
0.57 (brack) 331.28 212.31 P
0.57 (et, one could attach them all to some) 353.39 212.31 P
-0.49 (untyped g) 108 200.31 P
-0.49 (ate,) 147.18 200.31 P
7 F
-0.54 (g) 163.35 200.31 P
5 F
-0.49 (, and then code:) 168.91 200.31 P
7 F
-0.54 (lock g.no_threads then end) 232.78 200.31 P
5 F
-0.49 (.The) 351.78 200.31 P
7 F
-0.54 (sync) 371.85 200.31 P
5 F
-0.49 (command discussed in Sec-) 394.64 200.31 P
-0.58 (tion 1.3.1 can also be used; e) 108 188.31 P
-0.58 (x) 219.89 188.31 P
-0.58 (ecuting a) 224.74 188.31 P
7 F
-0.65 (sync) 262.45 188.31 P
5 F
-0.58 ( in a thread attached to a g) 283.02 188.31 P
-0.58 (ate synchronizes with all other) 384.13 188.31 P
(threads attached to the same g) 108 176.31 T
(ate.) 228.2 176.31 T
-0.51 (There is currently much less use of the attach statement, futures, et. al. than we anticipated. Certainly) 108 154.31 P
0.19 (the) 108 142.31 P
7 F
0.21 (fork) 122.91 142.31 P
5 F
0.19 ( and) 139.58 142.31 P
7 F
0.21 (parloop) 159.4 142.31 P
5 F
0.19 ( mechanisms are clearer when the) 192.75 142.31 P
0.19 (y apply) 328.77 142.31 P
0.19 (. It is too early to kno) 358.03 142.31 P
0.19 (w whether this) 444.74 142.31 P
-0.27 (trend will continue or whether we will start de) 108 130.31 P
-0.27 (v) 290.57 130.31 P
-0.27 (eloping patterns that rely hea) 295.42 130.31 P
-0.27 (vily on these more \337e) 410.23 130.31 P
-0.27 (x-) 495.67 130.31 P
-0.5 (ible mechanisms. W) 108 118.31 P
-0.5 (e will present tw) 187.57 118.31 P
-0.5 (o arti\336cial e) 252.33 118.31 P
-0.5 (xamples that gi) 298.94 118.31 P
-0.5 (v) 358.79 118.31 P
-0.5 (e an idea of what can be easily done) 363.64 118.31 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "218" 218
%%Page: "219" 219
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 207.25 710.84 T
(onization Extension :) 248.41 710.84 T
0 F
(18.4) 328.03 710.84 T
(GA) 345.76 710.84 T
(TES and attached thr) 358.3 710.84 T
(eads) 439.5 710.84 T
6 10 Q
(219) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.48 (with these mechanisms. Suppose that we w) 108 659.33 P
0.48 (anted to fork of) 283.81 659.33 P
0.48 (f a number of threads to try alternati) 346.92 659.33 P
0.48 (v) 494.71 659.33 P
0.48 (e) 499.56 659.33 P
-0.09 (w) 108 647.33 P
-0.09 (ays of solving the same problem, this might be searching a data base or the internet or v) 115.12 647.33 P
-0.09 (arious ap-) 464.38 647.33 P
-0.4 (proaches to an AI task. Our to) 108 635.33 P
-0.4 (y e) 225.76 635.33 P
-0.4 (xample just has dif) 237.16 635.33 P
-0.4 (ferent threads looking for a random number with) 311.54 635.33 P
(a particular property; it is the control that is of interest.) 108 623.33 T
-0.02 (The) 108 354.33 P
7 F
-0.02 (GATE{INT}) 126.03 354.33 P
5 F
-0.02 (,) 176.05 354.33 P
7 F
-0.02 (num,) 181.03 354.33 P
5 F
-0.02 ( will ha) 203.26 354.33 P
-0.02 (v) 233.01 354.33 P
-0.02 (e the w) 237.86 354.33 P
-0.02 (ork) 266.6 354.33 P
-0.02 (er threads attached to it and their answers will be placed) 279.83 354.33 P
0.05 (on its queue when a) 108 342.33 P
0.05 (v) 187.42 342.33 P
0.05 (ailable. The) 192.17 342.33 P
7 F
0.05 (BOOL, stop) 241.97 342.33 P
5 F
0.05 (, is a global signal for the other w) 294.27 342.33 P
0.05 (ork) 428.7 342.33 P
0.05 (ers to stop after) 441.93 342.33 P
-0.14 (an answer has been found. The) 108 330.33 P
7 F
-0.15 (INT, win,) 233.52 330.33 P
5 F
-0.14 ( is the thread number of the winning w) 272.81 330.33 P
-0.14 (ork) 426.58 330.33 P
-0.14 (er) 439.82 330.33 P
-0.14 (, this will usu-) 447.18 330.33 P
-0.08 (ally v) 108 318.33 P
-0.08 (ary e) 130.17 318.33 P
-0.08 (v) 149.55 318.33 P
-0.08 (en on a uniprocessor platform. The) 154.4 318.33 P
7 F
-0.09 (main) 296.39 318.33 P
5 F
-0.08 ( program starts four w) 318.06 318.33 P
-0.08 (ork) 406.51 318.33 P
-0.08 (ers and gi) 419.74 318.33 P
-0.08 (v) 458.21 318.33 P
-0.08 (es each its) 463.06 318.33 P
-0.4 (inte) 108 306.33 P
-0.4 (ger) 122.85 306.33 P
7 F
-0.45 (id) 137.72 306.33 P
5 F
-0.4 (. The forking thread is not block) 145.5 306.33 P
-0.4 (ed \050as it w) 272.14 306.33 P
-0.4 (ould be with par ... end\051 and could do other com-) 312.21 306.33 P
-0.08 (putation. In this case it just w) 108 294.33 P
-0.08 (aits \050) 224.9 294.33 P
7 F
-0.09 (num.dequeue) 244.53 294.33 P
5 F
-0.08 (\051 for the \336rst answer) 305.68 294.33 P
-0.08 (, sets the) 386.03 294.33 P
7 F
-0.09 (stop) 423 294.33 P
5 F
-0.08 ( \337ag, e) 441.9 294.33 P
-0.08 (xports it,) 468.52 294.33 P
0.13 (and prints the \336rst answer) 108 282.33 P
0.13 (.  Since the w) 211.3 282.33 P
0.13 (ork) 265.88 282.33 P
0.13 (er threads might be on separate clusters, the e) 279.11 282.33 P
0.13 (xplicit) 461.92 282.33 P
7 F
0.15 (ex-) 490.11 282.33 P
(port) 108 270.33 T
5 F
( is needed to mak) 125.23 270.33 T
(e the \337ag visible to all the w) 195.12 270.33 T
(ork) 308.07 270.33 T
(ers.) 321.3 270.33 T
-0.2 (The w) 108 248.33 P
-0.2 (ork) 132.97 248.33 P
-0.2 (er threads each initialize the random number generator dif) 146.2 248.33 P
-0.2 (ferently and then loop until the) 376.54 248.33 P
-0.2 (y) 499 248.33 P
0.35 (\336nd a number di) 108 236.33 P
0.35 (visible by 71 or \336nd out that another w) 174.64 236.33 P
0.35 (ork) 332.9 236.33 P
0.35 (er has done so. At the start of the loop,) 346.13 236.33 P
0.45 (each thread does an e) 108 224.33 P
0.45 (xplicit) 195.18 224.33 P
7 F
0.5 (import) 223.7 224.33 P
5 F
0.45 ( to mak) 251.48 224.33 P
0.45 (e sure that it has a current cop) 282.29 224.33 P
0.45 (y of) 405.05 224.33 P
7 F
0.5 (stop) 424.29 224.33 P
5 F
0.45 (. In this simple) 443.19 224.33 P
-0.47 (case the whole program terminates so) 108 212.33 P
7 F
-0.53 (stop) 258.46 212.33 P
5 F
-0.47 ( isn\325) 277.36 212.33 P
-0.47 (t really needed. But termination is an important prob-) 294.2 212.33 P
(lem in general and we will return to this case in the ne) 108 200.33 T
(xt section.) 324.48 200.33 T
0.03 (The ne) 108 178.33 P
0.03 (xt e) 135.37 178.33 P
0.03 (xample is a slight modi\336cation of this one that illustrates an important additional control) 149.97 178.33 P
0.61 (option in pSather) 108 166.33 P
0.61 (. Normally) 177.56 166.33 P
0.61 (, an) 220.85 166.33 P
0.61 (y nested set of calls \050whether fork) 235.75 166.33 P
0.61 (ed or called in the same thread\051) 374.82 166.33 P
0.48 (must be completely unw) 108 154.33 P
0.48 (ound when the result is found and needs to be returned. The g) 207.38 154.33 P
0.48 (ate mecha-) 459.93 154.33 P
0.09 (nisms mak) 108 142.33 P
0.09 (e it easy to emplo) 151.05 142.33 P
0.09 (y a kind of \325continuation passing\325 control technique that allo) 221.87 142.33 P
0.09 (ws the di-) 464.38 142.33 P
1.15 (rect return of a result to the top-le) 108 130.33 P
1.15 (v) 250.5 130.33 P
1.15 (el caller) 255.35 130.33 P
1.15 (. It turns out that intermediate threads can terminate) 287.88 130.33 P
0.15 (without causing an) 108 118.33 P
0.15 (y dif) 183.69 118.33 P
0.15 (\336culty) 202.2 118.33 P
0.15 (. The task is the same - se) 227.11 118.33 P
0.15 (v) 330.64 118.33 P
0.15 (eral threads are gi) 335.49 118.33 P
0.15 (v) 407.04 118.33 P
0.15 (en the task of \336nding a) 411.89 118.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr num:GATE{INT};) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr stop:BOOL;) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr win:INT;) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i:INT;) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      num:=#;) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stop:=false;) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop i:=0.upto!\0503\051;) 144 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       num :- worker\050i\051;) 178.2 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stop:=true; SYS::export;  -- make this known) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT + num.dequeue + "   thread " + win  + '\134n';) 144 486.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;  -- main) 144 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   worker\050id:INT\051:INT  is) 144 459.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      RND::seed\05031463*\050id+43\051\051;) 144 450.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop  SYS::import;  -- stop is a global, import its value) 144 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       if stop then return\0500\051 end;) 178.2 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       ans::=RND::int\0500,10000\051;) 178.2 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       if ans.mod\05071\051=0 then win:=id; return ans end;) 178.2 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; --loop) 144 405.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- worker) 144 396.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(  end; -- class MAIN) 144 387.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 373.13 2 L
V
0 Z
N
489.6 611.88 489.6 373.13 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 373 489.73 373 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "219" 219
%%Page: "220" 220
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(220) 108 710.84 T
8 8 Q
(The Synchr) 190.11 710.84 T
(onization Extension :) 231.27 710.84 T
0 F
(18.4 GA) 310.9 710.84 T
(TES and attached thr) 341.16 710.84 T
(eads) 422.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.55 (random number di) 108 659.33 P
0.55 (visible by 71. The dif) 182.73 659.33 P
0.55 (ference is that here we separate the attachment of threads) 270.51 659.33 P
0.47 (from the return of answers W) 108 647.33 P
0.47 (e also \336x a coordination b) 227.59 647.33 P
0.47 (ug in the pre) 333.35 647.33 P
0.47 (vious e) 384.79 647.33 P
0.47 (xample. Before we ret) 413.72 647.33 P
-0.32 (urned the id of the winning thread separately from the answer and could not be sure that the tw) 108 635.33 P
-0.32 (o v) 481.52 635.33 P
-0.32 (al-) 493.45 635.33 P
(ues corresponded. Here we return a tuple \050v) 108 623.33 T
(al, thread\051 and a) 282.69 623.33 T
(v) 346.91 623.33 T
(oid that problem.) 351.71 623.33 T
-0.39 (There is one additional untyped g) 108 336.33 P
-0.39 (ate,) 240.16 336.33 P
7 F
-0.43 (dum) 256.44 336.33 P
5 F
-0.39 (, which is a dummy used for attaching the w) 275.89 336.33 P
-0.39 (ork) 449.51 336.33 P
-0.39 (er threads.) 462.74 336.33 P
-0.02 (The) 108 324.33 P
7 F
-0.02 (worker) 126.03 324.33 P
5 F
-0.02 ( code is changed so that it tak) 156.03 324.33 P
-0.02 (es tw) 273.85 324.33 P
-0.02 (o parameters, its) 294.57 324.33 P
7 F
-0.02 (id) 362.83 324.33 P
5 F
-0.02 ( and the g) 370.61 324.33 P
-0.02 (ate,) 409.67 324.33 P
7 F
-0.02 (g) 426.32 324.33 P
5 F
-0.02 (,  to which the an-) 431.88 324.33 P
-0.22 (swer should be returned and it no) 108 312.33 P
-0.22 (w has no return v) 239.75 312.33 P
-0.22 (alue. When a w) 308.06 312.33 P
-0.22 (ork) 369.51 312.33 P
-0.22 (er \336nds an answer) 382.74 312.33 P
-0.22 (, it enqueues) 454.17 312.33 P
-0.38 (a tuple with  the answer and its id on the g) 108 300.33 P
-0.38 (ate gi) 272.95 300.33 P
-0.38 (v) 294.26 300.33 P
-0.38 (en to it as a parameter and returns. The continuation) 299.11 300.33 P
0.02 (idea isn\325) 108 288.33 P
0.02 (t used here, b) 142 288.33 P
0.02 (ut a w) 195.17 288.33 P
0.02 (ork) 219.55 288.33 P
0.02 (er could pass on the answer g) 232.78 288.33 P
0.02 (ate \050and possibly task state\051 to another) 350.58 288.33 P
0.47 (thread and terminate or do other w) 108 276.33 P
0.47 (ork, for e) 248.99 276.33 P
0.47 (xample return additional answers. Another possibility) 286.7 276.33 P
-0.2 (w) 108 264.33 P
-0.2 (ould be to ha) 115.12 264.33 P
-0.2 (v) 166.25 264.33 P
-0.2 (e a w) 171.1 264.33 P
-0.2 (ork) 191.69 264.33 P
-0.2 (er that w) 204.92 264.33 P
-0.2 (as attached to a typed g) 239.4 264.33 P
-0.2 (ate enqueue results on the same g) 331.92 264.33 P
-0.2 (ate before) 464.5 264.33 P
(its \336nal return.) 108 252.33 T
-0.04 (A use of the attach construct in a real application can be found in Ben Gomes\325 thesis. The task is to) 108 230.33 P
(analyze a neural netw) 108 218.33 T
(ork graph and partition it se) 194.81 218.33 T
(gments that are placed on separate clusters<>.) 305.48 218.33 T
4 12 Q
(18.4.1   T) 108 177 T
(asks, Actor) 157.74 177 T
(s, etc.) 222.25 177 T
5 10 Q
0.46 (One popular style of parallel programing emplo) 108 154.33 P
0.46 (ys the metaphor of cooperating acti) 301.76 154.33 P
0.46 (v) 445.18 154.33 P
0.46 (e agents. The) 450.03 154.33 P
-0.27 (pure form of this is gi) 108 142.33 P
-0.27 (v) 193.36 142.33 P
-0.27 (en in the v) 198.21 142.33 P
-0.27 (arious Actor formulations <>, b) 239.1 142.33 P
-0.27 (ut it cccurs in man) 364.93 142.33 P
-0.27 (y other forms. In) 437.59 142.33 P
0.05 (pSather) 108 130.33 P
0.05 (, it is f) 138.15 130.33 P
0.05 (airly simple to create and manipulate acti) 163.76 130.33 P
0.05 (v) 328.77 130.33 P
0.05 (e objects; the major issue is that the strong) 333.62 130.33 P
0.44 (compile-time type system of Sather requires typed messages or run-time case statements. W) 108 118.33 P
0.44 (e will) 481.06 118.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MAIN is) 144 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr num:GATE{TUP{INT,INT}};  -- answer is \050val,thread\051) 144 594.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr dum:GATE;) 144 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr stop:BOOL;) 144 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      num:=#; dum:=#;) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stop:=false;) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i:INT;) 144 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop i:=0.upto!\0503\051;) 144 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( dum :- worker\050i,num\051;) 178.2 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ans::=num.dequeue;) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT + ans.t1 + "   thread " + ans.t2  + '\134n';) 144 486.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stop:=true; SYS::export;) 144 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;  -- main) 144 468.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   worker\050id:INT, g:GATE{TUP{INT,INT}}\051  is) 144 450.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      RND::seed\05031463*\050id+43\051\051;) 144 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ans:TUP{INT,INT}:=#\0500,id\051;) 144 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop SYS::import;) 144 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( if stop then return end;) 178.2 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( try::=RND::int\0500,10000\051;) 178.2 405.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( if try.mod\05071\051=0 then g.enqueue\050ans.t1\050try\051\051; return end;) 178.2 396.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; --loop) 144 387.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- worker) 144 378.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MAIN) 144 369.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 611.88 129.6 355.13 2 L
V
0 Z
N
489.6 611.88 489.6 355.13 2 L
V
N
129.48 612 489.73 612 2 L
V
N
129.48 355 489.73 355 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "220" 220
%%Page: "221" 221
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 207.25 710.84 T
(onization Extension :) 248.41 710.84 T
0 F
(18.4) 328.03 710.84 T
(GA) 345.76 710.84 T
(TES and attached thr) 358.3 710.84 T
(eads) 439.5 710.84 T
6 10 Q
(221) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.25 (\336rst present a general tasking package in pSather and then discuss ho) 108 659.33 P
0.25 (w this could be modi\336ed and) 386.89 659.33 P
-0.03 (e) 108 647.33 P
-0.03 (xtended to support v) 112.29 647.33 P
-0.03 (arious paradigms of programing. Since tasks should be free running once cre-) 193.88 647.33 P
-0.24 (ated, the central idea is to use the) 108 635.33 P
7 F
-0.27 (attach) 241.33 635.33 P
5 F
-0.24 ( or :- statement to start a single thread within the object that) 268.57 635.33 P
-0.2 (is the actor or task. T) 108 623.33 P
-0.2 (asks will communicate using objects of the simple) 190.65 623.33 P
7 F
-0.22 (PORT) 392.96 623.33 P
5 F
-0.2 ( class, which w) 420.74 623.33 P
-0.2 (as the) 481.15 623.33 P
0.15 (\336rst e) 108 611.33 P
0.15 (xample in Section 1.4.1. The core tasking functionality will be encapsulated in a partial class) 130.5 611.33 P
7 F
0.38 (TASK) 108 599.33 P
5 F
0.34 (, listed in the table belo) 134.12 599.33 P
0.34 (w) 228.91 599.33 P
0.34 (. V) 235.48 599.33 P
0.34 (arious speci\336c kinds of tasks will  ha) 246.93 599.33 P
0.34 (v) 396.61 599.33 P
0.34 (e their o) 401.46 599.33 P
0.34 (wn class, each of) 434.67 599.33 P
0.32 (which includes) 108 587.33 P
7 F
0.36 (TASK) 171.42 587.33 P
5 F
0.32 (; e) 197.54 587.33 P
0.32 (xamples are gi) 207.44 587.33 P
0.32 (v) 266.16 587.33 P
0.32 (en in the follo) 271.01 587.33 P
0.32 (wing code table. Since all dif) 327.56 587.33 P
0.32 (ferent types of) 445.59 587.33 P
-0.22 (task must communicate, we de\336ne an abstract class $) 108 575.33 P
7 F
-0.24 (TASK) 319.27 575.33 P
5 F
-0.22 (, which e) 345.39 575.33 P
-0.22 (xpresses the common interf) 381.18 575.33 P
-0.22 (ace) 490.68 575.33 P
-0.53 (of all tasks. The abstract de\336nition listed in the table is o) 108 563.33 P
-0.53 (v) 328.1 563.33 P
-0.53 (er) 332.95 563.33 P
-0.53 (-simpli\336ed  in assuming that all messages) 340.52 563.33 P
0.17 (are of type STR; we will discuss the general case shortly) 108 551.33 P
0.17 (.  Elements of abstract sing) 335.67 551.33 P
0.17 (ature include a) 444.79 551.33 P
-0.42 (routine,) 108 539.33 P
7 F
-0.47 (connect) 140.91 539.33 P
5 F
-0.42 ( e) 175.93 539.33 P
-0.42 (x) 182.29 539.33 P
-0.42 (ecuted in a recei) 187.14 539.33 P
-0.42 (ving task, that connects the) 250.87 539.33 P
7 F
-0.47 (outport) 359.86 539.33 P
5 F
-0.42 ( of some source to the) 390.99 539.33 P
7 F
-0.47 (inport) 478.99 539.33 P
5 F
-0.18 (of self and a reader of the) 108 527.33 P
7 F
-0.2 (outport) 211.43 527.33 P
5 F
-0.18 ( that needs to be public for) 242.56 527.33 P
7 F
-0.2 (connect) 350.45 527.33 P
5 F
-0.18 ( to w) 385.47 527.33 P
-0.18 (ork.  Our design requires) 405.02 527.33 P
-0.25 (that each task type pro) 108 515.33 P
-0.25 (vided a subroutine,) 196.82 515.33 P
7 F
-0.28 (body) 274.94 515.33 P
5 F
-0.25 (, that is its main program. A discussion of the) 295.97 515.33 P
7 F
-0.28 (TASK) 477.88 515.33 P
5 F
(class follo) 108 503.33 T
(ws the table.) 148.58 503.33 T
1.06 (The partial class) 108 144.34 P
7 F
1.18 (TASK) 179.23 144.34 P
5 F
1.06 ( will be included in the v) 205.35 144.34 P
1.06 (arious speci\336c task types. It has tw) 310.91 144.34 P
1.06 (o public at-) 456.33 144.34 P
-0.48 (trib) 108 132.34 P
-0.48 (utes,) 121.69 132.34 P
7 F
-0.54 (inport) 142.32 132.34 P
5 F
-0.48 ( and) 167.33 132.34 P
7 F
-0.54 (outport) 185.81 132.34 P
5 F
-0.48 (, which are for no) 216.94 132.34 P
-0.48 (w of type) 285.57 132.34 P
7 F
-0.54 (PORT{STR}) 324.4 132.34 P
5 F
-0.48 (. The pri) 378.86 132.34 P
-0.48 (v) 411.8 132.34 P
-0.48 (ate shared g) 416.55 132.34 P
-0.48 (ate is used) 463.3 132.34 P
-0.15 (to attach all tasks of a gi) 108 120.34 P
-0.15 (v) 204.04 120.34 P
-0.15 (en type. In pSather 1.1 there is no w) 208.89 120.34 P
-0.15 (ay to operate on these threads, b) 351.98 120.34 P
-0.15 (ut one) 479.43 120.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(abstract class $TASK is) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   connect\050sender:$TASK\051;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   outport: PORT{STR};             -- real case is more general) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   body;) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class $TASK) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(partial class TASK < $TASK is) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr inport,outport: PORT{STR};) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private shared all:GATE;         --  all tasks of this type.) 144 411.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is) 144 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.inport:=#;) 144 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.outport:=#;) 144 366.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res) 144 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- create) 144 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   start:SAME is) 144 330.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if void\050all\051 then all:=# end;) 144 321.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      all:-body;) 144 312.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return self) 144 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   stub body;) 144 276.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   send\050datum:STR\051 is) 144 267.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      outport.send\050datum\051) 144 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- send) 144 249.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   receive:STR is                   -- blocks until data present) 144 231.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return inport.receive) 144 222.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- receive) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   connect\050sender:$TASK\051 is         -- useage: receiver.connect\050sender\051) 144 195.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      sender.outport.channel:=inport.channel) 144 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 177.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class TASK) 144 168.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 491.88 129.6 163.13 2 L
V
0 Z
N
489.6 491.88 489.6 163.13 2 L
V
N
129.48 492 489.73 492 2 L
V
N
129.48 163 489.73 163 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "221" 221
%%Page: "222" 222
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(222) 108 710.84 T
8 8 Q
(The Synchr) 190.11 710.84 T
(onization Extension :) 231.27 710.84 T
0 F
(18.4 GA) 310.9 710.84 T
(TES and attached thr) 341.16 710.84 T
(eads) 422.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.22 (can test or lock on whether there an) 108 659.33 P
-0.22 (y threads attached to the g) 248.77 659.33 P
-0.22 (ate,) 352.31 659.33 P
7 F
-0.25 (all) 368.75 659.33 P
5 F
-0.22 (. W) 378.75 659.33 P
-0.22 (e ha) 392.17 659.33 P
-0.22 (v) 408.13 659.33 P
-0.22 (e chosen to ha) 412.98 659.33 P
-0.22 (v) 469.05 659.33 P
-0.22 (e a sep-) 473.9 659.33 P
0.07 (arate) 108 647.33 P
7 F
0.08 (start) 130 647.33 P
5 F
0.07 ( routine so the) 149.45 647.33 P
7 F
0.08 (create) 209.16 647.33 P
5 F
0.07 ( is straightforw) 236.95 647.33 P
0.07 (ard. Recall that e) 297.53 647.33 P
0.07 (v) 365.24 647.33 P
0.07 (ery task class must de\336ne a body) 370.1 647.33 P
0.07 (,) 501.5 647.33 P
-0.23 (speci\336ed as a stub here. The start method attaches a thread e) 108 635.33 P
-0.23 (x) 346.38 635.33 P
-0.23 (ecuting the body to the shared g) 351.23 635.33 P
-0.23 (ate,) 477.57 635.33 P
7 F
-0.25 (all) 494 635.33 P
5 F
0.04 (,and returns self; this mak) 108 623.33 P
0.04 (es it con) 211.67 623.33 P
0.04 (v) 244.68 623.33 P
0.04 (enient to create and start a task in one e) 249.53 623.33 P
0.04 (xpression. The send and) 407.22 623.33 P
-0.3 (recei) 108 611.33 P
-0.3 (v) 127.18 611.33 P
-0.3 (e methods just wrap the same methods in the POR) 132.03 611.33 P
-0.3 (T class of Section 1.4.1.  The connect meth-) 330.07 611.33 P
0.55 (od is used to set the output channel of a sender to be the input channel \050a g) 108 599.33 P
0.55 (ate\051 of the recei) 415.29 599.33 P
0.55 (v) 479.16 599.33 P
0.55 (er) 484.01 599.33 P
0.55 (. A) 491.23 599.33 P
(minimal e) 108 587.33 T
(xample of task useage is pro) 148.13 587.33 T
(vided in the follo) 261.57 587.33 T
(wing table.) 329.93 587.33 T
0.05 ( There are tw) 108 237.34 P
0.05 (o tin) 161.07 237.34 P
0.05 (y task classes,) 179.02 237.34 P
7 F
0.05 (SINK) 238.04 237.34 P
5 F
0.05 ( and) 261.38 237.34 P
7 F
0.05 (SOURCE) 280.92 237.34 P
5 F
0.05 (, each of which includes) 323.7 237.34 P
7 F
0.05 (TASK) 423.35 237.34 P
5 F
0.05 ( and subtypes) 449.47 237.34 P
-0.07 (from $) 108 225.34 P
7 F
-0.08 (TASK) 134.87 225.34 P
5 F
-0.07 (, in the usual Sather f) 160.99 225.34 P
-0.07 (ashion. The sink class consists only of the required body subrou-) 245.54 225.34 P
-0.43 (tine. It loops with a \050blocking\051 recei) 108 213.34 P
-0.43 (v) 248.76 213.34 P
-0.43 (e command, included from) 253.61 213.34 P
7 F
-0.48 (TASK) 362.15 213.34 P
5 F
-0.43 (. If it sees a period in its input) 388.27 213.34 P
-0.36 (it prints a ne) 108 201.34 P
-0.36 (w -line and returns. The source task is a bit more complicated because it needs one e) 156.39 201.34 P
-0.36 (xtra) 488.45 201.34 P
-0.25 (attrib) 108 189.34 P
-0.25 (ute,) 128.91 189.34 P
7 F
-0.28 (ok:GATE) 145.88 189.34 P
5 F
-0.25 (, which will be its starting signal. The creation code is the standard Sather idiom) 186.45 189.34 P
0.59 (, augmenting the) 108 177.34 P
7 F
0.66 (create) 179.21 177.34 P
5 F
0.59 ( routine of the parent class. The) 207 177.34 P
7 F
0.66 (body) 340 177.34 P
5 F
0.59 ( subroutine just w) 361.68 177.34 P
0.59 (aits for a starting) 434.74 177.34 P
-0.55 (signal and then sends three f) 108 165.34 P
-0.55 (amous strings, ag) 218.77 165.34 P
-0.55 (ain using a method included from) 287.35 165.34 P
7 F
-0.61 (TASK) 421.29 165.34 P
5 F
-0.55 (. Finally) 447.41 165.34 P
-0.55 (, there) 479.55 165.34 P
0.25 (is a little) 108 153.34 P
7 F
0.27 (main) 145.69 153.34 P
5 F
0.25 ( program that \336rst creates and starts the tw) 167.36 153.34 P
0.25 (o tasks,) 339.2 153.34 P
7 F
0.27 (source) 372.19 153.34 P
5 F
0.25 ( and) 402.2 153.34 P
7 F
0.27 (sink) 422.13 153.34 P
5 F
0.25 (. W) 439.91 153.34 P
0.25 (e don\325) 453.8 153.34 P
0.25 (t w) 479.13 153.34 P
0.25 (ant) 491.78 153.34 P
-0.15 (source to start generating before it is connected which is wh) 108 141.34 P
-0.15 (y we ha) 346.4 141.34 P
-0.15 (v) 377.01 141.34 P
-0.15 (e it w) 381.86 141.34 P
-0.15 (ait on) 403.68 141.34 P
7 F
-0.17 (ok) 428.38 141.34 P
5 F
-0.15 (. As an e) 438.94 141.34 P
-0.15 (x) 473.33 141.34 P
-0.15 (ercise,) 478.18 141.34 P
0.38 (you might w) 108 129.34 P
0.38 (ant to change) 159.23 129.34 P
7 F
0.43 (SOURCE) 216.19 129.34 P
5 F
0.38 ( so its body w) 258.97 129.34 P
0.38 (aits for a starting message on its input channel) 315.96 129.34 P
0.27 (instead. The main program just connects the sink to the source and signals ok. Because setting the) 108 117.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class SINK  < $TASK is include TASK;) 144 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   body is) 144 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      s:STR;) 144 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop) 144 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( s:=receive;     -- waits for data) 178.2 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( #OUT + s;) 178.2 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( if s ="." then #OUT +'\134n'; break! end) 178.2 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end) 144 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class SINK) 144 486.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class SOURCE < $TASK is include TASK create -> task_create;) 144 468.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr ok:GATE;) 144 459.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME is) 144 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=task_create;) 144 432.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.ok:=#;             -- the extra attr) 144 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res) 144 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 405.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   body is) 144 387.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ok.get;                -- wait for signal) 144 378.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      send\050"Hello "\051;) 144 369.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      send\050"World"\051;) 144 360.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      send\050"."\051;) 144 351.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;end; -- class SOURCE) 144 342.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 333.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class MAIN is) 144 324.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 315.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      source:SOURCE:=#SOURCE.start;) 144 306.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      sink:SINK:=#SINK.start;) 144 297.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      sink.connect\050source\051;) 144 288.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      source.ok.set;) 144 279.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 270.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MAIN) 144 261.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 575.88 129.6 256.13 2 L
V
0 Z
N
489.6 575.88 489.6 256.13 2 L
V
N
129.48 576 489.73 576 2 L
V
N
129.48 256 489.73 256 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "222" 222
%%Page: "223" 223
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 207.25 710.84 T
(onization Extension :) 248.41 710.84 T
0 F
(18.4) 328.03 710.84 T
(GA) 345.76 710.84 T
(TES and attached thr) 358.3 710.84 T
(eads) 439.5 710.84 T
6 10 Q
(223) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.1 (g) 108 659.33 P
0.1 (ate) 112.95 659.33 P
7 F
0.11 (ok) 127.21 659.33 P
5 F
0.1 ( is a synchronization operation, the implicit e) 137.77 659.33 P
0.1 (xport/import \050cf. page 7\051 assures that the) 318.87 659.33 P
7 F
0.11 (con-) 484.55 659.33 P
0.27 (nect) 108 647.33 P
5 F
0.24 ( will be complete before) 126.9 647.33 P
7 F
0.27 (source) 227.81 647.33 P
5 F
0.24 ( starts spe) 257.82 647.33 P
0.24 (wing te) 297.49 647.33 P
0.24 (xt. Hopefully) 327.31 647.33 P
0.24 (, people will rarely need to e) 380.23 647.33 P
0.24 (x-) 495.67 647.33 P
(plicitly consider this kind of consistenc) 108 635.33 T
(y issue.) 264.79 635.33 T
4 12 Q
(18.4.2   Discussion and Extensions) 108 594 T
5 10 Q
0.08 ( The core task functionality just presented pro) 108 571.33 P
0.08 (vides a frame) 291.96 571.33 P
0.08 (w) 345.74 571.33 P
0.08 (ork for b) 352.86 571.33 P
0.08 (uilding up other task or actor) 387.8 571.33 P
0.71 (based mechanisms. Ev) 108 559.33 P
0.71 (en the e) 200.09 559.33 P
0.71 (xisting code allo) 232.45 559.33 P
0.71 (ws multiple sources to connect to a recei) 299.73 559.33 P
0.71 (ving task) 466.9 559.33 P
-0.53 (port. It is straightforw) 108 547.33 P
-0.53 (ard to allo) 194.08 547.33 P
-0.53 (w multiple inport and outport channels, for e) 233.33 547.33 P
-0.53 (xample by using an AR-) 408.35 547.33 P
-0.5 (RA) 108 535.33 P
-0.5 (Y{POR) 120.84 535.33 P
-0.5 (T}. This is almost all that we need to capture the core programming model used by T) 151.71 535.33 P
-0.5 (aylor) 483.45 535.33 P
-0.36 (as the basis for his book<>, p.12-13. T) 108 523.33 P
-0.36 (aylor also allo) 259.28 523.33 P
-0.36 (ws references to ports to be passed in messages,) 314.98 523.33 P
-0.22 (supporting dynamic communication channels. Our task class already allo) 108 511.33 P
-0.22 (ws ne) 398.46 511.33 P
-0.22 (w assignments to the) 421.05 511.33 P
0.08 (outport\050s\051 of a task, b) 108 499.33 P
0.08 (ut there is not yet a w) 193.96 499.33 P
0.08 (ay to pass an) 280.46 499.33 P
0.08 (ything b) 331.95 499.33 P
0.08 (ut strings in a message. The strong) 364.89 499.33 P
-0.01 (typing places constraints on ho) 108 487.33 P
-0.01 (w we can deal with v) 231.58 487.33 P
-0.01 (arious kinds of messages in a uniform w) 315.96 487.33 P
-0.01 (ay) 477.14 487.33 P
-0.01 (. W) 485.93 487.33 P
-0.01 (e) 499.56 487.33 P
-0.08 (will outline one simple solution, retaining the simpli\336cation of a single inport and outport per task.) 108 475.33 P
0.09 (  In this e) 108 453.33 P
0.09 (xample, we will introduce a v) 145.44 453.33 P
0.09 (ersion of the task realization that can really be used to b) 264.62 453.33 P
0.09 (uild) 488.44 453.33 P
-0.22 (signi\336cant systems. The main simpli\336cation in our \336rst solution w) 108 441.33 P
-0.22 (as requiring that each message be) 370.96 441.33 P
0.25 (a string. W) 108 429.33 P
0.25 (e clearly w) 151.85 429.33 P
0.25 (ant messages of man) 196.11 429.33 P
0.25 (y types and this must be reconciled with Sather's strong) 279.73 429.33 P
0.07 (static typing. The sa) 108 417.33 P
0.07 (ving grace is that all types of message should beha) 188.56 417.33 P
0.07 (v) 391.47 417.33 P
0.07 (e the same w) 396.32 417.33 P
0.07 (ay at the le) 448.37 417.33 P
0.07 (v) 491.93 417.33 P
0.07 (el) 496.78 417.33 P
-0.23 (of task communiction, dif) 108 405.33 P
-0.23 (ferences only matter inside the body of tasks. This suggests that we de\336ne) 210.39 405.33 P
0.17 (a general message type,) 108 393.33 P
7 F
0.19 (MSG) 206.15 393.33 P
5 F
0.17 (, with one attrib) 228.93 393.33 P
0.17 (ute \050 here datum\051 of type $) 292.57 393.33 P
7 F
0.19 (OB) 400.24 393.33 P
5 F
0.17 (; the tin) 414.69 393.33 P
0.17 (y class for this) 445.44 393.33 P
-0.46 (is included in the ne) 108 381.33 P
-0.46 (xt code table. The only change in the partial class) 186.55 381.33 P
7 F
-0.51 (TASK) 382.16 381.33 P
5 F
-0.46 ( is that the three instanc-) 408.28 381.33 P
0.93 (es of) 108 369.33 P
7 F
1.03 (STR) 131.51 369.33 P
5 F
0.93 ( are replaced by) 151.51 369.33 P
7 F
1.03 (MSG) 221.3 369.33 P
5 F
0.93 ( and this modi\336cation is not sho) 244.08 369.33 P
0.93 (wn. F) 377.18 369.33 P
0.93 (or our e) 400.74 369.33 P
0.93 (xample, the class) 433.55 369.33 P
7 F
(SOURCE) 108 357.33 T
5 F
( requires no change at all and is also not repeated.) 150.78 357.33 T
0.2 ( The most important change is in the abstract class, $) 108 335.33 P
7 F
0.22 (TASK) 321.92 335.33 P
5 F
0.2 (, which w) 348.05 335.33 P
0.2 (as just a hack in the pre) 387.51 335.33 P
0.2 (vious) 482.33 335.33 P
-0.16 (e) 108 323.33 P
-0.16 (xample. W) 112.29 323.33 P
-0.16 (e no) 155.21 323.33 P
-0.16 (w can specify a compete and general interf) 171.74 323.33 P
-0.16 (ace for tasks. As we will see, all kinds of) 341.86 323.33 P
-0.26 (tasks can communicate using all kinds of messages with these general mechanisms. The abstract in-) 108 311.33 P
-0.01 (terf) 108 299.33 P
-0.01 (ace speci\336es the functionality needed by an) 121.78 299.33 P
-0.01 (y task ; an) 295.4 299.33 P
-0.01 (y class that includes) 336.04 299.33 P
7 F
-0.01 (TASK) 418.76 299.33 P
5 F
-0.01 ( and supplies a) 444.88 299.33 P
-0.14 (body will comply with the interf) 108 287.33 P
-0.14 (ace. It is easy to con) 236.9 287.33 P
-0.14 (v) 316.86 287.33 P
-0.14 (ert our pre) 321.71 287.33 P
-0.14 (vious e) 362.82 287.33 P
-0.14 (xample to use the more gen-) 391.14 287.33 P
0.09 (eral) 108 275.33 P
7 F
0.1 (MSG) 125.58 275.33 P
5 F
0.09 ( class. Consider the re) 148.36 275.33 P
0.09 (vised code for the) 236.52 275.33 P
7 F
0.1 (SINK) 310.76 275.33 P
5 F
0.09 ( class, included in the code table. The ne) 334.1 275.33 P
0.09 (w) 496.78 275.33 P
-0.37 (body code ob) 108 263.33 P
-0.37 (viously needs a v) 161 263.33 P
-0.37 (ariable \050) 228.81 263.33 P
7 F
-0.41 (m) 261.49 263.33 P
5 F
-0.37 (\051 of type) 269.82 263.33 P
7 F
-0.41 (MSG) 305.1 263.33 P
5 F
-0.37 ( as well as the string from before. Recall that) 327.88 263.33 P
-0.21 (the data \336eld of) 108 251.33 P
7 F
-0.23 (MSG) 172.14 251.33 P
5 F
-0.21 ( is) 194.92 251.33 P
7 F
-0.23 (datum) 206.17 251.33 P
5 F
-0.21 (; the local v) 233.96 251.33 P
-0.21 (ariable) 280.01 251.33 P
7 F
-0.23 (md) 309.51 251.33 P
5 F
-0.21 ( is needed beacuse typcase tak) 323.4 251.33 P
-0.21 (es an identi\336er) 443.59 251.33 P
-0.21 (.) 501.5 251.33 P
0.74 (The code has tw) 108 239.33 P
0.74 (o typecase branches, b) 175.38 239.33 P
0.74 (ut ignore the second branch for no) 267.37 239.33 P
0.74 (w) 408.74 239.33 P
0.74 (. The code in the \336rst) 415.31 239.33 P
-0.31 (branch is unchanged, the ne) 108 227.33 P
-0.31 (w v) 217.89 227.33 P
-0.31 (ersion of) 232.15 227.33 P
7 F
-0.34 (SINK) 269.31 227.33 P
5 F
-0.31 ( just needs an e) 292.65 227.33 P
-0.31 (xtra le) 352.38 227.33 P
-0.31 (v) 377.09 227.33 P
-0.31 (el of indirection since the mes) 381.94 227.33 P
7 F
-0.34 (-) 500.67 227.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "223" 223
%%Page: "224" 224
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(224) 108 710.84 T
8 8 Q
(The Synchr) 190.11 710.84 T
(onization Extension :) 231.27 710.84 T
0 F
(18.4 GA) 310.9 710.84 T
(TES and attached thr) 341.16 710.84 T
(eads) 422.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.35 (sage isn't itself a string b) 108 659.33 P
-0.35 (ut has a string datum. If this were the only added functionality in the second) 204.79 659.33 P
(task e) 108 647.33 T
(xample, the main program w) 130.9 647.33 T
(ould require no change.) 246.06 647.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class MSG is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr datum:$OB;) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create\050dd:$OB\051:SAME is) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.datum:=dd;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MSG) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $TASK is) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   connect\050sender:$TASK\051;) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   outport: PORT{MSG};             -- now more general) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME;) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   start:SAME;) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   send\050datum:MSG\051;) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   receive:MSG;) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   body;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class $TASK) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class SINK  < $TASK is include TASK;) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   body is) 144 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      m:MSG; s:STR;) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( m:=receive; md::=m.datum;) 178.2 411.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( typecase md) 178.2 402.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( when STR then s:=md;) 178.2 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    #OUT + s;) 178.2 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    if s ="." then #OUT +'\134n'; break! end) 178.2 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( when RFCONN then) 178.2 366.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    connect\050md.sender\051) 178.2 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( end; --typecase) 178.2 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end) 144 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 330.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class SINK) 144 321.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 312.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class RFCONN is) 144 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr sender:$TASK;) 144 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create\050s:$TASK\051:SAME is) 144 276.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 267.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.sender:=s;) 144 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res) 144 249.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class RFCONN) 144 231.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 222.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class MAIN is) 144 213.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   main is) 144 204.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      source:SOURCE:=#SOURCE.start;) 144 195.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      sink:SINK:=#SINK.start;) 144 186.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      msg:MSG:=#\050#RFCONN\050source\051\051;) 144 177.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      sink.inport.send\050msg\051;      -- unSathery, but simple) 144 168.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      source.ok.set;) 144 159.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 150.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MAIN) 144 141.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 132.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 127.13 2 L
V
0 Z
N
489.6 635.88 489.6 127.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 127 489.73 127 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "224" 224
%%Page: "225" 225
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(The Synchr) 207.25 710.84 T
(onization Extension :) 248.41 710.84 T
0 F
(18.4) 328.03 710.84 T
(GA) 345.76 710.84 T
(TES and attached thr) 358.3 710.84 T
(eads) 439.5 710.84 T
6 10 Q
(225) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.43 (Ho) 108 637.33 P
0.43 (we) 119.97 637.33 P
0.43 (v) 131.38 637.33 P
0.43 (er) 136.23 637.33 P
0.43 (, no) 143.6 637.33 P
0.43 (w that we ha) 158.78 637.33 P
0.43 (v) 210.69 637.33 P
0.43 (e messages of arbitrary type, we can ful\336ll our earlier promise to allo) 215.54 637.33 P
0.43 (w) 496.78 637.33 P
0.21 (connections to be established by message. This is an important capability and can support systems) 108 625.33 P
0.08 (with v) 108 613.33 P
0.08 (ery dynamic connecti) 133.21 613.33 P
0.08 (vity) 219.21 613.33 P
0.08 (. It is quite easy to do this with the mechanisms that we ha) 234.12 613.33 P
0.08 (v) 468.25 613.33 P
0.08 (e estab-) 473.1 613.33 P
-0.18 (lished. Ag) 108 601.33 P
-0.18 (ain we need a tin) 148.88 601.33 P
-0.18 (y class to de\336ne a message type, here) 215.78 601.33 P
7 F
-0.2 (RFCONN) 366.27 601.33 P
5 F
-0.18 ( for request-for) 409.05 601.33 P
-0.18 (-connec-) 469.02 601.33 P
0.55 (tion, sho) 108 589.33 P
0.55 (wn in the code table abo) 142.75 589.33 P
0.55 (v) 242.81 589.33 P
0.55 (e.  It simply has one attrib) 247.66 589.33 P
0.55 (ute of type $) 354.89 589.33 P
7 F
0.61 (TASK) 406.8 589.33 P
5 F
0.55 (, the sending task) 432.92 589.33 P
-0.24 (that needs to be connected to the inport of some recei) 108 577.33 P
-0.24 (v) 318.62 577.33 P
-0.24 (er) 323.47 577.33 P
-0.24 (. W) 330.69 577.33 P
-0.24 (e can no) 344.08 577.33 P
-0.24 (w understand the second branch) 376.67 577.33 P
-0.49 (of the typecase statement in the) 108 565.33 P
7 F
-0.55 (SINK) 233.36 565.33 P
5 F
-0.49 ( class. If a) 256.7 565.33 P
7 F
-0.55 (SINK) 297.77 565.33 P
5 F
-0.49 ( object gets an) 321.11 565.33 P
7 F
-0.55 (RFCONN) 379.14 565.33 P
5 F
-0.49 ( message, it e) 421.9 565.33 P
-0.49 (x) 474.16 565.33 P
-0.49 (ecutes) 479.01 565.33 P
0.35 (its) 108 553.33 P
7 F
0.39 (connect) 120.3 553.33 P
5 F
0.35 ( method which sets the) 155.32 553.33 P
7 F
0.39 (outport) 251.25 553.33 P
5 F
0.35 ( of the task listed as the desired sender in the message.) 282.38 553.33 P
1.14 (The re) 108 541.33 P
1.14 (vised) 134.71 541.33 P
7 F
1.27 (main) 159.46 541.33 P
5 F
1.14 ( program illustrates ho) 181.13 541.33 P
1.14 (w this might be used. Rather than directly link our one) 274.57 541.33 P
0.18 (source to the one sink as before, the main program constructs and sends a message to do this. This) 108 529.33 P
0.02 (is no impro) 108 517.33 P
0.02 (v) 153.45 517.33 P
0.02 (ement in the e) 158.3 517.33 P
0.02 (xample, b) 214.58 517.33 P
0.02 (ut should illustrate ho) 253.84 517.33 P
0.02 (w connection requests can be passed and) 340.6 517.33 P
-0.09 (carried out within the design. This almost completes the requirements for F) 108 505.33 P
-0.09 (oster's tasks. He also re-) 407.88 505.33 P
-0.07 (quires that a task be placeable on dif) 108 493.33 P
-0.07 (ferent processors;  the pSather mechanisms for this will be dis-) 253.06 493.33 P
(cussed in Section 1.5.) 108 481.33 T
0.49 (The tasking and rende) 108 459.33 P
0.49 (v) 197.81 459.33 P
0.49 (ous mechanisms of Ada are similar to the abo) 202.61 459.33 P
0.49 (v) 389.14 459.33 P
0.49 (e with the major dif) 393.99 459.33 P
0.49 (ference) 474.58 459.33 P
-0.41 (being guarded disjuncti) 108 447.33 P
-0.41 (v) 200.81 447.33 P
-0.41 (e method call. In f) 205.66 447.33 P
-0.41 (act, the disjuncti) 276.96 447.33 P
-0.41 (v) 341.73 447.33 P
-0.41 (e locking construct of Section 1.3.5 w) 346.58 447.33 P
-0.41 (as) 495.67 447.33 P
0.36 (partially based on the Ada guarded select statement . Rende) 108 435.33 P
0.36 (v) 349.8 435.33 P
0.36 (ous \050 both the caller and callee being) 354.6 435.33 P
0.53 (blocking\051 does not seem lik) 108 423.33 P
0.53 (e a good style for pSather\325) 220.58 423.33 P
0.53 (s goals, b) 328.5 423.33 P
0.53 (ut it is straightforw) 366.86 423.33 P
0.53 (ard to achie) 444.75 423.33 P
0.53 (v) 492.21 423.33 P
0.53 (e.) 497.06 423.33 P
0.28 (One w) 108 411.33 P
0.28 (ay to implement this in pSather w) 134.56 411.33 P
0.28 (ould be to use e) 271.11 411.33 P
0.28 (xplicit message passing, possibly with the) 334.84 411.33 P
1.12 (task mechanisms of this section. An implementation closer to Ada syntax could be achie) 108 399.33 P
1.12 (v) 476.1 399.33 P
1.12 (ed by) 480.95 399.33 P
-0.12 (grouping the v) 108 387.33 P
-0.12 (arious accessible methods \050corresponding to Ada entries\051 and associating each group) 165.84 387.33 P
0.2 (with a MUTEX object. There w) 108 375.33 P
0.2 (ould be one such MUTEX  object for each select/accept block and) 236.63 375.33 P
-0.38 (a single MUTEX v) 108 363.33 P
-0.38 (ariable that corresponded to the current state \050~ which select statement\051 . A meth-) 183 363.33 P
0.23 (od w) 108 351.33 P
0.23 (ould start by locking the contolling MUTEX.  Recall that the natural state of a pSather object) 127.85 351.33 P
-0.18 (is passi) 108 339.33 P
-0.18 (v) 136.74 339.33 P
-0.18 (e; if no acti) 141.59 339.33 P
-0.18 (v) 186.09 339.33 P
-0.18 (e threads are running the object is, in ef) 190.94 339.33 P
-0.18 (fect, w) 347.3 339.33 P
-0.18 (aiting for a rende) 374.24 339.33 P
-0.18 (v) 442.05 339.33 P
-0.18 (ous. First con-) 446.85 339.33 P
0.17 (sider the case where there is only one select statement in the Ada code, then a single MUTEX will) 108 327.33 P
0.17 (ensure that e) 108 315.33 P
0.17 (xactly one of the entries e) 158.73 315.33 P
0.17 (x) 262.44 315.33 P
0.17 (ecutes at a time and callers of an) 267.29 315.33 P
0.17 (y others will w) 398.55 315.33 P
0.17 (ait for their) 458.67 315.33 P
0.47 (rende) 108 303.33 P
0.47 (v) 129.96 303.33 P
0.47 (ous. A guarded select w) 134.76 303.33 P
0.47 (ould be modeled by a guarded lock statement that e) 232.37 303.33 P
0.47 (xits if its guard) 442.3 303.33 P
0.41 (f) 108 291.33 P
0.41 (ails. Multiple select statements w) 111.23 291.33 P
0.41 (ould map to multiple MUTEXes, with the one corresponding to) 245.84 291.33 P
-0.18 (the current state  being assigned to the controlling v) 108 279.33 P
-0.18 (ariable. There is a standard pSather coding style) 313.07 279.33 P
-0.23 (that is quite similar) 108 267.33 P
-0.23 (. A collection of methods is collected into a class without an acti) 183.72 267.33 P
-0.23 (v) 438.78 267.33 P
-0.23 (e thread. Using) 443.63 267.33 P
0.51 (classes can call these methods in either blocking or non-blocking \050 :- \051 mode. If mutual e) 108 255.33 P
0.51 (xclusion) 470.11 255.33 P
-0.37 (o) 108 243.33 P
-0.37 (v) 112.85 243.33 P
-0.37 (er some subset of methods is desired, these all start by locking on a shared MUTEX. In f) 117.7 243.33 P
-0.37 (act, using) 466.04 243.33 P
(the adv) 108 231.33 T
(anced techniques of Section 1.6.3, one can de\336ne rende) 136.91 231.33 T
(v) 358.55 231.33 T
(ous locks in Sather) 363.35 231.33 T
(.) 438.63 231.33 T
1.07 (Another widespread paradigm appears in the v) 108 209.33 P
1.07 (arious forms of Actor systems, as e) 300.76 209.33 P
1.07 (x) 447.8 209.33 P
1.07 (empli\336ed by) 452.65 209.33 P
0.03 (Agha\325) 108 197.33 P
0.03 (s book<>.  Most of the required functionality for Actors can be b) 132.44 197.33 P
0.03 (uilt easily from the task and) 392.46 197.33 P
0.47 (messaging f) 108 185.33 P
0.47 (acilities described in the this section. The interesting additional requirement is that an) 156.42 185.33 P
-0.58 (actor can change its beha) 108 173.33 P
-0.58 (vior after processing a message. This is typically done with a) 205.98 173.33 P
7 F
-0.65 (become) 446.19 173.33 P
5 F
-0.58 (  <be-) 481.76 173.33 P
-0.12 (ha) 108 161.33 P
-0.12 (vior> statement. One can get some of this ef) 117.24 161.33 P
-0.12 (fect by simply ha) 293.04 161.33 P
-0.12 (ving the) 361.64 161.33 P
7 F
-0.13 ( body) 396.4 161.33 P
5 F
-0.12 (in your task class be) 423.38 161.33 P
-0.54 (a case statement that depends on some state v) 108 149.33 P
-0.54 (ariable. This is the standard compiled language approx-) 285.61 149.33 P
0.29 (imation, b) 108 137.33 P
0.29 (ut we can do something much more interesting using Sather\325) 148.65 137.33 P
0.29 (s bound routines. The body) 393.7 137.33 P
0.43 (of the task class can be written with a function closure which has one ar) 108 125.33 P
0.43 (gument of the of the type) 401.02 125.33 P
7 F
(MSG) 108 113.33 T
5 F
( , say :) 130.78 113.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "225" 225
%%Page: "226" 226
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(226) 108 710.84 T
8 8 Q
(The Synchr) 190.11 710.84 T
(onization Extension :) 231.27 710.84 T
0 F
(18.4 GA) 310.9 710.84 T
(TES and attached thr) 341.16 710.84 T
(eads) 422.37 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
7 10 Q
0 X
( body_var: ROUT{MSG};) 160.5 659.33 T
5 F
-0.1 ( Then the actor "becoming" another beha) 108 637.33 P
-0.1 (vior is modeled by asigning a function closure to this v) 271.41 637.33 P
-0.1 (ari-) 490.12 637.33 P
(able :) 108 625.33 T
7 F
( body_var:= bind\050 behavior6 \051) 160.5 603.33 T
5 F
(and, ob) 108 581.33 T
(viously enough, the basic body code is:) 137.29 581.33 T
7 F
(body_var.call\050 receive \051;) 163 559.33 T
5 F
-0.15 ( W) 108 537.33 P
-0.15 (ith appropriate message types de\336ned, we could easily ha) 119.39 537.33 P
-0.15 (v) 347.63 537.33 P
-0.15 (e an actor recei) 352.48 537.33 P
-0.15 (v) 412.57 537.33 P
-0.15 (e a message naming a) 417.42 537.33 P
-0.09 (ne) 108 525.33 P
-0.09 (w beha) 117.19 525.33 P
-0.09 (vior) 145.5 525.33 P
-0.09 (. It w) 161.06 525.33 P
-0.09 (ould not be ob) 181.6 525.33 P
-0.09 (vious ho) 238.66 525.33 P
-0.09 (w to deb) 272.49 525.33 P
-0.09 (ug this kind of code, b) 306.54 525.33 P
-0.09 (ut it does illustrate the gen-) 395.31 525.33 P
(erality of the constructs.) 108 513.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "226" 226
%%Page: "227" 227
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 214.65 710.84 T
(erf) 219.23 710.84 T
(or) 229.03 710.84 T
(m) 236.9 710.84 T
(ance and The Distr) 244.24 710.84 T
(ibuted Extension :) 316.86 710.84 T
0 F
(19.1) 386.78 710.84 T
(Intr) 404.51 710.84 T
(oduction) 416.16 710.84 T
6 10 Q
(227) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (P) 108 642 S
-0.25 (erf) 128.34 642 S
-0.25 (or) 171.7 642 S
-0.25 (m) 206.63 642 S
-0.25 (ance and The) 239.43 642 S
-0.25 (Distr) 108 600 S
-0.25 (ibuted Extension) 178.47 600 S
108 460.98 504 464 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 462.49 540 462.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(19.1  Intr) 108 470 T
(oduction) 181.67 470 T
5 10 Q
-0.11 (Performance is the raison d\325etre of parallel processing, b) 108 441.31 P
-0.11 (ut has not yet been mentioned in this chap-) 333.24 441.31 P
-0.29 (ter) 108 429.31 P
-0.29 (. This is consistent with the pSather design philosoph) 118 429.31 P
-0.29 (y that attempts to allo) 328.67 429.31 P
-0.29 (w users to de) 413.92 429.31 P
-0.29 (v) 465.28 429.31 P
-0.29 (elop and) 470.13 429.31 P
0.44 (test their programs without concern for implementation details. The programmer is encouraged to) 108 417.31 P
0.7 (code for the basic abstract machine consisting of a lar) 108 405.31 P
0.7 (ge shared address space and an unbounded) 328.76 405.31 P
-0.05 (number of threads of control. Sharing is determined by the rules of the language, not by where data) 108 393.31 P
-0.03 (happens to reside. W) 108 381.31 P
-0.03 (e belie) 190.97 381.31 P
-0.03 (v) 217.06 381.31 P
-0.03 (e that this will mak) 221.91 381.31 P
-0.03 (e it relati) 298.35 381.31 P
-0.03 (v) 333.58 381.31 P
-0.03 (ely easy to de) 338.43 381.31 P
-0.03 (v) 392.79 381.31 P
-0.03 (elop comple) 397.64 381.31 P
-0.03 (x codes and to) 446.61 381.31 P
0.75 (port them between platforms. Of course there are performance penalties to pay for this obli) 108 369.31 P
0.75 (vious) 482.33 369.31 P
-0.6 (vie) 108 357.31 P
-0.6 (w of the underlying platform. On some architectures, the penalty might be tolerable; a single SMP) 119.97 357.31 P
-0.27 (\050symmetric multi-processor\051 or the Cray T3E pro) 108 345.31 P
-0.27 (vides an ef) 303.4 345.31 P
-0.27 (fecti) 345.92 345.31 P
-0.27 (v) 363.44 345.31 P
-0.27 (e shared memory) 368.29 345.31 P
-0.27 (. There are major) 435.96 345.31 P
-0.46 (ef) 108 333.31 P
-0.46 (forts <> to achie) 115.52 333.31 P
-0.46 (v) 179.89 333.31 P
-0.46 (e ef) 184.74 333.31 P
-0.46 (\336cient emulation of shared memory through hardw) 198.74 333.31 P
-0.46 (are and lo) 399.77 333.31 P
-0.46 (w-le) 438.04 333.31 P
-0.46 (v) 455.56 333.31 P
-0.46 (el softw) 460.41 333.31 P
-0.46 (are) 491.79 333.31 P
-0.11 (without help from the compiler or programmer) 108 321.31 P
-0.11 (, if these succeed it should be possible to de) 294.69 321.31 P
-0.11 (v) 468.44 321.31 P
-0.11 (elop ef-) 473.29 321.31 P
(\336cient pSather code using only the mechanisms described abo) 108 309.31 T
(v) 356.15 309.31 T
(e.) 361 309.31 T
0.19 (Hardw) 108 287.31 P
0.19 (are shared memory) 135.11 287.31 P
0.19 (, or its equi) 211.48 287.31 P
0.19 (v) 256.8 287.31 P
0.19 (alent, pro) 261.55 287.31 P
0.19 (vides a best case on the kind of platform for which) 299.36 287.31 P
-0.02 (pSather is appropriate. There is also a maximum latenc) 108 275.31 P
-0.02 (y be) 327.91 275.31 P
-0.02 (yond which the pSather constructs of) 344.67 275.31 P
-0.02 (fer) 492.9 275.31 P
0.68 (no performance adv) 108 263.31 P
0.68 (antage o) 189.08 263.31 P
0.68 (v) 223.21 263.31 P
0.68 (er general message passing systems such as MPI<>. If the ratio be-) 228.06 263.31 P
0.6 (tween local and remote operations e) 108 251.31 P
0.6 (xceeds 4 orders of magnitude \050which it frequently does\051 then) 255 251.31 P
0.03 (only the most loosely coupled computations can be parallelized ef) 108 239.31 P
0.03 (\336ciently) 372.14 239.31 P
0.03 (. W) 404.27 239.31 P
0.03 (e belie) 417.94 239.31 P
0.03 (v) 444.1 239.31 P
0.03 (e that pSather) 448.95 239.31 P
-0.47 (can be ef) 108 227.31 P
-0.47 (fecti) 142.9 227.31 P
-0.47 (v) 160.42 227.31 P
-0.47 (e with latenc) 165.27 227.31 P
-0.47 (y ratios up to se) 215.27 227.31 P
-0.47 (v) 276.47 227.31 P
-0.47 (eral hundred and that systems within this range will con-) 281.32 227.31 P
0.17 (tinue to be important. T) 108 215.31 P
0.17 (w) 202.59 215.31 P
0.17 (o paradigm e) 209.71 215.31 P
0.17 (xamples are the Meik) 262.1 215.31 P
0.17 (o CS-2, where local operations are ???) 348.88 215.31 P
0.18 (f) 108 203.31 P
0.18 (aster than remote ones and our Myrinet <> netw) 111.23 203.31 P
0.18 (ork of quad-Sparc 10 w) 305.48 203.31 P
0.18 (orkstations with a ratio of) 400.51 203.31 P
-0.14 (about ???. In contrast, our ethernet realization with the same w) 108 191.31 P
-0.14 (orkstations has a ratio of ??? and can) 357.53 191.31 P
(not be used for most of the problems that interest us.) 108 179.31 T
-0.04 (Achie) 108 157.31 P
-0.04 (ving good performance is the central research goal of the pSather project. There are currently) 131.63 157.31 P
0.36 (four doctoral projects focusing on dif) 108 145.31 P
0.36 (ferent aspects of this. Claudio Fleiner is looking at ho) 258.7 145.31 P
0.36 (w con-) 476.15 145.31 P
-0.62 (v) 108 133.31 P
-0.62 (entional and no) 112.85 133.31 P
-0.62 (v) 173.12 133.31 P
-0.62 (el compiler optimizations can be emplo) 177.97 133.31 P
-0.62 (yed in pSather) 332.8 133.31 P
-0.62 (. Ben Gomes is using pSather) 388.78 133.31 P
0.02 (in a system for mapping neural netw) 108 121.31 P
0.02 (ork applications to parallel machines. Boris V) 254.12 121.31 P
0.02 (aysman is study-) 436.74 121.31 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "227" 227
%%Page: "228" 228
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(228) 108 710.84 T
8 8 Q
(P) 159.69 710.84 T
(erf) 164.27 710.84 T
(or) 174.07 710.84 T
(m) 181.94 710.84 T
(ance and The Distr) 189.28 710.84 T
(ibuted Extension :) 261.9 710.84 T
0 F
(19.2 Placement and the @ oper) 331.82 710.84 T
(ator) 454.58 710.84 T
(.) 469.82 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.06 (ing class library design, and is especially concerned with e) 108 659.33 P
-0.06 (x) 341.67 659.33 P
-0.06 (ecution time adaptation and representa-) 346.52 659.33 P
2.3 (tion change. Da) 108 647.33 P
2.3 (vid Stoutamire\325) 175.45 647.33 P
2.3 (s thesis focuses on locality and storage management and will) 239.7 647.33 P
-0.03 (introduce the \325zone e) 108 635.33 P
-0.03 (xtension\325 that generalizes the current cluster based distrib) 191.9 635.33 P
-0.03 (uted e) 421.71 635.33 P
-0.03 (xtension. Both) 445.69 635.33 P
0.1 (the current cluster v) 108 623.33 P
0.1 (ersion and the ne) 187.86 623.33 P
0.1 (w zone system share the basic idea that a moderate amount of) 255.96 623.33 P
(placement information supplied by the user can help a great deal in producing good code.) 108 611.33 T
108 549.98 504 553 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 551.49 540 551.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(19.2  Placement and the @ operator) 108 559 T
(.) 411.57 559 T
5 10 Q
-0.37 (The current pSather system has a b) 108 530.31 P
-0.37 (uilt-in kno) 245.55 530.31 P
-0.37 (wedge that the address space might be brok) 286.88 530.31 P
-0.37 (en into se) 458.33 530.31 P
-0.37 (v-) 495.67 530.31 P
0.31 (eral pieces, called clusters, and that it is e) 108 518.31 P
0.31 (xpensi) 275.81 518.31 P
0.31 (v) 301.67 518.31 P
0.31 (e to reference data across cluster boundaries. F) 306.52 518.31 P
0.31 (or) 495.67 518.31 P
-0.05 (reasonable performance in a portable design, assume that it is hundreds of times more costly to ref-) 108 506.31 P
0.83 (erence a remote cluster) 108 494.31 P
0.83 (. There are w) 202.4 494.31 P
0.83 (ays to incorporate detailed  platform dependent latenc) 257.55 494.31 P
0.83 (y esti-) 478.45 494.31 P
0.67 (mates, b) 108 482.31 P
0.67 (ut that is be) 141.79 482.31 P
0.67 (yond this tutorial. W) 190.03 482.31 P
0.67 (ith penalties of this magnitude it is important to allocate) 274.4 482.31 P
0.39 (objects and threads well. There is a lar) 108 470.31 P
0.39 (ge literature on programmer placement strate) 264.41 470.31 P
0.39 (gies and all of) 446.45 470.31 P
1.18 (this appears to be useable in our conte) 108 458.31 P
1.18 (xt. From the pSather perspecti) 268.55 458.31 P
1.18 (v) 393.82 458.31 P
1.18 (e, automatic and adapti) 398.67 458.31 P
1.18 (v) 494.71 458.31 P
1.18 (e) 499.56 458.31 P
(placement strate) 108 446.31 T
(gies should be encapsulated in classes and we ha) 173.11 446.31 T
(v) 367.87 446.31 T
(e done some w) 372.72 446.31 T
(ork on this.) 432.33 446.31 T
-0.32 (The language primiti) 108 424.31 P
-0.32 (v) 190.98 424.31 P
-0.32 (es for placement are quite simple. An) 195.83 424.31 P
-0.32 (y e) 343.42 424.31 P
-0.32 (xpression of the language can be con-) 354.88 424.31 P
0.07 (joined with the te) 108 412.31 P
0.07 (xt \325@e) 177.79 412.31 P
0.07 (xp\325 where e) 204.97 412.31 P
0.07 (xp must e) 252.16 412.31 P
0.07 (v) 290.94 412.31 P
0.07 (aluate to an inte) 295.69 412.31 P
0.07 (ger from 0 to the number of clusters) 359.36 412.31 P
-0.5 (-1. The preceeding e) 108 400.31 P
-0.5 (xpression is then e) 188.56 400.31 P
-0.5 (v) 260.98 400.31 P
-0.5 (aluated on the corresponding cluster) 265.73 400.31 P
-0.5 (. In the usual case where) 408.17 400.31 P
0.12 (no @ is speci\336ed, e) 108 388.31 P
0.12 (x) 186.69 388.31 P
0.12 (ecution continues in the current cluster) 191.54 388.31 P
0.12 (. If the e) 346.83 388.31 P
0.12 (xpression to the left of an @ is) 380.36 388.31 P
0.01 (a create e) 108 376.31 P
0.01 (xpression, the created object will reside on the cluster speci\336ed after the @. If the e) 145.63 376.31 P
0.01 (xpres-) 479.01 376.31 P
-0.12 (sion to the left of @ contains calls or other sube) 108 364.31 P
-0.12 (xpressions, these will be e) 298.02 364.31 P
-0.12 (v) 401.98 364.31 P
-0.12 (aluated before the @e) 406.73 364.31 P
-0.12 (xp) 494 364.31 P
-0.4 (is calculated and thus will be on the current cluster) 108 352.31 P
-0.4 (. This is quite dif) 306.89 352.31 P
-0.4 (ferent than the \325o) 373.1 352.31 P
-0.4 (wner computes\325) 440.25 352.31 P
-0.39 (rule often b) 108 340.31 P
-0.39 (uilt into parallel languages. One e) 153.11 340.31 P
-0.39 (xpression might in) 285.98 340.31 P
-0.39 (v) 359.24 340.31 P
-0.39 (olv) 364.04 340.31 P
-0.39 (e objects resident on se) 376.67 340.31 P
-0.39 (v) 467.61 340.31 P
-0.39 (eral dif-) 472.46 340.31 P
-0.12 (ferent clusters and remote access is sometimes the best strate) 108 328.31 P
-0.12 (gy) 350.32 328.31 P
-0.12 (.  As described in the manual, the @) 359.67 328.31 P
(opertor can also be used with the fork and parloop statements.) 108 316.31 T
-0.18 ( F) 108 294.31 P
-0.18 (or repeated computations, it is al) 115.73 294.31 P
-0.18 (w) 245.24 294.31 P
-0.18 (ays better to cop) 252.37 294.31 P
-0.18 (y data so that the inner loop all happens on one) 317.53 294.31 P
0.32 (cluster) 108 282.31 P
0.32 (. T) 134.11 282.31 P
0.32 (o aid in this, PSather includes three location tests on objects. The method) 144.74 282.31 P
7 F
0.36 (where) 444.16 282.31 P
5 F
0.32 (\050e) 471.39 282.31 P
0.32 (xpres-) 479.01 282.31 P
-0.11 (sion\051:INT returns the  number of the cluster on which the v) 108 270.31 P
-0.11 (alue of the e) 342.9 270.31 P
-0.11 (xpression resides. The pred-) 391.58 270.31 P
0.03 (icate) 108 258.31 P
7 F
0.04 (near) 129.41 258.31 P
5 F
0.03 ( returns true if the v) 152.24 258.31 P
0.03 (alue of its ar) 231.3 258.31 P
0.03 (gument is on the e) 280.93 258.31 P
0.03 (x) 354.24 258.31 P
0.03 (ecuting cluster;) 359.09 258.31 P
7 F
0.04 (far) 423.04 258.31 P
5 F
0.03 (returns true if its) 437.52 258.31 P
-0.47 (ar) 108 246.31 P
-0.47 (gument is not on the e) 115.59 246.31 P
-0.47 (x) 201.72 246.31 P
-0.47 (ecuting cluster) 206.57 246.31 P
-0.47 (. The treatment of v) 264.16 246.31 P
-0.47 (oid and immutable ar) 341.25 246.31 P
-0.47 (guments is decribed) 424.94 246.31 P
-0.25 (in the table on page 85 of the speci\336cation. The tw) 108 234.31 P
-0.25 (o most basic patterns are mo) 307.84 234.31 P
-0.25 (ving the object to the) 420.57 234.31 P
-0.45 (operation and vice-v) 108 222.31 P
-0.45 (ersa. The schematic code for bringing the object to the code goes lik) 189.15 222.31 P
-0.45 (e this, gi) 456.68 222.31 P
-0.45 (v) 489.71 222.31 P
-0.45 (en) 494.56 222.31 P
(a v) 108 210.31 T
(ariable v:T) 119.69 210.31 T
(      local_v:T) 108 188.31 T
(:=v;) 160.83 188.31 T
(      if f) 108 166.31 T
(ar\050v\051 then local_v := v) 134.84 166.31 T
(.cop) 223.7 166.31 T
(y end;) 240.54 166.31 T
0.12 (Of course, if we are modifying the v) 108 144.31 P
0.12 (ariable v) 254.11 144.31 P
0.12 (, just modifying the cop) 288.29 144.31 P
0.12 (y w) 383.95 144.31 P
0.12 (on\325) 398.69 144.31 P
0.12 (t suf) 411.84 144.31 P
0.12 (\336ce. T) 429.21 144.31 P
0.12 (o e) 454.08 144.31 P
0.12 (x) 465.99 144.31 P
0.12 (ecute an) 470.84 144.31 P
(operation on the cluster where the object in v) 108 132.31 T
(ariable v resides, one writes) 288.27 132.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "228" 228
%%Page: "229" 229
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 176.83 710.84 T
(erf) 181.4 710.84 T
(or) 191.2 710.84 T
(m) 199.08 710.84 T
(ance and The Distr) 206.42 710.84 T
(ibuted Extension :) 279.04 710.84 T
0 F
(19.2) 348.96 710.84 T
(Placement and the @ oper) 366.68 710.84 T
(ator) 471.72 710.84 T
(.) 486.96 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(     operation@where\050v\051;) 108 659.33 T
0.24 (F) 108 637.33 P
0.24 (or our \336rst real e) 113.41 637.33 P
0.24 (xamples, we return to tw) 180.85 637.33 P
0.24 (o of our earlier sample programs. It turns out that some) 280.84 637.33 P
-0.21 (code that w) 108 625.33 P
-0.21 (orks \336ne with lo) 153.58 625.33 P
-0.21 (w-latenc) 217.98 625.33 P
-0.21 (y shared memory becomes a) 252.26 625.33 P
-0.21 (wful on a platform with relati) 365.13 625.33 P
-0.21 (v) 481.87 625.33 P
-0.21 (e la-) 486.72 625.33 P
0.62 (tencies in the hundreds. In Section 1.4.2, there were tw) 108 613.33 P
0.62 (o v) 333.17 613.33 P
0.62 (ariations on disjuncti) 346.04 613.33 P
0.62 (v) 430.93 613.33 P
0.62 (e search and one) 435.78 613.33 P
0.77 (issue w) 108 601.33 P
0.77 (as to stop other threads once one had found an answer) 138.39 601.33 P
0.77 (. Each w) 361.64 601.33 P
0.77 (ork) 397.8 601.33 P
0.77 (er thread w) 411.03 601.33 P
0.77 (as coded to) 457.46 601.33 P
-0.16 (check a global \337ag,) 108 589.33 P
7 F
-0.17 (stop) 187.63 589.33 P
5 F
-0.16 (, on each iteration. This seems harmless, b) 206.54 589.33 P
-0.16 (ut could totally dominate the e) 374.66 589.33 P
-0.16 (x-) 495.67 589.33 P
(ecution time. The follo) 108 577.33 T
(wing re) 199.41 577.33 T
(vision illustrates some issues in coding for costly clusters.) 229.43 577.33 T
-0.5 ( The major dif) 108 209.34 P
-0.5 (ference in the main program is that w) 163.73 209.34 P
-0.5 (ork) 309.79 209.34 P
-0.5 (ers are each fork) 323.02 209.34 P
-0.5 (ed to a dif) 387.75 209.34 P
-0.5 (ferent cluster) 426.26 209.34 P
-0.5 (, using) 477.83 209.34 P
-0.27 (the syntax) 108 197.34 P
7 F
-0.3 (worker\050i\051@i.) 150.79 197.34 P
5 F
-0.27 ( T) 204.82 197.34 P
-0.27 (o a) 212.35 197.34 P
-0.27 (v) 223.82 197.34 P
-0.27 (oid costly checks of a shared signal, each w) 228.62 197.34 P
-0.27 (ork) 401.03 197.34 P
-0.27 (er should check a v) 414.26 197.34 P
-0.27 (ari-) 490.12 197.34 P
0.24 (able on its o) 108 185.34 P
0.24 (wn cluster) 157.07 185.34 P
0.24 (. Earlier v) 198.14 185.34 P
0.24 (ersions of pSather had a primiti) 238.18 185.34 P
0.24 (v) 364.94 185.34 P
0.24 (e storage class, spread, that made) 369.79 185.34 P
-0 (it easy to do this case b) 108 173.34 P
-0 (ut w) 200.55 173.34 P
-0 (as not general enough for all of our requirements. W) 217.95 173.34 P
-0 (e will illustrate one) 427.07 173.34 P
-0.61 (standard pattern here and discuss others later) 108 161.34 P
-0.61 (. In this solution, each w) 283.16 161.34 P
-0.61 (ork) 378.04 161.34 P
-0.61 (er thread creates a local) 391.27 161.34 P
7 F
-0.68 (stop) 485.1 161.34 P
5 F
0.36 (v) 108 149.34 P
0.36 (ariable and re) 112.75 149.34 P
0.36 (gisters it with the main program.  Whan an answer is found, the main program sets) 167.75 149.34 P
-0.18 (all the \337ags. The only complication is that this requires a reference object, here realized by the class) 108 137.34 P
0.31 (REFBOOL, suggesting a box) 108 125.34 P
0.31 (ed boolean. Thus the test in each w) 226.56 125.34 P
0.31 (ork) 369.16 125.34 P
0.31 (er is on) 382.39 125.34 P
7 F
0.34 (stop.val.) 415.26 125.34 P
5 F
0.31 (The code as) 455.62 125.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class REFBOOL is) 144 557.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr val:BOOL;) 144 548.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME  is return new end;) 144 539.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class REFBOOL) 144 530.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-------------------------------------------------------------------) 144 521.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(class MAIN is) 144 512.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr num:GATE{INT};) 144 503.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr stops:ARRAY{REFBOOL};) 144 494.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   attr win:INT;) 144 485.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(    main is) 144 467.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      i:INT;) 144 458.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      num:=#;) 144 449.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stops:=#\050clusters\051;) 144 440.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop i:=clusters!;) 144 431.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      num :- worker\050i\051@i;  -- workers to clusters) 178.2 422.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 413.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ans::= num.dequeue;) 144 404.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop i:=clusters!; #OUT + i + '\134n';) 144 395.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(     stops[i].val:=true;) 178.2 386.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 377.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      SYS::export;) 144 368.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      #OUT +ans  + " thread " + win  + '\134n';) 144 359.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;  -- main) 144 350.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   worker\050id:INT\051:INT  is) 144 332.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stop:BOOL;) 144 323.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      stops[id]:=stop;) 144 314.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      sync;            -- everyone gets to start) 144 305.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      RND::seed\05081463*\050id+43\051\051;) 144 296.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop SYS::import;) 144 287.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if stop then return\0500\051 end;) 178.2 278.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      ans::=RND::int\0500,10000\051;) 178.2 269.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if ans.mod\05071\051=0 then win:=id; return ans end;) 178.2 260.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end; --loop) 144 251.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- worker) 144 242.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class MAIN) 144 233.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 565.88 129.6 228.13 2 L
V
0 Z
N
489.6 565.88 489.6 228.13 2 L
V
N
129.48 566 489.73 566 2 L
V
N
129.48 228 489.73 228 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "229" 229
%%Page: "230" 230
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(230) 108 710.84 T
8 8 Q
(P) 159.69 710.84 T
(erf) 164.27 710.84 T
(or) 174.07 710.84 T
(m) 181.94 710.84 T
(ance and The Distr) 189.28 710.84 T
(ibuted Extension :) 261.9 710.84 T
0 F
(19.2 Placement and the @ oper) 331.82 710.84 T
(ator) 454.58 710.84 T
(.) 469.82 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.14 (gi) 108 659.33 P
0.14 (v) 115.53 659.33 P
0.14 (en might still be too slo) 120.38 659.33 P
0.14 (w if the) 215.01 659.33 P
7 F
0.16 (import) 248.49 659.33 P
5 F
0.14 ( in each loop w) 276.27 659.33 P
0.14 (as costly) 337.83 659.33 P
0.14 (, the ob) 372.04 659.33 P
0.14 (vious \336x is to) 401.89 659.33 P
7 F
0.16 (import) 459.14 659.33 P
5 F
0.14 ( and) 486.92 659.33 P
(test only e) 108 647.33 T
(v) 148.86 647.33 T
(ery Nth step.) 153.71 647.33 T
-0.08 (As a second e) 108 625.33 P
-0.08 (xample, let\325) 162.87 625.33 P
-0.08 (s reconsider the program of Section 1.3.2 that computed the count in each) 210.01 625.33 P
0.48 (chunk of some D) 108 613.33 P
0.48 (VEC of the o) 177.65 613.33 P
0.48 (v) 231.99 613.33 P
0.48 (erall maximum v) 236.84 613.33 P
0.48 (alue. W) 305.88 613.33 P
0.48 (e are no) 336.67 613.33 P
0.48 (w able to de\336ne the class D) 369.03 613.33 P
0.48 (VEC,) 481.5 613.33 P
-0.19 (which w) 108 601.33 P
-0.19 (as left implicit in the earlier e) 141.87 601.33 P
-0.19 (xample. It turns out that our earlier e) 258.32 601.33 P
-0.19 (xample w) 403.46 601.33 P
-0.19 (as v) 442.33 601.33 P
-0.19 (ery unSath-) 457.81 601.33 P
0.14 (ery code; one e) 108 589.33 P
0.14 (xpects functionality to be encapsulated in object methods, not in the main program.) 169.07 589.33 P
-0.29 (The follo) 108 577.33 P
-0.29 (wing e) 144.4 577.33 P
-0.29 (xample is o) 170.9 577.33 P
-0.29 (v) 216.28 577.33 P
-0.29 (er) 221.13 577.33 P
-0.29 (-simpli\336ed, b) 228.7 577.33 P
-0.29 (ut is characteristic of our approach to distrib) 281.55 577.33 P
-0.29 (uted objects) 456.24 577.33 P
0.58 (in pSather) 108 565.33 P
0.58 (. A major goal is to le) 148.86 565.33 P
0.58 (v) 239.04 565.33 P
0.58 (erage the e) 243.89 565.33 P
0.58 (xisitng serial Sather classes, here VEC. A distrib) 288.21 565.33 P
0.58 (uted) 486.78 565.33 P
-0.08 (v) 108 553.33 P
-0.08 (ector) 112.85 553.33 P
-0.08 (, or D) 132.44 553.33 P
-0.08 (VEC, should ha) 154.93 553.33 P
-0.08 (v) 218.18 553.33 P
-0.08 (e the same interf) 223.03 553.33 P
-0.08 (ace as the serial v) 289.06 553.33 P
-0.08 (ersion allo) 359.13 553.33 P
-0.08 (wing users to easily mo) 400.74 553.33 P
-0.08 (v) 494.71 553.33 P
-0.08 (e) 499.56 553.33 P
-0.05 (code to a parallel platform. Distrib) 108 541.33 P
-0.05 (uted object classes al) 245.84 541.33 P
-0.05 (w) 329.73 541.33 P
-0.05 (ays ha) 336.85 541.33 P
-0.05 (v) 361.86 541.33 P
-0.05 (e a directory) 366.71 541.33 P
-0.05 (,) 415.93 541.33 P
7 F
-0.06 (dir,) 420.88 541.33 P
5 F
-0.05 ( that points to the) 434.77 541.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "230" 230
%%Page: "231" 231
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 176.83 710.84 T
(erf) 181.4 710.84 T
(or) 191.2 710.84 T
(m) 199.08 710.84 T
(ance and The Distr) 206.42 710.84 T
(ibuted Extension :) 279.04 710.84 T
0 F
(19.2) 348.96 710.84 T
(Placement and the @ oper) 366.68 710.84 T
(ator) 471.72 710.84 T
(.) 486.96 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.58 (part of the d-object that is on each cluster) 108 659.33 P
0.58 (. Here there is just one chunk per cluster  and a total of) 277.61 659.33 P
7 F
(num_chunks) 108 647.33 T
5 F
(. The only other attrib) 164.69 647.33 T
(ute is the \336x) 251.98 647.33 T
(ed shunk size,) 301 647.33 T
7 F
(ch_size) 359.88 647.33 T
5 F
(.) 393.78 647.33 T
-0.49 ( The code is all straightforw) 108 207.34 P
-0.49 (ard. Notice that in the) 217.93 207.34 P
7 F
-0.55 (create) 304.9 207.34 P
5 F
-0.49 ( routine, the indi) 332.69 207.34 P
-0.49 (vidual chunks of type VEC) 397.08 207.34 P
0.68 (are created on separate clusters and thus li) 108 195.34 P
0.68 (v) 281.04 195.34 P
0.68 (e there. The) 285.89 195.34 P
7 F
0.75 (chunks) 337.9 195.34 P
5 F
0.68 (! iter used in our earlier e) 369.58 195.34 P
0.68 (xample) 474.56 195.34 P
-0.4 (yields references to these distrib) 108 183.34 P
-0.4 (uted chunks; this isn\325) 235.05 183.34 P
-0.4 (t v) 318.94 183.34 P
-0.4 (ery ef) 328.67 183.34 P
-0.4 (\336cient and the other methods don\325) 351.06 183.34 P
-0.4 (t use) 485.79 183.34 P
0.27 (it. The e) 108 171.34 P
0.27 (xample includes tw) 141.44 171.34 P
0.27 (o of the man) 219.66 171.34 P
0.27 (y methods that are needed to duplicate the VEC interf) 270.59 171.34 P
0.27 (ace.) 488.18 171.34 P
-0.32 (Both \336rst require that the tw) 108 159.34 P
-0.32 (o v) 219.33 159.34 P
-0.32 (ectors be aligned, i.e., ha) 231.36 159.34 P
-0.32 (v) 329.28 159.34 P
-0.32 (e the same number and size of chunks. The) 334.13 159.34 P
0.97 (predicate for testing this is also part of the public interf) 108 147.34 P
0.97 (ace. The) 337.53 147.34 P
7 F
1.07 (plus) 375.83 147.34 P
5 F
0.97 ( routine \336rst creates a ne) 394.17 147.34 P
0.97 (w) 496.78 147.34 P
-0.56 (D) 108 135.34 P
-0.56 (VEC, which itself is distrib) 114.82 135.34 P
-0.56 (uted o) 221.56 135.34 P
-0.56 (v) 245.57 135.34 P
-0.56 (er all the clusters. Then the) 250.42 135.34 P
7 F
-0.62 (parloop) 357.88 135.34 P
5 F
-0.56 ( forks of) 391.23 135.34 P
-0.56 (f threads to compute) 423.74 135.34 P
0.08 (the separate chunks of the result on separate clusters. The code for the dot product is similar) 108 123.34 P
0.08 (. Since) 476.7 123.34 P
0.67 (the answer is the sum of the dot products of the chunks, some coordiantion is needed. Here each) 108 111.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class DVEC is) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr dir:ARRAY{VEC};) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- directory is array of chunks) 292.8 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr num_chunks:INT;) 144 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr ch_size:INT;) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create\050num,csize:INT\051:SAME is) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.num_chunks:=num;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.ch_size:=csize;) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.dir:=#ARRAY{VEC}\050num\051;) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop j::=0.upto!\050num-1\051; res.dir[j]:=#VEC\050csize\051@j  end;) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   chunks!:VEC is) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- Iterate over chunks) 225.6 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop j::=0.upto!\050num_chunks-1\051; yield \050dir[j]\051 end) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   plus\050v1:SAME\051:SAME is) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      assert\050aligned\050v1\051\051;) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=#DVEC\050num_chunks,ch_size\051;) 144 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop j::=0.upto!\050num_chunks-1\051 do@j) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( res.dir[j]:= dir[j].plus\050v1.dir[j]\051) 178.2 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 411.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return res) 144 402.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- plus) 144 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   dot\050v1:SAME\051:FLT is) 144 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      assert\050aligned\050v1\051\051;) 144 366.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res:ARRAY{FLT}:=#\050num_chunks\051;) 144 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop j::=0.upto!\050num_chunks-1\051 do@j) 144 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
( res[j]:= dir[j].dot\050v1.dir[j]\051) 178.2 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 330.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      r::=0.0;) 144 321.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop j::=0.upto!\050num_chunks\051; r:=r+res[j] end;) 144 312.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return r;) 144 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 294.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   aligned\050v1:SAME\051:BOOL is) 144 276.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      if \050num_chunks=v1.num_chunks and ch_size=v1.ch_size\051) 144 267.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      then return true else return false end) 144 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;  --aligned) 144 249.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class DVEC) 144 240.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 226.13 2 L
V
0 Z
N
489.6 635.88 489.6 226.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 226 489.73 226 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "231" 231
%%Page: "232" 232
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(232) 108 710.84 T
8 8 Q
(P) 159.69 710.84 T
(erf) 164.27 710.84 T
(or) 174.07 710.84 T
(m) 181.94 710.84 T
(ance and The Distr) 189.28 710.84 T
(ibuted Extension :) 261.9 710.84 T
0 F
(19.2 Placement and the @ oper) 331.82 710.84 T
(ator) 454.58 710.84 T
(.) 469.82 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
-0.22 (thread stores its local dot product in an entry of the shared array) 108 659.33 P
-0.22 (,) 360.25 659.33 P
7 F
-0.24 (res) 365.04 659.33 P
5 F
-0.22 (, and the total is computed after) 378.93 659.33 P
-0.42 (all subcomputations complete. Of course not all operations on distrib) 108 647.33 P
-0.42 (uted data structures partition so) 380.13 647.33 P
-0.54 (nicely) 108 635.33 P
-0.54 (, b) 131.79 635.33 P
-0.54 (ut it seems to be possible to pro) 141.05 635.33 P
-0.54 (vide functional interf) 263.52 635.33 P
-0.54 (aces to the user and b) 346.77 635.33 P
-0.54 (ury the comple) 429.68 635.33 P
-0.54 (xity) 488.44 635.33 P
0.13 (in the library methods. It w) 108 623.33 P
0.13 (as this insight that led us to belie) 217.43 623.33 P
0.13 (v) 348.94 623.33 P
0.13 (e that OO methods will be e) 353.79 623.33 P
0.13 (v) 466.53 623.33 P
0.13 (en more) 471.38 623.33 P
(impostant for parallel computing than the) 108 611.33 T
(y are for serial tasks.) 273.67 611.33 T
4 12 Q
(19.2.1   T) 108 570 T
(uple Spaces, Round Three) 157.62 570 T
5 10 Q
-0.22 (In Section 1.4.1 we sa) 108 547.33 P
-0.22 (w a f) 195.27 547.33 P
-0.22 (airly comple) 214.71 547.33 P
-0.22 (x class TSP) 264.61 547.33 P
-0.22 (A) 309.9 547.33 P
-0.22 (CE {TT <$TUP} that implmented the full non-) 316.73 547.33 P
-0.47 (blocking v) 108 535.33 P
-0.47 (ersion of the tuple space e) 149.88 535.33 P
-0.47 (xample from F) 251.52 535.33 P
-0.47 (oster <>. Here we sho) 309.87 535.33 P
-0.47 (w ho) 395.94 535.33 P
-0.47 (w this can be e) 414.94 535.33 P
-0.47 (xtended) 472.34 535.33 P
-0.16 (to the distrib) 108 523.33 P
-0.16 (uted case with no changes at all in the class TSP) 158.04 523.33 P
-0.16 (A) 348.85 523.33 P
-0.16 (CE. As F) 355.67 523.33 P
-0.16 (oster points out, the k) 392.15 523.33 P
-0.16 (e) 477.81 523.33 P
-0.16 (y to a) 482.1 523.33 P
0.6 (tuple \050 an STR\051 pro) 108 511.33 P
0.6 (vides a natural w) 188.01 511.33 P
0.6 (ay to distrib) 257.74 511.33 P
0.6 (ute the tuple space o) 306.52 511.33 P
0.6 (v) 390.41 511.33 P
0.6 (er parallel machines. If we) 395.26 511.33 P
0.42 (simply hash on the k) 108 499.33 P
0.42 (e) 192.36 499.33 P
0.42 (y then with high probability the tuple space will be spilt in an ef) 196.65 499.33 P
0.42 (\336cient w) 457.67 499.33 P
0.42 (ay) 492.71 499.33 P
0.42 (.) 501.5 499.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "232" 232
%%Page: "233" 233
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 176.83 710.84 T
(erf) 181.4 710.84 T
(or) 191.2 710.84 T
(m) 199.08 710.84 T
(ance and The Distr) 206.42 710.84 T
(ibuted Extension :) 279.04 710.84 T
0 F
(19.2) 348.96 710.84 T
(Placement and the @ oper) 366.68 710.84 T
(ator) 471.72 710.84 T
(.) 486.96 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.08 (The follo) 108 659.33 P
0.08 (wing block contains the complete code for the class DSP) 144.77 659.33 P
0.08 (A) 372.06 659.33 P
0.08 (CE, which does this. The inter-) 378.88 659.33 P
(f) 108 647.33 T
(ace is identical to that of the underlying uni-processor class TSP) 111.23 647.33 T
(A) 367.5 647.33 T
(CE.) 374.32 647.33 T
0.59 (Ev) 108 234.34 P
0.59 (erything is v) 118.96 234.34 P
0.59 (ery simple, almost mechanical. A DSP) 169.99 234.34 P
0.59 (A) 326.72 234.34 P
0.59 (CE has a pri) 333.54 234.34 P
0.59 (v) 384.21 234.34 P
0.59 (ate attr) 388.96 234.34 P
0.59 (,) 416.64 234.34 P
7 F
0.65 (tspace) 422.23 234.34 P
5 F
0.59 (, which is an) 451.69 234.34 P
0.22 (array of TSP) 108 222.34 P
0.22 (A) 158.62 222.34 P
0.22 (CE, here 4 of them. The pri) 165.44 222.34 P
0.22 (v) 276.5 222.34 P
0.22 (ate) 281.25 222.34 P
7 F
0.25 (hash) 295.63 222.34 P
5 F
0.22 ( function tells which of the tuple spaces to use) 317.31 222.34 P
-0.43 (and the v) 108 210.34 P
-0.43 (arious methods just call their uni-cluster counterparts. The) 143.54 210.34 P
7 F
-0.48 (done) 375.87 210.34 P
5 F
-0.43 ( method must notify all the) 398.11 210.34 P
0.43 (clusters when it is time to stop. Much of the Sather and pSather design has been dri) 108 198.34 P
0.43 (v) 447.61 198.34 P
0.43 (en by the re-) 452.46 198.34 P
-0.38 (quirement that e) 108 186.34 P
-0.38 (xtensions to functionality be as simple as this. In our current and future research, we) 172.09 186.34 P
-0.51 (plan to pro) 108 174.34 P
-0.51 (vide interf) 150.17 174.34 P
-0.51 (aces, lik) 190.94 174.34 P
-0.51 (e the tuple space one here, that shelter the user from kno) 223.11 174.34 P
-0.51 (wing what kind) 442.79 174.34 P
-0.42 (of implementation is being emplyed and libraries that adapti) 108 162.34 P
-0.42 (v) 345.47 162.34 P
-0.42 (ely change representation as a function) 350.32 162.34 P
(of load.) 108 150.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class DSPACE{ TT < $TUP } is) 144 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private attr tspace: ARRAY{TSPACE{ TT}};) 144 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   const n:INT:=4;) 144 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- number of subtables) 230.4 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   create:SAME  is) 144 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res::=new;) 144 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      res.tspace:=#\050n\051;) 144 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return\050res.init\051;) 144 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   init:SAME is) 144 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop i::=0.upto!\050n-1\051; tspace[i]:=#TSPACE{ TT}@i  end;) 144 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return self) 144 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   private hash\050s:STR\051:INT is) 144 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return s.hash.mod\050n\051;) 144 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- number of subspaces) 273.6 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end; -- hash) 144 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   insert\050tup:TT\051 is k::=hash\050tup.t1\051;) 144 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      tspace[k].insert\050tup\051@k) 144 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   rdp\050s:STR\051:TT is k::=hash\050s\051;) 144 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return tspace[k].rdp\050s\051@k) 144 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 411.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   rd\050s:STR\051:TT is k::=hash\050s\051;) 144 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return tspace[k].rd\050s\051@k) 144 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 375.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   inp\050s:STR\051:TT is k::=hash\050s\051;) 144 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return tspace[k].inp\050s\051@k) 144 348.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 339.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   in\050s:STR\051:TT is k::=hash\050s\051;) 144 321.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      return tspace[k].in\050s\051@k) 144 312.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 303.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   done is) 144 285.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      loop k::=0.upto!\050n-1\051; tspace[k].done@k end;) 144 276.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 267.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end; -- class DSPACE{TT<$TUP}) 144 258.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 253.13 2 L
V
0 Z
N
489.6 635.88 489.6 253.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 253 489.73 253 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "233" 233
%%Page: "234" 234
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(234) 108 710.84 T
8 8 Q
(P) 143.82 710.84 T
(erf) 148.4 710.84 T
(or) 158.2 710.84 T
(m) 166.07 710.84 T
(ance and The Distr) 173.41 710.84 T
(ibuted Extension :) 246.03 710.84 T
0 F
(19.3 Addr) 315.95 710.84 T
(esses and the) 352.93 710.84 T
7 F
(with ... near) 407.91 710.84 T
0 F
( constr) 449.26 710.84 T
(uct) 475.16 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 18 Q
0 X
(19.3  Ad) 108 654 T
(dresses and the) 176.85 654 T
7 F
(with ... near) 318.91 654 T
108 623.98 504 627 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 625.49 540 625.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(construct) 108 633 T
5 10 Q
-0.31 (W) 108 604.31 P
-0.31 (e ha) 116.64 604.31 P
-0.31 (v) 132.51 604.31 P
-0.31 (e come this f) 137.36 604.31 P
-0.31 (ar without saying an) 187.73 604.31 P
-0.31 (ything about ho) 268.04 604.31 P
-0.31 (w pSather produces the illusion of one lar) 329.96 604.31 P
-0.31 (ge) 494.56 604.31 P
-0.33 (shared address space on a platform, such as a netw) 108 592.31 P
-0.33 (ork of w) 307.63 592.31 P
-0.33 (orkstations, where the reality is a number) 340.74 592.31 P
0.01 (of distinct address spaces. There is still no need for implementation detail, b) 108 580.31 P
0.01 (ut the f) 412.39 580.31 P
0.01 (act this requires) 440.65 580.31 P
-0.36 (some kind of address translation must be tak) 108 568.31 P
-0.36 (en into account for peak performance. The) 283.41 568.31 P
7 F
-0.4 (near) 453.6 568.31 P
5 F
-0.36 ( and) 473.61 568.31 P
7 F
-0.4 (far) 492.33 568.31 P
5 F
0.96 (predicates allo) 108 556.31 P
0.96 (w a programmer to test locality at e) 166.76 556.31 P
0.96 (x) 315.28 556.31 P
0.96 (ecution time and act accordingly) 320.13 556.31 P
0.96 (. But a little) 453.87 556.31 P
0.13 (thought mak) 108 544.31 P
0.13 (es it clear that there must be some penalty paid because the compiler does not kno) 158.31 544.31 P
0.13 (w if) 488.04 544.31 P
-0.25 (a reference type v) 108 532.31 P
-0.25 (ariable will refer to an object that is near or f) 178.36 532.31 P
-0.25 (ar) 354.63 532.31 P
-0.25 (. This could ob) 361.85 532.31 P
-0.25 (viously in) 420.95 532.31 P
-0.25 (v) 460.04 532.31 P
-0.25 (olv) 464.84 532.31 P
-0.25 (e e) 477.47 532.31 P
-0.25 (xtra) 488.45 532.31 P
0.16 (storage, additional tests, etc. Moreo) 108 520.31 P
0.16 (v) 250.97 520.31 P
0.16 (er) 255.82 520.31 P
0.16 (, the uncertainty about the locality of referenced objects can) 263.19 520.31 P
-0.13 (interfere with in-lining and other code optimizations. In short, it can be v) 108 508.31 P
-0.13 (ery useful for the compiler) 397.89 508.31 P
-0.07 (to kno) 108 496.31 P
-0.07 (w at compile time that certain v) 132.96 496.31 P
-0.07 (ariables hold object that will be on the same cluster as the e) 258.93 496.31 P
-0.07 (x-) 495.67 496.31 P
-0.11 (ecuting thread. It is possible that \337o) 108 484.31 P
-0.11 (w analysis could determine enough of this to suf) 250.14 484.31 P
-0.11 (\336ce, b) 442.88 484.31 P
-0.11 (ut we ha-) 467.01 484.31 P
(v) 108 472.31 T
(en\325) 112.85 472.31 T
(t con) 125.44 472.31 T
(vinced ourselv) 144.76 472.31 T
(es that this is the case.) 203.21 472.31 T
0.18 (What we ha) 108 450.31 P
0.18 (v) 155.92 450.31 P
0.18 (e done is include into pSather a construct that allo) 160.77 450.31 P
0.18 (ws the programmer to tell the com-) 361.83 450.31 P
-0.42 (piler that the objects in certain reference v) 108 438.31 P
-0.42 (ariables will be near for a gi) 273.37 438.31 P
-0.42 (v) 382.79 438.31 P
-0.42 (en block of computation. The) 387.64 438.31 P
(syntax of this follo) 108 426.31 T
(ws a common Sather pattern:) 183.03 426.31 T
7 F
(with) 120.5 404.31 T
5 F
( <id list>) 138.28 404.31 T
7 F
(near) 177.07 404.31 T
5 F
(        <statement list>) 108 382.31 T
7 F
(else) 123 360.31 T
5 F
( <statement list>) 141.34 360.31 T
7 F
(end) 120.5 338.31 T
5 F
(;) 137.18 338.31 T
0.32 ( The id list is a list of identi\336ers, and possibly) 108 316.31 P
7 F
0.35 (self) 296.49 316.31 P
5 F
0.32 (, that are guaranteed to be near for the block.At) 312.05 316.31 P
0.08 (the start of the block, all of these are tested and, if an) 108 304.31 P
0.08 (y are not either near or v) 320.41 304.31 P
0.08 (oid, the else clause is) 418.98 304.31 P
-0.14 (e) 108 292.31 P
-0.14 (x) 112.29 292.31 P
-0.14 (ecuted if present. It is a f) 117.14 292.31 P
-0.14 (atal error if the else clause is needed and is not present. The programmer) 215.34 292.31 P
0.01 (has also promised the compiler that the contents of all these identi\336ers will remain near throughout) 108 280.31 P
-0.19 (the block. Ob) 108 268.31 P
-0.19 (viously enough, checking this could be costly enough to wipe out the adv) 161.63 268.31 P
-0.19 (antage of us-) 452.73 268.31 P
0.02 (ing the construct. This is handled in the standard Sather f) 108 256.31 P
0.02 (ashion, when the appropriate \337ags are set,) 336.14 256.31 P
-0.5 (the nearness of named identi\336ers is check) 108 244.31 P
-0.5 (ed. As a simple \336rst e) 271.55 244.31 P
-0.5 (xample, we can e) 355.57 244.31 P
-0.5 (xpand the schematic) 423.35 244.31 P
(code of the pre) 108 232.31 T
(vious section.) 167.45 232.31 T
(     local_v:T) 110.5 188.31 T
(:=v;) 160.83 188.31 T
(      if f) 108 166.31 T
(ar\050v\051 then local_v := v) 134.84 166.31 T
(.cop) 223.7 166.31 T
(y end;) 240.54 166.31 T
(      with local_v  near  res:=local_v) 108 144.31 T
(.ops end;) 248.8 144.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "234" 234
%%Page: "235" 235
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(P) 170.2 710.84 T
(erf) 174.77 710.84 T
(or) 184.57 710.84 T
(m) 192.44 710.84 T
(ance and The Distr) 199.79 710.84 T
(ibuted Extension :) 272.4 710.84 T
0 F
(19.3) 342.32 710.84 T
(Addr) 360.05 710.84 T
(esses and the) 379.31 710.84 T
7 F
(with ... near) 434.28 710.84 T
0 F
( con-) 475.64 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.61 (F) 108 659.33 P
0.61 (or a real e) 113.41 659.33 P
0.61 (xample, consider the follo) 154.79 659.33 P
0.61 (wing code from a picture processing program. that applys a) 260.79 659.33 P
-0.59 (supplied \336lter to each pix) 108 647.33 P
-0.59 (el. The procedue apply is started on each cluster and gets a cop) 207.16 647.33 P
-0.59 (y of the \336lter) 451.88 647.33 P
-0.59 (.) 501.5 647.33 P
(It then mak) 108 635.33 T
(es a local cop) 153.45 635.33 T
(y of the \336lter and uses with near to inform the compiler about it.) 207.5 635.33 T
0.11 ( W) 108 294.33 P
0.11 (e don\325) 119.25 294.33 P
0.11 (t ha) 144.44 294.33 P
0.11 (v) 159.07 294.33 P
0.11 (e enough conte) 163.92 294.33 P
0.11 (xt to understand all the details, b) 224.52 294.33 P
0.11 (ut the structure of the code should be) 355.23 294.33 P
0.51 (clear) 108 282.33 P
0.51 (. Ob) 126.88 282.33 P
0.51 (viously the inner loop will run often and it is w) 144.46 282.33 P
0.51 (orth the set up costs to help the compiler) 337.74 282.33 P
(generate the best possible code.) 108 270.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(class PHOTO is) 144 615.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- include S_PHOTO{SPREAD_AREF2{FLT}};) 144 606.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- include S_PHOTO{SPREAD_PEANO2{FLT}};) 144 597.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   -- include S_PHOTO{SPREAD_CHUNKS2{INT}};) 144 588.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   include S_PHOTO{BIN_CHUNKS2{INT}};) 144 579.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   apply\050aa:FILTER\051 is) 144 561.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      t::=t1;) 144 552.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      t1:=t2;) 144 543.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      t2:=t;) 144 534.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      tmp::=t1;) 144 525.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      parloop) 144 516.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      do@clusters!;) 144 507.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         parloop p::=cl_size.times!;) 144 498.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         do) 144 489.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            i:INT;) 144 480.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            a:FILTER;) 144 471.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            if far\050aa\051 then) 144 462.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(               a:=aa.copy;) 144 453.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            else) 144 444.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(               a:=aa;) 144 435.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            end;) 144 426.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            with a near) 144 417.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(              loop) 144 408.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(              x::=\050t.ll2+\050t.local.cs2*p/cl_size\051\051.upto!\050t.ll2+t.loc\051) 144 399.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(                  loop y::=t.ll1.upto!\050t.ll1+t.local.cs1-1\051;) 144 390.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(                     [x,y]:=pixel_for\050t2,x,y,a\051;) 144 381.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(                  end;) 144 372.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(               end;) 144 363.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(            end;) 144 354.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(         end;) 144 345.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(      end;) 144 336.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(   end;) 144 327.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 318.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 623.88 129.6 313.13 2 L
V
0 Z
N
489.6 623.88 489.6 313.13 2 L
V
N
129.48 624 489.73 624 2 L
V
N
129.48 313 489.73 313 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "235" 235
%%Page: "236" 236
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(236) 108 710.84 T
8 8 Q
(P) 143.82 710.84 T
(erf) 148.4 710.84 T
(or) 158.2 710.84 T
(m) 166.07 710.84 T
(ance and The Distr) 173.41 710.84 T
(ibuted Extension :) 246.03 710.84 T
0 F
(19.3 Addr) 315.95 710.84 T
(esses and the) 352.93 710.84 T
7 F
(with ... near) 407.91 710.84 T
0 F
( constr) 449.26 710.84 T
(uct) 475.16 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "236" 236
%%Page: "237" 237
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Adv) 229.68 710.84 T
(anced pSather T) 245.27 710.84 T
(opics :) 308.86 710.84 T
0 F
(20.1) 336.08 710.84 T
(Exceptions in pSather) 353.81 710.84 T
6 10 Q
(237) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-0.25 (Adv) 108 642 S
-0.25 (anced pSather) 177.42 642 S
-0.25 (T) 108 600 S
-0.25 (opics) 120.57 600 S
108 460.98 504 464 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 462.49 540 462.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(20.1  Exceptions in pSather) 108 470 T
5 10 Q
-0.45 ( Exception handling is comple) 108 441.31 P
-0.45 (x under an) 227.7 441.31 P
-0.45 (y conditions and parallelism only mak) 268.85 441.31 P
-0.45 (es it w) 419.54 441.31 P
-0.45 (orse. The basic) 444.64 441.31 P
0.08 (design decision for serial Sather w) 108 429.31 P
0.08 (as to ha) 246.32 429.31 P
0.08 (v) 276.83 429.31 P
0.08 (e simple terminating e) 281.68 429.31 P
0.08 (xceptions as described in Section) 370.93 429.31 P
-0.23 (32.1.4 of the manual. F) 108 417.31 P
-0.23 (or pSather) 199.96 417.31 P
-0.23 (, we considered a number of comple) 240.7 417.31 P
-0.23 (x possibilities and then settled) 384.38 417.31 P
-0.41 (on the simplest possible solution. Exception handling only w) 108 405.31 P
-0.41 (orks on a per) 348.23 405.31 P
-0.41 (-thread basis. The code for) 398.73 405.31 P
0.3 (a thread can include standard Sather) 108 393.31 P
7 F
0.33 (protect) 256.98 393.31 P
5 F
0.3 ( statements. T) 287.55 393.31 P
0.3 (o the e) 343.18 393.31 P
0.3 (xtent that these deal with an) 370.3 393.31 P
0.3 (y e) 483.58 393.31 P
0.3 (x-) 495.67 393.31 P
0.23 (ceptions that are raised in that thread, computation can continue. It is a f) 108 381.31 P
0.23 (atal error for an e) 399.4 381.31 P
0.23 (xception) 469.56 381.31 P
0.03 (to be raised in a thread and not handled by that thread. Ev) 108 369.31 P
0.03 (en so it turns out that a stack discipline is) 339.01 369.31 P
(not enough to handle some of the cases that are discussed belo) 108 357.31 T
(w) 357.43 357.31 T
(.) 364 357.31 T
4 12 Q
(20.1.1   Yielding inside loc) 108 315.98 T
(ks) 256.5 315.98 T
5 10 Q
0.14 ( The pSather primiti) 108 293.31 P
0.14 (v) 189.01 293.31 P
0.14 (es are po) 193.86 293.31 P
0.14 (werful and as a consequence, there can be subtle interactiionsamong) 229.44 293.31 P
0.27 (them. W) 108 281.31 P
0.27 (e ha) 141.91 281.31 P
0.27 (v) 158.37 281.31 P
0.27 (e tried to preserv) 163.21 281.31 P
0.27 (e orthogonality and ha) 231.36 281.31 P
0.27 (v) 321.69 281.31 P
0.27 (e as fe) 326.54 281.31 P
0.27 (w restrictions as possible and this has) 352.38 281.31 P
0.11 (w) 108 269.31 P
0.11 (ork) 115.12 269.31 P
0.11 (ed out f) 128.35 269.31 P
0.11 (airly well. One of the more comple) 159.02 269.31 P
0.11 (x issues in) 299.8 269.31 P
0.11 (v) 341.3 269.31 P
0.11 (olv) 346.1 269.31 P
0.11 (ed yield statements within lock con-) 358.73 269.31 P
-0.1 (structs and this w) 108 257.31 P
-0.1 (as prohibited in earlier releases. Recall that a yield statement in Sather iter is a co-) 177.3 257.31 P
(routine and retains conte) 108 245.31 T
(xt for the return of control.) 206.44 245.31 T
( Exception stacks become trees - Claudio thesis.) 108 223.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "237" 237
%%Page: "238" 238
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(238) 108 710.84 T
8 8 Q
(Adv) 200.9 710.84 T
(anced pSather T) 216.49 710.84 T
(opics :) 280.08 710.84 T
0 F
(20.2 User de\336ned $LOCK classes) 307.3 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(20.1.2   Implementation Considerations) 108 658 T
(20.1.3   Thread-saf) 108 616 T
(e libraries) 212.59 616 T
108 553.98 504 557 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 555.49 540 555.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 18 Q
0 X
0 0 0 1 0 0 0 K
(20.2  User de\336ned $LOCK c) 108 563 T
(lasses) 342.72 563 T
5 10 Q
-0.05 ( As we ha) 108 534.31 P
-0.05 (v) 147.37 534.31 P
-0.05 (e discussed, the v) 152.21 534.31 P
-0.05 (arious forms of the lock statement w) 221.81 534.31 P
-0.05 (ork for an) 367.51 534.31 P
-0.05 (y subtype of $) 406.69 534.31 P
7 F
-0.05 (LOCK) 463.49 534.31 P
5 F
-0.05 (. In) 490.72 534.31 P
1.01 (Section 1.3 we discussed) 108 522.31 P
7 F
1.12 (MUTEX) 214.52 522.31 P
5 F
1.01 ( and the v) 249.52 522.31 P
1.01 (arious kinds of reader) 291.45 522.31 P
1.01 (-writer locks. Section 1.4 w) 381.2 522.31 P
1.01 (as) 495.67 522.31 P
0.33 (lar) 108 510.31 P
0.33 (gely about the) 118.37 510.31 P
7 F
0.36 (GATE) 178.51 510.31 P
5 F
0.33 ( and) 205.74 510.31 P
7 F
0.36 (GATE) 225.83 510.31 P
5 F
0.33 ({) 253.06 510.31 P
7 F
0.36 (T) 257.86 510.31 P
5 F
0.33 (} classes. As we mentioned brie\337y) 263.97 510.31 P
0.33 (, there are tw) 403.62 510.31 P
0.33 (o other pre-) 456.7 510.31 P
-0.12 (b) 108 498.31 P
-0.12 (uilt classes that are restrictions of the full GA) 112.8 498.31 P
-0.12 (TE functionality) 292.39 498.31 P
-0.12 (. The A) 357.45 498.31 P
-0.12 (TT) 386.37 498.31 P
-0.12 (A) 397.66 498.31 P
-0.12 (CH class supports the at-) 404.48 498.31 P
0.2 (tachment of multiple threads\050 cf. Section 1.4.2\051 b) 108 486.31 P
0.2 (ut does not ha) 305.85 486.31 P
0.2 (v) 362.08 486.31 P
0.2 (e return v) 366.93 486.31 P
0.2 (alues. The FUTURE{T}) 405.4 486.31 P
-0.06 (classes do support return v) 108 474.31 P
-0.06 (alues, b) 214.18 474.31 P
-0.06 (ut only allo) 244.47 474.31 P
-0.06 (w a single thread to be attached. The table on page 80) 289.67 474.31 P
0 (of the language description describes e) 108 462.31 P
0 (xactly which methods are a) 263.09 462.31 P
0 (v) 372.32 462.31 P
0 (ailable in each class. This is not) 377.07 462.31 P
0.2 (an adv) 108 450.31 P
0.2 (anced topic, b) 134.33 450.31 P
0.2 (ut is only the pro) 190.36 450.31 P
0.2 (v) 258.8 450.31 P
0.2 (erbial tip of the iceber) 263.65 450.31 P
0.2 (g. It turns out that the current pSather) 352.6 450.31 P
(pro) 108 438.31 T
(vides mechanism for a user to de\336ne his/her o) 121.18 438.31 T
(wn $) 304.79 438.31 T
7 F
(LOCK) 324.51 438.31 T
5 F
( classes.) 351.74 438.31 T
-0.21 (W) 108 416.31 P
-0.21 (e no) 116.64 416.31 P
-0.21 (w describe the interf) 133.12 416.31 P
-0.21 (ace that synchronization objects ha) 214.32 416.31 P
-0.21 (v) 353.27 416.31 P
-0.21 (e to pro) 358.12 416.31 P
-0.21 (vide in order to subtype from) 388.1 416.31 P
-0.22 (the type) 108 404.31 P
9 F
-0.53 ($LOCK) 142 404.31 P
5 F
-0.22 ( and be usable in lock statements. At the end of this description we will pro) 172 404.31 P
-0.22 (vide tw) 469.6 404.31 P
-0.22 (o) 499 404.31 P
0.07 (e) 108 392.31 P
0.07 (xamples, namely the MUTEX implementation and the sk) 112.29 392.31 P
0.07 (eleton of the READER/WRITER imple-) 341.52 392.31 P
0.58 (mentation. Other e) 108 380.31 P
0.58 (xamples and descriptions of synchronization objects are a) 183.72 380.31 P
0.58 (v) 418.36 380.31 P
0.58 (ailable online in the) 423.11 380.31 P
-0.1 (pSather library code. This section is tak) 108 368.31 P
-0.1 (en from Claudio Fleiner\325) 265.86 368.31 P
-0.1 (s disseration, with minor modi\336ca-) 364.7 368.31 P
(tions.) 108 356.31 T
0.37 (A synchronization object has an internal state that de\336nes which threads may acquire) 108 334.31 P
5 8 Q
0.29 (1) 452.88 338.31 P
5 10 Q
0.37 ( this object.) 456.88 334.31 P
-0.51 (The internal state may only change when the lock manager calls some of the functions de\336ned belo) 108 322.31 P
-0.51 (w) 496.78 322.31 P
0.54 (after a thread has acquired this object and before it is released ag) 108 310.31 P
0.54 (ain. Such a state change may be) 373.27 310.31 P
(visible to other threads only after the object has been unlock) 108 298.31 T
(ed.) 348.97 298.31 T
108 138 504 158.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 149.09 240.98 149.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 108 132.67 T
(W) 118 132.67 T
(e use the term acquiring a synchr) 125.26 132.67 T
(onization object as a synonym to locking an object to avoid confusion, as) 242.4 132.67 T
(locking an object has alr) 108 123.67 T
(eady a pr) 192.83 123.67 T
(ede\336ned meaning, which does not apply to all the synchr) 225.82 123.67 T
(onization objects de-) 428.39 123.67 T
(\336ned in the pSather library) 108 114.67 T
(, like RENDEZVOUS and BARRIER locks.) 202.52 114.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "238" 238
%%Page: "239" 239
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Adv) 218.04 710.84 T
(anced pSather T) 233.63 710.84 T
(opics :) 297.21 710.84 T
0 F
(20.2) 324.44 710.84 T
(User de\336ned $LOCK classes) 342.16 710.84 T
6 10 Q
(239) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 11 Q
0 X
(The class) 108 658.67 T
9 F
($LOCK) 151.99 658.67 T
5 F
( is the superclass for all synchronization objects.) 184.99 658.67 T
5 10 Q
(Those functions must respect some special properties:) 108 513.33 T
(\245) 108 495.33 T
(None of those functions may block, use the) 121.54 495.33 T
7 F
(lock) 297.35 495.33 T
5 F
(statement or raise an e) 321.13 495.33 T
(xception.) 410.4 495.33 T
(\245) 108 480.33 T
(the functions must be \324class thread safe\325, b) 121.54 480.33 T
(ut not \324object thread safe\325, that is, the same function) 291.86 480.33 T
(may be called in dif) 121.54 468.33 T
(ferent objects at the same time, b) 200.72 468.33 T
(ut the system guarantees that only one) 332.44 468.33 T
(function is called per object at an) 121.54 456.33 T
(y time.) 254.14 456.33 T
(\245) 108 441.33 T
(The state of a synchronization object may only be changed within a) 121.54 441.33 T
7 F
(lock ... end) 394.27 441.33 T
5 F
( block or with-) 442.63 441.33 T
(in one of the functions de\336ned in the $) 121.54 429.33 T
7 F
(LOCK) 275.97 429.33 T
5 F
( interf) 303.2 429.33 T
(ace.) 327.26 429.33 T
(\245) 108 414.33 T
(The functions should not ha) 121.54 414.33 T
(v) 233 414.33 T
(e side ef) 237.85 414.33 T
(fects outside their lock objects.) 270.92 414.33 T
1.03 (The) 108 392.33 P
7 F
1.15 (THREAD_ID) 127.08 392.33 P
5 F
1.03 ( class used in this e) 183.75 392.33 P
1.03 (xample is a standard pSather class with the lock interf) 265.7 392.33 P
1.03 (ace) 490.68 392.33 P
0.46 (sho) 108 380.33 P
0.46 (wn. A thread-id is, as f) 121.64 380.33 P
0.46 (ar as the programmer is concerned, just an opaque v) 215.2 380.33 P
0.46 (alue that cannot be) 427.36 380.33 P
-0.36 (used for an) 108 368.33 P
-0.36 (ything else. The interf) 151.57 368.33 P
-0.36 (ace pro) 238.72 368.33 P
-0.36 (vided allo) 267.36 368.33 P
-0.36 (ws one to use thread-id\325) 306.47 368.33 P
-0.36 (s in hash tables and to sort) 400.59 368.33 P
0.07 (them, and, for deb) 108 356.33 P
0.07 (ugging purposes, it is also possible to print an id. Ho) 181.05 356.33 P
0.07 (we) 392.06 356.33 P
0.07 (v) 403.47 356.33 P
0.07 (er) 408.32 356.33 P
0.07 (, there is no guarantee) 415.69 356.33 P
0.08 (about an) 108 344.33 P
0.08 (y special format of it, and the user should not depend on either the current size of the id or) 142.09 344.33 P
0.21 (a particular format or order) 108 332.33 P
0.21 (. It does not , for e) 217.13 332.33 P
0.21 (xample, guarantee that threads created later get an id) 291.56 332.33 P
-0.31 (that is lar) 108 320.33 P
-0.31 (ger than threads created earlier) 144.43 320.33 P
-0.31 (. The only w) 265.94 320.33 P
-0.31 (ay for a thread  to create thread-id\325) 315.47 320.33 P
-0.31 (s is to ask for) 451.89 320.33 P
(its o) 108 308.33 T
(wn id, or the get a nil id which is guaranteed to be dif) 124.7 308.33 T
(ferent from all other id\325) 338.31 308.33 T
(s.) 432.18 308.33 T
4 12 Q
(20.2.1   Reser) 108 155 T
(v) 184.84 155 T
(ab) 191.27 155 T
(le) 205.15 155 T
(, Reser) 215.28 155 T
(ve and Free) 255.42 155 T
5 10 Q
0.42 (These three functions are the most important ones and must be de\336ned by all synchronization ob-) 108 132.33 P
0.35 (jects. All three functions ha) 108 120.33 P
0.35 (v) 219.47 120.33 P
0.35 (e one parameter) 224.32 120.33 P
0.35 (, namely the ID of the thread that tries to acquire this) 288.49 120.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(abstract class $LOCK is) 144 637.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(primary:$LOCK;) 156.6 626.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(reservable\050tid:THREAD_ID\051:BOOL;) 156.6 615.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(reserve\050tid:THREAD_ID\051;) 156.6 604.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(free\050tid:THREAD_ID\051;) 156.6 593.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(request_reservation\050tid:THREAD_ID\051;) 156.6 582.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(cancel_reservation\050tid:THREAD_ID\051;) 156.6 571.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(combinations:ARRAY{ARRAY{$LOCK}};) 156.6 560.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(wait_for\050tid:THREAD_ID\051:ARRAY{THREAD_ID};) 156.6 549.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 538.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(immutable class THREAD_ID) 144 287.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(< $IS_LT{THREAD_ID}, $HASH, $NIL, $STR is) 269.82 287.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(nil:SAME;) 178.2 276.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- returns the nil id, which is different from all other thread id\325s.) 222.1 276.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(me:SAME;) 178.2 265.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- returns the id of the calling thread.) 223.76 265.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is_nil:BOOL;) 178.2 254.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 233.21 254.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(returns true if self is the nil id.) 239.87 254.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is_eq\050e:THREAD_ID\051:BOOL;) 178.2 243.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- true if e and self are the same id.) 302.07 243.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(is_lt\050e:THREAD_ID\051:BOOL;) 178.2 232.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- true if self is smaller than e.) 298.19 232.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(hash:INT;) 178.2 221.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- returns a hash value useful for hash tables) 221.25 221.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(str:STR;) 178.2 210.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(-- returns a string, useful for debugging) 212.1 210.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(end;) 144 199.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 646.88 129.6 532.12 2 L
V
0 Z
N
489.6 646.88 489.6 532.12 2 L
V
N
129.48 647 489.73 647 2 L
V
N
129.48 532 489.73 532 2 L
V
N
129.6 296.88 129.6 193.13 2 L
V
N
489.6 296.88 489.6 193.13 2 L
V
N
129.48 297 489.73 297 2 L
V
N
129.48 193 489.73 193 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "239" 239
%%Page: "240" 240
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(240) 108 710.84 T
8 8 Q
(Adv) 200.9 710.84 T
(anced pSather T) 216.49 710.84 T
(opics :) 280.08 710.84 T
0 F
(20.2 User de\336ned $LOCK classes) 307.3 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
0.5 (lock.) 108 659.33 P
9 F
1.19 (THREAD_ID) 130.72 659.33 P
5 F
0.5 ('s can be compared, the class also de\336nes a hash v) 184.72 659.33 P
0.5 (alue and a) 389.25 659.33 P
7 F
0.55 (str:STR) 433.78 659.33 P
5 F
0.5 ( function) 467.67 659.33 P
(useful for deb) 108 647.33 T
(ugging. See [http:...] for a more detailed description of this class.) 163.34 647.33 T
7 F
0.44 (Reservable) 108 625.33 P
5 F
0.4 ( returns true if the object can be acquired or lock) 158.57 625.33 P
0.4 (ed by the thread passed as ID, while) 356.82 625.33 P
7 F
(reserve) 108 613.33 T
5 F
( actually acquires the object.) 141.34 613.33 T
7 F
(free) 257.98 613.33 T
5 F
( will release the lock ag) 275.21 613.33 T
(ain.) 369.86 613.33 T
(Those three functions are already enough to de\336ne the MUTEX class as sho) 108 591.33 T
(wn belo) 412.13 591.33 T
(w) 443.82 591.33 T
4 12 Q
(20.2.2   Primar) 108 231 T
(y) 189.5 231 T
5 10 Q
0.12 (W) 108 208.33 P
0.12 (ith the e) 117.04 208.33 P
0.12 (xception of the simple locks lik) 149.35 208.33 P
0.12 (e) 275.68 208.33 P
7 F
0.13 (MUTEX) 282.73 208.33 P
5 F
0.12 ( it is often necessary to ha) 317.73 208.33 P
0.12 (v) 422.12 208.33 P
0.12 (e dif) 426.97 208.33 P
0.12 (ferent lock ob-) 444.89 208.33 P
0.12 (jects that w) 108 196.33 P
0.12 (ork on the same lock, lik) 153.68 196.33 P
0.12 (e the) 253.05 196.33 P
7 F
0.13 (reader) 274.94 196.33 P
5 F
0.12 ( and the) 303.84 196.33 P
7 F
0.13 (writer) 338.35 196.33 P
5 F
0.12 ( of a reader/writer lock which form) 362.79 196.33 P
-0.4 (a lock f) 108 184.33 P
-0.4 (amily) 137.1 184.33 P
-0.4 (. The system has to kno) 159.23 184.33 P
-0.4 (w which lock objects w) 251.45 184.33 P
-0.4 (ork together in this w) 344.2 184.33 P
-0.4 (ay) 428.06 184.33 P
-0.4 (.) 436.85 184.33 P
7 F
-0.44 (primary) 441.46 184.33 P
5 F
-0.4 ( is used) 474.79 184.33 P
0.14 (by the system to get the "main" lock object of a f) 108 172.34 P
0.14 (amily of lock objects. F) 305.09 172.34 P
0.14 (or all f) 400.22 172.34 P
0.14 (amily members the) 427.06 172.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 8 Q
(class) 144 571.67 T
9 F
( MUTEX < $LOCK) 168 571.67 T
12 F
(is) 240 571.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       attr) 144 553.67 T
9 F
( locked_by:THREAD_ID;--) 196.8 553.67 T
10 F
(ID of the thread that currently locks this MUTEX) 312 553.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(attr) 178.2 535.67 T
9 F
( locked:INT;) 197.4 535.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(--) 178.2 526.67 T
10 F
(number of times that the thread stored in locked_by has locked this MUTEX) 192.6 526.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(        reservable\050tid:THREAD_ID\051:BOOL) 144 508.67 T
12 F
(is) 331.2 508.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 190.8 499.67 T
10 F
(returns true if either this MUTEX is not locked yet or already locked by the) 205.2 499.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(   --) 178.2 490.67 T
10 F
(same thread that tries to lock it again) 207 490.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(return) 192 481.67 T
9 F
( locked=0) 220.8 481.67 T
12 F
(or) 268.8 481.67 T
9 F
( locked_by=tid;) 278.4 481.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 472.67 T
9 F
(;) 192.6 472.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       reserve\050tid:THREAD_ID\051) 144 454.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 190.8 445.67 T
10 F
(locks this MUTEX for the thread) 205.2 445.67 T
9 F
(tid) 311.86 445.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(          pre) 144 436.67 T
9 F
( locked=0) 206.4 436.67 T
12 F
(or) 254.4 436.67 T
9 F
( locked_by=tid) 264 436.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(is) 178.2 427.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(locked:=locked+1;) 190.8 418.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(locked_by:=tid;) 190.8 409.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 400.67 T
9 F
(;) 192.6 400.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(free\050tid:THREAD_ID\051) 178.2 382.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 190.8 373.67 T
10 F
(frees the lock, but only the thread that locked it can unlock it again.) 205.2 373.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(          pre) 144 364.67 T
9 F
( locked>0) 206.4 364.67 T
12 F
(and) 254.4 364.67 T
9 F
( locked_by=tid) 268.8 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(is) 178.2 355.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(  locked:=locked-1;) 178.2 337.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 190.8 328.67 T
10 F
(not really necessary, but makes the code cleaner) 205.2 328.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(if) 190.8 319.67 T
9 F
( locked=0) 200.4 319.67 T
12 F
(then) 248.4 319.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(locked_by:=THREAD_ID::nil;) 203.4 310.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 190.8 301.67 T
9 F
(;) 205.2 301.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 292.67 T
9 F
(;) 192.6 292.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 144 283.67 T
9 F
(;) 158.4 283.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 579.88 129.6 269.13 2 L
V
0 Z
N
489.6 579.88 489.6 269.13 2 L
V
N
129.48 580 489.73 580 2 L
V
N
129.48 269 489.73 269 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "240" 240
%%Page: "241" 241
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Adv) 218.04 710.84 T
(anced pSather T) 233.63 710.84 T
(opics :) 297.21 710.84 T
0 F
(20.2) 324.44 710.84 T
(User de\336ned $LOCK classes) 342.16 710.84 T
6 10 Q
(241) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.01 (method) 108 659.33 P
9 F
0.02 (primary) 140.51 659.33 P
5 F
0.01 ( has to return the same object. Belo) 182.51 659.33 P
0.01 (w we sho) 323.4 659.33 P
0.01 (w the implementation of the reader/) 360.93 659.33 P
(writer lock.) 108 647.33 T
-0.28 (The f) 108 495.33 P
-0.28 (air reader lock dele) 129 495.33 P
-0.28 (g) 204.93 495.33 P
-0.28 (ates its functionality to the writer for con) 209.88 495.33 P
-0.28 (v) 371.12 495.33 P
-0.28 (enience, so that all the code is in) 375.97 495.33 P
(one location.) 108 483.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 8 Q
(--) 144 627.67 T
10 F
(The fair reader/writer lock. The two attributes are just used to store the) 158.4 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 144 618.67 T
10 F
(reader and the writer part respectively.) 158.4 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(class) 144 609.67 T
9 F
( FRW_LOCK < $RW_LOCK) 168 609.67 T
12 F
(is) 268.8 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(readonly) 178.2 600.67 T
(attr) 221.4 600.67 T
9 F
( reader:$READER_LOCK;) 240.6 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(readonly) 178.2 591.67 T
(attr) 221.4 591.67 T
9 F
( writer:$WRITER_LOCK;) 240.6 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create:) 178.2 582.67 T
12 F
(SAME) 211.8 582.67 T
(is) 235.8 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(r::=) 190.8 573.67 T
12 F
(new) 210 573.67 T
9 F
(;) 224.4 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r.writer:=#FRW_WRITER;) 190.8 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r.reader:=#FRW_READER\050r.writer\051;) 190.8 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(return) 190.8 546.67 T
9 F
( r;) 219.6 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 537.67 T
9 F
(;) 192.6 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 144 528.67 T
9 F
(;) 158.4 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(class) 144 463.67 T
9 F
( FRW_READER < $READER_LOCK) 168 463.67 T
12 F
(is) 297.6 463.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 454.67 T
10 F
(the reader delegates all calls to the writer. This way the code is concentrated) 192.6 454.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 445.67 T
10 F
(in one class to make maintenance easier.) 192.6 445.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(private) 178.2 436.67 T
(attr) 216.6 436.67 T
9 F
( w:$RW_WRITER;) 235.8 436.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(primary:$RW_WRITER) 178.2 427.67 T
12 F
(is) 269.4 427.67 T
(return) 283.8 427.67 T
9 F
( w;) 312.6 427.67 T
12 F
(end) 331.8 427.67 T
9 F
(;) 346.2 427.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create\050wr:$RW_WRITER\051:SAME) 178.2 418.67 T
12 F
(is) 307.8 418.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(r::=) 190.8 409.67 T
12 F
(new) 210 409.67 T
9 F
(;) 224.4 409.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r.w:=wr;) 190.8 400.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(return) 190.8 391.67 T
9 F
( r;) 219.6 391.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 382.67 T
9 F
(;) 192.6 382.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(reservable\050tid:THREAD_ID\051:BOOL) 178.2 373.67 T
12 F
(is) 327 373.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return) 190.8 364.67 T
9 F
( w.r_reservable\050tid\051;) 219.6 364.67 T
12 F
(end) 325.2 364.67 T
9 F
(;) 339.6 364.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(reserve\050tid:THREAD_ID\051) 178.2 355.67 T
12 F
(is) 288.6 355.67 T
9 F
(w.r_reserve\050tid\051;) 303 355.67 T
12 F
(end) 389.4 355.67 T
9 F
(;) 403.8 355.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(free\050tid:THREAD_ID\051) 178.2 346.67 T
12 F
(is) 274.2 346.67 T
9 F
(w.r_free\050tid\051;) 288.6 346.67 T
12 F
(end) 360.6 346.67 T
9 F
(;) 375 346.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 144 337.67 T
9 F
(;) 158.4 337.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 514.12 2 L
V
0 Z
N
489.6 635.88 489.6 514.12 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 514 489.73 514 2 L
V
N
129.6 471.88 129.6 332.13 2 L
V
N
489.6 471.88 489.6 332.13 2 L
V
N
129.48 472 489.73 472 2 L
V
N
129.48 332 489.73 332 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "241" 241
%%Page: "242" 242
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(242) 108 710.84 T
8 8 Q
(Adv) 200.9 710.84 T
(anced pSather T) 216.49 710.84 T
(opics :) 280.08 710.84 T
0 F
(20.2 User de\336ned $LOCK classes) 307.3 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 10 Q
0 X
(The meat of the lock de\336nition is in the writer) 108 659.33 T
4 12 Q
(20.2.3   Request_reser) 108 263 T
(v) 234.85 263 T
(ation, Cancel_reser) 241.28 263 T
(v) 352.12 263 T
(ation) 358.55 263 T
5 10 Q
-0.43 (Each time a thread w) 108 240.34 P
-0.43 (aits for a lock, the system calls the function) 190.59 240.34 P
7 F
-0.48 (request_reservation) 362.77 240.34 P
5 F
-0.43 (, and, as soon) 451.14 240.34 P
1.2 (as the thread continues, it will call) 108 228.34 P
7 F
1.33 (cancel_reservation) 255.82 228.34 P
5 F
1.2 ( for all locks, re) 339.74 228.34 P
1.2 (g) 407.42 228.34 P
1.2 (ardless of whether the) 412.37 228.34 P
0.24 (thread acquired some, all or none of the locks. Those functions are used as sho) 108 216.34 P
0.24 (wn belo) 425.48 216.34 P
0.24 (w to imple-) 457.41 216.34 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 8 Q
(class) 144 639.67 T
9 F
( FRW_WRITER < $RW_WRITER) 168 639.67 T
12 F
(is) 288 639.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(private attr) 178.2 630.67 T
9 F
( writer_id:THREAD_ID;) 235.8 630.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(private attr) 178.2 621.67 T
9 F
( write_locks,read_locks:INT;) 235.8 621.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(create:) 178.2 612.67 T
12 F
(SAME) 211.8 612.67 T
(is return new; end;) 235.8 612.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(primary:$LOCK) 178.2 603.67 T
12 F
(is) 245.4 603.67 T
(return) 259.8 603.67 T
(self) 293.4 603.67 T
9 F
(;) 312.6 603.67 T
12 F
(end) 322.2 603.67 T
9 F
(;) 336.6 603.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 178.2 585.67 T
10 F
(the next three functions are used when working on the writer) 192.6 585.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 576.67 T
10 F
(They work exactly the same way as in the MUTEX class) 192.6 576.67 T
(except that reservable has to) 376.49 576.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 567.67 T
10 F
(make the additional check that there is no reader that has acquired this lock) 192.6 567.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(reservable\050tid:THREAD_ID\051:BOOL) 178.2 558.67 T
12 F
(is) 327 558.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return) 190.8 549.67 T
9 F
( \050read_locks=0 and write_locks=0\051) 219.6 549.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(       or writer_id=tid;) 190.8 540.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 531.67 T
9 F
(;) 192.6 531.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(reserve\050tid:THREAD_ID\051) 178.2 522.67 T
12 F
(is) 288.6 522.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(write_locks:=write_locks+1;) 190.8 513.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(writer_id:=tid;) 190.8 504.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 495.67 T
9 F
(;) 192.6 495.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(free\050tid:THREAD_ID\051) 178.2 486.67 T
12 F
(is) 274.2 486.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(write_locks:=write_locks-1;) 190.8 477.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(if) 190.8 468.67 T
9 F
( write_locks=0) 200.4 468.67 T
12 F
(then) 272.4 468.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(writer_id:=THREAD_ID::nil;) 203.4 459.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 190.8 450.67 T
9 F
(;) 205.2 450.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 441.67 T
9 F
(;) 192.6 441.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 178.2 423.67 T
10 F
(the next three functions do the work of the reader) 192.6 423.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 414.67 T
10 F
(A reader cannot acquire the lock unless there is a writer) 192.6 414.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 405.67 T
10 F
(\050note that the same thread can acquire first the writer) 192.6 405.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 396.67 T
10 F
(and then the reader, but not the other way around\051.) 192.6 396.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(r_reservable\050tid:THREAD_ID\051:BOOL) 178.2 387.67 T
12 F
(is) 336.6 387.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return) 190.8 378.67 T
9 F
( write_locks=0 or writer_id=tid;) 219.6 378.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 369.67 T
9 F
(;) 192.6 369.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r_reserve\050tid:THREAD_ID\051) 178.2 360.67 T
12 F
(is) 298.2 360.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(read_locks:=read_locks+1;) 190.8 351.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 342.67 T
9 F
(;) 192.6 342.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r_free\050tid:THREAD_ID\051) 178.2 333.67 T
12 F
(is) 283.8 333.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(read_locks:=read_locks-1;) 190.8 324.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 315.67 T
9 F
(;) 192.6 315.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 647.88 129.6 301.13 2 L
V
0 Z
N
489.6 647.88 489.6 301.13 2 L
V
N
129.48 648 489.73 648 2 L
V
N
129.48 301 489.73 301 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "242" 242
%%Page: "243" 243
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
(Adv) 218.04 710.84 T
(anced pSather T) 233.63 710.84 T
(opics :) 297.21 710.84 T
0 F
(20.2) 324.44 710.84 T
(User de\336ned $LOCK classes) 342.16 710.84 T
6 10 Q
(243) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.28 (ment reader/writer locks with a priority for readers or writers, that is, as soon as a thread w) 108 659.33 P
0.28 (aits for) 475.67 659.33 P
(the reader lock, no thread will be able to get the writer lock.) 108 647.33 T
4 12 Q
(20.2.4   Combinations) 108 332 T
5 10 Q
-0.3 (This function de\336nes which locks of a lock f) 108 309.33 P
-0.3 (amily ha) 283.78 309.33 P
-0.3 (v) 318 309.33 P
-0.3 (e to be lock) 322.85 309.33 P
-0.3 (ed together) 368.22 309.33 P
-0.3 (, a feature used for ren-) 412.23 309.33 P
0.65 (dezv) 108 297.33 P
0.65 (ous locks. Belo) 126.68 297.33 P
0.65 (w) 189.13 297.33 P
0.65 (, we sho) 195.7 297.33 P
0.65 (w ho) 229.8 297.33 P
0.65 (w the rendezv) 249.93 297.33 P
0.65 (ous class de\336ned in the pSather library uses this) 307.12 297.33 P
-0.4 (function to de\336ne that the rendezv) 108 285.33 P
-0.4 (ous main lock) 242.74 285.33 P
9 F
-0.95 (self) 300.16 285.33 P
5 F
-0.4 ( can either be lock) 324.16 285.33 P
-0.4 (ed by itself, or the locks) 395.78 285.33 P
9 F
-0.95 (r1) 492 285.33 P
5 F
(and) 108 273.33 T
9 F
(r2) 124.94 273.33 T
5 F
( ha) 136.94 273.33 T
(v) 148.68 273.33 T
(e to be lock) 153.53 273.33 T
(ed simultaneously by one or tw) 199.81 273.33 T
(o threads.) 324.98 273.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 8 Q
(class) 144 627.67 T
9 F
( WR_WRITER < $RW_WRITER) 168 627.67 T
12 F
(is) 283.2 627.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(include) 178.2 618.67 T
9 F
( FRW_WRITER r_reservable->,) 211.8 618.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(                   request_reservation->;) 178.2 609.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(private) 178.2 600.67 T
(attr) 216.6 600.67 T
9 F
( writers_waiting:FSET{THREAD_ID};) 235.8 600.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(request_reservation\050tid:THREAD_ID\051) 178.2 591.67 T
12 F
(is) 346.2 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(writers_waiting:=writers_waiting.insert\050tid\051;) 190.8 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 573.67 T
9 F
(;) 192.6 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(cancel_reservation\050tid:THREAD_ID\051) 178.2 564.67 T
12 F
(is) 341.4 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(writers_waiting:=writers_waiting.delete\050tid\051;) 190.8 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 546.67 T
9 F
(;) 192.6 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 178.2 537.67 T
10 F
(the reservable function does not change for writers, but readers can now only) 192.6 537.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 528.67 T
10 F
(reserve the lock if no writer is waiting. There is also the special case where the) 192.6 528.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 519.67 T
10 F
(same thread waits for a reader and a writer lock: in this case the reader) 192.6 519.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 510.67 T
10 F
(can actually reserve the lock. This happens for code like) 192.6 510.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(lock) 216 501.67 T
9 F
( rw.reader,rw.writer) 235.2 501.67 T
12 F
(then) 336 501.67 T
9 F
(...) 360 501.67 T
12 F
( end) 374.4 501.67 T
9 F
(;) 393.6 501.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 178.2 492.67 T
10 F
(and) 192.6 492.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(--) 178.2 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(lock) 216 483.67 T
(when) 240 483.67 T
9 F
( rw.reader) 259.2 483.67 T
12 F
(then) 312 483.67 T
9 F
( ...) 331.2 483.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 178.2 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(when) 240 474.67 T
9 F
( rw.writer) 259.2 474.67 T
12 F
(then) 312 474.67 T
9 F
( ...) 331.2 474.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(--) 178.2 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 216 465.67 T
9 F
(;) 230.4 465.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(r_reservable\050tid:THREAD_ID\051:BOOL) 178.2 456.67 T
12 F
(is) 336.6 456.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return) 190.8 447.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(\050write_locks=0) 203.4 438.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(and) 208.2 429.67 T
9 F
( \050writers_waiting.size=0) 222.6 429.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(or) 232.2 420.67 T
9 F
( \050writers_waiting.size=1) 241.8 420.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(and) 251.4 411.67 T
9 F
( writers_waiting.first_elt=tid\051\051\051) 265.8 411.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(or) 203.4 402.67 T
9 F
( writer_id=tid;) 213 402.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 393.67 T
9 F
(;) 192.6 393.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 144 384.67 T
9 F
(;) 158.4 384.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(combinations:ARRAY{ARRAY{$LOCK}}) 178.2 253.67 T
12 F
(is) 336.6 253.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return) 190.8 244.67 T
9 F
( ||self|,|r1,r2||;) 219.6 244.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 235.67 T
9 F
(;) 192.6 235.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
129.6 635.88 129.6 370.13 2 L
V
0 Z
N
489.6 635.88 489.6 370.13 2 L
V
N
129.48 636 489.73 636 2 L
V
N
129.48 370 489.73 370 2 L
V
N
129.6 261.88 129.6 230.13 2 L
V
N
489.6 261.88 489.6 230.13 2 L
V
N
129.48 262 489.73 262 2 L
V
N
129.48 230 489.73 230 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "243" 243
%%Page: "244" 244
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(244) 108 710.84 T
8 8 Q
(Adv) 200.9 710.84 T
(anced pSather T) 216.49 710.84 T
(opics :) 280.08 710.84 T
0 F
(20.2 User de\336ned $LOCK classes) 307.3 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(20.2.5   W) 108 658 T
(ait_f) 162.22 658 T
(or) 186.65 658 T
5 10 Q
-0.16 (This function is used for deadlock detection and should return the list of threads that ha) 108 635.33 P
-0.16 (v) 454.49 635.33 P
-0.16 (e to release) 459.34 635.33 P
0.65 (this lock before the thread passed as ar) 108 623.33 P
0.65 (gument can e) 267.08 623.33 P
0.65 (v) 321.45 623.33 P
0.65 (entually acquire it. The list of threads is re-) 326.3 623.33 P
(turned as an array of) 108 611.33 T
9 F
(THREAD_ID) 192.69 611.33 T
5 F
(\325) 246.69 611.33 T
(s. 9  This functions the w) 249.47 611.33 T
(ay could be used in the) 350.2 611.33 T
9 F
(MUTEX) 444.63 611.33 T
5 F
( class.) 474.63 611.33 T
4 12 Q
(20.2.6   Summar) 108 503 T
(y) 199.5 503 T
5 10 Q
0.15 (This table lists all functions and sho) 108 480.33 P
0.15 (ws ho) 252.54 480.33 P
0.15 (w often the) 276.05 480.33 P
0.15 (y are called by the lock manager and whether) 321.19 480.33 P
(the) 108 468.33 T
(y may change the state of the lock object or not.) 120.07 468.33 T
118.8 206 496.44 212 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
-0.04 (a.) 118.8 200.67 P
-0.04 (All functions, with the exception of) 124.8 200.67 P
9 F
-0.1 (primary) 250.97 200.67 P
2 F
-0.04 ( have a thr) 284.57 200.67 P
-0.04 (ead id as ar) 321.73 200.67 P
-0.04 (gument. This is the thr) 361.94 200.67 P
-0.04 (ead mentioned) 441.58 200.67 P
(in the column \322description\323, which is not necessarly the same as the thr) 118.8 191.67 T
(ead that calls those functions.) 371.55 191.67 T
(b.) 118.8 179.67 T
(The internal state of a lock object may also be changed by other functions, as long as this happens only) 125.22 179.67 T
(inside a) 118.8 170.67 T
9 F
(lock ... end) 148.22 170.67 T
2 F
( block wher) 205.82 170.67 T
(e this lock object has been locked.) 247.12 170.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
9 F
(wait_for\050tid:THREAD_ID\051:ARRAY{THREAD_ID}) 178.2 591.67 T
12 F
(is) 375 591.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(if) 190.8 582.67 T
9 F
( locked>0 and tid/=locked_by) 200.4 582.67 T
12 F
(then) 339.6 582.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(return) 203.4 573.67 T
9 F
( |locked_by|;) 232.2 573.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 190.8 564.67 T
9 F
(;) 205.2 564.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(return) 190.8 555.67 T
(void) 224.4 555.67 T
9 F
(;) 243.6 555.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
12 F
(end) 178.2 546.67 T
9 F
(;) 192.6 546.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
12 9 Q
(Function) 151.96 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 F
(Description) 266.45 450 T
13 7.2 Q
(a) 310.94 453.6 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 9 Q
(May) 363.25 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(change) 358.5 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(internal) 356.75 428 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(state) 361 417 T
13 7.2 Q
(b) 378.99 420.6 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
13 9 Q
(Call pattern) 420.51 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(reservable) 120.2 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
0.6 (returns true if the thread may ac-) 229.72 403 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(quire this lock) 229.72 392 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.03 (called whenever the object) 392.72 403 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(may have changed its state) 392.72 392 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(reserve) 120.2 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
2.06 (acquires this lock for the given) 229.72 376 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thread) 229.72 365 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(once to acquire a lock) 392.72 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(free) 120.2 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(releases a lock) 229.72 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(yes) 354.07 350.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(once to release a lock) 392.72 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(request_reservation) 120.2 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
0.06 (used to prioritize certain locks in-) 229.72 336 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(side a lock family) 229.72 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(yes) 354.07 335.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
2.96 (once for each lock object) 392.72 336 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.82 (when a thread enters a lock) 392.72 325 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(statement) 392.72 314 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(cancel_reservation) 120.2 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
27.53 (used together with) 229.72 300 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(request_reservation) 229.72 289 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(yes) 354.07 299.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
2.96 (once for each lock object) 392.72 300 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.72 (when a thread got the locks) 392.72 289 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(or executes the else part.) 392.72 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(combinations) 120.2 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
2.06 (returns which locks of the lock) 229.72 264 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(family have to be locked together) 229.72 253 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(once) 392.72 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(wait_for) 120.2 239 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
2.27 (returns an array of threads that) 229.72 239 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (have to release the lock before the) 229.72 228 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thread can get it) 229.72 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5.11 (occasionally, but only if) 392.72 239 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4.2 (deadlock detection is en-) 392.72 228 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(abled) 392.72 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
129.6 599.88 129.6 541.12 2 L
V
0.25 H
0 Z
N
489.6 599.88 489.6 541.12 2 L
V
N
129.48 600 489.73 600 2 L
V
N
129.48 541 489.73 541 2 L
V
N
118.8 458 118.8 213 2 L
V
2 H
N
228.32 460 228.32 211 2 L
V
N
352.67 460 352.67 211 2 L
V
0.5 H
N
391.32 460 391.32 211 2 L
V
N
496.44 458 496.44 213 2 L
V
2 H
N
117.8 459 497.44 459 2 L
V
N
117.8 412 497.44 412 2 L
V
N
117.8 385 497.44 385 2 L
V
0.5 H
N
117.8 360 497.44 360 2 L
V
N
117.8 345 497.44 345 2 L
V
N
117.8 309 497.44 309 2 L
V
N
117.8 273 497.44 273 2 L
V
N
117.8 248 497.44 248 2 L
V
N
117.8 212 497.44 212 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "244" 244
%%Page: "245" 245
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
-0.74 (Appendix I: T) 262.99 710.84 P
-0.74 (r) 310.97 710.84 P
-0.74 (anslating T) 313.21 710.84 P
-0.74 (er) 352.8 710.84 P
-0.74 (minology :) 360.63 710.84 P
6 10 Q
(245) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 36 Q
0 X
-0.25 (Appendix I: T) 108 642 S
-0.25 (ranslating) 307.49 642 S
-0.25 (T) 108 600 S
-0.25 (erminology) 127.23 600 S
5 10 Q
0.41 (This appendix pro) 108 475.33 P
0.41 (vides a translation of some common terminology from other popular object ori-) 181.45 475.33 P
0.04 (ented language.   The terminology used in the Sather community has been deri) 108 463.33 P
0.04 (v) 422.65 463.33 P
0.04 (ed mainly from the) 427.5 463.33 P
0.81 (languages that in\337uenced the design, particularly Eif) 108 451.33 P
0.81 (fel. This is not meant to be a point-by-point) 323.39 451.33 P
-0.47 (comparison of the languages, or a sho) 108 439.33 P
-0.47 (wcase for Sather) 256.26 439.33 P
-0.47 (.  Rather) 321.4 439.33 P
-0.47 (, it is intended to help readers to trans-) 354.21 439.33 P
(late the terms the) 108 427.33 T
(y are used to into Sather lingo.) 176.45 427.33 T
4 12 Q
(16.0.1   Sather 1.0 to Sather 1.1) 108 386 T
2 10 Q
0.69 (Ther) 108 366.33 P
0.69 (e have been some r) 128.51 366.33 P
0.69 (ecent changes in terminology that might r) 215.35 366.33 P
0.69 (esult in some misused) 403.99 366.33 P
0.68 (terminology in this and in other documents.  Immutable classes wer) 108 354.33 P
0.68 (e called value class-) 414.98 354.33 P
0.21 (es, r) 108 342.33 P
0.21 (outine closur) 126.01 342.33 P
0.21 (es wer) 183.83 342.33 P
0.21 (e called bound r) 212.47 342.33 P
0.21 (outines, iterator closur) 284.26 342.33 P
0.21 (es wer) 384.11 342.33 P
0.21 (e called bound itera-) 412.74 342.33 P
(tors and abstract classes wer) 108 330.33 T
(e called types.) 233.28 330.33 T
4 12 Q
(16.0.2   C++ to Sather) 108 289 T
2 10 Q
1.21 (Sather pr) 108 269.33 P
1.21 (ovides a separation of subtyping and code inclusion, which means that many) 149.56 269.33 P
1.07 (single C++ concepts corr) 108 257.33 P
1.07 (espond to two distinct concepts in Sather) 220.24 257.33 P
1.07 (.  Since Sather is gar-) 407.36 257.33 P
(bage collected, much of the r) 108 245.33 T
(elated terminology also does not translate.) 234.54 245.33 T
6 F
(Base Class, Derived Class) 108 217.33 T
1 9 Q
-0.55 (Not special terms in Sather - for code inclusion, we refer to the parent) 281 218 P
(and child class.  For subtyping we refer to the supertype and the) 281 208 T
(subtype) 281 198 T
6 10 Q
(V) 108 178.33 T
(irtual Function) 115.23 178.33 T
1 9 Q
-0.45 (Dispatching is not marked on a per-function basis.  Rather, variables) 281 179 P
(of abstract types are dispatched \050for all their functions\051.  This is the) 281 169 T
(more traditional notion of object dispatching.) 281 159 T
6 10 Q
(Abstract Base Class) 108 139.33 T
1 9 Q
(Abstract class) 281 140 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "245" 245
%%Page: "246" 246
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(246) 108 710.84 T
8 8 Q
-0.74 (Appendix I: T) 245.85 710.84 P
-0.74 (r) 293.83 710.84 P
-0.74 (anslating T) 296.08 710.84 P
-0.74 (er) 335.66 710.84 P
-0.74 (minology :) 343.49 710.84 P
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
6 10 Q
0 X
(Constructor) 108 653.33 T
1 9 Q
(Create routine - however, a create routine is only special because it) 281 654 T
-0.26 (enjoys the special syntactic sugar of #.  There are no implicit creators) 281 644 P
6 10 Q
(Destructor) 108 624.33 T
1 9 Q
(Sather is garbage collected, but there is provision for a \325finalize\325) 281 625 T
(routine) 281 615 T
6 10 Q
(Casting) 108 595.33 T
1 9 Q
(The typecase statement provides the equivalent of casting.  The) 281 596 T
(compiler provides run-time checks for casts that are not type-safe.) 281 586 T
6 10 Q
(Operator overloading) 108 566.33 T
1 9 Q
(Synactic sugar for operators) 281 567 T
6 10 Q
(conversions, type promotion) 108 546.33 T
1 9 Q
-0.09 (No implicit conversion routines are invoked.  All conversions  must) 281 547 P
-0.11 (be performed explicitly including between different kinds of floating) 281 537 P
(point values) 281 527 T
6 10 Q
(private) 108 507.33 T
1 9 Q
(No equivalent in Sather) 281 508 T
6 10 Q
(protected) 108 487.33 T
1 9 Q
(private) 281 488 T
6 10 Q
(friend) 108 467.33 T
1 9 Q
(No equivalent in Sather) 281 468 T
6 10 Q
(static member) 108 447.33 T
1 9 Q
(shared) 281 448 T
6 10 Q
(inline functions) 108 427.33 T
1 9 Q
(Cannot be stated explicitly. Routine and iterator inlining is) 281 428 T
(performed by the ICSI Sather compiler; some parameters may be) 281 418 T
(adjusted.) 281 408 T
6 10 Q
(this) 108 388.33 T
1 9 Q
(self) 281 389 T
6 10 Q
(enum) 108 368.33 T
1 9 Q
(Integer constants) 281 369 T
6 10 Q
(union) 108 348.33 T
1 9 Q
(No equivalent in Sather) 281 349 T
6 10 Q
(catch) 108 328.33 T
1 9 Q
(protect) 281 329 T
6 10 Q
(switch) 108 308.33 T
1 9 Q
(case a  when 3 then ... etc.) 281 309 T
6 10 Q
(while, until, break, do, for) 108 288.33 T
1 9 Q
(while!, until!, break! . Much richer, programmer defined iteration) 281 289 T
(mechanism. No equivalent of \325for\325 or \325i++\325) 281 279 T
6 10 Q
( goto) 108 259.33 T
1 9 Q
(No equivalent) 281 260 T
6 10 Q
(function pointers) 108 239.33 T
1 9 Q
(Routine closures \050aka bound routines\051) 281 240 T
6 10 Q
(Plain structs) 108 219.33 T
1 9 Q
(Immutable classes are similar, but are proper classes.) 281 220 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "246" 246
%%Page: "247" 247
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
8 8 Q
0 X
-0.74 (Appendix I: T) 262.99 710.84 P
-0.74 (r) 310.97 710.84 P
-0.74 (anslating T) 313.21 710.84 P
-0.74 (er) 352.8 710.84 P
-0.74 (minology :) 360.63 710.84 P
6 10 Q
(247) 489 710.84 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(16.0.3   Ja) 108 658 T
(v) 164.53 658 T
(a to Sather) 170.96 658 T
2 10 Q
(Java and Sather ar) 108 638.33 T
(e pr) 188.25 638.33 T
(obably mor) 205.32 638.33 T
(e closely r) 255.87 638.33 T
(elated than Java and C++.  Syntactic dif) 299.74 638.33 T
(fer) 473.73 638.33 T
(enc-) 485.62 638.33 T
1.61 (es conceal this underlying similarity) 108 626.33 P
1.61 (.  They ar) 273.39 626.33 P
1.61 (e both str) 319.28 626.33 P
1.61 (ongly typed, garbage collected) 363.63 626.33 P
1.2 (and separate subtyping fr) 108 614.33 P
1.2 (om code inclusion. However) 225.09 614.33 P
1.2 (, Sather is gear) 354.88 614.33 P
1.2 (ed at high perfor-) 422.81 614.33 P
(mance  and is a considerably richer language.) 108 602.33 T
4 12 Q
(16.0.4   Modula-3 to Sather) 108 489 T
2 10 Q
1.56 (The following is an attempt to convert some of the standar) 108 469.33 P
1.56 (d Modula-3 terms. But be-) 381.72 469.33 P
(war) 108 457.33 T
(e, I\325m not very familiar with Modula-3, so the table could well have serious  err) 125.11 457.33 T
(ors !) 474.69 457.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(Interface classes) 108 574.33 T
1 9 Q
(Abstract classes) 229 575 T
6 10 Q
(\336nal) 108 554.33 T
1 9 Q
(No Sather equivalent) 229 555 T
6 10 Q
(feature renaming) 108 534.33 T
1 9 Q
(Supported, but works quite differently in Sather) 229 535 T
6 10 Q
(Enumeration) 108 429.33 T
(types) 108 417.33 T
1 9 Q
(Same effect by using uninitialized integer constants \050const a,b,c;\051) 229 430 T
6 10 Q
(Subrange types) 108 397.33 T
1 9 Q
(No built-in equivalent, could construct  immutable classes with) 229 398 T
(similar behavior) 229 388 T
6 10 Q
(Ordinal types) 108 368.33 T
1 9 Q
(INTEGER, BOOLEAN and CHAR  are  INT, BOOL, CHAR) 229 369 T
6 10 Q
(Arrays) 108 348.33 T
1 9 Q
(Any object can have an array portion.  Array access syntax [ ] is) 229 349 T
-0.35 (syntactic sugar for aget and aset routines in a class.  Dimensionality) 229 339 P
-0.24 (is determined by the aget and aset element access functions.  1D and) 229 329 P
(2D arrays in library as ARRAY{T} and ARRAY2{T}.   Higher) 229 319 T
(dimensions can be trivially constructed.) 229 309 T
6 10 Q
(Record) 108 289.33 T
1 9 Q
-0.64 (Somewhat like  immutable classes without  only public attributes and) 229 290 P
(no other methods.  Sather is more  similar to Smalltalk - everything) 229 280 T
(is a pointer, and references are implicit, except for immutable clases) 229 270 T
6 10 Q
(Sets) 108 250.33 T
1 9 Q
(SET{T} is a library class. Not built-in.) 229 251 T
6 10 Q
(References) 108 230.33 T
1 9 Q
(All non-void variables indicate references, unless they are of an) 229 231 T
(immutable class.  All references are "traced"   See the note for) 229 221 T
("Record") 229 211 T
6 10 Q
(Procedure) 108 191.33 T
1 9 Q
(Function.  Exceptions are not mentioned in the signature) 229 192 T
6 10 Q
(Argument) 108 171.33 T
(Modes) 108 159.33 T
1 9 Q
-0.38 (VAR  is the same as inout, and VALUE  is similar to  the default \325in\325) 229 172 P
(mode.  No equivalent of READONLY) 229 162 T
6 10 Q
(Objects) 108 139.33 T
1 9 Q
(Similar to standard Sather classes.) 229 140 T
( class POINT is  x,y: INT;  is_origin: BOOL end;) 229 130 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "247" 247
%%Page: "248" 248
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(248) 108 710.84 T
8 8 Q
-0.74 (Appendix I: T) 245.85 710.84 P
-0.74 (r) 293.83 710.84 P
-0.74 (anslating T) 296.08 710.84 P
-0.74 (er) 335.66 710.84 P
-0.74 (minology :) 343.49 710.84 P
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 12 Q
0 X
(16.0.5   Smalltalk to Sather) 108 450 T
2 10 Q
0.33 (Sather is a \325pur) 108 430.33 P
0.33 (e\325 object oriented language like Smalltalk \050all entities ar) 175.29 430.33 P
0.33 (e objects\051. Howev-) 421.77 430.33 P
0.69 (er) 108 418.33 P
0.69 (, Sather is at the other end of the type safety spectr) 116 418.33 P
0.69 (um fr) 346.04 418.33 P
0.69 (om langues such as Smalltalk) 371.19 418.33 P
(and Self.) 108 406.33 T
6 F
(REF) 108 653.33 T
(ANY) 126.34 653.33 T
1 9 Q
($OB. No equivalent for NULL) 229 654 T
6 10 Q
(Generic) 108 633.33 T
1 9 Q
(Parametrized class.) 229 634 T
6 10 Q
(Interface) 108 613.33 T
1 9 Q
(Abstract class.) 229 614 T
6 10 Q
(Procedure T) 108 593.33 T
(ype) 162.38 593.33 T
1 9 Q
(Routine closure type. ROUT{FOO1,FOO2}: INT) 229 594 T
6 10 Q
(Opaque T) 108 573.33 T
(ypes) 152.93 573.33 T
1 9 Q
(No direct equivalent  Essentially abstract types) 229 574 T
6 10 Q
(concrete type) 108 553.33 T
1 9 Q
(concrete type) 229 554 T
6 10 Q
(typecase) 108 533.33 T
1 9 Q
(typecase, but with a slightly different syntax) 229 534 T
6 10 Q
(try .. except) 108 513.33 T
1 9 Q
(protect ... when) 229 514 T
6 10 Q
(try ... \336nally) 108 493.33 T
1 9 Q
(no equivalent) 229 494 T
6 10 Q
(methods) 108 378.33 T
1 9 Q
(features) 232 379 T
6 10 Q
(sending a method) 108 358.33 T
1 9 Q
(calling a function or iterator) 232 359 T
6 10 Q
(code block) 108 338.33 T
1 9 Q
(A routine closure may provide an approximation, but routine) 232 339 T
(closures are more similar to function pointers with some packaged) 232 329 T
-0.02 (argument. Locals are not packaged. Note that the most common use) 232 319 P
(of code blocks \050for iteration constructs\051 is subsumed in Sather by) 232 309 T
(iters.) 232 299 T
6 10 Q
(inheritance) 108 279.33 T
1 9 Q
(Code inclusion and subtyping) 232 280 T
6 10 Q
(threads) 108 259.33 T
1 9 Q
(Sather does not support threads, but its elder sibling, pSather,) 232 260 T
(provides an extremely rich set of thread and synchronization) 232 250 T
(constructs for high performance parallel and distributed) 232 240 T
(programming.) 232 230 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "248" 248
%%Page: "249" 249
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 70.99 504 81 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
(249) 489 74.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 639 504 702 R
7 X
V
108 658.01 504 666 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 663.98 540 663.98 2 L
0.25 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 36 Q
0 X
0 0 0 1 0 0 0 K
-1.8 (Index) 269.49 678 S
108 126 504 621 R
7 X
V
2 9 Q
0 X
(- \050sugar for minus\051) 108 615 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 185.56 615 T
(- \050sugar for negate\051) 108 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 186.81 605 T
(#ROUT See bound routines) 108 595 T
($ in abstract class names) 108 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 208.13 585 T
($COPY) 108 575 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 140.39 575 T
($EMPLOYEE) 108 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 164.52 565 T
($HASH) 108 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 142.2 555 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 155.7 555 T
0 0 0 1 0 0 0 K
2 9 Q
(148) 161.7 555 T
($IS_EQ) 108 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 140.33 545 T
($NIL) 108 535 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 131.51 535 T
($OB) 108 525 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 128.07 525 T
(as default type bound) 117 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(108) 207.07 515 T
($SHIPPING_CRATE) 108 505 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 193.91 505 T
(% \050sugar for mod\051) 108 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 183.43 495 T
(* \050sugar for times\051) 108 485 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 182.64 485 T
(+ \050sugar for plus\051) 108 475 T
(See plus) 117 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 152.87 465 T
(/ \050sugar for divide\051) 108 455 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 188.6 455 T
(/= \050not equal\051) 108 445 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 167.38 445 T
(:: See double colon calls) 108 435 T
(::=) 108 425 T
(as declarative asignment) 117 415 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(185) 218.35 415 T
(<) 108 405 T
(subytping>) 117 395 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 165.88 395 T
(< \050sugar for is_lt\051) 108 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 179.45 385 T
(<= \050less than or equal\051) 108 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 199.74 375 T
(= \050sugar for is_eq\051) 108 365 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 183.25 365 T
(= sugar for is_eq) 108 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 177.26 355 T
(-> \050feature renaming\051) 108 345 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 196.39 345 T
(> \050greater than\051) 108 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 173.03 335 T
(>= \050greater or equal\051) 108 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 193.19 325 T
(^ \050sugar for pow\051) 108 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 180.79 315 T
(~ \050sugar for not\051) 108 305 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 176.05 305 T
(\324e\325 \050floating point exponent\051) 108 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 222 295 T
(\324is_\325 routines) 108 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 162 285 T
(0b integer binary prefix) 108 275 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 204.63 275 T
(0o integer literal prefix) 108 265 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 201.83 265 T
(0x integer literal prefix) 108 255 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 201.56 255 T
108 207.91 297 228 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 219 240.98 219 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(A) 108 231.67 T
2 9 Q
(abstract class) 108 199.91 T
(definition) 117 189.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 158.99 189.91 T
(abstract classes) 108 179.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 171.34 179.91 T
(creation) 117 169.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 152.07 169.91 T
(example) 117 159.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 153.74 159.91 T
(separate subtyping) 117 149.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 196.01 149.91 T
(syntax and definition) 117 139.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 204.86 139.91 T
(See also subtyping, conformance) 117 129.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 250.23 129.91 T
(abstract methods) 315 615 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 386.12 615 T
(abstract types) 315 605 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 372.94 605 T
(See also conformance) 324 595 T
(accessing beyond array bounds) 315 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 442.97 585 T
(aclear) 315 575 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 341.48 575 T
(actors) 315 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 341.71 565 T
(aelt!) 315 555 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 334.87 555 T
(aget) 315 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 334.75 545 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 343.75 545 T
0 0 0 1 0 0 0 K
2 9 Q
(141) 349.75 545 T
(renaming example) 324 535 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 401.4 535 T
(aind!) 315 525 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 338.36 525 T
(alert character) 315 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 374.75 515 T
(aliased objects) 315 505 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 375.17 505 T
(and) 315 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 333.24 495 T
(applicative programming) 315 485 T
(using bound routines) 324 475 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(126) 412.47 475 T
(AREF) 315 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 341.52 465 T
(access from C) 324 455 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 381.73 455 T
(example inclusion in ARRAY) 324 445 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 443.86 445 T
(include path for array portion) 324 435 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 445.95 435 T
(specifying array portion) 324 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 423.21 425 T
(argument evaluation) 315 415 T
(bound routines) 324 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(124) 388.12 405 T
(in iterator calls) 324 395 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 386.23 395 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 395.23 395 T
0 0 0 1 0 0 0 K
2 9 Q
(188) 401.23 395 T
(ARRAY) 315 385 T
(creation from literal) 324 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 406.14 375 T
(example definition) 324 365 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 401.98 365 T
(inclusion from AREF) 324 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 410.92 355 T
(array) 315 345 T
(aelts!,aset!,ainds!) 324 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 394.42 335 T
(asize,aget,aset,aclear,acopy) 324 325 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 435.36 325 T
(definitions of AREF and AVAL) 324 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 451.47 315 T
(element assignment) 324 305 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(105) 406.34 305 T
(in value class) 324 295 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 380.05 295 T
(objects with array portion) 324 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 429.8 285 T
(out of bounds errors) 324 275 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 408.51 275 T
(use in constants) 324 265 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 390.3 265 T
(use of iterators) 324 255 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 386.1 255 T
(See also aset, aget) 324 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 397.51 245 T
(array_ptr) 315 235 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 355.51 235 T
(aset) 315 225 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 333.56 225 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 342.56 225 T
0 0 0 1 0 0 0 K
2 9 Q
(105) 348.56 225 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 362.06 225 T
0 0 0 1 0 0 0 K
2 9 Q
(141) 368.06 225 T
(renaming example) 324 215 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 401.4 215 T
(aset!) 315 205 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 336.06 205 T
(asize) 315 195 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 337.75 195 T
(in array example) 324 185 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 394.21 185 T
(assert statements) 315 175 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 385.92 175 T
(assertions) 315 165 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(137) 357.52 165 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 371.02 165 T
0 0 0 1 0 0 0 K
2 9 Q
(138) 377.02 165 T
(assignment) 315 155 T
(array elements) 324 145 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(105) 385.85 145 T
(illegal in typecase) 324 135 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 397.93 135 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 406.93 135 T
0 0 0 1 0 0 0 K
2 9 Q
(189) 412.93 135 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "249" 249
%%Page: "250" 250
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(250) 108 709.51 T
1 F
(Index) 304.47 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 9 Q
0 X
(assignments) 108 660 T
(and declarations) 117 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 185.99 650 T
(attributes) 108 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 149.01 640 T
(cycles of value types) 117 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(121) 201.82 630 T
(AVAL) 108 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 137 620 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 146 620 T
0 0 0 1 0 0 0 K
2 9 Q
(107) 152 620 T
(See also array) 117 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 174.81 610 T
108 562.91 297 583 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 574 240.98 574 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(B) 108 586.67 T
2 9 Q
(backslash) 108 554.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 149.47 554.91 T
(use in string literal escape) 117 544.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 223.08 544.91 T
(backslash literal) 108 534.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 174.87 534.91 T
(backspace literal) 108 524.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 176.92 524.91 T
(bases for integer literals) 108 514.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 205.58 514.91 T
(Berkeley, University of California at) 108 504.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 254.33 504.91 T
(binary literals) 108 494.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 166.12 494.91 T
(BOOL) 108 484.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 136.15 484.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 145.15 484.91 T
0 0 0 1 0 0 0 K
2 9 Q
(143) 151.15 484.91 T
(literals) 117 474.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 146.97 474.91 T
(boolean literals) 108 464.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 171.7 464.91 T
(booleans) 108 454.91 T
(void value) 117 444.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(191) 162.31 444.91 T
(bound routines) 108 434.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 172.12 434.91 T
(call) 117 424.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(124) 133.73 424.91 T
(creation) 117 414.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 152.07 414.91 T
(example of apply) 117 404.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(126) 189.09 404.91 T
(inout arguments) 117 394.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(125) 186.11 394.91 T
(leaving self unbound) 117 384.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(126) 204.34 384.91 T
(supplying unbound arguments) 117 374.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(124) 244.5 374.91 T
(syntax and description) 117 364.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 210.78 364.91 T
(unbound arguments) 117 354.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 201.7 354.91 T
(use in call-backs) 117 344.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 184.93 344.91 T
(break!) 108 334.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 135.85 334.91 T
(browser) 108 324.91 T
(example of usage) 117 314.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 189.21 314.91 T
(bugs) 108 304.91 T
(accessing beyond array bounds) 117 294.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 244.97 294.91 T
(crashing) 117 284.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 153.97 284.91 T
(dangling references) 117 274.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 198.37 274.91 T
(deadlock) 117 264.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 156.34 264.91 T
(fencepost errors) 117 254.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 183.88 254.91 T
(heisenbugs) 117 244.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 164.76 244.91 T
(incorrect synchronization) 117 234.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 221.69 234.91 T
(race conditions) 117 224.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 180.4 224.91 T
108 177.82 297 197.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 188.91 240.98 188.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(C) 108 201.58 T
2 9 Q
(C) 108 169.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 117.38 169.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 126.38 169.82 T
0 0 0 1 0 0 0 K
2 9 Q
(22) 132.38 169.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 141.38 169.82 T
0 0 0 1 0 0 0 K
2 9 Q
(26) 147.38 169.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 156.38 169.82 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 162.38 169.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 171.38 169.82 T
0 0 0 1 0 0 0 K
2 9 Q
(30) 177.38 169.82 T
(accessing Sather arrays) 117 159.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 211.99 159.82 T
(and garbage collection) 117 149.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 209.75 149.82 T
(interface to headers) 117 139.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(179) 198.04 139.82 T
(interface to structs) 117 129.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(179) 193.29 129.82 T
(interfacing to possible macros) 117 119.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(183) 238.82 119.82 T
(C types) 315 660 T
(Sather equivalents) 324 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 400.41 650 T
(C++) 315 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 335.29 640 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 344.29 640 T
0 0 0 1 0 0 0 K
2 9 Q
(22) 350.29 640 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 359.29 640 T
0 0 0 1 0 0 0 K
2 9 Q
(24) 365.29 640 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 374.29 640 T
0 0 0 1 0 0 0 K
2 9 Q
(25) 380.29 640 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 389.29 640 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 395.29 640 T
(C_header) 315 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(179) 356.3 630 T
(C_name) 315 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(179) 350.88 620 T
(CALCULATOR) 315 610 T
(textual interface) 324 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(129) 391.08 600 T
(call) 315 590 T
(matching signatures) 324 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(95) 407.95 580 T
(call See bound routines) 315 570 T
(call by value See in mode) 315 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 418.78 560 T
(call-backs using bound routines) 315 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 444.75 550 T
(carriage return literal) 315 540 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 402.72 540 T
(case) 315 530 T
(example) 324 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 360.74 520 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 369.74 520 T
0 0 0 1 0 0 0 K
2 9 Q
(186) 375.74 520 T
(statement syntax) 324 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 394.31 510 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 403.31 510 T
0 0 0 1 0 0 0 K
2 9 Q
(186) 409.31 510 T
(when clauses) 324 500 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 380.03 500 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 389.03 500 T
0 0 0 1 0 0 0 K
2 9 Q
(186) 395.03 500 T
(Cecil) 315 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 337.93 490 T
(CHAR) 315 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(143) 344.88 480 T
(char) 315 470 T
(Sather equivalent of C type) 324 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 435.3 460 T
(character literals) 315 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 383.81 450 T
(specifying special characters) 324 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 440.18 440 T
(Class calls See double colon calls) 315 430 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 448.26 430 T
( class constants) 315 420 T
(See constants) 324 410 T
(class elements) 315 400 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 374.48 400 T
(class invariants See invariant) 315 390 T
(class variables See shareds) 315 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 423.56 380 T
(classes) 315 370 T
(See abstract, reference, value, partial) 324 360 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 471.97 360 T
(CLOS) 315 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 341.68 350 T
(closure) 315 340 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 346.64 340 T
(closures) 315 330 T
(relation to bound routines) 324 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 431.16 320 T
(See also bound routines) 324 310 T
(CLU) 315 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 336.88 300 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 345.88 300 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 351.88 300 T
(Code inclusion) 315 290 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(103) 377.84 290 T
(code inclusion) 315 280 T
(separation from subtyping) 324 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 433.14 270 T
(Common Lisp) 315 260 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 374.93 260 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 383.93 260 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 389.93 260 T
(compiler) 315 250 T
(early versions) 324 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 382.59 240 T
(obtaining) 324 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 365.04 230 T
(pSather) 324 220 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 357.67 220 T
(complex numbers) 315 210 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 389.36 210 T
(concrete types) 315 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 374.98 200 T
(constants) 315 190 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 355.39 190 T
(arrays) 324 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 351.93 180 T
(examples) 324 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 364.56 170 T
(syntax and description) 324 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 417.78 160 T
(constructors. See also create) 315 150 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 428.9 150 T
(containers) 315 140 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 359.12 140 T
(use of iters) 324 130 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 370.2 130 T
(contains) 315 120 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "250" 250
%%Page: "251" 251
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
-2.5 (Index) 321.61 709.51 P
6 F
(251) 489 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 9 Q
0 X
(in array example) 117 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 187.21 660 T
(conventions, naming) 108 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 194.35 650 T
(conversions) 108 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 158.5 640 T
($COPY) 108 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 140.39 630 T
(copy) 108 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 130.32 620 T
(Covariance) 108 610 T
(remedies) 117 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100) 156.37 600 T
(CPX) 108 590 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 128.82 590 T
(why a value type) 117 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 188.6 580 T
(See also complex numbers) 117 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 225.06 570 T
(crashing) 108 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 144.97 560 T
(create) 108 550 T
(use with C structs) 117 540 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(183) 191.46 540 T
(creation) 108 530 T
(abstract classes) 117 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 180.34 520 T
(creation expressions) 108 510 T
(type inference) 117 500 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 176.48 500 T
(cursor objects) 108 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 165.57 490 T
(cycle) 108 480 T
(among constant initializers) 117 470 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 227.62 470 T
(of abstract types) 117 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 185.1 460 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 194.1 460 T
0 0 0 1 0 0 0 K
2 9 Q
(86) 200.1 460 T
(of value type attributes) 117 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(121) 212.27 450 T
108 402.91 297 423 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 414 240.98 414 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(D) 108 426.67 T
2 9 Q
(\324d\325 suffix. See floating point) 108 394.91 T
(dangling references) 108 384.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 189.37 384.91 T
(deadlock) 108 374.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 147.34 374.91 T
(declaration) 108 364.91 T
(type inference) 117 354.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 176.48 354.91 T
(declared type) 108 344.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 165.2 344.91 T
(destructors. See also allocation) 108 334.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 232.81 334.91 T
(disabling checking) 108 324.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 185.55 324.91 T
(div) 108 314.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 124.2 314.91 T
(dollar sign \324$\325) 108 304.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 165.39 304.91 T
(dot product) 108 294.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 158.33 294.91 T
(double C type, Sather equivalent) 108 284.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 241.38 284.91 T
(double colon) 108 274.91 T
(calls) 117 264.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 137.55 264.91 T
(syntax and description) 117 254.91 T
(use in constants) 117 244.91 T
(double colon notation) 108 234.91 T
(class access) 117 224.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 165.43 224.91 T
(double precision) 108 214.91 T
(See also floating point) 117 204.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 207.88 204.91 T
(double quote literal) 108 194.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 189.03 194.91 T
(Dylan) 108 184.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 135.33 184.91 T
(dynamic dispatch) 108 174.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 182.06 174.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 191.06 174.91 T
0 0 0 1 0 0 0 K
2 9 Q
(85) 197.06 174.91 T
108 127.82 297 147.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 138.91 240.98 138.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(E) 108 151.58 T
2 9 Q
(efficiency of value class) 108 119.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 204.44 119.82 T
(Eiffel) 315 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 339.04 660 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 348.04 660 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 354.04 660 T
(elements) 315 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 353.49 650 T
(else) 315 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 333.06 640 T
(in case statements) 324 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 398.72 630 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 407.72 630 T
0 0 0 1 0 0 0 K
2 9 Q
(186) 413.72 630 T
(in exceptions) 324 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 379.3 620 T
(elsif) 315 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 334.36 610 T
(elt!) 315 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 330.37 600 T
(EMPLOYEE definition) 315 590 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 408.26 590 T
(encapsulation) 315 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 373.52 580 T
(enumeration types) 315 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 392.72 570 T
(errors) 315 560 T
(See fatal errors) 324 550 T
(evaluation order) 315 540 T
(See also argument evaluation) 324 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(124) 444.01 530 T
(exception object) 315 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 381.86 520 T
(exceptions) 315 510 T
(choice of handler) 324 500 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 395.45 500 T
(exception object) 324 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 390.86 490 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 404.36 490 T
0 0 0 1 0 0 0 K
2 9 Q
(192) 410.36 490 T
(performance) 324 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(132) 377.73 480 T
(protect statements) 324 470 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 400.04 470 T
(raising an exception) 324 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(131) 406.96 460 T
(syntax, description, examples) 324 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(131) 444.6 450 T
(explicit placement) 315 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 390.67 440 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 399.67 440 T
0 0 0 1 0 0 0 K
2 9 Q
(28) 405.67 440 T
(exponent. See also floating point) 315 430 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 447.38 430 T
(expressions) 315 420 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 364.45 420 T
(exception) 324 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 365.38 410 T
(void tests) 324 400 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 365.18 400 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 378.68 400 T
0 0 0 1 0 0 0 K
2 9 Q
(192) 384.68 400 T
(external C types) 315 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(177) 382.47 390 T
(C_name, C_header) 324 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(179) 402.67 380 T
315 332.91 504 353 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 344 447.98 344 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(F) 315 356.67 T
2 9 Q
(false) 315 324.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 336.24 324.91 T
(fatal errors) 315 314.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 361.51 314.91 T
(assertion returns false) 324 304.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 414.28 304.91 T
(avoiding void accesses) 324 294.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 417.66 294.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 431.16 294.91 T
0 0 0 1 0 0 0 K
2 9 Q
(192) 437.16 294.91 T
(disabling checking) 324 284.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 401.55 284.91 T
(failed invariant) 324 274.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 388.08 274.91 T
(missing else in typecase) 324 264.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 422 264.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 431 264.91 T
0 0 0 1 0 0 0 K
2 9 Q
(186) 437 264.91 T
(typecase with no else) 324 254.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 411.54 254.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 420.54 254.91 T
0 0 0 1 0 0 0 K
2 9 Q
(189) 426.54 254.91 T
(uncaught exceptions) 324 244.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 409.21 244.91 T
(features) 315 234.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 349.85 234.91 T
(fencepost errors) 315 224.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 381.88 224.91 T
(finalization) 315 214.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 363.3 214.91 T
(finalize) 315 204.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(143) 347.4 204.91 T
(float C type, Sather equivalent) 315 194.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 438.6 194.91 T
(floating point) 315 184.91 T
(\324d\325 suffix and example) 324 174.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 415.73 174.91 T
(\324e\325 exponent) 324 164.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 375.56 164.91 T
(FLT, FLTD, FLTI) 324 154.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 394.06 154.91 T
(literal syntax and description) 324 144.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 443.19 144.91 T
(literals example) 324 134.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 389.96 134.91 T
(void value) 324 124.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(191) 369.31 124.91 T
(FLT, FLTD, FLTI) 315 114.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 385.06 114.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 394.06 114.91 T
0 0 0 1 0 0 0 K
2 9 Q
(143) 400.06 114.91 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "251" 251
%%Page: "252" 252
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(252) 108 709.51 T
1 F
(Index) 304.47 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 9 Q
0 X
(conversion to INT) 117 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 192.06 660 T
(See also floating point) 117 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 207.88 650 T
(form feed character literal) 108 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 214.02 640 T
(Fortran) 108 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 140.7 630 T
(function pointer) 108 620 T
(Sather equivalent) 117 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 189.6 610 T
(See also bound routine) 117 600 T
108 552.91 297 573 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 564 240.98 564 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(G) 108 576.67 T
2 9 Q
(garbage collection) 108 544.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 183.26 544.91 T
(and C routines) 117 534.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 178.93 534.91 T
(See also allocation) 117 524.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 192.55 524.91 T
(gcc) 108 514.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 124 514.91 T
(global variables) 108 504.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 173.87 504.91 T
(See also double colon calls) 117 494.91 T
(graph classes) 108 484.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 163.83 484.91 T
108 437.82 297 457.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 448.91 240.98 448.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(H) 108 461.58 T
2 9 Q
($HASH) 108 429.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 142.2 429.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 155.7 429.82 T
0 0 0 1 0 0 0 K
2 9 Q
(148) 161.7 429.82 T
(hash) 108 419.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(142) 129.79 419.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 143.29 419.82 T
0 0 0 1 0 0 0 K
2 9 Q
(148) 149.29 419.82 T
(hash tables) 108 409.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 155.2 409.82 T
(hashing) 108 399.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 142.65 399.82 T
(heisenbugs) 108 389.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 155.76 389.82 T
(hexadecimal literals) 108 379.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 190.41 379.82 T
(higher-order function) 108 369.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 197.41 369.82 T
108 322.74 297 342.82 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 333.82 240.98 333.82 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(I) 108 346.49 T
2 9 Q
-0.21 (ICSI \050International Computer Science Institute\051) 108 314.74 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 144 304.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 153 304.74 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 159 304.74 T
(ID) 108 294.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 121 294.74 T
(IEEE 754-1985) 108 284.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 167.28 284.74 T
(exception flags) 117 274.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 179.56 274.74 T
(Sather conformance) 117 264.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 199.12 264.74 T
(if statement) 108 254.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 157.79 254.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 166.79 254.74 T
0 0 0 1 0 0 0 K
2 9 Q
(187) 172.79 254.74 T
(Immutable) 108 244.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(119) 154.7 244.74 T
-0.92 (implementation inheritance. See include clauses) 108 234.74 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 144 224.74 T
(implicit calls) 108 214.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 161.56 214.74 T
(reader for shareds) 117 204.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 192.43 204.74 T
(reader routine) 117 194.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 176.98 194.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 185.98 194.74 T
0 0 0 1 0 0 0 K
2 9 Q
(99) 191.98 194.74 T
(writer routine) 117 184.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 175.73 184.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 184.73 184.74 T
0 0 0 1 0 0 0 K
2 9 Q
(99) 190.73 184.74 T
(implicit reader. See implicit calls) 108 174.74 T
(implicit type coercion) 108 164.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 197.46 164.74 T
(in) 108 154.74 T
(in iterator calls) 117 144.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 179.23 144.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 188.23 144.74 T
0 0 0 1 0 0 0 K
2 9 Q
(188) 194.23 144.74 T
(include clauses) 108 134.74 T
(multiple includes) 117 124.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 189.66 124.74 T
(separation from subtyping) 117 114.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 226.14 114.74 T
(syntax,example,definition) 324 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 430.36 660 T
(infinite precision integers See INTI) 315 650 T
(infix operators) 315 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 376.27 640 T
(See also operators) 324 630 T
(inheritance) 315 620 T
(separate subtyping and inclusion) 324 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 459.24 610 T
(See subtyping, include clauses) 324 600 T
(initial expressions) 315 590 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(137) 389.85 590 T
(initialization) 315 580 T
(defaults for constants) 324 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 412.45 570 T
(dependancies among constants) 324 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 451.24 560 T
(errors in loops) 324 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 384.73 550 T
(inlined_C) 315 540 T
(dealing with possible macros) 324 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(183) 443.05 530 T
(inout) 315 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 339.13 520 T
(assignment after quit) 324 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 411.24 510 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 420.24 510 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 426.24 510 T
(assignment after yield) 324 500 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 415.27 500 T
(in bound routines) 324 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(125) 398.23 490 T
(in iterator calls) 324 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 386.23 480 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 395.23 480 T
0 0 0 1 0 0 0 K
2 9 Q
(188) 401.23 480 T
(specification in bound type) 324 470 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 435.29 470 T
(INT) 315 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 334.03 460 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 343.03 460 T
0 0 0 1 0 0 0 K
2 9 Q
(83) 349.03 460 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 358.03 460 T
0 0 0 1 0 0 0 K
2 9 Q
(143) 364.03 460 T
(example iterators) 324 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 396.13 450 T
(from STR) 324 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 364.92 440 T
(iterators) 324 430 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 360.14 430 T
(literal instantiation) 324 420 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 402.51 420 T
(integer) 315 410 T
(different bases) 324 400 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 385.13 400 T
(infinite precision literals) 324 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 423.52 390 T
(literals) 324 380 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 353.97 380 T
(range) 324 370 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 349.61 370 T
(void value) 324 360 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(191) 369.31 360 T
(See also INT and INTI) 324 350 T
(interface) 315 340 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 352.46 340 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 361.46 340 T
0 0 0 1 0 0 0 K
2 9 Q
(25) 367.46 340 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 376.46 340 T
0 0 0 1 0 0 0 K
2 9 Q
(42) 382.46 340 T
(International Computer Science Institute) 315 330 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 479.7 330 T
(International Computer Science Institute, See) 315 320 T
(ICSI) 351 310 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 371.17 310 T
(INTI) 315 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 337.06 300 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 346.06 300 T
0 0 0 1 0 0 0 K
2 9 Q
(143) 352.06 300 T
(literal instantiation) 324 290 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 402.51 290 T
(intialization) 315 280 T
(enumeration types) 324 270 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 401.72 270 T
(invariant) 315 260 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 354.29 260 T
(definition) 324 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 365.99 250 T
(invariants) 315 240 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 358.1 240 T
($IS_EQ) 315 230 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 347.33 230 T
(is_eq) 315 220 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 338.29 220 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 351.79 220 T
0 0 0 1 0 0 0 K
2 9 Q
(142) 357.79 220 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 371.29 220 T
0 0 0 1 0 0 0 K
2 9 Q
(147) 377.29 220 T
(use by case statement) 324 210 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 412.83 210 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 421.83 210 T
0 0 0 1 0 0 0 K
2 9 Q
(186) 427.83 210 T
(is_geq) 315 200 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 343.29 200 T
(is_gt) 315 190 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 336.87 190 T
(is_leq) 315 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 340.9 180 T
(is_lt) 315 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 334.49 170 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 347.99 170 T
0 0 0 1 0 0 0 K
2 9 Q
(142) 353.99 170 T
(is_neq) 315 160 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 343.52 160 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 357.02 160 T
0 0 0 1 0 0 0 K
2 9 Q
(147) 363.02 160 T
(is_nil) 315 150 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 339.41 150 T
(is_prime) 315 140 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 352.78 140 T
(ISO-Latin-1) 315 130 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 364.12 130 T
(iteration. See iterators) 315 120 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 404.86 120 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "252" 252
%%Page: "253" 253
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
-2.5 (Index) 321.61 709.51 P
6 F
(253) 489 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 9 Q
0 X
(iterators) 108 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 144.14 660 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 153.14 660 T
0 0 0 1 0 0 0 K
2 9 Q
(25) 159.14 660 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 168.14 660 T
0 0 0 1 0 0 0 K
2 9 Q
(147) 174.14 660 T
(example definition) 117 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 194.98 650 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 203.98 650 T
0 0 0 1 0 0 0 K
2 9 Q
(68) 209.98 650 T
(in typecases) 117 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 168.2 640 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 177.2 640 T
0 0 0 1 0 0 0 K
2 9 Q
(189) 183.2 640 T
(pre conditions) 117 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 177.31 630 T
(quitting) 117 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 151.82 620 T
(rationale and history) 117 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 203.01 610 T
(termination by quit) 117 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 197.31 600 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 206.31 600 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 212.31 600 T
(upto!) 117 590 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 141.19 590 T
(use with containers) 117 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 197.47 580 T
(yield statements) 117 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 185.04 570 T
(yield within protect) 117 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 198.76 560 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 207.76 560 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 213.76 560 T
(iterators, naming) 108 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 179.18 550 T
108 502.91 297 523 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 514 240.98 514 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(K) 108 526.67 T
2 9 Q
(Karla) 108 494.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 132.71 494.91 T
(Karlsruhe) 108 484.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 150.55 484.91 T
108 437.82 297 457.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 448.91 240.98 448.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(L) 108 461.58 T
2 9 Q
(lingua-franca, iterators as) 108 429.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 212.39 429.82 T
(Lisp) 108 419.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 128.34 419.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 137.34 419.82 T
0 0 0 1 0 0 0 K
2 9 Q
(24) 143.34 419.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 152.34 419.82 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 158.34 419.82 T
(lists, use of iterators) 108 409.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 190.41 409.82 T
(literal expressions) 108 399.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 182.86 399.82 T
(literals) 108 389.82 T
(arbitrary character) 117 379.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 194.03 379.82 T
(boolean) 117 369.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 151.47 369.82 T
(character) 117 359.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 156.59 359.82 T
(declared type) 117 349.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(143) 174.2 349.82 T
(floating point) 117 339.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 174.19 339.82 T
(integers) 117 329.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 151.79 329.82 T
(binary) 144 317.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 172.89 317.82 T
(hex) 144 303.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 161.19 303.82 T
(octal) 144 289.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 165.96 289.82 T
(strings) 117 277.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 146.98 277.82 T
(octal characters) 144 265.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 208.61 265.82 T
(local variables) 108 253.82 T
(declaration) 117 243.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 164.68 243.82 T
(declaration and assignment) 117 233.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(185) 229.85 233.82 T
(initialization) 117 223.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 170.47 223.82 T
(passing to C macro) 117 213.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(183) 196.29 213.82 T
(scope) 117 203.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 142.45 203.82 T
(shadowing) 117 193.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 164.33 193.82 T
(locking) 108 183.82 T
(concept) 117 173.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 150.8 173.82 T
(long C types, Sather equivalent) 108 163.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 235.23 163.82 T
(loop) 108 153.82 T
(termination) 117 143.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 166.81 143.82 T
(termination by quit) 117 133.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 197.31 133.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 206.31 133.82 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 212.31 133.82 T
(loop statements) 108 123.82 T
(defined) 117 113.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 150.47 113.82 T
(looping) 315 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 348.72 660 T
315 612.91 504 633 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 624 447.98 624 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(M) 315 636.67 T
2 9 Q
(mailing list) 315 604.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 362.78 604.91 T
(MAIN) 315 594.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 344.03 594.91 T
(main) 315 584.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 338.3 584.91 T
(MANAGER class definition) 315 574.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 428.61 574.91 T
(manual deallocation \050See also allocation\051) 315 564.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 479.94 564.91 T
(matrices) 315 554.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 351.68 554.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 360.68 554.91 T
0 0 0 1 0 0 0 K
2 9 Q
(28) 366.68 554.91 T
(MENU) 315 544.91 T
(closure example) 324 534.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(128) 391.63 534.91 T
(methods) 315 524.91 T
(See also routines, iterators) 324 514.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 431.15 514.91 T
(minus) 315 504.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 343.05 504.91 T
(Mixin) 315 494.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 341.63 494.91 T
(ML) 315 484.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 332.01 484.91 T
(mod) 315 474.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 336.36 474.91 T
(mode) 315 464.91 T
(table of modes) 324 454.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 385.24 454.91 T
(Modula-3) 315 444.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 356.97 444.91 T
(multiple classes) 315 434.91 T
(per source file) 324 424.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 383.34 424.91 T
( multiple inheritance) 315 414.91 T
(See include clauses, subtyping) 324 404.91 T
(multiple return values) 315 394.91 T
(See TUP) 324 384.91 T
315 337.82 504 357.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 348.91 447.98 348.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(N) 315 361.58 T
2 9 Q
(NaN) 315 329.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 337.46 329.82 T
(negate) 315 319.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 344.3 319.82 T
(newline character literal) 315 309.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 414.08 309.82 T
(newsgroup) 315 299.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 363.18 299.82 T
($NIL) 315 289.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 338.51 289.82 T
(nil) 315 279.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 328.48 279.82 T
(not) 315 269.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 331.09 269.82 T
(Not a Number) 315 259.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 376.02 259.82 T
(numbers, void \050unassigned\051 value) 315 249.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(191) 453.79 249.82 T
315 202.74 504 222.82 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 213.82 447.98 213.82 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(O) 315 226.49 T
2 9 Q
($OB) 315 194.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(108) 335.07 194.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 348.57 194.74 T
0 0 0 1 0 0 0 K
2 9 Q
(141) 354.57 194.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 368.07 194.74 T
0 0 0 1 0 0 0 K
2 9 Q
(108) 374.07 194.74 T
(Oberon) 315 184.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 348.07 184.74 T
(object allocation) 315 174.74 T
(manual deallocation) 324 164.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 408.14 164.74 T
(Objective C) 315 154.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 364.04 154.74 T
(objects) 315 144.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 345.05 144.74 T
(aliased) 324 134.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 354.86 134.74 T
(reference) 324 124.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 363.58 124.74 T
(value. See also value class) 324 114.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 430.08 114.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "253" 253
%%Page: "254" 254
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(254) 108 709.51 T
1 F
(Index) 304.47 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 9 Q
0 X
(octal digits) 108 660 T
(in character literals) 117 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 195.91 650 T
(octal integer literals) 108 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 189.41 640 T
(once) 108 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 129.46 630 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 138.46 630 T
0 0 0 1 0 0 0 K
2 9 Q
(188) 144.46 630 T
(example usage in upto!) 117 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 212.59 620 T
(syntax, definition and example) 117 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 243.1 610 T
(once arguments) 108 600 T
(described) 117 590 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 158.58 590 T
(operator precedence) 108 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(117) 192.28 580 T
(optimizations) 108 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 165.96 570 T
(or) 108 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 119.47 560 T
(out) 108 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 124.28 550 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 133.27 550 T
0 0 0 1 0 0 0 K
2 9 Q
(125) 139.27 550 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 152.77 550 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 158.77 550 T
(arguments in bound routines) 117 540 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 236.21 540 T
(assignment after quit) 117 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 204.24 530 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 213.24 530 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 219.24 530 T
(assignment after yield) 117 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 208.27 520 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 217.27 520 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 223.27 520 T
(in iterator calls) 117 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 179.23 510 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 188.23 510 T
0 0 0 1 0 0 0 K
2 9 Q
(188) 194.23 510 T
(out arguments) 108 500 T
(in iterators) 117 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 163.24 490 T
(overloading) 108 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 159.26 480 T
(example of conflict) 117 470 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 195.46 470 T
(general rule and examples) 117 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(91) 224.99 460 T
(matching signatures) 117 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(95) 200.95 450 T
(rules) 117 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 139.73 440 T
108 392.91 297 413 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 404 240.98 404 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(P) 108 416.67 T
2 9 Q
(parallel Sather) 108 384.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 168.65 384.91 T
(parameters) 108 374.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(111) 155.84 374.91 T
(as structured macro) 117 364.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(111) 199.18 364.91 T
(parametrization) 108 354.91 T
(of abstract classes) 117 344.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(111) 190.5 344.91 T
(type relations) 117 334.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(111) 174.41 334.91 T
(parametrized class) 108 324.91 T
(example) 117 314.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 153.74 314.91 T
(partial classes) 108 304.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 166.26 304.91 T
(example of mixin) 117 294.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 189.22 294.91 T
(stubs) 117 284.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 140.97 284.91 T
(Pascal) 108 274.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 135.87 274.91 T
(placement) 108 264.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 152.26 264.91 T
(plus) 108 254.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 128.27 254.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 137.27 254.91 T
0 0 0 1 0 0 0 K
2 9 Q
(116) 143.27 254.91 T
(post conditions) 108 244.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(136) 172.11 244.91 T
(postconditions) 108 234.91 T
(as safety feature) 117 224.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(136) 184.41 224.91 T
(explanation of post) 117 214.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 196.41 214.91 T
(in iterators) 117 204.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 163.24 204.91 T
(initial) 117 194.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 143.15 194.91 T
(result) 117 184.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 142.66 184.91 T
(pow) 108 174.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 128.83 174.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 137.83 174.91 T
0 0 0 1 0 0 0 K
2 9 Q
(116) 143.83 174.91 T
(pre conditions) 108 164.91 T
(in iterators) 117 154.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 163.24 154.91 T
(precedence of operators) 108 144.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(117) 206.26 144.91 T
(preconditions) 108 134.91 T
(checking in iterators) 117 124.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 200.9 124.91 T
(explanation of pre) 117 114.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 192.61 114.91 T
(predicates) 315 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 358.95 660 T
(private) 315 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 346.41 650 T
(and readonly) 324 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 380.13 640 T
(attributes) 324 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 365.01 630 T
(changing on include) 324 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 408.2 620 T
(example of include) 324 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 402.86 610 T
(in include syntax) 324 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 395.2 600 T
(in iter syntax) 324 590 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 378.91 590 T
(routines) 324 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 359.81 580 T
(use with shareds) 324 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 394.09 570 T
(protect) 315 560 T
(yield statements) 324 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 392.04 550 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 401.04 550 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 407.04 550 T
(protect statements) 315 540 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 391.04 540 T
(pSather) 315 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 348.67 530 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 357.67 530 T
0 0 0 1 0 0 0 K
2 9 Q
(27) 363.67 530 T
(ptrdiff_t C type, Sather equivalent) 315 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 454.08 520 T
(public. See also private) 315 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 409.66 510 T
315 462.91 504 483 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 474 447.98 474 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(Q) 315 486.67 T
2 9 Q
(quit) 315 454.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 334.02 454.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 343.02 454.91 T
0 0 0 1 0 0 0 K
2 9 Q
(138) 349.02 454.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 362.52 454.91 T
0 0 0 1 0 0 0 K
2 9 Q
(188) 368.52 454.91 T
(example usage) 324 444.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 386.05 444.91 T
(leaving an iterator) 324 434.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 399.94 434.91 T
(quote marks in character literals) 315 424.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 445.86 424.91 T
315 377.82 504 397.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 388.91 447.98 388.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(R) 315 401.58 T
2 9 Q
(race conditions) 315 369.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 378.4 369.82 T
(raise) 315 359.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 336.8 359.82 T
(syntax definition) 324 349.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(131) 394.37 349.82 T
(reader routine. See implicit calls) 315 339.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 445.64 339.82 T
(readonly) 315 329.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 353.64 329.82 T
(use with shareds) 324 319.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 394.09 319.82 T
(reference objects) 315 309.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 383.89 309.82 T
(renaming) 315 299.82 T
(example) 324 289.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 360.74 289.82 T
(reserved names) 315 279.82 T
(AREF) 324 269.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(141) 350.52 269.82 T
(TUP) 324 259.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(142) 344.95 259.82 T
(result) 315 249.82 T
(syntax, description, example) 324 239.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(137) 440.79 239.82 T
(return) 315 229.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 343.02 229.82 T
(statement definition) 324 219.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 407.16 219.82 T
(syntax and description) 324 209.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 417.78 209.82 T
(type of) 324 199.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 354.82 199.82 T
(value returned) 324 189.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 386.02 189.82 T
(return value) 315 179.82 T
(type restrictions) 324 169.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 391.21 169.82 T
(routines) 315 159.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 350.81 159.82 T
(bound) 324 149.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 353.05 149.82 T
(syntax,description,example) 324 139.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 436.29 139.82 T
(runtime system) 315 129.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 380.11 129.82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "254" 254
%%Page: "255" 255
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
-2.5 (Index) 321.61 709.51 P
6 F
(255) 489 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 634.91 297 655 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 646 240.98 646 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(S) 108 658.67 T
2 9 Q
(safety features) 108 626.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(135) 168.66 626.91 T
(SAIL) 108 616.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 131.26 616.91 T
(SAME) 108 606.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 136.74 606.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 145.74 606.91 T
0 0 0 1 0 0 0 K
2 9 Q
(84) 151.74 606.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 160.74 606.91 T
0 0 0 1 0 0 0 K
2 9 Q
(86) 166.74 606.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 175.74 606.91 T
0 0 0 1 0 0 0 K
2 9 Q
(108) 181.74 606.91 T
(in include clause) 117 596.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 186.74 596.91 T
(use in create) 117 586.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 169.52 586.91 T
(Sather tower) 108 576.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 161.73 576.91 T
(Sather-K) 108 566.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 145.79 566.91 T
(Scheme) 108 556.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 141.53 556.91 T
(School) 108 546.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 137.41 546.91 T
(scope) 108 536.91 T
(class names and parameters) 117 526.91 T
(feature names) 117 516.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 176.1 516.91 T
(local variables) 117 506.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 176.88 506.91 T
(method arguments) 117 496.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 195.82 496.91 T
(self) 108 486.91 T
(calls on) 117 476.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 149.95 476.91 T
(in class calls) 117 466.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 168.65 466.91 T
(Self \050language\051) 108 456.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 170.5 456.91 T
($SET) 108 446.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 131.24 446.91 T
(set!) 108 436.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(147) 124.56 436.91 T
(setjmp) 108 426.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 137.52 426.91 T
(sets) 108 416.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 125.88 416.91 T
(shadowing See scope) 108 406.91 T
(shared) 108 396.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 137.92 396.91 T
(reader, writer routines) 117 386.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 209.77 386.91 T
(shared attribute definition) 108 376.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 215.6 376.91 T
(shared memory) 108 366.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 173.85 366.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 182.85 366.91 T
0 0 0 1 0 0 0 K
2 9 Q
(28) 188.85 366.91 T
(short C type, Sather equivalent) 108 356.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 234.09 356.91 T
(signed C types) 108 346.91 T
(Sather equivalents) 117 336.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 193.41 336.91 T
(single precision. See floating point) 108 326.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 247.62 326.91 T
(single quote literal) 108 316.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 184.89 316.91 T
(size_t, Sather equivalent) 108 306.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 207.78 306.91 T
(Smalltalk) 108 296.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 148.47 296.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 157.47 296.91 T
0 0 0 1 0 0 0 K
2 9 Q
(24) 163.47 296.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 172.47 296.91 T
0 0 0 1 0 0 0 K
2 9 Q
(29) 178.47 296.91 T
(sort) 108 286.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 126.22 286.91 T
(source files) 108 276.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 155.63 276.91 T
(stack allocation) 108 266.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 172.35 266.91 T
(statements) 108 256.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 153.74 256.91 T
(assert) 117 246.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 142.93 246.91 T
(else) 117 236.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 135.06 236.91 T
(elsif) 117 226.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 136.36 226.91 T
(if) 117 216.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 125.62 216.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 134.62 216.91 T
0 0 0 1 0 0 0 K
2 9 Q
(187) 140.62 216.91 T
(lock) 117 206.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 136.53 206.91 T
(protect) 117 196.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(187) 148.05 196.91 T
(raise) 117 186.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(131) 138.8 186.91 T
(return) 117 176.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 145.02 176.91 T
(yield) 117 166.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 140.05 166.91 T
(static type inference) 108 156.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 190.53 156.91 T
(STR) 108 146.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 127.25 146.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 136.25 146.91 T
0 0 0 1 0 0 0 K
2 9 Q
(143) 142.25 146.91 T
(literal instantiation) 117 136.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 195.51 136.91 T
(to INT) 117 126.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 146.13 126.91 T
(STR_CURSOR) 108 116.91 T
(example) 324 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 360.74 660 T
(strings) 315 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 344.98 650 T
(literals) 324 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 353.97 640 T
(See also $STR, STR and str) 324 630 T
(C structs, interface from Sather) 315 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(179) 441.25 620 T
(stub) 315 610 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 335.15 610 T
(subtype) 315 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 349.88 600 T
(subtyping) 315 590 T
(adding type-graph edges) 324 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 427.16 580 T
(conflict example) 324 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 392.3 570 T
(definition) 324 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 365.99 560 T
(description) 324 550 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 371.91 550 T
(See also abstract classes) 324 540 T
(subtyping clause) 315 530 T
(supertyping) 324 520 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 375.73 520 T
(sum!) 315 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 337.69 510 T
(summation) 315 500 T
(using an iterator) 324 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 392.66 490 T
(supertype) 315 480 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 358.18 480 T
(supertyping) 315 470 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 366.73 470 T
(supertyping clause) 315 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 393.64 460 T
(syntactic sugar) 315 450 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 377.59 450 T
(aget) 324 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 343.75 440 T
(aset) 324 430 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 342.56 430 T
(plus) 324 420 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 344.27 420 T
(pow) 324 410 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 344.83 410 T
(SYS) 315 400 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(142) 333.45 400 T
(inlined_C) 324 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(183) 366.02 390 T
315 342.91 504 363 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 354 447.98 354 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 315 366.67 T
2 9 Q
(t1, t2 \050TUP attributes\051) 315 334.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(142) 403.82 334.91 T
(tab character literal) 315 324.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 394.65 324.91 T
(templates, Sather equivalent) 315 314.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(111) 430.88 314.91 T
(test code) 315 304.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 352.96 304.91 T
(TESTEMP definition) 315 294.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 399.95 294.91 T
(testing for void) 315 284.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 378.94 284.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 392.44 284.91 T
0 0 0 1 0 0 0 K
2 9 Q
(192) 398.44 284.91 T
(threads) 315 274.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 347.85 274.91 T
(and IEEE exceptions) 324 264.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 408.46 264.91 T
(times) 315 254.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 339.63 254.91 T
(tree classes) 315 244.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 362.23 244.91 T
(true) 315 234.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 334.23 234.91 T
(TUP) 315 224.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(142) 335.95 224.91 T
(simple definition) 324 214.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 394.96 214.91 T
(type) 315 204.91 T
(implicit coercion) 324 194.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 393.55 194.91 T
(of literals) 324 184.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 364.13 184.91 T
(of void) 324 174.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(191) 355.28 174.91 T
(type constraint clause) 315 164.91 T
(default of $OB) 324 154.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(108) 384.77 154.91 T
(description) 324 144.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(108) 371.91 144.91 T
(type graph) 315 134.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 361.61 134.91 T
(bound routine edges) 324 124.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(126) 409.49 124.91 T
(no implicit relations between parametriza-) 324 114.91 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "255" 255
%%Page: "256" 256
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
6 10 Q
0 X
(256) 108 709.51 T
1 F
(Index) 304.47 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 9 Q
0 X
(tions) 135 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(111) 157.52 660 T
(type inference) 108 650 T
(in #) 117 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 134.61 640 T
(static) 117 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 140.8 630 T
(type promotion) 108 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 173.35 620 T
(type specifier) 108 610 T
(bound routines) 117 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 181.12 600 T
(typecase) 108 590 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 145.28 590 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 154.28 590 T
0 0 0 1 0 0 0 K
2 9 Q
(189) 160.28 590 T
(with void object) 117 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 184.15 580 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 193.15 580 T
0 0 0 1 0 0 0 K
2 9 Q
(189) 199.15 580 T
108 532.91 297 553 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 544 240.98 544 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(U) 108 556.67 T
2 9 Q
(unary negation) 108 524.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 171.73 524.91 T
(unassigned variables) 108 514.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 194.7 514.91 T
(unbound arguments) 108 504.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 192.7 504.91 T
(underflow) 108 494.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 153.07 494.91 T
(underscores) 108 484.91 T
(in bound routines) 117 474.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(123) 191.23 474.91 T
(in floating point literals) 117 464.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(146) 213.52 464.91 T
(in integer literals) 117 454.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 187.3 454.91 T
(University of California at Berkeley) 108 444.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 252.08 444.91 T
(University of Karlsruhe) 108 434.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 205.15 434.91 T
(UNIX) 108 424.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 134.52 424.91 T
(unsigned C types, Sather equivalent of) 108 414.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 264.77 414.91 T
(until!) 108 404.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 132.34 404.91 T
(until...loop...end) 108 394.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 176.24 394.91 T
(upto!) 108 384.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 132.19 384.91 T
(user-interfaces and call-backs) 108 374.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 228.14 374.91 T
108 327.82 297 347.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 338.91 240.98 338.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(V) 108 351.58 T
2 9 Q
(value class) 108 319.82 T
(advantages) 117 309.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 165.39 309.82 T
(and array portion) 117 299.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(107) 190.43 299.82 T
(attribute cycles) 117 289.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(121) 180.18 289.82 T
(efficiency) 117 279.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 158.09 279.82 T
(nil) 117 269.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 130.48 269.82 T
(unassigned object) 117 259.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 190.96 259.82 T
(value objects. See also value class) 108 249.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 243.38 249.82 T
(value, call by. See in mode) 108 239.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 216.28 239.82 T
(variable declaration) 108 229.82 T
(type inference) 117 219.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 176.48 219.82 T
(variables) 108 209.82 T
(type of) 117 199.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 147.82 199.82 T
(type within a typecase) 117 189.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(189) 209.34 189.82 T
(vertical tab literal) 108 179.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(144) 180.69 179.82 T
(void) 108 169.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 129.12 169.82 T
(and nil) 117 159.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 147.96 159.82 T
(calls on, See double colon) 117 149.82 T
(in constant initialization) 117 139.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 216.4 139.82 T
(testing for) 117 129.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 160.57 129.82 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 174.07 129.82 T
0 0 0 1 0 0 0 K
2 9 Q
(192) 180.07 129.82 T
(type of) 117 119.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(191) 147.82 119.82 T
(used in typecase) 324 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 392.69 660 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 401.69 660 T
0 0 0 1 0 0 0 K
2 9 Q
(189) 407.69 660 T
(void C type, Sather equivalent) 315 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(178) 438.75 650 T
(void test expressions) 315 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(188) 401.06 640 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 414.56 640 T
0 0 0 1 0 0 0 K
2 9 Q
(192) 420.56 640 T
315 592.91 504 613 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 604 447.98 604 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(W) 315 616.67 T
2 9 Q
(when) 315 584.91 T
(in case statements) 324 574.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 398.72 574.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 407.72 574.91 T
0 0 0 1 0 0 0 K
2 9 Q
(186) 413.72 574.91 T
(in exceptions) 324 564.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(132) 379.3 564.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 392.8 564.91 T
0 0 0 1 0 0 0 K
2 9 Q
(187) 398.8 564.91 T
(while!) 315 554.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 342.8 554.91 T
(possible implementation) 324 544.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 425.27 544.91 T
(whitespace) 315 534.91 T
(between strings) 324 524.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(145) 389.82 524.91 T
(world-wide web) 315 514.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 384.07 514.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 393.07 514.91 T
0 0 0 1 0 0 0 K
2 9 Q
(25) 399.07 514.91 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 408.07 514.91 T
0 0 0 1 0 0 0 K
2 9 Q
(26) 414.07 514.91 T
315 467.82 504 487.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 478.91 447.98 478.91 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(X) 315 491.58 T
2 9 Q
(X_WIDGET example C interface) 315 459.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(181) 446.72 459.82 T
315 412.74 504 432.82 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 423.82 447.98 423.82 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(Y) 315 436.49 T
2 9 Q
(yield) 315 404.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(138) 338.05 404.74 T
(example use in upto!) 324 394.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 410.09 394.74 T
(example use in while!) 324 384.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 413.7 384.74 T
(execution description) 324 374.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 412.55 374.74 T
(syntax,example,description) 324 364.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 436.29 364.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 445.29 364.74 T
0 0 0 1 0 0 0 K
2 9 Q
(188) 451.29 364.74 T
(within protect) 324 354.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 383.46 354.74 T
0 0 0 1 0 0 0 K
5 12 Q
(,) 392.46 354.74 T
0 0 0 1 0 0 0 K
2 9 Q
(190) 398.46 354.74 T
(yield statements) 315 344.74 T
(defined) 324 334.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 357.47 334.74 T
(yielding a value) 315 324.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(190) 381.86 324.74 T
315 277.65 504 297.74 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315 288.74 447.98 288.74 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
6 11 Q
0 X
0 0 0 1 0 0 0 K
(Z) 315 301.4 T
2 9 Q
(zero) 315 269.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(148) 335.28 269.65 T
(zero, use in constants) 315 259.65 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 403.08 259.65 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "256" 256
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 256
%%DocumentFonts: AvantGarde-Book
%%+ Palatino-Italic
%%+ Palatino-Roman
%%+ AvantGarde-Demi
%%+ Helvetica-Bold
%%+ Times-Roman
%%+ Palatino-Bold
%%+ Helvetica
%%+ AvantGarde-BookOblique
%%+ Courier
%%+ Times-Italic
%%+ Courier-Oblique
%%+ Courier-Bold
%%+ Times-Bold
%%+ Palatino-BoldItalic
%%+ Symbol
%%+ Helvetica-Oblique
%%EOF
