%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
%	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
%		/FmPD2 /pdfmark load def
		
		
		
		
		
%		/FmPA { mark exch /Dest exch 5 3 roll
%				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD
%		}FmBD
%	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
%	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 35 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Roman FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Palatino-Bold FMFONTDEFINE
5 0 /Helvetica FMFONTDEFINE
6 0 /Palatino-BoldItalic FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
8 0 /AvantGarde-Demi FMFONTDEFINE
9 0 /Helvetica-Oblique FMFONTDEFINE
10 0 /Times-Italic FMFONTDEFINE
11 0 /Helvetica-Narrow FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
0 0 0 1 0 0 0 K
V
0 48 Q
0 X
(Sather 1.1) 207.34 564 T
1 12 Q
(May 31, 1996) 271.49 502 T
1 18 Q
(David Stoutamir) 235.38 376 T
(e) 368 376 T
1 12 Q
(International Computer Science Institute) 198.2 358 T
(1947 Center Str) 231.26 344 T
(eet, Suite 600) 311.64 344 T
(Berkeley) 235.96 330 T
(, California  94704) 280.78 330 T
1 18 Q
(Stephen Omohundr) 221.94 290 T
(o) 380.23 290 T
2 12 Q
(NEC Research Institute, Inc.) 237.18 272 T
(4 Independence W) 254.72 258 T
(ay) 343.73 258 T
(,) 354.28 258 T
(Princeton, NJ  08540) 255.34 244 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 271.18 709.51 T
(able of Contents) 276.18 709.51 T
(3) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
121 652.2 108 652.2 2 L
0 X
V
0.9 H
0 Z
N
3 18 Q
(A) 108 654 T
166.3 652.2 121 652.2 2 L
V
N
3 14.4 Q
(BOUT) 121 654 T
176.31 652.2 166.3 652.2 2 L
V
N
3 18 Q
(S) 166.3 654 T
227.52 652.2 176.31 652.2 2 L
V
N
3 14.4 Q
(ATHER) 176.31 654 T
4 14 Q
(I) 108 612.67 T
4 11.2 Q
(NTRODUCTION) 113.45 612.67 T
4 14 Q
(9) 214.78 612.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     The Name) 108 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177 597 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 459 597 T
0 0 0 1 0 0 0 K
4 14 Q
(I) 108 564.67 T
4 11.2 Q
(MPOR) 113.45 564.67 T
(T) 148.29 564.67 T
(ANT) 154.73 564.67 T
4 14 Q
(C) 183.74 564.67 T
4 11.2 Q
(ONCEPTS) 193.85 564.67 T
4 14 Q
(10) 259.09 564.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Garbage Collection and Checking) 108 549 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291 549 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 459 549 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     No Implicit Calls) 108 535 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 210 535 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 459 535 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Separation of Subtyping and Code Inclusion) 108 521 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . .) 339 521 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 459 521 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Iterators) 108 507 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 168 507 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 459 507 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Closures) 108 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 168 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 459 493 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Immutable and Reference Objects) 108 479 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 291 479 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 459 479 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     pSather) 108 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 165 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 459 465 T
0 0 0 1 0 0 0 K
4 14 Q
(U) 108 432.67 T
4 11.2 Q
(SING) 118.89 432.67 T
4 14 Q
(S) 152.25 432.67 T
4 11.2 Q
(A) 160.8 432.67 T
(THER) 168.49 432.67 T
4 14 Q
(14) 210.72 432.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Obtaining the compiler) 108 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 459 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     How do I ask questions?) 108 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 459 403 T
0 0 0 1 0 0 0 K
4 14 Q
(H) 108 370.67 T
4 11.2 Q
(ISTOR) 119.66 370.67 T
(Y) 155.13 370.67 T
4 14 Q
(15) 173.1 370.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Acknowledgments) 108 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 459 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     References) 108 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 459 341 T
0 0 0 1 0 0 0 K
120.01 277.2 108 277.2 2 L
V
N
3 18 Q
(T) 108 279 T
145.31 277.2 120.01 277.2 2 L
V
N
3 14.4 Q
(HE) 120.01 279 T
155.32 277.2 145.31 277.2 2 L
V
N
3 18 Q
(S) 145.31 279 T
211.03 277.2 155.32 277.2 2 L
V
N
3 14.4 Q
(ATHER) 155.32 279 T
238.03 277.2 211.03 277.2 2 L
V
N
3 18 Q
(1.1) 211.03 279 T
248.04 277.2 238.03 277.2 2 L
V
N
(S) 238.03 279 T
354.43 277.2 248.04 277.2 2 L
V
N
3 14.4 Q
(PECIFICATION) 248.04 279 T
4 14 Q
(I) 108 237.67 T
4 11.2 Q
(NTRODUCTION) 113.45 237.67 T
4 14 Q
(18) 214.78 237.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     About This Document) 108 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 459 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Basic Concepts) 108 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 201 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 459 208 T
0 0 0 1 0 0 0 K
4 14 Q
(L) 108 175.67 T
4 11.2 Q
(EXICAL) 116.55 175.67 T
4 14 Q
(S) 162.37 175.67 T
4 11.2 Q
(TRUCTURE) 170.92 175.67 T
4 14 Q
(19) 244.89 175.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(4) 108 709.51 T
0 F
(T) 271.18 709.51 T
(able of Contents) 276.18 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(O) 108 656.67 T
4 11.2 Q
(BJECTS) 119.66 656.67 T
4 14 Q
(,) 160.73 656.67 T
(T) 167.73 656.67 T
4 11.2 Q
(YPES) 177.07 656.67 T
(AND) 208.57 656.67 T
4 14 Q
(C) 239.44 656.67 T
4 11.2 Q
(LASSES) 249.55 656.67 T
4 14 Q
(20) 302.98 656.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Signatures) 108 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Type specifiers) 108 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 201 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 459 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Abstract classes) 108 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 204 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 459 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Concrete classes) 108 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 459 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Sather source files) 108 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 459 585 T
0 0 0 1 0 0 0 K
4 14 Q
(C) 108 552.67 T
4 11.2 Q
(LASS) 118.11 552.67 T
4 14 Q
(E) 150.85 552.67 T
4 11.2 Q
(LEMENTS) 159.4 552.67 T
4 14 Q
(28) 225.28 552.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Constant definitions) 108 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 459 537 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Shared attribute definitions) 108 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 459 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Attribute definitions) 108 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 459 509 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Routine definitions) 108 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 459 495 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Iterator definitions) 108 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 459 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Code inclusion and) 108 467 T
5 F
(include) 218.66 467 T
2 F
( clauses) 256.68 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 300 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 459 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Stubs) 108 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 153 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 459 453 T
0 0 0 1 0 0 0 K
4 14 Q
(B) 108 420.67 T
4 11.2 Q
(ASIC) 117.34 420.67 T
4 14 Q
(S) 148.84 420.67 T
4 11.2 Q
(T) 157.39 420.67 T
(A) 163.83 420.67 T
(TEMENTS) 171.51 420.67 T
4 14 Q
(35) 238.01 420.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Declaration statements) 108 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 459 405 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Assignment statements) 108 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 459 391 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(if) 123 377 T
2 F
( statements) 129 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 186 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 459 377 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(return) 123 363 T
2 F
( statements) 154.34 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 459 363 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(case) 123 349 T
2 F
( statements) 148.34 349 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 349 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 459 349 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(typecase) 123 335 T
2 F
( statements) 171.02 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 459 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Expression statements) 123 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 234 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 459 321 T
0 0 0 1 0 0 0 K
4 14 Q
(L) 108 288.67 T
4 11.2 Q
(ITERAL) 116.55 288.67 T
4 14 Q
(E) 162.37 288.67 T
4 11.2 Q
(XPRESSIONS) 170.92 288.67 T
4 14 Q
(39) 254.21 288.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Boolean literal expressions) 108 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 459 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Character literal expressions) 108 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 264 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 459 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     String literal expressions) 108 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 459 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Integer literal expressions) 108 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 252 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 459 231 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Floating point literal expressions) 108 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 459 217 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 271.18 709.51 T
(able of Contents) 276.18 709.51 T
(5) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(B) 108 656.67 T
4 11.2 Q
(ASIC) 117.34 656.67 T
4 14 Q
(E) 148.84 656.67 T
4 11.2 Q
(XPRESSIONS) 157.39 656.67 T
4 14 Q
(42) 240.68 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(self) 123 641 T
2 F
( expressions) 141.67 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 204 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Local variable access expressions) 108 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 288 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 459 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Method call expressions) 108 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 459 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(void) 123 599 T
2 F
( expressions) 145.01 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 459 599 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(void) 123 585 T
2 F
( test expressions) 145.01 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 459 585 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(new) 123 571 T
2 F
( expressions) 145.01 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 459 571 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Creation expressions) 108 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 459 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Array creation expressions) 108 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 459 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(and) 123 529 T
2 F
( expressions) 143.02 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 459 529 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(or) 123 515 T
2 F
( expressions) 133.67 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 198 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 459 515 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Syntactic sugar expressions) 108 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 261 501 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 459 501 T
0 0 0 1 0 0 0 K
4 14 Q
(L) 108 468.67 T
4 11.2 Q
(OOPS) 116.55 468.67 T
(AND) 152.4 468.67 T
4 14 Q
(I) 183.27 468.67 T
4 11.2 Q
(TERA) 188.72 468.67 T
(TORS) 218.8 468.67 T
4 14 Q
(51) 261.03 468.67 T
0 0 0 1 0 0 0 K
5 12 Q
(loop) 123 453 T
2 F
( statements) 145.68 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 204 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 459 453 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(yield) 123 439 T
2 F
( statements) 147.67 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 459 439 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(quit) 123 425 T
2 F
( statements) 142.34 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 201 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 459 425 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(while!) 123 411 T
2 F
( expressions) 153.67 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 459 411 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(until!) 123 397 T
2 F
( expressions) 148.34 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 459 397 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(break!) 123 383 T
2 F
( expressions) 156.35 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219 383 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 459 383 T
0 0 0 1 0 0 0 K
4 14 Q
(C) 108 350.67 T
4 11.2 Q
(LOSURES) 118.11 350.67 T
4 14 Q
(55) 182.11 350.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Closure creation expressions) 108 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 264 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 459 335 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Closure calls) 108 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 459 321 T
0 0 0 1 0 0 0 K
4 14 Q
(E) 108 288.67 T
4 11.2 Q
(XCEPTIONS) 116.55 288.67 T
4 14 Q
(57) 193.63 288.67 T
0 0 0 1 0 0 0 K
5 12 Q
(protect) 123 273 T
2 F
( statements) 159.68 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 459 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(raise) 123 259 T
2 F
( statements) 149 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 459 259 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(exception) 123 245 T
2 F
( expressions) 174.36 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237 245 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 459 245 T
0 0 0 1 0 0 0 K
4 14 Q
(S) 108 212.67 T
4 11.2 Q
(AFETY) 116.55 212.67 T
4 14 Q
(F) 156.78 212.67 T
4 11.2 Q
(EA) 164.56 212.67 T
(TURES) 179.09 212.67 T
4 14 Q
(59) 227.54 212.67 T
0 0 0 1 0 0 0 K
5 12 Q
(assert) 123 197 T
2 F
( statements) 155.68 197 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 197 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 459 197 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(initial) 123 183 T
2 F
( expressions) 150.34 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 459 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(result) 123 169 T
2 F
( expressions) 152.34 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 459 169 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(6) 108 709.51 T
0 F
(T) 271.18 709.51 T
(able of Contents) 276.18 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(S) 108 656.67 T
4 11.2 Q
(PECIAL) 116.55 656.67 T
(FEA) 161.74 656.67 T
(TURE) 182.49 656.67 T
(NAMES) 217.11 656.67 T
4 14 Q
(61) 270.54 656.67 T
0 0 0 1 0 0 0 K
5 12 Q
(invariant) 123 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 173.47 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(main) 123 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 153.46 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 459 627 T
0 0 0 1 0 0 0 K
4 14 Q
(B) 108 594.67 T
4 11.2 Q
(UIL) 117.34 594.67 T
(T) 136.42 594.67 T
4 14 Q
(-) 142.86 594.67 T
4 11.2 Q
(IN) 147.52 594.67 T
(CLASSES) 164.71 594.67 T
4 14 Q
(62) 226.23 594.67 T
(C) 108 560.67 T
4 11.2 Q
(ONVENTIONS) 118.11 560.67 T
4 14 Q
(64) 209.48 560.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Object Creation) 108 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 204 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 459 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Naming) 108 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 165 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 459 531 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Object Identity) 108 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 201 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 459 517 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Nil and void) 108 503 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 186 503 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 459 503 T
0 0 0 1 0 0 0 K
4 14 Q
(IEEE) 108 470.67 T
(F) 142.61 470.67 T
4 11.2 Q
(LOA) 150.39 470.67 T
(TING) 174.25 470.67 T
4 14 Q
(-P) 204.73 470.67 T
4 11.2 Q
(OINT) 217.95 470.67 T
4 14 Q
(67) 258.93 470.67 T
118.01 405.2 108 405.2 2 L
V
0.9 H
0 Z
N
3 18 Q
(S) 108 407 T
173.71 405.2 118.01 405.2 2 L
V
N
3 14.4 Q
(ATHER) 118.01 407 T
200.71 405.2 173.71 405.2 2 L
V
N
3 18 Q
(1.1) 173.71 407 T
212.72 405.2 200.71 405.2 2 L
V
N
(E) 200.71 407 T
287.93 405.2 212.72 405.2 2 L
V
N
3 14.4 Q
(XTENSION) 212.72 407 T
295.94 405.2 287.93 405.2 2 L
V
N
(S) 287.93 407 T
4 14 Q
(L) 108 365.67 T
4 11.2 Q
(A) 116.55 365.67 T
(NGUAGE) 125.27 365.67 T
4 14 Q
(I) 181.03 365.67 T
4 11.2 Q
(NTERF) 186.47 365.67 T
(ACE) 223.81 365.67 T
4 14 Q
(E) 250.96 365.67 T
4 11.2 Q
(XTENSIONS) 259.51 365.67 T
4 14 Q
(68) 337.82 365.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     Interfacing with Fortran) 108 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 459 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Interfacing with ANSI C) 108 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 246 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 459 336 T
0 0 0 1 0 0 0 K
4 14 Q
(T) 108 303.67 T
4 11.2 Q
(HREAD) 117.34 303.67 T
(ED) 159.64 303.67 T
4 14 Q
(E) 179.31 303.67 T
4 11.2 Q
(XTENSION) 187.87 303.67 T
4 14 Q
(72) 259.34 303.67 T
0 0 0 1 0 0 0 K
5 12 Q
(par) 123 288 T
2 F
( and) 140.34 288 T
5 F
(fork) 163.67 288 T
2 F
( statements) 183.67 288 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 243 288 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 459 288 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(parloop) 123 274 T
2 F
( statement) 163.02 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 216 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 459 274 T
0 0 0 1 0 0 0 K
4 14 Q
(S) 108 241.67 T
4 11.2 Q
(YNCHRONIZA) 116.55 241.67 T
(TION) 197.02 241.67 T
4 14 Q
(E) 231.01 241.67 T
4 11.2 Q
(XTENSION) 239.56 241.67 T
4 14 Q
(75) 311.04 241.67 T
0 0 0 1 0 0 0 K
5 12 Q
(lock) 123 226 T
2 F
( statement) 144.34 226 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 198 226 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 459 226 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(unlock) 123 212 T
2 F
( statement) 157.68 212 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 210 212 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 459 212 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
($LOCK) 123 198 T
2 F
( Classes) 162.35 198 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 198 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 459 198 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Attach statement) 108 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 459 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
($ATTACH) 123 170 T
2 F
( classes) 177.67 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 219 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 459 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(sync) 123 156 T
2 F
( statement) 147.67 156 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 201 156 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 459 156 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Memory consistency) 108 142 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 142 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 459 142 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(SYS) 123 128 T
2 F
( class) 147.01 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 459 128 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 271.18 709.51 T
(able of Contents) 276.18 709.51 T
(7) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 14 Q
0 X
(D) 108 656.67 T
4 11.2 Q
(ISTRIBUTED) 119.66 656.67 T
4 14 Q
(E) 194.1 656.67 T
4 11.2 Q
(XTENSION) 202.66 656.67 T
4 14 Q
(83) 274.13 656.67 T
0 0 0 1 0 0 0 K
2 12 Q
(     The \324) 108 641 T
5 F
(@) 148.66 641 T
2 F
(\325 operator) 160.84 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 213 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 459 641 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(     Location expressions) 108 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 228 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 459 627 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(with-near) 123 613 T
2 F
( statement) 172.34 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 459 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(8) 108 709.51 T
0 F
(T) 271.18 709.51 T
(able of Contents) 276.18 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Intr) 307.45 709.51 T
(oduction) 323.38 709.51 T
4 F
(9) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-1.8 (About Sather) 108 642 S
115 510.2 108 510.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(I) 108 512 T
231.78 510.2 115 510.2 2 L
V
N
4 14.4 Q
(NTRODUCTION) 115 512 T
1 10 Q
-0.35 (Sather is an object oriented language designed to be simple, efficient, safe, and non-propri-) 108 484.33 P
0.06 (etary. It aims to meet the needs of modern research groups and to foster the development) 108 472.33 P
0.32 (of a large, freely available, high-quality library of efficient well-written classes for a wide) 108 460.33 P
-0.46 (variety of computational tasks. It was originally based on Eiffel but now incorporates ideas) 108 448.33 P
0.12 (and approaches from several languages. One way of placing it in the \324space of languages\325) 108 436.33 P
0.47 (is to say that it attempts to be as efficient as C, C++, or Fortran, as elegant but safer than) 108 424.33 P
-0.01 (Eiffel or CLU, and to support higher-order functions as well as Common Lisp, Scheme, or) 108 412.33 P
(Smalltalk.) 108 400.33 T
-0.5 (Sather has garbage collection, statically-checked strong \050contravariant\051 typing, multiple in-) 108 376.33 P
0.14 (heritance, separate implementation and type inheritance, parameterized classes, dynamic) 108 364.33 P
0.26 (dispatch, iteration abstraction, higher-order routines and iters, exception handling, asser-) 108 352.33 P
1.09 (tions, preconditions, postconditions, and class invariants.  Sather code can be compiled) 108 340.33 P
-0.2 (into C code and can efficiently link with object files of other languages.  pSather, the paral-) 108 328.33 P
0.9 (lel and distributed extension, presents a shared memory abstraction to the programmer) 108 316.33 P
(while allowing explicit placement of data and threads.) 108 304.33 T
0.3 (Sather has a very unrestrictive license aimed at encouraging contribution to the public li-) 108 280.33 P
(brary without precluding the use of Sather for proprietary projects.) 108 268.33 T
0 0 0 1 0 0 0 K
108 219.98 504 223 C
0 0 0 1 0 0 0 K
72 221.49 540 221.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(The Name) 108 227 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.09 (Sather was developed at the International Computer Science Institute, a research institute) 108 199.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.47 (affiliated with the computer science department of the University of California at Berkeley.) 108 187.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.37 (The Sather language gets its name from the Sather Tower \050popularly known as the Cam-) 108 175.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (panile\051, the best-known landmark of the campus.  A symbol of the city and the university,) 108 163.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (it is the Berkeley equivalent of the Golden Gate bridge across the bay.  Erected in 1914, the) 108 151.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.43 (tower is modeled after St. Mark's Campanile in Venice, Italy. It is smaller and a bit younger) 108 139.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.05 (than the Eiffel tower. The way most people say the name of the language rhymes with) 108 127.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324bather\325.) 108 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(10) 108 709.51 T
0 F
(Important Concepts) 275.64 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
1.67 (The name \324Sather\325 is a pun of sorts - Sather was originally envisioned as an efficient,) 108 659.33 P
0.38 (cleaned-up alternative to the language Eiffel.  However, since its conception the two lan-) 108 647.33 P
(guages have evolved to be quite distinct.) 108 635.33 T
115 572.2 108 572.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(I) 108 574 T
207.5 572.2 115 572.2 2 L
V
N
4 14.4 Q
(MPORTANT) 115 574 T
220.49 572.2 207.5 572.2 2 L
V
N
4 18 Q
(C) 207.5 574 T
290.88 572.2 220.49 572.2 2 L
V
N
4 14.4 Q
(ONCEPTS) 220.49 574 T
1 10 Q
1.21 (This section brie\337y  intr) 108 548.33 P
1.21 (oduces some concepts important to Sather that the r) 217.45 548.33 P
1.21 (eader may) 456.26 548.33 P
1.74 (not have been exposed to in C++ [2].  It isn\325t meant as a complete language tutorial.) 108 536.33 P
(Mor) 108 524.33 T
(e information of a tutorial natur) 126.69 524.33 T
(e is available fr) 267.18 524.33 T
(om the WWW page:) 333.42 524.33 T
5 9 Q
(http://www.icsi.berkeley.edu/Sather) 144 507 T
0 0 0 1 0 0 0 K
108 459.98 504 463 C
0 0 0 1 0 0 0 K
72 461.49 540 461.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Garbage Collection and Checking) 108 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
1.44 (Like many object-oriented languages, Sather is) 108 444.31 P
0 F
1.44 (garbage collected) 325.1 444.31 P
1 F
1.44 (, so pr) 394.58 444.31 P
1.44 (ogrammers never) 424.45 444.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.14 (have to fr) 108 432.31 P
1.14 (ee memory explicitly) 152.37 432.31 P
1.14 (.  The r) 246.4 432.31 P
1.14 (untime system does this automatically when it is) 280.45 432.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.49 (safe to do so.  Idiomatic Sather applications generate far less garbage than typical Small-) 108 420.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.96 (talk or Lisp pr) 108 408.31 P
0.96 (ograms, so the cost of collecting tends to be lower) 173.57 408.31 P
0.96 (. Sather does allow the) 400.49 408.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.16 (pr) 108 396.31 P
1.16 (ogrammer to manually deallocate objects, letting the garbage collector handle the r) 117.78 396.31 P
1.16 (e-) 495.88 396.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.91 (mainder) 108 384.31 P
1.91 (.  W) 144.67 384.31 P
1.91 (ith checking compiled in, the system will catch dangling r) 165.44 384.31 P
1.91 (efer) 437.44 384.31 P
1.91 (ences fr) 454.12 384.31 P
1.91 (om) 489.71 384.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(manual deallocation befor) 108 372.31 T
(e any harm can be done.) 223.54 372.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.07 (More generally, when checking options have been turned on by compiler flags, the result-) 108 348.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.76 (ing program cannot crash disastrously or mysteriously.  All sources of errors that cause) 108 336.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (crashes are either eliminated at compile-time or funneled into a few situations \050such as ac-) 108 324.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.19 (cessing beyond array bounds\051 that are found at run-time precisely at the source of the er-) 108 312.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ror.) 108 300.31 T
0 0 0 1 0 0 0 K
108 251.95 504 254.98 C
0 0 0 1 0 0 0 K
72 253.46 540 253.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(No Implicit Calls) 108 258.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.41 (Sather does as little as possible behind the user's back at r) 108 236.29 P
0.41 (untime.  Ther) 366.1 236.29 P
0.41 (e ar) 426.57 236.29 P
0.41 (e no) 443.04 236.29 P
0 F
0.41 (implicitly) 464.92 236.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
1.32 (constr) 108 224.29 P
1.32 (ucted temporary objects, and ther) 135.09 224.29 P
1.32 (efor) 288.94 224.29 P
1.32 (e no r) 306.29 224.29 P
1.32 (ules to learn or cir) 333.87 224.29 P
1.32 (cumvent.  This ex-) 418.84 224.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.64 (tends to class constr) 108 212.29 P
0.64 (uctors:  all calls that can constr) 198.27 212.29 P
0.64 (uct an object ar) 336.97 212.29 P
0.64 (e explicitly written by) 405.52 212.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.31 (the pr) 108 200.29 P
1.31 (ogrammer) 135.46 200.29 P
1.31 (.  In Sather) 181.09 200.29 P
1.31 (, constr) 231.55 200.29 P
1.31 (uctors ar) 264.96 200.29 P
1.31 (e or) 304.92 200.29 P
1.31 (dinary r) 322.75 200.29 P
1.31 (outines distinguished only by a) 359.69 200.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.84 (convenient but optional calling syntax \050page 47\051.  W) 108 188.29 P
1.84 (ith garbage collection ther) 351.67 188.29 P
1.84 (e is no) 472.1 188.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(need for destr) 108 176.29 T
(uctors; however) 169.52 176.29 T
(, explicit \336nalization is available when desir) 239.96 176.29 T
(ed \050page 63\051.) 433.43 176.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (Sather never converts types implicitly, such as from integer to character, integer to floating) 108 152.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (point, single to double precision, or subclass to superclass.  With neither implicit construc-) 108 140.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.51 (tion nor conversion, Sather resolves routine overloading \050choosing  one of several similarly) 108 128.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Important Concepts) 292.77 709.51 T
4 F
(1) 494.37 709.51 T
(1) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.04 (named operations based on argument types\051 much more) 108 659.33 P
0.04 (clearly than C++.  The program-) 361.28 659.33 P
(mer can easily deduce which routine will be called \050page 44\051.) 108 647.33 T
0.39 (In Sather, the redefinition of operators is orthogonal to the rest of the language.  There is) 108 623.33 P
0.1 (\324\324syntactic sugar\325\325 \050page 49\051 for standard infix mathematical symbols such as \324) 108 611.33 P
5 F
0.11 (+) 451.16 611.33 P
1 F
0.1 (\325 and \324) 457 611.33 P
5 F
0.11 (^) 484.69 611.33 P
1 F
0.1 (\325 as) 489.38 611.33 P
-0.22 (calls to otherwise ordinary routines with names \324) 108 599.33 P
5 F
-0.24 (plus) 322.76 599.33 P
1 F
-0.22 (\325 and \324) 341.1 599.33 P
5 F
-0.24 (pow) 368.15 599.33 P
1 F
-0.22 (\325.  \324) 386.49 599.33 P
5 F
-0.24 (a+b) 399.11 599.33 P
1 F
-0.22 (\325 is just another way) 416.07 599.33 P
0.35 (of writing \324) 108 587.33 P
5 F
0.39 (a.plus\050b\051) 158.02 587.33 P
1 F
0.35 (\325.  Similarly, \324) 196.93 587.33 P
5 F
0.39 (a[i]) 256.27 587.33 P
1 F
0.35 (\325 translates to \324) 269.61 587.33 P
5 F
0.39 (a.aget\050i\051) 334.92 587.33 P
1 F
0.35 (\325 when used in an expression.) 371.6 587.33 P
(An assignment \324) 108 575.33 T
5 F
(a[i] := expr) 179.85 575.33 T
1 F
(\325 translates into \324) 226.82 575.33 T
5 F
(a.aset\050i,expr\051) 299.8 575.33 T
1 F
(\325.) 358.15 575.33 T
0 0 0 1 0 0 0 K
108 526.98 504 530 C
0 0 0 1 0 0 0 K
72 528.49 540 528.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Separation of Subtyping and Code Inclusion) 108 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.7 (In many object-oriented languages, the term \324inheritance\325 is used to mean two things si-) 108 511.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.28 (multaneously) 108 499.31 P
0.28 (.  One is) 167.73 499.31 P
0 F
0.28 (subtyping) 206.96 499.31 P
1 F
0.28 (, which is the r) 247.71 499.31 P
0.28 (equir) 313.43 499.31 P
0.28 (ement that a class pr) 336.54 499.31 P
0.28 (ovide implemen-) 428.08 499.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.23 (tations for the abstract methods in a supertype.  The other is code inheritance \050called) 108 487.31 P
0 F
0.23 (code) 486.6 487.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.01 (inclusion) 108 475.31 P
1 F
1.01 ( in Sather parlance\051 which allows a class to r) 145.42 475.31 P
1.01 (euse a portion of the implementa-) 349.58 475.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.77 (tion of another class.  In many languages it is not possible to include code without sub-) 108 463.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typing or vice versa.) 108 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (Sather provides separate mechanisms for these two concepts.) 108 427.31 P
0 F
-0.18 (Abstract classes) 381.72 427.31 P
1 F
-0.18 ( represent in-) 445.69 427.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (terfaces: sets of signatures that subtypes of the abstract class must provide.  Other kinds of) 108 415.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.29 (classes provide implementation.  Classes may include implementation from other classes) 108 403.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.19 (using a special \324) 108 391.31 P
5 F
1.32 (include) 181.71 391.31 P
1 F
1.19 (\325 clause; this does not affect the subtyping relationship between) 213.39 391.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.15 (classes.  Separating these two concepts simplifies the language considerably and makes it) 108 379.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (easier to understand code.  Because it is only possible to subtype from abstract classes, and) 108 367.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.09 (abstract classes only specify an interface without code, sometimes in Sather one factors) 108 355.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (what would be a single class in C++ into two classes: an abstract class specifying the inter-) 108 343.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(face and a code class specifying code to be included.  This often leads to cleaner designs.) 108 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.51 (Issues surrounding the decision to explicitly separate subtyping and code inclusion in) 108 307.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.2 (Sather are discussed in the ICSI technical report TR 93-064: \324\324Engineering a Programming) 108 295.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (Language: The Type and Class System of Sather,\325\325 also published as [7].  It is available at) 108 283.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the Sather WWW page.) 108 271.31 T
0 0 0 1 0 0 0 K
108 222.95 504 225.98 C
0 0 0 1 0 0 0 K
72 224.46 540 224.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Iterators) 108 229.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.32 (Early versions of Sather used a conventional \324) 108 207.29 P
5 F
0.36 (until...loop...end) 311.51 207.29 P
1 F
0.32 (\325 statement much like other) 382.11 207.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.36 (languages.  This made Sather susceptible to bugs that af) 108 195.29 P
1.36 (\337ict looping constr) 366.74 195.29 P
1.36 (ucts.  Code) 452.37 195.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.84 (which contr) 108 183.29 P
0.84 (ols loop iteration is known for tricky \324) 161.42 183.29 P
0.84 (\324fencepost err) 333.58 183.29 P
0.84 (ors\325) 394.35 183.29 P
0.84 (\325 \050incorr) 410.41 183.29 P
0.84 (ect initializa-) 446.21 183.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.12 (tion or termination\051. T) 108 171.29 P
0.12 (raditional iteration constr) 205.8 171.29 P
0.12 (ucts also r) 318.83 171.29 P
0.12 (equir) 363.43 171.29 P
0.12 (e the internal implementa-) 386.53 171.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion details of data str) 108 159.29 T
(uctur) 204.2 159.29 T
(es to be exposed when iterating over their elements.) 227.73 159.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (Simple looping constructs are more powerful when combined with heavy use of) 108 135.29 P
0 F
-0.29 (cursor) 461.73 135.29 P
1 F
-0.29 ( ob-) 487.47 135.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.85 (jects \050sometimes called \324iterators\325 in other languages, although Sather uses that term for) 108 123.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(12) 108 709.51 T
0 F
(Important Concepts) 275.64 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.34 (something else entirely\051 to iterate through the contents of container objects.  Cursor objects) 108 659.33 P
-0.04 (can be found in most C++ libraries, and they allow useful iteration abstraction.  However,) 108 647.33 P
0.93 (they have a number of problems.  They must be explicitly initialized, incremented, and) 108 635.33 P
0.83 (tested in the loop.  Cursor objects require maintaining a parallel cursor object hierarchy) 108 623.33 P
0.49 (alongside each container class hierarchy.  Since creation is explicit, cursors aren't elegant) 108 611.33 P
0.48 (for describing nested or recursive control structures.  They can also prevent a number of) 108 599.33 P
(important optimizations in inner loops.) 108 587.33 T
0.28 (An important language improvement in Sather 1.0 over earlier versions was the addition) 108 563.33 P
-0.07 (of) 108 551.33 P
0 F
-0.07 (iterators) 119.22 551.33 P
1 F
-0.07 (.  Iterators are methods that encapsulate user defined looping control structures) 153.1 551.33 P
-0.14 (just as routines do for algorithms.  Code using iterators is more concise, yet more readable) 108 539.33 P
-0.04 (than code using the cursor objects needed in C++.  It is also safer, because the creation, in-) 108 527.33 P
-0.54 (crement, and termination check are bound together inviolably at one point.  Each class may) 108 515.33 P
-0.03 (define many sorts of iterators, whereas a traditional approach requires a different yet inti-) 108 503.33 P
-0.61 (mately coupled class for each kind of iteration over the major class.  Sather iterators are part) 108 491.33 P
(of the class interface just like routines.) 108 479.33 T
-0.01 (Iterators act as a lingua-franca for operating on collections of items.  Matrices define itera-) 108 455.33 P
0.68 (tors to yield rows and columns; tree classes have recursive iters to traverse the nodes in) 108 443.33 P
0.54 (pre-order, in-order, and post-order; graph classes have iters to traverse vertices or edges) 108 431.33 P
0.46 (breadth-first and depth-first.  Other container classes such as hash tables, queues, etc. all) 108 419.33 P
0.51 (provide iters to yield and sometimes to set elements. Arbitrary iterators may be used to-) 108 407.33 P
(gether in loops with other code.) 108 395.33 T
0.64 (The rationale of the Sather iterator construct and comparisons with related constructs in) 108 371.33 P
0.08 (other languages can be found in the ICSI technical report TR 93-045: \324\324Sather Iters: Object-) 108 359.33 P
0.57 (Oriented Iteration Abstraction,\325\325 also published as [5]. It is available at the Sather WWW) 108 347.33 P
(page.) 108 335.33 T
0 0 0 1 0 0 0 K
108 286.98 504 290 C
0 0 0 1 0 0 0 K
72 288.49 540 288.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Closur) 108 294 T
(es) 143.34 294 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.7 (Sather pr) 108 271.31 P
0.7 (ovides higher) 149.05 271.31 P
0.7 (-or) 210.08 271.31 P
0.7 (der functions thr) 222.64 271.31 P
0.7 (ough) 298.05 271.31 P
0 F
0.7 (method closur) 324.12 271.31 P
0.7 (es) 381.21 271.31 P
1 F
0.7 (, which ar) 388.99 271.31 P
0.7 (e similar to clo-) 434 271.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.13 (sur) 108 259.31 P
1.13 (es and function pointers in other languages.  These allow binding some or all ar) 122.04 259.31 P
1.13 (gu-) 489.08 259.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.86 (ments to arbitrary r) 108 247.31 P
3.86 (outines and iterators but defer the r) 205.6 247.31 P
3.86 (emaining ar) 385.42 247.31 P
3.86 (guments and) 442.18 247.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.56 (execution until a later time.  They support writing code in an applicative style, although) 108 235.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.19 (iterators eliminate much of the motivation for pr) 108 223.31 P
0.19 (ogramming that way) 323.74 223.31 P
0.19 (.  They ar) 416.18 223.31 P
0.19 (e also use-) 457.83 223.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.8 (ful for building contr) 108 211.31 P
0.8 (ol str) 203.43 211.31 P
0.8 (uctur) 226.47 211.31 P
0.8 (es at r) 250 211.31 P
0.8 (un-time, for example, r) 277.76 211.31 P
0.8 (egistering call-backs with a) 381.62 211.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.94 (windowing system.  Like other Sather methods, method closur) 108 199.31 P
1.94 (es follow static typing) 401.02 199.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and behave with contravariant conformance.) 108 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Important Concepts) 292.77 709.51 T
4 F
(13) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Immutable and Refer) 108 658 T
(ence Objects) 220.22 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
1.24 (Sather distinguishes between reference objects and immutable objects. Imutable objects) 108 630.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.07 (never change once they are created. When one wishes to modify an immutable object, one) 108 618.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is compelled to create a whole new object that reflects the modification.) 108 606.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.16 (Experienced C programmers immediately understand the difference when told about the) 108 582.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.34 (internal representation the ICSI compiler uses: immutable types are implemented with) 108 570.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.51 (stack or register allocated C \324) 108 558.31 P
5 F
-0.57 (struct) 233.06 558.31 P
1 F
-0.51 (\325s while reference types are pointers to the heap. Because) 257.51 558.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.38 (of that difference, reference objects can be referred to from more than one variable \050) 108 546.31 P
0 F
-0.38 (aliased) 470.95 546.31 P
1 F
-0.38 (\051,) 498.17 546.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (but immutable objects never appear to be. Many of the built-in types \050integers, characters,) 108 534.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (floating point\051 are immutable classes. There are a handful of other differences between ref-) 108 522.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.83 (erence and immutable types; for example, reference objects must be explicitly allocated,) 108 510.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(but immutable objects \324just are\325.) 108 498.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.37 (Immutable types can have several performance advantages over reference types.  Immuta-) 108 474.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (ble types have no heap management overhead, they don't reserve space to store a type tag,) 108 462.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (and the absence of aliasing makes more compiler optimizations possible.  For a small class) 108 450.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (like \324) 108 438.31 P
5 F
-0.37 (CPX) 129.12 438.31 P
1 F
-0.33 (\325 \050complex number\051, all these factors  combine to give a significant win over a ref-) 149.68 438.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (erence class  implementation.  Balanced against these positive factors in using an  immuta-) 108 426.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.08 (ble object is the overhead that some C compilers introduce in passing  the entire object on) 108 414.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.59 (the stack.  This problem is worse in immutable classes with many attributes.  Unfortunately) 108 402.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.01 (the efficiency of an immutable class is directly tied to how  smart the C compiler is; at this) 108 390.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time \324) 108 378.31 T
5 F
(gcc) 133.07 378.31 T
1 F
(\325 is not very bright in this respect, although other compilers are.) 148.63 378.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.24 (Immutable classes aren\325t strictly necessary; reference classes with immutable semantics) 108 354.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (work too.  For example, the reference class \324) 108 342.31 P
5 F
-0.14 (INTI) 300.07 342.31 P
1 F
-0.13 (\325 implements immutable infinite precision) 318.96 342.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.06 (integers and can be used like the built-in immutable class \324) 108 330.31 P
5 F
0.06 (INT) 367.02 330.31 P
1 F
0.06 (\325.  The standard string class) 383.13 330.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (\324) 108 318.31 P
5 F
-0.07 (STR) 110.78 318.31 P
1 F
-0.06 (\325 is also a reference type but behaves with immutable semantics.  Explicitly declaring) 130.78 318.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.48 (immutable classes allows the compiler to enforce immutable semantics and provides a hint) 108 306.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.06 (for good code generation.  Common immutable classes are defined in the standard librar-) 108 294.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ies; defining a new immutable class is unusual.) 108 282.31 T
0 0 0 1 0 0 0 K
108 233.95 504 236.98 C
0 0 0 1 0 0 0 K
72 235.46 540 235.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(pSather) 108 240.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.46 (Parallel Sather \050pSather\051 is a parallel extension of the language, developed and in use at IC-) 108 213.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SI.  It extends serial Sather with threads, synchronization, and data distribution.) 108 201.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.37 (pSather differs from concurrent object-oriented languages that try to unify the notions of) 108 177.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (objects and processes by following the) 108 165.29 P
0 F
-0.13 (actors) 279.01 165.29 P
1 F
-0.13 ( model [1].  There can be a grave performance) 303.07 165.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (impact for the implicit synchronization this model imposes on threads even when they do) 108 153.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (not conflict.  While allowing for actors, pSather treats object-orientation and parallelism as) 108 141.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.08 (orthogonal concepts, explicitly exposing the synchronization with new language con-) 108 129.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(structs.) 108 117.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(14) 108 709.51 T
0 F
(Using Sather) 289.05 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.31 (pSather follows the Sather philosophy of shielding programmers from) 108 659.33 P
-0.31 (common sources of) 418.85 659.33 P
-0.44 (bugs.  One of the great difficulties of parallel) 108 647.33 P
-0.44 (programming is avoiding bugs introduced by) 303.94 647.33 P
1.9 (incorrect synchronization.) 108 635.33 P
1.9 (Such bugs cause completely erroneous values to be silently) 227.89 635.33 P
5.83 (propagated,) 108 623.33 P
5.83 (threads to be starved out of computational time, or programs to) 164.15 623.33 P
-0.22 (deadlock.) 108 611.33 P
-0.22 (They can be especially troublesome because they may only manifest) 153.38 611.33 P
-0.22 (themselves) 454.68 611.33 P
1.11 (under timing conditions that rarely occur \050) 108 599.33 P
0 F
1.11 (race) 303.24 599.33 P
1.11 (conditions) 322.03 599.33 P
1 F
1.11 (\051 and may be sensitive enough) 363.88 599.33 P
2.89 (that they don't appear when a) 108 587.33 P
2.89 (program is instrumented for debugging \050) 257.48 587.33 P
0 F
2.89 (heisenbugs) 454.08 587.33 P
1 F
2.89 (\051.) 498.17 587.33 P
-0.32 (pSather makes it easier to write deadlock and starvation free code by) 108 575.33 P
-0.32 (providing structured) 411.38 575.33 P
0.13 (facilities for synchronization.  A) 108 563.33 P
0 F
0.13 (lock) 252.35 563.33 P
0.13 (statement) 270.58 563.33 P
1 F
0.13 ( automatically performs unlocking when its) 310.02 563.33 P
5.75 (body exits, even) 108 551.33 P
5.75 (if this occurs under exceptional conditions.  It automatically) 193.57 551.33 P
1.25 (avoids) 108 539.33 P
1.25 (deadlocks when multiple locks are used together.  It also guarantees) 139.87 539.33 P
1.25 (reasonable) 456.51 539.33 P
(properties of fairness when several threads are contending) 108 527.33 T
(for the same lock.) 369.44 527.33 T
0.42 (pSather allows the programmer to direct data placement.  Machines do not need to have) 108 503.33 P
-0.53 (large latencies to make data placement) 108 491.33 P
-0.53 (important.  Because processor speeds are outpacing) 278.83 491.33 P
2.36 (memory speeds,) 108 479.33 P
2.36 (attention to locality can have a profound effect on the performance) 185.46 479.33 P
0.33 (of) 108 467.33 P
0.33 (even ordinary serial programs.  Some existing languages) 119.29 467.33 P
0.33 (can make life difficult for the) 374.62 467.33 P
0.3 (performance-minded programmer because) 108 455.33 P
0.3 (they do not allow much leeway in expressing) 301.52 455.33 P
1.24 (placement.  For example,) 108 443.33 P
1.24 (extensions allowing the programmer to describe array layout) 225.04 443.33 P
-0.31 (as) 108 431.33 P
-0.31 (block-cyclic is helpful for matrix-oriented code but of no use for) 119.74 431.33 P
-0.31 (general data structures.) 400.75 431.33 P
-0.29 (Because high) 108 407.33 P
-0.29 (performance appears to require explicit human-directed placement,  pSather) 168.22 407.33 P
1.14 (implements a) 108 395.33 P
1.14 (shared memory abstraction using the most efficient facilities of the) 171.53 395.33 P
1.14 (target) 478.18 395.33 P
1.21 (platform available, while allowing the programmer to provide) 108 383.33 P
1.21 (placement directives for) 394.93 383.33 P
0.02 (control and data \050without requiring them\051.) 108 371.33 P
0.02 (This decouples the performance-related place-) 299.17 371.33 P
1.11 (ment from code correctness,) 108 359.33 P
1.11 (making it easy to develop and maintain code enjoying the) 238.26 359.33 P
-0.05 (language) 108 347.33 P
-0.05 (benefits available to serial code.  Parallel programs can be developed) 151.17 347.33 P
-0.05 (on simula-) 457.02 347.33 P
0.05 (tors running on serial machines.  A powerful object-oriented) 108 335.33 P
0.05 (approach is to write both se-) 378 335.33 P
0.6 (rial and parallel machine versions of the) 108 323.33 P
0.6 (fundamental classes in such a way that a user's) 291.61 323.33 P
(code remains unchanged when moving between them.) 108 311.33 T
122 248.2 108 248.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(U) 108 250 T
164.89 248.2 122 248.2 2 L
V
N
4 14.4 Q
(SING) 122 250 T
175.89 248.2 164.89 248.2 2 L
V
N
4 18 Q
(S) 164.89 250 T
227.89 248.2 175.89 248.2 2 L
V
N
4 14.4 Q
(ATHER) 175.89 250 T
1 10 Q
1.15 (At the time of this writing, the only compiler implementing the 1.1 language speci\336ca-) 108 224.33 P
0.93 (tion is available fr) 108 212.33 P
0.93 (om ICSI.   It is fr) 189.7 212.33 P
0.93 (eely available, includes sour) 267.05 212.33 P
0.93 (ce for class libraries and) 394.35 212.33 P
0.49 (the compiler) 108 200.33 P
0.49 (, and compiles into ANSI C.  This compiler has been ported to a wide range) 163.42 200.33 P
(of UNIX and PC operating systems.) 108 188.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(History) 317.45 709.51 T
4 F
(15) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Obtaining the compiler) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(The ICSI Sather 1.1 compiler can be obtained by anonymous ftp at) 108 635.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(ftp.icsi.berkeley.edu:) 144 617.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/pub/sather) 257.4 617.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
1.09 (Other sites also mirror the Sather distribution. The distribution includes installation in-) 108 595.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (structions, \324) 108 583.31 P
5 F
-0.51 (man) 158.93 583.31 P
1 F
-0.46 (\325 pages, the standard libraries and source for the compiler \050in Sather\051.  Doc-) 178.38 583.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.94 (umentation, tutorials and up-to-date information are also available at the Sather WWW) 108 571.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(page:) 108 559.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(http://www.icsi.berkeley.edu/~sather) 144 541.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(ICSI also maintains a library of contributed Sather code at this page.) 108 519.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(There is a newsgroup devoted to Sather:) 108 495.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(comp.lang.sather) 144 477.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.52 (There is also a Sather mailing list if you wish to be informed of Sather releases; to subscribe,) 108 455.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(send email to:) 108 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(sather-request@icsi.berkeley.edu) 144 425.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(It is not necessary to be on the mailing list if you read the Sather newsgroup.) 108 403.31 T
0 0 0 1 0 0 0 K
108 354.95 504 357.98 C
0 0 0 1 0 0 0 K
72 356.46 540 356.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(How do I ask questions?) 108 361.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.27 (If it appears to be a pr) 108 339.29 P
0.27 (oblem that others would have encounter) 206.29 339.29 P
0.27 (ed \050on platform \324X\325, I tried) 386.79 339.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.27 (to install it but the it failed to link with the err) 108 327.29 P
0.27 (or \324Y\325\051, then the newsgr) 312.92 327.29 P
0.27 (oup is a good place) 417.54 327.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.27 (to ask.  If you have pr) 108 315.29 P
0.27 (oblems with the compiler or questions that ar) 205.42 315.29 P
0.27 (e not of general inter-) 407.93 315.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(est, mail to one of) 108 303.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(bug-sather@gnu.org) 144 285.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bug-sather@gnu.org) 144 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(This is also where you want to send bug reports and suggestions for improvements.) 108 253.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
122.99 190.15 108 190.15 2 L
V
0.9 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(H) 108 191.95 T
0 0 0 1 0 0 0 K
178.99 190.15 122.99 190.15 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(ISTORY) 122.99 191.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.04 (Sather is still growing rapidly. The initial Sather compiler \050for \324Version 0\325 of the language\051) 108 164.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.67 (was written in Sather \050bootstrapped by hand-translating to C\051 over the summer of 1990.) 108 152.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.48 (ICSI made the language publicly available \050version 0.1\051 June of 1991 [4].  The project has) 108 140.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.9 (been snowballing since then, with language updates to 0.2 and 0.5, each compiler boot-) 108 128.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (strapped from the previous.  These versions of the language are most indebted to Stephen) 108 116.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(16) 108 709.51 T
0 F
(History) 300.31 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.24 (Omohundro, Chu-Cheow Lim, and Heinz Schmidt.  pSather co-evolved with primary ear-) 108 659.33 P
1.59 (ly contributions by Jerome Feldman, Chu-Cheow Lim, and Franco Mazzanti. The first) 108 647.33 P
1.6 (pSather compiler [3] was implemented by Chu-cheow Lim on the Sequent Symmetry,) 108 635.33 P
(workstations and the CM-5.) 108 623.33 T
-0.61 (Sather 1.0  was a major language change, introducing bound routines, iterators, proper sep-) 108 599.33 P
0.55 (aration of typing and code inclusion, contravariant typing, strongly typed parameteriza-) 108 587.33 P
0.67 (tion, exceptions, stronger optional runtime checks and a new library design [6].  The 1.0) 108 575.33 P
0.16 (compiler was a completely fresh effort by Stephen Omohundro and David Stoutamire.  It) 108 563.33 P
-0.56 (was  written in 0.5 with the 1.0 features introduced as they became functional.  The 1.0 com-) 108 551.33 P
0.64 (piler was first released in the summer of 1994, and Stephen left the project shortly after-) 108 539.33 P
(wards.  The pSather 1.0 design was largely due to Stephan Murer and David Stoutamire.) 108 527.33 T
-0.14 (This document describes Sather 1.1, released the summer of 1996.  That compiler is prima-) 108 503.33 P
1.15 (rily the work of David Stoutamire, Michael Philippsen, Claudio Fleiner and Boris Vay-) 108 491.33 P
0.62 (sman.  Unlike previous specifications, pSather is now an extension that is part of the 1.1) 108 479.33 P
(specification.) 108 467.33 T
-0.43 (A group at the University of Karlsruhe under the direction of Gerhard Goos created a com-) 108 443.33 P
0.88 (piler for Sather 0.1.  The language their compiler supports, Sather-K, diverged from the) 108 431.33 P
-0.34 (ICSI specification when Sather 1.0 was released.  Karlsruhe has created a large class library) 108 419.33 P
(called Karla using Sather-K.  More information about Sather-K can be found at:) 108 407.33 T
5 9 Q
(http://i44www.info.uni-karlsruhe.de/~frick/SatherK) 144 390 T
0 0 0 1 0 0 0 K
108 342.98 504 346 C
0 0 0 1 0 0 0 K
72 344.49 540 344.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Acknowledgments) 108 350 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.43 (Sather has adopted ideas fr) 108 327.31 P
0.43 (om a number of other languages. Its primary debt is to Eif) 229.73 327.31 P
0.43 (fel,) 490.47 327.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.65 (designed by Bertrand Meyer) 108 315.31 P
1.65 (, but it has also been in\337uenced by C, C++, Cecil, CLOS,) 238.66 315.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.32 (CLU, Common Lisp, Dylan, ML, Modula-3, Ober) 108 303.31 P
1.32 (on, Objective C, Pascal, SAIL, School,) 332.99 303.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Self, and Smalltalk.) 108 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.55 (Steve Omohundro was the original driving force behind Sather, keeping the language) 108 267.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.51 (specification from being pillaged by the unwashed hordes and serving as point man for the) 108 255.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.44 (Sather community until he left in 1994.  Chu-Cheow Lim bootstrapped the original compil-) 108 243.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (er and was largely responsible for the original 0.x compiler and the first implementation of) 108 231.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.41 (pSather.  David Stoutamire took over as language tsar and compiler writer after Stephen) 108 219.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(left.) 108 207.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.4 (Sather has been very much a group effort; many, many other people have been involved) 108 183.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.58 (in the language design discussions including: Subutai Ahmad, Krste Asanovic, Jonathan) 108 171.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 (Bachrach, David Bailey, Joachim Beer, Jeff Bilmes, Chris Bitmead, Peter Blicher, John Boy-) 108 159.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (land, Matthew Brand, Henry Cejtin, Alex Cozzi, Richard Durbin, Jerry Feldman, Carl Fey-) 108 147.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.47 (nman, Claudio Fleiner, Ben Gomes, Gerhard Goos, Robert Griesemer, Hermann H\212ertig,) 108 135.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.56 (John Hauser, Ari Huttunen, Roberto Ierusalimschy, Arno Jacobsen, Matt Kennel, Holger) 108 123.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(History) 317.45 709.51 T
4 F
(17) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
1.9 (Klawitter, Phil Kohn, Franz Kurfess,  Franco Mazzanti, Stephan Murer, Michael Phil-) 108 659.33 P
-0.6 (ippsen, Thomas Rauber, Steve Renals, Noemi de La Rocque Rodriguez, Hans Rohnert, Hei-) 108 647.33 P
2.5 (nz Schmidt, Carlo Sequin, Andreas Stolcke, Clemens Szyperski, Martin Trapp, Boris) 108 635.33 P
0.14 (Vaysman, and Bob Weiner.  Countless others have assisted with practical matters such as) 108 623.33 P
(porting the compiler and libraries.) 108 611.33 T
0 0 0 1 0 0 0 K
108 562.98 504 566 C
0 0 0 1 0 0 0 K
72 564.49 540 564.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Refer) 108 570 T
(ences) 135.77 570 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
([1]) 108 542.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4.71 (G. Agha, \324) 129.6 542.31 P
4.71 (\324Actors: A Model of Concurr) 183.22 542.31 P
4.71 (ent Computation in Distributed) 328.32 542.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Systems\325) 129.6 530.31 T
(\325, The MIT Pr) 168.18 530.31 T
(ess, Cambridge, Massachusetts, 1986.) 226.47 530.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([2]) 108 506.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.39 (S. Burson, \324) 129.6 506.31 P
1.39 (\324The Nightmar) 181.64 506.31 P
1.39 (e of C++\325) 248.51 506.31 P
1.39 (\325, Advanced Systems November 1994, pp.) 291.48 506.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.58 (57-62. Excerpted fr) 129.6 494.31 P
0.58 (om) 213.3 494.31 P
0 F
0.58 (The UNIX-Hater's Handbook) 230.67 494.31 P
1 F
0.58 (, IDG Books, San Mateo, CA,) 352.54 494.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1994.) 129.6 482.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([3]) 108 458.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4.43 (C. Lim. \322A Parallel Object-Oriented System for Realizing Reusable and) 129.6 458.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.54 (Ef) 129.6 446.31 P
1.54 (\336cient Data Abstractions,\323 PhD thesis, University of California at Berkeley) 138.86 446.31 P
1.54 (,) 479.9 446.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(October 1993.  A) 129.6 434.31 T
(vailable at the Sather WWW page.) 201.75 434.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([4]) 108 410.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (C. Lim, A. Stolcke.  \324) 129.6 410.31 P
0.09 (\324Sather language design and performance evaluation.\325) 219.35 410.31 P
0.09 (\325  TR-) 458.3 410.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.14 (91-034, International Computer Science Institute, May 1991.  Also available at) 129.6 398.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the Sather WWW page.) 129.6 386.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([5]) 108 362.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.76 (S. Mur) 129.6 362.31 P
0.76 (er) 159.87 362.31 P
0.76 (, S. Omohundr) 167.87 362.31 P
0.76 (o, D. Stoutamir) 234.34 362.31 P
0.76 (e, C. Szyperski, \324) 302.83 362.31 P
0.76 (\324Iteration abstraction in) 377.68 362.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.86 (Sather) 129.6 350.31 P
0.86 (\325) 158.41 350.31 P
0.86 (\325,) 160.82 350.31 P
0 F
0.86 (T) 169.46 350.31 P
0.86 (ransactions on Pr) 174.46 350.31 P
0.86 (ogramming Languages and Systems) 247.28 350.31 P
1 F
0.86 (, V) 395.71 350.31 P
0.86 (ol. 18, No. 1, Jan) 407.68 350.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1996 p. 1-15.  A) 129.6 338.31 T
(vailable at the Sather WWW page.) 195.8 338.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([6]) 108 314.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.48 (S. Omohundr) 129.6 314.31 P
1.48 (o.  \324) 191.03 314.31 P
1.48 (\324The Sather pr) 209.37 314.31 P
1.48 (ogramming language.\325) 274.7 314.31 P
1.48 (\325) 376.18 314.31 P
0 F
1.48 (Dr) 386.92 314.31 P
1.48 (. Dobb\325) 397.85 314.31 P
1.48 (s Journal) 428.05 314.31 P
1 F
1.48 (, 18) 465.92 314.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\0501) 129.6 302.31 T
(1\051 pp. 42-48, October 1993.  A) 137.38 302.31 T
(vailable at the Sather WWW page.) 265.71 302.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([7]) 108 278.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5.14 (C. Szyperski, S. Omohundr) 129.6 278.31 P
5.14 (o, S. Mur) 265.34 278.31 P
5.14 (er) 315.59 278.31 P
5.14 (.  \322Engineering a pr) 323.59 278.31 P
5.14 (ogramming) 430.48 278.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.69 (language: The type and class system of Sather) 129.6 266.31 P
3.69 (,\323 In Jur) 357.25 266.31 P
3.69 (g Gutknecht, ed.,) 399.45 266.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
1.74 (Pr) 129.6 254.31 P
1.74 (ogramming Languages and System Ar) 139.42 254.31 P
1.74 (chitectur) 301.77 254.31 P
1.74 (es) 337.51 254.31 P
1 F
1.74 (, p. 208-227.  Springer V) 345.29 254.31 P
1.74 (erlag,) 457.69 254.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.59 (Lectur) 129.6 242.31 P
2.59 (e Notes in Computer Science 782, November 1993.  A) 158 242.31 P
2.59 (vailable at the) 415.39 242.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sather WWW page.) 129.6 230.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(18) 108 709.51 T
0 F
(Intr) 290.31 709.51 T
(oduction) 306.24 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-1.8 (The Sather 1.1 Speci\336cation) 108 642 S
115 510.2 108 510.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(I) 108 512 T
231.78 510.2 115 510.2 2 L
V
N
4 14.4 Q
(NTRODUCTION) 115 512 T
0 0 0 1 0 0 0 K
108 459.98 504 463 C
0 0 0 1 0 0 0 K
72 461.49 540 461.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(About This Document) 108 467 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.3 (When important terms are first defined, they are formatted like) 108 439.31 P
0 0 0 1 0 0 0 K
408.11 438.31 393.11 438.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.3 (this) 393.11 439.31 P
1 F
0.3 (.  Most sections begin) 408.11 439.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.55 (with an example of a syntactic construct followed by corresponding grammar rules. The) 108 427.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.12 (grammar rules are expressed in a variant of Backus-Naur form. Nonterminal symbols be-) 108 415.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.07 (gin with a letter and are represented by strings of letters and underscores in an italic font.) 108 403.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.56 (The nonterminal symbol on the lefthand side of a grammar rule is followed by a double) 108 391.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (arrow \324) 108 379.31 P
-0.05 (\325 and the right-hand side of the rule. The terminal symbols consist of Sather key-) 150.23 379.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.06 (words and special symbols and are typeset in the) 108 367.31 P
5 F
0.06 (Helvetica) 328.31 367.31 P
1 F
0.06 ( font. Vertical bars \324) 369.43 367.31 P
5 F
0.06 (...|...) 456.01 367.31 P
1 F
0.06 (\325 sepa-) 475.29 367.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.31 (rate alternatives, parentheses \324) 108 355.31 P
5 F
1.46 (\050...\051) 246 355.31 P
1 F
1.31 (\325 are used for grouping, square brackets \324) 261 355.31 P
5 F
1.46 ([...]) 451.06 355.31 P
1 F
1.31 (\325 enclose) 464.96 355.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.39 (optional clauses and braces \324) 108 343.31 P
5 F
1.55 ({...}) 239.7 343.31 P
1 F
1.39 (\325 enclose clauses which may be repeated zero or more) 254.72 343.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.62 (times. Multi-line examples are indented after the first line, and an ellipsis \324) 108 331.31 P
5 F
-0.68 (...) 428.83 331.31 P
1 F
-0.62 (\325 indicates code) 437.17 331.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.29 (that has been left out for clarity.  Semicolons are used to separate examples only if, when) 108 319.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (taken together, the examples could be a legitimate section of Sather code.  Trailing semico-) 108 307.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lons, which are optional, are not shown.) 108 295.31 T
0 0 0 1 0 0 0 K
108 246.95 504 249.98 C
0 0 0 1 0 0 0 K
72 248.46 540 248.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Basic Concepts) 108 253.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0 (Data structures in Sather are constructed from) 108 226.29 P
0 0 0 1 0 0 0 K
341.6 225.29 314.57 225.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0 (objects) 314.57 226.29 P
1 F
-0 (, each of which has a specific) 341.6 226.29 P
0 0 0 1 0 0 0 K
504 225.29 470.86 225.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0 (concrete) 470.86 226.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
125.22 213.29 108 213.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.49 (type) 108 214.29 P
1 F
0.49 ( that determines the operations that may be performed on it.) 125.22 214.29 P
0 0 0 1 0 0 0 K
461.75 213.29 402.86 213.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.49 (Abstract types) 402.86 214.29 P
1 F
0.49 ( specify a) 461.75 214.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (set of operations without providing an implementation and correspond to sets of concrete) 108 202.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.47 (types. The implementation of concrete types is defined by textual units called) 108 190.29 P
0 0 0 1 0 0 0 K
484.67 189.29 457.82 189.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.47 (classes) 457.82 190.29 P
1 F
0.47 (; ab-) 484.67 190.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (stract types are specified by textual units called) 108 178.29 P
0 0 0 1 0 0 0 K
377.99 177.29 316.91 177.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.29 (abstract classes) 316.91 178.29 P
1 F
-0.29 (.   Sather programs consist of) 377.99 178.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.45 (classes and abstract class specifications. Each Sather) 108 166.29 P
0 0 0 1 0 0 0 K
374.5 165.29 342.65 165.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.45 (variable) 342.65 166.29 P
1 F
0.45 ( has a) 374.5 166.29 P
0 0 0 1 0 0 0 K
456.54 165.29 403.41 165.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.45 (declared type) 403.41 166.29 P
1 F
0.45 ( which de-) 456.54 166.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(termines the types of objects it may hold.) 108 154.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (Classes define the following) 108 130.29 P
0 0 0 1 0 0 0 K
266.39 129.29 234.72 129.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.03 (features) 234.72 130.29 P
1 F
-0.03 (:) 266.39 130.29 P
0 0 0 1 0 0 0 K
310.43 129.29 271.36 129.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.03 (attributes) 271.36 130.29 P
1 F
-0.03 ( which make up the internal state of objects,) 310.43 130.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
138 117.29 108 117.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.28 (shareds) 108 118.29 P
1 F
0.28 ( and) 138 118.29 P
0 0 0 1 0 0 0 K
198.99 117.29 160.48 117.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.28 (constants) 160.48 118.29 P
1 F
0.28 ( which are shared by all objects of a type, and) 198.99 118.29 P
0 0 0 1 0 0 0 K
438.64 117.29 405.3 117.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.28 (methods) 405.3 118.29 P
1 F
0.28 ( which may be) 438.64 118.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
139.93 376.08 150.23 387.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 139.34 379.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Lexical Structur) 298.04 709.51 T
(e) 364.07 709.51 T
4 F
(19) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.26 (either) 108 659.33 P
169.1 658.33 135.76 658.33 2 L
V
0.5 H
0 Z
N
0 F
-0.26 (routines) 135.76 659.33 P
1 F
-0.26 ( or) 169.1 659.33 P
216.86 658.33 182.98 658.33 2 L
V
N
0 F
-0.26 (iterators) 182.98 659.33 P
1 F
-0.26 (. Any features are by default) 216.86 659.33 P
368.4 658.33 343.58 658.33 2 L
V
N
0 F
-0.26 (public) 343.58 659.33 P
1 F
-0.26 (, but may be declared) 368.4 659.33 P
493.04 658.33 464.71 658.33 2 L
V
N
0 F
-0.26 (private) 464.71 659.33 P
1 F
-0.26 ( to) 493.04 659.33 P
-0.14 (allow only the class in which it appears access to it.  An attribute or shared may instead be) 108 647.33 P
-0.33 (declared) 108 635.33 P
183.27 634.33 148.27 634.33 2 L
V
N
0 F
-0.33 (readonly) 148.27 635.33 P
1 F
-0.33 ( to allow only the class in which it appears to modify it. Accessor routines) 183.27 635.33 P
-0.22 (are automatically defined for reading or writing attributes, shareds, and constants. The set) 108 623.33 P
0.38 (of non-private methods in a class defines the) 108 611.33 P
345.4 610.33 310.77 610.33 2 L
V
N
0 F
0.38 (interface) 310.77 611.33 P
1 F
0.38 ( of the corresponding type. Method) 345.4 611.33 P
0.1 (definitions consist of) 108 599.33 P
245.84 598.33 202.51 598.33 2 L
V
N
0 F
0.1 (statements) 202.51 599.33 P
1 F
0.1 (;  for their construction) 245.84 599.33 P
396.01 598.33 349.89 598.33 2 L
V
N
0 F
0.1 (expressions) 349.89 599.33 P
1 F
0.1 ( are used. There are spe-) 396.01 599.33 P
(cial) 108 587.33 T
198.27 586.33 125.76 586.33 2 L
V
N
0 F
(literal expressions) 125.76 587.33 T
1 F
( for boolean, character, string, integer, and floating point objects.) 198.27 587.33 T
-0.29 (Certain conditions are described as) 108 563.33 P
308.02 562.33 264.15 562.33 2 L
V
N
0 F
-0.29 (fatal errors) 264.15 563.33 P
1 F
-0.29 (. These conditions should never occur in cor-) 308.02 563.33 P
-0.48 (rect programs and all implementations of Sather must be able to detect them. For efficiency) 108 551.33 P
0.09 (reasons, however, implementations may provide the option of disabling checking for cer-) 108 539.33 P
(tain conditions.) 108 527.33 T
119 464.2 108 464.2 2 L
V
0.9 H
N
4 18 Q
(L) 108 466 T
177.9 464.2 119 464.2 2 L
V
N
4 14.4 Q
(EXICAL) 119 466 T
188.9 464.2 177.9 464.2 2 L
V
N
4 18 Q
(S) 177.9 466 T
270.5 464.2 188.9 464.2 2 L
V
N
4 14.4 Q
(TRUCTURE) 188.9 466 T
1 10 Q
1.91 (The character set used in sour) 108 440.33 P
1.91 (ce \336les is de\336ned by the Sather implementation, but it) 249.14 440.33 P
0.22 (must include at least the characters which appear in the syntactic constr) 108 428.33 P
0.22 (ucts in this speci-) 427.2 428.33 P
1.49 (\336cation. Sather implementations may be based on ASCII, but this is not r) 108 416.33 P
1.49 (equir) 446.77 416.33 P
1.49 (ed. The) 469.87 416.33 P
0.99 (case of characters in sour) 108 404.33 P
0.99 (ce \336les is signi\336cant. All syntactic constr) 222.34 404.33 P
0.99 (ucts except identi\336ers) 405.77 404.33 P
0.27 (and certain literals may be separated by an arbitrary number of) 108 392.33 P
436.64 391.33 393.14 391.33 2 L
V
0.5 H
N
0 F
0.27 (whitespace) 393.14 392.33 P
1 F
0.27 ( characters and) 436.64 392.33 P
148.74 379.33 108 379.33 2 L
V
N
0 F
1.91 (comments) 108 380.33 P
1 F
1.91 (. The seven whitespace characters ar) 148.74 380.33 P
1.91 (e space, tab, newline, vertical tab, back-) 318.56 380.33 P
0.43 (space, carriage r) 108 368.33 P
0.43 (eturn, and form feed. Sather comments consist of two dashes \324) 180.21 368.33 P
5 F
0.48 (--) 458.83 368.33 P
1 F
0.43 (\325 outside) 465.49 368.33 P
(of a string \050page 41\051  or character literal \050page 40\051 and all following text until a newline.) 108 356.33 T
0.52 (Sather) 108 332.33 P
179.66 331.33 139.09 331.33 2 L
V
N
0 F
0.52 (identifiers) 139.09 332.33 P
1 F
0.52 ( are used to name class features, method arguments, and local variables.) 179.66 332.33 P
-0.62 (Most consist of letters, decimal digits, and the underscore character, and begin with a letter.) 108 320.33 P
-0.52 (Iterator names additionally end with the \324) 108 308.33 P
5 F
-0.58 (!) 289.25 308.33 P
1 F
-0.52 (\325 character. Abstract type names and class names) 292.03 308.33 P
-0.42 (are similar, but the letters must be uppercase and abstract type names begin with \324) 108 296.33 P
5 F
-0.47 ($) 465.6 296.33 P
1 F
-0.42 (\325. There) 471.16 296.33 P
1.51 (are no restrictions on the lengths of Sather identifiers or class names. Identifiers, class) 108 284.33 P
-0.24 (names, and keywords must be followed by a character other than a letter, decimal digit, or) 108 272.33 P
(underscore. This may force the use of white-space after an identifier.) 108 260.33 T
0 F
( identifier) 129.6 242.33 T
( letter {letter) 181.59 242.33 T
5 F
(|) 234.63 242.33 T
0 F
( decimal_digit) 237.24 242.33 T
5 F
(|) 296.86 242.33 T
(_) 301.96 242.33 T
0 F
(}) 307.52 242.33 T
( uppercase_identifier) 129.6 224.33 T
( uppercase_letter {uppercase_letter) 226.21 224.33 T
5 F
(|) 368.52 224.33 T
0 F
( decimal_digit) 371.12 224.33 T
5 F
(|) 430.76 224.33 T
(_) 435.86 224.33 T
0 F
(}) 441.42 224.33 T
( abstract_class_name) 129.6 206.33 T
5 F
($) 230.16 206.33 T
0 F
( uppercase_identifier) 235.73 206.33 T
( iter_name) 129.6 188.33 T
( [identifier]) 185.46 188.33 T
5 F
(!) 231.3 188.33 T
0 F
( letter) 129.6 170.33 T
( lowercase_letter) 166.01 170.33 T
5 F
(|) 235.63 170.33 T
0 F
( uppercase_letter) 238.24 170.33 T
-0.51 ( lowercase_letter) 129.6 152.33 P
5 F
-0.57 (a) 210.48 152.33 P
-0.57 (|) 218.03 152.33 P
-0.57 (b) 222.61 152.33 P
-0.57 (|) 230.16 152.33 P
-0.57 (c) 234.74 152.33 P
-0.57 (|) 241.73 152.33 P
-0.57 (d) 246.31 152.33 P
-0.57 (|) 253.86 152.33 P
-0.57 (e) 258.45 152.33 P
-0.57 (|) 265.99 152.33 P
-0.57 (f) 270.58 152.33 P
-0.57 (|) 275.34 152.33 P
-0.57 (g) 279.93 152.33 P
-0.57 (|) 287.47 152.33 P
-0.57 (h) 292.06 152.33 P
-0.57 (|) 299.6 152.33 P
-0.57 (i) 304.19 152.33 P
-0.57 (|) 308.39 152.33 P
-0.57 (j) 312.98 152.33 P
-0.57 (|) 317.18 152.33 P
-0.57 (k) 321.77 152.33 P
-0.57 (|) 328.76 152.33 P
-0.57 (l) 333.34 152.33 P
-0.57 (|) 337.55 152.33 P
-0.57 (m) 342.13 152.33 P
-0.57 (|) 352.45 152.33 P
-0.57 (n) 357.03 152.33 P
-0.57 (|) 364.58 152.33 P
-0.57 (o) 369.16 152.33 P
-0.57 (|) 376.71 152.33 P
-0.57 (p) 381.29 152.33 P
-0.57 (|) 388.84 152.33 P
-0.57 (q) 393.42 152.33 P
-0.57 (|) 400.97 152.33 P
-0.57 (r) 405.56 152.33 P
-0.57 (|) 410.87 152.33 P
-0.57 (s) 415.46 152.33 P
-0.57 (|) 422.44 152.33 P
-0.57 (t) 427.03 152.33 P
-0.57 (|) 431.79 152.33 P
-0.57 (u) 436.38 152.33 P
-0.57 (|) 443.92 152.33 P
-0.57 (v) 448.51 152.33 P
-0.57 (|) 455.49 152.33 P
-0.57 (w) 460.08 152.33 P
-0.57 (|) 469.29 152.33 P
-0.57 (x) 473.87 152.33 P
-0.57 (|) 480.86 152.33 P
-0.57 (y) 485.44 152.33 P
-0.57 (|) 492.43 152.33 P
-0.57 (z) 497.01 152.33 P
0 F
-0.1 ( uppercase_letter) 129.6 134.33 P
5 F
-0.11 (A) 212.86 134.33 P
-0.11 (|) 221.93 134.33 P
-0.11 (B) 226.94 134.33 P
-0.11 (|) 236.01 134.33 P
-0.11 (C) 241.01 134.33 P
-0.11 (|) 250.64 134.33 P
-0.11 (D) 255.64 134.33 P
-0.11 (|) 265.27 134.33 P
-0.11 (E) 270.27 134.33 P
-0.11 (|) 279.35 134.33 P
-0.11 (F) 284.35 134.33 P
-0.11 (|) 292.86 134.33 P
-0.11 (G) 297.87 134.33 P
-0.11 (|) 308.05 134.33 P
-0.11 (H) 313.06 134.33 P
-0.11 (|) 322.68 134.33 P
-0.11 (I) 327.68 134.33 P
-0.11 (|) 332.87 134.33 P
-0.11 (J) 337.87 134.33 P
-0.11 (|) 345.28 134.33 P
-0.11 (K) 350.28 134.33 P
-0.11 (|) 359.36 134.33 P
-0.11 (L) 364.36 134.33 P
-0.11 (|) 372.32 134.33 P
-0.11 (M) 377.33 134.33 P
-0.11 (|) 388.06 134.33 P
-0.11 (N) 393.07 134.33 P
-0.11 (|) 402.69 134.33 P
-0.11 (O) 407.69 134.33 P
-0.11 (|) 417.88 134.33 P
-0.11 (P) 422.88 134.33 P
-0.11 (|) 431.96 134.33 P
-0.11 (Q) 436.96 134.33 P
-0.11 (|) 447.14 134.33 P
-0.11 (R) 452.15 134.33 P
-0.11 (|) 461.77 134.33 P
-0.11 (S) 466.78 134.33 P
-0.11 (|) 475.85 134.33 P
-0.11 (T) 480.86 134.33 P
-0.11 (|) 489.37 134.33 P
-0.11 (U) 494.37 134.33 P
(|) 151.2 122.33 T
(V) 156.3 122.33 T
(|) 165.47 122.33 T
(W) 170.57 122.33 T
(|) 182.51 122.33 T
(X) 187.61 122.33 T
(|) 196.78 122.33 T
(Y) 201.88 122.33 T
(|) 211.05 122.33 T
(Z) 216.15 122.33 T
0 0 0 1 0 0 0 K
171.28 239.11 181.58 250.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 170.69 242.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
215.91 221.11 226.21 232.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 215.32 224.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
217.36 203.11 227.67 214.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 216.77 206.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
175.16 185.11 185.46 196.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 174.57 188.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
155.71 167.11 166.02 178.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 155.12 170.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
198.19 149.11 208.5 160.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 197.6 152.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
200.15 131.11 210.45 142.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 199.56 134.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(20) 108 709.51 T
0 F
(Objects, T) 261.97 709.51 T
(ypes and Classes) 302.53 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 X
( decimal_digit) 129.6 659.33 T
5 F
(0) 202.04 659.33 T
(|) 210.1 659.33 T
(1) 215.2 659.33 T
(|) 223.26 659.33 T
(2) 228.35 659.33 T
(|) 236.41 659.33 T
(3) 241.51 659.33 T
(|) 249.57 659.33 T
(4) 254.68 659.33 T
(|) 262.73 659.33 T
(5) 267.83 659.33 T
(|) 275.89 659.33 T
(6) 280.99 659.33 T
(|) 289.05 659.33 T
(7) 294.15 659.33 T
(|) 302.21 659.33 T
(8) 307.32 659.33 T
(|) 315.38 659.33 T
(9) 320.48 659.33 T
1 F
0.25 (Sather) 108 635.33 P
176.6 634.33 138.82 634.33 2 L
V
0.5 H
0 Z
N
0 F
0.25 (keywords) 138.82 635.33 P
1 F
0.25 ( are used to identify the fundamental syntactic constructs and may not be) 176.6 635.33 P
0.4 (used as identifiers. Some keywords are reserved for language extensions  \050page 68\051.  The) 108 623.33 P
(keywords are:) 108 611.33 T
0 F
( keyword) 129.6 593.33 T
5 F
(abstract | and | any | assert | attr | bind | break! | builtin | case | class) 181.29 593.33 T
(| clusters | clusters! | cohort | const | else | elsif | end | exception | external) 151.2 581.33 T
(| false | far | fork | guard | if | immutable | inout | include | initial | is | ITER) 151.2 569.33 T
-0.56 (| lock | loop | near | new | once | or | out | par | parloop | post | pre | private | protect) 151.2 557.33 P
(| quit | raise | readonly | result | return | ROUT | SAME | self | shared | sync) 151.2 545.33 T
(| then | true | typecase | unlock | until! | void | when | while! | with | yield) 151.2 533.33 T
1 F
(The syntax also makes use of the following) 108 509.33 T
361.99 508.33 300.23 508.33 2 L
V
N
0 F
(special symbols) 300.23 509.33 T
1 F
(:) 361.99 509.33 T
0 F
( special_symbol) 129.6 491.33 T
5 F
(\050) 207.77 491.33 T
(|) 213.6 491.33 T
(\051) 218.71 491.33 T
(|) 224.54 491.33 T
([) 229.63 491.33 T
(|) 234.91 491.33 T
(]) 240.01 491.33 T
(|) 245.29 491.33 T
({) 250.4 491.33 T
(|) 256.23 491.33 T
(}) 261.33 491.33 T
(|) 267.17 491.33 T
(,) 272.27 491.33 T
(|) 277.55 491.33 T
(.) 282.65 491.33 T
(|) 287.93 491.33 T
(;) 293.04 491.33 T
(|) 298.32 491.33 T
(:) 303.42 491.33 T
(|) 308.7 491.33 T
($) 313.8 491.33 T
(|) 321.86 491.33 T
(_) 326.95 491.33 T
(|) 335.02 491.33 T
(+) 340.11 491.33 T
(|) 348.45 491.33 T
(-) 353.55 491.33 T
(|) 359.39 491.33 T
(*) 364.48 491.33 T
(|) 370.88 491.33 T
(/) 375.98 491.33 T
(|) 381.26 491.33 T
(=) 386.36 491.33 T
(|) 394.7 491.33 T
(<) 399.8 491.33 T
(|) 408.14 491.33 T
(>) 413.23 491.33 T
(|) 421.58 491.33 T
(#) 426.67 491.33 T
(|) 434.73 491.33 T
(^) 439.83 491.33 T
(|) 447.02 491.33 T
(%) 452.12 491.33 T
(|) 463.52 491.33 T
(~) 468.61 491.33 T
(|) 476.95 491.33 T
(|) 482.05 491.33 T
(|) 487.15 491.33 T
(!) 492.26 491.33 T
(|) 151.2 479.33 T
(/=) 156.3 479.33 T
(|) 167.42 479.33 T
(<=) 172.52 479.33 T
(|) 186.7 479.33 T
(>=) 191.8 479.33 T
(|) 205.98 479.33 T
(:=) 211.08 479.33 T
(|) 222.2 479.33 T
(::) 227.3 479.33 T
(|) 235.36 479.33 T
(->) 240.46 479.33 T
(|) 252.13 479.33 T
(@ | :-) 257.23 479.33 T
122.99 416.2 108 416.2 2 L
V
0.9 H
N
4 18 Q
(O) 108 418 T
175.8 416.2 122.99 416.2 2 L
V
N
4 14.4 Q
(BJECTS) 122.99 418 T
184.8 416.2 175.8 416.2 2 L
V
N
4 18 Q
(,) 175.8 418 T
196.8 416.2 184.8 416.2 2 L
V
N
(T) 184.8 418 T
237.3 416.2 196.8 416.2 2 L
V
N
4 14.4 Q
(YPES) 196.8 418 T
277 416.2 237.3 416.2 2 L
V
N
(AND) 237.3 418 T
289.99 416.2 277 416.2 2 L
V
N
4 18 Q
(C) 277 418 T
345.19 416.2 289.99 416.2 2 L
V
N
4 14.4 Q
(LASSES) 289.99 418 T
1 10 Q
0.17 (Sather pr) 108 392.33 P
0.17 (ograms ar) 148.51 392.33 P
0.17 (e textually made up of) 192.99 392.33 P
322.39 391.33 295.55 391.33 2 L
V
0.5 H
N
0 F
0.17 (classes) 295.55 392.33 P
1 F
0.17 (.  Classes ar) 322.39 392.33 P
0.17 (e used to de\336ne the code and) 374.17 392.33 P
0.47 (storage that make up) 108 380.33 P
226.82 379.33 205.71 379.33 2 L
V
N
0 F
0.47 (types) 205.71 380.33 P
1 F
0.47 (.  Each) 226.82 380.33 P
282.75 379.33 259.61 379.33 2 L
V
N
0 F
0.47 (object) 259.61 380.33 P
1 F
0.47 ( is an instance of a type.  T) 282.75 380.33 P
0.47 (ypes can be thought of) 401.93 380.33 P
(as r) 108 368.33 T
(epr) 123.51 368.33 T
(esenting sets of objects at r) 138.08 368.33 T
(untime.  Objects never change their type.) 255.28 368.33 T
1 (Ther) 108 350.33 P
1 (e ar) 128.51 350.33 P
1 (e four kinds of objects in Sather:) 145.57 350.33 P
339.36 349.33 296.39 349.33 2 L
V
N
0 F
1 (immutable) 296.39 350.33 P
1 F
1 ( \050) 339.36 350.33 P
0 F
1 (e.g.) 346.19 350.33 P
1 F
1 ( integers\051,) 360.08 350.33 P
443.98 349.33 408.23 349.33 2 L
V
N
0 F
1 (reference) 408.23 350.33 P
1 F
1 ( \050) 443.98 350.33 P
0 F
1 (e.g.) 450.8 350.33 P
1 F
1 ( strings\051,) 464.69 350.33 P
140.41 337.33 108 337.33 2 L
V
N
0 F
0.49 (closures) 108 338.33 P
1 F
0.49 (, and) 140.41 338.33 P
198.59 337.33 165.81 337.33 2 L
V
N
0 F
0.49 (external) 165.81 338.33 P
1 F
0.49 ( \050used to r) 198.59 338.33 P
0.49 (epr) 244.54 338.33 P
0.49 (esent entities in other languages\051. Ther) 259.11 338.33 P
0.49 (e ar) 432.18 338.33 P
0.49 (e four corr) 448.73 338.33 P
0.49 (e-) 495.88 338.33 P
1.14 (sponding concr) 108 326.33 P
1.14 (ete types:) 177.5 326.33 P
266.95 325.33 223.98 325.33 2 L
V
N
0 F
1.14 (immutable) 223.98 326.33 P
1 F
1.14 (,) 266.95 326.33 P
308.83 325.33 273.08 325.33 2 L
V
N
0 F
1.14 (reference) 273.08 326.33 P
1 F
1.14 (,) 308.83 326.33 P
343.49 325.33 314.97 325.33 2 L
V
N
0 F
1.14 (closure) 314.97 326.33 P
1 F
1.14 (, and) 343.49 326.33 P
402.98 325.33 370.2 325.33 2 L
V
N
0 F
1.14 (external) 370.2 326.33 P
1 F
1.14 ( types.  Ther) 402.98 326.33 P
1.14 (e ar) 460.76 326.33 P
1.14 (e also) 477.96 326.33 P
2.09 (abstract types, which r) 108 314.33 P
2.09 (epr) 213.92 314.33 P
2.09 (esent sets of concr) 228.49 314.33 P
2.09 (ete types. Immutable, r) 314.41 314.33 P
2.09 (efer) 422.21 314.33 P
2.09 (ence, external,) 438.89 314.33 P
0.1 (and abstract types ar) 108 302.33 P
0.1 (e de\336ned textually by) 200.04 302.33 P
341.85 301.33 298.88 301.33 2 L
V
N
0 F
0.1 (immutable) 298.88 302.33 P
1 F
0.1 (,) 341.85 302.33 P
382.7 301.33 346.95 301.33 2 L
V
N
0 F
0.1 (reference) 346.95 302.33 P
1 F
0.1 (,) 382.7 302.33 P
420.58 301.33 387.8 301.33 2 L
V
N
0 F
0.1 (external) 387.8 302.33 P
1 F
0.1 (, and) 420.58 302.33 P
477.24 301.33 445.22 301.33 2 L
V
N
0 F
0.1 (abstract) 445.22 302.33 P
1 F
0.1 ( class-) 477.24 302.33 P
1.62 (es.) 108 290.33 P
155.53 289.33 127.76 289.33 2 L
V
N
0 F
1.62 (Partial) 127.76 290.33 P
1 F
1.62 ( classes de\336ne code that does not have corr) 155.53 290.33 P
1.62 (esponding objects or types, and) 358.05 290.33 P
(may be included by other classes to obtain implementation.) 108 278.33 T
0.45 (The) 108 254.33 P
171.19 253.33 127.69 253.33 2 L
V
N
0 F
0.45 (type graph) 127.69 254.33 P
1 F
0.45 ( for a program is a directed acyclic graph that is constructed from the pro-) 171.19 254.33 P
0.43 (gram\325s source text. Its nodes are types and its edges represent the) 108 242.33 P
435.86 241.33 404.56 241.33 2 L
V
N
0 F
0.43 (subtype) 404.56 242.33 P
1 F
0.43 ( relationship. If) 435.86 242.33 P
-0 (there is a path in this graph from a type) 108 230.33 P
0 F
-0 (t) 285.32 230.33 P
1 8 Q
-0 (1) 288.64 227.83 P
1 10 Q
-0 ( to a type) 292.64 230.33 P
0 F
-0 (t) 335.98 230.33 P
1 8 Q
-0 (2) 339.3 227.83 P
1 10 Q
-0 (, we say that) 343.3 230.33 P
0 F
-0 (t) 401.07 230.33 P
0 8 Q
-0 (2) 404.39 227.83 P
1 10 Q
-0 ( is a subtype of) 408.39 230.33 P
0 F
-0 (t) 477.24 230.33 P
1 8 Q
-0 (1) 480.57 227.83 P
1 10 Q
-0 ( and) 484.57 230.33 P
-0.6 (that) 108 218.33 P
0 F
-0.6 (t) 127.24 218.33 P
1 8 Q
-0.48 (1) 130.57 215.83 P
1 10 Q
-0.6 ( is a) 134.57 218.33 P
191.85 217.33 152.4 217.33 2 L
V
N
0 F
-0.6 (supertype) 152.4 218.33 P
1 F
-0.6 ( of) 191.85 218.33 P
0 F
-0.6 (t) 204.43 218.33 P
0 8 Q
-0.48 (2) 207.76 215.83 P
1 10 Q
-0.6 (. Subtyping is reflexive; any type is a subtype of itself. Only abstract) 211.76 218.33 P
-0.22 (types and method closures can be supertypes \050see pages 23 and 55\051; closure types can only) 108 206.33 P
(be supertypes of other closure types.) 108 194.33 T
0.55 (Every Sather variable has a declared type. The fundamental typing rule is:) 108 170.33 P
0 F
0.55 (An object can) 447.91 170.33 P
-0.35 (only be held by a variable if the object\325s type is a subtype of the variable\325s type.) 108 158.33 P
1 F
-0.35 ( It is not possible for) 416.12 158.33 P
(a program which compiles to violate this rule \050) 108 146.33 T
0 F
(i.e.) 314.62 146.33 T
1 F
( Sather is) 326.29 146.33 T
443.9 145.33 369.01 145.33 2 L
V
N
0 F
(statically type-safe) 369.01 146.33 T
1 F
(\051.) 443.9 146.33 T
0 0 0 1 0 0 0 K
189.23 656.11 199.54 667.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 188.64 659.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
168.48 590.11 178.79 601.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 167.89 593.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
194.97 488.11 205.27 499.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 194.38 491.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Objects, T) 279.11 709.51 T
(ypes and Classes) 319.67 709.51 T
4 F
(21) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Signatur) 108 658 T
(es) 153.8 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.07 (Operations are performed on objects by calling) 108 630.31 P
0 0 0 1 0 0 0 K
350.58 629.31 317.25 629.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.07 (methods) 317.25 630.31 P
1 F
-0.07 ( on them, which are either) 350.58 630.31 P
0 0 0 1 0 0 0 K
504 629.31 470.66 629.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.07 (routines) 470.66 630.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.12 (\050page 31\051 or) 108 618.31 P
0 0 0 1 0 0 0 K
196.45 617.31 162.57 617.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.12 (iterators) 162.57 618.31 P
1 F
-0.12 ( \050page 32\051. All method arguments have a) 196.45 618.31 P
0 0 0 1 0 0 0 K
398.72 617.31 377.61 617.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.12 (mode) 377.61 618.31 P
1 F
-0.12 (, which is one of:) 398.72 618.31 P
0 0 0 1 0 0 0 K
483.29 617.31 474.95 617.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.12 (in) 474.95 618.31 P
1 F
-0.12 (,) 483.29 618.31 P
0 0 0 1 0 0 0 K
501.5 617.31 488.17 617.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.12 (out) 488.17 618.31 P
1 F
-0.12 (,) 501.5 618.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
129.67 605.31 108 605.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.14 (inout) 108 606.31 P
1 F
-0.14 (, or) 129.67 606.31 P
0 0 0 1 0 0 0 K
164.26 605.31 146.3 605.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.14 (once) 146.3 606.31 P
1 F
-0.14 (. The) 164.26 606.31 P
0 0 0 1 0 0 0 K
226.56 605.31 188.22 605.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.14 (signature) 188.22 606.31 P
1 F
-0.14 ( of a method consists of its name, the modes and types of its ar-) 226.56 606.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.19 (guments, if any, and its return type, if any.  Abstract classes specify a set of) 108 594.31 P
0 0 0 1 0 0 0 K
504 593.31 444.29 593.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.19 (abstract signa-) 444.29 594.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
128.56 581.31 108 581.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.95 (tures) 108 582.31 P
1 F
0.95 (, an interface without an implementation.  Concrete classes specify a set of) 128.56 582.31 P
0 0 0 1 0 0 0 K
504 581.31 470.86 581.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.95 (concrete) 470.86 582.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
150.23 569.31 108 569.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(signatures) 108 570.31 T
1 F
( which do define an implementation.) 150.23 570.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(We say that the method signature) 108 546.31 T
0 F
(f) 259.63 546.31 T
0 0 0 1 0 0 0 K
298.61 545.31 264.91 545.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(conflicts) 264.91 546.31 T
1 F
( with) 298.61 546.31 T
0 F
(g) 323.94 546.31 T
1 F
( when) 328.94 546.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(1.) 108 528.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(f) 121.54 528.31 T
1 F
( and) 124.32 528.31 T
0 F
(g) 146.25 528.31 T
1 F
( have the same name and number of ar) 151.25 528.31 T
(guments,) 323.12 528.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(2.) 108 513.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(f) 121.54 513.31 T
1 F
( and) 124.32 513.31 T
0 F
(g) 146.25 513.31 T
1 F
( either both r) 151.25 513.31 T
(eturn a value or neither does,) 208.11 513.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(3.) 108 498.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(each ar) 121.54 498.31 T
(gument mode in) 152.86 498.31 T
0 F
(f) 228.57 498.31 T
1 F
( is the same as the corr) 231.35 498.31 T
(esponding mode in) 330.96 498.31 T
0 F
(g) 419.1 498.31 T
1 F
(, or the mode in) 424.1 498.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(one is \324in\325 while the other is \324once\325,) 121.54 486.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(4.) 108 471.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(and each ar) 121.54 471.31 T
(gument type in) 172.29 471.31 T
0 F
(f) 242.43 471.31 T
1 F
( is neither a subtype nor a supertype of the corr) 245.21 471.31 T
(esponding) 454.27 471.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 121.54 459.31 T
(gument type in) 130.31 459.31 T
0 F
(g) 200.45 459.31 T
1 F
(, unless both ar) 205.45 459.31 T
(e concr) 272.32 459.31 T
(ete.) 303.54 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.01 (This rule for signature conflict defines which methods may be overloaded \050page 44\051.) 108 435.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (Sather permits overloading based on the number, type and mode of arguments, as well as) 108 423.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.02 (whether or not a return value is present.  However, overloading is not permitted between) 108 411.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324in\325 and \324once\325 modes.) 108 399.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(We say that the method signature) 108 375.31 T
0 F
(f) 259.63 375.31 T
0 0 0 1 0 0 0 K
301.76 374.31 264.91 374.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(conforms) 264.91 375.31 T
1 F
( to) 301.76 375.31 T
0 F
(g) 315.48 375.31 T
1 F
( when) 320.48 375.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(1.) 108 357.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(f) 121.54 357.31 T
1 F
( and) 124.32 357.31 T
0 F
(g) 146.25 357.31 T
1 F
( have the same name and number of ar) 151.25 357.31 T
(guments,) 323.12 357.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(2.) 108 342.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(f) 121.54 342.31 T
1 F
( and) 124.32 342.31 T
0 F
(g) 146.25 342.31 T
1 F
( either both r) 151.25 342.31 T
(eturn a value or neither does,) 208.11 342.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(3.) 108 327.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(the mode of each ar) 121.54 327.31 T
(gument is the same \050in, out, inout or once\051,) 208.21 327.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(4.) 108 312.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
230.13 311.31 121.54 311.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(contravariant conformance) 121.54 312.31 T
1 F
(:) 230.13 312.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for any \324in\325 or \324once\325 ar) 121.54 300.31 T
(guments, the type in) 221.7 300.31 T
0 F
(g) 314.95 300.31 T
1 F
( is a subtype of the type in) 319.95 300.31 T
0 F
(f) 438.53 300.31 T
1 F
(;) 441.31 300.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for any \324inout\325 ar) 121.54 288.31 T
(guments, the type in) 195.97 288.31 T
0 F
(f) 289.22 288.31 T
1 F
( is the same type as in) 292 288.31 T
0 F
(g) 390.97 288.31 T
1 F
(;) 395.97 288.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for any \324out\325 ar) 121.54 276.31 T
(guments, the type in) 187.24 276.31 T
0 F
(f) 280.49 276.31 T
1 F
( is a subtype of the type in) 283.27 276.31 T
0 F
(g) 401.85 276.31 T
1 F
(; and) 406.85 276.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if it has one, the r) 121.54 264.31 T
(eturn type of) 197.72 264.31 T
0 F
(f) 257.48 264.31 T
1 F
( is a subtype of the r) 260.26 264.31 T
(eturn type of) 349.26 264.31 T
0 F
(g) 409.02 264.31 T
1 F
(.) 414.02 264.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.1 (The set of methods that may be called on a type is called the interface of that type. A type) 108 240.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (interface may not contain conflicting signatures. An interface) 108 228.31 P
0 F
-0.19 (I) 378.44 228.31 P
1 8 Q
-0.15 (1) 381.77 225.81 P
1 10 Q
-0.19 ( conforms to an interface) 385.77 228.31 P
0 F
-0.19 (I) 496.67 228.31 P
1 8 Q
-0.15 (2) 500 225.81 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.6 (if for every method) 108 216.31 P
0 F
-0.6 (f) 193.6 216.31 P
1 8 Q
-0.48 (2) 196.38 213.81 P
1 10 Q
-0.6 ( in) 200.38 216.31 P
0 F
-0.6 (I) 212.92 216.31 P
1 8 Q
-0.48 (2) 216.25 213.81 P
1 10 Q
-0.6 ( there is a unique conforming method) 220.25 216.31 P
0 F
-0.6 (f) 385.36 216.31 P
1 8 Q
-0.48 (1) 388.14 213.81 P
1 10 Q
-0.6 ( in) 392.14 216.31 P
0 F
-0.6 (I) 404.68 216.31 P
1 8 Q
-0.48 (1) 408.01 213.81 P
1 10 Q
-0.6 (. The basic subtyping) 412.01 216.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.61 (rule is: \324) 108 204.31 P
0 F
0.61 (The interface of each type must conform to the interfaces of each of its supertypes.) 144.32 204.31 P
1 F
0.61 (\325 This) 479.01 204.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ensures that calls made on a type can be handled by any of its subtypes.) 108 192.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(22) 108 709.51 T
0 F
(Objects, T) 261.97 709.51 T
(ypes and Classes) 302.53 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(T) 108 658 T
(ype speci\336ers) 114.37 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 549.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(type_specifier) 129.6 531.31 T
( \050 uppercase_identifier) 197.6 531.31 T
5 F
(|) 292.23 531.31 T
0 F
(  abstract_class_name \051  [) 294.83 531.31 T
5 F
({) 399.26 531.31 T
0 F
(type_specifier_list) 408.15 531.31 T
5 F
(}) 486.12 531.31 T
0 F
(]) 492.24 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 519.31 T
0 F
(  method_closure_type_specifier) 153.8 519.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 507.31 T
(SAME) 158.8 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(method_closure_type_specifier) 129.6 489.31 T
(  routine_closure_type_specifier |) 265.55 489.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iter_closure_type_specifier) 151.2 477.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(routine_closure_type_specifier) 129.6 459.31 T
5 F
(ROUT) 270.57 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
([) 151.2 447.31 T
5 F
({) 159.53 447.31 T
0 F
( routine_mode  type_specifier  {) 168.43 447.31 T
5 F
(,) 297.51 447.31 T
0 F
( routine_mode  type_specifier  }) 303.07 447.31 T
5 F
(}) 434.65 447.31 T
0 F
(]) 443.55 447.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 435.31 T
5 F
(:) 157.03 435.31 T
0 F
(type_specifier  ]) 165.37 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iter_closure_type_specifier) 129.6 417.31 T
5 F
(ITER) 255.01 417.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
([) 151.2 405.31 T
5 F
({) 159.53 405.31 T
0 F
( iter_mode  type_specifier  {) 168.43 405.31 T
5 F
(,) 281.95 405.31 T
0 F
( iter_mode  type_specifier  }) 287.51 405.31 T
5 F
(}) 403.53 405.31 T
0 F
(]) 412.43 405.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 393.31 T
5 F
(:) 157.03 393.31 T
0 F
(type_specifier  ]) 165.37 393.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(In source text, Sather types are specified by one of the following forms of) 108 369.31 T
0 0 0 1 0 0 0 K
485.08 368.31 432.39 368.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(type specifier) 432.39 369.31 T
1 F
(:) 485.08 369.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 351.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The name of a class or abstract class \050) 121.54 351.31 T
0 F
(e.g.) 285.59 351.31 T
1 F
( \324) 299.48 351.31 T
5 F
(A) 304.76 351.31 T
1 F
(\325 or \324) 310.69 351.31 T
5 F
($A) 330.66 351.31 T
1 F
(\325\051.  This may be followed by a list of) 342.15 351.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parameter type speci\336ers in braces \050) 121.54 339.31 T
0 F
(e.g.) 280.67 339.31 T
1 F
( \324) 294.56 339.31 T
5 F
(A{B,C}) 299.84 339.31 T
1 F
(\325\051. The parameter values must not) 329.86 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cause the generation of an in\336nite number of types \050) 121.54 327.31 T
0 F
(e.g.) 351.87 327.31 T
1 F
( \324) 365.76 327.31 T
5 F
(FOO{FOO{T}}) 371.04 327.31 T
1 F
(\325 within the) 433.85 327.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class) 121.54 315.31 T
5 F
(\324FOO{T}) 144.87 315.31 T
1 F
(\325\051.) 181.55 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 300.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The name of a type parameter within the body of a parameterized class or abstract) 121.54 300.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(type de\336nition \050) 121.54 288.31 T
0 F
(e.g.) 192.62 288.31 T
1 F
( \324) 206.51 288.31 T
5 F
(T) 211.79 288.31 T
1 F
(\325 in the body of \324) 217.9 288.31 T
5 F
(class B{T} is ... end) 290.01 288.31 T
1 F
(\325\051.) 375.61 288.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 273.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The keywor) 121.54 273.31 T
(d \324) 174.26 273.31 T
5 F
(ROUT) 185.65 273.31 T
1 F
(\325 or) 213.98 273.31 T
5 F
(\325ITER\325) 231.17 273.31 T
1 F
( optionally followed by a list of ar) 258.39 273.31 T
(gument types in) 407.47 273.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(braces, optionally followed by a colon and r) 121.54 261.31 T
(eturn type \050) 314.98 261.31 T
0 F
(e.g.) 366.78 261.31 T
1 F
( \324) 380.67 261.31 T
5 F
(ROUT{A,B}:C) 385.95 261.31 T
1 F
(\325,) 447.08 261.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\325ITER{A,B}:C\325\051.  This is used for closur) 121.54 249.31 T
(e types \050page 55\051.) 289.87 249.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 234.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The special type speci\336er \324) 121.54 234.31 T
5 F
(SAME) 238.16 234.31 T
1 F
(,\325 which denotes the type of the class in which it oc-) 266.5 234.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(curs.) 121.54 222.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 626.31 T
1 1 0 0 0 0 1 K
306 569.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(INT) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(A{B,C{$D}}) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
($IS_EQ{T}) 342 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ROUT{A,B,C}:D) 342 596.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ITER{INT}:INT) 342 586.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(SAME) 342 576.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
187.29 528.08 197.6 539.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 186.7 531.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
255.25 486.08 265.55 497.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 254.66 489.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
255.26 456.08 265.57 467.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 254.67 459.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
239.7 414.08 250.01 425.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 239.11 417.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Objects, T) 279.11 709.51 T
(ypes and Classes) 319.67 709.51 T
4 F
(23) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Abstract classes) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 559.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(abstract_class_de\336nition) 129.6 541.31 T
5 F
( abstract class) 242.12 541.31 T
0 F
( abstract_class_name) 306.02 541.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 529.31 T
5 F
({) 157.03 529.31 T
0 F
( parameter_declaration {) 160.37 529.31 T
5 F
(,) 261.37 529.31 T
0 F
( parameter_declaration }) 264.15 529.31 T
5 F
(}) 365.15 529.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(]) 374.49 529.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([ subtyping_clause ]  [ supertyping_clause ]) 151.2 517.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(is) 151.2 505.31 T
0 F
(  [ abstract_signatur) 158.42 505.31 T
(e ]  {) 240.54 505.31 T
5 F
(;) 261.09 505.31 T
0 F
( [ abstract_signatur) 263.87 505.31 T
(e ] }) 343.49 505.31 T
5 F
(end) 364.04 505.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( parameter_declaration) 129.6 487.31 T
( upper) 235.07 487.31 T
(case_identi\336er [) 260.73 487.31 T
5 F
(<) 326.76 487.31 T
0 F
( type_speci\336er]) 332.6 487.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( subtyping_clause) 129.6 469.31 T
5 F
(<) 217.79 469.31 T
0 F
( type_speci\336er_list) 223.62 469.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( supertyping_clause) 129.6 451.31 T
5 F
(>) 225.93 451.31 T
0 F
( type_speci\336er_list) 231.77 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( type_speci\336er_list) 129.6 433.31 T
( type_speci\336er {) 217.6 433.31 T
5 F
(,) 283.33 433.31 T
0 F
(  type_speci\336er}) 286.11 433.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( abstract_signatur) 129.6 415.31 T
(e) 203.39 415.31 T
( abstract_r) 220.09 415.31 T
(outine_signatur) 263.32 415.31 T
(e) 328.14 415.31 T
5 F
(|) 334.54 415.31 T
0 F
(abstract_iter_signatur) 339.92 415.31 T
(e) 430.1 415.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( abstract_routine_signature) 129.6 397.31 T
( identi\336er) 254.71 397.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 385.31 T
5 F
(\050) 159.53 385.31 T
0 F
( r) 162.86 385.31 T
(outine_ar) 169.07 385.31 T
(gument  {) 207.78 385.31 T
5 F
(,) 249.73 385.31 T
0 F
(  r) 252.51 385.31 T
(outine_ar) 261.22 385.31 T
(gument }) 299.93 385.31 T
5 F
(\051) 339.38 385.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(] [) 348.71 385.31 T
5 F
(:) 360.37 385.31 T
0 F
( type_speci\336er ]) 363.15 385.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( routine_argument) 129.6 367.31 T
( routine_mode  identifier_list) 218.8 367.31 T
5 F
(:) 341.33 367.31 T
0 F
( type_specifier) 346.89 367.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( routine_mode) 129.6 349.31 T
( [  \050) 200.46 349.31 T
5 F
(out) 219.62 349.31 T
0 F
(  |) 233.52 349.31 T
5 F
(inout) 249.59 349.31 T
0 F
(  \051  ]) 271.27 349.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( abstract_iter_signature) 129.6 331.31 T
( iter_name) 239.15 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 319.31 T
5 F
(\050) 159.53 319.31 T
0 F
( iter_ar) 162.86 319.31 T
(gument  {) 192.4 319.31 T
5 F
(,) 234.35 319.31 T
0 F
(  iter_ar) 237.13 319.31 T
(gument }) 269.17 319.31 T
5 F
(\051) 308.62 319.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(] [) 317.95 319.31 T
5 F
(:) 329.61 319.31 T
0 F
( type_speci\336er ]) 332.39 319.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( iter_argument) 129.6 301.31 T
( iter_mode  identifier_list) 203.24 301.31 T
5 F
(:) 310.2 301.31 T
0 F
(  type_specifier) 312.98 301.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( iter_mode) 129.6 283.31 T
( [  \050) 184.9 283.31 T
5 F
(out) 201.57 283.31 T
0 F
(  |) 215.46 283.31 T
5 F
(inout) 231.52 283.31 T
0 F
(  |) 253.21 283.31 T
5 F
(once) 269.27 283.31 T
0 F
(  \051  ]) 290.95 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( identifier_list) 129.6 265.31 T
( identifier  {) 199.37 265.31 T
5 F
(,) 249.38 265.31 T
0 F
(  identifier  }) 252.15 265.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.62 (Abstract class definitions specify interfaces without implementations. Abstract class names) 108 241.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.47 (must be entirely uppercase and must begin with a dollar sign \324) 108 229.31 P
5 F
0.52 ($) 389.47 229.31 P
1 F
0.47 (\325 \050page 19\051; this makes it) 395.03 229.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (easy to distinguish abstract type specifications from other types, and may be thought of as) 108 217.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.59 (a reminder that operations on objects of these types might be more expensive since they) 108 205.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.82 (may involve dynamic dispatch. The scope of abstract type names is the entire program.) 108 193.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.61 (Two abstract type definitions may have the same name only if they specify a different num-) 108 181.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ber of type parameters.) 108 169.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (Abstract class definitions may be) 108 145.31 P
0 0 0 1 0 0 0 K
312.43 144.31 255.77 144.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.06 (parameterized) 255.77 145.31 P
1 F
-0.06 ( by one or more type parameters within en-) 312.43 145.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (closing braces; in the example, the type parameter is \324) 108 133.31 P
5 F
-0.27 (T) 341.68 133.31 P
1 F
-0.24 (\325.  There is no implicit type relation-) 347.79 133.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (ship between different parametrizations of an abstract class.  Parameter names are local to) 108 121.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
234 579.98 506 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
-0.97 (abstract class $SHIPPING_CRATE{T} < $CONTAINER{T}) 270 626.98 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is) 270 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(destination:$LOCATION;) 282.6 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(weight:FLT;) 282.6 596.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 270 586.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
231.81 538.08 242.11 549.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 231.22 541.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
224.77 484.08 235.08 495.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 224.18 487.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
204.98 466.08 215.29 477.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 204.39 469.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
213.13 448.08 223.43 459.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 212.54 451.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
207.29 430.08 217.6 441.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 206.7 433.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
209.78 412.08 220.08 423.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 209.19 415.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
244.41 394.08 254.71 405.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 243.82 397.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
208.5 364.08 218.8 375.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 207.91 367.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
190.16 346.08 200.46 357.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 189.57 349.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
228.85 328.08 239.15 339.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 228.26 331.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
192.94 298.08 203.24 309.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 192.35 301.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
174.6 280.08 184.9 291.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 174.01 283.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
189.06 262.08 199.36 273.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 188.47 265.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(24) 108 709.51 T
0 F
(Objects, T) 261.97 709.51 T
(ypes and Classes) 302.53 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
1.7 (the abstract class definition and they shadow non-parameterized types with the same) 108 659.33 P
0.26 (name. Parameter names must be all uppercase, and they may be used within the abstract) 108 647.33 P
-0.28 (type definition as type specifiers. Whenever a parameterized type is referred to, its param-) 108 635.33 P
0.54 (eters are specified by type specifiers. The abstract class definition behaves like a non-pa-) 108 623.33 P
0.2 (rameterized version whose body is a textual copy of the original definition in which each) 108 611.33 P
0.26 (parameter occurrence is replaced by its specified type.  Parameterization may be thought) 108 599.33 P
(of as a structured macro facility.) 108 587.33 T
0.41 (A subtyping clause \050) 108 563.33 P
5 F
0.46 (\324<\325) 200.17 563.33 P
1 F
0.41 ( followed by type specifiers\051 adds to the type graph an edge from) 210.45 563.33 P
-0.1 (each type in the) 108 551.33 P
0 F
-0.1 (type_speci\336er_list) 179.88 551.33 P
1 F
-0.1 ( to the type being defined.  In the example, the subtyping) 252.57 551.33 P
0.29 (clause is \324) 108 539.33 P
5 F
0.32 (< $CONTAINER{T}) 150.91 539.33 P
1 F
0.29 (\325.  Each listed type must be abstract. Every type is automati-) 237.09 539.33 P
0.36 (cally a subtype of) 108 527.33 P
5 F
0.4 ($OB) 189.47 527.33 P
1 F
0.36 ( \050page 62\051. There must be no cycle of abstract types such that each) 209.48 527.33 P
0.06 (appears in the subtype list of the next, ignoring the values of any type parameters but not) 108 515.33 P
(their number.  A subtyping clause may not refer to \324) 108 503.33 T
5 F
(SAME) 337.53 503.33 T
1 F
(\325.) 365.87 503.33 T
-0.2 (A supertyping clause \050) 108 479.33 P
5 F
-0.23 (\324>\325) 207.55 479.33 P
1 F
-0.2 ( followed by type specifiers\051 adds to the type graph an edge from) 217.83 479.33 P
0.14 (the type being defined to each type in the) 108 467.33 P
0 F
0.14 (type_speci\336er_list) 294.69 467.33 P
1 F
0.14 (. These type specifiers may not) 367.38 467.33 P
-0.17 (be type parameters \050though they may include type parameters as components\051 or external) 108 455.33 P
0 (types. There must be no cycle of abstract classes such that each class appears in the super-) 108 443.33 P
0.53 (type list of the next, ignoring the values of any type parameters but not their number. A) 108 431.33 P
(supertyping clause may not refer to \324) 108 419.33 T
5 F
(SAME) 270.79 419.33 T
1 F
(\325.) 299.13 419.33 T
0.3 (If both subtyping and supertyping clauses are present, then each type in the supertyping) 108 395.33 P
0.66 (list must be a subtype of each type in the subtyping list using only edges introduced by) 108 383.33 P
0.36 (subtyping clauses. This ensures that the subtype relationship can be tested by examining) 108 371.33 P
0.36 (only definitions reachable from the two types in question, and that errors of supertyping) 108 359.33 P
(are localized.) 108 347.33 T
0.54 (If a parameter declaration is followed by a type constraint clause \050\324) 108 323.33 P
5 F
0.6 (<) 408.2 323.33 P
1 F
0.54 (\325 followed by a type) 414.05 323.33 P
-0.15 (specifier\051, then the parameter can only be replaced by subtypes of the constraining type. If) 108 311.33 P
-0.11 (a type constraint is not explicitly specified \050as in the example\051, then \324) 108 299.33 P
5 F
-0.12 (< $OB) 408.47 299.33 P
1 F
-0.11 (\325 is taken as the) 436.98 299.33 P
0.52 (constraint. A type constraint clause may not refer to \324) 108 287.33 P
5 F
0.58 (SAME) 347.07 287.33 P
1 F
0.52 (\325. An abstract type definition) 375.41 287.33 P
-0.54 (must satisfy all of the typing rules when its parameters are replaced by any subtype of their) 108 275.33 P
(constraining types; this allows type-safe independent compilation.) 108 263.33 T
-0.57 (The body of an abstract class definition consists of a semicolon separated list of abstract sig-) 108 239.33 P
-0.1 (natures. Each specifies the signature of a method without providing an implementation at) 108 227.33 P
-0.25 (that point. The argument names are required for documentation purposes only and are ig-) 108 215.33 P
-0.36 (nored. The abstract signatures of all types listed in the subtyping clause are included in the) 108 203.33 P
-0.13 (interface of the type being defined. Explicitly specified signatures override any conflicting) 108 191.33 P
-0.25 (signatures from the subtyping clause. If two types in the subtyping clause have conflicting) 108 179.33 P
0.59 (signatures that are not equal, then the type definition must explicitly specify a signature) 108 167.33 P
-0.61 (that overrides them. The interface of an abstract type consists of any explicitly specified sig-) 108 155.33 P
(natures along with those introduced by the subtyping clause.) 108 143.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Objects, T) 279.11 709.51 T
(ypes and Classes) 319.67 709.51 T
4 F
(25) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Abstract class examples) 108 658.67 T
0 0 0 1 0 0 0 K
108 273.98 504 277 C
0 0 0 1 0 0 0 K
72 275.49 540 275.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Concr) 108 281 T
(ete classes) 139.34 281 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 192.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(class) 129.6 174.31 T
(  [) 161.48 174.31 T
5 F
(immutable | partial | external) 172.3 174.31 T
0 F
(identifier) 303.11 174.31 T
(]) 342.57 174.31 T
5 F
(class) 348.39 174.31 T
0 F
( upper) 371.17 174.31 T
(case_identi\336er) 396.83 174.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( [) 151.2 162.31 T
5 F
({) 162.03 162.31 T
0 F
(  parameter_declaration  {) 165.37 162.31 T
5 F
(,) 273.87 162.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(parameter_declaration  }) 282.65 162.31 T
5 F
(}) 386.15 162.31 T
0 F
(]) 395.05 162.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( [  subtyping_clause  ]) 151.2 150.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(is) 153.7 138.31 T
0 F
( [ class_element  ]  {) 163.7 138.31 T
5 F
(;) 248.88 138.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
([  class_element  ]  }) 257.66 138.31 T
5 F
(end) 342.84 138.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 F
2.62 (Here\325s an example from the standard li-) 108 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.22 (brary.  The abstract class \324) 108 618.33 P
5 F
0.24 ($STR) 223.1 618.33 P
1 F
0.22 (\325 represents) 248.66 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.16 (the set of types that have a way to construct) 108 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.1 (a string suitable for output.  All of the stan-) 108 594.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0 (dard types such as \324) 108 582.33 P
5 F
-0 (INT) 195.56 582.33 P
1 F
-0 (\325, \324) 211.67 582.33 P
5 F
-0 (FLT) 222.23 582.33 P
1 F
-0 (\325, \324) 240.01 582.33 P
5 F
-0 (BOOL\325) 250.56 582.33 P
1 F
-0 ( and) 280.57 582.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.21 (\324) 108 570.33 P
5 F
-0.23 (CPX\325) 110.78 570.33 P
1 F
-0.21 ( know how to do this, so they are sub-) 133.56 570.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.52 (types of \324) 108 558.33 P
5 F
3.92 ($STR) 155.47 558.33 P
1 F
3.52 (\325. Attempting to subtype) 181.03 558.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.58 (from \324) 108 546.33 P
5 F
-0.64 ($STR) 134.27 546.33 P
1 F
-0.58 (\325 a concrete class that didn\325t pro-) 159.83 546.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.05 (vide  a \324) 108 534.33 P
5 F
-0.05 (str) 142.6 534.33 P
1 F
-0.05 (\325 method would cause an error at) 153.71 534.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(compile time.) 108 522.33 T
1 1 0 0 0 0 1 K
306 515 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(abstract class $STR is) 342 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Subtypes of this de\336ne "str) 354.6 601 T
(:STR".) 470.11 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(-- This should be a reasonab) 354.6 591 T
(le) 468.97 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(-- str) 354.6 581 T
(ing representation of an object.) 373.23 581 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(str:STR;) 354.6 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Str) 387.6 561 T
(ing f) 407.74 561 T
(or) 424.48 561 T
(m of object.) 432.7 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(end) 342 551 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.8 (Here\325s another abstract class that subtypes) 108 490.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.2 (from \324) 108 478.33 P
5 F
1.34 ($STR) 136.05 478.33 P
1 F
1.2 (\325.  In addition to requiring the) 161.61 478.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.15 (\324) 108 466.33 P
5 F
1.28 (str) 110.78 466.33 P
1 F
1.15 (\325 method, it adds a \324) 121.89 466.33 P
5 F
1.28 (create) 215.11 466.33 P
1 F
1.15 (\325 method for) 242.9 466.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(creating from the string representation.) 108 454.33 T
1 1 0 0 0 0 1 K
306 424 504 503 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(abstract class $FROM_STR < $STR is) 342 491 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Subtypes of this m) 354.6 481 T
(ust de\336ne) 437.04 481 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(-- methods f) 354.6 471 T
(or going to and from) 402.35 471 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(-- the STR representation.) 354.6 461 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(create\050s:STR\051:$FROM_STR;) 354.6 441 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 431 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.24 (In this illegal abstract class, A and B do not) 108 399.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.22 (conflict because their arguments are con-) 108 387.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.36 (crete and are not the same type.  However,) 108 375.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.13 (because the argument of C is abstract and) 108 363.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.23 (unrelated it conflicts with both A and B.) 108 351.33 P
0.23 (D) 292.26 351.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.84 (does not conflict with A, B or C because it) 108 339.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(has a different number of parameters.) 108 327.33 T
1 1 0 0 0 0 1 K
306 320 504 412 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(abstract class $FOO is) 342 390 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(foo\050arg:INT\051;) 354.6 380 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- method A) 430.2 380 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(foo\050arg:BOOL\051;) 354.6 370 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- method B) 430.2 370 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(foo\050arg:$FOO\051;) 354.6 360 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- method C) 430.2 360 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(foo\050a, b:INT\051) 354.6 350 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- method D) 430.2 350 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(end) 342 340 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 249.31 T
1 1 0 0 0 0 1 K
243 212.98 504 261.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(class VIEWER{DATA < $VIEWER_DATA} is ... end;) 279 249.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(immutable class QUATERNION is ... end;) 279 239.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(external FORTRAN class BLAS is ... end;) 279 229.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(partial class MIXIN is ... end) 279 219.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
151.17 171.08 161.48 182.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 150.58 174.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(26) 108 709.51 T
0 F
(Objects, T) 261.97 709.51 T
(ypes and Classes) 302.53 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.53 (There are three types that have implementations: reference, immutable, and external types.) 108 659.33 P
0.8 (They are defined by classes beginning with \324) 108 647.33 P
5 F
0.89 (class) 309.79 647.33 P
1 F
0.8 (\325, \324) 332.57 647.33 P
5 F
0.89 (immutable class) 343.93 647.33 P
1 F
0.8 (\325, and \324) 416.5 647.33 P
5 F
0.89 (external) 448.09 647.33 P
9 F
0.89 (lan-) 487.33 647.33 P
0.35 (guage) 108 635.33 P
5 F
0.35 ( class) 135.8 635.33 P
1 F
0.32 (\325, respectively. Reference types may be aliased and usually are allocated on a) 161.71 635.33 P
0.12 (dynamic heap.  Immutable types \050such as complex numbers\051 are  immune to aliasing and) 108 623.33 P
1.3 (usually do not require heap allocation \050see page 13\051.  External types are used to allow) 108 611.33 P
0.41 (Sather variables to refer to entities of other languages, and are discussed further on page) 108 599.33 P
-0.03 (68.  Partial classes have no associated type and contain code that may only be included by) 108 587.33 P
0.56 (other classes.  Partial classes may not be instantiated: no routine calls from another class) 108 575.33 P
0.18 (into a partial class are allowed, and no variables may be declared in another class of such) 108 563.33 P
(a type.) 108 551.33 T
0.49 (Class names must be entirely uppercase \050page 19\051. The scope of class names is the entire) 108 527.33 P
-0.06 (program and two classes may have the same name only if they specify a different number) 108 515.33 P
(of parameters.) 108 503.33 T
0.41 (Reference, immutable and partial classes may optionally be) 108 479.33 P
432.76 478.33 376.1 478.33 2 L
V
0.5 H
0 Z
N
0 F
0.41 (parameterized) 376.1 479.33 P
1 F
0.41 ( by one or more) 432.76 479.33 P
172.36 466.33 108 466.33 2 L
V
N
0 F
0.2 (type parameters) 108 467.33 P
1 F
0.2 ( within enclosing braces.  Type parameter names are local to the class defi-) 172.36 467.33 P
1.38 (nition in which they appear and they shadow non-parameterized types with the same) 108 455.33 P
-0.51 (name. Parameter names must be all uppercase, and they may be used within the class body) 108 443.33 P
0.17 (as type specifiers. Whenever a parameterized type is referred to, its parameters are speci-) 108 431.33 P
0.07 (fied by type specifiers. The class behaves like a non-parameterized version whose body is) 108 419.33 P
0.48 (a textual copy of the original class in which each parameter occurrence is replaced by its) 108 407.33 P
(specified type.  Parameterization may be thought of as a structured macro facility.) 108 395.33 T
0.54 (If a parameter declaration is followed by a type constraint clause \050\324) 108 371.33 P
5 F
0.6 (<) 408.2 371.33 P
1 F
0.54 (\325 followed by a type) 414.05 371.33 P
-0.15 (specifier\051, then the parameter can only be replaced by subtypes of the constraining type. If) 108 359.33 P
0.16 (a type constraint is not explicitly specified, then \324) 108 347.33 P
5 F
0.17 (< $OB) 325.08 347.33 P
1 F
0.16 (\325 is taken as the constraint. A type) 353.88 347.33 P
0.61 (constraint specifier may not refer to \324) 108 335.33 P
5 F
0.68 (SAME) 274.42 335.33 P
1 F
0.61 (\325. The body of a parameterized class must be) 302.76 335.33 P
-0.12 (type-correct when the parameters are replaced by any subtype of their constraining types.) 108 323.33 P
0.19 (Subtyping clauses introduce edges into  the type graph. Each type listed in the subtyping) 108 299.33 P
-0.21 (clause must be abstract.  There is an edge in the type graph from each type in the list to the) 108 287.33 P
0.12 (type being defined. Every type is automatically a subtype of) 108 275.33 P
5 F
0.13 ($OB) 377.38 275.33 P
1 F
0.12 (\050page 62\051.  A subtyping) 400.31 275.33 P
-0.61 (clause may not refer to \324) 108 263.33 P
5 F
-0.68 (SAME) 211.12 263.33 P
1 F
-0.61 (\325. When a subtyping clause is used with a partial class, it does) 239.46 263.33 P
-0.13 (not introduce an edge into the type graph, but does enforce the basic subtyping rule \050page) 108 251.33 P
-0.51 (21\051 between the interface\050s\051 of the abstract class\050es\051 and the partial class.  Only partial class-) 108 239.33 P
(es may have stubs \050page 34\051.) 108 227.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Objects, T) 279.11 709.51 T
(ypes and Classes) 319.67 709.51 T
4 F
(27) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Class examples) 108 658.67 T
0 0 0 1 0 0 0 K
108 340.98 504 344 C
0 0 0 1 0 0 0 K
72 342.49 540 342.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Sather sour) 108 348 T
(ce \336les) 168.8 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 279.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.34 (sour) 131.76 261.31 P
-0.34 (ce_\336le) 149.36 261.31 P
-0.34 (  [ abstract_class_de\336nition) 186.73 261.31 P
9 F
-0.38 (|) 298.39 261.31 P
0 F
-0.34 ( class  ]  {) 300.99 261.31 P
5 F
-0.38 (;) 341.82 261.31 P
0 F
-0.34 (  [ abstract_class_de\336nition) 344.6 261.31 P
9 F
-0.38 (|) 458.42 261.31 P
0 F
-0.34 (  class  ]  }) 461.02 261.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.47 (Sather source files consist of semicolon separated lists of  classes. Execution of a Sather pro-) 108 237.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gram begins with a routine named \324) 108 225.31 T
5 F
(main) 266.07 225.31 T
1 F
(\325 in a specified class \050page 61\051, usually \324) 287.74 225.31 T
5 F
(MAIN) 460.59 225.31 T
1 F
(\325.) 485.59 225.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.01 (Most Sather code resides in ordinary refer-) 108 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.31 (ence classes.  A frequently used class from the) 108 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.46 (standard library is \324) 108 606.33 P
5 F
2.74 (ARRAY{T}) 202.12 606.33 P
1 F
2.46 (\325, which is a) 249.35 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.21 (conventional array of the parameterized type) 108 594.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.48 (\324) 108 582.33 P
5 F
2.76 (T) 110.78 582.33 P
1 F
2.48 (\325.  Here we show the method \324contains\325,) 116.89 582.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5.27 (which uses \324) 108 570.33 P
5 F
5.86 (T) 172.96 570.33 P
1 F
5.27 (\325.  For example, an \324) 179.07 570.33 P
5 F
5.86 (AR-) 291.78 570.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
6.05 (RAY{INT}) 108 558.33 P
1 F
5.44 (\325 would support the call \324) 151.35 558.33 P
5 F
6.05 (con-) 289.55 558.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.14 (tains\0505\051) 108 546.33 P
1 F
1.03 (\325.  Parameterized typing like this can) 141.34 546.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.41 (be resolved at compile time, leading to effi-) 108 534.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(cient code.) 108 522.33 T
1 1 0 0 0 0 1 K
315 515 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(class ARRAY{T} is) 351 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 363.6 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(contains\050e:T\051:BOOL is) 363.6 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 376.2 581 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 363.6 571 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 363.6 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 351 551 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.16 (The complex number class from the standard) 108 490.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.8 (library is a good example of a immutable) 108 478.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.92 (class.  \324) 108 466.33 P
5 F
1.03 (CPX) 140.96 466.33 P
1 F
0.92 (\325 is  immutable \050see page 13\051 be-) 161.52 466.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.27 (cause it is small and behaves with a mathe-) 108 454.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.4 (matical semantics.  Here we also see that com-) 108 442.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.36 (plex numbers can be compared with other) 108 430.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.03 (complex numbers \050\324) 108 418.33 P
5 F
1.15 ($IS_EQ) 197.97 418.33 P
1 F
1.03 (\325\051 and has a rou-) 232.99 418.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.54 (tine \050) 108 406.33 P
5 F
3.93 (str: STR) 134.15 406.33 P
1 F
3.54 (\051 for conversion to a string) 174.75 406.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(\050\324) 108 394.33 T
5 F
($STR) 114.11 394.33 T
1 F
(\325\051.) 139.67 394.33 T
1 1 0 0 0 0 1 K
315 387 504 503 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(immutable class CPX) 351 471 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(< $IS_EQ{CPX}, $STR) 376.2 461 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is) 351 451 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(str: STR is ..... end;) 363.6 441 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is_eq\050s: CPX\051: BOOL is ... end;) 363.6 431 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 363.6 421 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 351 411 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 316.31 T
1 1 0 0 0 0 1 K
297 299.98 504 328.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(abstract class $PLANET is ... end;) 333 316.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.19 (class GAS_GIANT < $PLANET is ... end;) 333 306.98 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
176.42 258.08 186.73 269.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 175.83 261.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(28) 108 709.51 T
0 F
(Class Elements) 285.16 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
121 652.2 108 652.2 2 L
0 X
V
0.9 H
0 Z
N
4 18 Q
(C) 108 654 T
163.09 652.2 121 652.2 2 L
V
N
4 14.4 Q
(LASS) 121 654 T
174.09 652.2 163.09 652.2 2 L
V
N
4 18 Q
(E) 163.09 654 T
245.28 652.2 174.09 652.2 2 L
V
N
4 14.4 Q
(LEMENTS) 174.09 654 T
1 10 Q
(Syntax:) 108 628.33 T
0 F
(class_element) 129.6 610.33 T
(  const_definition) 202.6 610.33 T
9 F
(|) 277.79 610.33 T
0 F
(   shared_definition) 280.39 610.33 T
9 F
(|) 360.39 610.33 T
0 F
(   attr_definition) 362.99 610.33 T
9 F
(|) 151.2 598.33 T
0 F
(   routine_definition) 153.8 598.33 T
9 F
(|) 237.15 598.33 T
0 F
(   iter_definition) 239.75 598.33 T
9 F
(|) 310.04 598.33 T
0 F
(  include_clause) 312.64 598.33 T
9 F
(|) 381.91 598.33 T
0 F
(  stub) 384.51 598.33 T
1 F
-0.17 (The main body of each class is a semicolon separated list of elements which define the fea-) 108 574.33 P
0.56 (tures of the class. The semantics of a class is independent of the textual order of its class) 108 562.33 P
-0.35 (elements. All features are named.  Some features may contribute a reader and a writer rou-) 108 550.33 P
0.46 (tine of the same name to the class interface. The scope of feature names is the class body) 108 538.33 P
-0.61 (and is separate from the class namespace. If a feature is private, then it may only be referred) 108 526.33 P
(to from within the class and is not part of the class interface.) 108 514.33 T
-0.49 (There are language-specific restrictions on the elements that may appear in external classes) 108 490.33 P
-0.22 (\050page 68\051.   Some names \050) 108 478.33 P
5 F
-0.24 (\324main\325) 218.56 478.33 P
1 F
-0.22 ( and) 244.67 478.33 P
5 F
-0.24 (\324invariant\325) 266.16 478.33 P
1 F
-0.22 (\051 are reserved for special purposes \050page 61\051.) 308.39 478.33 P
0 0 0 1 0 0 0 K
108 429.98 504 433 C
0 0 0 1 0 0 0 K
72 431.49 540 431.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Constant de\336nitions) 108 437 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 358.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( const_definition) 129.6 340.31 T
(  [) 210.1 340.31 T
5 F
(private) 220.93 340.31 T
0 F
(]) 253.71 340.31 T
5 F
(const) 262.05 340.31 T
0 F
(  identifier) 285.95 340.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050) 151.2 328.31 T
5 F
(:) 157.03 328.31 T
0 F
(type_specifier) 165.81 328.31 T
5 F
(:=) 223.5 328.31 T
0 F
( expression) 232.12 328.31 T
5 F
(|) 281.85 328.31 T
0 F
( [) 284.45 328.31 T
5 F
(:=) 292.78 328.31 T
0 F
(  expression ] [) 301.4 328.31 T
5 F
(,) 362.79 328.31 T
0 F
( identifier_list  ]  \051) 365.57 328.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.61 (Constants are accessible by all objects in a class and may not be assigned to. If a type is spec-) 108 304.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.18 (ified, then the construct defines a single constant attribute named) 108 292.31 P
0 F
0.18 (identifier) 400.83 292.31 P
1 F
0.18 ( and it must be) 437.51 292.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.58 (initialized by the expression) 108 280.31 P
0 F
0.58 (expression) 237.18 280.31 P
1 F
0.58 (. This must be a constant expression which means) 279.41 280.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that it is:) 108 268.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(1.) 108 250.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(a character) 121.54 250.31 T
(, boolean, string, integer or \337oating point literal expr) 168.95 250.31 T
(ession \050page 40\051,) 400.66 250.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(2.) 108 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(a) 121.54 235.31 T
5 F
(void) 129.04 235.31 T
1 F
( or) 147.38 235.31 T
5 F
(void) 161.79 235.31 T
1 F
( test expr) 180.13 235.31 T
(ession \050page 46\051,) 220.41 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(3.) 108 220.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(an) 121.54 220.31 T
5 F
(and) 134.86 220.31 T
1 F
( or) 151.54 220.31 T
5 F
(or) 165.95 220.31 T
1 F
( expr) 174.84 220.31 T
(ession \050page 48\051, each of whose components is a constant expr) 197.07 220.31 T
(ession,) 470.85 220.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(4.) 108 205.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(an array cr) 121.54 205.31 T
(eation expr) 169.03 205.31 T
(ession \050page 48\051, each of whose components is a constant ex-) 218.5 205.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pr) 121.54 193.31 T
(ession,) 131.32 193.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(5.) 108 178.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(a r) 121.54 178.31 T
(outine call applied to a constant expr) 132.81 178.31 T
(ession, each of whose ar) 295.83 178.31 T
(guments is a constant) 402.05 178.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(expr) 121.54 166.31 T
(ession other than void, or) 141.27 166.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(6.) 108 151.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(a r) 121.54 151.31 T
(efer) 132.81 151.31 T
(ence to another constant in the same class or in another class using the \324) 149.49 151.31 T
5 F
(::) 465.02 151.31 T
1 F
(\325 nota-) 470.58 151.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion.) 121.54 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 405.31 T
1 1 0 0 0 0 1 K
306 378.98 504 417.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(const r:FLT:=45.6;) 342 405.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(private const a,b,c;) 342 395.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(private const d:=4,e,f) 342 385.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
192.29 607.11 202.6 618.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 191.7 610.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
199.79 337.08 210.1 348.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 199.2 340.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Class Elements) 302.3 709.51 T
4 F
(29) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.58 (There must not be cyclic dependencies among constant initializers.  The libraries are de-) 108 659.33 P
(signed so that no observable side-effects can occur during constant initialization.) 108 647.33 T
-0.48 (If a type specifier is not provided, then the construct defines one or more successive integer) 108 623.33 P
0.4 (constants. The first identifier is assigned the value zero by default;  its value may also be) 108 611.33 P
0.84 (specified by a constant  expression of type \324) 108 599.33 P
5 F
0.93 (INT) 306.17 599.33 P
1 F
0.84 (\325. The remaining identifiers are assigned) 322.28 599.33 P
-0.16 (successive integer values.  This is the way to do enumeration types in Sather.  It is an error) 108 587.33 P
(if no type specifier is provided and there is an assignment that is not of type \324) 108 575.33 T
5 F
(INT) 448.85 575.33 T
1 F
(\325.) 464.96 575.33 T
0.52 (Each constant  definition causes the implicit definition of a reader routine with the same) 108 551.33 P
-0.57 (name. It takes no arguments and returns the value of the constant. Its return type is the con-) 108 539.33 P
(stant\325s type. The routine is private if and only if the constant is declared \324) 108 527.33 T
5 F
(private) 429.76 527.33 T
1 F
(\325.) 459.77 527.33 T
0 0 0 1 0 0 0 K
108 478.98 504 482 C
0 0 0 1 0 0 0 K
72 480.49 540 480.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Shar) 108 486 T
(ed attribute de\336nitions) 132.47 486 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 407.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(shared_definition) 129.6 389.31 T
( [) 212.41 389.31 T
5 F
(private) 220.74 389.31 T
(|  readonly) 255.76 389.31 T
0 F
(]) 307.83 389.31 T
5 F
(shared) 316.15 389.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(\050  identifier) 151.2 377.31 T
5 F
(:) 201.21 377.31 T
0 F
(  type_specifier) 203.99 377.31 T
5 F
(:=) 269.18 377.31 T
0 F
(expression) 283.36 377.31 T
5 F
(|) 330.59 377.31 T
0 F
( identifier_list) 338.75 377.31 T
5 F
(:) 400.71 377.31 T
0 F
(   type_specifier  \051) 403.49 377.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.05 (Shared attributes are global variables that reside in a class namespace. When only a single) 108 353.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.25 (shared attribute is defined, a constant  initializing expression may be provided \050page 28\051.) 108 341.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.43 (If no initializing expression is provided, the shared is initialized to the value \324) 108 329.31 P
5 F
0.48 (void) 455.26 329.31 P
1 F
0.43 (\325 \050page) 473.6 329.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46\051.) 108 317.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (Each shared  definition causes the definition of a reader routine and a writer routine, both) 108 293.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.36 (with the same name. The reader routine takes no arguments and returns the value of the) 108 281.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (shared. Its return type is the shared\325s type. The reader routine  is private if  the shared is) 108 269.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (declared \324) 108 257.31 P
5 F
-0.3 (private) 151.11 257.31 P
1 F
-0.27 (\325. The writer routine sets the value of the shared, taking a single argument) 181.12 257.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.36 (whose type is the shared\325s type, and has no return value. The writer routine  is private if) 108 245.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the shared is declared either \324) 108 233.31 T
5 F
(private) 237.83 233.31 T
1 F
(\325 or \324) 267.84 233.31 T
5 F
(readonly) 287.81 233.31 T
1 F
(\325.) 326.16 233.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 454.31 T
1 1 0 0 0 0 1 K
306 427.98 504 466.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(private shared i,j:INT;) 342 454.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(shared s:STR:="name";) 342 444.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(readonly shared c:CHAR:=\325x\325) 342 434.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
202.11 386.08 212.42 397.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 201.52 389.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(30) 108 709.51 T
0 F
(Class Elements) 285.16 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Attribute de\336nitions) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 579.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(attr_definition) 129.6 561.31 T
( [) 201.29 561.31 T
5 F
(private) 209.62 561.31 T
(|  readonly) 244.91 561.31 T
0 F
(]) 296.98 561.31 T
5 F
(attr) 305.32 561.31 T
0 F
(identifier_list) 328.11 561.31 T
5 F
(:) 387.57 561.31 T
0 F
(  type_specifier) 390.35 561.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.07 (An object\325s state consists of the attributes defined in its class together with an optional ar-) 108 537.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (ray portion. The array portion appears if there is an) 108 525.31 P
5 F
-0.32 (include) 334.92 525.31 P
1 F
-0.28 ( path \050page 33\051 from the type to) 366.6 525.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.31 (AREF) 108 513.31 P
1 F
-0.28 ( for reference types or to) 134.67 513.31 P
5 F
-0.31 (AVAL) 243.39 513.31 P
1 F
-0.28 ( for immutable types \050page 62\051. Closure and reference) 268.96 513.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.47 (objects must be explicitly allocated as described on pages 47 and 55. Variables have the val-) 108 501.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (ue \324) 108 489.31 P
5 F
-0.33 (void) 123.81 489.31 P
1 F
-0.29 (\325 until an object is assigned to them \050page 46\051. There must be no cycle of immutable) 142.15 489.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(types such that each type has an attribute whose type is in the cycle.) 108 477.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.03 (Each attribute definition causes the definition of a reader and a writer routine with the) 108 453.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.12 (same name. The reader routine takes no arguments and returns the value of the attribute.) 108 441.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.18 (Its declared return type is the attribute\325s type. It is private if  the attribute is declared \324) 108 429.31 P
5 F
0.2 (pri-) 489.56 429.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vate) 108 417.31 T
1 F
(\325.) 126.9 417.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.21 (The writer routine takes different forms for reference and immutable types. For reference) 108 393.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (types, the writer routine takes a single argument whose type is the attribute\325s type and has) 108 381.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.45 (no return value. Its effect is to modify the object by setting the value of the attribute. For) 108 369.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (immutable types, it takes a single argument whose type is the attribute\325s type, and returns) 108 357.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (a copy of the object with the attribute set to the specified new value, and whose type is the) 108 345.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.53 (type of the object.  Object attribute writer routines are private if the corresponding attribute) 108 333.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is declared either \324) 108 321.31 T
5 F
(private) 189.05 321.31 T
1 F
(\325 or \324) 219.06 321.31 T
5 F
(readonly) 239.03 321.31 T
1 F
(\325.) 277.38 321.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 626.31 T
1 1 0 0 0 0 1 K
306 599.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(attr a,b,c:INT;) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(private attr c:CHAR;) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(readonly attr s1,s2:STR) 342 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
190.99 558.08 201.3 569.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 190.4 561.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Class Elements) 302.3 709.51 T
4 F
(31) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Attribute, shared and constant examples) 108 658.67 T
0 0 0 1 0 0 0 K
108 328.98 504 332 C
0 0 0 1 0 0 0 K
72 330.49 540 330.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Routine de\336nitions) 108 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(routine_definition) 129.6 209.31 T
(  [) 215.76 209.31 T
5 F
(private) 226.59 209.31 T
0 F
(]  identifier) 262.15 209.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 197.31 T
5 F
(\050) 159.53 197.31 T
0 F
( routine_argument  {) 162.86 197.31 T
5 F
(,) 250.09 197.31 T
0 F
(  routine_argument  }) 252.87 197.31 T
5 F
(\051) 345.1 197.31 T
0 F
(]  [) 353.99 197.31 T
5 F
(:) 370.65 197.31 T
0 F
(  type_specifier  ]) 373.43 197.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 185.31 T
5 F
(pre) 159.53 185.31 T
0 F
( expression  ]  [) 176.76 185.31 T
5 F
(post) 243.15 185.31 T
0 F
(  expression  ]  [) 262.05 185.31 T
5 F
(is) 330.94 185.31 T
0 F
(statement_list) 343.72 185.31 T
5 F
(end) 408.44 185.31 T
0 F
(]) 430.68 185.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.19 (A routine definition may begin with the keyword \324) 108 161.31 P
5 F
-0.21 (private) 330.56 161.31 P
1 F
-0.19 (\325 to indicate that the routine may) 360.57 161.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.26 (be called from within the class but is not part of the class interface. The) 108 149.31 P
0 F
0.26 (identifier) 426.9 149.31 P
1 F
0.26 ( specifies) 463.58 149.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the name of the routine.) 108 137.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.57 (Here\325s an example of a tree node class.  Each) 108 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.83 (node has attributes for storing child nodes) 108 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.42 (as well as the data at that node.  \324) 108 606.33 P
5 F
-0.47 (datum) 250.42 606.33 P
1 F
-0.42 (\325 and) 278.21 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.17 (\324) 108 594.33 P
5 F
-0.19 (total_nodes_created) 110.78 594.33 P
1 F
-0.17 (\325 are marked) 201.39 594.33 P
5 F
-0.19 (readonly) 259.15 594.33 P
1 F
-0.17 (,) 297.5 594.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.01 (so they may not be written by code in other) 108 582.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.41 (classes.  The \324) 108 570.33 P
5 F
1.56 (total_nodes_created) 171.6 570.33 P
1 F
1.41 (\325 field is) 262.21 570.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.71 (presumably incremented in the create rou-) 108 558.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(tine, and all nodes will see the same value.) 108 546.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.95 (The \324) 108 522.33 P
5 F
1.05 (lchild) 130.97 522.33 P
1 F
0.95 (\325 attribute implicitly defines two) 153.75 522.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5.51 (signatures: \324) 108 510.33 P
5 F
6.12 (lchild:NODE{T}) 167.09 510.33 P
1 F
5.51 (\325 for reading) 234.33 510.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(and \324) 108 498.33 T
5 F
(lchild\050NODE{T}\051) 130.21 498.33 T
1 F
(\325 for writing.) 201.33 498.33 T
1 1 0 0 0 0 1 K
306 491 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(class NODE{T} is) 342 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(attr lchild, rchild:SAME;) 354.6 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(readonly attr datum:T;) 354.6 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(readonly shared) 354.6 571 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(total_nodes_created:INT;) 367.2 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(const min_balanced_depth:INT:=5;) 354.6 541 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 354.6 521 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 511 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
-0.08 (This example shows three different ways to) 108 466.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.31 (modify an attribute.  \324) 108 454.33 P
5 F
0.34 (n) 205.51 454.33 P
1 F
0.31 (\325 is a reference type,) 211.07 454.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.29 (so the \324) 108 442.33 P
5 F
1.44 (lchild) 141.94 442.33 P
1 F
1.29 (\325 field can be modified by as-) 164.72 442.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.33 (signment, or by calling the implicit writer) 108 430.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.49 (routine for the attribute.  \324) 108 418.33 P
5 F
-0.55 (c) 220.14 418.33 P
1 F
-0.49 (\325 is an immutable) 225.14 418.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.23 (type, so its implicit writer routine returns a) 108 406.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.86 (new object instead of modifying the object) 108 394.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(in place.) 108 382.33 T
1 1 0 0 0 0 1 K
306 375 504 479 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(n:NODE{T};  c:CPX;) 342 457 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 342 447 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(n.lchild := x;) 342 437 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- These tw) 405 437 T
(o lines) 449.92 437 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(n.lchild\050x\051;) 342 427 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(--     are equiv) 405 427 T
(alent.) 460.3 427 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(...) 342 417 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(c := c.re\0501.0\051;) 342 407 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
-0.44 (-- attr of imm) 405 407 P
-0.44 (utab) 454.59 407 P
-0.44 (le type) 471.93 407 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 304.31 T
1 1 0 0 0 0 1 K
306 247.98 504 316.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(a\050f:FLT\051:FLT) 342 304.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(pre f>1.2) 354.6 294.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(post result<4.3) 397.88 294.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is ... end;) 342 284.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(b is ... end;) 342 274.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(private d:INT is ... end;) 342 264.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(c\050s1,s2,s3:STR\051 is ... end) 342 254.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
205.45 206.08 215.76 217.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 204.86 209.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(32) 108 709.51 T
0 F
(Class Elements) 285.16 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.24 (If a routine has arguments, the declaration list is enclosed in parentheses. The mode, name) 108 659.33 P
-0.38 (and type of each argument is specified in this list. The types of consecutive arguments may) 108 647.33 P
0.6 (be declared with a single type specifier. Each argument\325s mode defaults to \324in\325 if neither) 108 635.33 P
-0.57 (\324) 108 623.33 P
5 F
-0.64 (out) 110.78 623.33 P
1 F
-0.57 (\325 nor \324) 124.68 623.33 P
5 F
-0.64 (inout) 149.32 623.33 P
1 F
-0.57 (\325 is specified \050page 45\051. If a routine has a return value, it is declared by a colon) 171 623.33 P
(and a specifier for the return type.) 108 611.33 T
0.67 (The \324) 108 587.33 P
5 F
0.75 (pre) 130.69 587.33 P
1 F
0.67 (\325 and \324) 145.14 587.33 P
5 F
0.75 (post) 173.98 587.33 P
1 F
0.67 (\325 clauses specify optional pre- and post-conditions, and are discussed) 192.88 587.33 P
(further on page 59.  The body of a routine definition is a list of statements \050page 35\051.) 108 575.33 T
0 0 0 1 0 0 0 K
108 526.98 504 530 C
0 0 0 1 0 0 0 K
72 528.49 540 528.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Iterator de\336nitions) 108 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 474.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(iter_definition) 129.6 456.31 T
(  [) 200.2 456.31 T
5 F
(private) 211.02 456.31 T
0 F
(] iter_name) 246.6 456.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 444.31 T
5 F
(\050) 159.53 444.31 T
0 F
( iter_argument  {) 162.86 444.31 T
5 F
(,) 234.53 444.31 T
0 F
(iter_argument  }) 242.87 444.31 T
5 F
(\051) 314.54 444.31 T
0 F
(]  [) 323.43 444.31 T
5 F
(:) 340.09 444.31 T
0 F
( type_specifier  ]) 345.65 444.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 432.31 T
5 F
(pre) 159.53 432.31 T
0 F
( expression  ]  [) 173.98 432.31 T
5 F
(post) 240.37 432.31 T
0 F
(  expression  ]) 259.27 432.31 T
5 F
(is) 319.83 432.31 T
0 F
( statement_list) 329.83 432.31 T
5 F
(end) 394.55 432.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
1.13 (Iterators are similar to routines but encapsulate iteration abstractions. Their names end) 108 408.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (with an exclamation point \324) 108 396.31 P
5 F
-0.44 (!) 227.38 396.31 P
1 F
-0.4 (\325 and they may only be called within) 230.15 396.31 P
5 F
-0.44 (loop) 390.79 396.31 P
1 F
-0.4 ( statements \050page 51\051.) 409.69 396.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (Iterator arguments that are not marked \324) 108 384.31 P
5 F
-0.46 (once) 283.7 384.31 P
1 F
-0.41 (\325 are called) 305.38 384.31 P
0 0 0 1 0 0 0 K
367.09 383.31 354.32 383.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.41 (hot) 354.32 384.31 P
1 F
-0.41 ( and cause re-evaluation of that) 367.09 384.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(argument at each iteration \050see also page 45\051.) 108 372.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (The description of routine arguments and) 108 348.31 P
5 F
0.42 (pre) 297.33 348.31 P
1 F
0.38 ( and) 311.78 348.31 P
5 F
0.42 (post) 334.47 348.31 P
1 F
0.38 (constructs also applies to iterator) 356.57 348.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.55 (definitions. Iters may contain) 108 336.31 P
5 F
-0.61 (yield) 237.58 336.31 P
1 F
-0.55 ( \050page 37\051 and) 258.14 336.31 P
5 F
-0.61 (quit) 320.9 336.31 P
1 F
-0.55 ( \050page 52\051 statements but may not con-) 337.02 336.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.37 (tain) 108 324.31 P
5 F
0.41 (return) 127.86 324.31 P
1 F
0.37 ( statements \050page 37\051. The semantics of iterator calls is described in the section) 153.98 324.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.5 (on loop statements \050page 51\051. The) 108 312.31 P
5 F
0.55 (pre) 261.86 312.31 P
1 F
0.5 ( clause must be true each time the iterator is called) 276.3 312.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (and the) 108 300.31 P
5 F
-0.16 (post) 143.52 300.31 P
1 F
-0.14 ( clause must be true each time it yields. The) 162.42 300.31 P
5 F
-0.16 (post) 355.89 300.31 P
1 F
-0.14 ( clause is not evaluated when) 374.8 300.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(an iterator quits.) 108 288.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The semantics of iterators and loops are discussed in more detail on page 51.) 108 264.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 502.31 T
1 1 0 0 0 0 1 K
306 494.98 504 514.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(elts!\050once i:INT, x:FLT\051:T is ... end) 342 502.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
189.89 453.08 200.2 464.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 189.3 456.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Class Elements) 302.3 709.51 T
4 F
(33) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Code inclusion and) 108 658 T
5 F
(include) 213.24 658 T
6 F
( clauses) 251.26 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 589.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(include_clause) 129.6 571.31 T
( [) 201.68 571.31 T
5 F
(  private) 207.51 571.31 T
0 F
(]) 248.63 571.31 T
5 F
(include) 256.96 571.31 T
0 F
(type_specifier) 294.2 571.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([  feature_modifier  {) 151.2 559.31 T
5 F
(,) 236.48 559.31 T
0 F
(  feature_modifier  }  ]) 239.26 559.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(feature_modifier) 129.6 541.31 T
( \050 identifier) 208.52 541.31 T
5 F
(|) 258.54 541.31 T
0 F
( iter_name  \051) 263.92 541.31 T
5 F
(->) 320.3 541.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
([  [) 151.2 529.31 T
5 F
(private) 167.86 529.31 T
9 F
(|) 203.15 529.31 T
5 F
(readonly) 211.03 529.31 T
0 F
(  ]  \050  identifier) 249.38 529.31 T
9 F
(|) 312.72 529.31 T
0 F
( iter_name  \051  ]) 318.1 529.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.16 (Implementation inheritance is defined by) 108 505.31 P
0 0 0 1 0 0 0 K
354.81 504.31 293.98 504.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.16 (include clauses) 293.98 505.31 P
1 F
0.16 (. These cause the incorporation of) 354.81 505.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.54 (the implementation of the specified type, possibly undefining or renaming features with) 108 493.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.18 (feature_modifier) 108 481.31 P
1 F
-0.18 ( clauses. The) 174.12 481.31 P
5 F
-0.2 (include) 231.96 481.31 P
1 F
-0.18 ( clause may begin with the keyword \324) 263.64 481.31 P
5 F
-0.2 (private) 428.02 481.31 P
1 F
-0.18 (\325, in which) 458.03 481.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.01 (case any unmodified included feature is made private. We say that there is an) 108 469.31 P
0 0 0 1 0 0 0 K
504 468.31 454.08 468.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.01 (include path) 454.08 469.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.55 (from one type to another if there is a sequence of types between them such that each in-) 108 457.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cludes the next in the sequence.) 108 445.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.38 (The included type specified by the) 108 421.31 P
0 F
-0.38 (type_specifier) 260.72 421.31 P
1 F
-0.38 ( may not be a closure type or a type param-) 315.91 421.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.37 (eter \050though type parameters may appear as components of the type specifier\051. Partial) 108 409.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0 (classes may be included.  External classes may be included if the interface to the language) 108 397.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (permits this; external Fortran \050page 69\051 and C \050page 70\051 classes may not be included.  There) 108 385.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.03 (mustn\325t be include paths from reference types to) 108 373.31 P
5 F
0.03 (AVAL) 324.93 373.31 P
1 F
0.03 ( or from immutable types to) 350.5 373.31 P
5 F
0.03 (AREF) 477.33 373.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.26 (\050page 62\051. There must be no cycle of classes such that each class includes the next, ignoring) 108 361.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.95 (the values of any type parameters but not their number.  If) 108 349.31 P
5 F
1.06 (SAME) 380.74 349.31 P
1 F
0.95 ( occurs in an include) 409.08 349.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(clause, it is interpreted as the eventual type of the class \050as late as possible\051.) 108 337.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.37 (Each) 108 313.31 P
0 F
0.37 (feature_modifier) 132.24 313.31 P
1 F
0.37 ( clause specifies an identifier which must be the name of at least one) 198.36 313.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.08 (feature in the included class. If no clause follows the \324) 108 301.31 P
5 F
0.08 (->) 344.64 301.31 P
1 F
0.08 (\325 symbol, then the named features) 353.81 301.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.64 (are not included in the class. If an identifier follows the \324) 108 289.31 P
5 F
0.71 (->) 363.5 289.31 P
1 F
0.64 (\325 symbol, then it becomes the) 372.67 289.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.3 (new name for the features. In this case, the listed features are included as part of the public) 108 277.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.29 (interface unless they are specified as \324) 108 265.31 P
5 F
1.44 (private) 281.81 265.31 P
1 F
1.29 (\325 or \324) 311.82 265.31 P
5 F
1.44 (readonly) 334.38 265.31 P
1 F
1.29 (\325. Identifiers may only be re-) 372.73 265.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.49 (named as identifiers and iterator names may only be renamed by iterator names. It is an) 108 253.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.52 (error if there are no appropriate methods to rename in the included class, and both a reader) 108 241.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and a writer method \050page 30\051 must exist if \324) 108 229.31 T
5 F
(readonly) 303.66 229.31 T
1 F
(\325 is used.) 342.01 229.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (A class may not explicitly define two methods whose signatures conflict \050page 21\051. A class) 108 205.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (may not define a routine whose signature conflicts with either the reader or the writer rou-) 108 193.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (tine of any of its attributes \050whether explicitly defined or included from other classes\051. If a) 108 181.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.41 (method is explicitly defined in a class, it overrides all conflicting methods from included) 108 169.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.93 (classes. The implicit reader and writer routines of a class\325s attributes, shareds, and con-) 108 157.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.22 (stants also override any included routines and must not conflict with each other. If an in-) 108 145.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (cluded method is not overridden, then it must not conflict with another included method;) 108 133.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(feature modification clauses can be used to resolve any conflicts.) 108 121.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 626.31 T
1 1 0 0 0 0 1 K
306 609.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(include A a->b, c->, d->private d;) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(private include D e->readonly f;) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
191.37 568.08 201.67 579.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 190.78 571.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
198.22 538.08 208.52 549.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 197.63 541.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(34) 108 709.51 T
0 F
(Class Elements) 285.16 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Stubs) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 598.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(stub) 129.6 580.31 T
0 F
( abstract_signature) 148.5 580.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.21 (A stub feature may only be present in a partial class.  They have no body and are used to) 108 556.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (reserve a signature for redefinition by an including class.  If code in a partial class contains) 108 544.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(calls to an unimplemented method, that method must be explicitly provided as a stub) 108 532.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 11 Q
(Code inclusion examples.) 108 505.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 618.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(stub register_object\050ob:FOO\051;) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
2.57 (The class \324) 108 477.31 P
5 F
2.85 (ARRAY{T}) 158.48 477.31 P
1 F
2.57 (\325 in the standard li-) 205.72 477.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.58 (brary is not a primitive data type.  It is based) 108 465.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.68 (on a built-in class \324) 108 453.31 P
5 F
2.98 (AREF{T}) 201.32 453.31 P
1 F
2.68 (\325 which pro-) 240.78 453.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.54 (vides objects with an array portion.  \324) 108 441.31 P
5 F
1.71 (AR-) 282.78 441.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.47 (RAY) 108 429.31 P
1 F
3.12 (\325 obtains this functionality using an) 128.56 429.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.02 (\324) 108 417.31 P
5 F
-0.02 (include) 110.78 417.31 P
1 F
-0.02 (\325, but chooses to modify the visibili-) 142.46 417.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.96 (ty of some of the methods.  It also defines) 108 405.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.01 (additional methods such a \324) 108 393.31 P
5 F
-0.01 (contains) 230.26 393.31 P
1 F
-0.01 (\325, \324) 267.5 393.31 P
5 F
-0.01 (sort) 278.05 393.31 P
1 F
-0.01 (\325,) 294.72 393.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.92 (etc.  The methods \324) 108 381.31 P
5 F
1.02 (aget) 194.71 381.31 P
1 F
0.92 (\325, \324) 214.17 381.31 P
5 F
1.02 (aset) 225.65 381.31 P
1 F
0.92 (\325 and \324) 244.55 381.31 P
5 F
1.02 (asize) 273.88 381.31 P
1 F
0.92 (\325) 297.22 381.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.54 (are defined as \324) 108 369.31 P
5 F
0.61 (private) 176.75 369.31 P
1 F
0.54 (\325 in \324) 206.76 369.31 P
5 F
0.61 (AREF) 227.14 369.31 P
1 F
0.54 (\325, but \324) 253.81 369.31 P
5 F
0.61 (AR-) 282.78 369.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(RAY) 108 357.31 T
1 F
(\325 redefines them to be public.) 128.56 357.31 T
1 1 0 0 0 0 1 K
306 349.98 504 489.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(class ARRAY{T} is) 342 457.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(private include AREF{T}) 354.6 447.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Mak) 367.2 437.98 T
(e these pub) 392.52 437.98 T
(lic.) 439.37 437.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(aget->aget,) 367.2 427.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(aset->aset,) 367.2 417.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(asize->asize;) 367.2 407.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(...) 354.6 397.31 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
(contains\050e:T\051:BOOL is ... end) 354.6 386.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 354.6 376.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 366.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
1.76 (This code demonstrates the use of partial) 108 325.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.04 (classes.  Each) 108 313.31 P
5 F
0.05 (MIXIN) 169.35 313.31 P
1 F
0.04 ( class provides a differ-) 197.13 313.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.2 (ent way of prompting the user; each can be) 108 301.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.47 (combined with) 108 289.31 P
5 F
0.52 (COMPUTE) 178.16 289.31 P
1 F
0.47 ( to make a com-) 228.16 289.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.82 (plete program.  The stub in) 108 277.31 P
5 F
0.91 (COMPUTE) 235.44 277.31 P
1 F
0.82 ( al-) 285.44 277.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.81 (lows that class to be type checked without) 108 265.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(needing either mix-in class.) 108 253.31 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.23 (Only) 108 229.31 P
5 F
-0.26 (COMPUTE_A) 132.42 229.31 P
1 F
-0.23 ( and) 194.65 229.31 P
5 F
-0.26 (COMPUTE_B) 216.11 229.31 P
1 F
-0.23 ( may) 278.34 229.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(actually be instantiated.) 108 217.31 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.71 (This style of code reuse is very flexible be-) 108 193.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.52 (cause the stub routines can access private) 108 181.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.6 (data in) 108 169.31 P
5 F
-0.66 (COMPUTE) 139.91 169.31 P
1 F
-0.6 (.  Such flexibility requires) 189.91 169.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.46 (extra care, because it bypasses ordinary) 108 157.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(class encapsulation.) 108 145.31 T
1 1 0 0 0 0 1 K
306 108.98 504 337.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(partial class MIXIN_A is) 342 325.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(prompt_user is ... end;) 354.6 315.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 305.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(partial class MIXIN_B is) 342 285.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(prompt_user is ... end;) 354.6 275.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 265.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(partial class COMPUTE is) 342 245.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(main is ...prompt_user; ... end;) 354.6 235.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(stub prompt_user;) 354.6 225.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 215.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(class COMPUTE_A is) 342 195.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(include COMPUTE;) 354.6 185.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(include MIXIN_A;) 354.6 175.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 165.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(class COMPUTE_B is) 342 145.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(include COMPUTE;) 354.6 135.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(include MIXIN_B;) 354.6 125.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 115.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Basic Statements) 298.61 709.51 T
4 F
(35) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
120.01 652.2 108 652.2 2 L
0 X
V
0.9 H
0 Z
N
4 18 Q
(B) 108 654 T
160.51 652.2 120.01 652.2 2 L
V
N
4 14.4 Q
(ASIC) 120.01 654 T
171.5 652.2 160.51 652.2 2 L
V
N
4 18 Q
(S) 160.51 654 T
264.31 652.2 171.5 652.2 2 L
V
N
4 14.4 Q
(TATEMENTS) 171.5 654 T
1 10 Q
(Syntax:) 108 628.33 T
0 F
(statement_list) 129.6 610.33 T
( [  statement  ]  {) 199.62 610.33 T
5 F
(;) 269.05 610.33 T
0 F
(  [  statement  ]  }) 271.83 610.33 T
(statement) 129.6 592.33 T
( declaration_statement  |  assign_statement |  if_statement) 181.85 592.33 T
( |  return_statement   |   case_statement   |  typecase_statement) 151.2 580.33 T
( |  expression_statement  |  loop_statement  |  yield_statement) 151.2 568.33 T
( |  quit_statement  |  protect_statement  |  raise_statement) 151.2 556.33 T
( |  assert_statement) 151.2 544.33 T
1 F
-0.35 (The body of a method is a semicolon separated list of statements. The statements in a state-) 108 520.33 P
-0.62 (ment list are executed sequentially unless a) 108 508.33 P
5 F
-0.69 (return) 297.17 508.33 P
1 F
-0.62 (,) 323.29 508.33 P
5 F
-0.69 (quit) 327.67 508.33 P
1 F
-0.62 (,) 343.79 508.33 P
5 F
-0.69 (yield) 348.17 508.33 P
1 F
-0.62 (, or) 368.73 508.33 P
5 F
-0.69 (raise) 384.41 508.33 P
1 F
-0.62 ( statement is executed.) 406.08 508.33 P
0.08 (In a routine with a return value, the final statement along each execution path must be ei-) 108 496.33 P
(ther a) 108 484.33 T
5 F
(return) 135.82 484.33 T
1 F
( statement or a) 161.94 484.33 T
5 F
(raise) 229.6 484.33 T
1 F
( statement.) 251.27 484.33 T
0 0 0 1 0 0 0 K
108 435.98 504 439 C
0 0 0 1 0 0 0 K
72 437.49 540 437.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Declaration statements) 108 443 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 383.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(declaration_statement) 129.6 365.31 T
( identifier_list) 231.46 365.31 T
5 F
(:) 290.92 365.31 T
0 F
(type_specifier) 296.48 365.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
200.79 340.31 108 340.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.44 (Declaration statements) 108 341.31 P
1 F
-0.44 ( are used to declare the type of one or more local variables. Local vari-) 200.79 341.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.57 (ables may also be declared in assignment statements \050page 36\051. The scope of a local variable) 108 329.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (declaration begins at the declaration and continues to the end of the statement list in which) 108 317.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.4 (the declaration occurs. The scope of method arguments is the entire body of the method.) 108 305.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (Local variables shadow routines in the class which have the same name and no arguments.) 108 293.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.65 (Within the scope of a local variable it is illegal to declare another local variable with the) 108 281.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (same name. Local variables are initialized to) 108 269.31 P
5 F
-0.27 (void) 304.51 269.31 P
1 F
-0.24 (\050page 46\051 when the containing method is) 325.36 269.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.56 (called; they are not re-initialized when the declaration is encountered in the flow of control.) 108 257.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 411.31 T
1 1 0 0 0 0 1 K
306 403.98 504 423.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(i,j,k:INT) 342 411.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
189.32 607.11 199.62 618.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 188.73 610.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
171.54 589.11 181.85 600.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 170.95 592.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
221.16 362.08 231.46 373.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 220.57 365.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(36) 108 709.51 T
0 F
(Basic Statements) 281.47 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Assignment statements) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 539.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(assign_statement) 129.6 521.31 T
( \050 expression) 212.4 521.31 T
5 F
(|) 267.96 521.31 T
0 F
(  identifier) 270.57 521.31 T
5 F
(:) 317.24 521.31 T
0 F
([  type_specifier  ]  \051) 325.58 521.31 T
5 F
(:=) 410.77 521.31 T
0 F
(  expression) 419.39 521.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
202.56 496.31 108 496.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (Assignment statements) 108 497.31 P
1 F
-0.17 ( are used to assign objects to locations and can also declare new local) 202.56 497.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.56 (variables. The expression on the right hand side must have a return type which is a subtype) 108 485.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (of the declared type of the destination specified by the left hand side. When a reference ob-) 108 473.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (ject is assigned to a location, only a) 108 461.31 P
0 F
-0.05 (reference) 264.46 461.31 P
1 F
-0.05 (to the object is assigned. This means that later) 302.66 461.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.39 (changes to the state of the object will be observable from the assigned location. Since im-) 108 449.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (mutable and closure objects cannot be modified once constructed, this issue is not relevant) 108 437.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.31 (to them. We consider each of the allowed forms for the lefthand side of an assignment in) 108 425.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(turn:) 108 413.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(1.) 108 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(\324) 121.54 395.31 T
0 F
(identi\336er) 124.32 395.31 T
1 F
(\325) 161.46 395.31 T
0 0 0 1 0 0 0 K
2 F
0.14 (If the left hand side is a local variable or an argument of a method, then the assignment is) 144 377.31 P
-0.23 (directly performed \050) 144 365.31 P
0 0 0 1 0 0 0 K
0 F
-0.23 (e.g.) 224.06 365.31 P
0 0 0 1 0 0 0 K
2 F
-0.23 ( \324) 237.95 365.31 P
0 0 0 1 0 0 0 K
5 F
-0.26 (a:=5) 243.55 365.31 P
0 0 0 1 0 0 0 K
2 F
-0.23 (\325\051. Otherwise the statement is syntactic sugar for a call of the) 263.29 365.31 P
0.52 (routine named) 144 353.31 P
10 F
0.52 (identifier) 205.03 353.31 P
2 F
0.52 ( with the right hand side of the assignment as the only argument) 241.7 353.31 P
(\050) 144 341.31 T
0 0 0 1 0 0 0 K
0 F
(e.g.) 147.33 341.31 T
0 0 0 1 0 0 0 K
2 F
( \324) 161.22 341.31 T
0 0 0 1 0 0 0 K
5 F
(a\0505\051) 167.05 341.31 T
0 0 0 1 0 0 0 K
2 F
(\325\051.) 184.83 341.31 T
0 0 0 1 0 0 0 K
8 9 Q
(2.) 108 326.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(\324) 121.54 326.31 T
0 F
(\050 expr) 124.32 326.31 T
(ession) 147.75 326.31 T
5 F
(.) 177.2 326.31 T
(|) 185.26 326.31 T
0 F
( type_speci\336er) 190.64 326.31 T
5 F
( ::) 250.55 326.31 T
0 F
(\051  identi\336er) 261.67 326.31 T
1 F
(\325) 307.14 326.31 T
0 0 0 1 0 0 0 K
2 F
0.21 (These forms are syntactic sugar for calls of a routine named) 144 308.31 P
10 F
0.21 (identifier) 388.17 308.31 P
2 F
0.21 ( with the right hand) 424.84 308.31 P
0.8 (side as an argument:) 144 296.31 P
10 F
0.8 ( \050) 228.34 296.31 P
0.8 ( expression) 234.98 296.31 P
0 0 0 1 0 0 0 K
5 F
0.89 (.) 284.36 296.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.89 (|) 290.44 296.31 P
0 0 0 1 0 0 0 K
10 F
0.8 (  type_specifier) 293.04 296.31 P
0 0 0 1 0 0 0 K
5 F
0.89 (::) 359.05 296.31 P
0 0 0 1 0 0 0 K
10 F
0.8 (\051) 368.29 296.31 P
0.8 ( identifier) 371.62 296.31 P
0 0 0 1 0 0 0 K
5 F
0.89 (\050) 418.2 296.31 P
0 0 0 1 0 0 0 K
10 F
0.8 (rhs) 425.21 296.31 P
0 0 0 1 0 0 0 K
5 F
0.89 (\051) 441.29 296.31 P
0 0 0 1 0 0 0 K
2 F
0.8 (. For example,) 444.62 296.31 P
(\324) 144 284.31 T
0 0 0 1 0 0 0 K
5 F
(b\0507\051.c:=5) 147.33 284.31 T
0 0 0 1 0 0 0 K
2 F
(\325 is sugar for \324) 187.07 284.31 T
0 0 0 1 0 0 0 K
5 F
(b\0507\051.c\0505\051) 243.72 284.31 T
0 0 0 1 0 0 0 K
2 F
(\325 and \324) 281.5 284.31 T
0 0 0 1 0 0 0 K
5 F
(A::d:=5) 307.6 284.31 T
0 0 0 1 0 0 0 K
2 F
(\325 is sugar for \324) 339.57 284.31 T
0 0 0 1 0 0 0 K
5 F
(A::d\0505\051) 396.22 284.31 T
0 0 0 1 0 0 0 K
2 F
(\325.) 426.23 284.31 T
0 0 0 1 0 0 0 K
8 9 Q
(3.) 108 269.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(\324) 121.54 269.31 T
0 F
([ expr) 124.32 269.31 T
(ession ]) 147.75 269.31 T
5 F
([) 183.03 269.31 T
0 F
( expr) 188.59 269.31 T
(ession_list) 208.69 269.31 T
5 F
( ]) 253.42 269.31 T
1 F
(\325) 261.76 269.31 T
0 0 0 1 0 0 0 K
2 F
0.41 (This form is syntactic sugar for a call of a routine named \324) 144 251.31 P
0 0 0 1 0 0 0 K
5 F
0.46 (aset) 381.68 251.31 P
0 0 0 1 0 0 0 K
2 F
0.41 (\325 with the array index ex-) 400.58 251.31 P
2.59 (pressions and the right hand side of the assignment as arguments:) 144 239.31 P
10 F
2.59 ([ expression) 436.68 239.31 P
0 0 0 1 0 0 0 K
5 F
2.88 (.) 493.53 239.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.88 (|) 501.4 239.31 P
0 0 0 1 0 0 0 K
10 F
2.69 (type_specifier) 144 227.31 P
0 0 0 1 0 0 0 K
5 F
2.99 (::) 205.29 227.31 P
0 0 0 1 0 0 0 K
10 F
2.69 (]) 216.62 227.31 P
0 0 0 1 0 0 0 K
5 F
2.99 (aset\050) 225.7 227.31 P
0 0 0 1 0 0 0 K
10 F
2.69 ( expression_list) 247.93 227.31 P
0 0 0 1 0 0 0 K
5 F
2.99 (,) 318.3 227.31 P
0 0 0 1 0 0 0 K
10 F
2.69 (rhs) 326.85 227.31 P
0 0 0 1 0 0 0 K
5 F
2.99 (\051) 344.82 227.31 P
0 0 0 1 0 0 0 K
2 F
2.69 (. For example, \324) 348.15 227.31 P
0 0 0 1 0 0 0 K
5 F
2.99 ([3]:=5) 419.82 227.31 P
0 0 0 1 0 0 0 K
2 F
2.69 (\325 is sugar for) 445.11 227.31 P
(\324) 144 215.31 T
0 0 0 1 0 0 0 K
5 F
(aset\0503,5\051) 147.33 215.31 T
0 0 0 1 0 0 0 K
2 F
(\325 and \324) 186.79 215.31 T
0 0 0 1 0 0 0 K
5 F
(e[7,8]:=5) 212.89 215.31 T
0 0 0 1 0 0 0 K
2 F
(\325 is sugar for \324) 252.09 215.31 T
0 0 0 1 0 0 0 K
5 F
(e.aset\0507,8,5\051) 308.74 215.31 T
0 0 0 1 0 0 0 K
2 F
(\325.) 364.88 215.31 T
0 0 0 1 0 0 0 K
8 9 Q
(4.) 108 200.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(\324) 121.54 200.31 T
0 F
(identi\336er) 124.32 200.31 T
5 F
( :) 163.22 200.31 T
0 F
(   [  type_speci\336er  ]) 168.78 200.31 T
1 F
(\325) 247.85 200.31 T
0 0 0 1 0 0 0 K
2 F
0.38 (This form both declares a new local variable and assigns to it \050) 144 182.31 P
0 0 0 1 0 0 0 K
0 F
0.38 (e.g.) 399.13 182.31 P
0 0 0 1 0 0 0 K
2 F
0.38 ( \324) 413.02 182.31 P
0 0 0 1 0 0 0 K
5 F
0.43 (g:INT:=5) 419.23 182.31 P
0 0 0 1 0 0 0 K
2 F
0.38 (\325\051. If a type) 457.86 182.31 P
-0.06 (specifier is not provided, then the declared type of the variable is the return type of the ex-) 144 170.31 P
-0.42 (pression on the righthand side \050) 144 158.31 P
0 0 0 1 0 0 0 K
0 F
-0.42 (e.g.) 267.7 158.31 P
0 0 0 1 0 0 0 K
2 F
-0.42 ( \324) 281.59 158.31 P
0 0 0 1 0 0 0 K
5 F
-0.47 (h::=5) 287 158.31 P
0 0 0 1 0 0 0 K
2 F
-0.42 (\325\051. The scoping rules given on page 35 apply here) 309.52 158.31 P
0.65 (as well. If a type is explicitly specified, the construct is syntactic sugar for a declaration) 144 146.31 P
(statement followed by an assignment statement.) 144 134.31 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 F
(Examples:) 108 626.31 T
1 1 0 0 0 0 1 K
306 559.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(a:=5) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(b\0507\051.c:=5) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(A::d:=5) 342 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
([3]:=5) 342 596.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e[7,8]:=5) 342 586.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(g:INT:=5) 342 576.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(h::=5) 342 566.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
202.1 518.08 212.4 529.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 201.51 521.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Basic Statements) 298.61 709.51 T
4 F
(37) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(if) 108 658 T
6 F
( statements) 114 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 569.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(if_statement) 129.6 551.31 T
5 F
(if) 194.9 551.31 T
0 F
(expr) 204.9 551.31 T
(ession) 222.51 551.31 T
5 F
(then) 251.96 551.31 T
0 F
(statement_list) 276.7 551.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( {) 151.2 539.31 T
5 F
(elsif) 159.53 539.31 T
0 F
(expr) 182.31 539.31 T
(ession) 199.91 539.31 T
5 F
(then) 229.36 539.31 T
0 F
( statement_list  }) 251.6 539.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( [) 151.2 527.31 T
5 F
(else) 159.53 527.31 T
0 F
(  statement_list  ]) 177.87 527.31 T
5 F
(end) 253.42 527.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
160.2 502.31 108 502.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.81 (if statements) 108 503.31 P
1 F
0.81 ( are used to conditionally execute statement lists according to the value of a) 160.2 503.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.26 (boolean expression. Each) 108 491.31 P
0 F
0.26 (expression) 222.5 491.31 P
1 F
0.26 ( in the form must return a boolean value. The first ex-) 264.73 491.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.2 (pression is evaluated and if it is true, the following statement list is executed. If it is false,) 108 479.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.63 (then the expressions of successive) 108 467.31 P
5 F
0.71 (elsif) 263.41 467.31 P
1 F
0.63 ( clauses are evaluated in order. The statement list) 281.19 467.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (following the first of these to return) 108 455.31 P
5 F
-0.12 (true) 267.24 455.31 P
1 F
-0.1 (is executed. If none of the expressions return true) 287.13 455.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and there is an) 108 443.31 T
5 F
(else) 175.51 443.31 T
1 F
( clause, then its statement list is executed.) 193.85 443.31 T
0 0 0 1 0 0 0 K
108 394.95 504 397.98 C
0 0 0 1 0 0 0 K
72 396.46 540 396.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(return) 108 401.98 T
6 F
( statements) 139.34 401.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 333.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(return_statement) 129.6 315.29 T
5 F
(return) 215.46 315.29 T
0 F
( [ expression ]) 241.59 315.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180.45 290.29 108 290.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.5 (return statements) 108 291.29 P
1 F
0.5 ( are used to return from routine calls. No other statements may follow a) 180.45 291.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
1.63 (return) 108 279.29 P
1 F
1.47 (statement in a statement list because they could never be executed. If a routine) 138.53 279.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (doesn\325t have a return value then it may return either by executing a) 108 267.29 P
5 F
-0.21 (return) 406.35 267.29 P
1 F
-0.19 ( statement with-) 432.47 267.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(out an) 108 255.29 T
0 F
(expression) 138.57 255.29 T
1 F
(portion or by executing the last statement in the routine body.) 183.3 255.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.34 (If a routine has a return value, then its) 108 231.29 P
5 F
0.38 (return) 282.3 231.29 P
1 F
0.34 ( statements must specify expressions whose) 308.42 231.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.02 (types are subtypes of the routine\325s declared return type. Execution of the) 108 219.29 P
5 F
0.03 (return) 432.11 219.29 P
1 F
0.02 ( statement) 458.23 219.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.33 (causes the expression to be evaluated and its value to be returned. It is a fatal error if the) 108 207.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(final statement executed in such a routine is not a) 108 195.29 T
5 F
(return) 328.76 195.29 T
1 F
( or) 354.88 195.29 T
5 F
(raise) 369.29 195.29 T
1 F
( \050page 58\051 statement.) 390.96 195.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 589.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(if a>5 then foo) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(elsif a>2 then bar) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(else error) 342 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 596.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 370.29 T
1 1 0 0 0 0 1 K
306 353.95 504 382.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(return) 342 370.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(return x) 342 360.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
182.1 548.08 192.4 559.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 181.51 551.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
202.66 312.06 212.96 323.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 202.07 315.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(38) 108 709.51 T
0 F
(Basic Statements) 281.47 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(case) 108 658 T
6 F
( statements) 133.34 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 559.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(case_statement) 129.6 541.31 T
5 F
(case) 205.63 541.31 T
0 F
( expression) 226.76 541.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(when) 151.2 529.31 T
0 F
(expression {) 180.66 529.31 T
5 F
(,) 231.22 529.31 T
0 F
( expression }) 236.78 529.31 T
5 F
( then) 289.84 529.31 T
0 F
( statement_list) 314.86 529.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 151.2 517.31 T
5 F
(when) 157.03 517.31 T
0 F
(expression {) 186.49 517.31 T
5 F
(,) 237.05 517.31 T
0 F
( expression }) 242.61 517.31 T
5 F
( then) 295.67 517.31 T
0 F
( statement_list }) 320.69 517.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 505.31 T
5 F
(else) 157.03 505.31 T
0 F
( statement_list ]) 175.37 505.31 T
5 F
(end) 245.92 505.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.54 (Multi-way branches are implemented by) 108 481.31 P
0 0 0 1 0 0 0 K
349.66 480.31 288.08 480.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.54 (case statements) 288.08 481.31 P
1 F
-0.54 (. There may be an arbitrary number) 349.66 481.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.14 (of) 108 469.31 P
0 0 0 1 0 0 0 K
172.25 468.31 119.43 468.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.14 (when clauses) 119.43 469.31 P
1 F
0.14 ( and an optional) 172.25 469.31 P
0 0 0 1 0 0 0 K
289.08 468.31 247.37 468.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.14 (else clause) 247.37 469.31 P
1 F
0.14 (. The initial) 289.08 469.31 P
0 F
0.14 (expression) 341.95 469.31 P
1 F
0.14 ( construct is evaluated first) 384.18 469.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.26 (and may have a return value of any type. This type must define one or more routines) 108 457.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (named \324) 108 445.31 P
5 F
-0.43 (is_eq) 143.44 445.31 P
1 F
-0.39 (\325 with a single argument and a boolean return value. The case statement is se-) 167.34 445.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (mantically syntactic sugar for \050equivalent to\051 an) 108 433.31 P
5 F
-0.01 (if) 321.46 433.31 P
1 F
-0.01 ( statement, each of whose branches tests) 326.46 433.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.47 (a call of) 108 421.31 P
5 F
0.52 (is_eq) 145.95 421.31 P
1 F
0.47 (. The arguments to these calls are the  expressions of successive) 169.85 421.31 P
5 F
0.52 (when) 457.07 421.31 P
1 F
0.47 ( lists.) 480.97 421.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.02 (The first one of these calls to returns) 108 409.31 P
5 F
0.02 (true) 270.6 409.31 P
1 F
0.02 ( causes the corresponding statement list to be ex-) 287.83 409.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.89 (ecuted and control passed to the statement following the) 108 397.31 P
5 F
0.99 (case) 368.94 397.31 P
1 F
0.89 ( statement. If none of the) 390.06 397.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
0.24 (when) 108 385.31 P
1 F
0.21 ( expressions matches and an) 131.9 385.31 P
5 F
0.24 (else) 261.2 385.31 P
1 F
0.21 ( clause is present, then the statement list following) 279.55 385.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(it is executed. It is a fatal error if no branch matches in the absence of an) 108 373.31 T
5 F
(else) 427.35 373.31 T
1 F
( clause.) 445.69 373.31 T
0 0 0 1 0 0 0 K
108 324.95 504 327.98 C
0 0 0 1 0 0 0 K
72 326.46 540 326.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(typecase) 108 331.98 T
6 F
( statements) 156.02 331.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 223.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(typecase_statement) 129.6 205.29 T
5 F
(typecase) 220.35 205.29 T
0 F
(  identifier) 260.38 205.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(when) 151.2 193.29 T
0 F
( type_specifier) 175.1 193.29 T
5 F
(then) 235.29 193.29 T
0 F
( statement_list) 254.75 193.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 151.2 181.29 T
5 F
(when) 157.03 181.29 T
0 F
( type_specifier) 180.93 181.29 T
5 F
(then) 241.12 181.29 T
0 F
( statement_list }) 260.58 181.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 169.29 T
5 F
(else) 157.03 169.29 T
0 F
(  statement_list ]) 175.37 169.29 T
5 F
(end) 248.42 169.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.08 (An operation that depends on the runtime type of an object held by a  variable of abstract) 108 145.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (type  may be performed inside a) 108 133.29 P
0 0 0 1 0 0 0 K
325.57 132.29 250.58 132.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.46 (typecase statement) 250.58 133.29 P
1 F
-0.46 (. The) 325.57 133.29 P
0 F
-0.46 (identifier) 348.88 133.29 P
1 F
-0.46 ( must name a local variable) 385.56 133.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.46 (or an argument of a method. If the) 108 121.29 P
5 F
0.51 (typecase) 266.29 121.29 P
1 F
0.46 ( appears in an iterator, then the mode of the) 306.31 121.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 579.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(case i) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when 5, 6 then ...) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when j then ...) 342 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(else ...) 342 596.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 586.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 300.29 T
1 1 0 0 0 0 1 K
306 243.95 504 312.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(typecase a) 342 300.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when INT then ...) 342 290.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when FLT then ...) 342 280.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when $A then ...) 342 270.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(else ...) 342 260.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 250.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
192.83 538.08 203.14 549.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 192.24 541.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
210.05 202.06 220.36 213.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 209.46 205.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Literal Expr) 294.33 709.51 T
(essions) 343.33 709.51 T
4 F
(39) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.38 (argument must be) 108 659.33 P
5 F
0.42 (once) 192.56 659.33 P
1 F
0.38 (; otherwise, the type of object that such an argument holds could) 214.24 659.33 P
(change.) 108 647.33 T
-0.46 (On execution, each successive) 108 623.33 P
0 F
-0.46 (type_specifier) 240.82 623.33 P
1 F
-0.46 ( is tested for being a supertype of the type of the) 296.02 623.33 P
-0.07 (object held by the variable. The statement list following the first matching type specifier is) 108 611.33 P
0.86 (executed and control passes to the statement following the) 108 599.33 P
5 F
0.95 (typecase) 376.76 599.33 P
1 F
0.86 (. Within each state-) 416.77 599.33 P
-0.42 (ment list, the type of the) 108 587.33 P
5 F
-0.47 (typecase) 215.14 587.33 P
1 F
-0.42 ( variable is taken to be the type specified by the matching) 255.16 587.33 P
0.06 (type specifier unless the variable\325s declared type is a subtype of it, in which case it retains) 108 575.33 P
-0.32 (its declared type. It is not legal to assign to the) 108 563.33 P
5 F
-0.36 (typecase) 311.12 563.33 P
1 F
-0.32 ( variable within the statement lists.) 351.14 563.33 P
-0.62 (If the object\325s type is not a subtype of any of the type specifiers and an) 108 551.33 P
5 F
-0.69 (else) 410.09 551.33 P
1 F
-0.62 ( clause is present,) 428.43 551.33 P
0.18 (then the statement list following it is executed. It is a fatal error for no branch to match in) 108 539.33 P
0.29 (the absence of an) 108 527.33 P
5 F
0.32 (else) 187.25 527.33 P
1 F
0.29 ( clause. The declared type of the variable is not changed within the) 205.59 527.33 P
5 F
0.17 (else) 108 515.33 P
1 F
0.15 ( statement list. If the value of the variable is) 126.34 515.33 P
5 F
0.17 (void) 322.4 515.33 P
1 F
0.15 ( when the) 340.74 515.33 P
5 F
0.17 (typecase) 387.32 515.33 P
1 F
0.15 ( is executed, then) 427.34 515.33 P
(its type is taken to be the declared type of the variable.) 108 503.33 T
0 0 0 1 0 0 0 K
108 454.98 504 458 C
0 0 0 1 0 0 0 K
72 456.49 540 456.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Expr) 108 462 T
(ession statements) 132.46 462 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 393.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(expression_statement) 129.6 375.31 T
( expression) 229.07 375.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.35 (A statement may consist of an expression that does not return a value and is executed sole-) 108 351.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ly for its side-effects.) 108 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
119 276.18 108 276.18 2 L
V
0.9 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(L) 108 277.98 T
0 0 0 1 0 0 0 K
177.9 276.18 119 276.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(ITERAL) 119 277.98 T
0 0 0 1 0 0 0 K
188.9 276.18 177.9 276.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(E) 177.9 277.98 T
0 0 0 1 0 0 0 K
282.48 276.18 188.9 276.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(XPRESSIONS) 188.9 277.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 252.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( expression) 129.6 234.31 T
( bool_literal_expression) 187.13 234.31 T
5 F
(|) 284.55 234.31 T
0 F
( char_literal_expression) 287.14 234.31 T
5 F
(|) 385.67 234.31 T
0 F
( str_literal_expression) 388.27 234.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
( |) 151.2 222.31 T
0 F
( int_literal_expression) 156.58 222.31 T
5 F
(|) 249.37 222.31 T
0 F
( flt_literal_expression) 251.97 222.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
1.75 (There are special lexical forms for literal expressions which define boolean, character,) 108 198.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (string, integer, and floating point values.  These literal forms all have a concrete type de-) 108 186.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.49 (rived from the syntax; typing of literals is not dependent on context.  Sather does not do) 108 174.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.56 (implicit type coercions \050such as promoting an integer to floating point when used in a float-) 108 162.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.43 (ing point context.\051  Types must instead be promoted explicitly by the programmer.  This) 108 150.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 430.31 T
1 1 0 0 0 0 1 K
306 413.98 504 442.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(foo\0501, x\051;) 342 430.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(bar) 342 420.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
218.77 372.08 229.08 383.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 218.18 375.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
176.83 231.08 187.14 242.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 176.24 234.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(40) 108 709.51 T
0 F
(Literal Expr) 277.2 709.51 T
(essions) 326.19 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.15 (avoids a number of portability and precision issues \050for example, when an integer can\325t be) 108 659.33 P
(represented by the floating point representation.\051) 108 647.33 T
0 0 0 1 0 0 0 K
108 530.98 504 534 C
0 0 0 1 0 0 0 K
72 532.49 540 532.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Boolean literal expr) 108 538 T
(essions) 213.79 538 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 469.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(bool_literal_expression) 129.6 451.31 T
5 F
(true) 237.32 451.31 T
(|) 257.05 451.31 T
(false) 262.14 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (BOOL) 108 427.31 P
1 F
-0.19 ( objects represent boolean values \050page 62\051. The two possible values are represented) 135.79 427.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(by the) 108 415.31 T
0 0 0 1 0 0 0 K
243.15 414.31 137.96 414.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(boolean literal expressions) 137.96 415.31 T
1 F
(: \324) 243.15 415.31 T
5 F
(true) 250.93 415.31 T
1 F
(\325 and \324) 268.16 415.31 T
5 F
(false) 295.65 415.31 T
1 F
(\325.) 316.77 415.31 T
0 0 0 1 0 0 0 K
108 366.95 504 369.98 C
0 0 0 1 0 0 0 K
72 368.46 540 368.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Character literal expr) 108 373.98 T
(essions) 222.67 373.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 295.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(char_literal_expression) 129.6 277.29 T
5 F
(\325) 238.43 277.29 T
0 F
( \050ISO_character) 240.65 277.29 T
5 F
(|) 307.67 277.29 T
(\134) 312.77 277.29 T
0 F
(escape_seq\051) 321.11 277.29 T
5 F
(\325) 369.52 277.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(escape_seq) 129.6 259.29 T
5 F
(a) 187.49 259.29 T
(|) 195.55 259.29 T
(b) 200.65 259.29 T
(|) 208.71 259.29 T
(f) 213.82 259.29 T
(|) 219.1 259.29 T
(n) 224.2 259.29 T
(|) 232.26 259.29 T
(r) 237.35 259.29 T
(|) 243.18 259.29 T
(t) 248.29 259.29 T
(|) 253.57 259.29 T
(v) 258.67 259.29 T
(|) 266.17 259.29 T
(\134) 271.27 259.29 T
(|) 276.55 259.29 T
(\325) 281.64 259.29 T
(|) 286.36 259.29 T
(") 291.46 259.29 T
(|) 297.52 259.29 T
0 F
( octal_digit {octal_digit}) 300.11 259.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
1.54 (CHAR) 108 235.29 P
1 F
1.38 ( objects represent characters \050page 62\051.) 136.33 235.29 P
0 0 0 1 0 0 0 K
434.09 234.29 316.7 234.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
1.38 (Character literal expressions) 316.7 235.29 P
1 F
1.38 ( begin and end) 434.09 235.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (with single quote marks. These may enclose either any single ISO-Latin-1 printing charac-) 108 223.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ter except single quote or backslash or an escape code starting with a backslash.) 108 211.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (The escape codes are interpreted as follows:) 108 187.29 P
5 F
-0.18 (\325\134a\325) 303.16 187.29 P
1 F
-0.17 ( is an) 315.94 187.29 P
0 F
-0.17 (alert) 340.91 187.29 P
1 F
-0.17 ( such as a bell,) 359.24 187.29 P
5 F
-0.18 (\325\134b\325) 424.33 187.29 P
1 F
-0.17 ( is the) 437.11 187.29 P
0 F
-0.17 (backspace) 465.13 187.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.34 (character,) 108 175.29 P
5 F
0.38 (\325\134f\325) 153.99 175.29 P
1 F
0.34 ( is the) 163.99 175.29 P
0 F
0.34 (form feed) 193.55 175.29 P
1 F
0.34 ( character,) 230.84 175.29 P
5 F
0.38 (\325\134n\325) 279.68 175.29 P
1 F
0.34 ( is the) 292.46 175.29 P
0 F
0.34 (newline) 322.01 175.29 P
1 F
0.34 ( character,) 353.69 175.29 P
5 F
0.38 (\325\134r\325) 402.53 175.29 P
1 F
0.34 ( is the) 413.08 175.29 P
0 F
0.34 (carriage return) 442.64 175.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.15 (character,) 108 163.29 P
5 F
-0.17 (\325\134t\325) 153.5 163.29 P
1 F
-0.15 ( is the) 163.5 163.29 P
0 F
-0.15 (horizontal tab) 191.57 163.29 P
1 F
-0.15 ( character,) 247.42 163.29 P
5 F
-0.17 (\325\134v\325) 295.27 163.29 P
1 F
-0.15 ( is the) 307.49 163.29 P
0 F
-0.15 (vertical tab) 335.57 163.29 P
1 F
-0.15 ( character,) 380.5 163.29 P
5 F
-0.17 (\325\134\134\325) 428.35 163.29 P
1 F
-0.15 ( is the) 438.35 163.29 P
0 F
-0.15 (backslash) 466.42 163.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.36 (character,) 108 151.29 P
5 F
0.4 (\325\134\325\325) 154.01 151.29 P
1 F
0.36 ( is the) 163.45 151.29 P
0 F
0.36 (single quote) 193.06 151.29 P
1 F
0.36 (character, and) 244.54 151.29 P
5 F
0.4 (\325\134"\325) 310.35 151.29 P
1 F
0.36 ( is the) 321.12 151.29 P
0 F
0.36 (double quote) 350.73 151.29 P
1 F
0.36 ( character. A backslash) 401.74 151.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (followed by one or more octal digits represents the character whose octal representation is) 108 139.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.49 (given. A backslash followed by any other character is that character. The mapping of es-) 108 127.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cape codes to other characters is defined by the Sather implementation.) 108 115.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.73 (These two expressions are equivalent.  In) 108 619.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.29 (the first, the \324) 108 607.33 P
5 F
1.44 (d) 170.09 607.33 P
1 F
1.29 (\325 is a literal suffix denoting) 175.65 607.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.59 (the type.  In the second, \324) 108 595.33 P
5 F
0.66 (3.14) 221.74 595.33 P
1 F
0.59 (\325 is the literal) 241.2 595.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(and \324) 108 583.33 T
5 F
(.fltd) 130.21 583.33 T
1 F
(\325 is an explicit conversion.) 146.33 583.33 T
1 1 0 0 0 0 1 K
306 576 504 632 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(3.14d) 342 610 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- A doub) 379.8 610 T
(le precision liter) 416.64 610 T
(al) 479.06 610 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(3.14.fltd) 342 600 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Single) 379.8 600 T
(, b) 413.17 600 T
(ut con) 423 600 T
(v) 447.34 600 T
(er) 451.61 600 T
(ted) 459.97 600 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 506.31 T
1 1 0 0 0 0 1 K
306 489.98 504 518.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(true) 342 506.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(false) 342 496.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 342.29 T
1 1 0 0 0 0 1 K
306 315.95 504 354.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(\325a\325) 342 342.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(\325\134n\325) 342 332.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(\325\134016\325) 342 322.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
224.51 448.08 234.82 459.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 223.92 451.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
225.62 274.06 235.92 285.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 225.03 277.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
174.69 256.06 184.99 267.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 174.1 259.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Literal Expr) 294.33 709.51 T
(essions) 343.33 709.51 T
4 F
(41) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(String literal expr) 108 658 T
(essions) 202.45 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 589.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(str_literal_expression) 129.6 571.31 T
5 F
(") 232.13 571.31 T
0 F
({ISO_character}) 235.68 571.31 T
5 F
(") 301.04 571.31 T
0 F
({) 307.36 571.31 T
5 F
(") 310.7 571.31 T
0 F
({ISO_character}) 314.24 571.31 T
5 F
(") 379.6 571.31 T
0 F
(}) 383.14 571.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.36 (STR) 108 547.31 P
1 F
-0.32 ( objects represent strings \050page 62\051.) 128 547.31 P
0 0 0 1 0 0 0 K
383.7 546.31 283.22 546.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.32 (String literal expressions) 283.22 547.31 P
1 F
-0.32 ( begin and end with double) 383.7 547.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.27 (quote marks. The characters making up the string are specified in this construct from left) 108 535.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (to right. A backslash starts an escape sequence as with character literals. All successive oc-) 108 523.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.53 (tal digits following a backslash are taken to define a single character. Individual double-) 108 511.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.67 (quote-bounded segments of string literals may not extend beyond a single line in the) 108 499.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.95 (source text. However, successive quote bounded segments are concatenated together to) 108 487.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.32 (form a single string and can be used to allow string literals to span more than one line of) 108 475.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (source code. They may also be used to force the end of an octal encoded character. For ex-) 108 463.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.52 (ample:) 108 451.31 P
5 F
-0.58 ("\1340367") 140.01 451.31 P
1 F
-0.52 ( is a one character string, while) 172.13 451.31 P
5 F
-0.58 ("\13403""67") 307.84 451.31 P
1 F
-0.52 ( is a three character string. Such seg-) 347.06 451.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ments may be separated by comments and whitespace.) 108 439.31 T
0 0 0 1 0 0 0 K
108 390.95 504 393.98 C
0 0 0 1 0 0 0 K
72 392.46 540 392.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Integer literal expr) 108 397.98 T
(essions) 207.11 397.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 269.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( int_literal_expression) 129.6 251.29 T
( [) 232.7 251.29 T
5 F
(-) 238.52 251.29 T
0 F
(] \050binary_int) 241.85 251.29 T
5 F
(|) 296.48 251.29 T
0 F
( octal_int) 299.08 251.29 T
5 F
(|) 339.82 251.29 T
0 F
( decimal_int) 342.42 251.29 T
5 F
(|) 394.83 251.29 T
0 F
( hex_int\051 [) 397.42 251.29 T
5 F
(i) 439.64 251.29 T
0 F
(]) 441.86 251.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( binary_int) 129.6 233.29 T
5 F
(0b) 190.38 233.29 T
0 F
( {binary_digit) 201.49 233.29 T
5 F
(|) 260.02 233.29 T
(_) 265.11 233.29 T
0 F
(}) 270.67 233.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( binary_digit) 129.6 215.29 T
5 F
(0) 197.6 215.29 T
(|) 205.65 215.29 T
(1) 210.76 215.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( octal_int) 129.6 197.29 T
5 F
(0o) 183.13 197.29 T
0 F
( {octal_digit) 194.26 197.29 T
5 F
(|) 245.54 197.29 T
(_) 250.63 197.29 T
0 F
(}) 256.2 197.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( octal_digit) 129.6 179.29 T
5 F
(0) 190.35 179.29 T
(|) 198.41 179.29 T
(1) 203.51 179.29 T
(|) 211.57 179.29 T
(2) 216.68 179.29 T
(|) 224.74 179.29 T
(3) 229.84 179.29 T
(|) 237.9 179.29 T
(4) 242.99 179.29 T
(|) 251.05 179.29 T
(5) 256.15 179.29 T
(|) 264.21 179.29 T
(6) 269.32 179.29 T
(|) 277.38 179.29 T
(7) 282.48 179.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( decimal_int) 129.6 161.29 T
( decimal_digit {decimal_digit) 192.32 161.29 T
5 F
(|) 312.4 161.29 T
(_) 317.51 161.29 T
0 F
(}) 323.07 161.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( hex_int) 129.6 143.29 T
5 F
(0x) 177.96 143.29 T
0 F
( {hex_digit) 188.52 143.29 T
5 F
(|) 234.63 143.29 T
(_) 239.74 143.29 T
0 F
(}) 245.29 143.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( hex_digit) 129.6 125.29 T
( decimal_digit) 182.68 125.29 T
5 F
(|) 242.32 125.29 T
(a) 247.41 125.29 T
(|) 255.48 125.29 T
(b) 260.58 125.29 T
(|) 268.64 125.29 T
(c) 273.73 125.29 T
(|) 281.23 125.29 T
(d) 286.33 125.29 T
(|) 294.39 125.29 T
(e) 299.49 125.29 T
(|) 307.55 125.29 T
(f) 312.65 125.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 F
(Examples:) 108 626.31 T
1 1 0 0 0 0 1 K
306 609.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
("a string literal") 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
("concat"  "enation") 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 366.29 T
1 1 0 0 0 0 1 K
306 289.95 504 378.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(14) 342 366.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(14i) 342 356.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(-4532) 342 346.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(39_832_983_298) 342 336.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(0b101011) 342 326.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(-0b_10111010_00101100_01010101) 342 316.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(0o372363i) 342 306.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(0x_e98a_7c4d_65d7_6aa6_932d) 342 296.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
219.33 568.08 229.64 579.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 218.74 571.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
222.39 248.06 232.7 259.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 221.8 251.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
177.57 230.06 187.88 241.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 176.98 233.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
184.79 212.06 195.1 223.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 184.2 215.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
170.33 194.06 180.64 205.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 169.74 197.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
177.55 176.06 187.86 187.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 176.96 179.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
182.01 158.06 192.32 169.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 181.42 161.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
165.16 140.06 175.46 151.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 164.57 143.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
172.38 122.06 182.68 133.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 171.79 125.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(42) 108 709.51 T
0 F
(Basic Expr) 279.89 709.51 T
(essions) 323.5 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
5 F
0 X
0.8 (INT) 108 659.33 P
1 F
0.72 ( objects represent machine integers and) 124.11 659.33 P
5 F
0.8 (INTI) 304.95 659.33 P
1 F
0.72 ( objects represent infinite precision inte-) 323.85 659.33 P
0.09 (gers \050page 62\051. The literal form for) 108 647.33 P
5 F
0.1 (INTI) 261.95 647.33 P
1 F
0.09 (objects ends with a trailing \324) 283.72 647.33 P
5 F
0.1 (i) 408.11 647.33 P
1 F
0.09 (\325. A leading \324) 410.33 647.33 P
5 F
0.1 (-) 467.03 647.33 P
1 F
0.09 (\325 sign is) 470.36 647.33 P
0.17 (used to denote a negative integer. Integer literals can be represented in four bases: binary) 108 635.33 P
-0.16 (is base 2, octal is base 8, decimal is base 10 and hexadecimal is base 16. These are indicated) 108 623.33 P
0.08 (by the prefixes: \324) 108 611.33 P
5 F
0.09 (0b) 181.15 611.33 P
1 F
0.08 (\325, \324) 192.27 611.33 P
5 F
0.09 (0o) 202.9 611.33 P
1 F
0.08 (\325, nothing, and \324) 214.02 611.33 P
5 F
0.09 (0x) 283.89 611.33 P
1 F
0.08 (\325 respectively. Underscores may be used within) 294.45 611.33 P
-0.31 (integer literals to improve readability and are ignored.) 108 599.33 P
5 F
-0.35 (INT) 348.55 599.33 P
1 F
-0.31 ( literals are only legal if they are) 364.66 599.33 P
-0.15 (in the representable range of the Sather implementation, which is at least 32 bits \050page 62\051.) 108 587.33 P
0 0 0 1 0 0 0 K
108 538.98 504 542 C
0 0 0 1 0 0 0 K
72 540.49 540 540.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Floating point literal expr) 108 546 T
(essions) 246.8 546 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 477.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(flt_literal_expression) 129.6 459.31 T
( [) 227.41 459.31 T
5 F
(-) 233.24 459.31 T
0 F
(] decimal_int) 236.57 459.31 T
5 F
(.) 292.32 459.31 T
0 F
(decimal_int [) 297.88 459.31 T
5 F
(e) 351.11 459.31 T
0 F
( [) 356.67 459.31 T
5 F
(-) 362.51 459.31 T
0 F
(] decimal_int]  [) 365.83 459.31 T
5 F
( d) 430.73 459.31 T
0 F
( ]) 439.08 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.45 (FLT) 108 435.31 P
1 F
-0.41 ( and) 125.78 435.31 P
5 F
-0.45 (FLTD) 146.9 435.31 P
1 F
-0.41 (objects represent floating point numbers according to the single and double) 174.23 435.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.3 (representations defined by the IEEE-754-1985 standard \050see also page 62\051.  A floating point) 108 423.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.47 (literal is of type) 108 411.31 P
5 F
-0.52 (FLT) 177.42 411.31 P
1 F
-0.47 ( unless  suffixed by \324d\325 designating  a) 195.2 411.31 P
5 F
-0.52 (FLTD) 357.17 411.31 P
1 F
-0.47 ( literal. The optional \324) 382.17 411.31 P
5 F
-0.52 (e) 474.88 411.31 P
1 F
-0.47 (\325 por-) 480.44 411.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.06 (tion is used to specify a power of 10 by which to multiply the decimal value. Underscores) 108 399.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (may be used within floating point literals to improve readability and are ignored. Literal) 108 387.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values are only legal if they are within the range specified by the IEEE standard.) 108 375.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
120.01 312.18 108 312.18 2 L
V
0.9 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(B) 108 313.98 T
0 0 0 1 0 0 0 K
160.51 312.18 120.01 312.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(ASIC) 120.01 313.98 T
0 0 0 1 0 0 0 K
171.5 312.18 160.51 312.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(E) 160.51 313.98 T
0 0 0 1 0 0 0 K
265.09 312.18 171.5 312.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(XPRESSIONS) 171.5 313.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 288.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( expression) 129.6 270.31 T
( self_expression) 187.13 270.31 T
5 F
(|) 252.71 270.31 T
0 F
( local_expression) 255.3 270.31 T
5 F
(|) 326.05 270.31 T
0 F
( call_expression) 328.64 270.31 T
5 F
(|) 394.95 270.31 T
0 F
(  void_expression) 397.55 270.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 258.31 T
0 F
( void_test_expression) 153.8 258.31 T
5 F
(|) 242.69 258.31 T
0 F
( new_expression) 245.29 258.31 T
5 F
(|) 314.19 258.31 T
0 F
( create_expression) 316.79 258.31 T
5 F
(|) 392.53 258.31 T
0 F
( array_expression) 395.13 258.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 246.31 T
0 F
( and_expression) 153.8 246.31 T
5 F
(|) 221.03 246.31 T
0 F
( or_expression) 223.63 246.31 T
5 F
(|) 284.19 246.31 T
0 F
( sugar_expression) 286.79 246.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 234.31 T
0 F
( while!_expression) 153.8 234.31 T
5 F
(|) 231.03 234.31 T
0 F
( until!_expression) 233.63 234.31 T
5 F
(|) 309.2 234.31 T
0 F
( break!_expression) 311.8 234.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 222.31 T
0 F
( except_expression) 153.8 222.31 T
5 F
(|) 231.21 222.31 T
0 F
( initial_expression) 233.81 222.31 T
5 F
(|) 310.49 222.31 T
0 F
(  result_expression) 313.09 222.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 210.31 T
0 F
( closure_create_expression) 153.8 210.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.48 (Sather) 108 186.31 P
0 0 0 1 0 0 0 K
184.21 185.31 138.09 185.31 2 L
V
0.5 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.48 (expressions) 138.09 186.31 P
1 F
-0.48 ( are used to compute values or to cause side-effects. If they return a value,) 184.21 186.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(then they have a) 108 174.31 T
0 0 0 1 0 0 0 K
229.22 173.31 183.38 173.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(return type) 183.38 174.31 T
1 F
( that is either explicitly declared or inferred from context.) 229.22 174.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 514.31 T
1 1 0 0 0 0 1 K
306 497.98 504 526.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(12.34) 342 514.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(3.498_239e-8d) 342 504.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
217.11 456.08 227.42 467.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 216.52 459.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
176.83 267.08 187.14 278.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 176.24 270.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Basic Expr) 297.02 709.51 T
(essions) 340.64 709.51 T
4 F
(43) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(self) 108 658 T
6 F
( expr) 126.67 658 T
(essions) 152.12 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 598.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(self_expression) 129.6 580.31 T
5 F
(self) 205.48 580.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.65 555.31 108 555.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.69 (self expressions) 108 556.31 P
1 F
0.69 ( may appear in the bodies and in the) 170.65 556.31 P
5 F
0.77 (pre) 340.72 556.31 P
1 F
0.69 ( and) 355.17 556.31 P
5 F
0.77 (post) 378.49 556.31 P
1 F
0.69 ( clauses of routines and) 397.39 556.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (iters. They return the object on which the method was called. The return type is the type in) 108 544.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(which the method appears.) 108 532.31 T
0 0 0 1 0 0 0 K
108 483.95 504 486.98 C
0 0 0 1 0 0 0 K
72 485.46 540 485.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Local variable access expr) 108 490.98 T
(essions) 247.21 490.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 431.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(local_expression) 129.6 413.29 T
( identifier) 208.15 413.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.03 (The name of an argument or local variable in a method is an expression which returns the) 108 389.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.54 (value of that variable. The return type of such an expression is the declared type of the vari-) 108 377.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.22 (able. Local variables may be accessed only within the body of a method. Arguments may) 108 365.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(additionally be accessed in method) 108 353.29 T
5 F
(pre) 265.83 353.29 T
1 F
( and) 280.28 353.29 T
5 F
(post) 302.21 353.29 T
1 F
( clauses.) 321.11 353.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.04 (All other expressions consisting of a single identifier are method calls on) 108 329.29 P
5 F
0.05 (self) 431.24 329.29 P
1 F
0.04 ( as described) 446.8 329.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(in the next section.) 108 317.29 T
0 0 0 1 0 0 0 K
108 268.93 504 271.95 C
0 0 0 1 0 0 0 K
72 270.44 540 270.44 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Method call expr) 108 275.95 T
(essions) 197.78 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 197.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(call_expression) 129.6 179.26 T
( [ expression) 203.71 179.26 T
5 F
(.) 259.27 179.26 T
(|) 267.33 179.26 T
0 F
(  type_specifier) 269.92 179.26 T
5 F
(::) 332.61 179.26 T
0 F
(]) 343.73 179.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 identifier) 151.2 167.26 T
5 F
(|) 198.71 167.26 T
0 F
( iter_name \051  [) 204.09 167.26 T
5 F
( \050) 261.31 167.26 T
0 F
(  modal_list) 267.42 167.26 T
5 F
(\051) 319.64 167.26 T
0 F
(]) 325.75 167.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(modal_list) 129.6 149.26 T
( routine_mode  expression {) 184.62 149.26 T
5 F
(,) 298.24 149.26 T
0 F
(   routine_mode  expression  }) 301.02 149.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.38 (The most common expressions in Sather programs are) 108 125.26 P
0 0 0 1 0 0 0 K
397.03 124.26 347.51 124.26 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.38 (method calls) 347.51 125.26 P
1 F
-0.38 (. The) 397.03 125.26 P
0 F
-0.38 (identifier) 420.52 125.26 P
1 F
-0.38 ( names the) 457.2 125.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.45 (method being called. The object to which the method is applied is determined by what pre-) 108 113.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 618.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(self) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 459.29 T
1 1 0 0 0 0 1 K
306 451.95 504 471.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(a) 342 459.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 244.26 T
1 1 0 0 0 0 1 K
306 217.93 504 256.93 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(a\0505,7\051) 342 244.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(b.a\0505,7\051) 342 234.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(A::a\0505,7\051) 342 224.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
192.67 577.08 202.98 588.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 192.08 580.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
197.84 410.06 208.14 421.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 197.25 413.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
193.4 176.04 203.7 187.01 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 192.81 179.26 T
0 0 0 1 0 0 0 K
0 0 612 792 C
174.32 146.04 184.62 157.01 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 173.73 149.26 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(44) 108 709.51 T
0 F
(Basic Expr) 279.89 709.51 T
(essions) 323.5 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.06 (cedes the) 108 659.33 P
0 F
0.06 (identifier) 151.37 659.33 P
1 F
0.06 (. If nothing precedes it, then the form is syntactic sugar for a call on) 188.05 659.33 P
5 F
0.07 (self) 488.44 659.33 P
1 F
-0.17 (\050) 108 647.33 P
0 F
-0.17 (e.g.) 111.33 647.33 P
1 F
-0.17 ( \324) 125.22 647.33 P
5 F
-0.19 (a\0505,7\051) 130.32 647.33 P
1 F
-0.17 (\325 is short for \324) 156.45 647.33 P
5 F
-0.19 (self.a\0505,7\051) 213.93 647.33 P
1 F
-0.17 (\325\051. If the) 258.39 647.33 P
0 F
-0.17 (identifier) 294.54 647.33 P
1 F
-0.17 ( is preceded by an expression and a dot) 331.22 647.33 P
-0.28 (\324) 108 635.33 P
5 F
-0.31 (.) 110.78 635.33 P
1 F
-0.28 (\325, then the method is called on the object returned by the expression. If) 113.56 635.33 P
0 F
-0.28 (identifier) 422.3 635.33 P
1 F
-0.28 ( is preced-) 458.98 635.33 P
-0.3 (ed by a type specifier and a double colon \324) 108 623.33 P
5 F
-0.33 (::) 291.42 623.33 P
1 F
-0.3 (\325, then the method is taken from the interface of) 296.98 623.33 P
(the specified type with) 108 611.33 T
5 F
(self) 211.35 611.33 T
1 F
( initialized to) 226.91 611.33 T
5 F
(void) 287.66 611.33 T
1 F
( as described on page 46.) 306 611.33 T
(When a method call occurs, the following takes place in strict order:) 108 587.33 T
8 9 Q
(1.) 108 569.33 T
1 10 Q
(If it is an iterator call, and this call has not yet been evaluated since entering the en-) 121.54 569.33 T
(closing loop, any  \324) 121.54 557.33 T
5 F
(once) 204.38 557.33 T
1 F
(\325 ar) 226.06 557.33 T
(guments ar) 240.11 557.33 T
(e evaluated, left to right.) 289.91 557.33 T
8 9 Q
(2.) 108 542.33 T
1 10 Q
( \324in\325 and) 121.54 542.33 T
5 F
(  \324inout) 157.76 542.33 T
1 F
(\325 ar) 187.22 542.33 T
(guments ar) 201.27 542.33 T
(e evaluated, left to right.) 251.07 542.33 T
8 9 Q
(3.) 108 527.33 T
1 10 Q
(The method call occurs.  \324) 121.54 527.33 T
5 F
(out) 234.15 527.33 T
1 F
(\325 ar) 248.05 527.33 T
(guments ar) 262.1 527.33 T
(e unassigned in the called method.  It is a) 311.9 527.33 T
(fatal err) 121.54 515.33 T
(or to use the value of an \324) 156.05 515.33 T
5 F
(out) 267.38 515.33 T
1 F
(\325 ar) 281.28 515.33 T
(gument in the called method befor) 295.33 515.33 T
(e it has) 448.03 515.33 T
(been assigned.  If the method terminates due to an uncaught exception, the following) 121.54 503.33 T
(steps do not take place.) 121.54 491.33 T
8 9 Q
(4.) 108 476.33 T
1 10 Q
(An assignment to each \324) 121.54 476.33 T
5 F
(out) 227.16 476.33 T
1 F
(\325 and \324) 241.06 476.33 T
5 F
(inout) 268.55 476.33 T
1 F
(\325 ar) 290.23 476.33 T
(gument occurs in the caller) 304.28 476.33 T
(, left to right.) 422.99 476.33 T
(\324) 121.54 464.33 T
5 F
(out) 124.32 464.33 T
1 F
(\325 and \324) 138.22 464.33 T
5 F
(inout) 165.71 464.33 T
1 F
(\325 ar) 187.39 464.33 T
(guments behave accor) 201.44 464.33 T
(ding to the syntactic sugar r) 299.66 464.33 T
(ules that also ap-) 422.73 464.33 T
(ply to the left side of \324) 121.54 452.33 T
5 F
(:=) 217.52 452.33 T
1 F
(\325 assignments.) 226.14 452.33 T
8 9 Q
(5.) 108 437.33 T
1 10 Q
(The r) 121.54 437.33 T
(eturn value, if any) 144.55 437.33 T
(, becomes available to the surr) 224.29 437.33 T
(ounding context.) 357.65 437.33 T
1.64 (Sather supports routine and iterator) 108 413.33 P
324.91 412.33 277.69 412.33 2 L
V
0.5 H
0 Z
N
0 F
1.64 (overloading) 277.69 413.33 P
1 F
1.64 (. In addition to the name, the number,) 324.91 413.33 P
0.16 (types, and modes of arguments in a call and whether a return value is used all contribute) 108 401.33 P
0.38 (to the selection of the method. The) 108 389.33 P
0 F
0.38 (modal_list) 265.53 389.33 P
1 F
0.38 ( portion of a call must supply an expression) 307.75 389.33 P
0.13 (corresponding to each declared argument of the method. There must exist a method with) 108 377.33 P
(the specified name such that:) 108 365.33 T
8 9 Q
(1.) 108 347.33 T
1 10 Q
(for each \324in\325 and \324once\325 ar) 121.54 347.33 T
(gument, the type of each expr) 232.89 347.33 T
(ession is a subtype of the de-) 364.24 347.33 T
(clar) 121.54 335.33 T
(ed type of the corr) 137.66 335.33 T
(esponding ar) 218.46 335.33 T
(gument, and) 276.45 335.33 T
8 9 Q
(2.) 108 320.33 T
1 10 Q
(for each \324out\325) 121.54 320.33 T
(\325 ar) 179.27 320.33 T
(gument, the type of each expr) 193.32 320.33 T
(ession is a supertype of the corr) 324.67 320.33 T
(espond-) 464.2 320.33 T
(ing ar) 121.54 308.33 T
(gument, and) 147.1 308.33 T
8 9 Q
(3.) 108 293.33 T
1 10 Q
(for each \324inout\325 ar) 121.54 293.33 T
(gument, the type of each expr) 199.64 293.33 T
(ession is the exact type of the corr) 330.99 293.33 T
(e-) 479.52 293.33 T
(sponding ar) 121.54 281.33 T
(gument.) 174.74 281.33 T
0.28 (If there is more than one such method, there must be a unique one which is) 108 257.33 P
501.5 256.33 447.24 256.33 2 L
V
N
0 F
0.28 (most specific) 447.24 257.33 P
1 F
0.28 (,) 501.5 257.33 P
(conforming to all others.) 108 245.33 T
2.81 (If the method defines a return value, it must be used \050) 108 221.33 P
0 F
2.81 (i.e.) 376.27 221.33 P
1 F
2.81 ( the call may not be an) 387.94 221.33 P
0 F
1.28 (expression_statement) 108 209.33 P
1 F
1.28 (\051. Only non-private routines and iters may be called from outside a) 194.67 209.33 P
(class, but all routines and iters may be called from inside a class.) 108 197.33 T
-0.14 (Sather also supports) 108 173.33 P
270.45 172.33 199.95 172.33 2 L
V
N
0 F
-0.14 (dynamic dispatch) 199.95 173.33 P
1 F
-0.14 ( on the type of) 270.45 173.33 P
5 F
-0.16 (self) 335.8 173.33 P
1 F
-0.14 ( when the expression on which the) 351.36 173.33 P
0.37 (call is made has an abstract declared return type. The method matching the call from the) 108 161.33 P
0.22 (runtime type of the returned object is actually executed. Because of the fundamental sub-) 108 149.33 P
0.37 (typing rule \050page 20\051, if the abstract type specifies a conforming method, so will the type) 108 137.33 P
(of the returned object.) 108 125.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Basic Expr) 297.02 709.51 T
(essions) 340.64 709.51 T
4 F
(45) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.34 (Direct calls of a type\325s routines or iters may be made using the double colon \324) 108 659.33 P
5 F
-0.38 (::) 443.05 659.33 P
1 F
-0.34 (\325 syntax. The) 448.61 659.33 P
0 F
0.59 (type_specifier) 108 647.33 P
1 F
0.59 ( must specify a reference, immutable, or external class. In such calls) 163.19 647.33 P
5 F
0.66 (self) 470.29 647.33 P
1 F
0.59 ( has) 485.85 647.33 P
(the) 108 635.33 T
5 F
(void) 124.37 635.33 T
1 F
( default value described on page 46.) 142.71 635.33 T
4 11 Q
(Modes) 108 604.67 T
1 10 Q
0.69 (Method ar) 108 587.33 P
0.69 (guments each have a mode.  Modes ar) 154.86 587.33 P
0.69 (e speci\336ed by a keywor) 328.56 587.33 P
0.69 (d pr) 435.03 587.33 P
0.69 (eceding ar-) 454.11 587.33 P
(gument names; if no keywor) 108 575.33 T
(d is given, the ar) 234.47 575.33 T
(gument mode defaults to \324in\325.) 307.6 575.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(Mode) 112.63 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 298 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(in) 122.74 521.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (All ar) 152.62 521.33 P
-0.17 (guments are \324in\325 by def) 175.33 521.33 P
-0.17 (ault; there is no \324in\325 k) 267.88 521.33 P
-0.17 (e) 353.33 521.33 P
-0.17 (yw) 357.62 521.33 P
-0.17 (ord.  \324In\325 ar) 369.74 521.33 P
-0.17 (guments pass a cop) 415.15 521.33 P
-0.17 (y) 492.04 521.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the ar) 152.62 509.33 T
(gument from the caller to the called method.  W) 185.76 509.33 T
(ith reference types, this is a) 377.55 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (cop) 152.62 497.33 P
-0.25 (y of the reference to an object; the called method sees the same object as the caller) 166.96 497.33 P
-0.25 (.) 492.37 497.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(out) 119.68 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(An \324) 152.62 477.33 T
5 F
(out) 170.68 477.33 T
2 F
(\325 ar) 184.57 477.33 T
(gument is passed from the called method to the caller when the called) 197.99 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method returns.  It is a f) 152.62 465.33 T
(atal error for the called method to e) 248.35 465.33 T
(xamine the v) 389.55 465.33 T
(alue of the) 440.95 465.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324) 152.62 453.33 T
5 F
(out) 155.96 453.33 T
2 F
(\325 ar) 169.85 453.33 T
(gument before assigning to it.  The v) 183.27 453.33 T
(alue of an \324) 330.23 453.33 T
5 F
(out) 375.49 453.33 T
2 F
(\325 ar) 389.39 453.33 T
(gument may only be) 402.82 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(used after it has appeared on the left side of an assignment.) 152.62 441.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(inout) 115.79 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(An \324) 152.62 421.33 T
5 F
(inout) 170.68 421.33 T
2 F
(\325 ar) 192.35 421.33 T
(gument is passed to the called method and then back to the caller when) 205.77 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the method returns.  It is not passed by reference; modi\336cations by the called method) 152.62 409.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(are not observ) 152.62 397.33 T
(ed until the method returns \050v) 209.12 397.33 T
(alue-result\051.) 327.48 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(once) 115.79 377.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Only iterators may ha) 152.62 377.33 T
(v) 239.35 377.33 T
(e \324) 244.21 377.33 T
5 F
(once) 254.48 377.33 T
2 F
(\325 ar) 276.15 377.33 T
(guments.  Such ar) 289.58 377.33 T
(guments are e) 361.05 377.33 T
(v) 416.35 377.33 T
(aluated e) 421.1 377.33 T
(xactly) 456.77 377.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(once, the \336rst time the iterator is encountered in the containing loop.  \324) 152.62 365.33 T
5 F
(once) 434.54 365.33 T
2 F
(\325 ar) 456.21 365.33 T
(gu-) 469.64 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ments otherwise beha) 152.62 353.33 T
(v) 239.07 353.33 T
(e as \324in\325 ar) 243.93 353.33 T
(guments.) 286.23 353.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.62 559 106.62 347 2 L
V
2 H
0 Z
N
146.62 561 146.62 345 2 L
V
0.5 H
N
505.38 559 505.38 347 2 L
V
2 H
N
105.62 560 506.38 560 2 L
V
N
105.62 534 506.38 534 2 L
V
N
105.62 490 506.38 490 2 L
V
0.5 H
N
105.62 434 506.38 434 2 L
V
N
105.62 390 506.38 390 2 L
V
N
105.62 346 506.38 346 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(46) 108 709.51 T
0 F
(Basic Expr) 279.89 709.51 T
(essions) 323.5 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Mode examples) 108 658.67 T
0 0 0 1 0 0 0 K
108 481.98 504 485 C
0 0 0 1 0 0 0 K
72 483.49 540 483.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(void) 108 489 T
6 F
( expr) 130.01 489 T
(essions) 155.46 489 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 429.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(void_expression) 129.6 411.31 T
5 F
(void) 209.35 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.2 (A) 108 387.31 P
0 0 0 1 0 0 0 K
180.64 386.31 118.49 386.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.2 (void expression) 118.49 387.31 P
1 F
0.2 ( returns a value whose type is determined from context.) 180.64 387.31 P
5 F
0.23 (void) 432.15 387.31 P
1 F
0.2 ( is the value) 450.49 387.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.44 (that a variable of the type receives when it is declared but not explicitly initialized. The val-) 108 375.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (ue of) 108 363.31 P
5 F
-0.17 (void) 132.31 363.31 P
1 F
-0.15 ( for abstract, reference, and bound variables is a special value that represents the) 150.65 363.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (absence of a reference to an object. The value of) 108 351.31 P
5 F
-0.37 (void) 316.5 351.31 P
1 F
-0.33 ( for boolean variables is) 334.84 351.31 P
5 F
-0.37 (false) 440.52 351.31 P
1 F
-0.33 ( \050page 40\051) 461.64 351.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.43 (and for other immutable types it is determined by recursively setting each attribute and ar-) 108 339.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.22 (ray element to) 108 327.31 P
5 F
0.25 (void) 174.6 327.31 P
1 F
0.22 (. The built-in immutable types are defined in terms of arrays of) 192.94 327.31 P
5 F
0.25 (BOOL) 476.21 327.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.49 (and so have all their bits set to) 108 315.31 P
5 F
0.54 (false) 248.28 315.31 P
1 F
0.49 ( by this rule.  For numerical types, this results in the) 269.4 315.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(appropriate version of \324zero\325 \050see page 62\051.) 108 303.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.49 (void) 108 279.31 P
1 F
-0.44 ( expressions may appear as the initializer for a constant or shared attribute, as the right) 126.34 279.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (hand side of an assignment statement, as the return value in a) 108 267.31 P
5 F
-0.07 (return) 382.9 267.31 P
1 F
-0.06 ( or) 409.02 267.31 P
5 F
-0.07 (yield) 423.3 267.31 P
1 F
-0.06 (statement, as) 446.57 267.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.48 (the value of one of the expressions in a) 108 255.31 P
5 F
0.54 (case) 285.96 255.31 P
1 F
0.48 (statement, as the exception object in a) 310.4 255.31 P
5 F
0.54 (raise) 482.33 255.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.2 (statement, or as an argument value in a method call or in a creation expression \050page 47\051.) 108 243.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In this last case, the argument is ignored in resolving overloading.) 108 231.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.31 (It is a fatal error to access object attributes of a void variable of reference type or to make) 108 207.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.19 (any calls on a void variable of abstract type. An explicit \324) 108 195.31 P
5 F
0.22 (void) 360.04 195.31 P
1 F
0.19 (\325 expression may not appear) 378.38 195.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(as the left argument of the dot \324) 108 183.31 T
5 F
(.) 246.41 183.31 T
1 F
(\325 operator \050page 43\051.) 249.19 183.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.4 (This routine swaps the values of its argu-) 108 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.06 (ments.  If the arguments were not designat-) 108 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.47 (ed \324inout\325, calling the routine would have) 108 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(no effect.) 108 594.33 T
1 1 0 0 0 0 1 K
306 584 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(swap\050inout x, inout y:T\051 is) 342 631 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(temp::=x;) 354.6 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(x:=y;) 354.6 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(y:=temp) 354.6 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.93 (This iterator returns \050head, tail\051 edges of a) 108 559.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
4.07 (graph.  \324out\325 arguments are convenient) 108 547.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when one wants to return multiple values.) 108 535.33 T
1 1 0 0 0 0 1 K
306 528 504 572 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(edges!\050out head, out tail:V\051 is ... end) 342 550 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 457.31 T
1 1 0 0 0 0 1 K
306 449.98 504 469.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(void) 342 457.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
196.55 408.08 206.86 419.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 195.96 411.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Basic Expr) 297.02 709.51 T
(essions) 340.64 709.51 T
4 F
(47) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(void) 108 658 T
6 F
( test expr) 130.01 658 T
(essions) 178.45 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 598.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(void_test_expression) 129.6 580.31 T
5 F
(void) 228.79 580.31 T
(\050) 252.41 580.31 T
0 F
( expression) 255.74 580.31 T
5 F
(\051) 302.98 580.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
192.39 555.31 108 555.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.31 (Void test expressions) 108 556.31 P
1 F
-0.31 ( evaluate their argument and return a boolean value which is true if the) 192.39 556.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value is) 108 544.31 T
5 F
(void) 144.53 544.31 T
1 F
(\050page 46\051.) 165.65 544.31 T
0 0 0 1 0 0 0 K
108 495.95 504 498.98 C
0 0 0 1 0 0 0 K
72 497.46 540 497.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(new) 108 502.98 T
6 F
( expr) 130.01 502.98 T
(essions) 155.46 502.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 434.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(new_expression) 129.6 416.29 T
5 F
(new) 208.8 416.29 T
0 F
( [) 229.93 416.29 T
5 F
(\050) 240.76 416.29 T
0 F
( expression) 244.09 416.29 T
5 F
(\051) 291.32 416.29 T
0 F
(]) 300.2 416.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
173.25 391.29 108 391.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (new expressions) 108 392.29 P
1 F
-0.04 ( are used to allocate space for reference objects and may only appear in ref-) 173.25 392.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.16 (erence classes. They return reference objects of type) 108 380.29 P
5 F
0.18 (SAME) 339.43 380.29 P
1 F
0.16 (. All non-shared attributes and) 367.77 380.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.1 (array elements are initialized to) 108 368.29 P
5 F
0.11 (void) 250.86 368.29 P
1 F
0.1 (\050page 46\051. If there is an) 272.09 368.29 P
5 F
0.11 (include) 375.46 368.29 P
1 F
0.1 ( path from the type in) 407.14 368.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.49 (which the) 108 356.29 P
5 F
-0.55 (new) 153.21 356.29 P
1 F
-0.49 ( appears to) 171.55 356.29 P
5 F
-0.55 (AREF) 221.29 356.29 P
1 F
-0.49 (\050page 62\051, then) 250.19 356.29 P
5 F
-0.55 (new) 316.42 356.29 P
1 F
-0.49 ( must be provided with a non-negative) 334.76 356.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(INT) 108 344.29 T
1 F
( argument which specifies the number of array elements in the returned object.) 124.11 344.29 T
0 0 0 1 0 0 0 K
108 295.93 504 298.95 C
0 0 0 1 0 0 0 K
72 297.44 540 297.44 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Cr) 108 302.95 T
(eation expr) 120.67 302.95 T
(essions) 180.13 302.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 214.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(create_expression) 129.6 196.26 T
5 F
(#) 215.65 196.26 T
0 F
(  [  type_specifier  ]  [) 221.21 196.26 T
5 F
(\050) 311.39 196.26 T
0 F
(modal_list) 320.27 196.26 T
5 F
(\051) 367.49 196.26 T
0 F
(]) 376.39 196.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
1.01 (Immutable and reference object) 108 172.26 P
0 0 0 1 0 0 0 K
336.03 171.26 254 171.26 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
1.01 (creation expressions) 254 172.26 P
1 F
1.01 ( are a convenient shorthand used for) 336.03 172.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (creating new objects and initializing their attributes. A creation expression is a special syn-) 108 160.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.43 (tactic sugar for a call on a routine named \324) 108 148.26 P
5 F
-0.48 (create) 289.53 148.26 P
1 F
-0.43 (\325 with the specified arguments. \324) 317.32 148.26 P
5 F
-0.48 (self) 456.92 148.26 P
1 F
-0.43 (\325 is giv-) 472.48 148.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.34 (en the default) 108 136.26 P
5 F
0.38 (void) 172.43 136.26 P
1 F
0.34 ( value described on page 46  in this call. The type defining the \324) 190.77 136.26 P
5 F
0.38 (create) 473.43 136.26 P
1 F
0.34 (\325) 501.22 136.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.25 (routine may be explicitly specified as a reference or immutable type. If the type is not ex-) 108 124.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (plicitly specified, then it is taken to be the declared type of the context in which the call ap-) 108 112.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 618.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(void\050x\051) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 471.29 T
1 1 0 0 0 0 1 K
306 454.95 504 483.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(new) 342 471.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(new\05017\051) 342 461.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 271.26 T
1 1 0 0 0 0 1 K
306 234.93 504 283.93 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(#FOO\0501,2,3\051) 342 271.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#\0501,2,3\051) 342 261.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#FOO) 342 251.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#) 342 241.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
215.99 577.08 226.3 588.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 215.4 580.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
196 413.06 206.3 424.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 195.41 416.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
202.84 193.04 213.14 204.01 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 202.25 196.26 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(48) 108 709.51 T
0 F
(Basic Expr) 279.89 709.51 T
(essions) 323.5 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.5 (pears \050and it must be an immutable or reference type\051. A type must be specified when it) 108 659.33 P
0.33 (cannot be inferred from context: if the expression appears as the right hand side of a \324) 108 647.33 P
5 F
0.37 (::=) 489.82 647.33 P
1 F
0.33 (\325) 501.22 647.33 P
0.17 (assignment \050page 36\051, as a method argument in which overloading resolution would oth-) 108 635.33 P
(erwise be ambiguous, or as the left argument of the dot \324) 108 623.33 T
5 F
(.) 357.25 623.33 T
1 F
(\325 operator \050page 43\051.) 360.03 623.33 T
0 0 0 1 0 0 0 K
108 574.98 504 578 C
0 0 0 1 0 0 0 K
72 576.49 540 576.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Array cr) 108 582 T
(eation expr) 152.12 582 T
(essions) 211.58 582 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 513.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(array_expression) 129.6 495.31 T
5 F
(|) 213.79 495.31 T
0 F
( expression_list) 216.4 495.31 T
5 F
(|) 281.4 495.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(expression_list) 129.6 477.31 T
( expression {) 202.41 477.31 T
5 F
(,) 255.48 477.31 T
0 F
( expression  }) 258.26 477.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.06 (Array creation expressions are used to create and directly specify the elements of an array) 108 453.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.5 (object. The type is taken to be the declared type of the context in which it appears and it) 108 441.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.41 (must be) 108 429.31 P
5 F
0.45 (ARRAY{T}) 146.49 429.31 P
1 F
0.41 (for some type) 196.97 429.31 P
5 F
0.45 (T) 261.37 429.31 P
1 F
0.41 (. An array creation expression may not appear as the) 267.48 429.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.44 (right hand side of a \324) 108 417.31 P
5 F
0.49 (::=) 201.59 417.31 P
1 F
0.44 (\325 assignment \050page 36\051, as a method argument in which the over-) 212.99 417.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.43 (loading resolution is ambiguous, or as the left argument of the dot \324) 108 405.31 P
5 F
0.47 (.) 411.26 405.31 P
1 F
0.43 (\325 operator \050page 43\051.) 414.04 405.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.5 (The types of each expression in the) 108 393.31 P
0 F
-0.5 (expression_list) 261.41 393.31 P
1 F
-0.5 ( must be subtypes of) 321.42 393.31 P
5 F
-0.56 (T) 412.54 393.31 P
1 F
-0.5 (. The size of the cre-) 418.65 393.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.29 (ated array is equal to the number of specified expressions. The expressions are evaluated) 108 381.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(left to right and the results are assigned to successive array elements.) 108 369.31 T
0 0 0 1 0 0 0 K
108 320.95 504 323.98 C
0 0 0 1 0 0 0 K
72 322.46 540 322.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(and) 108 327.98 T
6 F
( expr) 128.02 327.98 T
(essions) 153.47 327.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 268.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(and_expression) 129.6 250.29 T
( expression) 204.63 250.29 T
5 F
(and) 251.87 250.29 T
0 F
( expression) 268.55 250.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
172.6 225.29 108 225.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.98 (and expressions) 108 226.29 P
1 F
0.98 ( compute the conjunction of two boolean expressions and return boolean) 172.6 226.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.33 (values. The first expression is evaluated and if) 108 214.29 P
5 F
0.37 (false) 317.42 214.29 P
1 F
0.33 (,) 338.54 214.29 P
5 F
0.37 (false) 343.87 214.29 P
1 F
0.33 ( is immediately returned as the) 364.99 214.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(result. Otherwise, the second expression is evaluated and its value returned.) 108 202.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 550.31 T
1 1 0 0 0 0 1 K
306 533.98 504 562.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(|2,4,6,8|) 342 550.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(|"apple", "orange", "cherry", "kiwi"|) 342 540.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 296.29 T
1 1 0 0 0 0 1 K
306 288.95 504 308.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(0<=x and x<10) 342 296.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
200.99 492.08 211.3 503.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 200.4 495.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
192.11 474.08 202.42 485.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 191.52 477.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
194.33 247.06 204.64 258.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 193.74 250.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Basic Expr) 297.02 709.51 T
(essions) 340.64 709.51 T
4 F
(49) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(or) 108 658 T
6 F
( expr) 118.67 658 T
(essions) 144.12 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 598.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(or_expression) 129.6 580.31 T
( expression) 197.96 580.31 T
5 F
(or) 245.2 580.31 T
0 F
( expression) 254.09 580.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
164.99 555.31 108 555.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.04 (or expressions) 108 556.31 P
1 F
0.04 ( compute the disjunction of two boolean expressions and return boolean val-) 164.99 556.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (ues. The first expression is evaluated and if) 108 544.31 P
5 F
-0.31 (true) 298.97 544.31 P
1 F
-0.28 (,) 316.2 544.31 P
5 F
-0.31 (true) 320.92 544.31 P
1 F
-0.28 ( is immediately returned as the result.) 338.15 544.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Otherwise, the second expression is evaluated and its value returned.) 108 532.31 T
0 0 0 1 0 0 0 K
108 483.95 504 486.98 C
0 0 0 1 0 0 0 K
72 485.46 540 485.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Syntactic sugar expr) 108 490.98 T
(essions) 216.47 490.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 422.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(sugar_expression) 129.6 404.29 T
( expression  binary_op  expression) 212.41 404.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 392.29 T
(-) 158.8 392.29 T
0 F
( expression) 162.13 392.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(|) 151.2 380.29 T
0 F
( [ expression ]) 156.58 380.29 T
5 F
( [) 215.47 380.29 T
0 F
(  expression_list) 221.03 380.29 T
5 F
(]) 291.04 380.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(|) 151.2 368.29 T
(\050) 158.8 368.29 T
0 F
( expression) 162.13 368.29 T
5 F
(\051) 209.36 368.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
( binary_op) 129.6 350.29 T
5 F
(+) 188.15 350.29 T
(|) 196.49 350.29 T
(-) 201.59 350.29 T
(|) 207.41 350.29 T
(*) 212.51 350.29 T
(|) 218.9 350.29 T
(/) 224.01 350.29 T
(|) 229.29 350.29 T
(^) 234.38 350.29 T
(|) 241.57 350.29 T
(%) 246.68 350.29 T
(|) 258.07 350.29 T
(~) 263.17 350.29 T
(|) 271.51 350.29 T
(<) 276.61 350.29 T
(|) 284.95 350.29 T
(<=) 290.05 350.29 T
(|) 304.23 350.29 T
(=) 309.33 350.29 T
(|) 317.67 350.29 T
(/=) 322.77 350.29 T
(|) 333.89 350.29 T
(>) 338.98 350.29 T
(|) 347.33 350.29 T
(>=) 352.42 350.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.56 (As shown in the following table, several Sather constructs are simply) 108 326.29 P
0 0 0 1 0 0 0 K
470.21 325.29 409.02 325.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.56 (syntactic sugar) 409.02 326.29 P
1 F
-0.56 ( for cor-) 470.21 326.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (responding routine calls.  Each of these transformations is applied after the component ex-) 108 314.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.44 (pressions have themselves been transformed. \324) 108 302.29 P
5 F
-0.49 (out) 311.49 302.29 P
1 F
-0.44 (\325 and \324) 325.39 302.29 P
5 F
-0.49 (inout) 352 302.29 P
1 F
-0.44 (\325 modes may not be used with) 373.68 302.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (the syntactic sugar expressions.  Note that \324) 108 290.29 P
5 F
-0.46 (and) 296.22 290.29 P
1 F
-0.42 (\325 and \324) 312.9 290.29 P
5 F
-0.46 (or) 339.55 290.29 P
1 F
-0.42 (\325 are not listed as syntactic sugar for) 348.44 290.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 618.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(x=2 or x=3) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 459.29 T
1 1 0 0 0 0 1 K
306 442.95 504 471.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(a+b) 342 459.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(x<7) 342 449.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
187.66 577.08 197.96 588.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 187.07 580.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
202.11 401.06 212.42 412.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 201.52 404.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
175.34 347.06 185.64 358.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 174.75 350.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(50) 108 709.51 T
0 F
(Basic Expr) 279.89 709.51 T
(essions) 323.5 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.68 (operations in \324) 108 659.33 P
5 F
0.76 (BOOL) 172.77 659.33 P
1 F
0.68 (\325; this allows short-circuiting the evaluation of subexpressions.  The) 200.56 659.33 P
0.03 (\324<=\325 and \324>\325 expressions do not reverse the original left to right order of argument evalua-) 108 443.33 P
(tion.) 108 431.33 T
1.41 (The precedence ordering shown below determines the grouping of the syntactic sugar) 108 407.33 P
-0.35 (forms. Symbols of the same precedence associate left to right and parentheses may be used) 108 395.33 P
(for explicit grouping.  Evaluation order obeys explicit parenthesis in all cases.) 108 383.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 12 Q
(Sugar form) 113.83 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 204.41 630 T
(r) 210.42 630 T
(anslation) 214.91 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sugar form) 305.33 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 417.91 630 T
(r) 423.92 630 T
(anslation) 428.41 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 10 Q
(e) 112.73 610.33 T
(xpr1) 116.97 610.33 T
5 F
( +) 135.3 610.33 T
10 F
(e) 146.7 610.33 T
(xpr2) 150.94 610.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 195.29 610.33 T
(xpr1) 199.53 610.33 T
5 F
(.plus\050) 217.86 610.33 T
10 F
(e) 242.31 610.33 T
(xpr2) 246.55 610.33 T
5 F
(\051) 264.88 610.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 302.84 610.33 T
(xpr1) 307.08 610.33 T
5 F
( /=) 325.41 610.33 T
10 F
(e) 339.59 610.33 T
(xpr2) 343.83 610.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 399.17 610.33 T
(xpr1) 403.41 610.33 T
5 F
(.is_eq\050) 421.74 610.33 T
10 F
(e) 451.75 610.33 T
(xpr2) 455.99 610.33 T
5 F
(\051.not) 474.32 610.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 113.99 593.33 T
(xpr1) 118.22 593.33 T
5 F
( -) 136.55 593.33 T
10 F
(e) 145.45 593.33 T
(xpr2) 149.68 593.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 191.12 593.33 T
(xpr1) 195.37 593.33 T
5 F
(.minus\050) 213.7 593.33 T
10 F
(e) 246.48 593.33 T
(xpr2) 250.71 593.33 T
5 F
(\051) 269.05 593.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 304.23 593.33 T
(xpr1) 308.47 593.33 T
5 F
( >) 326.8 593.33 T
10 F
(e) 338.2 593.33 T
(xpr2) 342.44 593.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 410.57 593.33 T
(xpr2) 414.81 593.33 T
5 F
(.is_lt\050) 433.14 593.33 T
10 F
(e) 457.03 593.33 T
(xpr1) 461.27 593.33 T
5 F
(\051) 479.6 593.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 113.71 576.33 T
(xpr1) 117.94 576.33 T
5 F
( *) 136.27 576.33 T
10 F
(e) 145.73 576.33 T
(xpr2) 149.96 576.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 192.51 576.33 T
(xpr1) 196.76 576.33 T
5 F
(.times\050) 215.09 576.33 T
10 F
(e) 245.09 576.33 T
(xpr2) 249.32 576.33 T
5 F
(\051) 267.65 576.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 301.31 576.33 T
(xpr1) 305.55 576.33 T
5 F
( >=) 323.88 576.33 T
10 F
(e) 341.12 576.33 T
(xpr2) 345.36 576.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 402.23 576.33 T
(xpr1) 406.47 576.33 T
5 F
(.is_lt\050) 424.8 576.33 T
10 F
(e) 448.69 576.33 T
(xpr2) 452.93 576.33 T
5 F
(\051.not) 471.26 576.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 114.26 559.33 T
(xpr1) 118.5 559.33 T
5 F
( /) 136.83 559.33 T
10 F
(e) 145.17 559.33 T
(xpr2) 149.41 559.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 198.07 559.33 T
(xpr1) 202.31 559.33 T
5 F
(.div\050) 220.64 559.33 T
10 F
(e) 239.53 559.33 T
(xpr2) 243.77 559.33 T
5 F
(\051) 262.1 559.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-) 320.66 559.33 T
10 F
(e) 326.77 559.33 T
(xpr) 331.01 559.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 421.29 559.33 T
(xpr) 425.52 559.33 T
5 F
(.negate) 438.86 559.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 113.31 542.33 T
(xpr1) 117.54 542.33 T
5 F
( ^) 135.88 542.33 T
10 F
(e) 146.12 542.33 T
(xpr2) 150.37 542.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 195.29 542.33 T
(xpr1) 199.53 542.33 T
5 F
(.pow\050) 217.86 542.33 T
10 F
(e) 242.31 542.33 T
(xpr2) 246.55 542.33 T
5 F
(\051) 264.88 542.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(~) 319.4 542.33 T
10 F
(e) 328.02 542.33 T
(xpr) 332.27 542.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 429.62 542.33 T
(xpr) 433.86 542.33 T
5 F
(.not) 447.2 542.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 111.21 525.33 T
(xpr1) 115.44 525.33 T
5 F
( %) 133.77 525.33 T
10 F
(e) 148.23 525.33 T
(xpr2) 152.46 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 194.74 525.33 T
(xpr1) 198.98 525.33 T
5 F
(.mod\050) 217.3 525.33 T
10 F
(e) 242.87 525.33 T
(xpr2) 247.1 525.33 T
5 F
(\051) 265.43 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 312.32 525.33 T
10 F
(e) 315.1 525.33 T
(xpr_list) 319.34 525.33 T
5 F
(]) 349.9 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(aget\050) 403.98 525.33 T
10 F
(e) 426.77 525.33 T
(xpr) 431.01 525.33 T
(ession_list) 443.96 525.33 T
5 F
(\051) 486.2 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 112.73 508.33 T
(xpr1) 116.97 508.33 T
5 F
( <) 135.3 508.33 T
10 F
(e) 146.7 508.33 T
(xpr2) 150.94 508.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 195.57 508.33 T
(xpr1) 199.81 508.33 T
5 F
(.is_lt\050) 218.14 508.33 T
10 F
(e) 242.03 508.33 T
(xpr2) 246.27 508.33 T
5 F
(\051) 264.6 508.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 288.72 508.33 T
(xpr1) 292.96 508.33 T
5 F
([) 311.29 508.33 T
10 F
(e) 314.07 508.33 T
(xpr) 318.31 508.33 T
(ession_list) 331.27 508.33 T
5 F
(]) 373.5 508.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 391.3 508.33 T
(xpr1) 395.54 508.33 T
5 F
(.aget\050) 413.87 508.33 T
10 F
(e) 439.44 508.33 T
(xpr) 443.68 508.33 T
(ession_list) 456.64 508.33 T
5 F
(\051) 498.87 508.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 109.81 491.33 T
(xpr1) 114.05 491.33 T
5 F
( <=) 132.38 491.33 T
10 F
(e) 149.62 491.33 T
(xpr2) 153.86 491.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 187.23 491.33 T
(xpr2) 191.47 491.33 T
5 F
(.is_lt\050) 209.8 491.33 T
10 F
(e) 233.69 491.33 T
(xpr1) 237.93 491.33 T
5 F
(\051.not) 256.26 491.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050) 308.07 491.33 T
10 F
(e) 311.4 491.33 T
(xpr) 315.64 491.33 T
(ession) 328.6 491.33 T
5 F
(\051) 353.6 491.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(e) 425.65 491.33 T
(xpr) 429.89 491.33 T
(ession) 442.85 491.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 112.73 474.33 T
(xpr1) 116.97 474.33 T
5 F
( =) 135.3 474.33 T
10 F
(e) 146.7 474.33 T
(xpr2) 150.94 474.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(e) 192.51 474.33 T
(xpr1) 196.75 474.33 T
5 F
(.is_eq\050) 215.08 474.33 T
10 F
(e) 245.09 474.33 T
(xpr2) 249.33 474.33 T
5 F
(\051) 267.66 474.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 F
(Str) 225.93 355.33 T
(ong) 237.15 355.33 T
(est) 252.05 355.33 T
0 0 0 1 0 0 0 K
2 F
(.      ::     []    \050\051) 306.65 355.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(^) 333.75 335.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(~       Unary -) 309.23 315.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*      /     %) 314.29 295.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(+        Binary -) 306.75 275.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<    <=    =    /=    >=    >) 287.14 255.33 T
0 0 0 1 0 0 0 K
10 F
(W) 228.4 235.33 T
(eak) 235.81 235.33 T
(est) 249.59 235.33 T
0 0 0 1 0 0 0 K
2 F
(and     or) 318.46 235.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
103.5 643 103.5 469 2 L
V
2 H
0 Z
N
178.5 645 178.5 467 2 L
V
0.5 H
N
282.5 645 282.5 467 2 L
V
2 H
N
382.5 645 382.5 467 2 L
V
0.5 H
N
508.5 643 508.5 469 2 L
V
2 H
N
102.5 644 509.5 644 2 L
V
N
102.5 621 509.5 621 2 L
V
N
102.5 604 509.5 604 2 L
V
0.5 H
N
102.5 587 509.5 587 2 L
V
N
102.5 570 509.5 570 2 L
V
N
102.5 553 509.5 553 2 L
V
N
102.5 536 509.5 536 2 L
V
N
102.5 519 509.5 519 2 L
V
N
102.5 502 509.5 502 2 L
V
N
102.5 485 509.5 485 2 L
V
N
102.5 468 509.5 468 2 L
V
2 H
N
274.64 367 274.64 229 2 L
V
N
397.55 367 397.55 229 2 L
V
N
273.64 368 398.55 368 2 L
V
N
273.64 348 398.55 348 2 L
V
0.5 H
N
273.64 328 398.55 328 2 L
V
N
273.64 308 398.55 308 2 L
V
N
273.64 288 398.55 288 2 L
V
N
273.64 268 398.55 268 2 L
V
N
273.64 248 398.55 248 2 L
V
N
273.64 228 398.55 228 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Loops and Iterators) 294.12 709.51 T
4 F
(51) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Syntactic sugar example) 108 658.67 T
119 523.2 108 523.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(L) 108 525 T
165.08 523.2 119 523.2 2 L
V
N
4 14.4 Q
(OOPS) 119 525 T
204.78 523.2 165.08 523.2 2 L
V
N
(AND) 165.08 525 T
211.78 523.2 204.78 523.2 2 L
V
N
4 18 Q
(I) 204.78 525 T
292.58 523.2 211.78 523.2 2 L
V
N
4 14.4 Q
(TERATORS) 211.78 525 T
1 10 Q
0.25 (Iterator de\336nitions wer) 108 499.33 P
0.25 (e described on page 32.  Iterators ar) 210.81 499.33 P
0.25 (e used extensively in Sather to) 368.9 499.33 P
0.65 (contr) 108 487.33 P
0.65 (ol loops.  This section elaborates their semantics and describes the built-in iterators) 130.75 487.33 P
(that corr) 108 475.33 T
(espond to statements such as \324) 145.46 475.33 T
5 F
(while) 279.15 475.33 T
1 F
(\325 and \324) 301.93 475.33 T
5 F
(do) 329.42 475.33 T
1 F
(\325 found in other languages.) 340.54 475.33 T
0 0 0 1 0 0 0 K
108 426.98 504 430 C
0 0 0 1 0 0 0 K
72 428.49 540 428.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(loop) 108 434 T
6 F
( statements) 130.68 434 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 374.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(loop_statement) 129.6 356.31 T
5 F
(loop) 206.01 356.31 T
0 F
( statement_list) 224.9 356.31 T
5 F
(end) 287.12 356.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.05 (Iteration is done with) 108 332.31 P
0 0 0 1 0 0 0 K
268.22 331.31 205.68 331.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.05 (loop statements) 205.68 332.31 P
1 F
0.05 (, used in conjunction with iterator calls. An execution) 268.22 332.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (state is maintained for each textual iterator call. When a loop is entered, the execution state) 108 320.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.29 (of all enclosed iterator calls is initialized. When an iterator is first called in a loop, the ex-) 108 308.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.06 (pressions for) 108 296.31 P
5 F
0.07 (self) 167.52 296.31 P
1 F
0.06 ( and for each) 183.08 296.31 P
5 F
0.07 (once) 243.04 296.31 P
1 F
0.06 ( argument are evaluated left to right. Then the expres-) 264.72 296.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.43 (sions for arguments which are not) 108 284.31 P
5 F
-0.48 (once) 258.9 284.31 P
1 F
-0.43 ( \050) 280.58 284.31 P
5 F
-0.48 (in) 285.97 284.31 P
1 F
-0.43 ( or) 293.75 284.31 P
5 F
-0.48 (inout) 307.3 284.31 P
1 F
-0.43 ( before the call,) 328.98 284.31 P
5 F
-0.48 (out) 396.72 284.31 P
1 F
-0.43 ( or) 410.62 284.31 P
5 F
-0.48 (inout) 424.16 284.31 P
1 F
-0.43 ( after the call;) 445.84 284.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (see page 43\051 are evaluated left to right. On subsequent calls, only the expressions for argu-) 108 272.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.04 (ments which are not) 108 260.31 P
5 F
0.04 (once) 200.7 260.31 P
1 F
0.04 ( are re-evaluated.) 222.38 260.31 P
5 F
0.04 (self) 304.39 260.31 P
1 F
0.04 (and any) 322.77 260.31 P
5 F
0.04 (once) 361.16 260.31 P
1 F
0.04 ( arguments retain their ear-) 382.84 260.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.49 (lier values. The expressions for) 108 248.31 P
5 F
0.55 (self) 249.72 248.31 P
1 F
0.49 ( and for) 265.28 248.31 P
5 F
0.55 (once) 303.93 248.31 P
1 F
0.49 ( arguments may not themselves contain) 325.61 248.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.36 (iterator calls \050such iters would only execute their first iteration.\051  Method call semantics are) 108 236.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(detailed on page 43.) 108 224.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.6 (When an iterator is called, it executes the statements in its body in order. If it executes a) 108 200.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.48 (yield) 108 188.31 P
1 F
-0.43 ( statement, control is returned to the caller. Subsequent calls on the iterator resume ex-) 128.56 188.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.33 (ecution with the statement following the) 108 176.31 P
5 F
1.48 (yield) 297.73 176.31 P
1 F
1.33 ( statement. If an iterator executes) 318.29 176.31 P
5 F
1.48 (quit) 474.64 176.31 P
1 F
1.33 ( or) 490.76 176.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (reaches the end of its body, control passes immediately to the end of the innermost enclos-) 108 164.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing loop statement in the caller and no value is returned.) 108 152.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.52 (Here\325s a formula written with syntactic sug-) 108 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.32 (ar and the calls it is textually equivalent to.) 108 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.02 (It doesn\325t matter what the types of the vari-) 108 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ables are; the sugar ignores types.) 108 594.33 T
1 1 0 0 0 0 1 K
306 584 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
9 9 Q
0 X
0 0 0 1 0 0 0 K
(-- Wr) 342 631 T
(itten using syntactic sugar) 362.12 631 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(r := \050x^2 + y^2\051.sqrt;) 342 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Wr) 342 601 T
(itten without sugar) 362.12 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(r := \050x.pow\0502\051.plus\050y.pow\0502\051\051\051.sqrt) 342 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 402.31 T
1 1 0 0 0 0 1 K
306 394.98 504 414.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(loop ... end) 342 402.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
193.2 353.08 203.51 364.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 192.61 356.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(52) 108 709.51 T
0 F
(Loops and Iterators) 276.98 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(yield) 108 658 T
6 F
( statements) 132.67 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 589.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(yield_statement) 129.6 571.31 T
5 F
(yield) 208.79 571.31 T
0 F
( [ expression ]) 229.35 571.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
173.25 546.31 108 546.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (yield statements) 108 547.31 P
1 F
-0.03 ( are used to return control to a loop and may appear only in iterator defini-) 173.25 547.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.33 (tions. The) 108 535.31 P
0 F
0.33 (expression) 154.6 535.31 P
1 F
0.33 ( clause must be present if the iterator has a return value and must be) 196.83 535.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.42 (absent if it does not. If) 108 523.31 P
0 F
0.42 (expression) 210.92 523.31 P
1 F
0.42 ( is present, then its type must be a subtype of the return) 253.15 523.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.68 (type of the iterator. Execution of a) 108 511.31 P
5 F
0.75 (yield) 265.38 511.31 P
1 F
0.68 ( statement causes the expression to be evaluated) 285.94 511.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (and its value to be returned to the caller of the iterator in which it appears.  Yield is not per-) 108 499.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.18 (mitted within a protect statement \050see page 58\051.  Yield causes assignment to) 108 487.31 P
5 F
0.2 (out) 446.13 487.31 P
1 F
0.18 ( and) 460.03 487.31 P
5 F
0.2 (inout) 482.32 487.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(arguments in the caller \050page 43\051.) 108 475.31 T
0 0 0 1 0 0 0 K
108 426.95 504 429.98 C
0 0 0 1 0 0 0 K
72 428.46 540 428.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(quit) 108 433.98 T
6 F
( statements) 127.34 433.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 374.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(quit_statement) 129.6 356.29 T
5 F
(quit) 205.65 356.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.06 331.29 108 331.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.07 (quit statements) 108 332.29 P
1 F
-0.07 ( are used to terminate loops and may only appear in iterator definitions. No) 170.06 332.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.54 (value is returned from an iterator when it quits, and no assignment takes place to) 108 320.29 P
5 F
0.6 (out) 477.65 320.29 P
1 F
0.54 ( or) 491.55 320.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
1.09 (inout) 108 308.29 P
1 F
0.98 ( arguments in the caller \050page 43\051. No statements may follow a) 129.68 308.29 P
5 F
1.09 (quit) 420.08 308.29 P
1 F
0.98 (statement in a) 440.06 308.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(statement list.) 108 296.29 T
0 0 0 1 0 0 0 K
108 247.93 504 250.95 C
0 0 0 1 0 0 0 K
72 249.44 540 249.44 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(while!) 108 254.95 T
6 F
( expr) 138.67 254.95 T
(essions) 164.12 254.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 195.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(while!_expression) 129.6 177.26 T
5 F
(while!\050) 217.13 177.26 T
0 F
( expression) 246.02 177.26 T
5 F
(\051) 293.26 177.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181.52 152.26 108 152.26 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.1 (while! expressions) 108 153.26 P
1 F
-0.1 ( are iterator calls which take a single boolean argument that is re-evaluat-) 181.52 153.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ed on each iteration. They) 108 141.26 T
5 F
(yield) 224.89 141.26 T
1 F
( when the argument is true and) 245.45 141.26 T
5 F
(quit) 386.94 141.26 T
1 F
(when it is false.) 405.84 141.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Examples:) 108 626.31 T
1 1 0 0 0 0 1 K
306 609.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(yield) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(yield x) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 402.29 T
1 1 0 0 0 0 1 K
306 394.95 504 414.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(quit) 342 402.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 223.26 T
1 1 0 0 0 0 1 K
306 215.93 504 235.93 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(while!\050a<10\051) 342 223.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
195.99 568.08 206.3 579.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 195.4 571.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
192.84 353.06 203.14 364.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 192.25 356.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
204.33 174.04 214.64 185.01 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 203.74 177.26 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 52
%%Page: "53" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Loops and Iterators) 294.12 709.51 T
4 F
(53) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(until!) 108 658 T
6 F
( expr) 133.34 658 T
(essions) 158.8 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 598.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(until!_expression) 129.6 580.31 T
5 F
(until!\050) 215.48 580.31 T
0 F
( expression) 239.93 580.31 T
5 F
(\051) 287.15 580.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
179.4 555.31 108 555.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.56 (until! expressions) 108 556.31 P
1 F
-0.56 ( are iterator calls which take a single boolean argument that is re-evaluated) 179.4 556.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(on each iteration. They) 108 544.31 T
5 F
(yield) 211.49 544.31 T
1 F
( when the argument is false and) 232.05 544.31 T
5 F
(quit) 375.78 544.31 T
1 F
( when it is true.) 391.9 544.31 T
0 0 0 1 0 0 0 K
108 495.95 504 498.98 C
0 0 0 1 0 0 0 K
72 497.46 540 497.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(break!) 108 502.98 T
6 F
( expr) 141.35 502.98 T
(essions) 166.8 502.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 443.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(break!_expression) 129.6 425.29 T
5 F
(break!) 216.76 425.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181.24 400.29 108 400.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(break! expressions) 108 401.29 T
1 F
( are iterator calls which immediately) 181.24 401.29 T
5 F
(quit) 345.29 401.29 T
1 F
( when they are called.) 361.41 401.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 618.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(until!\050a>10\051) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 471.29 T
1 1 0 0 0 0 1 K
306 463.95 504 483.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(break!) 342 471.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
202.67 577.08 212.98 588.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 202.08 580.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
203.95 422.06 214.26 433.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 203.36 425.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 53
%%Page: "54" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(54) 108 709.51 T
0 F
(Loops and Iterators) 276.98 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Iterator Examples) 108 658.67 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.24 (Because they are so useful, the \324) 108 630.33 P
5 F
0.27 (while!) 249.19 630.33 P
1 F
0.24 (\325, \324) 274.75 630.33 P
5 F
0.27 (un-) 285.55 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.42 (til!) 108 618.33 P
1 F
1.27 (\325 and \324) 118 618.33 P
5 F
1.42 (break!) 148.04 618.33 P
1 F
1.27 (\325 iterators are built into the) 175.83 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.16 (language.  Here\325s how \324) 108 606.33 P
5 F
3.51 (while!) 225.07 606.33 P
1 F
3.16 (\325 could be) 250.63 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(written if it were not a primitive.) 108 594.33 T
1 1 0 0 0 0 1 K
306 554 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(while!\050pred:BOOL\051 is) 342 631 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Y) 354.6 621 T
(ields as long as \324pred\325 is tr) 368.92 621 T
(ue) 472.59 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(loop) 354.6 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(if pred then yield) 367.2 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(else quit) 367.2 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 367.2 581 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 354.6 571 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.4 (The built-in class \324) 108 529.33 P
5 F
0.45 (INT) 189.76 529.33 P
1 F
0.4 (\325 defines some useful) 205.87 529.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.09 (iterators.  Here\325s the definition of \324) 108 517.33 P
5 F
2.32 (upto!) 272.48 517.33 P
1 F
2.09 (\325.) 294.72 517.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.11 (Unlike the argument \324) 108 505.33 P
5 F
1.24 (pred) 208.49 505.33 P
1 F
1.11 (\325 used above, \324) 228.51 505.33 P
5 F
1.24 (i) 295 505.33 P
1 F
1.11 (\325) 297.22 505.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.14 (here is declared to be \324) 108 493.33 P
5 F
-0.15 (once) 206.23 493.33 P
1 F
-0.14 (\325; when \324) 227.91 493.33 P
5 F
-0.15 (upto!) 265.47 493.33 P
1 F
-0.14 (\325 is) 287.71 493.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.37 (called, the argument is only evaluated once,) 108 481.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.29 (the first time the iterator is called in the) 108 469.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop.) 108 457.33 T
1 1 0 0 0 0 1 K
306 433 504 542 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(upto!\050once i:SAME\051:SAME is) 342 530 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Y) 354.6 520 T
(ield successiv) 368.92 520 T
(e integers from) 424.21 520 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(-- self to `i' inclusiv) 354.6 510 T
(e) 428.1 510 T
(.) 432.97 510 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(r::=self;) 354.6 500 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop) 354.6 490 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(until!\050r>i\051;) 367.2 480 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(yield r;) 367.2 470 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(r:=r+1) 367.2 460 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 354.6 450 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 440 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
1.56 (To add up the integers 1 through 10, one) 108 408.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(might say:) 108 396.33 T
1 1 0 0 0 0 1 K
306 372 504 421 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(x::=0;) 342 409 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop) 342 399 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(x:=x+1.upto!\05010\051) 354.6 389 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 379 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
-0.39 (Or, using the library iterator \324) 108 347.33 P
5 F
-0.44 (sum!) 236.44 347.33 P
1 F
-0.39 (\325 like this.) 258.11 347.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.07 (\324) 108 335.33 P
5 F
0.08 (x) 110.78 335.33 P
1 F
0.07 (\325 needs to be declared \050but not initialized\051) 115.78 335.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(outside the loop.) 108 323.33 T
1 1 0 0 0 0 1 K
306 316 504 360 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(loop) 342 348 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(x:=INT::sum!\0501.upto!\05010\051\051) 354.6 338 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 328 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.02 (Some of the most useful ways to use iters is) 108 291.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.76 (with container objects.  Arrays, lists, sets,) 108 279.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.42 (trees, strings, and vectors can all be given it-) 108 267.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.24 (erators to yield all their elements.  Here we) 108 255.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(print all the elements of some container \324) 108 243.33 T
5 F
(c) 287.91 243.33 T
1 F
(\325.) 292.91 243.33 T
1 1 0 0 0 0 1 K
306 236 504 304 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(loop) 342 282 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#OUT + c.elt!.str + \325\134n\325) 354.6 272 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 262 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(This doubles the elements of array \324) 108 211.33 T
5 F
(a) 265.5 211.33 T
1 F
(\325.) 271.06 211.33 T
1 1 0 0 0 0 1 K
306 204 504 224 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(loop a.set!\050a.elt! * 2\051 end) 342 212 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.62 (This computes the dot product of two vec-) 108 179.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.56 (tors \324) 108 167.33 P
5 F
-0.62 (a) 129.63 167.33 P
1 F
-0.56 (\325 and \324) 135.2 167.33 P
5 F
-0.62 (b) 161.57 167.33 P
1 F
-0.56 (\325.  There is also a built-in meth-) 167.13 167.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.35 (od \324) 108 155.33 P
5 F
0.39 (dot) 125.2 155.33 P
1 F
0.35 (\325 to do this.  \324) 139.1 155.33 P
5 F
0.39 (x) 197.93 155.33 P
1 F
0.35 (\325 needs to be declared) 202.93 155.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(\050but not initialized\051 before the loop.) 108 143.33 T
1 1 0 0 0 0 1 K
306 136 504 192 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(loop) 342 170 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(x:=sum!\050a.elt! * b.elt!\051) 354.6 160 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 150 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 54
%%Page: "55" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Closur) 315.58 709.51 T
(es) 342.64 709.51 T
4 F
(55) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
121 652.2 108 652.2 2 L
0 X
V
0.9 H
0 Z
N
4 18 Q
(C) 108 654 T
189.78 652.2 121 652.2 2 L
V
N
4 14.4 Q
(LOSURES) 121 654 T
0 0 0 1 0 0 0 K
108 601.98 504 605 C
0 0 0 1 0 0 0 K
72 603.49 540 603.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Closur) 108 609 T
(e cr) 143.34 609 T
(eation expr) 161.45 609 T
(essions) 220.91 609 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 540.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(method_closure_create_expression) 129.6 522.31 T
( routine_closure_create_expression) 281.11 522.31 T
5 F
(|) 427.32 522.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(iter_closure_create_expression) 151.2 510.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(routine_closure_create_expression) 129.6 492.31 T
5 F
( bind) 281.11 492.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050) 153.7 480.31 T
0 F
( [ type_specifier) 159.81 480.31 T
5 F
(::) 228.33 480.31 T
(|) 239.17 480.31 T
0 F
( routine_closure_argument) 244.55 480.31 T
5 F
(.) 356.97 480.31 T
0 F
(]   identifier) 365.31 480.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( [) 151.2 468.31 T
5 F
(\050) 162.03 468.31 T
0 F
(routine_closure_argument  {) 168.14 468.31 T
5 F
(,) 286.39 468.31 T
0 F
( routine_closure_argument  }) 291.95 468.31 T
5 F
(\051) 415.2 468.31 T
0 F
(]) 424.09 468.31 T
5 F
(\051) 432.42 468.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(routine_closure_argument) 129.6 450.31 T
( routine_mode  \050 expression) 249.82 450.31 T
5 F
(|) 365.95 450.31 T
(_) 373.83 450.31 T
0 F
(  \051) 379.39 450.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iter_closure_create_expression) 129.6 432.31 T
5 F
( bind) 265.55 432.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050) 153.7 420.31 T
0 F
( [ type_specifier) 159.81 420.31 T
5 F
(::) 228.33 420.31 T
(|) 239.17 420.31 T
0 F
( iter_closure_argument) 244.55 420.31 T
5 F
(.) 341.41 420.31 T
0 F
(]   iter_name) 349.75 420.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( [) 151.2 408.31 T
5 F
(\050) 162.03 408.31 T
0 F
(iter_closure_argument  {) 168.14 408.31 T
5 F
(,) 270.83 408.31 T
0 F
( iter_closure_argument  }) 276.39 408.31 T
5 F
(\051) 384.08 408.31 T
0 F
(]) 392.97 408.31 T
5 F
(\051) 401.3 408.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(iter_closure_argument) 129.6 390.31 T
( iter_mode  \050 expression) 234.26 390.31 T
5 F
(|) 334.83 390.31 T
(_) 342.7 390.31 T
0 F
(  \051) 348.27 390.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.44 (Routine and iter) 108 366.31 P
0 0 0 1 0 0 0 K
213.37 365.31 180.96 365.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.44 (closures) 180.96 366.31 P
1 F
-0.44 ( are similar to the \324function pointer\325 and \324closure\325 constructs of oth-) 213.37 366.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (er languages. They bind a reference to a method together with zero or more argument val-) 108 354.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ues \050possibly including \324) 108 342.31 T
5 F
(self) 216.04 342.31 T
1 F
(\325\051.) 231.6 342.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.38 (The outer part of the expression is \324) 108 318.31 P
5 F
-0.42 (bind\050...\051) 261.26 318.31 P
1 F
-0.38 (\325. This surrounds an ordinary routine or iterator) 295.15 318.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (call in which any of the arguments or) 108 306.31 P
5 F
-0.24 (self) 273.52 306.31 P
1 F
-0.22 ( may have been replaced by the underscore char-) 289.08 306.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.56 (acter \324) 108 294.31 P
5 F
1.74 (_) 136.28 294.31 P
1 F
1.56 (\325. Such unspecified arguments are) 141.84 294.31 P
0 0 0 1 0 0 0 K
337.89 293.31 301.58 293.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
1.56 (unbound) 301.58 294.31 P
1 F
1.56 (.  Unbound arguments are specified) 337.89 294.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (when the closure  is eventually called. \324) 108 282.31 P
5 F
-0.38 (out) 278.91 282.31 P
1 F
-0.34 (\325 and \324) 292.81 282.31 P
5 F
-0.38 (inout) 319.62 282.31 P
1 F
-0.34 (\325 arguments must be left unbound. In) 341.3 282.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.41 (case of ambiguity, the signature of the method specified in the) 108 270.31 P
5 F
0.45 (\325bind\050...\051) 389.8 270.31 P
1 F
0.41 (\325 expression is in-) 425.92 270.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.21 (ferred from context. The same overloading resolution rules as for the method call expres-) 108 258.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sions \050page 44\051 apply to the closure creation expressions.) 108 246.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.32 (The expressions in this construct are evaluated from left to right and the resulting values) 108 222.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (are stored as part of the closure. Closure creation expressions return closure types. As pre-) 108 210.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(viously described on page 22, the type specifiers for these types have the form:) 108 198.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(method_closure_type_specifier) 129.6 180.31 T
(  routine_closure_type_specifier |) 265.55 180.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iter_closure_type_specifier) 151.2 168.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(routine_closure_type_specifier) 129.6 150.31 T
5 F
(ROUT) 270.57 150.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
([) 151.2 138.31 T
5 F
({) 159.53 138.31 T
0 F
( routine_mode  type_specifier  {) 168.43 138.31 T
5 F
(,) 297.51 138.31 T
0 F
( routine_mode  type_specifier  }) 303.07 138.31 T
5 F
(}) 434.65 138.31 T
0 F
(]) 443.55 138.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 126.31 T
5 F
(:) 157.03 126.31 T
0 F
(type_specifier  ]) 165.37 126.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 F
(Examples:) 108 577.31 T
1 1 0 0 0 0 1 K
306 560.98 504 589.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(bind\0502.plus\050_\051\051) 342 577.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(bind\050filter!\050bind\050is_eq\050a\051\051\051\051) 342 567.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
270.8 519.08 281.1 530.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 270.21 522.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
270.81 489.08 281.11 500.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 270.22 492.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
239.52 447.08 249.83 458.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 238.93 450.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
255.25 429.08 265.55 440.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 254.66 432.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
223.96 387.08 234.27 398.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 223.37 390.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
255.25 177.08 265.55 188.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 254.66 180.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
255.26 147.08 265.57 158.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 254.67 150.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 55
%%Page: "56" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(56) 108 709.51 T
0 F
(Closur) 298.45 709.51 T
(es) 325.5 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 X
(iter_closure_type_specifier) 129.6 659.33 T
5 F
(ITER) 255.01 659.33 T
0 F
([) 151.2 647.33 T
5 F
({) 159.53 647.33 T
0 F
( iter_mode  type_specifier  {) 168.43 647.33 T
5 F
(,) 281.95 647.33 T
0 F
( iter_mode  type_specifier  }) 287.51 647.33 T
5 F
(}) 403.53 647.33 T
0 F
(]) 412.43 647.33 T
([) 151.2 635.33 T
5 F
(:) 157.03 635.33 T
0 F
(type_specifier  ]) 165.37 635.33 T
1 F
-0.29 (These specifiers begin with the keywords \324) 108 611.33 P
5 F
-0.32 (ROUT) 294.23 611.33 P
1 F
-0.29 (\325 or) 322.56 611.33 P
5 F
-0.32 (\325ITER\325) 339.16 611.33 P
1 F
-0.29 ( and are followed by the modes) 366.38 611.33 P
-0.23 (and types  of the underscore arguments, if any, enclosed in braces \050) 108 599.33 P
0 F
-0.23 (e.g.) 401.92 599.33 P
1 F
-0.23 ( \324) 415.8 599.33 P
5 F
-0.26 (ROUT{A, out B, in-) 420.85 599.33 P
-0.61 (out C}) 108 587.33 P
1 F
-0.55 (\325,) 134.63 587.33 P
5 F
-0.61 (\325ITER{once A, out B, C}\325) 141.87 587.33 P
1 F
-0.55 (\051. These are followed by a colon and the return type, if there) 246.16 587.33 P
(is one \050) 108 575.33 T
0 F
(e.g.) 139.55 575.33 T
1 F
( \324) 153.44 575.33 T
5 F
(ROUT{INT}:INT) 158.72 575.33 T
1 F
(\325,) 228.73 575.33 T
5 F
(\325ITER{once INT}:FLT\325) 236.51 575.33 T
1 F
(\051.) 331.54 575.33 T
0 0 0 1 0 0 0 K
108 526.98 504 530 C
0 0 0 1 0 0 0 K
72 528.49 540 528.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Closur) 108 534 T
(e calls) 143.34 534 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.11 (Each routine closure defines a routine named \324) 108 506.31 P
5 F
0.13 (call) 314.24 506.31 P
1 F
0.11 (\325 and each iterator closure defines an it-) 329.24 506.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.08 (erator named) 108 494.31 P
5 F
0.08 (\325call!\325) 170.11 494.31 P
1 F
0.08 (. These have argument and return types that correspond to the closure) 192.33 494.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (type specifiers. Invocations of these features behave like a call on the original routine or it-) 108 482.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.17 (erator with the arguments specified by a combination of the bound values and those pro-) 108 470.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.2 (vided to \324) 108 458.31 P
5 F
3.56 (call) 156.47 458.31 P
1 F
3.2 (\325 or) 171.47 458.31 P
5 F
3.56 (\325call!\325) 195.06 458.31 P
1 F
3.2 (. The arguments to) 217.28 458.31 P
5 F
3.56 (\325call\325) 315.53 458.31 P
1 F
3.2 (and) 341.31 458.31 P
5 F
3.56 (\325call!\325) 363.94 458.31 P
1 F
3.2 (  match the underscores) 386.16 458.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.49 (positionally from left to right \050) 108 446.31 P
0 F
-0.49 (e.g.) 239.9 446.31 P
1 F
-0.49 ( \324) 253.79 446.31 P
5 F
-0.55 (i::=bind\0502.plus\050_\051\051.call\0503\051) 258.57 446.31 P
1 F
-0.49 (\325 is equivalent to \324) 366.65 446.31 P
5 F
-0.55 (i::=2.plus\0503\051) 442.87 446.31 P
1 F
-0.49 (\325\051.) 495.39 446.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.4 (Closure types implicitly introduce edges into the type graph. There is an edge from each) 108 422.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(closure type) 108 410.31 T
0 F
(g) 164.44 410.31 T
1 F
( to all closure types) 169.44 410.31 T
0 F
(f) 257.16 410.31 T
1 F
( that satisfy the contravariant requirement that) 259.94 410.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(1.) 108 392.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(f) 121.54 392.31 T
1 F
( and) 124.32 392.31 T
0 F
(g) 146.25 392.31 T
1 F
( have the same name and number of ar) 151.25 392.31 T
(guments,) 323.12 392.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(2.) 108 377.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(f) 121.54 377.31 T
1 F
( and) 124.32 377.31 T
0 F
(g) 146.25 377.31 T
1 F
( either both r) 151.25 377.31 T
(eturn a value or neither does,) 208.11 377.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(3.) 108 362.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(the mode of each ar) 121.54 362.31 T
(gument is the same \050) 208.21 362.31 T
5 F
(in, out, inout) 299.71 362.31 T
1 F
(, or) 354.19 362.31 T
5 F
(once) 371.1 362.31 T
1 F
(\051,) 392.78 362.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(4.) 108 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(contravariant conformance) 121.54 347.31 T
1 F
(:) 230.13 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for any) 121.54 335.31 T
5 F
(in) 155.66 335.31 T
1 F
( or) 163.44 335.31 T
5 F
(once) 177.85 335.31 T
1 F
(ar) 202.31 335.31 T
(guments, the type in) 211.08 335.31 T
0 F
(g) 304.33 335.31 T
1 F
( is a subtype of the type in) 309.33 335.31 T
0 F
(f) 427.91 335.31 T
1 F
(;) 430.69 335.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for any) 121.54 323.31 T
5 F
(inout) 155.66 323.31 T
1 F
( ar) 177.34 323.31 T
(guments, the type in) 188.61 323.31 T
0 F
(f) 281.86 323.31 T
1 F
( is the same type as in) 284.64 323.31 T
0 F
(g) 383.61 323.31 T
1 F
(;) 388.61 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for any) 121.54 311.31 T
5 F
(out) 155.66 311.31 T
1 F
( ar) 169.56 311.31 T
(guments, the type in) 180.83 311.31 T
0 F
(f) 274.08 311.31 T
1 F
( is a subtype of the type in) 276.86 311.31 T
0 F
(g) 395.44 311.31 T
1 F
(; and) 400.44 311.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if it has one, the r) 121.54 299.31 T
(eturn type of) 197.72 299.31 T
0 F
(f) 257.48 299.31 T
1 F
( is a subtype of the r) 260.26 299.31 T
(eturn type of) 349.26 299.31 T
0 F
(g) 409.02 299.31 T
1 F
(.) 414.02 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (For example, \324) 108 275.31 P
5 F
-0.2 (ROUT{$OB}:INT) 170.38 275.31 P
1 F
-0.18 (\325 is a subtype of \324) 244.29 275.31 P
5 F
-0.2 (ROUT{INT}:$OB) 317.83 275.31 P
1 F
-0.18 (\325 and) 391.74 275.31 P
5 F
-0.2 (\325ITER{once $OB}\325) 416.09 275.31 P
1 F
-0.18 (is) 496.85 275.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a subtype of) 108 263.31 T
5 F
( \325ITER{once INT}\325) 164.71 263.31 T
1 F
(.) 241.96 263.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
239.7 656.11 250.01 667.08 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 239.11 659.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 56
%%Page: "57" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Exceptions) 310.96 709.51 T
4 F
(57) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Closure Examples) 108 658.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
119 265.2 108 265.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(E) 108 267 T
204.59 265.2 119 265.2 2 L
V
N
4 14.4 Q
(XCEPTIONS) 119 267 T
1 10 Q
0.9 (Exceptions ar) 108 241.33 P
0.9 (e used to escape fr) 168.37 241.33 P
0.9 (om method calls under unusual cir) 253.02 241.33 P
0.9 (cumstances.  For ex-) 411.96 241.33 P
1 (ample, a r) 108 229.33 P
1 (obust numerical application may wish to pr) 153.81 229.33 P
1 (ovide an alternate means of solv-) 352.93 229.33 P
0.68 (ing a pr) 108 217.33 P
0.68 (oblem under unusual cir) 143.43 217.33 P
0.68 (cumstances such as ill conditioning.  Exceptions bypass) 254.38 217.33 P
0.35 (the or) 108 205.33 P
0.35 (dinary way of r) 133.95 205.33 P
0.35 (eturning fr) 203.3 205.33 P
0.35 (om methods and may be used to skip over multiple call-) 251.39 205.33 P
(ers until a suitable handler is found.) 108 193.33 T
0.43 (Exceptions may be thought of as implicit alternate return values for all methods.  Excep-) 108 169.33 P
-0.2 (tions can be significantly slower than ordinary routine calls, so they should be avoided ex-) 108 157.33 P
(cept for truly exceptional \050unexpected\051 cases.) 108 145.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.81 (Here we double every element of an array) 108 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.17 (by applying a routine closure \324) 108 618.33 P
5 F
-0.19 (r) 242.32 618.33 P
1 F
-0.17 (\325 to each ele-) 245.65 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ment of an array \324) 108 606.33 T
5 F
(a) 186.55 606.33 T
1 F
(\325.) 192.11 606.33 T
1 1 0 0 0 0 1 K
306 594 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
-0.26 (r :ROUT{INT}:INT := bind\0502.0.times\050_\051\051;) 342 631 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop) 342 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(a.set!\050r.call\050a.elt!\051\051) 354.6 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
1.75 (This illustrates how \324self\325 may be left un-) 108 569.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.06 (bound.  The type of self must be inferred-) 108 557.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(from the type context \050) 108 545.33 T
5 F
(ROUT{INT}) 208.58 545.33 T
1 F
(\051.) 259.7 545.33 T
1 1 0 0 0 0 1 K
306 538 504 582 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(r :ROUT{INT} := bind\050_.plus\0503\051\051;) 342 560 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#OUT + r.call\0505\051;) 342 550 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(--) 430.2 550 T
9 F
(pr) 438.7 550 T
(ints) 446.83 550 T
5 F
( \3248\325) 460.84 550 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.47 (This creates an iterator closure that returns) 108 513.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.16 (successive odd integers, and then prints the) 108 501.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(first ten.) 108 489.33 T
1 1 0 0 0 0 1 K
306 467 504 526 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(odd_ints : ITER{INT}:INT;) 342 514 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(odd_ints := bind\0501.step!\050_,2\051\051;) 342 504 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop) 342 494 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#OUT + odd_ints.call!\05010\051;) 354.6 484 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 474 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
1.42 (An iterator closure is created that may be) 108 442.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.14 (used to extract elements of a map that satis-) 108 430.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fy the selection criteria defined by \324) 108 418.33 T
5 F
(select) 263.32 418.33 T
1 F
(\325.) 289.44 418.33 T
1 1 0 0 0 0 1 K
306 406 504 455 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(select:ROUT{T}:BOOL;) 342 443 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(select_elt:ITER{FMAP{K,T}}:T;) 342 433 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 342 423 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(select_elt := bind\050_.filter!\050select\051\051;) 342 413 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(By the conformance rule above,) 108 381.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(\324) 108 369.33 T
5 F
(ROUT{$OB}:INT) 110.78 369.33 T
1 F
(\325 is a subtype of) 184.69 369.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(\324) 108 357.33 T
5 F
(ROUT{INT}:$OB) 110.78 357.33 T
1 F
(\325.) 184.69 357.33 T
0 F
(The ICSI compiler does) 194.97 357.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.19 (not yet allow such contravariant closur) 108 345.33 P
-0.19 (e assign-) 264.91 345.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ments.) 108 333.33 T
1 1 0 0 0 0 1 K
306 326 504 394 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(a:ROUT{$OB}:INT;) 342 382 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(b:ROUT{INT}:$OB;) 342 372 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(b := a;) 342 362 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- This is a legal assignment) 379.8 362 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(a := b;) 342 352 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- This is not.) 379.8 352 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 57
%%Page: "58" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(58) 108 709.51 T
0 F
(Exceptions) 293.83 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(protect) 108 658 T
6 F
( statements) 144.68 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 559.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(protect_statement) 129.6 541.31 T
5 F
(protect) 217.29 541.31 T
0 F
(  statement_list) 247.87 541.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({) 151.2 529.31 T
5 F
(when) 157.03 529.31 T
0 F
(type_specifier) 186.49 529.31 T
5 F
(then) 246.68 529.31 T
0 F
(  statement_list }) 266.14 529.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 151.2 517.31 T
5 F
(else) 157.03 517.31 T
0 F
(  statement_list ]) 175.37 517.31 T
5 F
(end) 245.92 517.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.33 (Sather uses) 108 493.31 P
0 0 0 1 0 0 0 K
201.55 492.31 159.7 492.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.33 (exceptions) 159.7 493.31 P
1 F
-0.33 ( to signal and recover from exceptional situations. Exceptions may be) 201.55 493.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (explicitly raised by a program \050page 58\051 or generated by the system. Each exception is rep-) 108 481.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.59 (resented by an) 108 469.31 P
0 0 0 1 0 0 0 K
241.1 468.31 176.92 468.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.59 (exception object) 176.92 469.31 P
1 F
0.59 ( whose type is used to select a handler from a) 241.1 469.31 P
0 0 0 1 0 0 0 K
504 468.31 450.75 468.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.59 (protect state-) 450.75 469.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
128.56 456.31 108 456.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (ment) 108 457.31 P
1 F
-0.27 (. Execution of a) 128.56 457.31 P
5 F
-0.3 (protect) 197.76 457.31 P
1 F
-0.27 ( statement begins with the statement list following the \324) 228.33 457.31 P
5 F
-0.3 (protect) 470.65 457.31 P
1 F
-0.27 (\325) 501.22 457.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (keyword. These statements are executed to completion unless an exception is raised which) 108 445.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is not caught by some nested) 108 433.31 T
5 F
(protect) 238.22 433.31 T
1 F
(.) 268.79 433.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (When there is an uncaught exception in a protect statement, the system finds the first type) 108 409.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.88 (specifier listed in the \324) 108 397.31 P
5 F
0.98 (when) 208.49 397.31 P
1 F
0.88 (\325 lists which is a supertype of the exception object type. The) 232.39 397.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.14 (statement list following this specifier is executed and then control passes to the statement) 108 385.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.16 (following the) 108 373.31 P
5 F
0.18 (protect) 169.89 373.31 P
1 F
0.16 ( statement. An) 200.46 373.31 P
5 F
0.18 (exception) 267.79 373.31 P
1 F
0.16 ( expression \050page 60\051 may be used to access) 310.59 373.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.42 (the exception object in these handler statements. If none of the specified types are super-) 108 361.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (types, then the statements in an \324) 108 349.31 P
5 F
-0.32 (else) 251 349.31 P
1 F
-0.29 (\325 clause are executed if it is present. If it is not present,) 269.34 349.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.38 (the same exception object is raised to the next most recently entered) 108 337.31 P
5 F
1.53 (protect) 426.3 337.31 P
1 F
1.38 ( statement) 456.87 337.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.6 (which is still in progress. It is a fatal error to raise an exception which is not handled by) 108 325.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (some) 108 313.31 P
5 F
-0.04 (protect) 133.79 313.31 P
1 F
-0.04 ( statement.) 164.35 313.31 P
5 F
-0.04 (protect) 215.03 313.31 P
1 F
-0.04 ( statements may only contain iterator calls if they also con-) 245.6 313.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (tain the surrounding) 108 301.31 P
5 F
-0.29 (loop) 201.44 301.31 P
1 F
-0.27 ( statement.) 220.34 301.31 P
5 F
-0.29 (protect) 272.8 301.31 P
1 F
-0.27 ( statements without  an) 303.37 301.31 P
5 F
-0.29 (else) 407.93 301.31 P
1 F
-0.27 ( clause must have) 426.27 301.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(at least one) 108 289.31 T
5 F
(when) 160.03 289.31 T
1 F
(.) 183.93 289.31 T
0 0 0 1 0 0 0 K
108 240.95 504 243.98 C
0 0 0 1 0 0 0 K
72 242.46 540 242.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(raise) 108 247.98 T
6 F
( statements) 134 247.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 188.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(raise_statement) 129.6 170.29 T
5 F
(raise) 208.24 170.29 T
0 F
( expression) 229.9 170.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.18 (Exceptions are explicitly raised by) 108 146.29 P
0 0 0 1 0 0 0 K
325.03 145.29 260.49 145.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.18 (raise statements) 260.49 146.29 P
1 F
-0.18 (. The) 325.03 146.29 P
0 F
-0.18 (expression) 348.91 146.29 P
1 F
-0.18 ( is evaluated to obtain the) 391.14 146.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.62 (exception object. No statements may follow a) 108 134.29 P
5 F
0.69 (raise) 314.88 134.29 P
1 F
0.62 (statement in a statement list because) 340.02 134.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(they can never be executed.) 108 122.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 579.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(protect ...) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when E then ...) 342 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when $F then ...) 342 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(else ...) 342 596.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 586.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 216.29 T
1 1 0 0 0 0 1 K
306 208.95 504 228.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(raise x) 342 216.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
204.49 538.08 214.8 549.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 203.9 541.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
195.43 167.06 205.73 178.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 194.84 170.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 58
%%Page: "59" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Safety Featur) 302.11 709.51 T
(es) 356.11 709.51 T
4 F
(59) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(exception) 108 658 T
6 F
( expr) 159.36 658 T
(essions) 184.81 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 598.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(except_expression) 129.6 580.31 T
5 F
(exception) 217.32 580.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
194.5 555.31 108 555.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.08 (exception expressions) 108 556.31 P
1 F
-0.08 ( may only appear within the statements of the) 194.5 556.31 P
5 F
-0.09 (then) 399.22 556.31 P
1 F
-0.08 ( and) 418.68 556.31 P
5 F
-0.09 (else) 440.45 556.31 P
1 F
-0.08 ( clauses in) 458.79 556.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.35 (protect) 108 544.31 P
1 F
-0.32 ( statements. They return the exception object that caused the) 138.57 544.31 P
5 F
-0.35 (when) 404.62 544.31 P
1 F
-0.32 ( branch to be tak-) 428.52 544.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.19 (en in the most tightly enclosing) 108 532.31 P
5 F
0.21 (protect) 250.39 532.31 P
1 F
0.19 ( statement. The return type is the type specified in) 280.96 532.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the corresponding) 108 520.31 T
5 F
(when) 191.39 520.31 T
1 F
( clause \050page 58\051. In an) 215.29 520.31 T
5 F
(else) 318.23 520.31 T
1 F
( clause the return type is \324) 336.57 520.31 T
5 F
($OB) 450.2 520.31 T
1 F
(\325.) 470.21 520.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
119 457.18 108 457.18 2 L
V
0.9 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(S) 108 458.98 T
0 0 0 1 0 0 0 K
170.71 457.18 119 457.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(AFETY) 119 458.98 T
0 0 0 1 0 0 0 K
180.72 457.18 170.71 457.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(F) 170.71 458.98 T
0 0 0 1 0 0 0 K
249.52 457.18 180.72 457.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(EATURES) 180.72 458.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.44 (Methods definitions may include optional pre  and post conditions \050see page 31\051.  Together) 108 431.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (with \324) 108 419.31 P
5 F
-0.17 (assert) 133.45 419.31 P
1 F
-0.16 (\325 \050page 60\051, these features allow the earnest programmer to annotate the inten-) 160.68 419.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.67 (tion of code.  Implementations of Sather must provide facilities for turning on or off the) 108 407.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(runtime checking these safety features imply.) 108 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.07 (The optional \324) 108 371.31 P
5 F
1.19 (pre) 171.49 371.31 P
1 F
1.07 (\325 construct of method definitions contains a boolean expression which) 185.94 371.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.5 (must evaluate to) 108 359.31 P
5 F
-0.56 (true) 182.51 359.31 P
1 F
-0.5 ( whenever the method is called; it is a fatal error if it evaluates to) 199.74 359.31 P
5 F
-0.56 (false) 480.38 359.31 P
1 F
-0.5 (.) 501.5 359.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (The expression may refer to) 108 347.31 P
5 F
-0.44 (self) 231.57 347.31 P
1 F
-0.39 ( and to the routine\325s arguments.  For iterators, pre and post) 247.13 347.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(conditions are checked before and after every invocation, not just once per loop.) 108 335.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.67 (The optional \324) 108 311.31 P
5 F
0.74 (post) 170.68 311.31 P
1 F
0.67 (\325 construct of method definitions contains a boolean expression which) 189.58 311.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (must evaluate to true whenever the method returns; it is a fatal error if it evaluates to) 108 299.31 P
5 F
-0.39 (false) 480.38 299.31 P
1 F
-0.35 (.) 501.5 299.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (The expression may refer to) 108 287.31 P
5 F
-0.16 (self) 232.8 287.31 P
1 F
-0.15 ( and to the routine\325s arguments. It may use \324) 248.36 287.31 P
5 F
-0.16 (result) 442.15 287.31 P
1 F
-0.15 (\325 expres-) 466.6 287.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.26 (sions \050page 60\051 to refer to the value returned by the routine and \324) 108 275.31 P
5 F
0.29 (initial) 396.62 275.31 P
1 F
0.26 (\325 expressions \050page) 419.4 275.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60\051 to refer to values which are computed before the routine executes.) 108 263.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.52 (Classes may also define \324) 108 239.31 P
5 F
-0.58 (invariant) 215.94 239.31 P
1 F
-0.52 (\325, which is a post condition that applies to all public meth-) 253.73 239.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ods \050page 61\051.) 108 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 618.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(exception) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
204.51 577.08 214.82 588.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 203.92 580.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 59
%%Page: "60" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(60) 108 709.51 T
0 F
(Safety Featur) 284.98 709.51 T
(es) 338.97 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(assert) 108 658 T
6 F
( statements) 140.68 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 598.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(assert_statement) 129.6 580.31 T
5 F
(assert) 212.68 580.31 T
0 F
(  expression) 239.9 580.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
177.75 555.31 108 555.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.59 (assert statements) 108 556.31 P
1 F
0.59 ( specify a boolean expression that must evaluate to) 177.75 556.31 P
5 F
0.66 (true) 410.03 556.31 P
1 F
0.59 (; otherwise it is a) 427.26 556.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fatal error.) 108 544.31 T
0 0 0 1 0 0 0 K
108 495.95 504 498.98 C
0 0 0 1 0 0 0 K
72 497.46 540 497.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(initial) 108 502.98 T
6 F
( expr) 135.34 502.98 T
(essions) 160.79 502.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 434.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(initial_expression) 129.6 416.29 T
5 F
(initial \050) 216.59 416.29 T
0 F
( expression) 245.48 416.29 T
5 F
(\051) 292.7 416.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180.98 391.29 108 391.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.09 (initial expressions) 108 392.29 P
1 F
-0.09 ( may only appear in the) 180.98 392.29 P
5 F
-0.1 (post) 287.92 392.29 P
1 F
-0.09 ( expressions of methods. The) 306.82 392.29 P
0 F
-0.09 (expression) 437 392.29 P
1 F
-0.09 ( must) 479.23 392.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (have a return value and must not itself contain) 108 380.29 P
5 F
-0.13 (initial) 315.86 380.29 P
1 F
-0.12 ( expressions. When a routine is called) 338.64 380.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.36 (or an iterator resumes, it evaluates the) 108 368.29 P
0 F
-0.36 (expression) 276.86 368.29 P
1 F
-0.36 ( of each) 319.09 368.29 P
5 F
-0.4 (initial) 354.34 368.29 P
1 F
-0.36 (expression from left to right.) 379.5 368.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.37 (When the postcondition is checked at the end, each) 108 356.29 P
5 F
0.41 (initial) 339.78 356.29 P
1 F
0.37 ( expression returns its pre-com-) 362.56 356.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(puted value.) 108 344.29 T
0 0 0 1 0 0 0 K
108 295.93 504 298.95 C
0 0 0 1 0 0 0 K
72 297.44 540 297.44 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(result) 108 302.95 T
6 F
( expr) 137.34 302.95 T
(essions) 162.79 302.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 234.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(result_expression) 129.6 216.26 T
5 F
(result) 215.48 216.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180.34 191.26 108 191.26 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.38 (result expressions) 108 192.26 P
1 F
0.38 ( may only appear within the postconditions of methods that have return) 180.34 192.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.51 (values and may not appear within) 108 180.26 P
5 F
-0.57 (initial) 259.21 180.26 P
1 F
-0.51 ( expressions. They return the value returned by the) 281.99 180.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (routine or yielded by the iterator. Their type is the return type of the method in which they) 108 168.26 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(appear.) 108 156.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 618.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(assert x>5) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 471.29 T
1 1 0 0 0 0 1 K
306 454.95 504 483.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(add\050a: INT\051:INT) 342 471.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(post initial\050a\051 > result  is ...) 354.6 461.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 271.26 T
1 1 0 0 0 0 1 K
306 254.93 504 283.93 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(sum: INT) 342 271.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(post result > 5 is ...) 354.6 261.93 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
199.87 577.08 210.17 588.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 199.28 580.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
203.78 413.06 214.08 424.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 203.19 416.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
202.67 213.04 212.98 224.01 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 202.08 216.26 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 60
%%Page: "61" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Special featur) 289.66 709.51 T
(e names) 344.39 709.51 T
4 F
(61) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
119 652.2 108 652.2 2 L
0 X
V
0.9 H
0 Z
N
4 18 Q
(S) 108 654 T
177.09 652.2 119 652.2 2 L
V
N
4 14.4 Q
(PECIAL) 119 654 T
245.1 652.2 177.09 652.2 2 L
V
N
(FEATURE) 177.09 654 T
249.6 652.2 245.1 652.2 2 L
V
N
304.8 652.2 249.6 652.2 2 L
V
N
(NAMES) 249.6 654 T
1 10 Q
(This section describes featur) 108 628.33 T
(es of classes that have special pr) 232.7 628.33 T
(operties.) 374.06 628.33 T
0 0 0 1 0 0 0 K
108 579.98 504 583 C
0 0 0 1 0 0 0 K
72 581.49 540 581.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(invariant) 108 587 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
1.04 (If a r) 108 564.31 P
1.04 (outine with the signatur) 130.55 564.31 P
1.04 (e \324) 240.22 564.31 P
5 F
1.15 (invariant:BOOL) 251.33 564.31 P
1 F
1.04 (\325, appears in a class, it de\336nes a class in-) 318.95 564.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.27 (variant. It is a fatal err) 108 552.31 P
0.27 (or for it to evaluate to) 206.73 552.31 P
5 F
0.3 (false) 306.53 552.31 P
1 F
0.27 ( after any public method of the class r) 327.65 552.31 P
0.27 (e-) 495.88 552.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(turns, yields, or quits.) 108 540.31 T
0 0 0 1 0 0 0 K
108 491.95 504 494.98 C
0 0 0 1 0 0 0 K
72 493.46 540 493.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(main) 108 498.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
2.28 (A distinguished non-parameterized immutable or r) 108 476.29 P
2.28 (efer) 346.48 476.29 P
2.28 (ence class is speci\336ed when a) 363.17 476.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.09 (Sather pr) 108 464.29 P
2.09 (ogram is compiled, usually \324) 150.44 464.29 P
5 F
2.32 (MAIN) 284.16 464.29 P
1 F
2.09 (\325. This class must de\336ne a r) 309.16 464.29 P
2.09 (outine named) 440.59 464.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.76 (\324) 108 452.29 P
5 F
0.85 (main) 110.78 452.29 P
1 F
0.76 (\325. When the pr) 132.45 452.29 P
0.76 (ogram executes, an object of the speci\336ed type is cr) 197.59 452.29 P
0.76 (eated and \324) 429.37 452.29 P
5 F
0.85 (main) 479.55 452.29 P
1 F
0.76 (\325) 501.22 452.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.02 (is called on it. If) 108 440.29 P
5 F
1.13 (main) 185.56 440.29 P
1 F
1.02 ( is declar) 207.23 440.29 P
1.02 (ed to have an ar) 248.44 440.29 P
1.02 (gument of type) 322.99 440.29 P
5 F
1.13 (ARRAY{STR}) 396.25 440.29 P
1 F
1.02 (, it will be) 457.38 440.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.32 (passed an array of any command line ar) 108 428.29 P
0.32 (guments pr) 287.24 428.29 P
0.32 (ovided by the envir) 338.37 428.29 P
0.32 (onment when the) 425.75 428.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.39 (pr) 108 416.29 P
0.39 (ogram is called. If it is declar) 117.78 416.29 P
0.39 (ed to have a r) 246.75 416.29 P
0.39 (eturn value of type) 307.95 416.29 P
5 F
0.43 (INT) 396.13 416.29 P
1 F
0.39 (, this will specify the) 411.5 416.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exit code of the pr) 108 404.29 T
(ogram when it \336nishes execution.) 187.36 404.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 61
%%Page: "62" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(62) 108 709.51 T
0 F
(Built-in classes) 285.07 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
120.01 652.2 108 652.2 2 L
0 X
V
0.9 H
0 Z
N
4 18 Q
(B) 108 654 T
155.21 652.2 120.01 652.2 2 L
V
N
4 14.4 Q
(UILT) 120.01 654 T
161.21 652.2 155.21 652.2 2 L
V
N
4 18 Q
(-) 155.21 654 T
183.3 652.2 161.21 652.2 2 L
V
N
4 14.4 Q
(IN) 161.21 654 T
248.9 652.2 183.3 652.2 2 L
V
N
(CLASSES) 183.3 654 T
1 10 Q
0.58 (This section pr) 108 628.33 P
0.58 (ovides a short description of classes that ar) 173.97 628.33 P
0.58 (e a part of every Sather imple-) 367.11 628.33 P
0.61 (mentation and which may not be modi\336ed. The detailed semantics and pr) 108 616.33 P
0.61 (ecise interface) 441.43 616.33 P
(ar) 108 604.33 T
(e speci\336ed in the class library documentation.) 116.77 604.33 T
(\245) 108 586.33 T
5 F
(\324$OB\325) 121.54 586.33 T
1 F
( is automatically a supertype of every type. V) 145.99 586.33 T
(ariables declar) 345.3 586.33 T
(ed by this type may) 409.15 586.33 T
(hold any object. It has no featur) 121.54 574.33 T
(es.) 260.69 574.33 T
(\245) 108 559.33 T
5 F
(\324AREF{T}\325) 121.54 559.33 T
1 F
( is a r) 165.44 559.33 T
(efer) 188.86 559.33 T
(ence array class. Any r) 205.54 559.33 T
(efer) 305.1 559.33 T
(ence class which includes it obtains an) 321.78 559.33 T
(array of elements of type) 121.54 547.33 T
5 F
(T) 234.13 547.33 T
1 F
( in addition to any attributes it has de\336ned. In such classes,) 240.24 547.33 T
5 F
(new) 121.54 535.33 T
1 F
(has a single integer ar) 142.66 535.33 T
(gument that speci\336es the size of the array portion. It de-) 238.8 535.33 T
(\336nes r) 121.54 523.33 T
(outines and iters named: \324) 148.71 523.33 T
5 F
(asize) 263.13 523.33 T
1 F
(\325, \324) 286.47 523.33 T
5 F
(aget) 297.03 523.33 T
1 F
(\325, \324) 316.49 523.33 T
5 F
(aset) 327.05 523.33 T
1 F
(\325, \324) 345.95 523.33 T
5 F
(aclear) 356.51 523.33 T
1 F
(\325, \324) 384.48 523.33 T
5 F
(acopy) 395.04 523.33 T
1 F
(\325, \324) 421.72 523.33 T
5 F
(aelts!) 432.28 523.33 T
1 F
(\325, \324) 456.18 523.33 T
5 F
(aset!) 466.74 523.33 T
1 F
(\325,) 488.42 523.33 T
(and \324) 121.54 511.33 T
5 F
(ainds!) 143.75 511.33 T
1 F
(\325. Array indices start at zer) 170.43 511.33 T
(o.  \324) 287.2 511.33 T
5 F
(AVAL{T}) 302.94 511.33 T
1 F
(\325 is the immutable class analog of) 341.3 511.33 T
(\324) 121.54 499.33 T
5 F
(AREF) 124.32 499.33 T
1 F
(\325. Classes which include \324) 150.99 499.33 T
5 F
(AVAL) 261.9 499.33 T
1 F
(\325 must de\336ne) 286.73 499.33 T
5 F
(asize) 346.93 499.33 T
1 F
( as an integer constant which) 370.27 499.33 T
(determines the size of the array portion.  \324) 121.54 487.33 T
5 F
(ARRAY{T}) 306.11 487.33 T
1 F
(\325 includes fr) 353.35 487.33 T
(om \324) 405.48 487.33 T
5 F
(AREF) 425.05 487.33 T
1 F
(\325 and de-) 451.72 487.33 T
(\336nes general purpose array objects. They may be dir) 121.54 475.33 T
(ectly constr) 352.57 475.33 T
(ucted by array  cr) 403.12 475.33 T
(e-) 480.51 475.33 T
(ation expr) 121.54 463.33 T
(essions \050page 48\051.) 166.22 463.33 T
(\245) 108 448.33 T
(\324) 121.54 448.33 T
5 F
(TUP) 124.32 448.33 T
1 F
(\325 names a set of parameterized immutable types called tuples, one for each num-) 144.32 448.33 T
(ber of parameters. Each has as many attributes as parameters and they ar) 121.54 436.33 T
(e named \324) 444.22 436.33 T
5 F
(t1) 487.34 436.33 T
1 F
(\325,) 495.68 436.33 T
(\324) 121.54 424.33 T
5 F
(t2) 124.32 424.33 T
1 F
(\325, etc. Each is declar) 132.66 424.33 T
(ed by the type of the corr) 218.47 424.33 T
(esponding parameter \050) 329.23 424.33 T
0 F
(e.g.) 429.86 424.33 T
1 F
(\324) 121.54 412.33 T
5 F
(TUP{INT,FLT}) 124.32 412.33 T
1 F
(\325 has attributes \324) 187.67 412.33 T
5 F
(t1:INT) 258.02 412.33 T
1 F
(\325 and \324) 285.25 412.33 T
5 F
(t2:FLT) 312.74 412.33 T
1 F
(\325\051. It de\336nes \324) 341.64 412.33 T
5 F
(create) 398.96 412.33 T
1 F
(\325 with an ar) 426.75 412.33 T
(gu-) 476.95 412.33 T
(ment corr) 121.54 400.33 T
(esponding to each attribute.) 164.36 400.33 T
(\245) 108 385.33 T
(The literal form for a number of primitive types wer) 121.54 385.33 T
(e intr) 351.54 385.33 T
(oduced on page 39:) 374.59 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(T) 112.68 355.33 T
(ype) 117.99 355.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Initial v) 147.65 355.33 T
(alue) 178.79 355.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 331.67 355.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(BOOL) 109.55 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(f) 163.1 334 T
(alse) 166.01 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Immutable objects which represent boolean values.) 207.55 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(CHAR) 109.55 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(\325\1340\325) 165.06 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
1.23 (Immutable objects which represent characters.  The number of bits in a) 207.55 315 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324) 207.55 304 T
5 F
(CHAR) 210.06 304 T
1 F
(\325 object is less than or equal to the number in an \324) 235.55 304 T
5 F
(INT) 429.45 304 T
1 F
(\325 object.) 443.95 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(STR) 109.55 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
("" \050) 155.51 285 T
5 F
(void) 168.1 285 T
2 F
(\051) 184.6 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.39 (Reference objects which represent strings for characters.  \324) 207.55 285 P
5 F
0.44 (void) 440.43 285 P
1 F
0.39 (\325 is a repre-) 456.94 285 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sentation for the null string.) 207.55 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(INT) 109.55 255 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(0) 169.3 255 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.37 (Immutable objects which represent efficient integers. The size is defined by) 207.55 255 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.31 (the Sather implementation but must be at least 32 bits. The two\325s comple-) 207.55 244 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (ment representation is used to represent negative values. Bit operations are) 207.55 233 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(supported in addition to numerical operations.) 207.55 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(INTI) 109.55 203 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(0i) 168.05 203 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Reference objects which represent infinite precision integers.) 207.55 203 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(FLT) 109.55 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(0.0) 165.93 184 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.47 (Immutable objects which represent single precision floating point values as) 207.55 184 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(defined by the IEEE-754-1985 standard.) 207.55 173 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(FLTD) 109.55 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(0.0d) 163.68 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.01 (Immutable objects which represent double precision floating point values.) 207.55 154 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(FLTI) 109.55 135 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(0.0i) 164.68 135 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.52 (Reference objects which represent arbitrary precision floating point objects.) 207.55 135 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
103.55 369 103.55 129 2 L
V
2 H
N
141.55 371 141.55 127 2 L
V
0.5 H
N
201.55 371 201.55 127 2 L
V
N
508.45 369 508.45 129 2 L
V
2 H
N
102.55 370 509.45 370 2 L
V
N
102.55 346 509.45 346 2 L
V
N
102.55 327 509.45 327 2 L
V
0.5 H
N
102.55 297 509.45 297 2 L
V
N
102.55 267 509.45 267 2 L
V
N
102.55 215 509.45 215 2 L
V
N
102.55 196 509.45 196 2 L
V
N
102.55 166 509.45 166 2 L
V
N
102.55 147 509.45 147 2 L
V
N
102.55 128 509.45 128 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 62
%%Page: "63" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Built-in classes) 302.21 709.51 T
4 F
(63) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
(\245) 108 659.33 T
5 F
(SYS) 121.54 659.33 T
1 F
( de\336nes a number of r) 141.55 659.33 T
(outines for accessing system information:) 238.36 659.33 T
(\245) 108 353.33 T
5 F
($FINALIZE) 121.54 353.33 T
1 F
( de\336nes the single r) 171 353.33 T
(outine) 256.67 353.33 T
5 F
(finalize) 287.44 353.33 T
1 F
(.  Any class whose objects need to per-) 318.56 353.33 T
(form special operations befor) 121.54 341.33 T
(e they ar) 250.69 341.33 T
(e garbage collected should subtype fr) 288.68 341.33 T
(om) 453.56 341.33 T
5 F
($FI-) 470.35 341.33 T
(NALIZE) 121.54 329.33 T
1 F
(.  The) 156.55 329.33 T
5 F
(finalize) 183.29 329.33 T
1 F
( r) 214.41 329.33 T
(outine will be called once on such objects befor) 220.68 329.33 T
(e the pr) 427.76 329.33 T
(ogram) 461.2 329.33 T
(terminates.  This may happen at any time, even concurr) 121.54 317.33 T
(ently with other code, and no) 367.22 317.33 T
(guarantee is made about the or) 121.54 305.33 T
(der of \336nalization of objects which r) 258.5 305.33 T
(efer to each other) 417.23 305.33 T
(.) 492.9 305.33 T
(Finalization will only occur once, even if new r) 121.54 293.33 T
(efer) 328.26 293.33 T
(ences ar) 344.94 293.33 T
(e cr) 380.29 293.33 T
(eated to the object dur-) 395.79 293.33 T
(ing \336nalization.  Because few guarantees can be made about the envir) 121.54 281.33 T
(onment in) 428.67 281.33 T
(which \336nalization occurs, \336nalization is consider) 121.54 269.33 T
(ed danger) 337.4 269.33 T
(ous and should only be) 381.85 269.33 T
(used in the rar) 121.54 257.33 T
(e cases that conventional coding will not suf) 185.53 257.33 T
(\336ce.) 380.54 257.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Routine) 150.29 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 344.17 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(is_eq\050ob1, ob2:$OB\051:BOOL) 110.63 608 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.34 (Tests two objects for equality.  If the arguments are of different type,) 233.63 608 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.74 (it returns \324) 233.63 597 P
5 F
0.82 (false) 276.49 597 P
1 F
0.74 (\325.  If both objects are immutable, this is a recursive) 295.5 597 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.5 (test on the arguments\325 attributes.  If they are reference types, it re-) 233.63 586 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (turns \324) 233.63 575 P
5 F
-0.1 (true) 259.26 575 P
1 F
-0.09 (\325 if the arguments are the same object.  It is a fatal error to) 274.76 575 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(call with external, closure, or void reference arguments.) 233.63 564 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(is_lt\050ob1, ob2:$OB\051:BOOL) 110.63 545 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.35 (Defines an arbitrary total order on objects.  This never returns true) 233.63 545 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (if \324) 233.63 534 P
5 F
-0.38 (is_eq) 243.66 534 P
1 F
-0.34 (\325 would return true with the same arguments.  It is a fatal er-) 265.17 534 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ror to call with external, closure, or void reference arguments.) 233.63 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(hash\050ob:$OB\051:INT) 110.63 504 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.04 (Defines an arbitrary hash function.  For reference arguments, this is) 233.63 504 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (a hash of the pointer; for immutable types, a recursive hash of all at-) 233.63 493 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.03 (tributes.  Hash values for two objects are guaranteed to be identical) 233.63 482 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(when \324is_eq\325 would return true, but the converse is not true.) 233.63 471 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(type\050ob:$OB\051:INT) 110.63 452 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Returns the concrete type of an object encoded as an \324) 233.63 452 T
5 F
(INT) 446.03 452 T
1 F
(\325.) 460.53 452 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(str_for_type\050i:INT\051:STR) 110.63 433 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.31 (Returns a string representation associated with the integer.  Useful) 233.63 433 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for debugging in combination with \324) 233.63 422 T
5 F
(type) 377.98 422 T
1 F
(\325 above.) 394.99 422 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(destroy\050ob:$OB\051) 110.63 403 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.49 (Explicitly deallocates an object. Sather is garbage collected and casu-) 233.63 403 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.53 (al use of \324) 233.63 392 P
5 F
-0.59 (destroy) 269.88 392 P
1 F
-0.53 (\325 is discouraged.  Sather implementations must pro-) 299.39 392 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vide a way of detecting accesses to destroyed objects \050a fatal error\051.) 233.63 381 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
104.63 643 104.63 375 2 L
V
2 H
0 Z
N
227.63 645 227.63 373 2 L
V
0.5 H
N
507.37 643 507.37 375 2 L
V
2 H
N
103.63 644 508.37 644 2 L
V
N
103.63 620 508.37 620 2 L
V
N
103.63 557 508.37 557 2 L
V
0.5 H
N
103.63 516 508.37 516 2 L
V
N
103.63 464 508.37 464 2 L
V
N
103.63 445 508.37 445 2 L
V
N
103.63 415 508.37 415 2 L
V
N
103.63 374 508.37 374 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 63
%%Page: "64" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(64) 108 709.51 T
0 F
(Conventions) 290.3 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
121 652.2 108 652.2 2 L
0 X
V
0.9 H
0 Z
N
4 18 Q
(C) 108 654 T
224.98 652.2 121 652.2 2 L
V
N
4 14.4 Q
(ONVENTIONS) 121 654 T
1 10 Q
1.04 (This section presents conventions used throughout the standard Sather libraries.  Some) 108 626.33 P
-0.27 (conventions regard naming, while others dictate subtyping from certain abstract classes in) 108 614.33 P
-0.33 (the base library.  Adhering to these conventions allows code from independent developers) 108 602.33 P
(to be used together and makes code easier to understand.) 108 590.33 T
0 0 0 1 0 0 0 K
108 541.98 504 545 C
0 0 0 1 0 0 0 K
72 543.49 540 543.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Object Cr) 108 549 T
(eation) 159.43 549 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.27 (Sather provides a special syntactic sugar \050page 49\051  for calls to the routine \324) 108 521.31 P
5 F
0.3 (create) 440.83 521.31 P
1 F
0.27 (\325, which) 468.62 521.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.18 (nearly all classes define.  It is often convenient to overload \324) 108 509.31 P
5 F
0.2 (create) 372.51 509.31 P
1 F
0.18 (\325 routines to do conver-) 400.3 509.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sion between types as well.) 108 497.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(All three create routines shown could be invoked with the \324) 108 269.31 T
5 F
(#) 370.13 269.31 T
1 F
(\325 sugar \050page 47\051.) 375.69 269.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.05 (This is the canonical \324) 108 469.31 P
5 F
-0.06 (create) 202.49 469.31 P
1 F
-0.05 (\325 routine, which) 230.28 469.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.36 (simply returns an uninitialized \050page 47\051) 108 457.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(object.) 108 445.31 T
1 1 0 0 0 0 1 K
306 437.98 504 481.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(create:SAME is) 342 469.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(return new) 354.6 459.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 449.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.68 (This is a \324) 108 413.31 P
5 F
0.76 (create) 151.58 413.31 P
1 F
0.68 (\325 routine for an object with) 179.37 413.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.52 (an array portion.  Such objects require an in-) 108 401.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.1 (teger argument to \324) 108 389.31 P
5 F
0.11 (new) 192.89 389.31 P
1 F
0.1 (\325.  This example cre-) 211.23 389.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.03 (ates a new object with 10 array elements) 108 377.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(indexed zero through nine.) 108 365.31 T
1 1 0 0 0 0 1 K
306 357.98 504 425.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(create:SAME is) 342 403.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(return new\05010\051) 354.6 393.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 383.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.5 (This \324create\325 routine converts a string to an) 108 333.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.92 (object.  This could be used in combination) 108 321.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.06 (with still other create routines to convert) 108 309.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(from different types.) 108 297.31 T
1 1 0 0 0 0 1 K
306 289.98 504 345.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(create\050arg:STR\051:SAME is) 342 323.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 354.6 313.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 303.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 64
%%Page: "65" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Conventions) 307.44 709.51 T
4 F
(65) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Naming) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(In addition to \324) 108 635.31 T
5 F
(create) 173.77 635.31 T
1 F
(\325, ther) 201.56 635.31 T
(e ar) 226.98 635.31 T
(e a number of other naming conventions:) 243.04 635.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 617.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Classes which ar) 121.54 617.31 T
(e r) 195.15 617.31 T
(elated should r) 206.21 617.31 T
(e\337ect this in their names.  For example, ther) 272.41 617.31 T
(e ar) 465.24 617.31 T
(e) 481.3 617.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(many examples in the library of an abstraction, classes implementing the abstraction,) 121.54 605.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and code testing implementations of the abstraction.  For example, in the standar) 121.54 593.31 T
(d li-) 478.74 593.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(brary the set abstraction is named) 121.54 581.31 T
5 F
($SET) 273.26 581.31 T
1 F
(, H_SET is a hash table implementation, and) 297.53 581.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the test code is) 121.54 569.31 T
5 F
(TEST_SET) 188.91 569.31 T
1 F
(.) 238.74 569.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 554.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Some classes implement an immutable, \324mathematical\325 abstraction \050) 121.54 554.31 T
0 F
(eg.) 420.6 554.31 T
1 F
(integers\051, and) 434.49 554.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(others implement mutable abstractions that can be modi\336ed in place \050) 121.54 542.31 T
0 F
(eg.) 430.06 542.31 T
1 F
( arrays\051.  The) 441.45 542.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(former ar) 121.54 530.31 T
(e easier to r) 163.12 530.31 T
(eason about and safer to pr) 213.58 530.31 T
(ogram with, while the later can be) 333.41 530.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mor) 121.54 518.31 T
(e ef) 139.6 518.31 T
(\336cient.  It is very important not to confuse the two: objects that at any time r) 154.83 518.31 T
(ep-) 489.23 518.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 121.54 506.31 T
(esent a set ar) 125.31 506.31 T
(e not sets themselves.  They have entir) 181.77 506.31 T
(ely dif) 351.06 506.31 T
(fer) 378.99 506.31 T
(ent pr) 390.88 506.31 T
(operties, such as) 417.03 506.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(observable aliasing and having an equality r) 121.54 494.31 T
(elation that changes over time.) 317.08 494.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Classes with immutable semantics ar) 121.54 479.31 T
(e given their \324mathematical\325 names: STR,) 284.77 479.31 T
5 F
(VEC) 467.37 479.31 T
1 F
(,) 487.93 479.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
($SET) 121.54 467.31 T
1 F
(.  Mutable classes that r) 145.81 467.31 T
(epr) 248.76 467.31 T
(esent a value that may change over time have the pr) 263.33 467.31 T
(e-) 493.32 467.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336x \324) 121.54 455.31 T
5 F
(OB) 138.03 455.31 T
1 F
(\325:) 152.48 455.31 T
5 F
(OBSTR) 160.26 455.31 T
1 F
(,) 194.71 455.31 T
5 F
(OBVEC) 199.71 455.31 T
1 F
(,) 234.72 455.31 T
5 F
($OBSET) 239.72 455.31 T
1 F
(. When both versions exist, the method \324) 278.44 455.31 T
5 F
(value) 455.78 455.31 T
1 F
(\325 is) 479.68 455.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(used to take a \324snapshot\325 of the object\325s state, converting fr) 121.54 443.31 T
(om the mutable to the im-) 378.76 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mutable form.) 121.54 431.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 416.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Conversions fr) 121.54 416.31 T
(om a type) 186.57 416.31 T
5 F
(FOO) 232.98 416.31 T
1 F
( to a type) 254.65 416.31 T
5 F
(BAR) 297.99 416.31 T
1 F
( occur in two ways: by de\336ning an appr) 318.55 416.31 T
(o-) 494.06 416.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(priate \324) 121.54 404.31 T
5 F
(create) 152.74 404.31 T
1 F
(\325 r) 180.53 404.31 T
(outine in) 189.58 404.31 T
5 F
(BAR) 231.58 404.31 T
1 F
( as seen above, or be de\336ning a r) 252.14 404.31 T
(outine \324) 395.51 404.31 T
5 F
(bar:BAR) 429.06 404.31 T
1 F
(\325 in) 466.85 404.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(FOO) 121.54 392.31 T
1 F
(.  For example, in the standar) 143.21 392.31 T
(d library conversion of a) 271.47 392.31 T
5 F
(FLT) 382.22 392.31 T
1 F
( to a) 400 392.31 T
5 F
(FLTD) 421.22 392.31 T
1 F
( is done by) 446.22 392.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(calling the r) 121.54 380.31 T
(outine \324) 173.73 380.31 T
5 F
(fltd:FLTD) 207.28 380.31 T
1 F
(\325 de\336ned in) 248.4 380.31 T
5 F
(FLT) 301.08 380.31 T
1 F
(.) 318.12 380.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 365.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Methods which r) 121.54 365.31 T
(eturn a) 196.78 365.31 T
5 F
(BOOL) 230.63 365.31 T
1 F
( \050called) 258.42 365.31 T
0 0 0 1 0 0 0 K
333.09 364.31 292.91 364.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(predicates) 292.91 365.31 T
1 F
(\051, should have the pr) 333.09 365.31 T
(e\336x \324) 424.4 365.31 T
5 F
(is_) 445.68 365.31 T
1 F
(\325.  For ex-) 458.46 365.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ample, \324) 121.54 353.31 T
5 F
(is_prime) 156.86 353.31 T
1 F
(\325 tests integers for primality) 194.64 353.31 T
(.) 315.5 353.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 338.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Abstract classes that r) 121.54 338.31 T
(equir) 217.47 338.31 T
(e a single method should be named after that method.  For) 240.57 338.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(example, subtypes of) 121.54 326.31 T
5 F
($HASH) 217.48 326.31 T
1 F
( de\336ne the method \324) 250.82 326.31 T
5 F
(hash) 339.3 326.31 T
1 F
(\325.) 360.98 326.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 311.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(If ther) 121.54 311.31 T
(e is a single iterator in a container class which r) 148.38 311.31 T
(eturns all of the items, it should) 356.24 311.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(be named \324) 121.54 299.31 T
5 F
(elt!) 170.19 299.31 T
1 F
(\325.  If ther) 183.53 299.31 T
(e is a single iterator which sets the items, it should be named) 220.65 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324) 121.54 287.31 T
5 F
(set!) 124.32 287.31 T
1 F
(\325.  In general, iterators should have singular \050\324) 140.44 287.31 T
5 F
(elt!) 341.41 287.31 T
1 F
(\325\051 rather than plural \050\324) 354.75 287.31 T
5 F
(elts!) 450.45 287.31 T
1 F
(\325\051) 468.79 287.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(names if the choice is arbitrary) 121.54 275.31 T
(.) 255.84 275.31 T
0 0 0 1 0 0 0 K
108 226.95 504 229.98 C
0 0 0 1 0 0 0 K
72 228.46 540 228.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Object Identity) 108 233.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.15 (Many languages provide built-in pointer and structural equality and comparison.  To pre-) 108 206.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (serve encapsulation, in Sather these operations must go through the class interface like ev-) 108 194.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (ery method.  The \324) 108 182.29 P
5 F
-0.05 (=) 188.4 182.29 P
1 F
-0.05 (\325 symbol is syntactic sugar for a call to \324) 194.24 182.29 P
5 F
-0.05 (is_eq) 366.96 182.29 P
1 F
-0.05 (\325 \050page 49\051.  \324) 390.86 182.29 P
5 F
-0.05 (is_eq:BOOL) 446.75 182.29 P
1 F
-0.05 (\325) 501.22 182.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(must be explicitly defined by the type of the left side for this syntax to be useful.) 108 170.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 65
%%Page: "66" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(66) 108 709.51 T
0 F
(Conventions) 290.3 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.29 (The) 108 659.33 P
5 F
0.32 (SYS) 127.53 659.33 P
1 F
0.29 ( class) 147.54 659.33 P
0.29 ( \050page 63\051 can be used to obtain equality based on pointer or structural no-) 171.16 659.33 P
0.22 (tions of identity.  This class also provides built-in mechanisms for comparison  and hash-) 108 647.33 P
(ing.) 108 635.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 263.98 504 267 C
0 0 0 1 0 0 0 K
72 265.49 540 265.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Nil and void) 108 271 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.51 (Reference class variables can be declared without being allocated.  Unassigned reference) 108 243.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.14 (or abstract type variables have the) 108 231.31 P
5 F
1.26 (void) 268.65 231.31 P
1 F
1.14 ( value, indicating the non-existence of an object) 286.99 231.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (\050page 46\051.  However, for immutable types this unassigned value is not distinguished from) 108 219.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(other legitimate values; for example, the) 108 207.31 T
5 F
(void) 288.22 207.31 T
1 F
( of type) 306.56 207.31 T
5 F
(INT) 342.47 207.31 T
1 F
( is the zero.) 358.58 207.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (It is often algorithmically convenient to have a sentinel value which has a special interpre-) 108 183.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.34 (tation.  For example, hash tables often distinguish empty table entries without a separate) 108 171.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.14 (bit indicating that an entry is empty.  Because) 108 159.31 P
5 F
1.27 (void) 322.24 159.31 P
1 F
1.14 ( is a legitimate value for immutable) 340.58 159.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.51 (types,) 108 147.31 P
5 F
0.56 (void) 137.37 147.31 P
1 F
0.51 ( can\325t be used as this sentinel value.  For this reason, classes may define a \324) 155.71 147.31 P
5 F
0.56 (nil) 491.22 147.31 P
1 F
0.51 (\325) 501.22 147.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.92 (Classes which define their own notion of) 108 607.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.54 (equality should subtype from) 108 595.33 P
5 F
-0.6 ($IS_EQ) 239.46 595.33 P
1 F
-0.54 (.  This) 274.48 595.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.05 (class is a common parameter bound in con-) 108 583.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(tainer classes.) 108 571.33 T
1 1 0 0 0 0 1 K
306 564 504 620 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
9 9 Q
0 X
0 0 0 1 0 0 0 K
(-- In standard libr) 342 608 T
(ar) 409.93 608 T
(y) 418.2 608 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(type $IS_EQ is) 342 598 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is_eq\050e:$OB\051: BOOL;) 354.6 588 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 578 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
2.49 (Many classes define a notion of equality) 108 539.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.56 (which is different than pointer equality.  For) 108 527.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.31 (example, two) 108 515.33 P
5 F
0.35 (STR) 170.68 515.33 P
1 F
0.31 ( strings may be equal al-) 190.68 515.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(though they are not unique.) 108 503.33 T
1 1 0 0 0 0 1 K
306 493 504 552 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(class STR < $IS_EQ is) 342 540 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 354.6 530 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is_eq\050arg:$OB\051:BOOL is ... end;) 354.6 520 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 354.6 510 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 500 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
1.41 (Many container classes need to be able to) 108 468.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.58 (compute hash values of their items. Just as) 108 456.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
4.19 (with \324) 108 444.33 P
5 F
4.66 (is_eq) 137.8 444.33 P
1 F
4.19 (\325, classes may subtype from) 161.7 444.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
1.1 ($HASH) 108 432.33 P
1 F
0.99 ( to indicate that they know how to) 141.34 432.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.16 (compute their own hash value.) 108 420.33 P
5 F
-0.18 (ID) 248.96 420.33 P
1 F
-0.16 ( also pro-) 258.96 420.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(vides this built-in hash function.) 108 408.33 T
1 1 0 0 0 0 1 K
306 401 504 481 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 9 Q
0 X
0 0 0 1 0 0 0 K
(-- In standard libr) 342 459 T
(ar) 409.93 459 T
(y) 418.2 459 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(type $HASH is) 342 449 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(hash:INT;) 354.6 439 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 429 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
4.79 (To preserve class encapsulation, Sather) 108 376.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.11 (does not provide a built-in way to copy ob-) 108 364.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.35 (jects.  By convention, objects are copied by a) 108 352.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.95 (class-defined routine \324) 108 340.33 P
5 F
4.39 (copy) 213.91 340.33 P
1 F
3.95 (\325, and classes) 235.04 340.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.7 (which provide this should subtype from) 108 328.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
($COPY) 108 316.33 T
1 F
(.) 141.9 316.33 T
1 1 0 0 0 0 1 K
306 309 504 389 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 9 Q
0 X
0 0 0 1 0 0 0 K
(-- In standard libr) 342 367 T
(ar) 409.93 367 T
(y) 418.2 367 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(type $COPY is) 342 357 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(copy:SAME;) 354.6 347 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 337 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 66
%%Page: "67" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(IEEE Floating-Point) 291.2 709.51 T
4 F
(67) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.17 (value to be used to represent the non-existence of an immutable object.  Such classes sub-) 108 659.33 P
(type from) 108 647.33 T
5 F
($NIL) 154.19 647.33 T
1 F
(and define the routines \324) 178.09 647.33 T
5 F
(nil:SAME) 285.88 647.33 T
1 F
(\325 and) 327 647.33 T
5 F
(\324is_nil: BOOL) 351.71 647.33 T
1 F
(\325.) 410.06 647.33 T
152.5 492.2 108 492.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(IEEE) 108 494 T
162.5 492.2 152.5 492.2 2 L
V
N
(F) 152.5 494 T
233.7 492.2 162.5 492.2 2 L
V
N
4 14.4 Q
(LOATING) 162.5 494 T
250.69 492.2 233.7 492.2 2 L
V
N
4 18 Q
(-P) 233.7 494 T
289.88 492.2 250.69 492.2 2 L
V
N
4 14.4 Q
(OINT) 250.69 494 T
1 10 Q
0.42 (Sather attempts to conform to the IEEE 754-1985 specification for its floating point types.) 108 466.33 P
-0.16 (Unfortunately, many platforms make it difficult to do so.  For example, underflow is often) 108 454.33 P
0.14 (improperly implemented to flush to zero rather than use IEEE\325s gradual underflow.  This) 108 442.33 P
-0.36 (happens because gradual underflow is a special case and can be quite slow if implemented) 108 430.33 P
0.21 (using traps.  When benchmarks include simulations which cause many underflows, mar-) 108 418.33 P
(keting pressures make flush-to-zero the default.) 108 406.33 T
-0.54 (There are many other problems. Microsoft\325s C and C++ compilers defeat the purpose of the) 108 382.33 P
0.78 (invalid flag by using it exclusively to detect floating-point stack overflows, so program-) 108 370.33 P
0.38 (mers cannot use it.  There is no portable C interface to IEEE exception flags and their be-) 108 358.33 P
0.52 (havior with respect to \324) 108 346.33 P
5 F
0.57 (setjmp) 212.17 346.33 P
1 F
0.52 (\325 is suspect.  Threads packages often fail to address proper) 241.62 346.33 P
(handling of IEEE exceptions and rounding modes.) 108 334.33 T
0 (Correct IEEE support from various platforms was the single worst porting problem of the) 108 310.33 P
0.58 (Sather 1.0 compiler.  In 1.1, we give up and make full IEEE compliance optional.  Sather) 108 298.33 P
1.23 (implementations are expected to conform to the) 108 286.33 P
0 F
1.23 (spirit) 330.64 286.33 P
1 F
1.23 (, if not the letter, of IEEE 754, al-) 352.32 286.33 P
0.72 (though proper exceptions, extended types, underflow handling, and correct handling of) 108 274.33 P
(positive and negative zero are specifically) 108 262.33 T
0 F
(not) 295.33 262.33 T
1 F
( required.) 308.66 262.33 T
-0.52 (The Sather treatment of) 108 238.33 P
5 F
-0.58 (NaN) 212.46 238.33 P
1 F
-0.52 (s is particularly tricky; IEEE wants) 232.46 238.33 P
5 F
-0.58 (NaN) 384.18 238.33 P
1 F
-0.52 ( to be neither equal nor) 404.18 238.33 P
2.43 (unequal to anything else, including other NaNs.  Because Sather defines \324) 108 226.33 P
0 F
2.43 (x) 458.55 226.33 P
5 F
2.71 (/=) 468.49 226.33 P
0 F
2.43 (y) 482.05 226.33 P
1 F
2.43 (\325 as) 487.05 226.33 P
0.22 (\324) 108 214.33 P
0 F
0.22 (x) 110.78 214.33 P
5 F
0.24 (.is_eq\050) 115.78 214.33 P
0 F
0.22 (y) 145.79 214.33 P
5 F
0.24 (\051.not) 150.79 214.33 P
1 F
0.22 (\325 \050page 49\051, to get the IEEE notion of unequal is necessary to write \324) 170.8 214.33 P
0 F
0.22 (x) 468.46 214.33 P
5 F
0.24 (=) 473.46 214.33 P
0 F
0.22 (x) 479.3 214.33 P
5 F
0.24 ( and) 484.3 214.33 P
0 F
(y) 108 202.33 T
5 F
(=) 113 202.33 T
0 F
(y) 118.84 202.33 T
5 F
( and) 123.84 202.33 T
0 F
(x) 146.08 202.33 T
5 F
(/=) 151.08 202.33 T
0 F
(y) 159.7 202.33 T
1 F
(\325.  Other comparison operators present similar difficulties.) 164.7 202.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.29 (The \324) 108 619.33 P
5 F
0.33 (nil) 130.31 619.33 P
1 F
0.29 (\325 value is generally a rarely used  or) 140.31 619.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.52 (illegal value.  For) 108 607.33 P
5 F
-0.58 (INT) 184.75 607.33 P
1 F
-0.52 (, it is the most negative) 200.86 607.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.68 (representable integer.  For floating point) 108 595.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.41 (types, it is) 108 583.33 P
5 F
-0.46 (NaN) 153.93 583.33 P
1 F
-0.41 (.  \324) 173.93 583.33 P
5 F
-0.46 (is_nil) 183.38 583.33 P
1 F
-0.41 (\325 is necessary because) 206.16 583.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
-0.45 (NaN) 108 571.33 P
1 F
-0.4 ( is defined by) 128 571.33 P
5 F
-0.45 (IEEE) 188.49 571.33 P
1 F
-0.4 ( to not be equal to it-) 211.28 571.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(self.) 108 559.33 T
1 1 0 0 0 0 1 K
306 552 504 632 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(type $NIL is) 342 610 T
9 F
(-- In standard libr) 394.52 610 T
(ar) 462.46 610 T
(y) 470.73 610 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(nil: SAME;) 354.6 600 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is_nil: BOOL;) 354.6 590 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 580 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 67
%%Page: "68" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(68) 108 709.51 T
0 F
(Language Interface Extensions) 253.82 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 36 Q
0 X
-1.8 (Sather 1.1 Extensions) 108 642 S
1 10 Q
-0.13 (All Sather 1.1 implementations must support the language kernel defined in the last chap-) 108 517.33 P
-0.29 (ter.  This chapter defines language extensions which may not be meaningful on every plat-) 108 505.33 P
1.75 (form or which can be very difficult to implement.  For example, platforms without a) 108 493.33 P
(Fortran compiler need not implement the Fortran language interface.) 108 481.33 T
-0.18 (Although these extensions are optional, they should be considered part of the Sather spec-) 108 457.33 P
-0.62 (ification.  For example, Sather 1.1 implementations which interface to Fortran must provide) 108 445.33 P
1.55 (the language extension described here.  The ICSI compiler supports all extensions de-) 108 433.33 P
(scribed in this chapter on one or more platforms.) 108 421.33 T
0.39 (The thr) 108 403.33 P
0.39 (eaded and synchr) 140.48 403.33 P
0.39 (onization extensions enable parallel pr) 219.65 403.33 P
0.39 (ocessing.  The synchr) 391.45 403.33 P
0.39 (oni-) 486.48 403.33 P
0.02 (zation and distributed extensions ar) 108 391.33 P
0.02 (e only of use with the thr) 266.81 391.33 P
0.02 (eaded extension.  Collective-) 377.36 391.33 P
1.12 (ly) 108 379.33 P
1.12 (, these extensions ar) 115.36 379.33 P
1.12 (e known as) 206.86 379.33 P
293.85 378.33 262.74 378.33 2 L
V
0.5 H
0 Z
N
0 F
1.12 (pSather) 262.74 379.33 P
1 F
1.12 (, and the language without these extensions is) 293.11 379.33 P
158.28 366.33 108 366.33 2 L
V
N
0 F
(serial Sather) 108 367.33 T
1 F
(.) 157.54 367.33 T
119 304.2 108 304.2 2 L
V
0.9 H
N
4 18 Q
(L) 108 306 T
130.2 304.2 119 304.2 2 L
V
N
4 14.4 Q
(A) 119 306 T
197.39 304.2 130.2 304.2 2 L
V
N
(NGUAGE) 130.2 306 T
201.89 304.2 197.39 304.2 2 L
V
N
208.89 304.2 201.89 304.2 2 L
V
N
4 18 Q
(I) 201.89 306 T
292.59 304.2 208.89 304.2 2 L
V
N
4 14.4 Q
(NTERFACE) 208.89 306 T
303.59 304.2 292.59 304.2 2 L
V
N
4 18 Q
(E) 292.59 306 T
390.78 304.2 303.59 304.2 2 L
V
N
4 14.4 Q
(XTENSIONS) 303.59 306 T
1 10 Q
0.07 (External classes are used to interface with code from other languages.  Each external class) 108 278.33 P
-0.12 (is typically associated with an object file compiled from a language like C or Fortran. Each) 108 266.33 P
-0.33 (language identifier is associated with a Sather language extension.  The extensions defined) 108 254.33 P
(here are:) 108 242.33 T
(\245) 108 224.33 T
5 F
(C) 121.54 224.33 T
1 F
(: interface to ANSI C, X3.159-1989) 128.76 224.33 T
(\245) 108 209.33 T
(FOR) 121.54 209.33 T
(TRAN: interface to ANSI Fortran 90, X3.198-1992) 141.27 209.33 T
0.29 (Interfaces to other languages, or alternate interfaces to C and Fortran, may be designated) 108 185.33 P
(in the future using other identifiers.) 108 173.33 T
0.5 (Each external language extension may have its own restrictions on what may legally ap-) 108 149.33 P
-0.38 (pear in an external class of that language and what the semantic interpretation of the exter-) 108 137.33 P
1.71 (nal class contents is.  The legality and semantics of subtyping and code inclusion are) 108 125.33 P
0.49 (defined by the language extension.  For the C and Fortran extensions, routines that have) 108 113.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 68
%%Page: "69" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Language Interface Extensions) 270.96 709.51 T
4 F
(69) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
1.11 (no body \050abstract signatures\051 specify the interface for Sather code to call external code.) 108 659.33 P
1.24 (Routines with a body in an external class specify the interface for external code to call) 108 647.33 P
-0.58 (Sather code.  All routines and signatures in external classes must not conflict \050page 21\051 , and) 108 635.33 P
0.13 (the corresponding external object file must provide a function that conforms according to) 108 623.33 P
0.01 (the rules of the language interface. For C and Fortran, external code may refer to an exter-) 108 611.33 P
0.49 (nal routine with a body by concatenating the class name, an underscore, and the routine) 108 599.33 P
0.58 (name \050) 108 587.33 P
0 F
0.58 (e.g.) 138.85 587.33 P
1 F
0.58 ( \324) 152.74 587.33 P
5 F
0.64 (EXT_CLASS_sather_rout) 158.6 587.33 P
1 F
0.58 (\325\051.  It is an error if the external language namespace) 272.54 587.33 P
0.01 (implementation does not permit the resulting name \050) 108 575.33 P
0 F
0.01 (e.g.) 342.18 575.33 P
1 F
0.01 ( due to length\051.  The implementa-) 356.07 575.33 P
(tions or environments of other languages may impose other unavoidable constraints.) 108 563.33 T
0 0 0 1 0 0 0 K
108 514.98 504 518 C
0 0 0 1 0 0 0 K
72 516.49 540 516.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Interfacing with Fortran) 108 522 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
1.08 (An external class which interfaces to Fortran is designated with the language identifier) 108 494.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\324) 108 482.31 T
5 F
(FORTRAN) 110.78 482.31 T
1 F
(\325.  The following Fortran types are built into the extended library:) 159.11 482.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (These external types also define appropriate creation routines which may be used for con-) 108 287.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.59 (venient casting between Sather and Fortran types.  Only the types listed above may be used) 108 275.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.18 (in the signatures defined in a Fortran external class.  Routines defined in external Fortran) 108 263.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.46 (classes that have bodies \050are not abstract signatures\051 may use other types, but if they do,) 108 251.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (these routines are not visible to Fortran code. Fortran external classes may not contain any) 108 239.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (class elements other than routines and abstract signatures, and may not be parameterized.) 108 227.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Routines without bodies in Fortran external classes may not be overloaded.) 108 215.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (Fortran implementations pass arguments by reference.  The scalar types in the first column) 108 191.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.07 (may only be passed to external routines as \324) 108 179.31 P
5 F
0.08 (inout) 301.3 179.31 P
1 F
0.07 (\325 arguments.  The Sather implementation) 322.98 179.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.45 (must assure that changes to  \324) 108 167.31 P
5 F
-0.5 (inout) 235.44 167.31 P
1 F
-0.45 (\325 arguments passed to a Fortran routine are not observed) 257.12 167.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(until the Fortran routine returns.) 108 155.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
10 12 Q
(Sather type) 127.34 450.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 215.72 450.98 T
(ortr) 221.79 450.98 T
(an type) 240.29 450.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sather arr) 305.1 450.98 T
(ay type) 354.58 450.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 408.98 450.98 T
(ortr) 415.05 450.98 T
(an arr) 433.54 450.98 T
(ay type) 463.7 450.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
11 9 Q
(F_REAL) 114.5 428.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(real) 203.5 428.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_REAL_ARR) 296.5 428.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(real x\050\051) 406.5 428.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_DOUBLE) 114.5 409.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(double precision) 203.5 409.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_DOUBLE_ARR) 296.5 409.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(double precision x\050\051) 406.5 409.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_INTEGER) 114.5 390.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(integer) 203.5 390.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_INTEGER_ARR) 296.5 390.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(integer j\050\051) 406.5 390.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_COMPLEX) 114.5 371.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(complex) 203.5 371.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_COMPLEX_ARR) 296.5 371.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(complex z\050\051) 406.5 371.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_DOUBLE_COMPLEX) 114.5 352.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(double precision complex) 203.5 352.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_DOUBLE_COMPLEX_ARR) 296.5 352.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(double precision complex z\050\051) 406.5 352.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_LOGICAL) 114.5 333.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(logical) 203.5 333.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_LOGICAL_ARR) 296.5 333.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(logical b\050\051) 406.5 333.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F_CHARACTER) 114.5 314.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(character) 203.5 314.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.5 465.98 108.5 308.98 2 L
V
2 H
0 Z
N
197.5 467.98 197.5 306.98 2 L
V
0.5 H
N
290.5 467.98 290.5 306.98 2 L
V
2 H
N
400.5 467.98 400.5 306.98 2 L
V
0.5 H
N
503.5 465.98 503.5 308.98 2 L
V
2 H
N
107.5 466.98 504.5 466.98 2 L
V
N
107.5 440.98 504.5 440.98 2 L
V
N
107.5 421.98 504.5 421.98 2 L
V
0.5 H
N
107.5 402.98 504.5 402.98 2 L
V
N
107.5 383.98 504.5 383.98 2 L
V
N
107.5 364.98 504.5 364.98 2 L
V
N
107.5 345.98 504.5 345.98 2 L
V
N
107.5 326.98 504.5 326.98 2 L
V
N
107.5 307.98 504.5 307.98 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 69
%%Page: "70" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(70) 108 709.51 T
0 F
(Language Interface Extensions) 253.82 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Interfacing with ANSI C) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.44 (An external class which interfaces to ANSI C is designated with the language identifier \324) 108 630.31 P
5 F
-0.49 (C) 491.5 630.31 P
1 F
-0.44 (\325.) 498.72 630.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.1 (External C classes may not be parameterized.  The following C types are built into the ex-) 108 618.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tended library:) 108 606.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (These external types also define appropriate creation routines which may be used for con-) 108 280.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.92 (venient casting between Sather and C types. In addition, \324) 108 268.31 P
5 F
2.13 (AREF{T}\325) 379.86 268.31 P
1 F
1.92 ( defines a routine) 421.54 268.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (\324) 108 256.31 P
5 F
-0.15 (array_ptr:C_PTR) 110.78 256.31 P
1 F
-0.13 (\325 which may be used to obtain a pointer to the first item in the array por-) 186.35 256.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.22 (tion of Sather objects. The external routine may modify the contents of this array portion,) 108 244.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.37 (but must not store the pointer; there is no guarantee that the pointer will remain valid after) 108 232.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.15 (the external routine returns. This restriction  ensures that the Sather type system and gar-) 108 220.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (bage collector will not be corrupted by external code while not sacrificing efficiency for the) 108 208.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(most important cases.) 108 196.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (\324) 108 172.31 P
5 F
-0.02 (out) 110.78 172.31 P
1 F
-0.02 (\325 and \324) 124.68 172.31 P
5 F
-0.02 (inout) 152.14 172.31 P
1 F
-0.02 (\325  arguments are passed by a pointer to a local, which may be legally modi-) 173.82 172.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.01 (fied by the routine. The Sather implementation must guarantee that such modifications) 108 160.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cannot be observed until the routine returns.) 108 148.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (Types defined by external C classes are called) 108 124.31 P
0 0 0 1 0 0 0 K
376.24 123.31 310.98 123.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.15 (external C types) 310.98 124.31 P
1 F
-0.15 (.  In external C classes, signa-) 376.24 124.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.6 (tures without bodies must only use external C types.  Routines with bodies \050are not abstract) 108 112.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9 F
(Sather type) 134.43 576.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ANSI C type) 225.99 576.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sather type) 334.43 576.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ANSI C type) 438.99 576.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(C_CHAR) 112 554.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char) 220 554.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_CHAR_PTR) 299 554.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned char *) 433 554.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_CHAR) 112 535.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned char) 220 535.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_SIGNED_CHAR_PTR) 299 535.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(signed char *) 433 535.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_SIGNED_CHAR) 112 516.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(signed char) 220 516.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_SHORT_PTR) 299 516.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(short *) 433 516.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_SHORT) 112 497.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(short) 220 497.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_INT_PTR) 299 497.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int *) 433 497.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_INT) 112 478.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(int) 220 478.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_LONG_PTR) 299 478.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(long *) 433 478.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_LONG) 112 459.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(long) 220 459.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_SHORT_PTR) 299 459.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned short *) 433 459.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_SHORT) 112 440.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned short) 220 440.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_INT_PTR) 299 440.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned int *) 433 440.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_INT) 112 421.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned int) 220 421.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_LONG_PTR) 299 421.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unsigned long *) 433 421.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_UNSIGNED_LONG) 112 402.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(signed long) 220 402.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_FLOAT_PTR) 299 402.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(float *) 433 402.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_FLOAT) 112 383.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(float) 220 383.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_DOUBLE_PTR) 299 383.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(double *) 433 383.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_DOUBLE) 112 364.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(double) 220 364.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_LONG_DOUBLE_PTR) 299 364.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(long double *) 433 364.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_LONG_DOUBLE) 112 345.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(long double) 220 345.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_SIZE_T) 299 345.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(size_t) 433 345.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_PTR) 112 326.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(void *) 220 326.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_PTRDIFF_T) 299 326.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ptrdiff_t) 433 326.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C_CHAR_PTR) 112 307.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(char *) 220 307.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106 589.98 106 301.98 2 L
V
2 H
N
214 591.98 214 299.98 2 L
V
0.5 H
N
293 591.98 293 299.98 2 L
V
2 H
N
427 591.98 427 299.98 2 L
V
0.5 H
N
506 589.98 506 301.98 2 L
V
2 H
N
105 590.98 507 590.98 2 L
V
N
105 566.98 507 566.98 2 L
V
N
105 547.98 507 547.98 2 L
V
0.5 H
N
105 528.98 507 528.98 2 L
V
N
105 509.98 507 509.98 2 L
V
N
105 490.98 507 490.98 2 L
V
N
105 471.98 507 471.98 2 L
V
N
105 452.98 507 452.98 2 L
V
N
105 433.98 507 433.98 2 L
V
N
105 414.98 507 414.98 2 L
V
N
105 395.98 507 395.98 2 L
V
N
105 376.98 507 376.98 2 L
V
N
105 357.98 507 357.98 2 L
V
N
105 338.98 507 338.98 2 L
V
N
105 319.98 507 319.98 2 L
V
N
105 300.98 507 300.98 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 70
%%Page: "71" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Language Interface Extensions) 270.96 709.51 T
4 F
(71) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
-0.26 (signatures\051 defined in external C classes may use other types, but if they do, these routines) 108 659.33 P
(are not visible to C code.) 108 647.33 T
0.45 (There are two features of external C classes that have a special semantics.  The) 108 623.33 P
5 F
0.5 (STR) 462 623.33 P
1 F
0.45 ( con-) 482 623.33 P
-0.28 (stant \324) 108 611.33 P
5 F
-0.31 (C_name) 134.58 611.33 P
1 F
-0.28 (\325 may be used to force a particular C declaration to be used for an external C) 172.37 611.33 P
-0.56 (type.  Similarly the) 108 599.33 P
5 F
-0.62 (STR) 191.97 599.33 P
1 F
-0.56 ( constant \324) 211.97 599.33 P
5 F
-0.62 (C_header) 255.93 599.33 P
1 F
-0.56 (\325 may be used to specify a C header file or other) 299.84 599.33 P
0.16 (preprocessing directive that should be emitted at the beginning of any file in which the C) 108 587.33 P
(declaration appears.) 108 575.33 T
0.2 (Attributes may be placed in external C classes; they are interpreted as fields of a C struct.) 108 435.33 P
-0.42 (Similarly shareds are interpreted as C global variables.  Constants are interpreted as C con-) 108 423.33 P
(stants or macros.) 108 411.33 T
0.71 (External C class attributes, shareds, and constants may only have external C types.  The) 108 275.33 P
0.54 (only exception is \324) 108 263.33 P
5 F
0.6 (C_name) 189.43 263.33 P
1 F
0.54 (\325 and \324) 227.21 263.33 P
5 F
0.6 (C_header) 255.77 263.33 P
1 F
0.54 (\325, which must be constant string literals when) 299.68 263.33 P
(present.) 108 251.33 T
(Routines without bodies in external C classes may not be overloaded.) 108 227.33 T
0.54 (Sometimes it isn't possible to decide at the time the external C class is written whether a) 108 203.33 P
-0.06 (routine will be implemented in the C code with a macro.  This presents a portability prob-) 108 191.33 P
-0.01 (lem, because the writer of the external class can\325t know ahead of time whether the routine) 108 179.33 P
-0.37 (will be obtained by linking or by a header file.  Such petulant cases can be dealt with by the) 108 167.33 P
-0.15 (call \324) 108 155.33 P
5 F
-0.17 (SYS::inlined_C) 128.39 155.33 P
1 F
-0.15 (\325.  The argument must be a string literal, and is placed directly into the) 195.64 155.33 P
1 (generated code, except that identifiers following \324) 108 143.33 P
5 F
1.11 (#) 332.64 143.33 P
1 F
1 (\325 that correspond to locals and argu-) 338.2 143.33 P
0.86 (ments are) 108 131.33 P
0.86 (translated into the appropriate C name.  An alternate form accepts two argu-) 154.54 131.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.78 (For example, this creates a Sather type) 108 547.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.05 (\324) 108 535.33 P
5 F
0.05 (X_WIDGET) 110.78 535.33 P
1 F
0.05 (\325 which may be used to declare) 163.01 535.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5.56 (variables, parameterize classes, and so) 108 523.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.34 (forth.  Furthermore, the C declaration used) 108 511.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.78 (for variables of type \324) 108 499.33 P
5 F
1.98 (X_WIDGET) 209.04 499.33 P
1 F
1.78 (\325 will be) 261.27 499.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.93 (\324) 108 487.33 P
5 F
1.04 (struct XSomeWidget *) 110.78 487.33 P
1 F
0.93 (\325.  Any generated C) 210.67 487.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.35 (file containing any variable of  this type will) 108 475.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(also include \324) 108 463.33 T
5 F
(<widgets.h>) 166.4 463.33 T
1 F
(\325.) 220.32 463.33 T
1 1 0 0 0 0 1 K
306 456 504 560 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(external C class X_WIDGET is) 342 538 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(const C_name:STR:=) 354.6 528 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
("struct XSomeWidget *";) 367.2 518 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(const C_header:STR:=) 354.6 508 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
("#include <widgets.h>\134n";) 367.2 498 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 488 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(For example, this C code:) 108 383.33 T
1 1 0 0 0 0 1 K
306 367 504 396 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(typedef struct { int a,b; } FOO;) 342 384 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(FOO xxyyz;) 342 374 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
-0.3 (can be accessed by users of this Sather class:) 108 342.33 P
1 1 0 0 0 0 1 K
306 296 504 355 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(external C class FOO is) 342 343 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(const C_name:STR:="FOO";) 354.6 333 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(attr a, b:C_INT;) 354.6 323 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(shared xxyyz:FOO;) 354.6 313 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 303 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 71
%%Page: "72" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(72) 108 709.51 T
0 F
(Thr) 275.81 709.51 T
(eaded Extension) 290.63 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.04 (ments, making it possible to specify an include file or macro required by the inlined code,) 108 659.33 P
(which will be placed at the top of the generated file.) 108 647.33 T
120.01 543.2 108 543.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(T) 108 545 T
174.39 543.2 120.01 543.2 2 L
V
N
4 14.4 Q
(HREAD) 120.01 545 T
199.69 543.2 174.39 543.2 2 L
V
N
(ED) 174.39 545 T
210.68 543.2 199.69 543.2 2 L
V
N
4 18 Q
(E) 199.69 545 T
289.08 543.2 210.68 543.2 2 L
V
N
4 14.4 Q
(XTENSION) 210.68 545 T
1 10 Q
0.12 (In serial Sather there is only one thread of execution; in pSather there may be many. Mul-) 108 517.33 P
1.2 (tiple threads are similar to multiple serial Sather programs executing concurrently, but) 108 505.33 P
-0.13 (threads share variables of a single namespace. A new thread is created by executing a) 108 493.33 P
501.5 492.33 485.95 492.33 2 L
V
0.5 H
N
0 F
-0.13 (fork) 485.95 493.33 P
1 F
-0.13 (,) 501.5 493.33 P
0.35 (which may be a) 108 481.33 P
5 F
0.38 (par) 181.42 481.33 P
1 F
0.35 ( or) 195.87 481.33 P
5 F
0.38 (fork) 210.97 481.33 P
1 F
0.35 ( statement \050page 73\051,) 227.64 481.33 P
5 F
0.38 (parloop) 322.8 481.33 P
1 F
0.35 ( statement \050page 74\051, or an attach) 356.15 481.33 P
-0.61 (\050page 78\051. The new thread is a) 108 469.33 P
258.16 468.33 238.53 468.33 2 L
V
N
0 F
-0.61 (child) 238.53 469.33 P
1 F
-0.61 ( of the forking thread, which is the child\325s) 258.16 469.33 P
465.53 468.33 439.42 468.33 2 L
V
N
0 F
-0.61 (parent) 439.42 469.33 P
1 F
-0.61 (. pSather) 465.53 469.33 P
0.6 (provides operations that can) 108 457.33 P
259.37 456.33 239.01 456.33 2 L
V
N
0 F
0.6 (block) 239.01 457.33 P
1 F
0.6 ( a thread, making it unable to execute statements until) 259.37 457.33 P
-0.02 (some condition occurs. pSather threads that are not blocked will eventually run, but there) 108 445.33 P
-0.04 (is no other constraint on the order of execution of statements between threads that are not) 108 433.33 P
0.18 (blocked. Threads no longer exist once they) 108 421.33 P
339.04 420.33 300.15 420.33 2 L
V
N
0 F
0.18 (terminate) 300.15 421.33 P
1 F
0.18 (. When a pSather program begins ex-) 339.04 421.33 P
(ecution it has a single thread corresponding to the) 108 409.33 T
5 F
(main) 331.71 409.33 T
1 F
( routine \050page 61\051.) 353.38 409.33 T
1 (Serial Sather defines a total order of execution of the program\325s statements; in contrast,) 108 385.33 P
0.2 (pSather defines only a partial order. This partial order is defined by the union of the con-) 108 373.33 P
-0.54 (straints implied by the consecutive execution order of statements within single threads and) 108 361.33 P
1 (pSather synchronization operations between statements in different threads. As long as) 108 349.33 P
-0.62 (this partial order appears to be observed it is possible for a pSather implementation to over-) 108 337.33 P
-0.33 (lap multiple operations in time, so a child thread may run concurrently with its parent and) 108 325.33 P
-0.47 (with other children.  Using threads may render programs nondeterministic. Preconditions,) 108 313.33 P
0.33 (postconditions, and class invariants \050page 59\051 may not work as intended when originally) 108 301.33 P
(serial code is used with multiple threads.) 108 289.33 T
-0.31 (The threaded extension may be implemented without the synchronization extension.  This) 108 265.33 P
0.23 (is only useful with data parallel code, in which it is not possible for threads to affect each) 108 253.33 P
-0.58 (other through side effects.  Platforms may interpret such data parallelism in different ways,) 108 241.33 P
(such as an opportunity for vectorization, or by executing only one \324thread\325 at a time.) 108 229.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Here\325s an example from the UNIX headers:) 108 619.33 T
1 1 0 0 0 0 1 K
306 603 504 632 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(SYS::inlined_C\050"#res = EPERM",) 342 620 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
("#include <errno.h>\134n"\051;) 379.8 610 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 72
%%Page: "73" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Thr) 292.95 709.51 T
(eaded Extension) 307.77 709.51 T
4 F
(73) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(par) 108 658 T
6 F
( and) 125.34 658 T
5 F
(fork) 151.36 658 T
6 F
( statements) 171.36 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 579.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(fork_statement) 129.6 561.31 T
5 F
( fork) 200.95 561.31 T
0 F
(statement_list) 223.18 561.31 T
5 F
(end) 282.9 561.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(par_statement) 129.6 543.31 T
5 F
( par) 198.73 543.31 T
0 F
(statement_list) 218.74 543.31 T
5 F
(end) 278.46 543.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.07 (Threads  may be created with the) 108 519.31 P
0 0 0 1 0 0 0 K
315.87 518.31 258.31 518.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.07 (fork statement) 258.31 519.31 P
1 F
0.07 (, which must be syntactically enclosed in a) 315.87 519.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
163.42 506.31 108 506.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.15 (par statement) 108 507.31 P
1 F
0.15 (, which also implicitly creates a thread.  When a) 163.42 507.31 P
5 F
0.16 (fork) 378.3 507.31 P
1 F
0.15 ( statement is executed, it) 394.97 507.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (forks a) 108 495.31 P
0 0 0 1 0 0 0 K
188.78 494.31 141.29 494.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.38 (body thread) 141.29 495.31 P
1 F
0.38 ( to execute the statements in its body. Local variables that are declared) 188.78 495.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (outside the body of the innermost enclosing) 108 483.31 P
5 F
-0.22 (par) 303.14 483.31 P
1 F
-0.2 ( statement are shared among all threads in) 317.59 483.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.07 (the) 108 471.31 P
5 F
0.08 (par) 124.44 471.31 P
1 F
0.07 ( body. All threads created by a) 138.89 471.31 P
5 F
0.08 (fork) 277.26 471.31 P
1 F
0.07 ( must complete before execution continues past) 293.93 471.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.62 (the) 108 459.31 P
5 F
-0.69 (par) 123.75 459.31 P
1 F
-0.62 (. The rules for memory consistency apply to body threads, so they may not see a con-) 138.2 459.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.59 (sistent picture of the shared variables unless they employ explicit synchronization \050page) 108 447.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82\051.) 108 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.51 (Each body thread receives a unique copy of every local declared in the innermost enclosing) 108 411.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
0.23 (par) 108 399.31 P
1 F
0.21 ( body. When body threads begin, these copies have the value that the locals did at the) 122.45 399.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.6 (time the) 108 387.31 P
5 F
-0.67 (fork) 145.46 387.31 P
1 F
-0.6 ( statement was executed. Changes to a thread\325s copy of these variables are nev-) 162.13 387.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (er observed by other threads. Iterators may not occur in a) 108 375.31 P
5 F
-0.26 (fork) 361.45 375.31 P
1 F
-0.24 ( or) 378.12 375.31 P
5 F
-0.26 (par) 392.05 375.31 P
1 F
-0.24 ( statement unless they) 406.5 375.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.65 (are within an enclosed loop.  \324) 108 363.31 P
5 F
0.73 (quit) 244.23 363.31 P
1 F
0.65 (\325, \324) 260.35 363.31 P
5 F
0.73 (yield) 271.56 363.31 P
1 F
0.65 (\325, and \324) 292.12 363.31 P
5 F
0.73 (return) 323.42 363.31 P
1 F
0.65 (\325 are not permitted in a) 349.54 363.31 P
5 F
0.73 (par) 457.16 363.31 P
1 F
0.65 ( or) 471.61 363.31 P
5 F
0.73 (fork) 487.33 363.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(body.) 108 351.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.58 (As a generalization of serial Sather, it is a fatal error if an exception occurs in a thread which) 108 327.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (is not handled within that thread by some) 108 315.31 P
5 F
-0.03 (protect) 295.76 315.31 P
1 F
-0.03 ( statement.  Because par and fork bodies) 326.33 315.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(are executed as separate threads, an unhandled exception in their bodies is a fatal error.) 108 303.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 626.31 T
1 1 0 0 0 0 1 K
306 599.98 504 638.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(par) 342 626.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fork ... end) 354.6 616.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 606.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
192.09 558.08 200.95 569.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 190.06 561.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
189.87 540.08 198.73 551.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 187.84 543.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 73
%%Page: "74" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(74) 108 709.51 T
0 F
(Thr) 275.81 709.51 T
(eaded Extension) 290.63 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Par and Fork Examples) 108 658.67 T
0 0 0 1 0 0 0 K
108 406.98 504 410 C
0 0 0 1 0 0 0 K
72 408.49 540 408.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(parloop) 108 414 T
6 F
( statement) 148.02 414 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 354.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(parloop_statement) 129.6 336.31 T
5 F
(parloop) 216.84 336.31 T
0 F
(statement_list) 252.96 336.31 T
5 F
( do) 310.18 336.31 T
0 F
(statement_list) 326.86 336.31 T
5 F
( end) 384.08 336.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.66 (The) 108 312.31 P
0 0 0 1 0 0 0 K
200.49 311.31 127.9 311.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.66 (parloop statement) 127.9 312.31 P
1 F
0.66 ( is syntactic sugar to make convenient a common parallel program-) 200.49 312.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ming idiom.) 108 300.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(parloop) 144 282.98 T
9 F
( S1) 176.52 282.98 T
5 F
(  do) 190.03 282.98 T
9 F
(S2) 210.04 282.98 T
5 F
(  end) 221.05 282.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(is syntactic sugar for:) 108 260.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(par  loop) 144 242.98 T
9 F
(S1) 184.02 242.98 T
5 F
(  fork) 195.03 242.98 T
9 F
(S2) 220.04 242.98 T
5 F
(  end  end  end) 231.05 242.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
-0.54 (In this code) 108 630.33 P
5 F
-0.6 (A) 160.11 630.33 P
1 F
-0.54 ( and) 166.78 630.33 P
5 F
-0.6 (B) 187.63 630.33 P
1 F
-0.54 ( can execute concurrent-) 194.3 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.19 (ly. After both) 108 618.33 P
5 F
1.32 (A) 173.22 618.33 P
1 F
1.19 ( and) 179.89 618.33 P
5 F
1.32 (B) 204.21 618.33 P
1 F
1.19 ( complete,) 210.88 618.33 P
5 F
1.32 (C) 261.25 618.33 P
1 F
1.19 ( and) 268.47 618.33 P
5 F
1.32 (D) 292.78 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 F
-0.49 (can execute concurrently.) 108 606.33 P
5 F
-0.54 (E) 221.49 606.33 P
1 F
-0.49 ( must wait for) 228.16 606.33 P
5 F
-0.54 (A) 290.83 606.33 P
1 F
-0.49 (,) 297.5 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(B) 108 594.33 T
1 F
(,) 114.67 594.33 T
5 F
(C,) 119.67 594.33 T
1 F
( and) 129.67 594.33 T
5 F
(D) 151.6 594.33 T
1 F
( to terminate before executing.) 158.82 594.33 T
1 1 0 0 0 0 1 K
306 544 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(par) 342 631 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(par) 354.6 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fork A end;) 367.2 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(B) 367.2 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 354.6 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fork C end;) 354.6 581 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(D) 354.6 571 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(E) 342 551 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.79 (In this code, \324) 108 519.33 P
5 F
0.88 (outer) 169.36 519.33 P
1 F
0.79 (\325 is declared outside the) 192.15 519.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
0.3 (par) 108 507.33 P
1 F
0.27 (, so this variable is shared by the forked) 122.45 507.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.87 (thread.  However, because \324) 108 495.33 P
5 F
0.97 (inner) 234.32 495.33 P
1 F
0.87 (\325 is inside) 256.55 495.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.06 (the par, the fork body receives its own local) 108 483.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(copy at the time of the fork.) 108 471.33 T
1 1 0 0 0 0 1 K
306 453 504 532 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(outer:INT;) 342 520 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(par) 342 510 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(inner:INT;) 354.6 500 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fork) 354.6 490 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- f) 367.2 480 T
(or) 377.93 480 T
(k body) 386.06 480 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(end) 354.6 470 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 460 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 382.31 T
1 1 0 0 0 0 1 K
306 374.98 504 394.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(parloop c::=clusters! do ... end) 342 382.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
206.53 333.08 216.83 344.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 205.94 336.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 74
%%Page: "75" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Synchr) 278.14 709.51 T
(onization Extension) 307.04 709.51 T
4 F
(75) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Parloop example) 108 658.67 T
119 472.2 108 472.2 2 L
V
0.9 H
0 Z
N
4 18 Q
(S) 108 474 T
262.98 472.2 119 472.2 2 L
V
N
4 14.4 Q
(YNCHRONIZATION) 119 474 T
267.48 472.2 262.98 472.2 2 L
V
N
278.48 472.2 267.48 472.2 2 L
V
N
4 18 Q
(E) 267.48 474 T
356.87 472.2 278.48 472.2 2 L
V
N
4 14.4 Q
(XTENSION) 278.48 474 T
1 10 Q
1.19 (The synchr) 108 448.33 P
1.19 (onization extension allows thr) 158.08 448.33 P
1.19 (eads to block; this r) 294.74 448.33 P
1.19 (equir) 384.75 448.33 P
1.19 (es thr) 407.85 448.33 P
1.19 (eading facilities) 433.42 448.33 P
0.88 (not available on every platform.  Pr) 108 436.33 P
0.88 (ogrammers should not assume that synchr) 269.61 436.33 P
0.88 (onization) 462.36 436.33 P
0.47 (is less expensive than thr) 108 424.33 P
0.47 (ead cr) 220.11 424.33 P
0.47 (eation; cr) 247.19 424.33 P
0.47 (eating thr) 288.11 424.33 P
0.47 (eads as r) 331.27 424.33 P
0.47 (equir) 370.36 424.33 P
0.47 (ed may be mor) 393.46 424.33 P
0.47 (e ef) 461.03 424.33 P
0.47 (\336cient) 476.73 424.33 P
0.53 (than attempting to manage a pool of thr) 108 412.33 P
0.53 (eads that wait for things to do.  Generally) 288.03 412.33 P
0.53 (, mini-) 474.67 412.33 P
(mizing synchr) 108 400.33 T
(onization pr) 171.18 400.33 T
(ovides the gr) 225.1 400.33 T
(eatest thr) 282.46 400.33 T
(oughput.) 323.15 400.33 T
0 0 0 1 0 0 0 K
108 351.98 504 355 C
0 0 0 1 0 0 0 K
72 353.49 540 353.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(lock) 108 359 T
6 F
( statement) 129.34 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 230.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(lock_statement) 129.6 212.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(lock) 151.2 200.31 T
0 F
(  expression) 168.98 200.31 T
5 F
(then) 221.21 200.31 T
0 F
(  statement_list) 240.67 200.31 T
([) 307.89 200.31 T
5 F
(else) 313.72 200.31 T
0 F
( statement_list) 332.06 200.31 T
(  ]) 391.78 200.31 T
5 F
(end) 405.11 200.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lock) 151.2 188.31 T
0 F
(  lock_when  {  lock_when }) 168.98 188.31 T
([) 282.94 188.31 T
5 F
(else) 288.77 188.31 T
0 F
( statement_list) 307.11 188.31 T
(  ]) 366.83 188.31 T
5 F
(end) 380.16 188.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(lock_when) 129.6 170.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
([  guard) 151.2 158.31 T
0 F
(expr) 190.67 158.31 T
(ession) 208.27 158.31 T
5 F
( ] when) 232.72 158.31 T
0 F
(  expression {) 264.96 158.31 T
5 F
(,) 320.52 158.31 T
0 F
(expression }) 326.08 158.31 T
5 F
(then) 376.64 158.31 T
0 F
( statement_list) 398.6 158.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.48 (Locks  are special built-in synchronization objects that control the blocking and unblocking) 108 134.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.61 (of threads. A thread) 108 122.31 P
0 0 0 1 0 0 0 K
229.9 121.31 196.75 121.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.61 (acquires) 196.75 122.31 P
1 F
-0.61 ( a lock, then) 229.9 122.31 P
0 0 0 1 0 0 0 K
304.15 121.31 283.04 121.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.61 (holds) 283.04 122.31 P
1 F
-0.61 ( the lock until it) 304.15 122.31 P
0 0 0 1 0 0 0 K
403.52 121.31 372.96 121.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.61 (releases) 372.96 122.31 P
1 F
-0.61 ( it. A single thread may) 403.52 122.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.05 (This code applies \324) 108 630.33 P
5 F
0.05 (frobnify) 190.19 630.33 P
1 F
0.05 (\325 using a separate) 222.98 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(thread for each element of an array.) 108 618.33 T
1 1 0 0 0 0 1 K
306 584 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(par) 342 631 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop) 354.6 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e::= a.elt!;) 374.11 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fork) 367.2 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e.frobnify) 384.7 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 424.22 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 354.6 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
-0.34 (Using the) 108 559.33 P
5 F
-0.38 (parloop) 152.5 559.33 P
1 F
-0.34 ( shorthand, the same code) 185.85 559.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(could also be written:) 108 547.33 T
1 1 0 0 0 0 1 K
306 533 504 572 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(parloop) 342 560 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e: := a.elt! do) 374.52 560 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e.frobnify) 354.6 550 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 540 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Examples:) 108 327.31 T
1 1 0 0 0 0 1 K
306 250.98 504 339.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(lock) 342 327.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when m then ...) 354.6 317.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(else ...) 354.6 307.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 342 297.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(lock) 342 287.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(guard d.size > 0 when m then ...) 354.6 277.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when rw.writer then ...) 354.6 267.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 257.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
192.27 209.08 202.58 220.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 191.68 212.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
174.5 167.08 184.8 178.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 173.91 170.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 75
%%Page: "76" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(76) 108 709.51 T
0 F
(Synchr) 261 709.51 T
(onization Extension) 289.9 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.29 (acquire a lock multiple times recursively; it will be held until a corresponding number of) 108 659.33 P
-0.4 (releases occur. Exclusive locks, such as \324) 108 647.33 P
5 F
-0.45 (MUTEX) 282.02 647.33 P
1 F
-0.4 (\325, may only be held by one thread at a time.) 317.02 647.33 P
-0.55 (In addition to these simple exclusive locks, it is possible to lock on other more complex syn-) 108 635.33 P
(chronization types \050on page 77\051.) 108 623.33 T
0.68 (Locks may be safely acquired with the) 108 599.33 P
342.95 598.33 284.61 598.33 2 L
V
0.5 H
0 Z
N
0 F
0.68 (lock statement) 284.61 599.33 P
1 F
0.68 (.  Expressions following a \324) 342.95 599.33 P
5 F
0.75 (when) 464.73 599.33 P
1 F
0.68 (\325 or) 488.64 599.33 P
0.66 (\324) 108 587.33 P
5 F
0.73 (lock) 110.78 587.33 P
1 F
0.66 (\325 are called) 128.56 587.33 P
254.79 586.33 180.71 586.33 2 L
V
N
0 F
0.66 (locking conditions) 180.71 587.33 P
1 F
0.66 (, and must be subtypes of) 254.79 587.33 P
5 F
0.73 ($LOCK) 374.29 587.33 P
1 F
0.66 ( \050page 77\051.  The state-) 407.08 587.33 P
0.13 (ment list following the \324) 108 575.33 P
5 F
0.14 (then) 213.87 575.33 P
1 F
0.13 (\325 is called the) 233.33 575.33 P
339.74 574.33 293.8 574.33 2 L
V
N
0 F
0.13 (lock branch) 293.8 575.33 P
1 F
0.13 (. A lock statement guarantees that all) 339.74 575.33 P
-0.17 (listed locks are atomically acquired before a lock branch executes. Expressions following a) 108 563.33 P
-0.47 (\324) 108 551.33 P
5 F
-0.52 (guard) 110.78 551.33 P
1 F
-0.47 (\325 are called) 136.35 551.33 P
266.23 550.33 185.12 550.33 2 L
V
N
0 F
-0.47 (guarding conditions) 185.12 551.33 P
1 F
-0.47 (.   The statements following the \324) 266.23 551.33 P
5 F
-0.52 (else) 406.54 551.33 P
1 F
-0.47 (\325 are called the) 424.88 551.33 P
504 550.33 489.55 550.33 2 L
V
N
0 F
-0.47 (else) 489.55 551.33 P
135.59 538.33 108 538.33 2 L
V
N
-0.39 (branch) 108 539.33 P
1 F
-0.39 (. The \324) 135.59 539.33 P
5 F
-0.43 (when) 161.83 539.33 P
1 F
-0.39 (\325 is dropped in the first form, convenient when there is only a single lock-) 185.73 539.33 P
(ing condition and no guard.) 108 527.33 T
(When a lock statement is entered the following occur in strict order:) 108 503.33 T
8 9 Q
(1.) 108 485.33 T
1 10 Q
(Any guar) 121.54 485.33 T
(ding conditions ar) 163.56 485.33 T
(e evaluated in textual or) 244.16 485.33 T
(der) 350.86 485.33 T
(.  If any evaluate to \324) 364.97 485.33 T
5 F
(false) 454.48 485.33 T
1 F
(\325, the) 475.6 485.33 T
(corr) 121.54 473.33 T
(esponding when clause will not be consider) 139.16 473.33 T
(ed further) 332.53 473.33 T
(.) 376.32 473.33 T
5 F
(when) 383.82 473.33 T
1 F
( clauses without a) 407.72 473.33 T
(guar) 121.54 461.33 T
(ding condition or for which the condition evaluates to \324) 141.9 461.33 T
5 F
(true) 385.7 461.33 T
1 F
(\325 ar) 402.93 461.33 T
(e) 416.98 461.33 T
457.96 460.33 424.27 460.33 2 L
V
N
0 F
(accepted) 424.27 461.33 T
1 F
(.) 457.96 461.33 T
8 9 Q
(2.) 108 446.33 T
1 10 Q
(If no) 121.54 446.33 T
5 F
(when) 144.52 446.33 T
1 F
( clauses ar) 168.42 446.33 T
(e accepted, the) 213.84 446.33 T
5 F
(else) 281.34 446.33 T
1 F
( branch executes; it is a fatal err) 299.68 446.33 T
(or if ther) 438.07 446.33 T
(e is) 476.36 446.33 T
(no) 121.54 434.33 T
5 F
(else) 135.32 434.33 T
1 F
( clause in such a case.) 153.66 434.33 T
8 9 Q
(3.) 108 419.33 T
1 10 Q
(For all accepted clauses, all locking conditions ar) 121.54 419.33 T
(e evaluated, in textual or) 336.5 419.33 T
(der) 445.7 419.33 T
(, left to) 459.81 419.33 T
(right.) 121.54 407.33 T
8 9 Q
(4.) 108 392.33 T
1 10 Q
(If the locking conditions of some) 121.54 392.33 T
5 F
(when) 268.31 392.33 T
1 F
( clause can be immediately satis\336ed, those) 292.21 392.33 T
(locks ar) 121.54 380.33 T
(e obtained, the corr) 155.42 380.33 T
(esponding lock branch executes, and execution concludes) 240.58 380.33 T
(without considering other accepted) 121.54 368.33 T
5 F
(when) 280.75 368.33 T
1 F
( clauses.) 304.65 368.33 T
8 9 Q
(5.) 108 353.33 T
1 10 Q
(If ther) 121.54 353.33 T
(e is an \324) 148.38 353.33 T
5 F
(else) 181.42 353.33 T
1 F
(\325 clause and no) 199.76 353.33 T
5 F
(when) 268.16 353.33 T
1 F
( clauses have lock conditions that can immedi-) 292.06 353.33 T
(ately be satis\336ed, then the) 121.54 341.33 T
5 F
(else) 238.54 341.33 T
1 F
( branch executes.  If ther) 256.88 341.33 T
(e is no \324) 364.28 341.33 T
5 F
(else) 397.78 341.33 T
1 F
(\325 clause, the execut-) 416.12 341.33 T
(ing thr) 121.54 329.33 T
(ead blocks until the locking conditions of some) 151.18 329.33 T
5 F
(when) 361.22 329.33 T
1 F
( clause can be satis\336ed.) 385.12 329.33 T
(After the locking conditions ar) 121.54 317.33 T
(e locked atomically) 256.38 317.33 T
(, the corr) 340.61 317.33 T
(esponding lock branch exe-) 379.6 317.33 T
(cutes.) 121.54 305.33 T
0.39 (Because all listed locks are acquired atomically, deadlock can never occur due to concur-) 108 281.33 P
0.33 (rent execution of two or more) 108 269.33 P
5 F
0.37 (lock) 243.74 269.33 P
1 F
0.33 ( statements with multiple locks, although it is possible) 261.52 269.33 P
-0.37 (for deadlock to occur by dynamic nesting of) 108 257.33 P
5 F
-0.41 (lock) 302.14 257.33 P
1 F
-0.37 ( statements or through other synchroniza-) 319.92 257.33 P
(tion.) 108 245.33 T
0.08 (The implementation of) 108 221.33 P
5 F
0.08 (lock) 211.86 221.33 P
1 F
0.08 ( statements also ensures that threads that can run will eventu-) 229.64 221.33 P
-0.29 (ally do so; no thread will face starvation because of the operation of the locking and sched-) 108 209.33 P
0.71 (uling implementation. Similarly, no) 108 197.33 P
5 F
0.79 (when) 271.17 197.33 P
1 F
0.71 ( clause will be repeatedly chosen over another) 295.07 197.33 P
0.15 (such that a clause starves.  However, it is frequently good practice to have threads whose) 108 185.33 P
-0.33 (programmer supplied enabling conditions are never met in a given run \050exceptional cases\051) 108 173.33 P
-0.56 (or are not met after some time \050alternative methods\051. One thread in an infinite loop can pre-) 108 161.33 P
-0.49 (vent other threads from executing for an arbitrary time, unless it calls) 108 149.33 P
5 F
-0.54 (SYS::defer) 411.1 149.33 P
1 F
-0.49 ( \050page 83\051.) 459.46 149.33 P
0.57 (All locks acquired by the) 108 125.33 P
5 F
0.64 (lock) 223.37 125.33 P
1 F
0.57 ( statement are released when the lock or) 241.15 125.33 P
5 F
0.64 (else) 425.74 125.33 P
1 F
0.57 ( branch stops) 444.08 125.33 P
-0.08 (executing; this may occur due to finishing the branch, termination of a loop by an iterator,) 108 113.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 76
%%Page: "77" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Synchr) 278.14 709.51 T
(onization Extension) 307.04 709.51 T
4 F
(77) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.5 (a) 108 659.33 P
5 F
0.56 (return) 116 659.33 P
1 F
0.5 (, a) 142.12 659.33 P
5 F
0.56 (quit) 155.63 659.33 P
1 F
0.5 (, or an exception.) 171.75 659.33 P
5 F
0.56 (yield) 251.64 659.33 P
1 F
0.5 ( may occur in a) 272.2 659.33 P
5 F
0.56 (lock) 344.66 659.33 P
1 F
0.5 ( statement, but locks are not re-) 362.44 659.33 P
-0.27 (leased until the iterator quits. Exceptions in a) 108 647.33 P
5 F
-0.31 (lock) 307.49 647.33 P
1 F
-0.27 ( body will not be raised outside the body) 325.27 647.33 P
(until all associated locks have been released.) 108 635.33 T
0 0 0 1 0 0 0 K
108 586.98 504 590 C
0 0 0 1 0 0 0 K
72 588.49 540 588.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(unlock) 108 594 T
6 F
( statement) 142.68 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 534.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(unlock_statement) 129.6 516.31 T
5 F
( unlock) 212.25 516.31 T
0 F
(expr) 246.43 516.31 T
(ession) 264.03 516.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.09 (Locks may also be unlocked before exiting the lock branch by an) 108 492.31 P
5 F
-0.1 (unlock) 394.08 492.31 P
1 F
-0.09 ( statement. An) 422.98 492.31 P
5 F
-0.1 (un-) 489.55 492.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (lock) 108 480.31 P
1 F
-0.08 ( statement must be syntactically within a lock branch; in a) 125.78 480.31 P
5 F
-0.09 (par) 382.85 480.31 P
1 F
-0.08 ( or) 397.3 480.31 P
5 F
-0.09 (fork) 411.55 480.31 P
1 F
-0.08 ( statement an) 428.22 480.31 P
5 F
-0.09 (un-) 489.55 480.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.81 (lock) 108 468.31 P
1 F
0.73 ( must be inside an enclosed lock branch. It is a fatal error if the expression does not) 125.78 468.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(evaluate to a) 108 456.31 T
5 F
($LOCK) 166.65 456.31 T
1 F
( object which is locked by the enclosing) 199.44 456.31 T
5 F
(lock) 375.92 456.31 T
1 F
( statement.) 393.7 456.31 T
0 0 0 1 0 0 0 K
108 407.95 504 410.98 C
0 0 0 1 0 0 0 K
72 409.46 540 409.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
($LOCK) 108 414.98 T
6 F
( Classes) 147.35 414.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.44 (All synchr) 108 392.29 P
0.44 (onization objects subtype fr) 154.19 392.29 P
0.44 (om) 277.23 392.29 P
5 F
0.49 ($LOCK) 294.46 392.29 P
1 F
0.44 (.) 327.25 392.29 P
0.44 (In addition to primitive) 335.64 392.29 P
5 F
0.49 ($LOCK) 444.11 392.29 P
1 F
0.44 ( class-) 476.9 392.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.03 (es, some synchronization classes return) 108 380.29 P
5 F
1.15 ($LOCK) 289.65 380.29 P
1 F
1.03 ( objects to allow different kinds of lock-) 322.44 380.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6.24 (ing. The concrete type of the returned object is dependent on the pSather) 108 368.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(implementation.) 108 356.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 338.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(MUTEX) 121.54 338.29 T
1 F
( is a simple mutual exclusion lock. T) 156.54 338.29 T
(wo thr) 315.8 338.29 T
(eads may not simultaneously lock) 344.95 338.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a) 121.54 326.29 T
5 F
(MUTEX) 129.04 326.29 T
1 F
(.) 164.04 326.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 311.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(RW_LOCK) 121.54 311.29 T
1 F
( is used to manage r) 170.99 311.29 T
(eader) 259.3 311.29 T
(-writer synchr) 283.76 311.29 T
(onization, and de\336nes two meth-) 346.44 311.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ods \324) 121.54 299.29 T
5 F
(reader) 142.63 299.29 T
1 F
(\325 and \324) 172.27 299.29 T
5 F
(writer) 199.76 299.29 T
1 F
(\325.  These r) 224.94 299.29 T
(eturn) 267.26 299.29 T
5 F
($LOCK) 293.61 299.29 T
1 F
( objects. If \324) 326.4 299.29 T
5 F
(rw) 375.94 299.29 T
1 F
(\325 is an object of type) 386.49 299.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(RW_LOCK) 121.54 287.29 T
1 F
(, then a lock on \324) 170.99 287.29 T
5 F
(rw.reader) 243.11 287.29 T
1 F
(\325 or \324) 286.08 287.29 T
5 F
(rw.writer) 306.05 287.29 T
1 F
(\325 blocks until no thr) 344.56 287.29 T
(ead is locking) 430.54 287.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(on \324) 121.54 275.29 T
5 F
(rw.writer) 138.1 275.29 T
1 F
(\325, although multiple thr) 176.61 275.29 T
(eads can simultaneously hold \324) 279.75 275.29 T
5 F
(rw.reader) 416.22 275.29 T
1 F
(\325.  Read-) 459.18 275.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ers ar) 121.54 263.29 T
(e granted priority over writers. Attempting to obtain a writer lock while holding) 145.79 263.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the corr) 121.54 251.29 T
(esponding r) 155.53 251.29 T
(eader lock causes deadlock.) 208.52 251.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 236.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(WR_LOCK) 121.54 236.29 T
1 F
( and) 170.99 236.29 T
5 F
(FRW_LOCK) 192.92 236.29 T
1 F
( also manage r) 248.48 236.29 T
(eader) 312.36 236.29 T
(-writer synchr) 336.82 236.29 T
(onization.) 399.5 236.29 T
5 F
(WR_LOCK) 448.64 236.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(gives writes priority over r) 121.54 224.29 T
(eads, while) 239.81 224.29 T
5 F
(FRW_LOCK) 292.22 224.29 T
1 F
( grants r) 347.78 224.29 T
(eaders and writers equal) 384.38 224.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(priority) 121.54 212.29 T
(.) 154.44 212.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 197.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Classes under) 121.54 197.29 T
5 F
($ATTACH) 185.75 197.29 T
1 F
( and) 231.31 197.29 T
5 F
($ATTACH{T}) 253.24 197.29 T
1 F
( \050page 79\051 also subtype fr) 311.59 197.29 T
(om) 422.24 197.29 T
5 F
($LOCK) 439.03 197.29 T
1 F
(.) 471.82 197.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 562.31 T
1 1 0 0 0 0 1 K
306 554.98 504 574.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(unlock g) 342 562.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
203.39 513.08 212.25 524.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 201.36 516.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 77
%%Page: "78" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(78) 108 709.51 T
0 F
(Synchr) 261 709.51 T
(onization Extension) 289.9 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Locking example) 108 658.67 T
0 0 0 1 0 0 0 K
108 457.98 504 461 C
0 0 0 1 0 0 0 K
72 459.49 540 459.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Attach statement) 108 465 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 405.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(attach) 129.6 387.31 T
(  expr) 165.57 387.31 T
(ession) 188.17 387.31 T
5 F
(:-) 215.12 387.31 T
0 F
(expr) 223.73 387.31 T
(ession) 241.33 387.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.34 (One way that threads can be created is by executing an) 108 363.31 P
0 0 0 1 0 0 0 K
374.02 362.31 349.42 362.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.34 (attach) 349.42 363.31 P
1 F
-0.34 (.  The left side must be of type) 374.02 363.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.45 (\324) 108 351.31 P
5 F
-0.5 ($ATTACH) 110.78 351.31 P
1 F
-0.45 (\325 or \324) 156.34 351.31 P
5 F
-0.5 ($ATTACH{T}) 175.41 351.31 P
1 F
-0.45 (\325. If the left side is of type \324$) 233.76 351.31 P
5 F
-0.5 (ATTACH{T}) 351.72 351.31 P
1 F
-0.45 (\325, the return type of the) 404.51 351.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (right side must be a subtype of \324) 108 339.31 P
5 F
-0.29 (T) 247.88 339.31 P
1 F
-0.26 (\325. If the left side is of type \324) 253.99 339.31 P
5 F
-0.29 ($ATTACH) 368.43 339.31 P
1 F
-0.26 (\325, the right side must) 413.99 339.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(not return a value. There must be no iterators on the right side.) 108 327.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When an attach is executed, the following takes place in strict order:) 108 303.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(1.) 108 285.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(The left side is evaluated.) 121.54 285.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(2.) 108 270.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
($ATTACH) 121.54 270.31 T
1 F
( and) 167.1 270.31 T
5 F
($ATTACH{T}) 189.03 270.31 T
1 F
( both subtype from) 247.38 270.31 T
5 F
($LOCK) 334.44 270.31 T
1 F
(.) 367.23 270.31 T
(  If the synchr) 369.73 270.31 T
(onization object) 429.95 270.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the left side is locked by another thr) 121.54 258.31 T
(ead, the executing thr) 291 258.31 T
(ead is suspended until) 386.38 258.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the gate becomes unlocked.) 121.54 246.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(3.) 108 231.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Any local variables on the right side ar) 121.54 231.31 T
(e evaluated.) 292.37 231.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(4.) 108 216.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(A new thr) 121.54 216.31 T
(ead is cr) 166.12 216.31 T
(eated to execute the right side. This new thr) 202.38 216.31 T
(ead is attached to the) 395.13 216.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(synchr) 121.54 204.31 T
(onization object. The new thr) 151.19 204.31 T
(ead r) 279.69 204.31 T
(eceives a unique copy of every local variable;) 301.86 204.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(changes to this local by the originating thr) 121.54 192.31 T
(ead ar) 307.35 192.31 T
(e not observed by the new thr) 334.52 192.31 T
(ead.) 466.13 192.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Similarly) 121.54 180.31 T
(, if) 160.66 180.31 T
(\324) 174.4 180.31 T
5 F
(out) 177.18 180.31 T
1 F
(\325 and \324) 191.08 180.31 T
5 F
(inout) 218.57 180.31 T
1 F
(\325 arguments occur in the right side, changes to local vari-) 240.25 180.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ables will not be observed by the originating thread.) 121.54 168.31 T
(The r) 352.01 168.31 T
(ules for memory consisten-) 375.12 168.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cy apply for other variables such as attributes of objects \050see page 82\051.) 121.54 156.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(5.) 108 141.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(When execution of the right side completes, the new thr) 121.54 141.31 T
(ead terminates, detaches itself) 368.24 141.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fr) 121.54 129.31 T
(om the synchr) 128.64 129.31 T
(onization object, and enqueues the r) 191.45 129.31 T
(eturn value or incr) 350.57 129.31 T
(ements the) 432.65 129.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(counter) 121.54 117.31 T
(.) 154.55 117.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.28 (This code implements five dining) 108 630.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.67 (philosophers.  The philosophers) 108 618.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.84 (are seated at a round table and) 108 606.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.11 (forced to share a single chopstick) 108 594.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.25 (with each neighbor.  They alter-) 108 582.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.46 (nate between eating and think-) 108 570.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5.43 (ing, but eating requires both) 108 558.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(chopsticks.) 108 546.33 T
1 1 0 0 0 0 1 K
261 504 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(chopsticks ::= #ARRAY{MUTEX}\0505\051;) 297 631 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop chopsticks.set!\050#MUTEX\051 end;) 297 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(parloop) 297 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(i::= 0.upto!\0504\051;) 309.6 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(do) 297 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop) 309.6 581 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(think;) 322.2 571 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(lock) 322.2 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(when chopsticks[i],) 322.2 551 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-1.17 (  chopsticks[\050i+1\051.mod\0505\051]) 397.73 551 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(then) 322.2 541 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(eat) 342.22 541 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 322.2 531 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 309.6 521 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 297 511 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 433.31 T
1 1 0 0 0 0 1 K
306 425.98 504 445.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(g :- forked_computation) 342 433.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
156.71 384.08 165.57 395.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 154.68 387.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 78
%%Page: "79" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Synchr) 278.14 709.51 T
(onization Extension) 307.04 709.51 T
4 F
(79) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.1 (Every pSather thread is attached to exactly one) 108 659.33 P
5 F
0.11 ($ATTACH) 318.58 659.33 P
1 F
0.1 ( object; even the) 364.14 659.33 P
5 F
0.11 (main) 437.77 659.33 P
1 F
0.1 ( routine is) 459.44 659.33 P
0.02 (attached to an unnamed object. Attached threads may be thought of as producers that en-) 108 647.33 P
(queue their return value \050or increment a counter\051 when they terminate.) 108 635.33 T
0.97 (The thread executing a) 108 611.33 P
5 F
1.08 (par) 215.3 611.33 P
1 F
0.97 ( statement implicitly creates an) 229.75 611.33 P
5 F
1.08 ($ATTACH) 374.28 611.33 P
1 F
0.97 ( object and forks a) 419.84 611.33 P
-0.31 (thread to execute the body. The newly created thread, as well as all threads created by fork) 108 599.33 P
0.87 (statements syntactically in the par body, are attached to this same unnamed object. The) 108 587.33 P
0.55 (thread executing a par statement blocks until there are no threads attached to the object.) 108 575.33 P
0.23 (This ensures that all threads created by a) 108 563.33 P
5 F
0.25 (fork) 292.55 563.33 P
1 F
0.23 ( have completed before execution continues) 309.22 563.33 P
(past the) 108 551.33 T
5 F
(par) 145.38 551.33 T
1 F
(.) 159.83 551.33 T
0 0 0 1 0 0 0 K
108 502.98 504 506 C
0 0 0 1 0 0 0 K
72 504.49 540 504.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
($ATTACH) 108 510 T
6 F
( classes) 162.67 510 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
( These) 108 482.31 T
5 F
( $ATTACH) 136.27 482.31 T
1 F
( classes are built-in:) 184.61 482.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 464.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(FUTURE{T}) 121.54 464.31 T
1 F
( pr) 174.88 464.31 T
(ovides a handle to the r) 187.16 464.31 T
(esult of a computation.  Only one thr) 290.63 464.31 T
(ead may) 453.2 464.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(be attached to a futur) 121.54 452.31 T
(e.) 215.68 452.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 437.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(ATTACH) 121.54 437.31 T
1 F
( allows multiple thr) 161.54 437.31 T
(eads to be attached, but does not allow r) 248.4 437.31 T
(eturn values.) 426.11 437.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 108 422.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
144.31 421.31 121.54 421.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Gates) 121.54 422.31 T
1 F
( ar) 144.31 422.31 T
(e powerful synchr) 155.58 422.31 T
(onization primitives which generalize fork/join, mailboxes,) 235.84 422.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(semaphor) 121.54 410.31 T
(es, and barrier synchr) 165.46 410.31 T
(onization. Ther) 261.15 410.31 T
(e is a typed) 328.3 410.31 T
5 F
(GATE{T}) 380.97 410.31 T
1 F
( that holds values,) 420.99 410.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and an untyped) 121.54 398.31 T
5 F
(GATE) 194.37 398.31 T
1 F
( that does not.  Gates have the following unnamed attributes:) 221.6 398.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(1.) 135 383.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(A locked status \050unlocked, or locked by a particular thr) 153 383.31 T
(ead\051;) 396.61 383.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(2.) 135 368.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(in the case of \324) 153 368.31 T
5 F
(GATE{T}) 215.64 368.31 T
1 F
(\325, a queue of values which must conform to \324) 255.66 368.31 T
5 F
(T) 451.57 368.31 T
1 F
(\325, or) 457.68 368.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(3.) 135 353.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(in the case of the unparameterized class \324) 153 353.31 T
5 F
(GATE) 334.08 353.31 T
1 F
(\325, an integer counter;) 361.31 353.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
(4.) 135 338.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(a set of attached thr) 153 338.31 T
(eads.) 239.61 338.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (In addition to thread attachment, these classes support the operations listed in the table on) 108 314.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.12 (page 80 .  All the operations are supported by) 108 302.31 P
5 F
0.14 (GATE) 313.16 302.31 P
1 F
0.12 ( and) 340.39 302.31 P
5 F
0.14 (GATE{T}) 362.57 302.31 P
1 F
0.12 (, but) 402.59 302.31 P
5 F
0.14 (ATTACH) 425.16 302.31 P
1 F
0.12 ( and) 465.16 302.31 P
5 F
0.14 (FU-) 487.34 302.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.46 (TURE{T}) 108 290.31 P
1 F
0.41 ( support a subset.  Some operations are) 148.01 290.31 P
0 0 0 1 0 0 0 K
363.68 289.31 326.82 289.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.41 (exclusive) 326.82 290.31 P
1 F
0.41 (: these lock the gate before pro-) 363.68 290.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.31 (ceeding and unlock it when the operation is complete. The exclusive operations also per-) 108 278.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(form imports and exports significant to memory consistency \050page 82\051.) 108 266.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 11 Q
(Attach examples) 108 235.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.62 (A thread that wait until a value being computed becomes available can use \324) 108 210.31 P
5 F
0.69 (get) 452.85 210.31 P
1 F
0.62 (\325 to wait) 466.75 210.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(without looping) 108 198.31 T
( .) 179.71 198.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 (Using a) 108 170.31 P
0 F
0 (futur) 144.31 170.31 P
0 (e) 165.25 170.31 P
1 F
0 (.) 169.14 170.31 P
0 (The statement \324) 176.65 170.31 P
5 F
0 (f :- compute) 244.42 170.31 P
1 F
0 (\325) 297.22 170.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.74 (creates a new thread to do some computa-) 108 158.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.08 (tion; the current thread continues to exe-) 108 146.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.99 (cute. It is suspended at \324) 108 134.31 P
5 F
2.21 (f.get) 224.43 134.31 P
1 F
1.99 (\325 only if the) 243.89 134.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(result is not yet available.) 108 122.31 T
1 1 0 0 0 0 1 K
306 114.98 504 182.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
9 9 Q
0 X
0 0 0 1 0 0 0 K
(-- Create a future of FL) 342 170.98 T
(T) 432.55 170.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(f: := #FUTURE{FLT};) 342 160.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(f :- compute;) 342 150.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 342 140.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(result := f.get;) 342 130.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 79
%%Page: "80" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(80) 108 709.51 T
0 F
(Synchr) 261 709.51 T
(onization Extension) 289.9 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
0 X
(Signature) 127.88 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 257 650 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Exclusi) 380.56 650.5 T
(v) 407.33 650.5 T
(e) 411.7 650.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
11 F
(ATTACH) 428.36 650.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FUTURE) 470.16 650.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(create:SAME) 111.88 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Make a new unlocked synchronization object) 201.88 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with an empty queue and no attached threads.) 201.88 617 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(N/A) 390.38 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 436.13 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 478.13 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(size:INT) 111.88 598 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.43 (Returns number of elements in queue [) 201.88 598 P
5 F
-0.47 (GATE) 339.29 598 P
2 F
-0.43 (:) 363.8 598 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(returns counter].) 201.88 587 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 392.63 598 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 437.63 598 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 479.63 598 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(has_thread:BOOL) 111.88 568 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Returns) 201.88 568 T
5 F
(true) 232.12 568 T
2 F
( if there exists a thread attached) 247.63 568 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to the gate.) 201.88 557 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 392.63 568 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 436.13 568 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 478.13 568 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(set\050T\051) 111.88 538 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([GATE::set]) 111.88 527 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Replace head of queue with argument, or) 201.88 538 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (insert into queue if empty. [) 201.88 527 P
5 F
-0.07 (GATE) 301.56 527 P
2 F
-0.06 (: If counter) 326.07 527 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is zero, set to one.]) 201.88 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exclusive) 380.38 538 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 437.63 538 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 479.63 538 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(get:T) 111.88 497 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
([) 111.88 486 T
5 F
(GATE::get]) 114.87 486 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Return head of queue; do not remove from) 201.88 497 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(queue. Blocks until queue is not empty.) 201.88 486 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([) 201.88 475 T
5 F
(GATE) 204.87 475 T
2 F
(: Blocks until counter is nonzero.]) 229.38 475 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exclusive) 380.38 497 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 437.63 497 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 478.13 497 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(enqueue\050T\051) 111.88 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
([) 111.88 445 T
5 F
(GATE) 114.87 445 T
2 F
(::) 139.38 445 T
5 F
(enqueue) 144.38 445 T
2 F
(]) 179.41 445 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Insert argument at tail of queue. [) 201.88 456 T
5 F
(GATE) 322.1 456 T
2 F
(:) 346.6 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(increment counter.]) 201.88 445 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exclusive) 380.38 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 437.63 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 479.63 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(dequeue:T) 111.88 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
([) 111.88 415 T
5 F
(GATE) 114.87 415 T
2 F
(::) 139.38 415 T
5 F
(dequeue) 144.38 415 T
2 F
(]) 179.41 415 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Block until queue is not empty, then remove) 201.88 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (and return head of queue. [) 201.88 415 P
5 F
-0.34 (GATE) 297.29 415 P
2 F
-0.31 (: Block until) 321.8 415 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(counter nonzero, then decrement.]) 201.88 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exclusive) 380.38 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 437.63 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 479.63 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(empty:$LOCK) 111.88 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Returns a lock which blocks until the gate is) 201.88 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lockable and the gate\325s queue is empty) 201.88 374 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.37 ([GATE: counter zero]; then the gate is locked.) 201.88 363 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Holding this lock does not prevent the holder) 201.88 352 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(from making the queue become not empty) 201.88 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([counter become nonzero].) 201.88 330 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 392.63 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 437.63 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 478.13 385 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(not_empty:$LOCK) 111.88 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Returns a lock which blocks until the gate is) 201.88 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lockable and the gate\325s queue is not empty) 201.88 300 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([GATE: counter nonzero]; then the gate is) 201.88 289 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (locked. Holding this lock does not prevent the) 201.88 278 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(holder from making the queue become empty) 201.88 267 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
([counter zero].) 201.88 256 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 392.63 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 437.63 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 478.13 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(threads:$LOCK) 111.88 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Returns a lock which blocks until the gate is) 201.88 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lockable and there is some thread attached to) 201.88 226 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the gate; then the gate is locked. Holding this) 201.88 215 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lock does not prevent the completion of) 201.88 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attached threads.) 201.88 193 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 392.63 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 436.13 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 478.13 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(no_threads:$LOCK) 111.88 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Returns a lock which blocks until the gate is) 201.88 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lockable and there are no threads attached to) 201.88 163 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the gate; then the gate is locked. Holding this) 201.88 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lock does not prevent the attachment of) 201.88 141 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(threads by the holder.) 201.88 130 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No) 392.63 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 436.13 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Yes) 478.13 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105.88 665 105.88 124 2 L
V
2 H
0 Z
N
195.88 667 195.88 122 2 L
V
N
374.12 667 374.12 122 2 L
V
N
422.12 667 422.12 122 2 L
V
0.5 H
N
464.12 667 464.12 122 2 L
V
N
506.12 665 506.12 124 2 L
V
2 H
N
104.88 666 507.12 666 2 L
V
N
104.88 640 507.12 640 2 L
V
N
104.88 610 507.12 610 2 L
V
0.5 H
N
104.88 580 507.12 580 2 L
V
N
104.88 550 507.12 550 2 L
V
N
104.88 509 507.12 509 2 L
V
N
104.88 468 507.12 468 2 L
V
N
104.88 438 507.12 438 2 L
V
N
104.88 397 507.12 397 2 L
V
N
104.88 323 507.12 323 2 L
V
N
104.88 249 507.12 249 2 L
V
N
104.88 186 507.12 186 2 L
V
N
104.88 123 507.12 123 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 80
%%Page: "81" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Synchr) 278.14 709.51 T
(onization Extension) 307.04 709.51 T
4 F
(81) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 518.98 504 522 C
0 0 0 1 0 0 0 K
72 520.49 540 520.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(sync) 108 526 T
6 F
( statement) 132.67 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 466.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(sync_statement) 129.6 448.31 T
5 F
(sync) 203.92 448.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.89 (The) 108 424.31 P
0 0 0 1 0 0 0 K
189.48 423.31 128.13 423.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.89 (sync statement) 128.13 424.31 P
1 F
0.89 ( allows barrier synchronization between threads attached to the same) 189.48 424.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.2 (synchronization object.  A thread executing a) 108 412.31 P
5 F
0.23 (sync) 311.18 412.31 P
1 F
0.2 ( blocks until all threads attached to the) 331.74 412.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(same object are also blocking on) 108 400.31 T
5 F
(sync) 252.5 400.31 T
1 F
( \050or have terminated\051.) 273.06 400.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 11 Q
(Sync example) 108 369.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.14 (Because local variables declared in the) 108 179.31 P
5 F
0.16 (parloop) 280.66 179.31 P
1 F
0.14 ( become unique to each thread, the explicit) 314.01 179.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.18 (sync) 108 167.31 P
1 F
-0.16 ( can be useful to allow convenient passing of state from one phase to another through) 128.56 167.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.53 (the thread\325s local variables, instead of using  an intermediate array with one element for) 108 155.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(each thread.) 108 143.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.1 (Obtaining the first result from several com-) 108 653.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.47 (peting searches.  Unlike a future, a gate may) 108 641.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.39 (enqueue multiple values.  When one of the) 108 629.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.14 (threads succeeds, its result is enqueued in) 108 617.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.72 (\324) 108 605.33 P
5 F
0.8 (g) 110.78 605.33 P
1 F
0.72 (\325.   If the results of the other two threads) 116.34 605.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.39 (are not needed, additional code would be) 108 593.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5.83 (needed to prematurely halt the other) 108 581.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(threads.) 108 569.33 T
1 1 0 0 0 0 1 K
306 562 504 666 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(g :- search\050strategy1\051;) 342 644 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(g :- search\050strategy2\051;) 342 634 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(g :- search\050strategy3\051;) 342 624 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(...) 342 614 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(result := g.dequeue;) 342 604 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 494.31 T
1 1 0 0 0 0 1 K
306 486.98 504 506.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(sync) 342 494.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.48 (This code applies \324) 108 341.31 P
5 F
0.53 (phase1) 191.48 341.31 P
1 F
0.48 (\325 and \324) 224.28 341.31 P
5 F
0.53 (phase2) 252.72 341.31 P
1 F
0.48 (\325 to) 285.52 341.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.33 (each element of an array, waiting for all) 108 329.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(\324) 108 317.31 T
5 F
(phase1) 110.78 317.31 T
1 F
(\325  before beginning \324) 143.58 317.31 T
5 F
(phase2) 231.71 317.31 T
1 F
(\325:) 264.51 317.31 T
1 1 0 0 0 0 1 K
306 304.98 504 353.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(parloop) 342 331.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e::= a.elt! do e.phase1 end;) 374.52 331.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(parloop) 342 321.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e::= a.elt! do e.phase2 end) 374.52 321.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.08 (This code does the same thing without iter-) 108 280.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.92 (ating over the elements for each phase.  A) 108 268.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.5 (single thread is forked for each element.) 108 256.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
2.78 (Each thread executes \324) 108 244.31 P
5 F
3.09 (phase1) 214.43 244.31 P
1 F
2.78 (\325, the) 247.23 244.31 P
5 F
3.09 (sync) 276.94 244.31 P
1 F
2.78 (,) 297.5 244.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.01 (and \324) 108 232.31 P
5 F
-0.01 (phase2) 130.2 232.31 P
1 F
-0.01 (\325.  The thread executing the) 163 232.31 P
5 F
-0.01 (par) 285.55 232.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 F
-0.56 (waits for all threads to terminate before pro-) 108 220.31 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ceeding.) 108 208.31 T
1 1 0 0 0 0 1 K
306 200.98 504 292.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(parloop) 342 270.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e::= a.elt! do) 374.52 270.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e.phase1;) 354.6 260.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(sync;) 354.6 250.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(e.phase2) 354.6 240.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 230.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
195.06 445.08 203.92 456.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 193.03 448.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 81
%%Page: "82" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(82) 108 709.51 T
0 F
(Synchr) 261 709.51 T
(onization Extension) 289.9 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Memory consistency) 108 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.3 (Thr) 108 635.31 P
0.3 (eads may communicate by writing and then r) 123.72 635.31 P
0.3 (eading variables or attributes of objects.) 326.86 635.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.08 (All assignments ar) 108 623.31 P
0.08 (e atomic \050the r) 190.23 623.31 P
0.08 (esult of a r) 253.62 623.31 P
0.08 (ead is guaranteed to be the value of some pr) 300.15 623.31 P
0.08 (e-) 495.88 623.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.12 (vious write\051; assignments to variables of immutable type atomically modify all at-) 108 611.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.53 (tributes. W) 108 599.31 P
0.53 (rites ar) 156.76 599.31 P
0.53 (e always observed by the thr) 187.72 599.31 P
0.53 (ead itself. W) 317.06 599.31 P
0.53 (rites ar) 372.23 599.31 P
0.53 (e not guaranteed to be) 403.18 599.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.57 (observed by other thr) 108 587.31 P
0.57 (eads until an) 204.94 587.31 P
0 0 0 1 0 0 0 K
291.58 586.31 266.03 586.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.57 (export) 266.03 587.31 P
1 F
0.57 ( is executed by the writer and a subsequent) 291.58 587.31 P
0 0 0 1 0 0 0 K
504 586.31 490.11 586.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.57 (im-) 490.11 587.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
124.66 574.31 108 574.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.2 (port) 108 575.31 P
1 F
0.2 ( is executed by the r) 124.66 575.31 P
0.2 (eader) 213.44 575.31 P
0.2 (, even if the writes wer) 237.34 575.31 P
0.2 (e pr) 338.91 575.31 P
0.2 (eviously observed by the r) 356.19 575.31 P
0.2 (eading) 473.81 575.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.14 (thr) 108 563.31 P
1.14 (ead. Exports and imports may be written explicitly) 120.85 563.31 P
1.14 (\050page 83\051) 357.04 563.31 P
1.14 ( and ar) 398.7 563.31 P
1.14 (e also implicitly) 431.67 563.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(associated with certain operations:) 108 551.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (This model has the property that it guarantees sequential consistency to programs without) 108 394.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data races.) 108 382.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(An import occurs:) 175.84 519.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An e) 376.1 519.98 T
(xport occurs:) 398.91 519.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(In a ne) 114 497.98 T
(wly created thread) 138.26 497.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In parent thread when a child thread is fork) 337 497.98 T
(ed) 492.37 497.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(On e) 114 478.98 T
(xiting a) 131.11 478.98 T
5 F
(par) 160.61 478.98 T
2 F
( statement \050children ha) 173.62 478.98 T
(v) 255.67 478.98 T
(e terminated\051) 260.03 478.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(By a thread on termination) 337 478.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(On entering one of the branches of a) 114 459.98 T
5 F
(lock) 247.46 459.98 T
2 F
( statement) 263.46 459.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(On entering an) 337 459.98 T
5 F
(unlock) 392.74 459.98 T
2 F
(, or e) 418.75 459.98 T
(xiting a) 436.86 459.98 T
5 F
(lock) 466.36 459.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(On e) 114 440.98 T
(xiting e) 131.11 440.98 T
(xclusi) 158.23 440.98 T
(v) 179.5 440.98 T
(e operations \050listed on page 80\051) 183.87 440.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(On entering e) 337 440.98 T
(xclusi) 385.85 440.98 T
(v) 407.13 440.98 T
(e operations) 411.49 440.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(On completion of a) 114 421.98 T
5 F
(sync) 185.99 421.98 T
2 F
( statement) 204.49 421.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(On initiation of a) 337 421.98 T
5 F
(sync) 401 421.98 T
2 F
( statement) 419.5 421.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 534.98 108 415.98 2 L
V
2 H
N
331 536.98 331 413.98 2 L
V
N
507 534.98 507 415.98 2 L
V
N
107 535.98 508 535.98 2 L
V
N
107 509.98 508 509.98 2 L
V
N
107 490.98 508 490.98 2 L
V
0.5 H
N
107 471.98 508 471.98 2 L
V
N
107 452.98 508 452.98 2 L
V
N
107 433.98 508 433.98 2 L
V
N
107 414.98 508 414.98 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 82
%%Page: "83" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Distributed Extension) 288.04 709.51 T
4 F
(83) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Memory consistency examples) 108 658.67 T
0 0 0 1 0 0 0 K
108 328.98 504 332 C
0 0 0 1 0 0 0 K
72 330.49 540 330.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(SYS) 108 336 T
6 F
( class) 132.01 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(pSather extends the) 108 313.31 T
5 F
(SYS) 197.62 313.31 T
1 F
( class \050page 63\051 with the following r) 217.63 313.31 T
(outines:) 374.65 313.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
122.99 157.18 108 157.18 2 L
V
0.9 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(D) 108 158.98 T
0 0 0 1 0 0 0 K
218.7 157.18 122.99 157.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(ISTRIBUTED) 122.99 158.98 T
0 0 0 1 0 0 0 K
229.7 157.18 218.7 157.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 18 Q
(E) 218.7 158.98 T
0 0 0 1 0 0 0 K
308.09 157.18 229.7 157.18 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 14.4 Q
(XTENSION) 229.7 158.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
2.94 (This section intr) 108 133.31 P
2.94 (oduces distributed constr) 184.65 133.31 P
2.94 (ucts that allow the pr) 302.78 133.31 P
2.94 (ogrammer to extend) 408.11 133.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.57 (pSather code with explicit placement information for ef) 108 121.31 P
1.57 (\336ciency on distributed pSather) 363.33 121.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(This incorr) 108 630.33 T
(ect code may loop for) 155.95 630.33 T
(ever wait-) 251.03 630.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ing for) 108 618.33 T
5 F
(flag) 140.03 618.33 T
1 F
(, print \324) 156.15 618.33 T
5 F
(i is 1) 188.38 618.33 T
1 F
(\325, or print \324) 208.94 618.33 T
5 F
(i is 0) 255.86 618.33 T
1 F
(\325.) 276.42 618.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(The code fails because it is trying to use) 108 606.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(flag) 108 594.33 T
1 F
(to signal completion of \324) 126.9 594.33 T
5 F
(i:=1) 233.52 594.33 T
1 F
(\325, but ther) 249.92 594.33 T
(e) 292.66 594.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(is no appr) 108 582.33 T
(opriate synchr) 152.22 582.33 T
(onization occur-) 215.75 582.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ring between the forked thr) 108 570.33 T
(ead and the) 229.48 570.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(thr) 108 558.33 T
(ead executing the par body) 120.85 558.33 T
(. Even) 239.89 558.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(though the forked thr) 108 546.33 T
(ead terminates, the) 203.37 546.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(modi\336cation of \324) 108 534.33 T
5 F
(flag) 180.82 534.33 T
1 F
(\325 may not be observed) 196.94 534.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(because ther) 108 522.33 T
(e is no import in the body) 162.96 522.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(thr) 108 510.33 T
(ead.  Even if the modi\336cation to) 120.85 510.33 T
5 F
(flag) 264.2 510.33 T
1 F
( is) 280.32 510.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(observed, ther) 108 498.33 T
(e is no guarantee that a mod-) 171.16 498.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(i\336cation to \324) 108 486.33 T
5 F
(i) 160.35 486.33 T
1 F
(\325 will be observed befor) 162.57 486.33 T
(e this,) 266.14 486.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(if at all.) 108 474.33 T
1 1 0 0 0 0 1 K
306 467 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 9 Q
0 X
0 0 0 1 0 0 0 K
(-- These v) 342 621 T
(ar) 382.28 621 T
(iab) 390.42 621 T
(les are shared) 402.25 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(i:INT;) 342 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(flag:BOOL;) 342 601 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(par) 342 591 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fork) 354.6 581 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(i := 1;) 367.2 571 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(flag := true;) 367.2 561 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 354.6 551 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
9 F
(-- Attempt to loop until change) 354.6 541 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(-- in \324flag\325 is observed) 354.6 531 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(loop) 354.6 521 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(until!\050flag\051 end) 374.11 521 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#OUT + \324i is\325 + i + \325\134n\325) 354.6 511 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 501 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.74 (This code will always print \324) 108 442.33 P
5 F
0.82 (i is 1) 236.95 442.33 P
1 F
0.74 (\325 because) 259.16 442.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.18 (there is no race condition \050unlike the previ-) 108 430.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.42 (ous example\051. An export occurs when the) 108 418.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
-0.31 (forked thread terminates, and an import oc-) 108 406.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
3.5 (curs when) 108 394.33 P
5 F
3.89 (par) 163.43 394.33 P
1 F
3.5 ( completes. Therefore the) 177.88 394.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(change to \324) 108 382.33 T
5 F
(i) 155.93 382.33 T
1 F
(\325 must be observed.) 158.15 382.33 T
1 1 0 0 0 0 1 K
306 375 504 455 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(i:INT;) 342 433 T
9 F
(-- This is a shared v) 366 433 T
(ar) 444.8 433 T
(iab) 452.93 433 T
(le) 464.76 433 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(par) 342 423 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(fork) 354.6 413 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(i:=1) 372.11 413 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end;) 389.37 413 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 403 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#OUT + \324i is\325 + i + \325\134n\325) 342 393 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Routine) 137.16 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 327.67 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(defer) 114 261.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Inform scheduler that this is a good time to preempt this thread.) 204 261.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(import) 114 242.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Execute an import operation \050page 82\051.) 204 242.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(export) 114 223.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Execute an export operation \050page 82\051.) 204 223.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 296.98 108 217.98 2 L
V
2 H
N
198 298.98 198 215.98 2 L
V
0.5 H
N
504 296.98 504 217.98 2 L
V
2 H
N
107 297.98 505 297.98 2 L
V
N
107 273.98 505 273.98 2 L
V
N
107 254.98 505 254.98 2 L
V
0.5 H
N
107 235.98 505 235.98 2 L
V
N
107 216.98 505 216.98 2 L
V
2 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 83
%%Page: "84" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(84) 108 709.51 T
0 F
(Distributed Extension) 270.9 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 F
0 X
0.71 (implementations.  Explicitly placing objects and thr) 108 659.33 P
0.71 (eads does not af) 339.29 659.33 P
0.71 (fect the semantics of) 412.35 659.33 P
0.28 (the original code, but it is also possible to deliberately change the original \337ow of contr) 108 647.33 P
0.28 (ol) 495.63 647.33 P
(\050ie. using) 108 635.33 T
5 F
(with-near) 151.09 635.33 T
1 F
( on page 85\051.) 192.21 635.33 T
0.5 (The memory performance model of pSather has two levels.  The basic unit of location in) 108 611.33 P
0.58 (pSather is the) 108 599.33 P
199.74 598.33 172.33 598.33 2 L
V
0.5 H
0 Z
N
0 F
0.58 (cluster) 172.33 599.33 P
1 F
0.58 (.  The programmer may assume that reading or writing memory on) 199.74 599.33 P
0.39 (the same cluster is significantly faster than on a remote cluster.  A cluster corresponds to) 108 587.33 P
0.25 (an efficient group in the memory hierarchy, and may have more than one processor.  For) 108 575.33 P
-0.13 (example, on a network of workstations a cluster would correspond to one workstation, al-) 108 563.33 P
-0.52 (though that workstation may have multiple processors sharing a common bus.  This model) 108 551.33 P
0.96 (is appropriate for any machine for which local cached access is significantly faster than) 108 539.33 P
(general access.) 108 527.33 T
-0.16 (At any time a thread has an associated) 108 503.33 P
316.7 502.33 279.17 502.33 2 L
V
N
0 F
-0.16 (cluster id) 279.17 503.33 P
1 F
-0.16 ( \050an) 316.7 503.33 P
5 F
-0.18 (INT) 335.52 503.33 P
1 F
-0.16 (\051, its) 351.63 503.33 P
433.69 502.33 372.55 502.33 2 L
V
N
0 F
-0.16 (locus of control) 372.55 503.33 P
1 F
-0.16 (. Until modified) 433.69 503.33 P
0.3 (explicitly, the locus of thread remains the same throughout the thread\325s execution. When) 108 491.33 P
-0.52 (execution begins, the) 108 479.33 P
5 F
-0.58 (main) 201.81 479.33 P
1 F
-0.52 ( routine \050page 61\051 is at cluster zero. The locus of control of a child) 223.48 479.33 P
(thread is the same as the locus of its parent at the time of the fork.) 108 467.33 T
0 0 0 1 0 0 0 K
108 418.98 504 422 C
0 0 0 1 0 0 0 K
72 420.49 540 420.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(The \324) 108 426 T
5 F
(@) 133.67 426 T
6 F
(\325 operator) 145.85 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 366.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(expr) 126 346.31 T
(ession) 143.6 346.31 T
( expr) 179.41 346.31 T
(ession) 199.51 346.31 T
5 F
(@) 226.46 346.31 T
0 F
(expr) 239.11 346.31 T
(ession) 256.71 346.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fork_statement) 126 326.31 T
5 F
( fork @) 197.35 326.31 T
0 F
(expr) 235.01 326.31 T
(ession) 252.61 326.31 T
5 F
(;) 279.56 326.31 T
0 F
(statement_list) 287.9 326.31 T
5 F
(end) 347.62 326.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(parloop_statement) 126 306.31 T
5 F
( parloop) 213.24 306.31 T
0 F
(statement_list) 252.15 306.31 T
5 F
( do @) 309.36 306.31 T
0 F
(expr) 341.48 306.31 T
(ession) 359.08 306.31 T
5 F
( ;) 383.52 306.31 T
0 F
(statement_list) 394.64 306.31 T
5 F
( end) 451.86 306.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.29 (The locus of a thread may be explicitly moved for the duration of the evaluation of a meth-) 108 282.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (od call.  An expression following the \324) 108 270.31 P
5 F
-0.3 (@) 273.26 270.31 P
1 F
-0.27 (\325 must evaluate to an) 283.4 270.31 P
5 F
-0.3 (INT) 376.66 270.31 P
1 F
-0.27 (, which specifies the clus-) 392.77 270.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.03 (ter id of the locus of control the thread will be at while it evaluates the preceding method.) 108 258.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.25 (Subexpressions of the left side are evaluated at the current locus of execution and are not) 108 246.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.29 (relocated.  It is a fatal error for a cluster id to be less than zero or greater than or equal to) 108 234.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
-0.25 (clusters) 108 222.31 P
1 F
-0.22 ( \050see page 85\051. The \324) 142.45 222.31 P
5 F
-0.25 (@) 227.68 222.31 P
1 F
-0.22 (\325 operator has lower precedence than any other operator \050see) 237.84 222.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.51 (page 50\051.  When iterator calls are on the left side, each iterator evaluation may be placed) 108 210.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(differently on successive iterations.) 108 198.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.18 (The \324@\325 notation may also be used to explicitly place forked body threads of) 108 174.31 P
5 F
0.2 (fork) 447.27 174.31 P
1 F
0.18 ( and) 463.94 174.31 P
5 F
0.2 (par-) 486.22 174.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.74 (loop) 108 162.31 P
1 F
0.67 ( statements. Although for these constructs the location expression may appear to be) 126.9 162.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.61 (within the body, the location expression is executed before threads are forked and is) 108 150.31 P
0 F
0.61 (not) 490.67 150.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(part of the body.) 108 138.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(Example:) 108 394.31 T
1 1 0 0 0 0 1 K
306 386.98 504 406.98 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(start_work @ least_loaded;) 342 394.98 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
170.55 343.08 179.41 354.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 168.52 346.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
188.49 323.08 197.35 334.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 186.46 326.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
202.93 303.08 213.23 314.06 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 202.34 306.31 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 84
%%Page: "85" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Distributed Extension) 288.04 709.51 T
4 F
(85) 494 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
0 0 0 1 0 0 0 K
108 650.98 504 654 C
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
6 12 Q
0 X
0 0 0 1 0 0 0 K
(Location expr) 108 658 T
(essions) 181.46 658 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
-0.28 (All reference objects have a unique associated cluster id, the object\325s) 108 630.31 P
0 0 0 1 0 0 0 K
439.28 629.31 407.44 629.31 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.28 (location) 407.44 630.31 P
1 F
-0.28 (. When a refer-) 439.28 630.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.14 (ence object is created by a thread, its location will be the same as the locus of control when) 108 618.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.56 (the) 108 606.31 P
5 F
-0.63 (new) 123.81 606.31 P
1 F
-0.56 ( expression was executed. A reference object is) 142.15 606.31 P
0 0 0 1 0 0 0 K
363.64 605.31 345.86 605.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.56 (near) 345.86 606.31 P
1 F
-0.56 ( to a thread if its current location) 363.64 606.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is the same as the thread\325s locus of control, otherwise it is) 108 594.31 T
0 0 0 1 0 0 0 K
374.6 593.31 363.49 593.31 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(far) 363.49 594.31 T
1 F
(.) 374.6 594.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(There are several built-in expressions for location:) 108 570.31 T
0 0 0 1 0 0 0 K
108 327.95 504 330.98 C
0 0 0 1 0 0 0 K
72 329.46 540 329.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
5 12 Q
0 X
0 0 0 1 0 0 0 K
(with-near) 108 334.98 T
6 F
( statement) 157.34 334.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Syntax:) 108 275.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(with_near_statement) 129.6 257.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(with) 151.2 245.29 T
0 F
( ident_or_self_list) 168.98 245.29 T
5 F
(near) 243.99 245.29 T
0 F
( statement_list [) 264 245.29 T
5 F
(else) 329.55 245.29 T
0 F
( statement_list]) 347.89 245.29 T
5 F
(end) 413.44 245.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(ident_or_self_list) 129.6 227.29 T
9 F
(identi\336er) 210.91 227.29 T
0 F
(|) 251.48 227.29 T
5 F
( self) 257.54 227.29 T
0 F
( {) 275.88 227.29 T
5 F
(,) 284.21 227.29 T
9 F
(identi\336er) 289.77 227.29 T
0 F
(|) 330.34 227.29 T
5 F
( self) 336.4 227.29 T
0 F
(}) 357.52 227.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
0.71 (The) 108 203.29 P
0 0 0 1 0 0 0 K
210.04 202.29 127.95 202.29 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
0.71 (with-near statement) 127.95 203.29 P
1 F
0.71 ( asserts that particular reference objects must remain near at run-) 210.04 203.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.67 (time.  The) 108 191.29 P
0 F
1.67 (ident_or_self_list) 159.54 191.29 P
1 F
1.67 ( may contain local variables, arguments, and) 229.55 191.29 P
5 F
1.86 (self) 440.96 191.29 P
1 F
1.67 (; these are) 456.52 191.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (called) 108 179.29 P
0 0 0 1 0 0 0 K
192.66 178.29 136.65 178.29 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
-0.01 (near variables) 136.65 179.29 P
1 F
-0.01 (. When the) 192.66 179.29 P
5 F
-0.01 (with) 242.94 179.29 P
1 F
-0.01 ( statement begins execution, the identifiers are checked) 260.72 179.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.63 (to ensure that all of them hold either objects that are near or) 108 167.29 P
5 F
0.71 (void) 382.68 167.29 P
1 F
0.63 (. If this is true then the) 401.02 167.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (statements following) 108 155.29 P
5 F
-0.21 (near) 202.81 155.29 P
1 F
-0.19 ( are executed, and it is a fatal error if the identifiers stop holding) 222.82 155.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.49 (either near objects or void at any time.  It is a fatal error if some identifiers hold neither near) 108 143.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (objects nor) 108 131.29 P
5 F
-0.04 (void) 158.23 131.29 P
1 F
-0.03 ( and there is no) 176.57 131.29 P
5 F
-0.04 (else) 246.88 131.29 P
1 F
-0.03 (. Otherwise, the statements following the) 265.22 131.29 P
5 F
-0.04 (else) 448.91 131.29 P
1 F
-0.03 ( are exe-) 467.25 131.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cuted.) 108 119.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Expression) 126.28 540.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 201.62 540.31 T
(ype) 206.93 540.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 345.67 540.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(here) 114 518.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(INT) 195 518.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(The cluster id of the locus of control of the thread.) 240 518.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(where\050) 114 499.98 T
10 F
(e) 141.5 499.98 T
(xpr) 145.32 499.98 T
(ession) 156.98 499.98 T
5 F
(\051) 179.48 499.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(INT) 195 499.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(The location of the argument.  If the argument is) 240 499.98 T
5 F
(void) 417.22 499.98 T
2 F
( or an immutable) 433.73 499.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(type, it returns \324) 240 488.98 T
5 F
(here) 297.49 488.98 T
2 F
(\325.) 315.5 488.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(near\050) 114 469.98 T
10 F
(e) 135.01 469.98 T
(xpr) 138.82 469.98 T
(ession) 150.49 469.98 T
5 F
(\051) 172.99 469.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BOOL) 195 469.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(true) 240 469.98 T
2 F
( if the argument is on the same cluster as the executing thread. If) 255.51 469.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the argument is) 240 458.98 T
5 F
(void) 297.74 458.98 T
2 F
( or an immutable type, it returns) 314.25 458.98 T
5 F
(false) 432.24 458.98 T
2 F
(.) 451.25 458.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(far\050) 114 439.98 T
10 F
(e) 127.5 439.98 T
(xpr) 131.32 439.98 T
(ession) 142.98 439.98 T
5 F
(\051) 165.48 439.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BOOL) 195 439.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(true) 240 439.98 T
2 F
( if the argument is not on the same cluster as the executing thread.) 255.51 439.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(If the argument is) 240 428.98 T
5 F
(void) 305.99 428.98 T
2 F
( or an immutable type, it returns) 322.49 428.98 T
5 F
(false) 440.48 428.98 T
2 F
(.) 459.49 428.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(clusters) 114 409.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(INT) 195 409.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Number of clusters. Although a constant, may not be available at com-) 240 409.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pile time.) 240 398.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(clusters!) 114 379.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(INT) 195 379.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Iterator which returns all cluster ids in order,) 240 379.98 T
5 F
(0) 403.21 379.98 T
2 F
( through) 408.22 379.98 T
5 F
(clusters-1) 440.72 379.98 T
2 F
(.) 479.72 379.98 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(Example:) 108 303.29 T
1 1 0 0 0 0 1 K
306 295.95 504 315.95 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(with able, baker near ... end) 342 303.95 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
108 553.98 108 373.98 2 L
V
2 H
N
189 555.98 189 371.98 2 L
V
0.5 H
N
234 555.98 234 371.98 2 L
V
N
504 553.98 504 373.98 2 L
V
2 H
N
107 554.98 505 554.98 2 L
V
N
107 530.98 505 530.98 2 L
V
N
107 511.98 505 511.98 2 L
V
0.5 H
N
107 481.98 505 481.98 2 L
V
N
107 451.98 505 451.98 2 L
V
N
107 421.98 505 421.98 2 L
V
N
107 391.98 505 391.98 2 L
V
N
107 372.98 505 372.98 2 L
V
2 H
N
0 0 0 1 0 0 0 K
217.65 254.06 226.51 265.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 215.62 257.28 T
0 0 0 1 0 0 0 K
0 0 612 792 C
202.11 224.06 210.91 235.04 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(\336) 200.02 227.29 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 85
%%Page: "86" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
4 10 Q
0 X
(86) 108 709.51 T
0 F
(Distributed Extension) 270.9 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
4 11 Q
0 X
(Locality examples) 108 658.67 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(This code cr) 108 630.33 T
(eates a object and then inserts) 161.11 630.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(it into a table, taking car) 108 618.33 T
(e that the insertion) 214.43 618.33 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(code r) 108 606.33 T
(uns at the same cluster as the table.) 135.17 606.33 T
1 1 0 0 0 0 1 K
306 599 504 643 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(table.insert\050#FOO\051) 342 621 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(@where\050table\051;) 379.8 611 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.22 (To make sure the object is at the same clus-) 108 574.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(ter as the table, one could write) 108 562.33 T
1 1 0 0 0 0 1 K
306 555 504 587 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(loc: := where\050table\051;) 342 575 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(table.insert\050#FOO @ loc\051 @ loc;) 342 565 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
(or, equivalently:) 108 530.33 T
1 1 0 0 0 0 1 K
306 504 504 543 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(fork @ where\050table\051;) 342 531 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(table.insert\050#FOO\051) 354.6 521 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 511 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 10 Q
0.7 (This code recursively copies only that por-) 108 479.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.78 (tion of a binary tree which is near.  Notice) 108 467.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1.63 (that \324) 108 455.33 P
5 F
1.81 (near) 132.25 455.33 P
1 F
1.63 (\325 returns) 152.26 455.33 P
5 F
1.81 (false) 195.33 455.33 P
1 F
1.63 ( if its argument is) 216.45 455.33 P
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
5 F
(void) 108 443.33 T
1 F
(.) 126.34 443.33 T
1 1 0 0 0 0 1 K
306 413 504 492 R
6 X
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
5 9 Q
0 X
0 0 0 1 0 0 0 K
(near_copy:NODE is) 342 480 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(if near\050self\051 then return) 354.6 470 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(#NODE\050lchild.near_copy,) 367.2 460 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(   rchild.near_copy\051) 392.4 450 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(else) 354.6 440 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(return self) 373.61 440 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 354.6 430 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
(end) 342 420 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 86
%%Page: "87" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Index) 108 676 T
108 675 504 675 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 7 Q
0 X
(-- \050comment definition\051) 108 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 183.15 661.33 T
(- \050sugar for minus\051) 108 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 168.99 653.33 T
(- \050sugar for negate\051) 108 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 169.96 645.33 T
(! in iters) 108 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 135.96 637.33 T
(#) 108 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 114.5 629.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 121.5 629.33 T
0 0 0 1 0 0 0 K
1 7 Q
(64) 127.5 629.33 T
(#ROUT See bound routines) 108 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 195.83 621.33 T
($ in abstract class names) 108 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 186.54 613.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 193.54 613.33 T
0 0 0 1 0 0 0 K
1 7 Q
(23) 199.54 613.33 T
($ATTACH) 108 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 144.76 605.33 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 151.76 605.33 T
0 0 0 1 0 0 0 K
1 7 Q
(79) 157.76 605.33 T
($COPY) 108 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 133.86 597.33 T
($HASH) 108 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 135.27 589.33 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 142.27 589.33 T
0 0 0 1 0 0 0 K
1 7 Q
(66) 148.27 589.33 T
($IS_EQ) 108 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 133.81 581.33 T
($LOCK classes) 108 573.33 T
(See locking and lock) 117 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 183.2 565.33 T
($NIL) 108 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 126.95 557.33 T
($OB) 108 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 124.28 549.33 T
(as default type bound) 117 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 187.72 541.33 T
(% \050sugar for mod\051) 108 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 167.34 533.33 T
(* \050sugar for times\051) 108 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 166.72 525.33 T
(+) 108 517.33 T
(See plus) 117 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 145.56 509.33 T
(/ \050sugar for divide\051) 108 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 171.35 501.33 T
(/= \050sugar for is_neq\051) 108 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 175.51 493.33 T
(:- See attach) 108 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 147.71 485.33 T
(:: See double colon calls) 108 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 183.98 477.33 T
(::=) 108 469.33 T
(and array literals) 117 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 172.75 461.33 T
(as declarative asignment) 117 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 196.5 453.33 T
(< \050sugar for is_lt\051) 108 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 164.24 445.33 T
(<= \050sugar for is_leq\051) 108 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 173.48 437.33 T
(= \050sugar for is_eq\051) 108 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 167.2 429.33 T
(= sugar for is_eq) 108 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 162.53 421.33 T
(-> \050feature renaming\051) 108 413.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 177.42 413.33 T
(> \050sugar for is_gt\051) 108 405.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 166.1 405.33 T
(>= \050sugar for is_geq\051) 108 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 175.33 397.33 T
(@ See \324at operator\325) 108 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 168.05 389.33 T
(^ \050sugar for pow\051) 108 381.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 165.29 381.33 T
(~ \050sugar for not\051) 108 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 161.6 373.33 T
(\324e\325 \050floating point exponent\051) 108 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 197.33 365.33 T
(\324is_\325 routines) 108 357.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 150.67 357.33 T
(\324while\325 in other languages) 108 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 191.32 349.33 T
(0b integer binary prefix) 108 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 183.82 341.33 T
(0o integer literal prefix) 108 333.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 181.64 333.33 T
(0x integer literal prefix) 108 325.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 181.43 325.33 T
108 297.98 228 301 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 299.49 540 299.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(A) 108 304.33 T
1 7 Q
(abstract classes) 108 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 157.93 291.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 164.93 291.31 T
0 0 0 1 0 0 0 K
1 7 Q
(20) 170.93 291.31 T
(example) 117 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 146.24 283.31 T
(lexical structure of name) 117 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 196.16 275.31 T
(separate subtyping) 117 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 179.12 267.31 T
(syntax and definition) 117 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 186 259.31 T
-0.06 (See also subtyping, conformance) 117 251.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (23) 221 251.31 P
(abstract methods) 108 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 163.98 243.31 T
(conformance of signatures) 117 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 201.85 235.31 T
(example) 117 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 146.24 227.31 T
(signatures) 117 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 152.06 219.31 T
(abstract signatures) 108 211.31 T
(See abstract methods) 117 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 185.11 203.31 T
(abstract types) 108 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 153.73 195.31 T
(naming) 117 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 143.76 187.31 T
(See also conformance) 117 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 186.35 179.31 T
(accepting of guards) 108 171.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 171.84 171.31 T
(accessing beyond array bounds) 108 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 208.2 163.31 T
(aclear) 108 155.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 129.26 155.31 T
(acquiring a lock) 108 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 160.41 147.31 T
(actors) 108 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 129.45 139.31 T
(aelt!) 108 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 124.12 131.31 T
(aget) 108 123.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 124.03 123.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 131.03 123.31 T
0 0 0 1 0 0 0 K
1 7 Q
(50) 137.03 123.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 144.03 123.31 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 150.03 123.31 T
(renaming example) 117 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 177.87 115.31 T
(sugar definition) 255 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 307.42 661.33 T
(aind!) 246 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 264.83 653.33 T
(alert character) 246 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 293.14 645.33 T
(aliased objects) 246 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 293.46 637.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 300.46 637.33 T
0 0 0 1 0 0 0 K
1 7 Q
(26) 306.46 637.33 T
(and) 246 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 260.85 629.33 T
(syntax and example) 255 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 319.92 621.33 T
(ANSI C) 246 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 273.01 613.33 T
(applicative programming) 246 605.33 T
(using bound routines) 255 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 324.48 597.33 T
(AREF) 246 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 267.29 589.33 T
(access from C) 255 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 300.57 581.33 T
(example inclusion in ARRAY) 255 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 348.89 573.33 T
(include path for array portion) 255 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 350.52 565.33 T
(specifying array portion) 255 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 332.83 557.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 339.83 557.33 T
0 0 0 1 0 0 0 K
1 7 Q
(47) 345.83 557.33 T
(argc, Sather equivalent) 246 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 319.9 549.33 T
(argument evaluation) 246 541.33 T
(bound routines) 255 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 305.54 533.33 T
(in iterator calls) 255 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 304.07 525.33 T
(of array literal) 255 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 302.09 517.33 T
(order of method arguments) 255 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 343.61 509.33 T
(argv, Sather equivalent) 246 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 320.74 501.33 T
(arithmetic operators) 246 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 311.85 493.33 T
(ARRAY) 246 485.33 T
(class excerpt) 255 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 297.01 477.33 T
(creation from literal) 255 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 319.55 469.33 T
(example definition) 255 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 316.32 461.33 T
(inclusion from AREF) 255 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 323.27 453.33 T
(use for command line args) 255 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 340.23 445.33 T
(array) 246 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 265.42 437.33 T
(aelts!,aset!,ainds!) 255 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 310.44 429.33 T
(asize,aget,aset,aclear,acopy) 255 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 342.28 421.33 T
(creation example) 255 413.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 310.93 413.33 T
(data parallel example) 255 405.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 324.74 405.33 T
(definitions of AREF and AVAL) 255 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 354.81 397.33 T
(element assignment) 255 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 319.71 389.33 T
(Fortran) 255 381.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 281.1 381.33 T
(in value class) 255 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 299.26 373.33 T
(including AREF) 255 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 307.8 365.33 T
(memory allocation) 255 357.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 316.16 357.33 T
(objects with array portion) 255 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 337.95 349.33 T
(out of bounds errors) 255 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 321.4 341.33 T
(sugar for higher dimensions) 255 333.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 345.5 333.33 T
(use in constants) 255 325.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 307.23 325.33 T
(use of iterators) 255 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 303.97 317.33 T
(See also aset, aget) 255 309.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 312.84 309.33 T
(array_ptr) 246 301.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 278.18 301.33 T
(ASCII) 246 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 267.8 293.33 T
(aset) 246 285.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 261.1 285.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 268.1 285.33 T
0 0 0 1 0 0 0 K
1 7 Q
(36) 274.1 285.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 281.1 285.33 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 287.1 285.33 T
(renaming example) 255 277.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 315.87 277.33 T
(aset!) 246 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 263.05 269.33 T
(asize) 246 261.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 264.36 261.33 T
(in array example) 255 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 310.28 253.33 T
(assert statements) 246 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 301.83 245.33 T
(assertions) 246 237.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 279.74 237.33 T
(assignment) 246 229.33 T
(array elements) 255 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 303.77 221.33 T
(examples) 255 213.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 287.21 213.33 T
(illegal in typecase) 255 205.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 313.17 205.33 T
(syntactic sugar) 255 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 304.35 197.33 T
(syntax and description) 255 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 328.61 189.33 T
(at operator) 246 181.33 T
(syntax, description, example) 255 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 346.5 173.33 T
(atomic) 246 165.33 T
(acquisition of locks) 255 157.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 317.49 157.33 T
(execution of locking condition) 255 149.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 351.66 149.33 T
(ATTACH) 246 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 279.26 141.33 T
(attach) 246 133.33 T
(evaluation order) 255 125.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 309.51 125.33 T
(example of \325future\325) 255 117.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 316.96 117.33 T
(local variable copying) 393 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 464.05 661.33 T
(simple example) 393 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 444.78 653.33 T
(statement definition) 393 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 458.35 645.33 T
(testing \324no_threads\325) 393 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 457.14 637.33 T
(testing \324threads\325) 393 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 445.75 629.33 T
(attribute initialization) 384 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 454.6 621.33 T
(attributes) 384 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 416.56 613.33 T
(cycles of value types) 393 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 459.64 605.33 T
(declaration syntax) 393 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 452.83 597.33 T
(AVAL) 384 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 407.22 589.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 414.22 589.33 T
0 0 0 1 0 0 0 K
1 7 Q
(33) 420.22 589.33 T
(See also array) 393 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 438.63 581.33 T
384 553.98 504 557 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 555.49 816 555.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(B) 384 560.33 T
1 7 Q
(backslash) 384 547.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 416.92 547.31 T
(use in string literal escape) 393 539.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 476.17 539.31 T
(backslash literal) 384 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 436.68 531.31 T
(backspace literal) 384 523.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 438.27 523.31 T
(barrier synchronization See sync) 384 515.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 487.76 515.31 T
(bases for integer literals) 384 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 460.56 507.31 T
(Berkeley, University of California at) 384 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 498.48 499.31 T
(binary literals) 384 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 429.87 491.31 T
(binary tree) 384 483.31 T
(parallel copying example) 393 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 474.21 475.31 T
(blocking) 384 467.31 T
(of gate at dequeue) 393 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 452.91 459.31 T
(of gate for get) 393 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 438.88 451.31 T
(of par on cohort) 393 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 445.64 443.31 T
(using locks) 393 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 430.77 435.31 T
(See also threads) 393 427.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 445.43 427.31 T
(body thread) 384 419.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 424.86 419.31 T
(BOOL) 384 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 406.56 411.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 413.56 411.31 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 419.56 411.31 T
(literals) 393 403.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 416.98 403.31 T
(boolean literals) 384 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 434.21 395.31 T
(booleans) 384 387.31 T
(void value) 393 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 428.91 379.31 T
(See \325and\325 and \325or\325) 393 371.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 449.7 371.31 T
(bound routines) 384 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 434.54 363.31 T
(call) 393 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 406.68 355.31 T
(conformance example) 393 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 464.13 347.31 T
(contravariant conformance) 393 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 479.55 339.31 T
(creation) 393 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 420.94 331.31 T
(example of apply) 393 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 449.74 323.31 T
(inout arguments) 393 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 447.42 315.31 T
(leaving self unbound) 393 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 461.6 307.31 T
(supplying unbound arguments) 393 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 492.83 299.31 T
(syntax and description) 393 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 466.61 291.31 T
(type of unbound arguments) 393 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 482.93 283.31 T
(unbound arguments) 393 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 459.55 275.31 T
(use in call-backs) 393 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 446.51 267.31 T
(bound types) 384 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 425.72 259.31 T
(break! expressions) 384 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 444.2 251.31 T
(bugs) 384 243.31 T
(accessing beyond array bounds) 393 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 493.2 235.31 T
(crashing) 393 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 422.42 227.31 T
(dangling references) 393 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 456.96 219.31 T
(deadlock) 393 211.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 424.27 211.31 T
(fencepost errors) 393 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 445.69 203.31 T
(heisenbugs) 393 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 430.81 195.31 T
(incorrect synchronization) 393 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 475.09 187.31 T
(race conditions) 393 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 442.98 179.31 T
384 151.95 504 154.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 153.47 816 153.47 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(C) 384 158.31 T
1 7 Q
(C) 384 145.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 391.96 145.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 395.46 145.29 T
0 0 0 1 0 0 0 K
1 7 Q
(13) 401.46 145.29 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 408.46 145.29 T
0 0 0 1 0 0 0 K
1 7 Q
(14) 414.46 145.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 421.46 145.29 T
0 0 0 1 0 0 0 K
1 7 Q
(16) 427.46 145.29 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 434.46 145.29 T
0 0 0 1 0 0 0 K
1 7 Q
(17) 440.46 145.29 T
(accessing Sather arrays) 393 137.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 467.55 137.29 T
(and garbage collection) 393 129.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 465.8 129.29 T
(calling Sather) 393 121.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 438.08 121.29 T
(constants in Sather) 393 113.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 454.34 113.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 87
%%Page: "88" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Index) 108 676 T
108 675 504 675 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 7 Q
0 X
(interface to headers) 117 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 180.7 661.33 T
(interface to structs) 117 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 177 653.33 T
(interfacing to possible macros) 117 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 212.41 645.33 T
(C types) 108 637.33 T
(Sather equivalents) 117 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 177.1 629.33 T
(C++) 108 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 124.45 621.33 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 127.95 621.33 T
0 0 0 1 0 0 0 K
1 7 Q
(12) 133.95 621.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 140.95 621.33 T
0 0 0 1 0 0 0 K
1 7 Q
(16) 146.95 621.33 T
(C_header) 108 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 140.79 613.33 T
(C_name) 108 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 136.57 605.33 T
(call See bound routines) 108 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 183.1 597.33 T
(call by value See in mode) 108 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 189.39 589.33 T
(call-backs using bound routines) 108 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 209.58 581.33 T
(carriage return literal) 108 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 176.89 573.33 T
(case) 108 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 123.93 565.33 T
(example) 117 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 146.24 557.33 T
(statement syntax) 117 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 172.35 549.33 T
(when clauses) 117 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 161.24 541.33 T
(case\050lexical\051) 108 533.33 T
(uppercase class names) 117 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 189.84 525.33 T
(Cecil) 108 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 126.5 517.33 T
(CHAR) 108 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 131.91 509.33 T
(char) 108 501.33 T
(Sather equivalent of C type) 117 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 204.23 493.33 T
(character literals) 108 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 162.18 485.33 T
(specifying special characters) 117 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 208.03 477.33 T
(child thread) 108 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 148.53 469.33 T
(location, status) 117 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 166.4 461.33 T
(See also threads and fork) 117 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 197.59 453.33 T
(Class calls See double colon calls) 108 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 212.31 445.33 T
( class constants) 108 437.33 T
(See constants) 117 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 161.21 429.33 T
(class elements) 108 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 154.93 421.33 T
(class invariants See invariant) 108 413.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 200.63 413.33 T
(class names) 108 405.33 T
(length restrictions) 117 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 175.92 397.33 T
(lexical restrictions) 117 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 175.9 389.33 T
(class variables See shareds) 108 381.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 193.1 381.33 T
(classes) 108 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 131.9 373.33 T
(syntax, examples) 117 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 173.04 365.33 T
(See abstract, reference, value, par-) 117 357.33 T
(tial) 153 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 165.86 349.33 T
(CLOS) 108 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 129.42 341.33 T
(closure) 108 333.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 133.27 333.33 T
(closures) 108 325.33 T
(relation to bound routines) 117 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 201.01 317.33 T
(See also bound routines) 117 309.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 193.74 309.33 T
(CLU) 108 301.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 125.69 301.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 129.19 301.33 T
0 0 0 1 0 0 0 K
1 7 Q
(16) 135.19 301.33 T
(cluster id) 108 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 139.8 293.33 T
(location expression) 117 285.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 179.59 285.33 T
(cluster model) 108 277.33 T
(cluster id) 117 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 148.8 269.33 T
(clusters) 108 261.33 T
(location expression) 117 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 179.59 253.33 T
(clusters!) 108 245.33 T
(location expression) 117 237.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 179.59 237.33 T
(Code inclusion) 108 229.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 157.54 229.33 T
(code inclusion) 108 221.33 T
(examples) 117 213.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 149.21 213.33 T
(separation from subtyping) 117 205.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 202.55 205.33 T
(See also include clauses) 117 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 193.22 197.33 T
(cohort) 108 189.33 T
(blocking of par termination) 117 181.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 205.01 181.33 T
(co-location) 108 173.33 T
(example) 117 165.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 146.24 165.33 T
(with-near assertion) 117 157.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 179.77 157.33 T
(co-location See near) 108 149.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 172.52 149.33 T
(comments) 108 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 142.97 141.33 T
(Common Lisp) 108 133.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 155.28 133.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 158.78 133.33 T
0 0 0 1 0 0 0 K
1 7 Q
(16) 164.78 133.33 T
(compiler) 108 125.33 T
(early versions) 117 117.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 163.24 117.33 T
(obtaining) 255 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 287.59 661.33 T
(pSather) 255 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 281.86 653.33 T
(complex) 246 645.33 T
(Fortran arrays of) 255 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 310.14 637.33 T
(Sather equivalent for Fortran) 255 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 347.65 629.33 T
(complex numbers) 246 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 304.5 621.33 T
(complex, value class example) 246 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 340.21 613.33 T
(concrete signatures) 246 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 308.67 605.33 T
(concrete types) 246 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 293.32 597.33 T
(concurrent execution) 246 589.33 T
(See threads, par and fork) 255 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 335.48 581.33 T
(signatures) 246 573.33 T
(See also conformance) 255 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 324.35 565.33 T
(conformance) 246 557.33 T
(bound routine example) 255 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 330.56 549.33 T
(contravariance) 255 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 303.84 541.33 T
(of bound routines) 255 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 313.44 533.33 T
(rules) 255 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 273.34 525.33 T
(conjunction. See and) 246 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 312.74 517.33 T
(constants) 246 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 278.08 509.33 T
(arrays) 255 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 277.39 501.33 T
(examples) 255 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 287.21 493.33 T
(relationship to C constants) 255 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 340.55 485.33 T
(syntax and description) 255 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 328.61 477.33 T
(constructors. See also create) 246 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 335.25 469.33 T
(containers) 246 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 280.98 461.33 T
(use of iters) 255 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 291.6 453.33 T
(contains) 246 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 274.86 445.33 T
(in array example) 255 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 310.28 437.33 T
(contravariance) 246 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 294.84 429.33 T
(See also conformance) 255 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 324.35 421.33 T
(conventions, creation) 246 413.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 315.01 413.33 T
(conventions, naming) 246 405.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 313.83 405.33 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 320.83 405.33 T
0 0 0 1 0 0 0 K
1 7 Q
(65) 326.83 405.33 T
(conventions, subtyping) 246 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 321.51 397.33 T
(conversion, with create) 246 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 320.82 389.33 T
(conversions) 246 381.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 285.95 381.33 T
($COPY) 246 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 271.86 373.33 T
(copy) 246 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 264.03 365.33 T
(copying) 246 357.33 T
(of binary tree in parallel) 255 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 332.59 349.33 T
(of local variables at attach) 255 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 338.17 341.33 T
(of local variables in threads) 255 333.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 342.97 333.33 T
(CPX) 246 325.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 262.86 325.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 269.86 325.33 T
0 0 0 1 0 0 0 K
1 7 Q
(27) 275.86 325.33 T
(why a value type) 255 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 311.35 317.33 T
(See also complex numbers) 255 309.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 339.71 309.33 T
(crashing) 246 301.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 275.42 301.33 T
(create) 246 293.33 T
(# sugar) 255 285.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 280.6 285.33 T
(in abstract signature) 255 277.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 320.98 277.33 T
(of a gate) 255 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 284.18 269.33 T
(specifying location) 255 261.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 316.33 261.33 T
(use with C structs) 255 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 313.58 253.33 T
(creation expressions) 246 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 311.82 245.33 T
(creation, object) 246 237.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 295.52 237.33 T
(creation, overloading) 246 229.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 314.98 229.33 T
(creation, sugar for) 246 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 305.45 221.33 T
(cursor objects) 246 213.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 291.44 213.33 T
(cycle) 246 205.33 T
(among constant initializers) 255 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 341.71 197.33 T
(in parametrization) 255 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 315.67 189.33 T
(of abstract types) 255 181.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 308.63 181.33 T
(of value type attributes) 255 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 329.76 173.33 T
246 145.98 366 149 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 147.49 678 147.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(D) 246 152.33 T
1 7 Q
(\324d\325 suffix. See floating point) 246 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 334.2 139.31 T
(dangling references) 246 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 309.96 131.31 T
(data parallel) 246 123.31 T
(multi-phase operation) 255 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 326.8 115.31 T
(parloop example) 393 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 448.35 661.33 T
(deadlock) 384 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 415.27 653.33 T
(prevention in locks) 393 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 455.36 645.33 T
(with RW_LOCK) 393 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 446.98 637.33 T
(declared type) 384 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 429.15 629.33 T
(defer) 384 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 403.08 621.33 T
(in pSather SYS class) 393 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 457.82 613.33 T
(dequeue) 384 605.33 T
(of gate queue) 393 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 437.75 597.33 T
(destructors. See also allocation) 384 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 481.74 589.33 T
(detach) 384 581.33 T
(See also attach) 393 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 440.95 573.33 T
(dining philosophers) 384 565.33 T
(example of locking) 393 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 454.76 557.33 T
(disabling checking) 384 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 444.98 549.33 T
(disjunction. See or) 384 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 443.76 541.33 T
(disjunctive lock) 384 533.33 T
(example) 393 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 422.24 525.33 T
(disjunctive locking. See locking) 384 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 484.05 517.33 T
(div) 384 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 397.27 509.33 T
(do) 384 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 395.1 501.33 T
(dollar sign \324$\325) 384 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 429.3 493.33 T
(dot product) 384 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 423.81 485.33 T
(double C type, Sather equivalent) 384 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 488.41 477.33 T
(double colon) 384 469.33 T
(calls) 393 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 409.65 461.33 T
(syntax and description) 393 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 466.61 453.33 T
(use in constants) 393 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 445.23 445.33 T
(double precision) 384 437.33 T
(Sather equivalent for Fortran) 393 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 485.65 429.33 T
(See also floating point) 393 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 464.36 421.33 T
(double quote literal) 384 413.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 447.69 413.33 T
(Dylan) 384 405.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 405.92 405.33 T
(dynamic dispatch) 384 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 442.27 397.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 449.27 397.33 T
0 0 0 1 0 0 0 K
1 7 Q
(44) 455.27 397.33 T
384 369.98 504 373 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 371.49 816 371.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(E) 384 376.33 T
1 7 Q
(efficiency of value class) 384 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 459.67 363.31 T
(Eiffel) 384 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 403.37 355.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 406.87 355.31 T
0 0 0 1 0 0 0 K
1 7 Q
(10) 412.87 355.31 T
(elements) 384 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 414.6 347.31 T
(else) 384 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 398.71 339.31 T
(in case statements) 393 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 451.78 331.31 T
(in exceptions) 393 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 436.68 323.31 T
(in lock statements) 393 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 451.71 315.31 T
(in with-near statements) 393 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 469.11 307.31 T
(elsif) 384 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 399.73 299.31 T
(elt!) 384 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 396.62 291.31 T
(empty \050gate method\051) 384 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 452.09 283.31 T
(encapsulation) 384 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 430.18 275.31 T
(enqueue into gate) 384 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 442.24 267.31 T
(enumeration types) 384 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 445.11 259.31 T
(errors) 384 251.31 T
(See fatal errors) 393 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 441.97 243.31 T
(evaluation order) 384 235.31 T
(of attach statement) 393 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 454.67 227.31 T
(of location expression) 393 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 463.49 219.31 T
(of lock statement) 393 211.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 448.79 211.31 T
(See also argument evaluation) 393 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 487.01 203.31 T
(examples) 384 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 416.21 195.31 T
(exception object) 384 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 436.67 187.31 T
(exceptional cases and locking) 384 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 478.24 179.31 T
(exceptions) 384 171.31 T
(choice of handler) 393 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 449.23 163.31 T
(exception object) 393 155.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 445.67 155.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 452.67 155.31 T
0 0 0 1 0 0 0 K
1 7 Q
(59) 458.67 155.31 T
(performance) 393 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 435.46 147.31 T
(protect statements) 393 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 452.81 139.31 T
(raised in lock body) 393 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 454.98 131.31 T
(raising an exception) 393 123.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 458.2 123.31 T
(syntax, description, examples) 393 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 487.47 115.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 88
%%Page: "89" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Index) 108 676 T
108 675 504 675 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 7 Q
0 X
(execution order) 108 661.33 T
(of pSather program) 117 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 180.64 653.33 T
(See also evaluation order) 117 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 197.72 645.33 T
(explicit placement) 108 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 167.52 637.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 171.02 637.33 T
0 0 0 1 0 0 0 K
1 7 Q
(14) 177.02 637.33 T
(See cluster model) 117 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 174.29 629.33 T
(exponent. See also floating point) 108 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 211.63 621.33 T
(export) 108 613.33 T
(by exclusive gate operations) 117 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 207.51 605.33 T
(explicit SYS call) 117 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 168.87 597.33 T
(table of occurences) 117 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 178.58 589.33 T
(expressions) 108 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 147.13 581.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 154.13 581.33 T
0 0 0 1 0 0 0 K
1 7 Q
(39) 160.13 581.33 T
(and) 117 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 131.85 573.33 T
(creation) 117 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 144.94 565.33 T
(exception) 117 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 149.85 557.33 T
(initial) 117 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 138 549.33 T
(literals) 117 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 140.98 541.33 T
(new) 117 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 133.26 533.33 T
(or) 117 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 126.59 525.33 T
(self) 117 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 130.69 517.33 T
(syntactic sugar) 117 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 166.35 509.33 T
(syntax) 117 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 140.33 501.33 T
(void tests) 117 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 149.69 493.33 T
(while!) 117 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 139.29 485.33 T
(external C types) 108 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 161.14 477.33 T
(C_name, C_header) 117 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 178.86 469.33 T
(external calls into Sather) 108 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 186.74 461.33 T
(external classes) 108 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 158.63 453.33 T
(in include clause) 117 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 171.9 445.33 T
(interfacing to other languages) 117 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 212.54 437.33 T
(syntax) 117 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 140.33 429.33 T
(external types) 108 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 154.43 421.33 T
108 393.98 228 397 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 395.49 540 395.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(F) 108 400.33 T
1 7 Q
(fairness) 108 387.31 T
(and lock statement) 117 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 178.49 379.31 T
(false) 108 371.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 125.19 371.31 T
(far) 108 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 119.6 363.31 T
(location expression table) 117 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 196.38 355.31 T
(fatal errors) 108 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 144.84 347.31 T
(assertion returns false) 117 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 187.89 339.31 T
(avoiding void accesses) 117 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 190.51 331.31 T
(bad unlock) 117 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 154.55 323.31 T
(disabling checking) 117 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 177.98 315.31 T
(failed invariant) 117 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 167.51 307.31 T
(in with-near statements) 117 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 193.11 299.31 T
(missing else in lock) 117 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 180.09 291.31 T
(missing else in typecase) 117 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 193.89 283.31 T
(out of range cluster id) 117 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 188.11 275.31 T
(typecase with no else) 117 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 185.75 267.31 T
(uncaught exception in thread) 117 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 210.83 259.31 T
(uncaught exceptions) 117 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 183.94 251.31 T
(features) 108 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 135.77 243.31 T
(fencepost errors) 108 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 160.69 235.31 T
(finalization) 108 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 146.23 227.31 T
(finalize) 108 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 133.87 219.31 T
(float C type, Sather equivalent) 108 211.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 204.8 211.31 T
(floating point) 108 203.31 T
(\324d\325 suffix and example) 117 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 189.01 195.31 T
(\324e\325 exponent) 117 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 157.77 187.31 T
(FLT, FLTD, FLTI) 117 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 172.16 179.31 T
(literal syntax and description) 117 171.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 210.37 171.31 T
(literals example) 117 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 168.97 163.31 T
(void value) 117 155.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 152.91 155.31 T
(FLT, FLTD, FLTI) 108 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 163.16 147.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 170.16 147.31 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 176.16 147.31 T
(conversion to INT) 117 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 176.05 139.31 T
(See also floating point) 117 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 188.35 131.31 T
(fork) 108 123.31 T
(and iterators) 117 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 159.38 115.31 T
(and unlock) 255 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 292.76 661.33 T
(child thread location,status) 255 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 341.94 653.33 T
(exceptions in body) 255 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 316.29 645.33 T
(extended example) 255 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 314.57 637.33 T
-0.08 (guarantee of completion in par) 255 629.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (73) 353.14 629.33 P
0 0 0 1 0 0 0 K
3 12 Q
-0.14 (,) 360.14 629.33 P
0 0 0 1 0 0 0 K
1 7 Q
(79) 291 621.33 T
(implicit in parloop) 255 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 315.9 613.33 T
(local variables) 255 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 302.24 605.33 T
(location examples) 255 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 313.64 597.33 T
(quit,yield or return) 255 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 317.35 589.33 T
(specifying location) 255 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 316.33 581.33 T
(syntax,description,example) 255 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 343 573.33 T
(See also par and threads) 255 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 333.25 565.33 T
(forking) 246 557.33 T
(See threads, par and fork) 255 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 335.48 549.33 T
(form feed character literal) 246 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 329.13 541.33 T
(Fortran) 246 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 272.1 533.33 T
(array types) 255 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 292.87 525.33 T
(Fortran 90) 255 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 289.85 517.33 T
(Fortran types) 255 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 299.55 509.33 T
(frobnify) 246 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 274.12 501.33 T
(FRW_LOC) 246 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 282.81 493.33 T
(function pointer) 246 485.33 T
(Sather equivalent) 255 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 312.13 477.33 T
(See also bound routine) 255 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 328.78 469.33 T
(fundamental typing rule) 246 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 325.09 461.33 T
(FUTURE) 246 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 277.03 453.33 T
(future example \050See also gates\051) 246 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 344.78 445.33 T
246 417.98 366 421 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 419.49 678 419.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(G) 246 424.33 T
1 7 Q
(garbage collection) 246 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 305.2 411.31 T
(and C routines) 255 403.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 303.84 403.31 T
(See also allocation) 255 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 314.43 395.31 T
(gates) 246 387.31 T
(dequeue) 255 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 284.7 379.31 T
(empty) 255 371.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 277.92 371.31 T
(enqueue) 255 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 284.49 363.31 T
(example of future) 255 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 313.07 355.31 T
(get) 255 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 267.53 347.31 T
(locked status) 255 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 298.46 339.31 T
(locking) 255 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 280.86 331.31 T
(not_empty) 255 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 291.59 323.31 T
(set) 255 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 266.6 315.31 T
(table of operations) 255 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 315.53 307.31 T
(testing of no_threads) 255 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 323.16 299.31 T
(testing of threads) 255 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 311.76 291.31 T
(thread detachment) 255 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 316.48 283.31 T
(unlocked) 255 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 286.78 275.31 T
(gcc) 246 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 259.11 267.31 T
(get) 246 259.31 T
(example usage) 255 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 303.93 251.31 T
(of gate queue) 255 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 299.75 243.31 T
(global variables) 246 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 297.89 235.31 T
(See also double colon calls) 255 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 339.8 227.31 T
(grammar rules) 246 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 294.88 219.31 T
(graph) 246 211.31 T
(edges! iterator) 255 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 302.35 203.31 T
(graph classes) 246 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 290.09 195.31 T
(guard) 246 187.31 T
(accepting) 255 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 287.56 179.31 T
(example) 255 171.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 284.24 171.31 T
(syntax, use in lock) 255 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 314.84 163.31 T
246 135.95 366 138.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 137.47 678 137.47 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(H) 246 142.31 T
1 7 Q
(has_thread) 246 129.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 283.29 129.29 T
($HASH) 246 121.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 273.27 121.29 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 280.27 121.29 T
0 0 0 1 0 0 0 K
1 7 Q
(66) 286.27 121.29 T
(hash) 246 113.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 263.62 113.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 270.62 113.29 T
0 0 0 1 0 0 0 K
1 7 Q
(66) 276.62 113.29 T
(hash tables) 384 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 421.38 661.33 T
(hashing) 384 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 411.62 653.33 T
(heisenbugs) 384 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 421.81 645.33 T
(here) 384 637.33 T
(location expression table) 393 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 472.38 629.33 T
(hexadecimal literals) 384 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 448.76 621.33 T
(higher-order function) 384 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 454.21 613.33 T
(holding a lock) 384 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 431.07 605.33 T
(hot arguments) 384 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 432.16 597.33 T
384 569.98 504 573 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 571.49 816 571.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(I) 384 576.33 T
1 7 Q
(ICSI \050International Computer Science) 384 563.31 T
(Institute\051) 420 555.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 451.19 555.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 454.69 555.31 T
0 0 0 1 0 0 0 K
1 7 Q
(13) 460.69 555.31 T
(ID) 384 547.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 394.78 547.31 T
(identifiers) 384 539.31 T
(length restrictions) 393 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 451.92 531.31 T
(lexical structure) 393 523.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 445.4 523.31 T
(IEEE 754-1985) 384 515.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 430.77 515.31 T
(exception flags) 393 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 442.33 507.31 T
(Sather conformance) 393 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 457.54 499.31 T
(if statement) 384 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 423.39 491.31 T
(immutable) 384 483.31 T
(value object) 393 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 432.89 475.31 T
(implementation inheritance. See in-) 384 467.31 T
(clude clauses) 420 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 463.9 459.31 T
(implicit calls) 384 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 426.33 451.31 T
(reader for shareds) 393 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 452.34 443.31 T
(reader routine) 393 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 440.32 435.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 447.32 435.31 T
0 0 0 1 0 0 0 K
1 7 Q
(30) 453.32 435.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 460.32 435.31 T
0 0 0 1 0 0 0 K
1 7 Q
(33) 466.32 435.31 T
(reader routine example) 393 427.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 468.31 427.31 T
(writer routine) 393 419.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 439.34 419.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 446.34 419.31 T
0 0 0 1 0 0 0 K
1 7 Q
(30) 452.34 419.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 459.34 419.31 T
0 0 0 1 0 0 0 K
1 7 Q
(33) 465.34 419.31 T
(writer routine example) 393 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 467.34 411.31 T
(implicit reader. See implicit calls) 384 403.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 487.65 403.31 T
(implicit routines. See implicit calls) 384 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 493.15 395.31 T
(implicit type coercion) 384 387.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 454.25 387.31 T
(implicit type declaration) 384 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 462.92 379.31 T
(import) 384 371.31 T
(by exclusive gate operations) 393 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 483.51 363.31 T
(explicit SYS call) 393 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 444.87 355.31 T
(table of conditions) 393 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 453.2 347.31 T
(in) 384 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 393.11 339.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 400.11 339.31 T
0 0 0 1 0 0 0 K
1 7 Q
(32) 406.11 339.31 T
(argument evaluation) 393 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 460.8 331.31 T
(in iterator calls) 393 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 442.07 323.31 T
(include clauses) 384 315.31 T
(example) 393 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 422.24 307.31 T
(external classes) 393 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 443.63 299.31 T
(include path) 393 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 434.92 291.31 T
(multiple includes) 393 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 450.18 283.31 T
(separation from subtyping) 393 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 478.55 275.31 T
(syntax and description) 393 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 466.61 267.31 T
(syntax,example,definition) 393 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 476.39 259.31 T
(include files. See C header) 384 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 468.25 251.31 T
(include path) 384 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 425.92 243.31 T
(infinite loop and consistency) 384 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 475.9 235.31 T
(infinite precision integers See INTI) 384 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 494.53 227.31 T
(infix operators) 384 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 432.33 219.31 T
(See also operators) 393 211.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 451.69 211.31 T
(inheritance) 384 203.31 T
-0.39 (separate subtyping and inclusion) 393 195.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (11) 497 195.31 P
(See subtyping, include clauses) 393 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 490.09 187.31 T
(initial expressions) 384 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 442.88 179.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 449.88 179.31 T
0 0 0 1 0 0 0 K
1 7 Q
(60) 455.88 179.31 T
(initialization) 384 171.31 T
(defaults for constants) 393 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 462.46 163.31 T
(dependancies among constants) 393 155.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 492.63 155.31 T
(errors in loops) 393 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 440.9 147.31 T
(inlined_C) 384 139.31 T
(dealing with possible macros) 393 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 486.26 131.31 T
(inout) 384 123.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 403.44 123.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 410.44 123.31 T
0 0 0 1 0 0 0 K
1 7 Q
(52) 416.44 123.31 T
(and Fortran interface) 393 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 461.25 115.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 89
%%Page: "90" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Index) 108 676 T
108 675 504 675 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 7 Q
0 X
(argument evaluation) 117 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 184.8 661.33 T
(assignment after quit) 117 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 185.52 653.33 T
(assignment after yield) 117 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 188.66 645.33 T
(conformance in signatures) 117 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 201.81 637.33 T
(in bound routines) 117 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 175.4 629.33 T
(in C interface) 117 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 161.38 621.33 T
(in iterator calls) 117 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 166.07 613.33 T
(specification in bound type) 117 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 204.22 605.33 T
(use in swap routine) 117 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 180.97 597.33 T
(insert) 108 589.33 T
(into gate queue) 117 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 167.81 581.33 T
(INT) 108 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 123.47 573.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 130.47 573.33 T
0 0 0 1 0 0 0 K
1 7 Q
(29) 136.47 573.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 143.47 573.33 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 149.47 573.33 T
(example iterators) 117 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 173.77 565.33 T
(iterators) 117 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 145.77 557.33 T
(literal instantiation) 117 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 178.73 549.33 T
(integer) 108 541.33 T
(different bases) 117 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 165.21 533.33 T
(infinite precision literals) 117 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 195.07 525.33 T
(literals) 117 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 140.98 517.33 T
(range) 117 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 137.58 509.33 T
(Sather equivalent for Fortran) 117 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 209.65 501.33 T
(void value) 117 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 152.91 493.33 T
(See also INT and INTI) 117 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 188.85 485.33 T
(interface) 108 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 137.8 477.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 144.8 477.33 T
0 0 0 1 0 0 0 K
1 7 Q
(19) 150.8 477.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 157.8 477.33 T
0 0 0 1 0 0 0 K
1 7 Q
(21) 163.8 477.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 170.8 477.33 T
0 0 0 1 0 0 0 K
1 7 Q
(28) 176.8 477.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 183.8 477.33 T
0 0 0 1 0 0 0 K
1 7 Q
(31) 189.8 477.33 T
(International Computer Science Insti-) 108 469.33 T
(tute) 144 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 159.14 461.33 T
(International Computer Science Insti-) 108 453.33 T
(tute, See ICSI) 144 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 188.12 445.33 T
(INTI) 108 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 125.83 437.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 132.83 437.33 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 138.83 437.33 T
(literal instantiation) 117 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 178.73 429.33 T
(intialization) 108 421.33 T
(enumeration types) 117 413.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 178.11 413.33 T
(invariant) 108 405.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 139.22 405.33 T
(definition) 117 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 150.32 397.33 T
($IS_EQ) 108 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 133.81 389.33 T
(is_eq) 108 381.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 126.78 381.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 133.78 381.33 T
0 0 0 1 0 0 0 K
1 7 Q
(50) 139.78 381.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 146.78 381.33 T
0 0 0 1 0 0 0 K
1 7 Q
(63) 152.78 381.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 159.78 381.33 T
0 0 0 1 0 0 0 K
1 7 Q
(65) 165.78 381.33 T
(use by case statement) 117 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 186.76 373.33 T
(is_geq) 108 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 130.67 365.33 T
(is_gt) 108 357.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 125.68 357.33 T
(is_leq) 108 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 128.82 349.33 T
(is_lt) 108 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 123.82 341.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 130.82 341.33 T
0 0 0 1 0 0 0 K
1 7 Q
(63) 136.82 341.33 T
(is_neq) 108 333.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 130.85 333.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 137.85 333.33 T
0 0 0 1 0 0 0 K
1 7 Q
(50) 143.85 333.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 150.85 333.33 T
0 0 0 1 0 0 0 K
1 7 Q
(65) 156.85 333.33 T
(is_nil) 108 325.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 127.65 325.33 T
(is_prime) 108 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 138.05 317.33 T
(ISO-Latin-1) 108 309.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 146.87 309.33 T
(iteration. See iterators) 108 301.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 178.56 301.33 T
(iterators) 108 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 136.77 293.33 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 143.77 293.33 T
0 0 0 1 0 0 0 K
1 7 Q
(12) 149.77 293.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 156.77 293.33 T
0 0 0 1 0 0 0 K
1 7 Q
(19) 162.77 293.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 169.77 293.33 T
0 0 0 1 0 0 0 K
1 7 Q
(21) 175.77 293.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 182.77 293.33 T
0 0 0 1 0 0 0 K
1 7 Q
(65) 188.77 293.33 T
(and location expressions) 117 285.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 196.16 285.33 T
(built-in break!) 117 277.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 163.97 277.33 T
(built-in until!) 117 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 161.24 269.33 T
(built-in while!) 117 261.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 163.93 261.33 T
(calls) 117 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 133.65 253.33 T
(defining) 117 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 146.07 245.33 T
(example definition) 117 237.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 178.32 237.33 T
(example of use) 117 229.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 166.44 229.33 T
(in typecases) 117 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 157.49 221.33 T
(lexical structure of name) 117 213.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 196.16 213.33 T
(loop statement) 117 205.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 165.91 205.33 T
(once argument evaluation) 117 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 200.91 197.33 T
(quit definition) 117 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 164.53 189.33 T
(rationale and history) 117 181.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 184.56 181.33 T
(rules of usage) 117 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 162.93 173.33 T
(teriminating lock) 117 165.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 173.12 165.33 T
(termination by quit) 117 157.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 180.13 157.33 T
(upto!) 117 149.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 136.48 149.33 T
(use in fork or par) 117 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 173.52 141.33 T
(use with containers) 117 133.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 180.26 133.33 T
(yield statements) 117 125.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 170.59 125.33 T
(yield within protect) 117 117.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 181.26 117.33 T
(iterators, naming) 246 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 302.03 661.33 T
246 633.98 366 637 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 635.49 678 635.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(K) 246 640.33 T
1 7 Q
(Karla) 246 627.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 265.88 627.31 T
(Karlsruhe) 246 619.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 279.77 619.31 T
(keywords, list of) 246 611.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 300.53 611.31 T
246 583.95 366 586.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 585.46 678 585.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(L) 246 590.31 T
1 7 Q
(length, restrictions on identifiers) 246 577.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 349.58 577.29 T
(lingua-franca, iterators as) 246 569.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 327.86 569.29 T
(Lisp) 246 561.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 262.49 561.29 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 265.99 561.29 T
0 0 0 1 0 0 0 K
1 7 Q
(10) 271.99 561.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 278.99 561.29 T
0 0 0 1 0 0 0 K
1 7 Q
(16) 284.99 561.29 T
(lists, use of iterators) 246 553.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 310.76 553.29 T
(literal expressions) 246 545.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 304.89 545.29 T
(literals) 246 537.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 269.98 537.29 T
(arbitrary character) 255 529.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 315.58 529.29 T
(array) 255 521.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 274.42 521.29 T
(boolean) 255 513.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 282.48 513.29 T
(character) 255 505.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 286.45 505.29 T
(declared type) 255 497.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 300.15 497.29 T
(floating point) 255 489.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 300.15 489.29 T
(integers) 255 481.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 282.72 481.29 T
(binary) 264 473.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 287.14 473.29 T
(hex) 264 465.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 278.04 465.29 T
(octal) 264 457.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 281.75 457.29 T
(strings) 255 449.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 278.99 449.29 T
(octal characters) 264 441.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 314.92 441.29 T
(local variables) 246 433.29 T
(accessing) 255 425.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 287.01 425.29 T
(and sync) 255 417.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 285.64 417.29 T
(declaration) 255 409.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 292.76 409.29 T
(declaration and assignment) 255 401.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 343.43 401.29 T
(evaluation in attach) 255 393.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 319.14 393.29 T
(initialization) 255 385.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 297.26 385.29 T
(inter-thread sharing error) 255 377.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 337.37 377.29 T
(passing to C macro) 255 369.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 317.34 369.29 T
(scope) 255 361.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 275.46 361.29 T
(shadowing) 255 353.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 292.48 353.29 T
(sharing by threads) 255 345.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 315.79 345.29 T
(sharing by threads example) 255 337.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 343.79 337.29 T
(locality) 246 329.29 T
(examples) 255 321.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 287.21 321.29 T
(location) 246 313.29 T
(of created object) 255 305.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 308.36 305.29 T
(of object) 255 297.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 283.98 297.29 T
($LOCK classes) 246 289.29 T
(See locking and lock) 255 281.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 321.2 281.29 T
(lock) 246 273.29 T
(and guard) 255 265.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 290.26 265.29 T
(and yield statement) 255 257.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 319.22 257.29 T
(aquisition) 255 249.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 288.9 249.29 T
(atomic aquisition) 255 241.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 311.58 241.29 T
(exceptions) 255 233.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 290.82 233.29 T
(execution order) 255 225.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 306.59 225.29 T
(holding by thread) 255 217.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 313.73 217.29 T
(multiple lock acquisition) 255 209.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 334.72 209.29 T
(nesting and deadlock) 255 201.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 324.3 201.29 T
(release by thread) 255 193.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 310.84 193.29 T
(releasing of locks) 255 185.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 311.46 185.29 T
(role in thread blocking) 255 177.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 328.32 177.29 T
(syntax,description,example) 255 169.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 343 169.29 T
(terminating actions) 255 161.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 318.02 161.29 T
(lock branch. See also locking) 246 153.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 337.57 153.29 T
(locking) 246 145.29 T
(and fairness) 255 137.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 295.6 137.29 T
(and starvation) 255 129.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 302.79 129.29 T
(concept) 255 121.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 281.95 121.29 T
(deadlock prevention) 255 113.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 321.94 113.29 T
(defer) 393 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 412.08 661.33 T
(extended examples) 393 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 455.54 653.33 T
(MUTEX) 393 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 421.3 645.33 T
(of gate during attach) 393 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 460.44 637.33 T
(of gates) 393 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 419.9 629.33 T
(RW_LOCK) 393 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 431 621.33 T
(locking conditions) 384 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 444.11 613.33 T
(locus of control) 384 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 434.72 605.33 T
(logical) 384 597.33 T
(Sather equivalent for Fortran) 393 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 485.65 589.33 T
(logical, Fortran boolean type) 384 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 475.75 581.33 T
(long C types, Sather equivalent) 384 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 483.62 573.33 T
(loop) 384 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 400.89 565.33 T
(pSather parloop) 393 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 445.97 557.33 T
(quit statement) 393 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 440.48 549.33 T
(statement description) 393 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 462.95 541.33 T
(termination) 393 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 432.41 533.33 T
(termination by quit) 393 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 456.13 525.33 T
(See also iterators) 393 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 447.98 517.33 T
(looping) 384 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 410.89 509.33 T
(loops in other languages) 384 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 462.95 501.33 T
384 473.98 504 477 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 475.49 816 475.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(M) 384 480.33 T
1 7 Q
(macro, class parameters as) 384 467.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 469.3 467.31 T
(macros) 384 459.31 T
(in C) 393 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 408.82 451.31 T
(mailing list) 384 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 421.83 443.31 T
(MAIN) 384 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 407.24 435.31 T
(main) 384 427.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 402.79 427.31 T
(fixed status) 393 419.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 431.58 419.31 T
(gate attachment) 393 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 445.41 411.31 T
(manual deallocation \050See also alloca-) 384 403.31 T
(tion\051) 420 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 437.55 395.31 T
(matrices) 384 387.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 413.19 387.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 420.19 387.31 T
0 0 0 1 0 0 0 K
1 7 Q
(14) 426.19 387.31 T
(Memory) 384 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 413.64 379.31 T
( memory allocation) 384 371.31 T
(See object allocation) 393 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 458.17 363.31 T
(memory consistency) 384 355.31 T
(definition,examples) 393 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 457.29 347.31 T
(during attach) 393 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 437.76 339.31 T
(gate imports/exports) 393 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 462.29 331.31 T
(threads and shared variables) 393 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 485.24 323.31 T
(memory model) 384 315.31 T
(See cluster model) 393 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 450.29 307.31 T
(method calls) 384 299.31 T
(evaluation order) 393 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 447.51 291.31 T
(method calls. See also routines) 384 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 481.62 283.31 T
(methods) 384 275.31 T
(See also routines, iterators) 393 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 477 267.31 T
(signatures) 393 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 428.06 259.31 T
(minus) 384 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 406.48 251.31 T
(mixins) 384 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 407.91 243.31 T
(See also partial classes and stubs) 393 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 496.85 235.31 T
(ML) 384 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 397.9 227.31 T
(mod) 384 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 401.28 219.31 T
(mode) 384 211.31 T
(conformance in bound routines) 393 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 493.29 203.31 T
(conformance rule) 393 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 450.26 195.31 T
(in routine and iter definitions) 393 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 487.24 187.31 T
(table of modes) 393 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 441.3 179.31 T
(Modula-3) 384 171.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 417.31 171.31 T
(multiple acquisition of lock) 384 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 471.62 163.31 T
(multiple classes) 384 155.31 T
(per source file) 393 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 439.82 147.31 T
( multiple inheritance) 384 139.31 T
(See include clauses, subtyping) 393 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 490.09 131.31 T
(multiple return values) 384 123.31 T
(and out arguments) 393 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 454.91 115.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 90
%%Page: "91" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Index) 108 676 T
108 675 504 675 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 7 Q
0 X
(See TUP) 117 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 146.1 661.33 T
(MUTEX) 108 653.33 T
(philosophers example) 117 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 188.33 645.33 T
(MUTEX. See locks) 108 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 167.76 637.33 T
108 609.98 228 613 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 611.49 540 611.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(N) 108 616.33 T
1 7 Q
(NaN) 108 603.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 126.13 603.31 T
(near) 108 595.31 T
(between object and thread) 117 587.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 201.55 587.31 T
(examples) 117 579.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 149.21 579.31 T
(location expression table) 117 571.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 196.38 571.31 T
(See also with-near statement) 117 563.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 208.49 563.31 T
(negate) 108 555.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 131.45 555.31 T
(nesting of lock statements) 108 547.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 191.18 547.31 T
(new) 108 539.31 T
(location of object) 117 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 172.41 531.31 T
(syntax, description, example) 117 523.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 208.5 523.31 T
(newline character literal) 108 515.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 185.73 515.31 T
(newsgroup) 108 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 146.14 507.31 T
($NIL) 108 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 126.95 499.31 T
(nil) 108 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 119.15 491.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 126.15 491.31 T
0 0 0 1 0 0 0 K
1 7 Q
(67) 132.15 491.31 T
(no_threads, in gate protocol) 108 483.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 197.62 483.31 T
(not) 108 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 121.18 475.31 T
(Not a Number) 108 467.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 156.13 467.31 T
(not_empty gate method) 108 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 185.11 459.31 T
(numbers, void \050unassigned\051 value) 108 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 216.62 451.31 T
108 423.95 228 426.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 425.46 540 425.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(O) 108 430.31 T
1 7 Q
($OB) 108 417.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 124.28 417.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 131.28 417.29 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 137.28 417.29 T
(Oberon) 108 409.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 134.39 409.29 T
(object allocation) 108 401.29 T
(manual deallocation) 117 393.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 183.11 393.29 T
(new) 117 385.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 133.26 385.29 T
(object creation) 108 377.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64) 155.76 377.29 T
(Objective C) 108 369.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 146.81 369.29 T
(objects) 108 361.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 132.04 361.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 139.04 361.29 T
0 0 0 1 0 0 0 K
1 7 Q
(20) 145.04 361.29 T
(aliased) 117 353.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 141.67 353.29 T
(cluster location) 117 345.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 167.17 345.29 T
(location examples) 117 337.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 175.64 337.29 T
(location when created) 117 329.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 188.16 329.29 T
(reference) 117 321.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 148.46 321.29 T
(value. See also value class) 117 313.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 200.17 313.29 T
(octal digits) 108 305.29 T
(in character literals) 117 297.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 179.04 297.29 T
(octal integer literals) 108 289.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 171.98 289.29 T
(once) 108 281.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 125.36 281.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 132.36 281.29 T
0 0 0 1 0 0 0 K
1 7 Q
(51) 138.36 281.29 T
(example usage in upto!) 117 273.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 192.02 273.29 T
(syntax, definition and example) 117 265.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 215.75 265.29 T
(operator definitions) 108 257.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 172.56 257.29 T
(operator precedence) 108 249.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 174.22 249.29 T
(optimizations) 108 241.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 153.75 241.29 T
(or) 108 233.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 117.59 233.29 T
(syntax definition) 117 225.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 172.4 225.29 T
(order of evaluation) 108 217.29 T
(See argument evaluation) 117 209.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 196.93 209.29 T
(order of execution) 108 201.29 T
(of pSather) 117 193.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 151.76 193.29 T
(out) 108 185.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 121.32 185.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 128.32 185.29 T
0 0 0 1 0 0 0 K
1 7 Q
(32) 134.32 185.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 141.32 185.29 T
0 0 0 1 0 0 0 K
1 7 Q
(52) 147.32 185.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 154.32 185.29 T
0 0 0 1 0 0 0 K
1 7 Q
(55) 160.32 185.29 T
(and multiple return values) 117 177.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 202.95 177.29 T
(argument assignment) 117 169.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 187.35 169.29 T
(arguments in bound routines) 117 161.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 210.38 161.29 T
(assignment after quit) 117 153.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 185.52 153.29 T
(assignment after yield) 117 145.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 188.66 145.29 T
(edges! iterator of graph) 117 137.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 192.44 137.29 T
(in C interface) 117 129.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 161.38 129.29 T
(in iterator calls) 117 121.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 166.07 121.29 T
(overloading) 108 113.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 148.53 113.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 155.53 113.29 T
0 0 0 1 0 0 0 K
1 7 Q
(21) 161.53 113.29 T
(disambiguation in bound routines) 255 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 291 653.33 T
(example of conflict) 255 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 316.7 645.33 T
(of class names) 255 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 302.31 637.33 T
(rules) 255 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 273.34 629.33 T
246 601.98 366 605 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 603.49 678 603.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(P) 246 608.33 T
1 7 Q
(par) 246 595.31 T
(and iterators) 255 587.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 297.38 587.31 T
(and unlock) 255 579.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 292.76 579.31 T
(exceptions in body) 255 571.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 316.29 571.31 T
(exports and imports) 255 563.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 320.62 563.31 T
(extended example) 255 555.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 314.57 555.31 T
(quit,yield or return) 255 547.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 317.35 547.31 T
(syntax, description, example) 255 539.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 346.5 539.31 T
(termination) 255 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 294.41 531.31 T
(parallel Sather) 246 523.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 293.83 523.31 T
(parallel search) 246 515.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 293.95 515.31 T
(parameters) 246 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 283.87 507.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 290.87 507.31 T
0 0 0 1 0 0 0 K
1 7 Q
(26) 296.87 507.31 T
(as structured macro) 255 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 319.59 499.31 T
(parametrization) 246 491.31 T
(class name overloading) 255 483.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 330.72 483.31 T
(compile time resolution) 255 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 331.48 475.31 T
(cycles of parameters) 255 467.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 320.99 467.31 T
(efficiency) 255 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 287.62 459.31 T
(of abstract classes) 255 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 312.83 451.31 T
(type relations) 255 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 300.32 443.31 T
(See also type constraint clause) 255 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 351.54 435.31 T
(parloop) 246 427.31 T
(as syntactic sugar) 255 419.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 312.57 419.31 T
(example with locking) 255 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 324.84 411.31 T
(extended example) 255 403.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 314.57 403.31 T
(specifying location) 255 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 316.33 395.31 T
(syntax,definition,example) 255 387.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 338.39 387.31 T
(partial classes) 246 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 291.98 379.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 298.98 379.31 T
0 0 0 1 0 0 0 K
1 7 Q
(26) 304.98 379.31 T
(example of mixin) 255 371.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 311.84 371.31 T
(stub example) 255 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 299.33 363.31 T
(stubs) 255 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 274.31 355.31 T
(partial order, of pSather execution) 246 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 354.93 347.31 T
(Pascal) 246 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 268.34 339.31 T
(placement) 246 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 281.1 331.31 T
(plus) 246 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 262.43 323.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 269.43 323.31 T
0 0 0 1 0 0 0 K
1 7 Q
(50) 275.43 323.31 T
(post. See postconditions) 246 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 323.69 315.31 T
(postconditions) 246 307.31 T
(as safety feature) 255 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 308.1 299.31 T
(example) 255 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 284.24 291.31 T
(explanation of post) 255 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 317.43 283.31 T
(in iterators) 255 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 291.64 275.31 T
(initial) 255 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 276 267.31 T
(result) 255 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 275.63 259.31 T
(syntax and definition) 255 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 324 251.31 T
(See also preconditions) 255 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 327.03 243.31 T
(pow) 246 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 262.87 235.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 269.87 235.31 T
0 0 0 1 0 0 0 K
1 7 Q
(50) 275.87 235.31 T
(pre. See preconditions) 246 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 317.78 227.31 T
(precedence of operators) 246 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 323.09 219.31 T
(preconditions) 246 211.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 291.83 211.31 T
(checking in iterators) 255 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 320.92 203.31 T
(example) 255 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 284.24 195.31 T
(explanation of pre) 255 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 314.48 187.31 T
(syntax and definition) 255 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 324 179.31 T
(predicates) 246 171.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 280.85 171.31 T
(preemption, of thread by defer) 246 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 344.28 163.31 T
(priority) 246 155.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 272.81 155.31 T
(private) 246 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 271.1 147.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 278.1 147.31 T
0 0 0 1 0 0 0 K
1 7 Q
(30) 284.1 147.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 291.1 147.31 T
0 0 0 1 0 0 0 K
1 7 Q
(33) 297.1 147.31 T
(and readonly) 255 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 299.32 139.31 T
(attributes) 255 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 287.56 131.31 T
(changing on include) 255 123.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 321.15 123.31 T
(effect on interface) 255 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 312.96 115.31 T
(example of include) 393 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 455 661.33 T
(in include syntax) 393 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 449.05 653.33 T
(in iter syntax) 393 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 436.38 645.33 T
(routines) 393 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 421.52 637.33 T
(use with shareds) 393 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 448.18 629.33 T
(process) 384 621.33 T
(See threads) 393 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 431.35 613.33 T
(processor) 384 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 416.78 605.33 T
(processor number. See cluster id) 384 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 487.42 597.33 T
(producers) 384 589.33 T
(threads as) 393 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 427.44 581.33 T
(protect) 384 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 408.82 573.33 T
(yield statements) 393 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 446.59 565.33 T
(protect statements) 384 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 443.81 557.33 T
(pSather) 384 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 410.86 549.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 414.36 549.33 T
0 0 0 1 0 0 0 K
1 7 Q
(13) 420.36 549.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 427.36 549.33 T
0 0 0 1 0 0 0 K
1 7 Q
(68) 433.36 549.33 T
(ptrdiff_t C type, Sather equivalent) 384 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 492.84 541.33 T
(public. See also private) 384 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 458.29 533.33 T
384 505.98 504 509 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 507.49 816 507.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(Q) 384 512.33 T
1 7 Q
(quit) 384 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 399.46 499.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 406.46 499.31 T
0 0 0 1 0 0 0 K
1 7 Q
(51) 412.46 499.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 419.46 499.31 T
0 0 0 1 0 0 0 K
1 7 Q
(61) 425.46 499.31 T
(example usage) 393 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 441.93 491.31 T
(in par or fork) 393 483.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 437.23 483.31 T
(syntax definition) 393 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 448.4 475.31 T
(quote marks in character literals) 384 467.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 486.45 467.31 T
384 439.95 504 442.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 441.46 816 441.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(R) 384 446.31 T
1 7 Q
(race conditions) 384 433.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 433.98 433.29 T
(example) 393 425.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 422.24 425.29 T
(raise) 384 417.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 401.62 417.29 T
(syntax definition) 393 409.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 448.4 409.29 T
(reader method, of RW_LOCK) 384 401.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 479.15 401.29 T
(reader routine. See implicit calls) 384 393.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 486.27 393.29 T
(reader-writer locks) 384 385.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 445.96 385.29 T
(reader-writer. See RW_LOCK) 384 377.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 479.02 377.29 T
(readonly) 384 369.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 414.72 369.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 421.72 369.29 T
0 0 0 1 0 0 0 K
1 7 Q
(30) 427.72 369.29 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 434.72 369.29 T
0 0 0 1 0 0 0 K
1 7 Q
(31) 440.72 369.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 447.72 369.29 T
0 0 0 1 0 0 0 K
1 7 Q
(33) 453.72 369.29 T
(use with shareds) 393 361.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 448.18 361.29 T
(real) 384 353.29 T
(Sather equivalent for Fortan) 393 345.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 482.88 345.29 T
(recursion) 384 337.29 T
(and lock acquisition) 393 329.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 458.22 329.29 T
(reference classes) 384 321.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 438.11 321.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 445.11 321.29 T
0 0 0 1 0 0 0 K
1 7 Q
(26) 451.11 321.29 T
(reference objects) 384 313.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 438.25 313.29 T
(reference types) 384 305.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 433.91 305.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 440.91 305.29 T
0 0 0 1 0 0 0 K
1 7 Q
(26) 446.91 305.29 T
(variable of) 393 297.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 428.92 297.29 T
(releasing a lock) 384 289.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 434.84 289.29 T
(renaming) 384 281.29 T
(example) 393 273.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 422.24 273.29 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 429.24 273.29 T
0 0 0 1 0 0 0 K
1 7 Q
(34) 435.24 273.29 T
(See also include clauses) 393 265.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 469.22 265.29 T
(reserved names) 384 257.29 T
(AREF) 393 249.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 414.29 249.29 T
(MAIN) 393 241.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 416.24 241.29 T
(main) 393 233.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 411.79 233.29 T
(TUP) 393 225.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 409.96 225.29 T
(result) 384 217.29 T
(example in routine) 393 209.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 454.41 209.29 T
(example of use) 393 201.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 442.44 201.29 T
(syntax, description, example) 393 193.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 484.5 193.29 T
(use in post) 393 185.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 429.43 185.29 T
(return) 384 177.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 406.46 177.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 413.46 177.29 T
0 0 0 1 0 0 0 K
1 7 Q
(35) 419.46 177.29 T
(in par or fork) 393 169.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 437.23 169.29 T
(statement definition) 393 161.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 458.35 161.29 T
(syntax and description) 393 153.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 466.61 153.29 T
(type of) 393 145.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 417.64 145.29 T
(value returned) 393 137.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 441.91 137.29 T
(See also result and initial) 393 129.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 473.19 129.29 T
(return value) 384 121.29 T
(and GATE) 393 113.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 428.96 113.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 91
%%Page: "92" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Index) 108 676 T
108 675 504 675 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 7 Q
0 X
(type restrictions) 117 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 169.95 661.33 T
(ROUT) 108 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 130.91 653.33 T
(routine calls) 108 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 148.95 645.33 T
(routines) 108 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 136.52 637.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 143.52 637.33 T
0 0 0 1 0 0 0 K
1 7 Q
(21) 149.52 637.33 T
(bound) 117 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 140.26 629.33 T
(syntax,description,example) 117 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 205 621.33 T
-0.25 (runaway thread, disjunctive locks and) 108 613.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 144 605.33 T
(runtime system) 108 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 159.31 597.33 T
(RW_LOCK) 108 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 146 589.33 T
(deadlock) 117 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 148.27 581.33 T
(example) 117 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 146.24 573.33 T
(reader, writer methods) 117 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 191.26 565.33 T
108 537.98 228 541 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 539.49 540 539.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(S) 108 544.33 T
1 7 Q
(safety features) 108 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 155.85 531.31 T
(SAIL) 108 523.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 126.76 523.31 T
(SAME) 108 515.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 131.02 515.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 138.02 515.31 T
0 0 0 1 0 0 0 K
1 7 Q
(24) 144.02 515.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 151.02 515.31 T
0 0 0 1 0 0 0 K
1 7 Q
(26) 157.02 515.31 T
(in include clause) 117 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 171.9 507.31 T
(Sather tower) 108 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 150.46 499.31 T
(Sather-K) 108 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 138.06 491.31 T
(scheduling) 108 483.31 T
(and fairness) 117 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 157.6 475.31 T
(thread preemption) 117 467.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 178.28 467.31 T
(Scheme) 108 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 134.74 459.31 T
(School) 108 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 131.54 451.31 T
(scope) 108 443.31 T
(class names and parameters) 117 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 206.63 435.31 T
(feature names) 117 427.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 163.63 427.31 T
(local variables) 117 419.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 164.24 419.31 T
(method arguments) 117 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 178.98 411.31 T
(search) 108 403.31 T
(parallel example) 117 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 171.43 395.31 T
(self) 108 387.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 121.69 387.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 128.69 387.31 T
0 0 0 1 0 0 0 K
1 7 Q
(47) 134.69 387.31 T
(calls on) 117 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 143.3 379.31 T
(in class calls) 117 371.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 157.84 371.31 T
(use as a bound argument) 117 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 198.04 363.31 T
(Self \050language\051) 108 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 157.28 355.31 T
(semicolons, optional when trailing) 108 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 218.11 347.31 T
(serial Sather) 108 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 149.06 339.31 T
($SET) 108 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 126.74 331.31 T
(set!) 108 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 121.55 323.31 T
(set, gate method) 108 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 161.87 315.31 T
(setjmp) 108 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 131.63 307.31 T
(sets) 108 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 122.57 299.31 T
(shadowing See scope) 108 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 176.82 291.31 T
(shared) 108 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 131.94 283.31 T
(reader, writer routines) 117 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 189.82 275.31 T
(shared attribute definition) 108 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 192.35 267.31 T
(shared memory) 108 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 159.88 259.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 163.38 259.31 T
0 0 0 1 0 0 0 K
1 7 Q
(14) 169.38 259.31 T
(and cluster model) 117 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 175.76 251.31 T
(sharing of variables between threads) 108 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 144 235.31 T
(short C type, Sather equivalent) 108 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 206.74 227.31 T
( short-circuit evaluation) 108 219.31 T
(See \324and\325 ,\324or\325) 117 211.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 161.85 211.31 T
(signatures) 108 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 143.06 203.31 T
(abstract) 117 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 144.28 195.31 T
(concrete) 117 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 145.87 187.31 T
(conflict) 117 179.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 142.8 179.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 149.8 179.31 T
0 0 0 1 0 0 0 K
1 7 Q
(24) 155.8 179.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 162.8 179.31 T
0 0 0 1 0 0 0 K
1 7 Q
(33) 168.8 179.31 T
(See also conformance) 117 171.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 186.35 171.31 T
(signed C types) 108 163.31 T
(Sather equivalents) 117 155.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 177.1 155.31 T
(single precision. See floating point) 108 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 217.26 147.31 T
(single quote literal) 108 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 168.47 139.31 T
(size, gate method) 108 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 165.12 131.31 T
(size_t, Sather equivalent) 108 123.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 186.27 123.31 T
(Smalltalk) 108 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 140.14 115.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 143.64 115.31 T
0 0 0 1 0 0 0 K
1 7 Q
(10) 149.64 115.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 156.64 115.31 T
0 0 0 1 0 0 0 K
1 7 Q
(16) 162.64 115.31 T
(sort) 246 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 260.84 661.33 T
(source files) 246 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 283.71 653.33 T
(special characters, listing) 246 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 326.21 645.33 T
(speculative execution) 246 637.33 T
(example using gates) 255 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 320.93 629.33 T
(stack allocation) 246 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 296.72 621.33 T
(starvation and locking) 246 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 318.4 613.33 T
(statements) 246 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 282.24 605.33 T
(assert) 255 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 275.84 597.33 T
(else) 255 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 269.71 589.33 T
(elsif) 255 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 270.73 581.33 T
(fork) 255 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 270.81 573.33 T
(general syntax) 255 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 303.05 565.33 T
(if) 255 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 262.37 557.33 T
(lock) 255 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 270.86 549.33 T
(loops) 255 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 274.86 541.33 T
(par) 255 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 268.47 533.33 T
(protect) 255 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 279.82 525.33 T
(quit) 255 517.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 270.46 517.33 T
(raise) 255 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 272.62 509.33 T
(return) 255 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 277.46 501.33 T
(syntax) 255 493.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 278.33 493.33 T
(yield) 255 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 273.6 485.33 T
(static type safety) 246 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 300.74 477.33 T
(STR) 246 469.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 261.64 469.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 268.64 469.33 T
0 0 0 1 0 0 0 K
1 7 Q
(62) 274.64 469.33 T
(literal instantiation) 255 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 316.73 461.33 T
($STR) 246 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 265.14 453.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 272.14 453.33 T
0 0 0 1 0 0 0 K
1 7 Q
(27) 278.14 453.33 T
(str method) 246 445.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 282.75 445.33 T
(strings) 246 437.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 269.99 437.33 T
(literals) 255 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 278.98 429.33 T
(mutli-line) 255 421.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 288.59 421.33 T
(See also $STR, STR and str) 255 413.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 339.86 413.33 T
(C structs, interface from Sather) 246 405.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 344.86 405.33 T
(stub) 246 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 262.34 397.33 T
(See also partial classes) 255 389.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 327.19 389.33 T
(syntax and example) 255 381.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 319.92 381.33 T
(subtype) 246 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 273.79 373.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 280.79 373.33 T
0 0 0 1 0 0 0 K
1 7 Q
(20) 286.79 373.33 T
(See also conformance) 255 365.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 324.35 365.33 T
(subtyping) 246 357.33 T
(adding type-graph edges) 255 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 335.9 349.33 T
(and type graph edges) 255 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 325.12 341.33 T
(conflict example) 255 333.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 308.79 333.33 T
(definition) 255 325.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 288.32 325.33 T
(example) 255 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 284.24 317.33 T
(example subtype of $STR) 255 309.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 336.58 309.33 T
(syntax and example) 255 301.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 319.92 301.33 T
(See also abstract classes) 255 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 331.14 293.33 T
(sum!) 246 285.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 264.32 285.33 T
(summation) 246 277.33 T
(using an iterator) 255 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 309.07 269.33 T
(supertype) 246 261.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 280.25 261.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 287.25 261.33 T
0 0 0 1 0 0 0 K
1 7 Q
(20) 293.25 261.33 T
(supertyping clause) 246 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 307.83 253.33 T
(swap routine example) 246 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 317.81 245.33 T
(sync) 246 237.33 T
(exports and imports) 255 229.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 320.62 229.33 T
(syntax, description, example) 255 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 346.5 221.33 T
(synchronization) 246 213.33 T
(barrier) 255 205.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 279.06 205.33 T
(effect on order of execution) 255 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 342.65 197.33 T
(for inter-thread consistency) 255 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 343.2 189.33 T
(locks) 255 181.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 273.83 181.33 T
(syntactic sugar) 246 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 295.35 173.33 T
(aget) 255 165.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 271.03 165.33 T
(aset) 255 157.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 270.1 157.33 T
(definition and description) 255 149.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(49) 338.61 149.33 T
(parloop) 255 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 282.36 141.33 T
(plus) 255 133.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 271.43 133.33 T
(pow) 255 125.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 271.87 125.33 T
(syntax) 246 117.33 T
(conventions for specifying) 393 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 477.89 661.33 T
(of basic statements) 393 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 454.38 653.33 T
(SYS) 384 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 399.02 645.33 T
(inlined_C) 393 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 426.35 637.33 T
(table of pSather routines) 393 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 471.82 629.33 T
384 601.98 504 605 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
348 603.49 816 603.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 384 608.33 T
1 7 Q
(t1, t2 \050TUP attributes\051) 384 595.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 453.75 595.31 T
(tab character literal) 384 587.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 446.62 587.31 T
(templates, Sather equivalent) 384 579.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 474.79 579.31 T
(termination) 384 571.31 T
(of pSather program) 393 563.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 456.64 563.31 T
(of threads) 393 555.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 427.12 555.31 T
(test code) 384 547.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(65) 414.2 547.31 T
(testing for void) 384 539.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 434.4 539.31 T
(textual order) 384 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 427.02 531.31 T
(of guard evaluation) 393 523.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 457.09 523.31 T
(then) 384 515.31 T
(lock branch) 393 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 432 507.31 T
(threads) 384 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 410.22 499.31 T
(acquiring a lock) 393 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 445.41 491.31 T
(and IEEE exceptions) 393 483.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 459.36 483.31 T
(attachment to cohort) 393 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 460.11 475.31 T
(attachment to gates) 393 467.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 456.23 467.31 T
(barrier synchronization) 393 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 468.83 459.31 T
(blocking) 393 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 422.73 451.31 T
(body thread) 393 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 433.86 443.31 T
(child) 393 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 411.53 435.31 T
(child status,location) 393 427.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 457.94 427.31 T
(creation by fork) 393 419.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 445.01 419.31 T
(creation with fork) 393 411.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 451.48 411.31 T
(defer) 393 403.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 412.08 403.31 T
(description) 393 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 430.93 395.31 T
(external termination example) 393 387.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 487.13 387.31 T
(fixing examples) 393 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 444.94 379.31 T
(function in GATE) 393 371.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 450.92 371.31 T
(local variable sharing) 393 363.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 462.33 363.31 T
(lock holding) 393 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 434.82 355.31 T
(lock release) 393 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 431.94 347.31 T
(locking of gates) 393 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 444.51 339.31 T
(par and fork example) 393 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(74) 462.63 331.31 T
(preemption by \325defer\325) 393 323.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 463.52 323.31 T
(scheduling fairness) 393 315.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 455.79 315.31 T
(sharing variables) 393 307.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 449.05 307.31 T
(termination) 393 299.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 432.41 299.31 T
(testing absence) 393 291.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 442.86 291.31 T
(testing on gates) 393 283.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 444.28 283.31 T
(uncaught exceptions) 393 275.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 459.94 275.31 T
(unfixed main) 393 267.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 437.45 267.31 T
(with-near objects) 393 259.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 449.05 259.31 T
(times) 384 251.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 403.82 251.31 T
(tree classes) 384 243.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 421.4 243.31 T
(true) 384 235.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 399.62 235.31 T
(TUP) 384 227.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(62) 400.96 227.31 T
(type) 384 219.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 400.73 219.31 T
(implicit coercion) 393 211.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 447.77 211.31 T
(of Fortran arrays) 393 203.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 448.14 203.31 T
(of literals) 393 195.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 424.88 195.31 T
(of void) 393 187.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 417.99 187.31 T
-0.7 (type bounds. See type constraint clause) 384 179.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 420 171.31 T
(type casting) 384 163.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 424.35 163.31 T
(type constraint clause) 384 155.31 T
(concept) 393 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 419.95 147.31 T
(default of $OB) 393 139.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 440.93 139.31 T
(description) 393 131.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 430.93 131.31 T
(example of VIEWER) 393 123.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 459.54 123.31 T
(syntax) 393 115.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 416.33 115.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 92
%%Page: "93" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Index) 108 676 T
108 675 504 675 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
1 7 Q
0 X
(type graph) 108 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 144.92 661.33 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 151.92 661.33 T
0 0 0 1 0 0 0 K
1 7 Q
(26) 157.92 661.33 T
(bound routine edges) 117 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 184.16 653.33 T
(definition) 117 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 150.32 645.33 T
(no implicit relations between pa-) 117 637.33 T
(rametrizations) 153 629.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 201.07 629.33 T
(subtype clause edges) 117 621.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 185.32 621.33 T
(type inference) 108 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 154.93 613.33 T
(in array creation) 117 605.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 170.97 605.33 T
(in create expressions) 117 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 184.1 597.33 T
(type promotion) 108 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 159.5 589.33 T
(type specifier) 108 581.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 152.64 581.33 T
(bound routines) 117 573.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(56) 167.54 573.33 T
(syntax and examples) 117 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 184.89 565.33 T
(typecase) 108 557.33 T
(example) 117 549.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 146.24 549.33 T
(statement definition) 117 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 182.35 541.33 T
(with void object) 117 533.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 169.9 533.33 T
108 505.98 228 509 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 507.49 540 507.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(U) 108 512.33 T
1 7 Q
(unary negation) 108 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 158.24 499.31 T
(unassigned variables) 108 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 176.1 491.31 T
(unbound arguments) 108 483.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 174.55 483.31 T
(underflow) 108 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(67) 143.72 475.31 T
(underscores) 108 467.31 T
(in bound routines) 117 459.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 175.4 459.31 T
(in floating point literals) 117 451.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 192.74 451.31 T
(in integer literals) 117 443.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 172.35 443.31 T
(University of California at Berkeley) 108 435.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 220.73 435.31 T
(University of Karlsruhe) 108 427.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 184.23 427.31 T
(UNIX) 108 419.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 129.29 419.31 T
(unlock) 108 411.31 T
(and fork,par) 117 403.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 158.63 403.31 T
(exports and imports) 117 395.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(82) 182.62 395.31 T
(syntax,description,example) 117 387.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 205 387.31 T
(unlocked gate creation) 117 379.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 190.25 379.31 T
-0.39 (unsigned C types, Sather equivalent of) 108 371.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 144 363.31 T
(until! expressions) 108 355.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 165.47 355.31 T
(until...loop...end) 108 347.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 161.74 347.31 T
(upto!) 108 339.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 127.48 339.31 T
(user-interfaces and call-backs) 108 331.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 202.11 331.31 T
108 303.95 228 306.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 305.46 540 305.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(V) 108 310.31 T
1 7 Q
(value) 108 297.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 128.07 297.29 T
(value class) 108 289.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 144.4 289.29 T
(advantages) 117 281.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 155.3 281.29 T
(and array portion) 117 273.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 174.78 273.29 T
(attribute cycles) 117 265.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 166.81 265.29 T
(efficiency) 117 257.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 149.62 257.29 T
(nil) 117 249.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 128.15 249.29 T
(properties) 117 241.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 151.76 241.29 T
(simple example) 117 233.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 168.78 233.29 T
(stack allocation) 117 225.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 167.72 225.29 T
(syntax definition) 117 217.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 172.4 217.29 T
(unassigned object) 117 209.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 175.19 209.29 T
(value objects. See also value class) 108 201.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 213.96 201.29 T
(value types) 108 193.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 146.52 193.29 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 153.52 193.29 T
0 0 0 1 0 0 0 K
1 7 Q
(31) 159.52 193.29 T
(value, call by. See in mode) 108 185.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 192.89 185.29 T
(variables) 108 177.29 T
(type of) 117 169.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 141.64 169.29 T
(type within a typecase) 117 161.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 189.49 161.29 T
(vertical tab literal) 108 153.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 165.2 153.29 T
(void) 108 145.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 125.09 145.29 T
(and nil) 117 137.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 141.75 137.29 T
(calls on, See double colon) 117 129.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 199.12 129.29 T
(in constant initialization) 117 121.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 194.98 121.29 T
(testing for) 117 113.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 151.56 113.29 T
(type of) 255 661.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 279.64 661.33 T
(used in typecase) 255 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 309.09 653.33 T
(void C type, Sather equivalent) 246 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 342.92 645.33 T
(void test expressions) 246 637.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 313.6 637.33 T
246 609.98 366 613 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 611.49 678 611.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(W) 246 616.33 T
1 7 Q
(when) 246 603.31 T
(in case statements) 255 595.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 313.78 595.31 T
(in exceptions) 255 587.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(58) 298.68 587.31 T
(where) 246 579.31 T
(example) 255 571.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(86) 284.24 571.31 T
(location expression table) 255 563.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 334.38 563.31 T
(while!) 246 555.31 T
(definition) 255 547.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 288.32 547.31 T
(example of use) 255 539.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 304.44 539.31 T
(possible implementation) 255 531.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 334.43 531.31 T
(whitespace) 246 523.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 283.72 523.31 T
(between strings) 255 515.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 306.86 515.31 T
(with-near) 246 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(85) 279.25 507.31 T
(workstations, cluster model and) 246 499.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 348.51 499.31 T
(world-wide web) 246 491.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 300.39 491.31 T
0 0 0 1 0 0 0 K
3 12 Q
(\320) 307.39 491.31 T
0 0 0 1 0 0 0 K
1 7 Q
(12) 313.39 491.31 T
0 0 0 1 0 0 0 K
3 12 Q
(,) 320.39 491.31 T
0 0 0 1 0 0 0 K
1 7 Q
(15) 326.39 491.31 T
(WR_LOCK) 246 483.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 284 483.31 T
(writer method, of RW_LOCK) 246 475.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 340.18 475.31 T
246 447.95 366 450.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 449.46 678 449.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(X) 246 454.31 T
1 7 Q
(X_WIDGET example C interface) 246 441.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 349.11 441.29 T
246 413.93 366 416.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 415.44 678 415.44 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(Y) 246 420.29 T
1 7 Q
(yield) 246 407.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(61) 264.6 407.26 T
(example use in upto!) 255 399.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 322.62 399.26 T
(example use in while!) 255 391.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(54) 325.43 391.26 T
(execution description) 255 383.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 324.54 383.26 T
(in par or fork) 255 375.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 299.23 375.26 T
(not within lock) 255 367.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 304.88 367.26 T
(syntax,example,description) 255 359.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 343 359.26 T
(within protect) 255 351.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 301.91 351.26 T
(See also iterators) 255 343.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 309.98 343.26 T
(yielding a value) 246 335.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 298.67 335.26 T
246 307.9 366 310.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
210 309.42 678 309.42 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 10 Q
0 X
0 0 0 1 0 0 0 K
(Z) 246 314.26 T
1 7 Q
(zero) 246 301.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(66) 262.44 301.24 T
(zero, use in constants) 246 293.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 315.17 293.24 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 93
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 93
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Roman
%%+ Times-Roman
%%+ Times-Bold
%%+ Palatino-Bold
%%+ Helvetica
%%+ Palatino-BoldItalic
%%+ Symbol
%%+ AvantGarde-Demi
%%+ Helvetica-Oblique
%%+ Times-Italic
%%+ Helvetica-Narrow
%%EOF
