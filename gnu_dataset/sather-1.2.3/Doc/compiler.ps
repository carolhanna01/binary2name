%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 9 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Palatino-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(The Sather 1.0 Compiler) 283.83 709.51 T
1 F
(1) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
120.01 652.24 108 652.24 2 L
0 X
V
0.79 H
0 Z
N
1 18 Q
(T) 108 654 T
145.3 652.24 120.01 652.24 2 L
V
N
1 14.4 Q
(HE) 120.01 654 T
156.3 652.24 145.3 652.24 2 L
V
N
1 18 Q
(S) 145.3 654 T
167.5 652.24 156.3 652.24 2 L
V
N
1 14.4 Q
(A) 156.3 654 T
211.47 652.24 166.18 652.24 2 L
V
N
(THER) 166.18 654 T
238.47 652.24 211.47 652.24 2 L
V
N
1 18 Q
(1.0) 211.47 654 T
251.47 652.24 238.47 652.24 2 L
V
N
(C) 238.47 654 T
320.25 652.24 251.47 652.24 2 L
V
N
1 14.4 Q
(OMPILER) 251.47 654 T
2 10 Q
2.07 (This document is intended for the Sather user who is curious about the compiler or) 108 628.33 P
0.23 (wants to use some module of the compiler for their own purposes \050constr) 108 616.33 P
0.23 (ucting a br) 434.85 616.33 P
0.23 (ows-) 482.63 616.33 P
0.49 (er or pr) 108 604.33 P
0.49 (etty-printer) 141.92 604.33 P
0.49 (, for instance\051.  It is a r) 192.07 604.33 P
0.49 (ough map only) 292.92 604.33 P
0.49 (, intended to give you a starting) 360.25 604.33 P
(point for delving into the code yourself.) 108 592.33 T
1 11 Q
(A Brief History) 108 561.67 T
2 10 Q
0.51 (The initial Sather compiler \050for \322V) 108 544.33 P
0.51 (ersion 0\323 of the language\051 was written in Sather \050boot-) 260.04 544.33 P
1.2 (strapped by hand-translating to C\051 over the summer of 1990.  In June 1991, ICSI made) 108 532.33 P
1.79 (the language publicly available \050version 0.1\051.  The pr) 108 520.33 P
1.79 (oject has been snowballing since) 353.86 520.33 P
0.89 (then, with language updates to 0.2 and 0.5, each compiler bootstrapped fr) 108 508.33 P
0.89 (om the pr) 442.6 508.33 P
0.89 (evi-) 487.32 508.33 P
0.25 (ous.  These versions of the language ar) 108 496.33 P
0.25 (e most indebted to Steve Omohundr) 280.38 496.33 P
0.25 (o, Chu-cheow) 442.17 496.33 P
(Lim and Heinz Schmidt.) 108 484.33 T
-0.45 (Sather 1.0 was a major language change, introducing bound routines, iterators, proper sep-) 108 460.33 P
0.55 (aration of typing and code inclusion, contravariant typing, strongly typed parameteriza-) 108 448.33 P
1.81 (tion, exceptions, stronger optional runtime checks and a new library design.  The 1.0) 108 436.33 P
-0.3 (compiler was a completely fresh effort by Steve and David Stoutamire \050the author\051 written) 108 424.33 P
-0.6 (in 0.5 with the 1.0 features introduced as they became functional.  The 1.0 compiler was first) 108 412.33 P
(released in the summer of 1994, and Steve left the project shortly afterwards.) 108 400.33 T
-0.31 (The 0.x compilers were a blend of) 108 376.33 P
3 F
-0.34 (lex) 257.12 376.33 P
2 F
-0.31 (,) 269.9 376.33 P
3 F
-0.34 (yacc) 274.59 376.33 P
2 F
-0.31 (, C and Sather, not always a happy mix.  The 1.0) 295.15 376.33 P
-0.24 (compiler is entirely in Sather aside from a small runtime in C.  An  important lesson which) 108 364.33 P
-0.62 (we applied to the 1.0 compiler was that it can be bad software engineering to over-use poly-) 108 352.33 P
0.62 (morphism.  The 0.x compiler was written with a class for each construct with many dis-) 108 340.33 P
0.22 (patched methods corresponding to stages of compilation.  As a result, the code executing) 108 328.33 P
0.24 (for a given phase and its data dependencies were scattered all over the code and difficult) 108 316.33 P
0.88 (to find or change.  In the 1.0 compiler we tended to group the code more by functional) 108 304.33 P
(stage.) 108 292.33 T
0.9 (Both compilers compile through C code for portability, and this is a bottleneck. The 0.x) 108 268.33 P
0.28 (compilers generated all code for every possible routine, making a separate C file for each) 108 256.33 P
0.84 (class.  This way a parallel make utility can be used to recompile only the C code which) 108 244.33 P
-0.01 (changes from compile to compile very quickly.  The code which was emitted was unread-) 108 232.33 P
0.21 (able.  In the 1.0 compiler, only code which is reachable is generated.  C files are now gen-) 108 220.33 P
1.55 (erated which can contain multiple classes.  Instead of big global headers \050which force) 108 208.33 P
-0.17 (complete recompilation if, for example, object layouts change\051 each C file is given only the) 108 196.33 P
0.28 (header info it needs.  Human readable C structs are now used instead of numeric offsets,) 108 184.33 P
0.16 (which makes it feasible to debug Sather using) 108 172.33 P
3 F
0.18 (gdb) 314.08 172.33 P
2 F
0.16 ( - in fact, this is how compiler develop-) 330.77 172.33 P
(ment has taken place.) 108 160.33 T
0.53 (The 1.0 compiler is extremely easy to port because it generates portable ANSI C and has) 108 136.33 P
0.21 (very few Unix dependencies; if your machine can run) 108 124.33 P
3 F
0.24 (gcc) 349.52 124.33 P
2 F
0.21 (, you should be able to port the) 365.08 124.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
(2) 108 709.51 T
0 F
(The Sather 1.0 Compiler) 266.69 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 F
0 X
0.81 (compiler.  At the time of this writing it has been ported to the following systems, that I) 108 659.33 P
(know of:) 108 647.33 T
3 9 Q
(    SunOS 4.1.3) 129.6 620 T
(    SunOS 5.3) 129.6 610 T
(    Ultrix 4.3) 129.6 600 T
(    NetBSD 1.0) 129.6 590 T
(    NetBSD/i386 1.0a) 129.6 580 T
(    Linux 1.0.8) 129.6 570 T
(    SCO Unix 3.2.4) 129.6 560 T
(    SGI, IRIX 4.0.5H, IRIX 5.2) 129.6 550 T
(    Sony NEWSOS 4.1R) 129.6 540 T
(    MIPS RISC os 4.53C) 129.6 530 T
(    Alpha, DEC OSF/1 V2.0, V3.0, V3.2) 129.6 520 T
(    FreeBSD 1.1.5.1) 129.6 510 T
(    HPUX 8.07) 129.6 500 T
(    OS/2) 129.6 490 T
(    Mac \050Metrowerks v4.5, PPC\051) 129.6 480 T
2 10 Q
-0.1 (Sather is still growing rapidly.  Up to date information on Sather can be obtained from the) 108 457.33 P
(WWW page:) 108 445.33 T
3 9 Q
(http://www.icsi.berkeley.edu/Sather) 129.6 428 T
2 10 Q
-0.43 (The specification for Sather 1.1 is in progress.  It will be upward-compatible with Sather 1.0) 108 405.33 P
0.66 (code.  Likely improvements will be copy-out arguments, improved external classes, and) 108 393.33 P
(matrix classes using) 108 381.33 T
3 F
(BLAS) 199.03 381.33 T
2 F
(.  Sather 1.1 should be available this summer.) 224.6 381.33 T
-0.35 (Parallel Sather \050pSather\051 is a parallel version of the language, developed and in use at ICSI.) 108 357.33 P
0.03 (pSather addresses non-uniform-memory-access multiprocessor architectures but presents) 108 345.33 P
-0.58 (a shared memory model to the programmer.  It extends serial Sather with threads, synchro-) 108 333.33 P
-0.56 (nization and data distribution.  Unlike actor languages, multiple threads can execute in one) 108 321.33 P
0.49 (object.  A distinguished class) 108 309.33 P
3 F
0.55 (GATE) 240.6 309.33 P
2 F
0.49 ( combines various dependent low-level synchroniza-) 267.83 309.33 P
-0.44 (tion mechanisms efficiently: locks, futures, and conditions.  The new version of the pSather) 108 297.33 P
1.68 (compiler is being integrated into the serial Sather 1.0 compiler.  More information on) 108 285.33 P
(pSather is available at the WWW page.) 108 273.33 T
1 11 Q
(Obtaining and installing the compiler) 108 242.67 T
2 10 Q
(The ICSI Sather 1.0 compiler can be obtained by anonymous ftp at) 108 225.33 T
3 9 Q
(ftp.icsi.berkeley.edu:  /pub/sather) 129.6 208 T
2 10 Q
(These sites also mirror the Sather distribution:) 108 185.33 T
3 9 Q
(ftp.sterling.com:) 129.6 168 T
(/programming/languages/sather) 237.6 168 T
(ftp.uni-muenster.de:) 129.6 158 T
(/pub/languages/sather) 237.6 158 T
(maekong.ohm.york.ac.uk:) 129.6 148 T
(/pub/csp) 237.6 148 T
(ftp.th-darmstadt.de:) 129.6 138 T
(/pub/programming/languages/sather) 237.6 138 T
(ftp.sra.co.jp:) 129.6 128 T
(/pub/lang/sather) 237.6 128 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(The Sather 1.0 Compiler) 283.83 709.51 T
1 F
(3) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 F
0 X
0.19 (I am looking for reliable sites on other continents to mirror the Sather distribution and be) 108 659.33 P
(included in this FAQ.  If you can help with this, please send me mail.) 108 647.33 T
1 11 Q
(How do I ask questions?) 108 616.67 T
2 10 Q
0.27 (If it appears to be a pr) 108 599.33 P
0.27 (oblem that others would have encounter) 206.29 599.33 P
0.27 (ed \050on platform \324X\325, I tried) 386.79 599.33 P
(to install it but the it failed to link with the err) 108 587.33 T
(or \324Y\325\051, then the newsgr) 309.98 587.33 T
(oup) 413.53 587.33 T
3 9 Q
(comp.lang.sather) 129.6 570 T
2 10 Q
-0.09 (is a good place to ask.  If you have problems with the compiler or questions that are not of) 108 547.33 P
(general interest, mail to) 108 535.33 T
3 9 Q
(bug-sather@gnu.org) 129.6 518 T
2 10 Q
-0.38 (This is also where you want to send bug reports and suggestions for improvements.  If you) 108 495.33 P
-0.28 (are attempting to extend or reuse the compiler code and have trouble understanding some) 108 483.33 P
(aspect of its design, I\325ll be glad to help.) 108 471.33 T
108 422.98 504 426 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 424.49 540 424.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 -208 1000 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(General Or) 108 430 T
(ganization) 167.45 430 T
2 10 Q
-0.48 (There are many ways to look at a complex program such as the Sather compiler.  Tradition-) 108 402.31 P
0.06 (ally object-oriented programs get explained in terms of the their type structure, but this is) 108 390.31 P
0.45 (incomplete at best.  The compiler will be described in terms of a data-flow machine, as a) 108 378.31 P
0.13 (collection of classes, as stages of compilation that have an order, and finally the organiza-) 108 366.31 P
(tion of the classes into files.) 108 354.31 T
1 11 Q
(Data\337ow organization) 108 323.64 T
2 10 Q
(Conceptually) 108 306.31 T
(, the compiler translates thr) 166.17 306.31 T
(ough a series of r) 287.16 306.31 T
(epr) 362.51 306.31 T
(esentations:) 377.08 306.31 T
(1.) 108 284.31 T
(Sather command line, envir) 126 284.31 T
(onment variables and any commands \336les.  Fr) 247.93 284.31 T
(om this,) 451.25 284.31 T
(compilation options and a complete list of...) 126 272.31 T
(2.) 108 260.31 T
(Sather \336les, each a list of classes and types.  These ar) 126 260.31 T
(e r) 356.91 260.31 T
(ead by the scanner) 367.97 260.31 T
(...) 449.65 260.31 T
(3.) 108 248.31 T
(and become a sequence of annotated tokens.  These ar) 126 248.31 T
(e consumed by the parser) 364.25 248.31 T
(...) 476.92 248.31 T
(4.) 108 236.31 T
(which pr) 126 236.31 T
(oduces an Abstract Syntax tr) 165.61 236.31 T
(ee \050) 292.04 236.31 T
3 F
(AS) 307.45 236.31 T
2 F
(\051 for each class.  Fr) 320.79 236.31 T
(om these a complete) 402.07 236.31 T
(list of all types \050all parameterizations, etc.\051 is constr) 126 224.31 T
(ucted.  Fr) 352.18 224.31 T
(om this information...) 393.64 224.31 T
(5.) 108 212.31 T
-0.37 (the interfaces of all classes/types ar) 126 212.31 P
-0.37 (e constr) 281.24 212.31 P
-0.37 (ucted, and veri\336ed for conformance.  Once) 315.25 212.31 P
(this has been done it is possible to build...) 126 200.31 T
(6.) 108 188.31 T
(the implementations of each class; this is a \337attening of parameterizations and) 126 188.31 T
(includes \050specialization\051.  Now we ar) 126 176.31 T
(e r) 289.58 176.31 T
(eady to...) 300.64 176.31 T
(7.) 108 164.31 T
-0.14 (traverse the AST in the context of each class, checking the pr) 126 164.31 P
-0.14 (oper typing and building) 390.53 164.31 P
(the corr) 126 152.31 T
(esponding...) 159.99 152.31 T
(8.) 108 140.31 T
(Abstract Machine \050) 126 140.31 T
3 F
(AM) 210.03 140.31 T
2 F
(\051 r) 225.03 140.31 T
(epr) 234.63 140.31 T
(esentation.  As r) 249.2 140.31 T
(outines ar) 320.34 140.31 T
(e constr) 364.12 140.31 T
(ucted, they ar) 398.5 140.31 T
(e passed) 458.83 140.31 T
-0.1 (to an inliner) 126 128.31 P
-0.1 (, which may decide to r) 178.72 128.31 P
-0.1 (eplace r) 281.6 128.31 P
-0.1 (outine calls with inline code or to fold con-) 315.71 128.31 P
(stants, followed by the optimizer) 126 116.31 T
(.  All of this occurs as in-place manipulations of the) 270.97 116.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
(4) 108 709.51 T
0 F
(The Sather 1.0 Compiler) 266.69 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
3 F
0 X
(AM) 126 659.33 T
2 F
( form.  When all transformations ar) 141 659.33 T
(e complete, each r) 296.62 659.33 T
(outine is passed to the C) 375.72 659.33 T
(back-end which generates...) 126 647.33 T
(9.) 108 635.33 T
-0.17 (the code-\336le r) 126 635.33 P
-0.17 (epr) 186.19 635.33 P
-0.17 (esentation, which is C text annotated with which header entities will) 200.76 635.33 P
(be needed.  These ar) 126 623.33 T
(e mer) 215.77 623.33 T
(ged as appr) 240.45 623.33 T
(opriate and we emit...) 291.94 623.33 T
(10.) 108 611.33 T
(the C code, including a) 126 611.33 T
3 F
(Makefile) 230.27 611.33 T
2 F
(.  Then a make utility is called to form...) 267.5 611.33 T
(1) 108 599.33 T
(1.) 112.45 599.33 T
(the executable.) 126 599.33 T
1 11 Q
(Organization in time) 108 568.67 T
2 10 Q
-0.38 (The stages outlined in the dataflow description do not execute in strict phases; for the most) 108 543.33 P
(part, information is computed when it is first needed and the result registered in a table.) 108 531.33 T
0.29 (However, there are some distinct phases; an error in any phase will halt further compila-) 108 507.33 P
(tion.) 108 495.33 T
(1.) 108 473.33 T
(First the command line information is pr) 126 473.33 T
(ocessed.) 305.39 473.33 T
(2.) 108 461.33 T
-0.34 (Then, parsing \336les and making sur) 126 461.33 P
-0.34 (e all r) 278.01 461.33 P
-0.34 (efer) 301.71 461.33 P
-0.34 (ence types ar) 318.39 461.33 P
-0.34 (e available is interleaved; the) 375.19 461.33 P
3 F
-0.17 (AS) 126 449.33 P
2 F
-0.15 ( tr) 139.34 449.33 P
-0.15 (ee for each class is walked and if any new types ar) 148.72 449.33 P
-0.15 (e encounter) 368.77 449.33 P
-0.15 (ed, they ar) 420.09 449.33 P
-0.15 (e added) 466.39 449.33 P
-0.05 (to a table to be r) 126 437.33 P
-0.05 (esolved.  A special hack allows library code to be parsed only when a) 196.26 437.33 P
(type in the \336le is accessed, which speeds up the compilation of small pr) 126 425.33 T
(ograms.) 441.06 425.33 T
(3.) 108 413.33 T
(The type graph is constr) 126 413.33 T
(ucted.) 232.94 413.33 T
(4.) 108 401.33 T
(Conformance of class interfaces is checked.) 126 401.33 T
(5.) 108 389.33 T
(The main r) 126 389.33 T
(outine is identi\336ed.) 174.07 389.33 T
(6.) 108 377.33 T
(T) 126 377.33 T
(ype checking, building the) 131.23 377.33 T
3 F
(AM) 251.08 377.33 T
2 F
( form, inlining, optimization, C generation.) 266.08 377.33 T
(7.) 108 365.33 T
(Resolution of C code into \336les and C compilation.) 126 365.33 T
(8.) 108 353.33 T
(T) 126 353.33 T
(ype checking of code which wasn\325t r) 131.23 353.33 T
(eached.) 292.06 353.33 T
1 11 Q
(Static organization) 108 322.67 T
2 10 Q
(The classes in the compiler may be r) 108 305.33 T
(oughly divided into) 267.48 305.33 T
(1.) 108 283.33 T
(The) 126 283.33 T
3 F
(AS) 145.24 283.33 T
2 F
( classes.  These form the nodes of the abstract syntax tr) 158.58 283.33 T
(ee.  They all subtype) 399.48 283.33 T
(fr) 126 271.33 T
(om) 133.1 271.33 T
3 F
($AS_NODE) 149.89 271.33 T
2 F
( and corr) 203.24 271.33 T
(espond nearly one-to-one with the grammatical pr) 242.79 271.33 T
(oduc-) 465.44 271.33 T
(tions in the speci\336cation.  An) 126 259.33 T
3 F
(AM_OUT) 256.72 259.33 T
2 F
( class can be used to print any abstract syntax) 298.39 259.33 T
(tr) 126 247.33 T
(ee.  Some useful abstractions ar) 133.03 247.33 T
(e) 271.15 247.33 T
3 F
($AS_CLASS_ELT) 278.44 247.33 T
2 F
( \050class elements\051,) 362.37 247.33 T
3 F
($AS_STMT) 439.29 247.33 T
2 F
(\050statements\051 and) 126 235.33 T
3 F
($AS_EXPR) 202.08 235.33 T
2 F
( \050expr) 253.77 235.33 T
(essions\051.) 279.33 235.33 T
(2.) 108 223.33 T
-0.18 (The) 126 223.33 P
3 F
-0.2 (AM) 145.06 223.33 P
2 F
-0.18 ( classes.  These form the nodes of the intermediate r) 160.06 223.33 P
-0.18 (epr) 386.08 223.33 P
-0.18 (esentation, the abstract) 400.65 223.33 P
(machine.  They all subtype fr) 126 211.33 T
(om) 254.25 211.33 T
3 F
($AM) 271.04 211.33 T
2 F
( and corr) 291.6 211.33 T
(espond with the conceptual entities of) 331.15 211.33 T
(Sather execution, such as loops, iterators, exceptions, and statements.  This form is) 126 199.33 T
(appr) 126 187.33 T
(opriate for generating code or interpr) 146.79 187.33 T
(eting.  Some useful abstractions ar) 311.59 187.33 T
(e) 462.47 187.33 T
3 F
($AM_STMT) 126 175.33 T
2 F
( \050statements\051,) 179.34 175.33 T
3 F
($AM_EXPR) 240.99 175.33 T
2 F
( \050expr) 294.34 175.33 T
(essions\051,) 319.9 175.33 T
3 F
($AM_CALL_EXPR) 359.93 175.33 T
2 F
( \050dif) 443.85 175.33 T
(fer) 461.85 175.33 T
(ent) 473.74 175.33 T
(kinds of calls\051 and) 126 163.33 T
3 F
($AM_CONST) 209.19 163.33 T
2 F
( \050constant expr) 270.31 163.33 T
(essions\051.) 335.67 163.33 T
(3.) 108 151.33 T
(Compiler stages.  These ar) 126 151.33 T
(e code and any associated state that manipulates the vari-) 242.08 151.33 T
(ous internal r) 126 139.33 T
(epr) 184.96 139.33 T
(esentations in the compiler) 199.53 139.33 T
(.  They ar) 317.78 139.33 T
(e abstracted so that modules) 358.85 139.33 T
(with dif) 126 127.33 T
(fering functionality can be plugged in \050for example, a dif) 161 127.33 T
(fer) 411.08 127.33 T
(ent back-end\051.) 422.97 127.33 T
(They ar) 126 115.33 T
(e:) 159.57 115.33 T
3 F
($GET_OPTIONS) 169.36 115.33 T
2 F
(,) 246.05 115.33 T
3 F
($PARSE) 251.05 115.33 T
2 F
(,) 290.51 115.33 T
3 F
($FIND_TYPES) 295.51 115.33 T
2 F
(,) 362.75 115.33 T
3 F
($BUILD_TYPE_GRAPH) 367.75 115.33 T
2 F
(,) 475.56 115.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(The Sather 1.0 Compiler) 283.83 709.51 T
1 F
(5) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
3 F
0 X
($CHECK_IFC_CONFORMANCE) 126 659.33 T
2 F
(,) 273.23 659.33 T
3 F
($GET_MAIN) 278.23 659.33 T
2 F
(,) 334.91 659.33 T
3 F
($GENERATE_AM) 339.91 659.33 T
2 F
(,) 421.04 659.33 T
3 F
($INLINE) 426.04 659.33 T
2 F
(,) 463.83 659.33 T
3 F
($OPTI-) 468.83 659.33 T
(MIZE) 126 647.33 T
2 F
(,) 149.89 647.33 T
3 F
($BACK_END) 154.89 647.33 T
2 F
(, and) 214.35 647.33 T
3 F
($CHECK_AM) 238.78 647.33 T
2 F
(.  Each of these has a particular implementa-) 299.9 647.33 T
(tion in the compiler; for instance,) 126 635.33 T
3 F
(CGEN) 274.37 635.33 T
2 F
( is the C generating) 303.26 635.33 T
3 F
($BACK_END) 391.33 635.33 T
2 F
(.) 450.79 635.33 T
(4.) 108 623.33 T
(Other compiler entities.  Ther) 126 623.33 T
(e ar) 255.97 623.33 T
(e various tables and classes used by mor) 272.03 623.33 T
(e than one) 450.4 623.33 T
-0.33 (stage of compilation.  Most important is the) 126 611.33 P
3 F
-0.37 (PROG) 318.47 611.33 P
2 F
-0.33 ( object, which is the central r) 347.92 611.33 P
-0.33 (egistry) 471.56 611.33 P
(for all globally visible tables and compiler stages.  Most compiler components have a) 126 599.33 T
(\336eld that points to this object, fr) 126 587.33 T
(om which any other part of the compiler may be) 266.27 587.33 T
(r) 126 575.33 T
(eached.) 129.77 575.33 T
1 11 Q
(Organization of \336les) 108 544.67 T
3 9 Q
(am.sa) 129.6 528 T
($AM classes  \050Abstract Machine representation nodes\051) 259.2 528 T
(am_out.sa) 129.6 518 T
(AM_OUT \050pretty-printing the AM form\051) 259.2 518 T
(as.sa) 129.6 508 T
($AS classes \050Abstract Syntax tree nodes\051) 259.2 508 T
(build_type_graph.sa) 129.6 498 T
(BUILD_TYPE_GRAPH \050stage of compilation\051) 259.2 498 T
(call.sa) 129.6 488 T
($CALL_TP classes \050kinds of arguments\051) 259.2 488 T
(cgen.sa) 129.6 478 T
(CGEN \050C generating back-end\051) 259.2 478 T
(check_am.sa) 129.6 468 T
(CHECK_AM \050stage of compilation\051) 259.2 468 T
(check_ifc_conformance.sa) 129.6 458 T
(CHECK_IFC_CONFORMANCE \050stage of compilation\051) 259.2 458 T
(code_file.sa) 129.6 448 T
(CODE_FILE \050directs placement of code to C files\051) 259.2 448 T
(cs.sa) 129.6 438 T
(CS \050the main class where execution begins\051) 259.2 438 T
(cs_options.sa) 129.6 428 T
(CODE_OPTIONS, CS_OPTIONS) 259.2 428 T
(elt.sa) 129.6 418 T
(ELT and related classes) 259.2 418 T
(find_types.sa) 129.6 408 T
(FIND_TYPES) 259.2 408 T
(generate_am.sa) 129.6 398 T
(GENERATE_AM) 259.2 398 T
(get_main_sig.sa) 129.6 388 T
(GET_MAIN_SIG) 259.2 388 T
(get_options.sa) 129.6 378 T
(GET_OPTIONS) 259.2 378 T
(global.sa) 129.6 368 T
(GLOBAL_TBL) 259.2 368 T
(ident.sa) 129.6 358 T
(IDENT and related classes) 259.2 358 T
(ifc.sa) 129.6 348 T
(IFC and related classes) 259.2 348 T
(impl.sa) 129.6 338 T
(IMPL and related classes) 259.2 338 T
(inline.sa) 129.6 328 T
($INLINE classes) 259.2 328 T
(layout.sa) 129.6 318 T
($LAYOUT classes) 259.2 318 T
(mangle.sa) 129.6 308 T
(NAMESPACE, MANGLE) 259.2 308 T
(optimize.sa) 129.6 298 T
(NULL_OPTIMIZE) 259.2 298 T
(parse.sa) 129.6 288 T
(SCANNER, PARSER and related classes) 259.2 288 T
(prog.sa) 129.6 278 T
(PROG and related classes) 259.2 278 T
(ptrans.sa) 129.6 268 T
(PTRANS) 259.2 268 T
(sig.sa) 129.6 258 T
(SIG and related classes) 259.2 258 T
(stages.sa) 129.6 248 T
(interfaces of all compiler stages) 259.2 248 T
(tp.sa) 129.6 238 T
(TP and related classes) 259.2 238 T
(trans.sa) 129.6 228 T
(TRANS and related classes) 259.2 228 T
108 156.98 504 160 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 158.49 540 158.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Options) 108 164 T
2 10 Q
1.77 (Envir) 108 141.31 P
1.77 (onmental and command-line options ar) 132.26 141.31 P
1.77 (e handled by the) 314.32 141.31 P
3 F
1.96 ($GET_OPTIONS) 397.69 141.31 P
2 F
1.77 ( stage.) 474.38 141.31 P
(T) 108 129.31 T
(o enable r) 113.21 129.31 T
(e-use, the implementation is divided into thr) 156.28 129.31 T
(ee classes:) 353.47 129.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
(6) 108 709.51 T
0 F
(The Sather 1.0 Compiler) 266.69 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 F
0 X
(1.) 108 659.33 T
3 F
(GET_OPTIONS) 126 659.33 T
2 F
(: This is the standar) 197.13 659.33 T
(d options module for the Sather compiler) 282.95 659.33 T
(. It is) 464.59 659.33 T
(meant to be included in classes which specialize for a particular con\336guration, and) 126 647.33 T
(handles all the options needed by) 126 635.33 T
0 F
(any) 277.04 635.33 T
2 F
( tool built using the compiler components - the) 292.04 635.33 T
(location of the library home, getting \336le names, interpr) 126 623.33 T
(eting command \336les.  A) 367.73 623.33 T
-0.09 (br) 126 611.33 P
-0.09 (owser) 135.3 611.33 P
-0.09 (, for example, might include this and then de\336ne additional options appr) 161.34 611.33 P
-0.09 (opri-) 482.34 611.33 P
(ate to br) 126 599.33 T
(owsing.) 162.07 599.33 T
(2.) 108 587.33 T
3 F
(CODE_OPTIONS) 126 587.33 T
2 F
(: This adds options needed for anything that generates code; it han-) 205.46 587.33 T
(dles optional checking \337ags such as \322) 126 575.33 T
3 F
(-pre) 290.87 575.33 T
2 F
(\323 and \322) 308.65 575.33 T
3 F
(-no_pre) 340.58 575.33 T
2 F
(\323.) 375.04 575.33 T
(3.) 108 563.33 T
3 F
(CS_OPTIONS) 126 563.33 T
2 F
(: This adds options speci\336c to the compiler) 190.46 563.33 T
(.  It also r) 378.21 563.33 T
(eads in the \336le) 418.72 563.33 T
(\322) 126 551.33 T
3 F
(System/CONFIG) 131 551.33 T
2 F
(\323.) 206.01 551.33 T
108 502.98 504 506 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 504.49 540 504.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Scanning and Parsing) 108 510 T
1 11 Q
(Scanning) 108 475.64 T
2 10 Q
0.77 (Scanning input \336les is done by r) 108 458.31 P
0.77 (eading the entir) 254.45 458.31 P
0.77 (e \336le into memory) 325.6 458.31 P
0.77 (.  The inner loop was) 407.7 458.31 P
0.22 (written by hand to pass comments and whitespace quickly) 108 446.31 P
0.22 (.  A big case statement decides) 368.27 446.31 P
0.59 (what to do with each new character) 108 434.31 P
0.59 (.  Identi\336ers ar) 268.49 434.31 P
0.59 (e moved into a buf) 334.33 434.31 P
0.59 (fer and then a case) 419.48 434.31 P
(statement is used to quickly identify keywor) 108 422.31 T
(ds.) 304.47 422.31 T
1 11 Q
(Parsing) 108 391.64 T
2 10 Q
0.48 (Parsing is done by hand-written r) 108 374.31 P
0.48 (ecursive descent.  This turned out to be much easier to) 259.04 374.31 P
0.23 (write, debug, and to make handle err) 108 362.31 P
0.23 (ors well than the appr) 273.45 362.31 P
0.23 (oach of the pr) 371.53 362.31 P
0.23 (evious compiler) 432.89 362.31 P
1.1 (which used) 108 350.31 P
3 F
1.22 (yacc) 163.7 350.31 P
2 F
1.1 (.  Another bene\336t is that the entir) 184.26 350.31 P
1.1 (e compiler is in Sather \050aside fr) 337.99 350.31 P
1.1 (om a) 481.11 350.31 P
0.91 (small r) 108 338.31 P
0.91 (untime\051.  My overall experience with this is that the traditionally taught r) 139.17 338.31 P
0.91 (eliance) 473.34 338.31 P
(on automated parser) 108 326.31 T
(-generators is overrated.) 199.78 326.31 T
108 277.95 504 280.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 279.46 540 279.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(T) 108 284.98 T
(ranslation) 114.23 284.98 T
2 10 Q
1.18 (Routines ar) 108 262.29 P
1.18 (e selected to translate in a depth-\336rst or) 159.64 262.29 P
1.18 (der as they ar) 342.23 262.29 P
1.18 (e r) 405.56 262.29 P
1.18 (eached. No code is) 417.8 262.29 P
1.44 (generated which is unr) 108 250.29 P
1.44 (eachable.  T) 213.99 250.29 P
1.44 (ypechecking and) 267.88 250.29 P
3 F
1.6 (AM) 348.39 250.29 P
2 F
1.44 ( generation occurs at the same) 363.39 250.29 P
0.06 (time as the) 108 238.29 P
3 F
0.07 (AS) 158.58 238.29 P
2 F
0.06 ( form for each r) 171.92 238.29 P
0.06 (outine is traversed.  The translation is r) 240.29 238.29 P
0.06 (e-entrant, so transla-) 413.15 238.29 P
0.67 (tion of a r) 108 226.29 P
0.67 (outine begins as soon as the \336rst call to it is observed, suspending the transla-) 152.51 226.29 P
(tion of the caller until the called r) 108 214.29 T
(outine has been handled.) 254.34 214.29 T
-0.05 (The translation step is the most complex of the compiler; here most of the statically check-) 108 190.29 P
0.36 (able rules in the specification are implemented while the tedious translation of) 108 178.29 P
3 F
0.4 (AS) 461.22 178.29 P
2 F
0.36 ( to) 474.56 178.29 P
3 F
0.4 (AM) 489 178.29 P
2 F
0.26 (takes place.  The compiler design might be simplified if typechecking and) 108 166.29 P
3 F
0.29 (AM) 438.88 166.29 P
2 F
0.26 ( generation) 453.88 166.29 P
(took two steps, but it would also probably be less efficient.) 108 154.29 T
2.86 (The current compiler does not typecheck parameterized classes independently as it) 108 130.29 P
0.33 (should.  Instead, it checks that parameters meet their bounds when they are instantiated,) 108 118.29 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(The Sather 1.0 Compiler) 283.83 709.51 T
1 F
(7) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 F
0 X
0.49 (and typechecking occurs on a copy of the class with the actual parameterization.  This is) 108 659.33 P
-0.17 (both good and bad.  It is good because it means we automatically specialize on the param-) 108 647.33 P
0.2 (eterizations, which can lead to very efficient code \050for example, container classes of value) 108 635.33 P
0.59 (types\051.  However, it means that redundant code is emitted whether or not specialization) 108 623.33 P
1.03 (has a benefit; often, is doesn\325t \050for example, container classes that manipulate reference) 108 611.33 P
-0.37 (types don\325t need a new version for each class because the pointers have the same represen-) 108 599.33 P
(tation no matter what class they come from\051.) 108 587.33 T
108 538.98 504 542 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 540.49 540 540.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Inlining) 108 546 T
2 10 Q
0.38 (Inlining occurs on the \337y) 108 523.31 P
0.38 (.  Recall that translation of a called r) 218.86 523.31 P
0.38 (outine always pr) 379.78 523.31 P
0.38 (ecedes that) 454.62 523.31 P
0.39 (of the caller) 108 511.31 P
0.39 (.  As each r) 159.71 511.31 P
0.39 (outine is translated, it is r) 209.62 511.31 P
0.39 (egister) 323.43 511.31 P
0.39 (ed with the inlining stage.  As the) 352.75 511.31 P
3 F
0.96 (AM) 108 499.31 P
2 F
0.87 ( form for r) 123 499.31 P
0.87 (outine calls is generated, they ar) 171.18 499.31 P
0.87 (e passed to the inliner which may decide) 317.69 499.31 P
1.2 (to r) 108 487.31 P
1.2 (eplace that call with an inline expr) 124.19 487.31 P
1.2 (ession.  The curr) 282.94 487.31 P
1.2 (ent inliner only does some very) 358.92 487.31 P
(stupid inlining, which nevertheless helps quite a bit.  The following ar) 108 475.31 T
(e inlined:) 417.37 475.31 T
(1.) 108 453.31 T
(Routines implementing attribute r) 126 453.31 T
(eads) 276.89 453.31 T
(2.) 108 441.31 T
(Routines implementing attribute writes) 126 441.31 T
(3.) 108 429.31 T
(Integer addition \050r) 126 429.31 T
(outine) 207.22 429.31 T
3 F
(INT::plus\050INT\051:INT) 237.99 429.31 T
2 F
(\051 is folded for constants) 319.66 429.31 T
(4.) 108 417.31 T
(Routines implementing r) 126 417.31 T
(eads of global variables) 236.4 417.31 T
-0.22 (It would be quite easy to extend the inliner to do general inlining, and this would improve) 108 393.31 P
(code quality substantially.  Routines which are inlined at every call are not generated.) 108 381.31 T
108 332.95 504 335.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 334.46 540 334.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Optimization) 108 339.98 T
2 10 Q
(Ther) 108 317.29 T
(e is a stage for optimization, but pr) 128.51 317.29 T
(esently it does nothing.) 282.47 317.29 T
108 268.93 504 271.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 270.44 540 270.44 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Compilation to C) 108 275.95 T
2 10 Q
0.15 (Ther) 108 253.26 P
0.15 (e ar) 128.51 253.26 P
0.15 (e many constraints and goals that the C generator has to meet.  Some of these ar) 144.72 253.26 P
0.15 (e) 499.21 253.26 P
(a r) 108 241.26 T
(esult of experience with the C generation of the pr) 119.27 241.26 T
(evious compiler) 340.33 241.26 T
(.) 410.47 241.26 T
(1.) 108 219.26 T
(The code has to be r) 126 219.26 T
(eadable, at least on demand, to allow debugging the compiler) 213.91 219.26 T
(.) 485.58 219.26 T
(This means mor) 126 207.26 T
(e than indenting code; optional explanatory comments ar) 196.84 207.26 T
(e necessary) 449.52 207.26 T
(,) 498.53 207.26 T
(and the mangling of the Sather namespace to C must be r) 126 195.26 T
(easonable.) 378.62 195.26 T
(2.) 108 183.26 T
(The code has to be portable; strictly ANSI-compliant C is emitted.) 126 183.26 T
(3.) 108 171.26 T
-0.11 (It must be possible to have symbolic information emitted for debugging.  In the pr) 126 171.26 P
-0.11 (evi-) 487.32 171.26 P
(ous compiler) 126 159.26 T
(, this was done by emitting a special symbol table that was r) 182.79 159.26 T
(ead in by a) 447.72 159.26 T
(modi\336ed version of) 126 147.26 T
3 F
(gdb) 215.37 147.26 T
2 F
(.  The curr) 232.05 147.26 T
(ent compiler instead emits r) 276.98 147.26 T
(eadable C str) 400.08 147.26 T
(ucts and) 457.67 147.26 T
(gdb may be used as is.  \322) 126 135.26 T
3 F
(#line) 235.47 135.26 T
2 F
(\323 dir) 256.59 135.26 T
(ectives may be inserted in the generated code.) 276.88 135.26 T
(4.) 108 123.26 T
(C compilation must be possible; giant C \336les tend to br) 126 123.26 T
(eak compilers, time out, or) 368 123.26 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
(8) 108 709.51 T
0 F
(The Sather 1.0 Compiler) 266.69 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
2 F
0 X
(thrash systems to death.  So multiple C \336les must be generated.  The name mangling) 126 659.33 T
(must avoid symbols with alternative meaning, such as \322) 126 647.33 T
3 F
(printf) 373.93 647.33 T
2 F
(\323.) 396.16 647.33 T
(5.) 108 635.33 T
(C compilation must be fast; it is the bottleneck in compilation.  This means that the) 126 635.33 T
-0.19 (generated \336les must be appr) 126 623.33 P
-0.19 (opriate for a parallel make utility) 250.75 623.33 P
-0.19 (.  In addition, because of) 394.79 623.33 P
(over) 126 611.33 T
(head \336les must not be too small, so mor) 145.67 611.33 T
(e than one class must go in a \336le.  Only) 320.93 611.33 T
(header information actually needed by a \336le should be generated.) 126 599.33 T
(6.) 108 587.33 T
-0.23 (Because it is so expensive, C compilation should be incr) 126 587.33 P
-0.23 (emental.  Most changes to pr) 369.39 587.33 P
-0.23 (o-) 495.21 587.33 P
(grams ar) 126 575.33 T
(e very small, and should be r) 164.85 575.33 T
(e\337ected by smaller compile times.  This also) 292.57 575.33 T
(means that global headers ar) 126 563.33 T
(e a bad idea, because if they change all C \336les must be) 252.86 563.33 T
-0.04 (r) 126 551.33 P
-0.04 (egenerated.  In addition code should be cluster) 129.77 551.33 P
-0.04 (ed in the C \336les so as to keep changes) 336.29 551.33 P
-0.05 (local, and the namespace mapping shouldn\325t pr) 126 539.33 P
-0.05 (opagate changes to other \336les if it can) 335.99 539.33 P
(be avoided.) 126 527.33 T
-0.51 (Much effort has gone into making a C back-end which meets these goals.  There are numer-) 108 503.33 P
0.83 (ous \322gotchas\323; for example, the name mangling can\325t be deterministic \050because it might) 108 491.33 P
-0.02 (collide with a reserved identifier\051 but if it isn\325t deterministic, then it is possible for \322name-) 108 479.33 P
(space pressure\323 to change the mapping used in other files.) 108 467.33 T
0.81 (To meet the above goals a collection of heuristics is used which was arrived at after ex-) 108 443.33 P
0.11 (hausting experimentation.  A separate namespace is managed for each C entity \050such as a) 108 431.33 P
0.29 (struct\051.  C names are constructed deterministically from the Sather namespace \050for exam-) 108 419.33 P
1.18 (ple, the routine) 108 407.33 P
3 F
1.31 (FOO::bar\050BAZ\051) 181.34 407.33 P
2 F
1.18 ( is mapped to \322) 249.13 407.33 P
3 F
1.31 (FOO_bar_BAZ) 321.46 407.33 P
2 F
1.18 (\323. When namespace colli-) 388.15 407.33 P
0.31 (sions occur, or the mapping would collide with a forbidden identifier such as \322) 108 395.33 P
3 F
0.34 (printf) 460.64 395.33 P
2 F
0.31 (\323, an) 482.88 395.33 P
0.58 (alternative name is generated by deterministically appending the smallest integer which) 108 383.33 P
(will resolve the collision.) 108 371.33 T
-0.08 (Routines are clustered by the class they are in.  The decision about what files to create and) 108 347.33 P
-0.44 (which classes to place in them is deferred until all C code is generated.  Then the classes are) 108 335.33 P
0.42 (merged, attempting to create C files of approximately the same length.  Header informa-) 108 323.33 P
-0.22 (tion is generated for each of the resulting files separately, and must be sorted into a canon-) 108 311.33 P
0.85 (ical order while respecting the struct\325s topological order in order to guarantee the same) 108 299.33 P
-0.23 (order of generation for each compile.  For each generated file, a \322thumbprint\323 is generated) 108 287.33 P
0.39 (\050several hash values of the text of the file\051 which is compared against the previous file of) 108 275.33 P
-0.16 (that name, and overwritten only if it has changed.  A) 108 263.33 P
3 F
-0.17 (make) 342.2 263.33 P
2 F
-0.16 ( utility can then recompile only) 366.65 263.33 P
(the files which have changed.) 108 251.33 T
0.23 (It would be far more efficient to redesign the compiler to recompute all of it\325s internal in-) 108 227.33 P
-0.03 (formation incrementally, such that it could output the C which had changed without gen-) 108 215.33 P
2.9 (erating the C and doing the comparison.  However, the combination of the above) 108 203.33 P
(constraints conspire against this.) 108 191.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(The Sather 1.0 Compiler) 283.83 709.51 T
1 F
(9) 499 709.51 T
504 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 650.98 504 654 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Garbage Collection) 108 658 T
2 10 Q
0.97 (Pr) 108 635.31 P
0.97 (esently the only pr) 117.81 635.31 P
0.97 (e-compiled r) 202.98 635.31 P
0.97 (untime is Hans Boehm\325s excellent conservative collec-) 259.89 635.31 P
0.96 (tor) 108 623.31 P
0.96 (, which simply r) 119.93 623.31 P
0.96 (eplaces) 194.38 623.31 P
3 F
1.07 (malloc) 230.03 623.31 P
2 F
0.96 (.  Ther) 258.92 623.31 P
0.96 (e ar) 288.86 623.31 P
0.96 (e plans to r) 305.88 623.31 P
0.96 (eplace this with a non-conserva-) 357.53 623.31 P
1.02 (tive Sather) 108 611.31 P
1.02 (-speci\336c collector) 156.02 611.31 P
1.02 (, the Boehm collector has worked well for us.  W) 232.62 611.31 P
1.02 (e do try to) 455.6 611.31 P
1.38 (help it out by identifying objects that can\325t hold pointers and explicitly destr) 108 599.31 P
1.38 (oying ob-) 460.49 599.31 P
0.54 (jects in the compiler and library that ar) 108 587.31 P
0.54 (e safe to do so, although not a lot of this goes on.) 283.06 587.31 P
0.6 (Also the collector is compiled to ignor) 108 575.31 P
0.6 (e pointers into the middle of objects, as the Sather) 279.34 575.31 P
0.64 (code generation guarantees that any such pointer would be r) 108 563.31 P
0.64 (edundant, with some other) 382.22 563.31 P
(pointer pointing to the head of the object.) 108 551.31 T
108 502.95 504 505.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 504.46 540 504.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(The Emitted Code) 108 509.98 T
2 10 Q
-0.04 (Sather allows many kinds of optional runtime checks to allow catching a variety of errors.) 108 482.29 P
1.02 (These are implemented with a combination of changing the emitted code \050for example,) 108 470.29 P
-0.34 (when pre- and post-conditions are turned on\051 and by special macros in the runtime header) 108 458.29 P
1.11 (\322) 108 446.29 P
3 F
1.24 (System/runtime.h) 113 446.29 P
2 F
1.11 (\323 which are handled by the C preprocessor.  This approach makes it) 190.8 446.29 P
(easy to add custom inline versions of simple functions.) 108 434.29 T
-0.47 (The system file \322) 108 410.29 P
3 F
-0.52 (System/MACROS) 180.71 410.29 P
2 F
-0.47 (\323 specifies C code to replace Sather functions, and \322) 260.71 410.29 P
3 F
-0.52 (Sys-) 484 410.29 P
-0.2 (tem/ITERS) 108 398.29 P
2 F
-0.18 (\323 specifies C code to inline for iterators.  Both of these should be used with cau-) 156.9 398.29 P
0.75 (tion.  In particular, make sure any inlined code properly inserts runtime checks \050see the) 108 386.29 P
(other examples to understand.\051) 108 374.29 T
0.04 (When destroy checking is off, calls to) 108 350.29 P
3 F
0.05 (SYS::destroy) 274.92 350.29 P
2 F
0.04 ( are turned into calls to the Boehm col-) 333.28 350.29 P
0.99 (lector\325s) 108 338.29 P
3 F
1.1 (GC_free) 143.32 338.29 P
2 F
0.99 ( call.  When it is on, an extra bit in the header of each object is set and) 181.11 338.29 P
(checked on every access.) 108 326.29 T
108 277.93 504 280.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 279.44 540 279.44 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(pSather) 108 284.95 T
2 10 Q
0.16 (The pSather implementation is un\336nished and will not be discussed in detail her) 108 257.26 P
0.16 (e.  Ther) 466.1 257.26 P
0.16 (e) 499.21 257.26 P
-0.28 (ar) 108 245.26 P
-0.28 (e additional) 116.77 245.26 P
3 F
-0.31 (AS) 171.48 245.26 P
2 F
-0.28 ( and) 184.82 245.26 P
3 F
-0.31 (AM) 206.19 245.26 P
2 F
-0.28 ( nodes for the pSather constr) 221.19 245.26 P
-0.28 (ucts, and) 346.47 245.26 P
3 F
-0.31 (TRANS) 388.3 245.26 P
2 F
-0.28 ( is extended by the) 422.19 245.26 P
-0.11 (class) 108 233.26 P
3 F
-0.13 (PTRANS) 131.22 233.26 P
2 F
-0.11 ( to do the additional transformation.  For serial Sather users these can be ig-) 171.78 233.26 P
(nor) 108 221.26 T
(ed.) 123.05 221.26 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0 1 1 0 1 0 0]
 9 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 706.17 504 716.17 R
7 X
0 0 0 1 0 0 0 K
V
1 10 Q
0 X
(10) 108 709.51 T
0 F
(The Sather 1.0 Compiler) 266.69 709.51 T
503.64 702 108 702 2 L
7 X
V
0.25 H
2 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 108 504 666 R
7 X
V
108 650.98 504 654 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 652.49 540 652.49 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Extending the Compiler) 108 658 T
2 10 Q
0.65 (There are several types of projects that would make use of the compiler code.  Here is a) 108 630.31 P
-0.13 (very brief guide to how you should proceed.  I\325ll be glad to talk to anyone who needs help) 108 618.31 P
(understanding some part of the compiler; just send me email at) 108 606.31 T
3 9 Q
(davids@icsi.berkeley.edu) 129.6 588.98 T
2 10 Q
(Kinds of projects:) 108 556.31 T
(1.) 108 534.31 T
(Interpr) 126 534.31 T
(eter or new back-end -) 156.97 534.31 T
(A new back-end shouldn\325t be terribly dif) 126 522.31 T
(\336cult; just pull out) 306.09 522.31 T
3 F
(CGEN) 389.76 522.31 T
2 F
( and insert your) 418.65 522.31 T
(own code.) 126 510.31 T
(An interpr) 126 498.31 T
(eter should make use of the existing framework for parsing, translating,) 172.61 498.31 T
-0.14 (typechecking etc. code.  The) 126 486.31 P
3 F
-0.16 (AM) 251.78 486.31 P
2 F
-0.14 ( formwas designed to be interpr) 266.78 486.31 P
-0.14 (eted; you just need to) 407.61 486.31 P
(r) 126 474.31 T
(eplace the back-end.  A mor) 129.77 474.31 T
(e ambitious pr) 253 474.31 T
(oject would r) 316.74 474.31 T
(equir) 374.65 474.31 T
(e r) 397.75 474.31 T
(ewriting some of the) 408.81 474.31 T
(r) 126 462.31 T
(est of the compiler to allow interactive composition of Sather as one can do in other) 129.77 462.31 T
(interpr) 126 450.31 T
(eted languages, ideally in combination with compiled code.) 156.51 450.31 T
-0.3 (The \322) 126 438.31 P
3 F
-0.33 (Contrib/si) 149.94 438.31 P
2 F
-0.3 (\323 dir) 192.17 438.31 P
-0.3 (ectory has a small interpr) 212.16 438.31 P
-0.3 (eter) 322.89 438.31 P
-0.3 (, but it doesn\325t interpr) 338.94 438.31 P
-0.3 (et the) 434.2 438.31 P
3 F
-0.33 (AM) 460.53 438.31 P
2 F
-0.3 ( form;) 475.53 438.31 P
(instead it makes it\325s own intermediate r) 126 426.31 T
(epr) 300.72 426.31 T
(esentation, and pr) 315.29 426.31 T
(obably won\325t be sup-) 394.85 426.31 T
(ported in the futur) 126 414.31 T
(e.) 208.1 414.31 T
(2.) 108 402.31 T
-0.26 (Optimizer - The curr) 126 402.31 P
-0.26 (ent optimizer in) 216.51 402.31 P
3 F
-0.29 (optimize.sa) 288.96 402.31 P
2 F
-0.26 ( does nothing at all, just passing each) 339.53 402.31 P
-0.17 (r) 126 390.31 P
-0.17 (outine to the C back-end.  Replacing this with a r) 129.77 390.31 P
-0.17 (eal optimizer just r) 343.55 390.31 P
-0.17 (equir) 426 390.31 P
-0.17 (es r) 449.1 390.31 P
-0.17 (eplacing) 464.23 390.31 P
(this class.  T) 126 378.31 T
(raditional \337ow analysis, common subexpr) 178.29 378.31 T
(ession elimination etc. would) 364.05 378.31 T
(make good pr) 126 366.31 T
(ojects of bounded size.) 187.55 366.31 T
(3.) 108 354.31 T
-0.32 (Better inlining - The curr) 126 354.31 P
-0.32 (ent optimizer is very poor) 233.79 354.31 P
-0.32 (.  It can be r) 346.74 354.31 P
-0.32 (eplaced be changing the) 396.11 354.31 P
(inliner stage in) 126 342.31 T
3 F
(inline.sa) 194.19 342.31 T
2 F
(.) 230.87 342.31 T
(4.) 108 330.31 T
(Br) 126 330.31 T
(owser or other envir) 135.88 330.31 T
(onmental tools - Ther) 225.79 330.31 T
(e is sample skeleton code in \322C) 320.35 330.31 T
3 F
(ontrib/) 457.52 330.31 T
(browser) 126 318.31 T
2 F
(\323 which does nothing mor) 161.56 318.31 T
(e than print out the locations of all r) 277.2 318.31 T
(outines.  It can) 435.34 318.31 T
(easily be molded into something that does much mor) 126 306.31 T
(e; just inspect the various com-) 361.2 306.31 T
(piler tables.) 126 294.31 T
-0.46 (Please let me know if you are interested in working on any of these so I can coordinate peo-) 108 270.31 P
(ple\325s efforts.) 108 258.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 10
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Helvetica
%%+ Palatino-BoldItalic
%%EOF
