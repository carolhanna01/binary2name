This is guile-cv.info, produced by makeinfo version 6.3 from
guile-cv.texi.

This manual documents GNU Guile-CV version 0.1.0.

Copyright (C) 2016 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled “GNU Free
Documentation License.”
INFO-DIR-SECTION Software
START-INFO-DIR-ENTRY
* GNU Guile-CV: (guile-cv).  
END-INFO-DIR-ENTRY


File: guile-cv.info,  Node: Top,  Next: Preface

GNU Guile-CV Reference Manual
*****************************

This manual documents GNU Guile-CV version 0.1.0.

Copyright (C) 2016 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled “GNU Free
Documentation License.”

* Menu:

* Preface::
* Introduction::
* Using Guile-CV::
* API Reference::

Appendices

* GNU Free Documentation License::  The license of this manual.

Indices

* Concept Index::
* Procedure Index::
* Variable Index::
* Type Index::


File: guile-cv.info,  Node: Preface,  Next: Introduction,  Up: Top

Preface
*******

This manual describes how to use Guile-CV. It relates particularly to
Guile-CV version 0.1.0.

* Menu:

* Contributors to this manual::
* Guile-CV License::


File: guile-cv.info,  Node: Contributors to this manual,  Next: Guile-CV License,  Up: Preface

Contributors to this Manual
===========================

Like Guile-CV itself, the Guile-CV reference manual is a living entity.
Right now, the contributor to this manual is:

   • David Pirotte

who is also the author and maintainer of Guile-CV.

You are most welcome to join and help.  Visit Guile-CV’s web site at
<http://www.gnu.org/software/guile-cv> to find out how to get involved.


File: guile-cv.info,  Node: Guile-CV License,  Prev: Contributors to this manual,  Up: Preface

The Guile-CV License
====================

GNU Guile-CV is Free Software.  GNU Guile-CV is copyrighted, not public
domain, and there are restrictions on its distribution or
redistribution:

   • GNU Guile-CV and supporting files are published under the terms of
     the GNU Lesser General Public License version 3 or later.  See the
     file ‘LICENSE’.

   • This manual is published under the terms of the GNU Free
     Documentation License (*note GNU Free Documentation License::).

You must be aware there is no warranty whatsoever for GNU Guile-CV. This
is described in full in the license.


File: guile-cv.info,  Node: Introduction,  Next: Using Guile-CV,  Prev: Preface,  Up: Top

1 Introduction
**************

* Menu:

* About Guile-CV::
* Obtaining and Installing Guile-CV::
* Contact::
* Reporting Bugs::


File: guile-cv.info,  Node: About Guile-CV,  Next: Obtaining and Installing Guile-CV,  Up: Introduction

1.1 About Guile-CV
==================

GNU Guile-CV
a Computer Vision functional programming library for Guile
(http://www.gnu.org/software/guile)

Description
-----------

Guile-CV is a Computer Vision function progrmming library for the Guile
(http://www.gnu.org/software/guile) Scheme language.  Guile-CV is based
on Vigra (http://ukoethe.github.io/vigra/) (Vision with Generic
Algorithms).  It comprises a direct binding to vigra_c
(https://github.com/BSeppke/vigra_c) (a C wrapper to a subset of the
Vigra library), and a higher level API written in Guile Scheme.

What else
---------

Guile-CV is entirely written in Guile
(http://www.gnu.org/software/guile), no C code.

Savannah
--------

GNU Guile-CV also has a Savannah (http://ftp.gnu.org/gnu/guile-cv)
project page.


File: guile-cv.info,  Node: Obtaining and Installing Guile-CV,  Next: Contact,  Prev: About Guile-CV,  Up: Introduction

1.2 Obtaining and Installing Guile-CV
=====================================

GNU Guile-CV can be obtained from the following archive site
<http://ftp.gnu.org/gnu/guile-cv>.  The file will be named
guile-cv-version.tar.gz.  The current version is 0.1.0, so the file you
should grab is:

    <http://ftp.gnu.org/gnu/guile-cv>

Dependencies
------------

GNU Guile-CV needs the following software to run:

   • Autoconf >= 2.69
   • Automake >= 1.14
   • Guile (http://www.gnu.org/software/guile) >= 2.0.13
   • Guile-Lib (http://www.nongnu.org/guile-lib) >= 0.2.5
   • Vigra (http://ukoethe.github.io/vigra/) >= 1.11.0
   • Vigra_c (https://github.com/BSeppke/vigra_c)

          Vigra_c is a C wrapper [to some of] the Vigra functionality.
          It is currently only available by cloning its source code git
          (https://git-scm.com/) repository: there is no release and no
          versioning scheme either(1).  But no big deal, its home page
          has an ’Installation’ section which guides you step by step.

          *Special note:* make sure the directory where ‘libvigra_c.so’
          has been installed is ’known’, either because it is defined in
          ‘/etc/ld.so.conf.d’, or you set the environment variable
          ‘LD_LIBRARY_PATH’, otherwise Guile won’t find it and
          ‘configure’ will report an error.

Quickstart
----------

Assuming you have satisfied the dependencies, open a terminal and
proceed with the following steps:

     cd <download-path>
     tar zxf guile-cv-0.1.0.tar.gz
     cd guile-cv-0.1.0
     ./configure [--prefix=/your/prefix]
     make
     make install

Happy Guile-CV!


*Notes:*

  1. In the above ‘configure’ step, ‘--prefix=/your/prefix’ is optional.
     The default value is ‘/usr/local’.  As an example, you could use

          ./configure --prefix=/opt

  2. To install GNU Guile-CV, you must have ‘write permissions’ for
     ‘$prefix’, Guile’s global site and site-ccache directories.

  3. GNU Guile-CV’s modules are installed in Guile’s global site
     directory.  If you want to know its location, enter the following
     expression in a terminal:

          guile -c "(display (%global-site-dir)) (newline)"

  4. Guile-CV’s compiled modules are installed in the Guile’s
     ‘site-ccache’ directory.  If you want to know its location, enter
     the following expression in a terminal:

          guile -c "(display (%site-ccache-dir)) (newline)"

  5. Like for any other GNU Tool Chain compatible software, you may
     install the documentation locally using ‘make install-info’, ‘make
     install-html’ and/or ‘make install-pdf’.  The documentation is
     installed in ‘$prefix/share/doc/guile-cv’

  6. Last but not least :), Guile-CV comes with a tests suite, which we
     recommend you to run (especially before *note Reporting Bugs::):

          make check

   ---------- Footnotes ----------

   (1) We do our best to check that the libvigra_c installed library
does contain the required Guile-CV functionalty though, and these checks
are listed as part of our ‘configure’ steps


File: guile-cv.info,  Node: Contact,  Next: Reporting Bugs,  Prev: Obtaining and Installing Guile-CV,  Up: Introduction

1.3 Contact
===========

Mailing list
------------

Guile-CV uses the following mailing list:

   • bug-guile-cv is used for Guile-CV bug reports.

   • guile-devel is used to discuss most aspects of Guile-CV, including
     development and enhancement requests.

   • guile-user is for general user help and discussion.

When sending emails to guile-user or guile-devel, please use ’Guile-CV:
’ to prefix the subject line of any Guile-CV related email, thanks!

IRC
---

Most of the time you can find me on irc, channel _#guile_, _#guix_ and
_#scheme_ on _irc.freenode.net_, _#clutter_ on _irc.gnome.org_, under
the nickname *daviid*.


File: guile-cv.info,  Node: Reporting Bugs,  Prev: Contact,  Up: Introduction

1.4 Reporting Bugs
==================

Guile-CV has a bugs tracker (FIXME). You may send your bugs report here:

   • bug-guile-cv at gnu dot org

You can (un)subscribe to the bugs report list by following instructions
on the list information page (FIXME).


File: guile-cv.info,  Node: Using Guile-CV,  Next: API Reference,  Prev: Introduction,  Up: Top

2 Using Guile-CV
****************

Guile-CV Reference Manual still is a mock-up: any help is more then
welcome to improve this situation, thanks!

* Menu:

* Guile's repl-print procedure::
* Images used in Guile-CV's documentation::


File: guile-cv.info,  Node: Guile's repl-print procedure,  Next: Images used in Guile-CV's documentation,  Up: Using Guile-CV

2.1 Guile’s repl-print procedure
================================

Guile’s repl-print procedure _must_ be modified before to start to use
Guile-CV. The default Guile’s repl-print procedure calls (write val),
which is inadequate for images, even very small images(1).

Unfortunately, Guile does not provide a simple way for its users to
modify its repl-print procedure, so, for now, there is no other way but
’getting your hands dirty’ here :), but no big deal either, here are the
steps.

The module we need to modify is ‘(system repl common)’, so let’s first
figure out where it is on your system(2):

     guile
     ...
     scheme@(guile-user)> (string-append (%package-data-dir) "/" (effective-version))
     ⊣
     $2 = "/opt2/share/guile/2.2"

The above returned value is an example of course, just proceed with the
value returned by your system.  So, the file we need to edit, in our
example, is here:

     /opt2/share/guile/2.2/system/repl/common.scm

Edit the above file and:

  1. Add the following module to the list of imported modules:

          #:use-module (ice-9 pretty-print)

  2. Search for the repl-print definition and, at the end of the
     procedure definition, replace:

          (write val)

     by

          (truncated-print val)

Save the file of course, and your good to play with Guile-CV.

   ---------- Footnotes ----------

   (1) Even for very small images, using write is inadequate, in a
terminal, and will definitely kill your Emacs/Geiser session.  Not to
mention it will raise your electricity bill :) - till you succeed to
delete its process, Emacs will use one core at more then 100%,
desperately trying to display hundreds of thousands of floating point
values, heating your laptop (if you have a laptop) up to the point
you’ll be able to cook an egg on it, and get its fans crasy...  You’ve
been warned :).

   (2) You need write privileges to modify this module, contact your
admin if you’re not in charge of the system you are working on.


File: guile-cv.info,  Node: Images used in Guile-CV's documentation,  Prev: Guile's repl-print procedure,  Up: Using Guile-CV

2.2 Images used in Guile-CV’s documentation
===========================================

All images used in Guile-CV’s documentation are distributed with the
source and installed here:

     $prefix/share/doc/guile-cv/images

All examples using ‘im-load’ and ‘im-save’ given in this manual, unless
a full pathname is specified, assume that the guile current working
directory is the above mentioned directory.  Assuming you did install in
‘/opt’, just as an example of course, a typical Guile-CV (example)
session inialization steps would be:

     M-x run-guile
     ...
     scheme@(guile-user)> (chdir "/opt/share/doc/guile-cv/images")
     scheme@(guile-user)> ,use (cv)
     scheme@(guile-user)> (im-load "lenna.png")
     ⊣
     $2 = (512 512 3 (#f32(226.0 226.0 223.0 223.0 227.0 …) …))

Note that to benefit from Emacs’s Tab completion mechanism, while typing
image filenames, Emacs itself must be in that directory, which you
acheive like this (still assuming, as an example, that you did install
in ‘/opt’):

     M-x cd
     ⊣
     Change default directory: /opt/share/doc/guile-cv/images


File: guile-cv.info,  Node: API Reference,  Next: GNU Free Documentation License,  Prev: Using Guile-CV,  Up: Top

3 API Reference
***************

* Menu:

* API Overview::
* Guile-CV::
* Support::


File: guile-cv.info,  Node: API Overview,  Next: Guile-CV,  Up: API Reference

3.1 API Overview
================

Guile-CV Low Level API
----------------------

The Guile-CV low level API is ...

Guile-CV High Level API
-----------------------

Guile-CV will also provide a higher level API ...

* Menu:

* Naming Conventions::
* Abreviations::


File: guile-cv.info,  Node: Naming Conventions,  Next: Abreviations,  Up: API Overview

3.1.1 Naming Conventions
------------------------

Vigra Funtions
--------------

Guile-CV low level API procedure names hat bind a Vigra function always
start with ‘vigra-’ ...

     bluefox
     ->
     redbear


File: guile-cv.info,  Node: Abreviations,  Prev: Naming Conventions,  Up: API Overview

3.1.2 Abreviations
------------------

In the table below we list respectively the abreviation ...


File: guile-cv.info,  Node: Guile-CV,  Next: Support,  Prev: API Overview,  Up: API Reference

3.2 Guile-CV
============

* Menu:

* Import Export::
* Image Structure and Accessors::
* Image Processing::
* Filters::
* Segmentation::
* Morphology::
* Utilities::


File: guile-cv.info,  Node: Import Export,  Next: Image Structure and Accessors,  Up: Guile-CV

3.2.1 Import Export
-------------------

The Guile-CV procedures and methods to load, save and query file system
images.

Procedures
----------

 -- Procedure: im-load filename

     Returns a Guile-CV image.

     Loads the image pointed by FILENAME and returns a Guile-CV image.
     FILENAME can either be a GREY or an RGB image.

     At this point, Guile-CV supports the following file formats: GIF,
     TIFF, JPEG, BMP, EXR, HDR, PNM (PBM, PGM, PPM), PNG, SunRaster,
     KHOROS-VIFF.

 -- Procedure: im-save image filename

     Returns #t.

     Saves IMAGE in FILENAME.  The type in which IMAGE is saved is
     determined by the FILENAME extension.

          ,use (cv)
          (define img-1 (im-load "images/lenna.png"))
          ...
          (im-save img-1 "/tmp/lenna.jpg")

 -- Method: im-size filename

     Returns the list of ‘(WIDTH HEIGHT N-CHANNEL)for FILENAME’.

 -- Method: im-width filename
 -- Method: im-height filename
 -- Method: im-n-channel filename

     Returns, respectively the WIDTH, the HEIGHT and the N-CHANNEL for
     FILENAME.

 -- Method: im-grey? filename
 -- Method: im-rgb? filename

     Returns ‘#t’ if FILENAME is respectively a GREY scale or an RGB
     image.


File: guile-cv.info,  Node: Image Structure and Accessors,  Next: Image Processing,  Prev: Import Export,  Up: Guile-CV

3.2.2 Image Structure and Accessors
-----------------------------------

The Guile-CV procedures and methods related to images data structure,
creating, accessing ad copying images.

Image Data Structure
--------------------

A Guile-CV image is represented by a list containing the following
elements:

     (WIDTH HEIGHT N-CHANNEL IDATA)

where IDATA is a list of N-CHANNEL elements, each element being a vector
of ‘(* WIDTH HEIGHT)’ cells.  More precisely, each element is an
‘srfi-4’ homogeneous numeric vector of 32 bit floats, called
‘f32vector’, knowing that ‘f32’ is the C type ‘float’.

The external representation (ie.  read syntax) for IDATA vectors is
‘#f32(...)’.  As an example, a grey scale image of width 3 and height 2,
initialized to 0.0 is represnented by the following list:

     (3 2 1 (#f32(0.0 0.0 0.0 0.0 0.0 0.0)))

The N-CHANNEL is an integer ‘>= 1’, with no limit but the memory size.
This said, most Guile-CV procedures and methods expect either GREY scale
(N-CHANNEL=1), or RGB (N-CHANNEL=3) images.  For the later, the channels
are ‘Red’, ‘Green’ and ‘Blue’ in that order.

Guile-CV provides usefull accessors for all these fields.  However, very
often, you will need them all, in which case your best friend is ‘(ice-9
match)’, here is an example:

     ,use (cv)
     (define image (im-make 4 3 3))
     (match image
       ((width height n-chan idata)
        (match idata
          ((r g b)
           ... your code here ...))))

Note that the ‘(cv)’ module imports and re-exports the public interface
of ‘(ice-9 match)’.  You will find other examples the module ‘(cv idata)
’of Guile-CV’s source code.

Procedures
----------

 -- Procedure: im-make width height n [value]
 -- Procedure: im-make-channels width height n [value]
 -- Procedure: im-make-channel width height [value]

     Returns a new image, list of channels or channel.

     Each channel is an srfi-4 homogeneous vector of 32 bit floats
     (f32vector), of WIDTH by HEIGHT initialized to VALUE.  The default
     VALUE is 0.0

 -- Procedure: im-copy image

     Returns a new fresh copy of IMAGE.

 -- Method: im-size image

     Returns the list of ‘(WIDTH HEIGHT N-CHANNEL)for IMAGE’.

 -- Method: im-width image
 -- Method: im-height image
 -- Method: im-n-channel image
 -- Method: im-channels image
 -- Procedure: im-channel image n

     Returns, respectively the WIDTH, the HEIGHT, N-CHANNEL, CHANNELS or
     the Nth channel for IMAGE.

     Caution: ‘im-channels’ and ‘im-channel’ return the IMAGE either the
     list of or a specific channel, and should not be used in a ‘repl’,
     unless on very small and testing images.  Otherwise, even on small
     images, it might be ok in a terminal, but will definitely will kill
     your emacs.

 -- Procedure: im-image? image
 -- Procedure: im-binary? image
 -- Method: im-grey? image
 -- Method: im-rgb? image

     Returns ‘#t’ if IMAGE is respectively a Guile-CV image, a BINARY
     (black and white), a GREY scale or an RGB image.

     Notes: (a) ‘im-image?’ is a relatively ‘expensive’ operation and
     offered for debugging purposes, but it is not recommended to use
     ‘in production’; (b) because of the former, ‘im-grey?’ and
     ‘im-rgb?’ do _not_ check if IMAGE is a valid Guile-CV image,
     instead, they only check for N-CHANNEL=1 and N-CHANNEL=3.

 -- Procedure: im-=? [precision] i1 i2 i3 ...
 -- Procedure: im-list=? images [precision]

     Returns ‘#t’ if I1 I2 I3 ... or IMAGES are of the same size, have
     the same number of channels that all respectively contain the same
     values.

     If the first argument for ‘im-=?’ is a number, it is used as the
     precision to compare pixel values: 1.0e-4 is the default precision
     value.

 -- Procedure: im-ref image i j [k]
 -- Procedure: im-fast-ref image i j [k]

     Returns the pixel value stored at position I and J of the IMAGE
     channel K.  The default value for K is 0.

     IM-FAST-REF does not check the validity of its arguments: use it at
     your own risk.

 -- Procedure: im-set! image i j [k] value
 -- Procedure: im-fast-set! image i j [k] value

     Returns nothing.

     Sets the pixel value stored at position I and J of the IMAGE
     channel K to VALUE.  The default value for K is 0.

     IM-FAST-SET! does not check the validity of its arguments: use it
     at your own risk.

 -- Procedure: im-channel-offset i j width height
 -- Procedure: im-fast-channel-offset i j width

     Returns the channel offset for the I and J indices, based on the
     WIDTH and HEIGHT of the channel.

     This procedure converts the matrix indices I and J to a vector
     offset for a channel of size WIDTH and HEIGHT.

     IM-FAST-CHANNEL-OFFSET does not check the validity of its
     arguments: use it at your own risk.

 -- Procedure: im-channel-ref channel i j width height
 -- Procedure: im-fast-channel-ref channel i j width

     Returns the pixel value stored at position I and J of the channel
     of size WIDTH and HEIGHT.

     IM-FAST-CHANNEL-REF does not check the validity of its arguments:
     use it at your own risk.

 -- Procedure: im-channel-set! channel i j width height value
 -- Procedure: im-fast-channel-set! channel i j width value

     Returns nothing.

     Sets the pixel at position I and J of CHANNEL of size WIDTH and
     HEIGHT to VALUE.

     IM-FAST-CHANNEL-SET! does not check the validity of its arguments:
     use it at your own risk.

 -- Procedure: im-collect images what

     Returns a list of WHAT collected from the list of IMAGES.

     The valid WHAT synbols are:
          ‘size’
          ‘width’
          ‘height’
          ‘n-channel’
          ‘channels’
          ‘chan-0, grey, red’
          ‘chan-1, green’
          ‘chan-2, blue’
          ‘chan-k (*)’

     (*): whith k being a valid channel indice, [0 (- n 1)].

 -- Procedure: im-display image [#:proc identity] [#:port
          (current-output-port)]
 -- Procedure: im-display-channel channel width height [#:proc identity]
          [#:port (current-output-port)]

     Returns nothing.

     Displays the content of IMAGE or CHANNEL on PORT, applying PROC to
     each pixel value.

          ...
          $5 = (3 2 3 (#f32(0.0 1.0 2.0 3.0 4.0 5.0) ... ...)
          (im-display $5 #:proc inexact->exact)
          ⊣
          Channel 1
            0  1  2
            3  4  5
          Channel 2
            6  7  8
            9  10  11
          Channel 3
            12  13  14
            15  16  17

     Caution: unless you specify PORT, both this and *note
     im-display-channel:: procedures are ment to be used on very small
     and testing images, otherwise even on a small image, it might be ok
     in a terminal, but it will definitely will kill your emacs.


File: guile-cv.info,  Node: Image Processing,  Next: Filters,  Prev: Image Structure and Accessors,  Up: Guile-CV

3.2.3 Image Processing
----------------------

The Guile-CV procedures and methods to process images.

Procedures
----------

 -- Procedure: im-resize image new-width new-height [#:i-mode 'bilinear]
 -- Procedure: im-resize-channel channel width height new-width
          new-height [#:i-mode 'bilinear]

     Returns a new image or chanbnel resized to NEW-WIDTH, NEW-HEIGHT.

     The interpolation mode #:I-MODE, can be one of:

          ‘none’
          ‘bilinear’
          ‘biquadratic’
          ‘bicubic’
          ‘? (fixme)’

 -- Procedure: im-rotate image angle [#:i-mode 'bilinear]
 -- Procedure: im-rotate-channel channel width height angle [#:i-mode
          'bilinear]

     Returns a new image or channel rotated by ANGLE.

     The ANGLE is in degrees: ‘+/-[0.0 360.0]’.

     It is neccessary, for rotations other than multiples of 90°, to
     recalculate the target coordinates, since after the rotation, they
     might be floats.  The ’next neighbor’ interpolation possible modes,
     #:I-MODE, are:

          ‘bilinear’
          ‘biquadratic’
          ‘bicubic’
          ‘? (fixme)’

 -- Procedure: im-flip image axis
 -- Procedure: im-flip-channel channel width height axis

     Returns a new image or channel flipped by AXIS.

     The rotation AXIS can be one of:

          ‘horizontal’
          ‘vertical’
          ‘both’

 -- Procedure: im-crop-size width height left top right bottom

     Returns a list, ‘(new-width new-height)’.

     Given the original image WIDTH and HEIGHT, this procedure checks
     that LEFT, TOP, RIGHT and BOTTOM are valid and return a list,
     ‘(new-width new-height)’, otherwise, it raises an error.

 -- Procedure: im-crop image left top right bottom
 -- Procedure: im-crop-channel channel width height left top right
          bottom [#:new-w #f] [#:new-h #f]

     Returns a new image, resulting of the crop of IMAGE at LEFT, TOP,
     RIGHT and BOTTOM.

 -- Procedure: im-padd-size width height left top right bottom

     Returns a list, ‘(new-width new-height)’.

     Given the original image WIDTH and HEIGHT, this procedure checks
     that LEFT, TOP, RIGHT and BOTTOM are ‘>= 0.0’ and return a list,
     ‘(new-width new-height)’, otherwise, it raises an error.

 -- Procedure: im-padd image left top right bottom
 -- Procedure: im-padd-channel channel width height left top right
          bottom [#:new-w #f] [#:new-h #f]

     Returns a new image, resulting of the padding of IMAGE by LEFT,
     TOP, RIGHT and BOTTOM pixels initialized to 0.0

 -- Procedure: im-rgb->grey image

     Returns a new GREY image.

 -- Procedure: im-threshold image threshold [#:bg 'dark] [#:prec 1.0e-4]

     Returns a new BLACK and WHITE image.

     Valid #:BG values are ‘'(dark light)’, the default is ‘dark’.  If
     IMAGE is an RGB image, *note im-rgb->grey:: is first called.

     Pixels for which the original value is ‘>=’ THRESHOLD are set to
     255.0 if #:BG is ‘'dark’, and set to 0.0 if #:BG is ‘'light’.  The
     other pixels are set to 0.0 or 255.0 respectively.

 -- Procedure: im-and i1 i2 i3 ...
 -- Procedure: im-or i1 i2 i3 ...

     Returns IMAGE if one argument only, otherwise, it returns a new
     image, as the result of computing the logical ‘AND’ or ‘OR’ of all
     images.

     In the case of ‘AND’, for all positive results, the pixel value (of
     each channel) of the new image is set to the one obtained from I1,
     and ‘0.0’ otherwise.

     In the case of ‘OR’, the pixel value (of each channel) of the new
     image is to the one obtained from I1 when it is ‘> 0.0’, otherwise,
     it is set to the corresponding pixel mean value of all other
     images.

     All images must have the same ‘width’ and ‘height’.

 -- Procedure: im-complement image

     Returns a new image.

     This procedure computes the mathematical complement of IMAGE, which
     for Guile-CV means that for each pixel of each channel, the new
     value is ‘(- 255.0 pixel-value)’.


File: guile-cv.info,  Node: Filters,  Next: Segmentation,  Prev: Image Processing,  Up: Guile-CV

3.2.4 Filters
-------------

The Guile-CV procedures and methods to filter images.

Procedures
----------

 -- Procedure: im-gaussian-blur image sigma
 -- Procedure: im-gaussian-blur-channel channel width height sigma

     Returns a new image or channel.

     The new image or new channel is the result of the computation of
     the Gaussian blurring, also known as the Gaussian smoothing, by
     means of a convolution of IMAGE or CHANNEL with a 2D Gaussian
     function, where SIGMA is the standard deviation of the Gaussian
     distribution.

 -- Procedure: im-gaussian-gradient image sigma
 -- Procedure: im-gaussian-gradient-channel channel width height sigma

     Returns a new image or channel.  SIGMA.

     The new image or new channel is the result of the computation of
     the strength of the first order partial derivatives by means of a
     convolution of IMAGE or CHANNEL with the first order derivative of
     a 2D Gaussian function, where SIGMA is the standard deviation of
     the Gaussian distribution.


File: guile-cv.info,  Node: Segmentation,  Next: Morphology,  Prev: Filters,  Up: Guile-CV

3.2.5 Segmentation
------------------

The Guile-CV procedures and methods related to segmentation.

Procedures
----------

 -- Procedure: im-label image [#:con 8] [#:bg 'dark]
 -- Procedure: im-label-channel channel width height [#:con 8] [#:bg
          'dark]
 -- Procedure: im-label-all image [#:con 8]
 -- Procedure: im-label-all-channel channel width height [#:con 8]

     Returns two values: a new GREY image or GREY channnel, and the
     total number of objects.

     The ‘im-label’ and ‘im-label-channel’ procedures label foreground
     objects in the binary IMAGE.  In the new image or channel, 0.0
     indicates a background pixel, 1.0 indicates that the pixel belongs
     to object number 1, 2.0 that the pixel belongs to object number 2,
     etc.

     The ‘im-label-all’ and ‘im-label-all-channel’ procedures label all
     objects in the binary IMAGE, with no specific distinction for any
     _background value_.  As a result, these two procedures will label
     not only the continuous background, if any, but also any hole(s).
     As an example, they are used by *note im-fill::, defined in the
     module ‘(cv morphology)’, which you may have a look at for a better
     understanding of how it works.

     Two pixels belong to the same object if they are neighbors.  By
     default the algorithm uses 8-connectivity to define a neighborhood,
     but this can be changed through the keyword argument #:CON, which
     can be either 4 or 8.

[../images/pp-17-bf][../images/pp-17-label][../images/pp-17-label-all]
     Here above, left being the original image, you can see the
     difference between ‘im-label’ (1 object) and ‘im-label-all’ (6
     objects).  Note that we had to run ‘im-threshold’ on the original
     image first (all labeling procedures take a binary image (or
     channel) as their mandatory argument), for the record, we used
     ‘128’ as the threshold value.


File: guile-cv.info,  Node: Morphology,  Next: Utilities,  Prev: Segmentation,  Up: Guile-CV

3.2.6 Morphology
----------------

The Guile-CV procedures and methods related to morphology.

Procedures
----------

 -- Procedure: im-disc-erode image radius
 -- Procedure: im-disc-erode-channel channel width height radius

     Returns a new image or channnel.

     Performs the morpholgical erosion of IMAGE using a disc of a given
     RADIUS.  Here is an example:

          (im-make 5 5 1 1.0)
          ⊣
          $2 = (5 5 1 (#f32(1.0 1.0 1.0 1.0 1.0 …)))
          (im-set! $2 1 2 0.0)
          (im-disc-erode $2 1)
          ⊣
          $3 = (5 5 1 (#f32(1.0 0.0 0.0 0.0 1.0 …)))
          (im-display $2 #:proc inexact->exact)
          ⊣
          Channel 1
            1  1  1  1  1
            1  1  0  1  1
            1  1  1  1  1
            1  1  1  1  1
            1  1  1  1  1
          (im-display $3 #:proc inexact->exact)
          ⊣
          Channel 1
            1  0  0  0  1
            1  0  0  0  1
            1  0  0  0  1
            1  1  1  1  1
            1  1  1  1  1

 -- Procedure: im-disc-dilate image radius
 -- Procedure: im-disc-dilate-channel channel width height radius

     Returns a new image or channnel.

     Performs the morpholgical dilatation of IMAGE using a disc of a
     given RADIUS.  Here is an example:

          ...
          ⊣
          $13 = (11 11 1 (#f32(0.0 0.0 0.0 0.0 0.0 …)))
          (im-disc-dilate $13 1)
          ⊣
          $14 = (11 11 1 (#f32(1.0 1.0 1.0 1.0 1.0 …)))
          (im-display $13 #:proc inexact->exact)
          ⊣
          Channel 1
            0  0  0  0  0  0  0  0  0  0  0
            0  1  1  1  1  0  0  1  1  1  0
            0  1  1  1  1  0  0  1  1  1  0
            0  1  1  1  1  1  1  1  1  1  0
            0  1  1  1  1  1  1  1  1  1  0
            0  1  1  0  0  0  1  1  1  1  0
            0  1  1  0  0  0  1  1  1  1  0
            0  1  1  0  0  0  1  1  1  1  0
            0  1  1  1  1  1  1  1  0  0  0
            0  1  1  1  1  1  1  1  0  0  0
            0  0  0  0  0  0  0  0  0  0  0
          (im-display $14 #:proc inexact->exact)
          ⊣
          Channel 1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  0  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  1  1
            1  1  1  1  1  1  1  1  1  0  0
            1  1  1  1  1  1  1  1  1  0  0

 -- Procedure: im-open image
 -- Procedure: im-open-channel channel width height

     Returns a new image or channnel.

     FIXME.

 -- Procedure: im-close image
 -- Procedure: im-close-channel channel width height

     Returns a new image or channnel.

     FIXME.

 -- Procedure: im-fill image
 -- Procedure: im-fill-channel channel width height

     Returns a new image or channnel.

     FIXME.


File: guile-cv.info,  Node: Utilities,  Prev: Morphology,  Up: Guile-CV

3.2.7 Utilities
---------------

Other Guile-CV procedures and methods utilities.

Procedures
----------

 -- Method: im-show filename
 -- Method: im-show image
 -- Method: im-show image name

     Returns the string "#<Image: ...>", where "..." is either FILENAME
     or a filename constructed by im-show, see below.

     These three methods will also effectively dislay the image if you
     are using Geiser (http://www.nongnu.org/geiser), which analyzes
     Guile’s procedures and methods returned values (through the use of
     its pattern matcher), and when appropriate, triggers its image
     display mechanism.

     Geiser has two variables that allow you to choose either to inline
     images in its Emacs (https://www.gnu.org/software/emacs) (Guile
     repl) buffer, or to display them using externel viewer:
     ‘geiser-image-viewer’ and ‘geiser-repl-inline-images-p’.  You may
     choose to add these variables in your ‘.emacs’ file, for example:

          (setq geiser-image-viewer "eog")
          (setq geiser-repl-inline-images-p nil)

     Note that ‘(setq geiser-repl-inline-images-p t)’ will only work if
     you are using a graphics-aware Emacs, and otherwise, will fall on
     the external viewer approach, if the variable ‘geiser-image-viewer’
     has been defined.  When using Geiser in a non graphics-aware Emac,
     or when using the external viewer approach, images will appear as
     buttons: press return on them to invoke (or raise) the external
     viewer (window containing that image).

     Except for the first ‘im-show’ method, Guile-CV has to save the
     IMAGE first, and does it in the location defined by the *note
     %image-cache:: variable.  If you call ‘im-show’ passing NAME, the
     IMAGE is saved as ‘%image-cache/NAME.png’, otherwise under a
     generated name, the result of ‘(symbol->string (gensym
     "im-show-"))’.

     Note that if you do not specify NAME, a new external viewer window
     is opened at each ‘im-show’ invocation, even for identical IMAGE
     calls: this because in Guile-CV, on purpose, images are just list,
     with no (unique) identifier, and there is no way for ‘im-show’ to
     know ...  Further to this point, when you pass NAME as an argument,
     you are not ‘identifying’ IMAGE, which may actually differ, but
     rather just ask to reuse the filename and hence the external viewer
     window associated with it.

     Last note: many external viewers, such as Eog (the Gnome Eye
     Viewer), will try to apply, per default, some sort of smoothing
     techniques, especially on ‘zoom-in’ and ‘zoom-out’: where this is
     fine for viewing ‘lazer’ pictures, you probably want to check and
     disable these options when working with Guile-CV.

Variables
---------

 -- Variable: %image-cache

     Specifies the location used by *note im-show:: to save images.

     The default value is ‘/tmp/<username>/guile-cv’, but you may ‘set!’
     it.  If you’d like to reuse that location for future guile-cv
     sessions, you may save it in guile-cv’s ‘per user’ config file
     ‘<userdir>/.config/guile-cv’ as an assoc pair, here is an example:

          cat ~/.config/guile-cv.conf
          ((image-cache . "~/tmp"))

     Note that if used, the ‘~’ is expanded at load time, so in geiser,
     it becomes:

          scheme@(guile-user)> ,use (cv)
          scheme@(guile-user)> %image-cache
          ⊣
          $2 = "/home/david/tmp"

 -- Variable: %image-cache-format

     Specifies the format used by *note im-show:: to save images.

     The default value is ‘"png"’, but you may ‘set!’ it.  If you’d like
     to reuse that format for future guile-cv sessions, you may save it
     in guile-cv’s ‘per user’ config file ‘<userdir>/.config/guile-cv’,
     as an assoc pair, here is an example:

          cat ~/.config/guile-cv.conf
          ((image-cache-format . "jpg"))


File: guile-cv.info,  Node: Support,  Prev: Guile-CV,  Up: API Reference

3.3 Support
===========

Guile-CV uses a series of support modules, each documented in the
following subsections.  You may either import them all, like this
‘(use-modules (cv support))’, or individually, such as ‘(use-modules (cv
support modules))’, ‘(use-modules (cv support goops))’, ...

* Menu:

* Modules::
* Goops::
* G-export::
* Utils::


File: guile-cv.info,  Node: Modules,  Next: Goops,  Up: Support

3.3.1 Modules
-------------

     ‘*note re-export-public-interface::’

 -- Special Form: re-export-public-interface . args
     Re-export the public interface of a module or modules.  Invoked as
     ‘(re-export-modules (mod1) (mod2)...)’.


File: guile-cv.info,  Node: Goops,  Next: G-export,  Prev: Modules,  Up: Support

3.3.2 Goops
-----------


File: guile-cv.info,  Node: G-export,  Next: Utils,  Prev: Goops,  Up: Support

3.3.3 G-export
--------------


File: guile-cv.info,  Node: Utils,  Prev: G-export,  Up: Support

3.3.4 Utils
-----------


File: guile-cv.info,  Node: GNU Free Documentation License,  Next: Concept Index,  Prev: API Reference,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

\input texinfo


File: guile-cv.info,  Node: Concept Index,  Next: Procedure Index,  Prev: GNU Free Documentation License,  Up: Top

Concept Index
*************

This index contains concepts, keywords and non-Schemey names for several
features, to make it easier to locate the desired sections.

 [index ]
* Menu:

* copying:                               Guile-CV License.     (line  6)
* Gaussian blur:                         Filters.              (line 13)
* Gaussian gradient:                     Filters.              (line 24)
* Gaussian smooth:                       Filters.              (line 13)
* GPL:                                   Guile-CV License.     (line  6)
* license:                               Guile-CV License.     (line  6)
* User configuration:                    Utilities.            (line 67)


File: guile-cv.info,  Node: Procedure Index,  Next: Variable Index,  Prev: Concept Index,  Up: Top

Procedure Index
***************

This is an alphabetical list of all the procedures, methods and macros
in Guile-CV.

 [index ]
* Menu:

* im-=?:                                 Image Structure and Accessors.
                                                              (line  99)
* im-and:                                Image Processing.    (line  99)
* im-binary?:                            Image Structure and Accessors.
                                                              (line  86)
* im-channel:                            Image Structure and Accessors.
                                                              (line  74)
* im-channel-offset:                     Image Structure and Accessors.
                                                              (line 130)
* im-channel-ref:                        Image Structure and Accessors.
                                                              (line 142)
* im-channel-set!:                       Image Structure and Accessors.
                                                              (line 151)
* im-channels:                           Image Structure and Accessors.
                                                              (line  73)
* im-close:                              Morphology.          (line  93)
* im-close-channel:                      Morphology.          (line  94)
* im-collect:                            Image Structure and Accessors.
                                                              (line 162)
* im-complement:                         Image Processing.    (line 117)
* im-copy:                               Image Structure and Accessors.
                                                              (line  62)
* im-crop:                               Image Processing.    (line  62)
* im-crop-channel:                       Image Processing.    (line  63)
* im-crop-size:                          Image Processing.    (line  54)
* im-disc-dilate:                        Morphology.          (line  43)
* im-disc-dilate-channel:                Morphology.          (line  44)
* im-disc-erode:                         Morphology.          (line  11)
* im-disc-erode-channel:                 Morphology.          (line  12)
* im-display:                            Image Structure and Accessors.
                                                              (line 179)
* im-display-channel:                    Image Structure and Accessors.
                                                              (line 181)
* im-fast-channel-offset:                Image Structure and Accessors.
                                                              (line 131)
* im-fast-channel-ref:                   Image Structure and Accessors.
                                                              (line 143)
* im-fast-channel-set!:                  Image Structure and Accessors.
                                                              (line 152)
* im-fast-ref:                           Image Structure and Accessors.
                                                              (line 111)
* im-fast-set!:                          Image Structure and Accessors.
                                                              (line 120)
* im-fill:                               Morphology.          (line 100)
* im-fill-channel:                       Morphology.          (line 101)
* im-flip:                               Image Processing.    (line  43)
* im-flip-channel:                       Image Processing.    (line  44)
* im-gaussian-blur:                      Filters.             (line  11)
* im-gaussian-blur-channel:              Filters.             (line  12)
* im-gaussian-gradient:                  Filters.             (line  22)
* im-gaussian-gradient-channel:          Filters.             (line  23)
* im-grey?:                              Import Export.       (line  46)
* im-grey? <1>:                          Image Structure and Accessors.
                                                              (line  87)
* im-height:                             Import Export.       (line  40)
* im-height <1>:                         Image Structure and Accessors.
                                                              (line  71)
* im-image?:                             Image Structure and Accessors.
                                                              (line  85)
* im-label:                              Segmentation.        (line  11)
* im-label-all:                          Segmentation.        (line  14)
* im-label-all-channel:                  Segmentation.        (line  15)
* im-label-channel:                      Segmentation.        (line  12)
* im-list=?:                             Image Structure and Accessors.
                                                              (line 100)
* im-load:                               Import Export.       (line  12)
* im-make:                               Image Structure and Accessors.
                                                              (line  52)
* im-make-channel:                       Image Structure and Accessors.
                                                              (line  54)
* im-make-channels:                      Image Structure and Accessors.
                                                              (line  53)
* im-n-channel:                          Import Export.       (line  41)
* im-n-channel <1>:                      Image Structure and Accessors.
                                                              (line  72)
* im-open:                               Morphology.          (line  86)
* im-open-channel:                       Morphology.          (line  87)
* im-or:                                 Image Processing.    (line 100)
* im-padd:                               Image Processing.    (line  77)
* im-padd-channel:                       Image Processing.    (line  78)
* im-padd-size:                          Image Processing.    (line  69)
* im-ref:                                Image Structure and Accessors.
                                                              (line 110)
* im-resize:                             Image Processing.    (line  11)
* im-resize-channel:                     Image Processing.    (line  12)
* im-rgb->grey:                          Image Processing.    (line  84)
* im-rgb?:                               Import Export.       (line  47)
* im-rgb? <1>:                           Image Structure and Accessors.
                                                              (line  88)
* im-rotate:                             Image Processing.    (line  25)
* im-rotate-channel:                     Image Processing.    (line  26)
* im-save:                               Import Export.       (line  23)
* im-set!:                               Image Structure and Accessors.
                                                              (line 119)
* im-show:                               Utilities.           (line  11)
* im-show <1>:                           Utilities.           (line  12)
* im-show <2>:                           Utilities.           (line  13)
* im-size:                               Import Export.       (line  35)
* im-size <1>:                           Image Structure and Accessors.
                                                              (line  66)
* im-threshold:                          Image Processing.    (line  88)
* im-width:                              Import Export.       (line  39)
* im-width <1>:                          Image Structure and Accessors.
                                                              (line  70)
* re-export-public-interface:            Modules.             (line   8)


File: guile-cv.info,  Node: Variable Index,  Next: Type Index,  Prev: Procedure Index,  Up: Top

Variable Index
**************

This is an alphabetical list of all the important variables and
constants in Guile-CV.

 [index ]
* Menu:

* %image-cache:                          Utilities.            (line 66)
* %image-cache-format:                   Utilities.            (line 86)


File: guile-cv.info,  Node: Type Index,  Prev: Variable Index,  Up: Top

Type Index
**********

This is an alphabetical list of all the important data types defined in
the Guile-CV Programmers Manual.



Tag Table:
Node: Top649
Node: Preface1472
Node: Contributors to this manual1717
Node: Guile-CV License2209
Node: Introduction2914
Node: About Guile-CV3136
Node: Obtaining and Installing Guile-CV4022
Ref: Obtaining and Installing Guile-CV-Footnote-17124
Node: Contact7315
Node: Reporting Bugs8085
Node: Using Guile-CV8426
Node: Guile's repl-print procedure8759
Ref: Guile's repl-print procedure-Footnote-110269
Ref: Guile's repl-print procedure-Footnote-210767
Node: Images used in Guile-CV's documentation10903
Node: API Reference12163
Node: API Overview12365
Node: Naming Conventions12713
Node: Abreviations13021
Node: Guile-CV13211
Node: Import Export13476
Ref: im-load13719
Ref: im-save14067
Ref: im-size14367
Ref: im-width14467
Ref: im-height14467
Ref: im-n-channel14467
Ref: im-grey?14650
Ref: im-rgb?14650
Node: Image Structure and Accessors14796
Ref: im-make16639
Ref: im-make-channels16639
Ref: im-make-channel16639
Ref: im-copy17007
Ref: im-size_17078
Ref: im-width_17172
Ref: im-height_17172
Ref: im-n-channel_17172
Ref: im-channels_17172
Ref: im-channel17172
Ref: im-image?17749
Ref: im-binary?17749
Ref: im-grey?_17749
Ref: im-rgb?_17749
Ref: im-=?18349
Ref: im-list=?18349
Ref: im-ref18760
Ref: im-fast-ref18760
Ref: im-set!19049
Ref: im-fast-set!19049
Ref: im-channel-offset19382
Ref: im-fast-channel-offset19382
Ref: im-channel-ref19816
Ref: im-fast-channel-ref19816
Ref: im-channel-set!20130
Ref: im-fast-channel-set!20130
Ref: im-collect20471
Ref: im-display20907
Ref: im-display-channel20907
Node: Image Processing21828
Ref: im-resize22071
Ref: im-resize-channel22071
Ref: im-rotate22502
Ref: im-rotate-channel22502
Ref: im-flip23104
Ref: im-flip-channel23104
Ref: im-crop-size23363
Ref: im-crop23683
Ref: im-crop-channel23683
Ref: im-padd-size23940
Ref: im-padd24267
Ref: im-padd-channel24267
Ref: im-rgb->grey24552
Ref: im-threshold24619
Ref: im-and25093
Ref: im-or25093
Ref: im-complement25804
Node: Filters26053
Ref: im-gaussian-blur26260
Ref: im-gaussian-blur-channel26260
Ref: im-gaussian-gradient26705
Ref: im-gaussian-gradient-channel26705
Node: Segmentation27187
Ref: im-label27405
Ref: im-label-channel27405
Ref: im-label-all27405
Ref: im-label-all-channel27405
Node: Morphology29234
Ref: im-disc-erode29448
Ref: im-disc-erode-channel29448
Ref: im-disc-dilate30357
Ref: im-disc-dilate-channel30357
Ref: im-open31942
Ref: im-open-channel31942
Ref: im-close32076
Ref: im-close-channel32076
Ref: im-fill32212
Ref: im-fill-channel32212
Node: Utilities32346
Ref: im-show32527
Ref: %image-cache35260
Ref: %image-cache-format35960
Node: Support36423
Node: Modules36857
Ref: re-export-public-interface37000
Node: Goops37174
Node: G-export37283
Node: Utils37396
Node: GNU Free Documentation License37489
Node: Concept Index62857
Node: Procedure Index63671
Node: Variable Index71549
Node: Type Index71935

End Tag Table


Local Variables:
coding: utf-8
End:
