\input texinfo    @c -*-texinfo-*-
@c %**start of header
@setfilename guile-gtk.info
@include version.texi
@settitle Gtk Guile
@iftex
@afourpaper
@end iftex
@comment %**end of header

@copying
This manual describes how to install and use the Guile interface to Gtk,
version @value{VERSION}.

Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by Free Software Foundation.
@end copying

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore


@c  @nicode{S} is plain S in info, or @code{S} elsewhere.  This can be used
@c  when the quotes that @code{} gives in info aren't wanted, but the
@c  fontification in tex or html is wanted.
@ifinfo
@macro nicode {S}
\S\
@end macro
@end ifinfo
@ifnotinfo
@macro nicode {S}
@code{\S\}
@end macro
@end ifnotinfo


@dircategory GNU libraries
@direntry
* guile-gtk: (guile-gtk).	Guile interface to Gtk.
@end direntry

@c  @cross{} is a \times symbol in tex, or an "x" in info.
@c  In tex it works inside or outside $ $.
@tex
\gdef\cross{\ifmmode\times\else$\times$\fi}
@end tex
@ifnottex
@macro cross
x
@end macro
@end ifnottex

@c  html <meta name=description content="...">
@documentdescription
How to install and use the Guile interface to Gtk, version @value{VERSION}.
@end documentdescription

@c No markers for overfull, underfull, etc
@iftex
@finalout
@end iftex

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Guile-Gtk
@end ifnottex

@iftex
@titlepage

@title Guile-Gtk
@subtitle Guile Interface to Gtk
@subtitle Edition @value{EDITION}
@subtitle @value{UPDATED}

@page
@vskip 0pt plus 1filll
@end iftex

@insertcopying
@ifnottex
@sp 1
@end ifnottex

@iftex
@end titlepage
@end iftex

@menu
* Introduction::                
* Installing::                  
* Reporting Bugs::              
* General Conventions::         
* Gdk Module::                  
* Gdk Extras::                  
* Gtk Module::                  
* Gtk Extras::                  
* GdkPixbuf Module::            
* Glade Module::                
* Gtk GL Module::               
* Gtk GL Extras::               
* Tips and Techniques::         
* Known Bugs::                  
* Obsolete Features::           
* Example Programs::            
* Internals::                   
* Concept Index::               
* Function and Type Index::     
@end menu

@ifnothtml
@contents
@end ifnothtml


@node Introduction, Installing, Top, Top
@chapter Introduction
@cindex Introduction

Guile-Gtk makes the Gtk+, Gdk-Pixbuf, Glade and Gtk-GL graphical user
interface libraries available from within Guile.  (@pxref{Top,, The Guile
Reference Manual, guile, The Guile Reference Manual})

This manual makes no attempt to document those libraries, only how to use them
from Guile.

Currently, Guile-Gtk supports Gtk version 2.0 and higher, and versions of
Gdk-Pixbuf, Glade and Gtk-GL corresponding to that.  It's intended that Gnome
will be supported by a new line of development called Guile-Gnome
(@uref{http://www.gnu.org/software/guile-gnome/}).

@cindex Home page
@cindex Web page
@cindex Mailing list
The Guile-Gtk home page is at the following URL.  A mailing list for users and
developers is available, see the home page for details.

@quotation
@uref{http://www.gnu.org/software/guile-gtk}
@end quotation

As a taste of Guile-Gtk style, here's a hello world program.  Those familiar
with Gtk should find it straightforward.  A toplevel window is created, a
label widget added, the result realized, and a main loop run.

@cindex Hello world example
@example
(use-modules (gtk-2.0 gtk))

(define top (gtk-window-new 'toplevel))
(gtk-signal-connect top "destroy" gtk-exit)

(define label (gtk-label-new " Hello world! "))
(gtk-container-add top label)

(gtk-widget-show-all top)
(gtk-main)
@end example


@node Installing, Reporting Bugs, Introduction, Top
@chapter Installing
@cindex Installing

To build and install Guile-Gtk you will need Guile 1.6.4 or higher, and Glib
and Gtk versions 2.0 or higher (and their various dependencies).  Gdk-Pixbuf,
Glade and Gtk-GL are optional, support for them in Guile-Gtk is included if
they're available.

@cindex Configure
Guile-Gtk uses an Autoconf, Automake and Libtool based configuration system.
A basic build can be made with,

@example
./configure
make
@end example

@cindex Check
@cindex Self tests
@noindent
Some self-tests can be run with

@example
make check
@end example

@noindent
And you can install (under @file{/usr/local} by default) with

@example
make install
@end example

The file @file{INSTALL} has generic information about @samp{./configure}.
Running @samp{./configure --help} will print a summary of the usage and
options.

@table @asis
@item @option{--with-gdk-pixbuf=yes/no}
@itemx @option{--with-glade=yes/no}
@itemx @option{--with-gtkgl=yes/no}
Enable or disable Gdk-Pixbuf, Glade, or Gtk-GL support, respectively.  The
default for each is to enable if available.

@item @option{--prefix}
Installing under the same @option{--prefix} as Guile will make Guile-Gtk
available immediately.  If installed under a different tree it will be
necessary to add to @code{%load-path} and possibly @code{LTDL_LIBRARY_PATH} so
the modules and interface libraries can be found.

@item Threads
The threads method (pthreads, coop, or none) used in Guile is noticed by
Guile-Gtk at compile-time, and used to setup the threads support within
Guile-Gtk (@pxref{General Conventions}).  The resulting Guile-Gtk can only be
used with a Guile built with the same threads method.

For Guile 1.8, where the choices are pthreads or no threads, the intention is
instead to notice that choice at runtime (because Glib always has pthreads
builtin anyway).  But as of Guile 1.8.2 certain threads-dependent code is
inlined by Guile, so runtime detection doesn't yet work.
@c  SCM_FREELIST_LOC() in the inlined scm_cell() is the offending bit.
@c  Hopefully to be fixed before long.
@end table


@node Reporting Bugs, General Conventions, Installing, Top
@chapter Reporting Bugs
@cindex Bugs
@cindex Reporting bugs

If you think you've found a bug in Guile-Gtk, please investigate and make a
full report.  See also @ref{Known Bugs}.  Include the following in any report,

@itemize @bullet
@item
System and CPU type, obtained from running @samp{./config.guess} (or
@samp{uname -a} if your system is unknown).

@item
The versions of Guile-Gtk, Guile, Gtk and Glib, the configuration options
used, and if patched or packaged then say so.

@item
The build compiler and its version.

@item
A test program illustrating the problem.  Describe how to run it, what it
does, and what you think it should do.

@item
If you get a Scheme level error, include the backtrace obtained from running
with @samp{guile --debug}.

@item
If you get a C level crash, try running under the debugger and include a
backtrace (@samp{where} in GDB) if it's informative.

@item
If the bug is related to @samp{./configure}, then send the contents of
@file{config.log}.
@end itemize

@noindent
Send your report to @email{guile-gtk-general@@gnu.org}.


@node General Conventions, Gdk Module, Reporting Bugs, Top
@chapter General Conventions
@cindex Conventions

Unless otherwise stated, Gtk+ functions and variables are made available in
Guile with names transformed to Scheme style.  This means underscores become
hyphens, and only lower case is used.

For instance the C function @code{gtk_label_new} is @code{gtk-label-new} in
Guile, or @code{GTK_WIDGET_FLAGS} is @code{gtk-widget-flags}.

The following general rules are applied to parameters and return values.

@table @asis
@item @code{NULL}
@cindex @code{NULL}
@code{NULL} is represented as @code{#f}, for functions which accept or return
that.

@item @code{int}, @code{gint}, etc
@cindex Integers
@findex gint
All integer types are simply Guile integers.  Range checks are applied to
parameters, and ``inexact'' values are not accepted, even if they happen to be
integers.  (@pxref{Exactness,, Exact and Inexact Numbers, guile, The Guile
Reference Manual})

@item @code{gboolean}
@cindex Booleans
@findex gboolean
Booleans are returned as the usual Scheme @code{#t} and @code{#f}.  For
parameters, any non-@code{#f} value is taken to be true.

@item @code{GList}, @code{GSList} etc
@cindex Lists
@findex GList
@findex GSList
Glib lists are returned as Guile lists.  For instance
@code{gtk-container-children} returns a list of widgets.  In parameters,
either a Guile list or vector can be given.

@item Arrays
@cindex Arrays
C level arrays are returned as Guile lists.  In parameters, either a Guile
list or vector can be given.  For instance @code{gtk-curve-set-vector} takes a
list or vector of floats.

@item Enumerations
@cindex Enumerations
Enumerations are represented in Guile as symbols, with names corresponding to
the C definitions and without the prefix indicating their type.

For instance @code{GtkWindowType} value @code{GTK_WINDOW_TOPLEVEL} is just the
symbol @code{toplevel}, hence a call @code{(gtk-window-new 'toplevel)}.

@item Flags
@cindex Flags
Sets of flags (bitwise ORs at the C level) are represented in Guile as a list
of symbols, possibly an empty list, with names corresponding to the C
definitions and without the prefix indicating their type.

For example a @code{GdkModifierType} value could be the list @code{(shift-mask
control-mask)}.

@item Multiple return values
@cindex Multiple return values
Multiple values are returned in a list.  This is the C return value plus
values stored through pointers.

For example at the C level @code{gtk_pixmap_get} returns a @code{GdkPixmap}
and a @code{GdkBitmap} via pointers.  Guile Gtk function @code{gtk-pixmap-get}
returns these in a two-element list.

Or for example @code{gdk_window_at_pointer} returns a @code{GdkWindow} and
stores an @code{x} and @code{y} through pointers.  These are returned from
@code{gdk-window-at-pointer} in a three element list.

@item Strings
Gtk generally uses strings encoded in UTF-8.  Guile (versions 1.6 and 1.8) has
no direct notion of multi-byte characters in strings, so applications will
need to be careful.

Converting to @code{GdkWChar} with @code{gdk-mbstowc} (@pxref{Gdk Module}) is
one way to identify character boundaries at least.

@item @code{GType}
@cindex Types
@findex GType
@findex GtkType
@code{GType} (and @code{GtkType} which is the same thing) values are
represented as a distinct kind of Scheme level objects, except for
@code{GTK_TYPE_INVALID} which is represented as @code{#f}.  Types can be
compared with @code{equal?}.

As a convenience, functions expecting a @code{GtkType} can be passed a symbol
which is the name of the type.  For example,

@example
(gtk-widget-new 'GtkLabel)
@end example

For types known to Guile Gtk (anything appearing in the defs files), Guile Gtk
will call the type initialization functions when necessary.  Other types will
be available only once relevant C code has created them.

@item @code{GObject}
@findex GObject
@findex GtkObject
@cindex Glib objects
@cindex Gtk objects
@cindex Objects
@cindex Equality
@cindex Hashing
Each @code{GObject} is represented uniquely at the Scheme level, so widgets
etc can be compared or hashed with @code{eq?}.  An object is destroyed when
garbage collected, if it's not otherwise in use by Gtk.

@cindex Type predicates
Type predicates like @code{GTK_IS_CHECK_BUTTON} are implemented as for
instance @code{gtk-check-button?}.  There are no type checking casts like in
C, Guile Gtk functions expecting a particular object class always check they
get it or a sub-class.

@item @code{GError}
@cindex @code{GError}
@code{GError} parameters at the C level are implemented as @code{scm-error}
style throws @pxref{Error Reporting,, Procedures for Signaling Errors, guile,
The Guile Reference Manual}.  For example @code{gdk-pixbuf-new-from-file}
(@pxref{GdkPixbuf Module}) is called as

@example
(gdk-pixbuf-new-from-file "myfile.png")
@end example

@noindent
and if an error occurs it may throw for instance

@example
(scm-error 'g-error "gdk-pixbuf-new-from-file"
           "Failed to open file 'myfile.png': No such file or directory"
           '(g-file-error-quark 4))
@end example

The data parameter is a list of error domain and code number.

@item Threading
@cindex Threading
@findex gdk-threads-enter
@findex gdk-threads-leave
Guile Gtk programs can use Guile threads in the normal way, but note that the
Gtk and Gdk libraries are not thread-safe and that the Guile Gtk interface has
no special protection against two threads calling Gtk/Gdk simultaneously.
@code{gdk-threads-enter} and @code{gdk-threads-leave} are available though,
and can be used the same as in a C program.

Perhaps in the future additional threading protection will be provided by
Guile Gtk.  Presently two threads both calling Gtk/Gdk can crash the
interpreter, the idea would be to guard against that.
@end table


@node Gdk Module, Gdk Extras, General Conventions, Top
@chapter Gdk Module
@cindex Gdk module

@noindent
The Gdk interface module can be used with

@findex (gtk-2.0 gdk)
@example
(use-modules (gtk-2.0 gdk))
@end example

@cindex Command line
@cindex Display
@cindex @option{--display}
@cindex Initialization
@cindex Options
@cindex X display
A call to @code{gdk_init} is made automatically, an application doesn't need
to do that itself.  Standard Gdk command line options are taken from the
program command line (eg.@: @samp{--display}), and removed from there, leaving
other options and the rest of the command line for the application.
@pxref{Runtime Environment,, Runtime Environment, guile, The Guile Reference
Manual}.

Currently, the @code{(gtk-2.0 gdk)} module also initializes Gtk
(@code{gtk_init} etc, @pxref{Gtk Module}).  Perhaps this will change in the
future.

The following rules apply to the various Gdk types.

@table @asis
@item Predicates
@cindex Predicates
Type predicates are implemented as for instance @code{gdk-window?}.  These
test only for an object of the type, so when say a string is automatically
converted for @code{GdkFont}, the corresponding @code{gdk-font?} is false for
a string, it's true only for an actual font object.

@item Equality
@cindex Equality
Most Gdk objects are subtypes of @code{GObject} and the rules for it apply to
them (@pxref{General Conventions}).  But those few not like this, such as
@code{GdkFont}, are not uniquely represented by a single Scheme level object
and so cannot be compared with @code{eq?} (nor with @code{equal?}).  Standard
Gdk functions like @code{gdk-font-equal} and @code{gdk-color-equal} can be
used in the usual way though.

@item @code{GdkAtom}
@findex GdkAtom
@cindex Atoms
Atoms are passed and returned as Guile symbols, for example @code{WM_NAME}.

@item @code{GdkBitmap}
@findex GdkBitmap
@cindex Bitmaps
Bitmap and pixmap objects are the same type.  When a function expects a bitmap
currently Guile-Gtk doesn't check the depth is 1, and generally an X level
@code{BadMatch} error will occur if it's not.

@item @code{GdkColor}
@findex GdkColor
@cindex Colours
As a convenience, functions expecting a @code{GdkColor} object can be passed a
string, which will be parsed and allocated in the default colormap, using
@code{gdk-color-intern} (@pxref{Gdk Extras}).

The following field accessors and setters are provided,

@defun gdk-color-red color
@defunx gdk-color-blue color
@defunx gdk-color-green color
@defunx gdk-color-pixel color
@defunx gdk-color-set-red color red
@defunx gdk-color-set-blue color blue
@defunx gdk-color-set-green color green
@defunx gdk-color-set-pixel color pixel
@end defun

@item @code{GdkDragContext}
@findex GdkDragContext
@cindex Drag context
The following field accessors are provided,

@defun gdk-drag-context-action
@defunx gdk-drag-context-actions
@defunx gdk-drag-context-dest-window
@defunx gdk-drag-context-is-source
@defunx gdk-drag-context-source-window
@defunx gdk-drag-context-start-time
@defunx gdk-drag-context-suggested-action
@defunx gdk-drag-context-targets
@end defun

@item @code{GdkEvent}
@findex GdkEvent
@cindex Events
The following field accessors are provided.  Consult the Gdk documentation for
which fields are available in which event types.

@defun gdk-event-type e
@defunx gdk-event-area e
@defunx gdk-event-atom e
@defunx gdk-event-button e
@defunx gdk-event-count e
@defunx gdk-event-crossing-mode e
@defunx gdk-event-drag-context e
@defunx gdk-event-focus e
@defunx gdk-event-in e
@defunx gdk-event-is-hint e
@defunx gdk-event-keyval e
@defunx gdk-event-notify-detail e
@defunx gdk-event-send-event e
@defunx gdk-event-property e
@defunx gdk-event-requestor e
@defunx gdk-event-selection e
@defunx gdk-event-source e
@defunx gdk-event-string e
@defunx gdk-event-subwindow e
@defunx gdk-event-target e
@defunx gdk-event-time e
@defunx gdk-event-window e
@defunx gdk-event-x-root e
@defunx gdk-event-y-root e
@end defun

@defun gdk-event-x e
@defunx gdk-event-y e
Mouse pointer positions as floating point numbers, eg.@: for motion notify
events.
@end defun

@defun gdk-event-configure-x e
@defunx gdk-event-configure-y e
@defunx gdk-event-configure-width e
@defunx gdk-event-configure-height e
Window position and sizes as exact integers, for a configure notify event.
@end defun

@defun gdk-event-state e
@code{GdkModifierType} flags, eg.@: for a key press event.
@end defun

@defun gdk-event-visibility-state e
@code{GdkVisibilityState} symbol, for visibility notify events.
@end defun

@defun gdk-event-message e
@defunx gdk-event-message-type e
@code{gdk-event-message} returns its data as a vector of 5, 10 or 20 integers,
according to the data format (32, 16, or 8 bits, respectively).
@end defun

@item @code{GdkFont}
@findex GdkFont
@cindex Fonts
As a convenience, functions expecting a @code{GdkFont} object can be passed
the name of a font as a string, which will be loaded as per
@code{gdk-font-intern} (@pxref{Gdk Extras}).

@item @code{GdkPoint}
@findex GdkPoint
@cindex Points
A points is represented as a pair @code{(@var{x} .@: @var{y})}.
(@pxref{Pairs,,, guile, The Guile Reference Manual})

@item @code{GdkRectangle}
@findex GdkRectangle
@cindex Rectangle
A rectangles is represented as a pair of pairs @code{((@var{x}
.@: @var{y}) .@: (@var{width} .@: @var{height}))}.  Notice the @code{(@var{x}
.@: @var{y})} pair corresponds to the way a @code{GdkPoint} is represented.

@item @code{GdkSegment}
@findex GdkSegment
@cindex Segment
@cindex Line segment
A segment is represented as a pair of pairs @code{((@var{x1}
.@: @var{y1}) .@: (@var{x2} .@: @var{y2}))}.  Notice each @code{(@var{x}
.@: @var{y})} corresponds to the way a @code{GdkPoint} is represented.

@item @code{GdkWChar}
@findex GdkWChar
@cindex Characters
@cindex Wide characters
Currently @code{GdkWChar} values are represented as integers, and
@code{GdkWChar} strings as vectors of integers.  So for instance
@code{gdk-wcstombs} expects such a vector.

This representation might change in the future if Guile gets its own notion of
characters bigger than 8 bits.

@item @code{GdkWindow}
@findex GdkWindow
@cindex Window
@cindex Destroying windows
An application must call @code{gdk-window-destroy} to destroy a window which
it created and no longer needs.  This is not done automatically by the garbage
collector, a window forgotten will continue to exist until the program exits.
Windows from a Gtk widget should not be destroyed, that's done by the widget
code when the widget is destroyed or unrealized.

Note that the final release of memory only actually takes place under the Gtk
main loop (@code{gtk-main} etc), so be sure it runs (periodically at least)
when creating and destroying.

@item Pixels
@cindex Pixels
Pixels are represented as integers, in the usual Gdk fashion.  Guile Gtk makes
no attempt to track what pixels are allocated in what colormaps, any
management of that is left to applications.
@end table

@sp 1
@noindent
The following standard Gdk functions have particular notes for the Guile Gtk
interface.

@defun gdk-bitmap-create-from-data window data width height
Return a new @code{GdkBitmap} of @var{width}@cross{}@var{height} created from
raw @var{data} bytes in XBM format (which is bits of each row packed into
bytes, least significant bit first, and each row padded to a byte boundary).
@var{data} can be a string, a vector of integers, or a uniform vector of
bytes.  In each case the length must be what @var{width}@cross{}@var{height}
implies.
@end defun

@defun gdk-color-black colormap
@defunx gdk-color-white colormap
The return value is a @code{GdkColor} object with red/green/blue fields set
and the pixel allocated in the given @var{colormap}, or @code{#f} if
allocation fails.
@end defun

@defun gdk-colormap-alloc-colors colormap colors writable bestmatch
@var{colors} is a list or vector of @code{GdkColor} objects which are to be
allocated in @var{colormap}.  @var{writable} and @var{bestmatch} are booleans.

The @code{pixel} field of each @code{GdkColor} is changed to the allocated
color.  And if @var{bestmatch} is true then the red, green and blue fields are
changed to the actual color allocated.

The return is a list @code{(failcount statuslist)}.  @var{failcount} is the
number of allocations which failed, @var{statuslist} is a list of @code{#t} or
@code{#f} flags, one for each entry in @var{colors}, indicating which colors
were successfully allocated or not.

@var{colors} can contain strings, the same as other functions taking
@code{GdkColor} parameters.  In this case those entries are changed to new
@code{GdkColor} objects, with fields set as per @code{gdk-color-parse}.  Those
objects are then allocated and modified as described above.
@end defun

@defun gdk-gc-get-values gc
The @code{GdkGCValues} type is not used, instead the return is a list,

@example
(foreground background font function fill
 tile stipple clip-mask subwindow-mode
 ts-x-origin ts-y-origin clip-x-origin clip-y-origin
 graphics-exposures line-width line-style cap-style join-style)
@end example
@end defun

@defun gdk-gc-new-with-values window @w{[#:background color]} @w{[#:cap-style cs]} @w{[#:clip-mask pixmap]} @w{[#:clip-x-origin x]} @w{[#:clip-y-origin y]} @w{[#:fill fill]} @w{[#:font font]} @w{[#:foreground color]} @w{[#:function f]} @w{[#:graphics-exposures bool]} @w{[#:join-style js]} @w{[#:line-style ls]} @w{[#:line-width n]} @w{[#:stipple pixmap]} @w{[#:subwindow-mode swm]} @w{[#:tile pixmap]} @w{[#:ts-x-origin x]} @w{[#:ts-y-origin y]}
The @code{GdkGCValues} type is not used, instead keyword arguments are taken
corresponding to the fields of that structure.

For example,

@example
(gdk-gc-new-with-values my-window
                        #:foreground "orange"
                        #:line-width 5
                        #:graphics-exposures #f)
@end example
@end defun

@defun gdk-image-new-bitmap visual data width height
Create a @code{GdkImage} bitmap of @var{width}@cross{}@var{height} using the
given @var{data}.  @var{data} is raw byte values, either as a string, a vector
of integers, or a uniform vector of bytes.  In each case the length of
@var{data} must be what @var{width}@cross{}@var{height} implies.  The data
format is not well documented by Gdk, but the bits of each row are packed into
bytes (most significant bit first), and each row padded out so the next starts
on a byte boundary.

@var{data} is copied to form the image, so changes with
@code{gdk-image-put-pixel} etc don't alter the original @var{data}.  (Unlike
at the C level, where the data space there is acquired and used directly by
the image.)
@end defun

@defvar gdk-major-version
@defvarx gdk-minor-version
These are set from the corresponding Gtk library variables
@code{gtk_major_version} and @code{gtk_minor_version}, rather than the
compile-time constants @code{GTK_MAJOR_VERION} etc.  This means the values
seen in Scheme code are the library actually used at run time, not merely the
one Guile Gtk was compiled against.
@end defvar

@defun gdk-mbstowc str
Convert a string of multi-byte characters to wide characters.  The return is a
vector of integers (per notes for @code{GdkWChar} above), or @code{#f} if
conversion failed.
@end defun

@defun gdk-pixmap-create-from-xpm window bitmaploc transpcolor filename
@defunx gdk-pixmap-colormap-create-from-xpm window colormap bitmaploc transpcolor filename
@defunx gdk-pixmap-create-from-xpm-d window bitmaploc transpcolor string
@defunx gdk-pixmap-colormap-create-from-xpm-d window colormap bitmaploc transpcolor string
Return a @code{GdkPixmap} created from an XPM file or string data.

@var{bitmaploc} is a vector or list of length 1, into which the
@code{GdkBitmap} created for the transparency mask is stored.  If the bitmap
is not wanted, @var{bitmaploc} can be @code{#f}.
@end defun

@defun gdk-pixmap-new drawable width height [depth]
@var{depth} defaults to @math{-1}, meaning copy from @var{drawable}.
@end defun

@defun gdk-rectangle-intersect rect1 rect2
The return is a rectangle which is the intersection of @var{rect1} and
@var{rect2}, or @code{#f} for no intersection.
@end defun

@defun gdk-set-locale
@cindex Locale
@code{gdk-set-locale} is called automatically when the @code{(gtk-2.0 gdk)}
module is loaded, so applications don't need to do so explicitly.
@end defun

@defun gdk-window-get-deskrelative-origin window
@defunx gdk-window-get-origin window
@defunx gdk-window-get-position window
@defunx gdk-window-get-root-origin window
@defunx gdk-window-get-size window
Unlike other multiple-return values functions, these return a pair
@code{(@var{x} .@: @var{y})} or @code{(@var{width} .@: @var{height})}, rather
than a list.
@end defun

@defun gdk-window-new parent width height event-mask wclass wtype [#:colormap@ colormap] [#:cursor@ cursor] [#:title@ title] [#:visual@ visual] [#:wmclass@ name@ class] [#:x@ x] [#:y@ y]
The @code{GdkWindowAttr} structure is not used, instead mandatory fields are
taken as fixed arguments, and the optional fields in keyword form.  For
example, for a top-level window,

@example
(gdk-window-new #f 200 100 '(exposure-mask) 'input-output 'toplevel
                #:title "my window")
@end example
@end defun

@defun gdk-window-set-geometry-hints window @w{[#:aspect min max]} @w{[#:base-size width height]} @w{[#:max-size width height]} @w{[#:min-size width height]} @w{[#:pos]} @w{[#:user-pos]} @w{[#:user-size]} @w{[#:win-gravity grav]} @w{[#:resize-inc width height]}
The @code{GdkGeometry} structure is not used, instead optional keyword
arguments are taken.  The keyword names correspond to the
@code{GdkWindowHints} enumeration, and the arguments are the values for the
fields of the @code{GdkGeometry} structure.

For example,

@example
(gdk-window-set-geometry-hints my-window
                               #:min-size 20 10
                               #:aspect 1.0 2.0
                               #:pos
                               #:win-gravity 'south-east)
@end example
@end defun

@defvar pango-scale
The @code{PANGO_SCALE} constant.
@end defvar

@sp 1
@noindent
The following standard Gdk functions are not provided, for the reasons
outlined.

@defun gdk-init
@defunx gdk-init-check
There are no separate init functions to call, all initializations are done
automatically when the @code{(gtk-2.0 gdk)} module is loaded.
@end defun

@defun gdk-window-get-user-data window
@defunx gdk-window-set-user-data window data
Gtk sets the ``user data'' on a window to point to the associated widget, and
uses this for event dispatch.  Non-widget windows need @code{NULL} to avoid
another value being treated as a widget pointer.  On this basis the user data
generally cannot be used by applications.

If some sort of attached data is required then the suggestion is to use Guile
object properties (@pxref{Object Properties,,, guile, The Guile Reference
Manual}).  Because the Scheme-level object is kept alive as long as the window
exists, such properties remain until the window is destroyed.
@end defun


@node Gdk Extras, Gtk Module, Gdk Module, Top
@chapter Gdk Extras
@cindex Gdk module
@cindex Gdk extras

@noindent
The following extra Gdk level functions are provided by Guile Gtk.

@defun gdk-color-intern color
If @var{color} is a @code{GdkColor} object, return it.  If it's a string then
parse it using @code{gdk-color-parse} and allocate a pixel using
@code{gdk-color-alloc} in @code{gtk-widget-get-default-colormap}.

A program can use @code{gdk-color-intern} as an easy way to convert strings to
@code{GdkColor} objects, so as to avoid repeatedly having that done when
calling functions expecting a color.
@end defun

@defun gdk-color-new
Return a new @code{GdkColor} object, with zeros in all fields.
@end defun

@defun gdk-font-intern font
If @var{font} is a @code{GdkFont} object, return it.  If it's a string then
load that font using @code{gdk-font-load}, throwing an error if that function
fails.

A program can use @code{gdk-font-intern} as an easy way to convert strings to
@code{GdkFont} objects, so as to avoid repeatedly having that done when
calling functions expecting a font.
@end defun

@c  Not sure if this should be documented, it depends on internals and
@c  will be difficult to do properly in Gtk 2.
@c
@c  @defun gdk-window-get-id window
@c  Return the X Window ID of a @code{GdkWindow}.
@c  @end defun


@node Gtk Module, Gtk Extras, Gdk Extras, Top
@chapter Gtk Module
@cindex Gtk module

@noindent
The Gtk interface module can be used with

@findex (gtk-2.0 gtk)
@example
(use-modules (gtk-2.0 gtk))
@end example

@cindex Command line
@cindex Initialization
@cindex Options
@cindex Locale
@cindex Internationalization
Calls to @code{gtk_init} and @code{gtk_set_locale} are made automatically, an
application doesn't need to make them itself.  Standard Gtk command line
options are taken from the program command line (eg.@: @samp{--gtk-module}),
and removed from there, leaving other options and the rest of the command line
for the application.  @pxref{Runtime Environment,, Runtime Environment, guile,
The Guile Reference Manual}.

The following rules apply to the various Gtk types.

@table @asis
@item @code{GtkAdjustment}
@findex GtkAdjustment
@cindex Adjustments
The following field accessors and setters are provided.

@defun gtk-adjustment-value adj
@defunx gtk-adjustment-lower adj
@defunx gtk-adjustment-upper adj
@defunx gtk-adjustment-step-increment adj
@defunx gtk-adjustment-page-increment adj
@defunx gtk-adjustment-page-size adj
@end defun

@defun gtk-adjustment-set-lower adj val
@defunx gtk-adjustment-set-upper adj val
@defunx gtk-adjustment-set-step-increment adj val
@defunx gtk-adjustment-set-page-increment adj val
@defunx gtk-adjustment-set-page-size adj val
These only set the respective fields, it's up to an application to emit the
standard @code{changed} signal when ready (eg.@: using
@code{gtk-adjustment-changed}).

Note that @code{gtk-adjustment-set-value} is instead the corresponding
standard Gtk function.  It sets the value field and emits the
@code{value_changed} signal.
@end defun

@item @code{GtkCList}
@findex GtkCList
@cindex CList
The following field accessors are provided.

@defun gtk-clist-selection clist
Return a list of integers, being the selected rows.
@end defun

@item @code{GtkResponseType}
@findex @code{GtkResponseType}
@cindex Response
Values for @code{GtkResponseType} are represented just as integers, and in
particular are passed that way in the @code{GtkDialog} @code{response} signal.
The following variables hold pre-defined values.

@defvar gtk-response-none
@defvarx gtk-response-reject
@defvarx gtk-response-accept
@defvarx gtk-response-delete-event
@defvarx gtk-response-ok
@defvarx gtk-response-cancel
@defvarx gtk-response-close
@defvarx gtk-response-yes
@defvarx gtk-response-no
@defvarx gtk-response-apply
@defvarx gtk-response-help
@end defvar

@item @code{GtkStyle}
@findex GtkStyle
@cindex Style
The following field accessors are provided.

@c
@c Note that gtk-style-get-white is not described here, gtk-style-white better
@c matches the conventions on field accessor functions.
@c
@defun gtk-style-white st
@defunx gtk-style-black st
@defunx gtk-style-fg st
@defunx gtk-style-bg st
@defunx gtk-style-light st
@defunx gtk-style-dark st
@defunx gtk-style-mid st
@defunx gtk-style-text st
@defunx gtk-style-base st
Return @code{GdkColor} objects.
@end defun

@defun gtk-style-white-gc st
@defunx gtk-style-black-gc st
@defunx gtk-style-fg-gc st
@defunx gtk-style-bg-gc st
@defunx gtk-style-light-gc st
@defunx gtk-style-dark-gc st
@defunx gtk-style-mid-gc st
@defunx gtk-style-text-gc st
@defunx gtk-style-base-gc st
Return @code{GdkGC} objects.
@end defun

@item Signals
@cindex Callbacks
@cindex Signals
Signal names are strings, the same as at the C level, for instance
@code{"clicked"} or @code{"map_event"}.

Signal handler procedures are passed the same parameters as the C code
functions, except the object and client-data are omitted.  The return value is
used when the signal expects a return value.

For instance the @code{clicked} signal from a @code{GtkButton} passes no
parameters,

@example
(define (my-click-handler)
  (display "hello\n"))
(gtk-signal-connect button "clicked" my-click-handler)
@end example

Or an @code{expose_event} passes just a @code{GdkEvent}, and expects a return
value.

@example
(define (my-expose-handler)
  (do-some-drawing)
  #f)  ;; propagate event to other handlers
(gtk-signal-connect drawarea "expose_event" my-expose-handler)
@end example

The object and client data parameters in the C level calls are deliberately
omitted.  Such things can be handled in a more Scheme-like and flexible way
with a closure, ie. captured variables with desired values (@pxref{About
Closure,, The Concept of Closure, guile, The Guile Reference Manual}).

Signal handler calls are made via a trampoline to facilitate error handling,
@pxref{Gtk Extras}.
@end table

@sp 1
@noindent
The following standard Gtk functions have particular notes for the Guile Gtk
interface.

@defun gtk-box-pack-start box child [expand [fill [padding]]]
@defunx gtk-box-pack-end box child [expand [fill [padding]]]
@var{expand} and @var{fill} default to @code{#f}, @var{padding} defaults to 0.
@end defun

@defun gtk-color-selection-get-color colorsel
Return a @code{GdkColor} object with red, green and blue fields set to the
current colour from @var{colorsel}.  The colour is not allocated in any
colormap and the pixel field is zero.

Note that unfortunately this is not the same as the C function
@code{gtk_color_selection_get_color}, but instead like the Gtk 2
@code{gtk_color_selection_get_current_color}.
@end defun

@defun gtk-color-selection-set-color colorsel color
Set the current colour in @var{colorsel} to the red, green and blue fields of
the given @code{GdkColor} object.  The opacity is set to 1.0, when in use.

Note that unfortunately this is not the same as the C function
@code{gtk_color_selection_set_color}, but instead like the Gtk 2
@code{gtk_color_selection_set_current_color}.
@end defun

@defun gtk-exit [exitcode]
@cindex Exit
@var{exitcode} defaults to 0, meaning normal successful termination.
@end defun

@defun gtk-idle-add proc
@defunx gtk-idle-add-priority priority proc
@defunx gtk-idle-add-full priority proc
As per the signal handlers, there's no ``data'' parameter to the idle
callbacks.  @var{proc} is simply called @code{(@var{proc})} and should return
non-@code{#f} to continue being called, or @code{#f} to stop.

Currently there's no destroy notify callback procedure for
@code{gtk-idle-add-full}, perhaps this will change in the future.
@end defun

@defun gtk-input-add port inputconds proc
Register @var{proc} to be called when @var{inputconds} is satisfied on
@var{port}, and return the input source ID.

As per the signal handlers, there's no ``data'' parameter to the input
handler, it's called as @code{(@var{proc} fdes conds)}.

This function doesn't offer the destroy notify callback available from
@code{gtk_input_add_full}, perhaps this will change in the future.
@end defun

@defun gtk-main
@defunx gtk-main-iteration
@defunx gtk-main-iteration-do
@cindex Exceptions
@cindex Continuations
@cindex Throw
In a signal handler or other callback, an application cannot use an exception
or new continuation to escape from @code{gtk-main} and friends, since Gtk has
no understanding of such things.  There are no restrictions on control flow
within a callback, just on escaping out of it.

One possibility for applications wanting such things is to have an explicit
loop calling @code{gtk-main-iteration} and hold a list of pending actions to
be taken outside that function.  This is done in the sample program
@file{continuations.scm} (@pxref{Example Programs}).  The callback trampoline
feature might be able to help with this (@pxref{Gtk Extras}).
@end defun

@defun gtk-menu-popup menu parentmenushell parentmenuitem button time
There's no position function accepted, instead @code{NULL} is used, which
means put the menu under the current mouse position.  Perhaps this will change
in the future.
@end defun

@defun gtk-object-get object prop
Get an object property.  The @var{prop} property name can be either a keyword
or symbol.  The property value is returned, or @code{#f} if there's no such
property or it cannot be read.

@code{gtk-object-get} only gets one property value, unlike the C function
@code{gtk_object_get} which can get multiple property values in one call.
@end defun

@defun gtk-object-new type [prop value]@dots{}
@defunx gtk-object-set object [prop value]@dots{}
@defunx gtk-widget-new type [prop value]@dots{}
@defunx gtk-widget-set widget [prop value]@dots{}
The @var{prop} property names are taken as either keywords or symbols,
followed by suitable values.  This is in contrast to the C functions, where
strings are used for property names.  For example,

@example
(gtk-widget-new 'GtkButton #:label "some words" #:relief 'half)
@end example

The values set are type checked and converted in the usual way, they must
correspond to the property type.
@end defun

@defvar gtk-major-version
@defvarx gtk-minor-version
@defvarx gtk-micro-version
@defvarx gtk-binary-age
@defvarx gtk-interface-age
These are set from the corresponding Gtk library variables
@code{gtk_major_version} etc, rather than the compile-time constants
@code{GTK_MAJOR_VERION} etc.  This means the values seen in Scheme code are
the library actually used at run time, not merely the one Guile Gtk was
compiled against.
@end defvar

@defun gtk-pixmap-new pixmap [bitmap]
@defunx gtk-pixmap-set pixmap [bitmap]
@var{bitmap} defaults to @code{#f}, meaning no mask.
@end defun

@defun gtk-scrolled-window-new [hadjustment [vadjustment]]
@var{hadjustment} and @var{vadjustment} default to @code{#f}, meaning create
new adjustment objects.
@end defun

@defun gtk-set-locale
@cindex Locale
@code{gtk-set-locale} is called automatically when the @code{(gtk gtk)} module
is loaded, so applications don't need to do so explicitly.
@end defun

@defun gtk-signal-connect object name func [objectsignal [after]]
@cindex Signal handlers
@var{objectsignal} has no purpose and should always be @code{#f}, which is its
default.  @var{after} defaults to @code{#f}, meaning @var{func} is called
before @var{object} runs the default handler for this signal.

It will be noted that @code{gtk-signal-connect} has the @var{objectsignal} and
@var{after} parameters like @code{gtk_signal_connect_full}, but currently
there's no access to the destroy notify callback.
@end defun

@defun gtk-table-attach table child left right top bottom [xopts [yopts [xpad [ypad]]]]
@var{xopts} and @var{yopts} each default to @code{(expand fill)}, @var{xpad}
and @var{ypad} default to 0.
@end defun

@defun gtk-text-insert text font foreground background string [length]
The default @var{length} is -1, meaning the whole @var{string}.
@end defun

@defun gtk-widget-size-request widget
The requisition is returned as a pair @code{(@var{width} . @var{height})}.
@end defun


@sp 1
@noindent
The following standard Gtk functions are not provided.

@defun gtk-container-foreach
This iterator is not provided, instead the suggestion is to apply the standard
Scheme @code{for-each} to the return from @code{gtk-container-children}.
(That's probably how @code{gtk-container-foreach} would be implemented anyway,
to make it safe for continuations and exceptions.)
@end defun

@defun gtk-init
There is no separate init function to call, all initializations are done
automatically when the @code{(gtk gtk)} module is loaded.
@end defun


@node Gtk Extras, GdkPixbuf Module, Gtk Module, Top
@chapter Gtk Extras
@cindex Gtk module
@cindex Gtk extras

@noindent
The following extra Gtk level functions are provided by Guile Gtk.

@defun gtk-callback-trampoline [tramp]
@cindex Callbacks
@cindex Signal handlers
@cindex Error handler
@cindex Trampoline
Get or set the trampoline procedure for Gtk callbacks.  With no arguments, the
current trampoline is returned.  With an argument, the trampoline procedure is
set, and the old procedure returned.

When making a callback for signals etc, Guile Gtk goes through this
trampoline.  @var{tramp} is called as @code{(@var{tramp} proc args)}, where
@code{proc} is the application procedure to call, and @code{args} is a list of
arguments for it (possibly empty).  A minimal trampoline would be,

@example
(define (my-trampoline proc args)
  (apply proc args))
@end example

@noindent
(which of course is just @code{apply} itself, no need for a new definition).

The default trampoline uses @code{catch} to trap errors from the callback, and
displays them in a window (@pxref{Catch,, Catching Exceptions, guile, The
Guile Reference Manual}).  The aim is to give the user some feedback in the
GUI about what has gone wrong, rather than suddenly terminating.  An
application can set a new trampoline to do this in its preferred way.
@end defun

@defun gtk-class-new type name
Return a new @code{GtkType} with the given @var{name} (a string), created as a
sub-class of @var{type}.

Instances of the new type can be created with @code{gtk-widget-new} in the
usual way.  The new type has the same size as the given @var{type}, there's no
mechanism to add extra data fields.  (The suggestion would be to use Guile
object properties for such things, @xref{Object Properties,,, guile, The Guile
Reference Manual}.)

The main advantage of a new class is that it can be type checked in a fashion
similar to other Gtk objects.  For instance,

@example
(define my-foo-button-type
  (gtk-class-new 'GtkButton "MyFooButton")))

(define (my-foo-button-new)
  (gtk-widget-new my-foo-button-type #:label "something")))

(define (my-foo-button? obj)
  (gtk-check-type obj my-foo-button-type))

(define (my-foo-button-dosomething obj)
  (or (my-foo-button? obj)
      (error "Wrong object type: ~a" obj))
  ...)
@end example

It also works to use @nicode{'MyFooButton} like the builtin types, instead of
holding the type in @code{my-foo-button-type}.
@end defun

@defun gtk-list-append-item list listitem
@defunx gtk-list-prepend-item list listitem
Append or prepend a single item to a @code{GtkList}.
@end defun

@defun gtk-pixmap-new-from-file filename parent
Return a new @code{GtkPixmap} widget, containing an XPM image loaded from
@var{filename} as per @code{gdk-pixmap-colormap-create-from-xpm}.
@var{parent} is an intended parent widget, used to get the colormap for the
image.
@end defun

@defun gtk-signal-new-generic name flags objtype rettype paramtypes
Create a new signal @var{name} for use by @var{objtype} and return the signal
ID (an integer).  @var{flags} is @code{GtkSignalRunType} flags, @var{rettype}
is the return type for the handler, and @var{paramtypes} is a list of
parameter types for it (@code{GType} values or symbols).

This function is like the C function @code{gtk_signal_newv}, but doesn't setup
any particular marshaller, rather it's for use with Scheme level handlers
which are invoked ``generically'' based on the type information provided.

For instance the following adds a new signal to @code{GtkAdjustment}, taking a
string and a boolean as parameters.  Clearly Gtk itself won't use or emit
something like this, it'd just be for an application.

@example
(gtk-signal-new-generic "big_change_soon" '(no-recurse)
                        'GtkAdjustment
                        'void '(GtkString gboolean))
@end example
@end defun

@sp 1
@noindent
The following functions are provided by

@cindex Threads
@findex (gtk threads)
@example
(use-modules (gtk threads))
@end example

@defun gtk-threads-ensure-handler
Start a Gtk main loop in a new Guile thread, if this function has not
previously done that.  This is a convenient way for an application to ensure a
main loop exists, but continue with other things.

The main loop is started within a @code{gdk-threads-enter} /
@code{gdk-threads-leave} pair in the standard way for a threaded program, as
per the following.

@example
(gdk-threads-enter)
(gtk-main)
(gdk-threads-leave)
@end example
@end defun

@defun gtk-threads-handler?
Return true if @code{gtk-threads-ensure-handler} has started a Gtk main loop.
@end defun


@node GdkPixbuf Module, Glade Module, Gtk Extras, Top
@chapter GdkPixbuf Module
@cindex GdkPixbuf module

@noindent
The GdkPixbuf interface module can be used with

@findex (gtk-2.0 gdk-pixbuf)
@example
(use-modules (gtk-2.0 gdk-pixbuf))
@end example

Currently, the @code{(gtk-2.0 gdk-pixbuf)} module also initializes Gtk
(@code{gtk_init} etc, @pxref{Gtk Module}).  Perhaps this will change in the
future.

The following standard GdkPixbuf functions have particular notes for the Guile
Gtk interface.

@defun gdk-pixbuf-render-threshold-alpha p b sx sy dx dy w h a
@defunx gdk-pixbuf-render-to-drawable  p d g sx sy dx dy w h di xd yd
@defunx gdk-pixbuf-render-to-drawable-alpha p d sx sy dx dy w h am a di xd yd
@code{gdk_rgb_init} is called automatically, so there's no need for
applications do that explicitly.
@end defun

@sp 1
The various Xlib specific GdkPixbuf functions (@code{gdk_pixbuf_xlib_init}
etc) are not provided, since Xlib level operations are not considered a
primary part of Guile Gtk.


@node Glade Module, Gtk GL Module, GdkPixbuf Module, Top
@chapter Glade Module
@cindex Glade module

@noindent
The Glade interface module can be used with

@findex (gtk-2.0 glade)
@example
(use-modules (gtk-2.0 glade))
@end example

The following rules apply to the various Glade types.

@table @asis
@item @code{GladeXML}
@findex GladeXML
@cindex XML
@code{GladeXML} is a sub-class of @code{GObject} so the notes about it apply
(@pxref{General Conventions}).  The following field accessors are provided,

@defun glade-xml-filename gx
@end defun
@end table

@sp 1
@noindent
The following standard Glade functions have particular notes for the Guile
Gtk interface.

@defun glade-xml-new filename [root]
The default @var{root} is @code{#f}, meaning create the whole interface
defined in @var{filename}.
@end defun

@defun glade-xml-signal-connect-full gladexml name [proc]
@defunx glade-xml-signal-autoconnect-full gladexml [proc]
As per the Gtk signal handlers, there's no ``user data'' parameter to
@var{proc}.  @var{proc} is called @code{(@var{proc} handlername object
signalname signaldata connectobject after?)}.

If @var{proc} is not given, or is @code{#f}, the default is to connect
@var{signalname} on @var{connectobject} (or @var{object} if no
@var{connectobject}) to the procedure @var{handlername}.  @var{handlername} is
evaluated as Scheme code, and so can simply be the name of a Scheme procedure,
or it can be a @code{lambda} form or similar evaluating to a procedure.
@end defun


@node Gtk GL Module, Gtk GL Extras, Glade Module, Top
@chapter Gtk GL Module
@cindex Gtk GL module

@noindent
The Gtk GL interface module can be used with

@findex (gtk-2.0 gtk-gl-area)
@findex (gtk-2.0 gdk-gl)
@example
(use-modules (gtk-2.0 gtk-gl-area))
(use-modules (gtk-2.0 gdk-gl))
@end example

The following rules apply to the various Gtk GL types.

@table @asis
@item Attributes
@cindex Gtk GL attributes
The attributes for @code{gtk-gl-area-new} and similar are taken as a list of
symbols such as @nicode{red-size} for @code{GDK_GL_RED_SIZE}, and integer
values following them (when appropriate).  For example,

@example
(gdk-gl-choose-visual '(doublebuffer buffer-size 123))
@end example
@end table


@node Gtk GL Extras, Tips and Techniques, Gtk GL Module, Top
@chapter Gtk GL Extras
@cindex Gtk GL module
@cindex Gtk GL extras

@noindent
The following extra Gtk GL level functions are provided by Guile Gtk.

@defun gtk-gl-area-make-current-force area
Make the given @var{area} current, throwing an error if this fails.
@end defun
      
@deffn {macro} with-gl-area area body@dots{}
@deffnx {macro} with-render-to-gl-area area body@dots{}
Evaluate the @var{body} forms with @var{area} made current.  An error is
thrown if @var{area} cannot be set.

@code{with-gl-area} just sets the area, @code{with-render-to-gl-area} in
addition calls @code{gtk-gl-area-swap-buffers} after @var{body}, to display
whatever @var{body} may have drawn to the back buffer.
@end deffn



@node Tips and Techniques, Known Bugs, Gtk GL Extras, Top
@chapter Tips and Techniques
@cindex Tips and techniques

@table @asis
@item @code{app}
@cindex @code{app}
Don't be tempted to make a @code{(define app ...)} for a top-level application
widget or similar.  In Guile 1.6.4 @code{app} is used for the implementation
of the module system and a new binding will stop @code{use-modules} working.

@item @code{primitive-fork}
@cindex @code{primitive-fork}
@cindex Fork
When forking a child process, care should be taken that the child doesn't call
any Gtk functions, since the child has a @code{dup} of the X server connection
and doing anything on it will upset the parent's communications, probably
causing a crash.

Or the parent could leave the connection alone and let the child use it.  The
point is that only one of the two may use it.  This is the same as in a C
program.

Gtk sets up certain @code{atexit} handlers to shutdown its server connection,
and these mustn't run in the child either.  In Guile 1.8.1 and higher
@code{primitive-_exit} (@pxref{Processes,,, guile, The Guile Reference
Manual}) can be used to exit without running those handlers.  In earlier
versions the suggestion is for a child to exec a do-nothing program when it
wants to exit (either normally or for some exception).  Eg.@: an error exit,

@example
(execl "/bin/false" "/bin/false")
@end example

For reference, the current implementation of @code{(ice-9 popen)} is safe,
provided no errors are encountered in the child setups or spawning of
@file{/bin/sh}.

@item Multiple return values
@cindex Multiple return values
When working with the Guile Gtk functions returning multiple values it can be
convenient to get those into separate variables.  One easy way is for
instance,

@example
(define (list-apply lst proc)
  (apply proc lst))

(list-apply (gtk-accelerator-parse str)
  (lambda (key mods)
    ...))
@end example

Or for instance the same with a syntax similar to @code{receive}
(@pxref{Multiple Values,, Returning and Accepting Multiple Values, guile, The
Guile Reference Manual}),

@example
(define-macro (receive-list vars expr . body)
  `(apply (lambda ,vars ,@@body) ,expr))

(receive-list (key mods)
    (gtk-accelerator-parse str)
  ...)
@end example
@end table


@node Known Bugs, Obsolete Features, Tips and Techniques, Top
@chapter Known Bugs
@cindex Known bugs
@cindex Bugs, known

@table @asis
@item @code{GtkEditable} @code{insert-text} signal
The callback for the @code{insert-text} signal from a @code{GtkEditable}
doesn't respect the length for the new text, and doesn't provide a means to
modify the position (which is an in/out parameter).

This may change in the future, probably to a single string parameter for the
text and some sort of modifiable location for the position (a one element
vector perhaps).
@c
@c  For reference, the special handling of pointer+length for the string
@c  either needs to be in sgtk_callback_marshall, or some special marshaller
@c  when connecting insert-text.
@c
@c  sgtk_callback_marshall doesn't get the signal name, but testing for
@c  GtkEditable (or a sub-class) getting string+int+pointer might be close
@c  enough.  Alternately, set a flag in sgtk_protshell to say when special
@c  insert-text handling is needed.
@c
@end table



@node Obsolete Features, Example Programs, Known Bugs, Top
@chapter Obsolete Features
@cindex Obsolete features

The following functions are considered obsolete and are not recommended for
use in new programs.

@defun gtk-standalone?
@cindex Standalone main
Return true if Guile Gtk is running as a standalone program.  This is now
always true.

In the past a @command{gtk-guile} executable existed and had an option to
indicate that an interactive read-eval-print loop should be started, in which
case @code{gtk-standalone?} returned @code{#f}.
@end defun

@defun gtk-standalone-main top-widget
@cindex Main loop
When running standalone (@code{gtk-standalone?} true), run @code{gtk-main} and
connect the @code{destroy} signal of @var{top-widget} to @code{gtk-exit} so
the program will exit when that widget is destroyed.  If not standalone, do
nothing and return immediately.

Since @code{gtk-standalone?} is now always true, an application can just as
easily connect the signal and run @code{gtk-main} itself.

@example
(gtk-signal-connect top-widget "destroy" gtk-exit)
(gtk-main)
@end example
@end defun


@node Example Programs, Internals, Obsolete Features, Top
@chapter Example Programs
@cindex Example programs

The @file{examples} subdirectory in the sources contains various programs
illustrating Guile Gtk.  Once Guile Gtk is installed each can be run with for
instance

@example
guile -s calc.scm
@end example

@cindex Calculator
@cindex @file{calc.scm}
@table @asis
@item @file{calc.scm}
A HP48 style desk calculator.  It takes quite a bit of code to setup all the
widgets, but there's plenty of comments.

A @file{.calcrc} in the user's home directory can add new buttons.  The
ability to load user extensions is a powerful feature and a significant
advantage Guile Gtk has over the regular C interface to Gtk.

@cindex Calendar
@cindex @file{calendar}
@item @file{calendar.scm}
A tiny program showing the @code{GtkCalendar} widget.

@cindex @file{clist.scm}
@item @file{clist.scm}
Display the @file{/etc/passwd} file in a window.  (You might need to enlarge
the window manually.)

@cindex Continuations example
@cindex @file{continuations.scm}
@item @file{continuations.scm}
Illustrate the use of Scheme continuations to resume application code when a
dialog is answered, all the while running the usual Gtk main loop.

@cindex @file{hello-world.scm}
@item @file{hello-world.scm}
@cindex Hello world example
A simple program creating a button printing a familiar message.

@cindex @file{metaspline.scm}
@item @file{metaspline.scm}
@cindex Splines
A Metafont style bezier spline curve editor, using the Gdk drawing primitives.

@cindex @file{simple.scm}
@item @file{simple.scm}
A simple program with a label and a button.

@cindex Glade examples
@cindex @file{simple.glade}
@cindex @file{run-glade.scm}
@item @file{simple.glade}, @file{run-glade.scm}
A simple Glade application.  Notice the use of @code{lambda} forms in the
signal handlers.  @file{run-glade.scm} loads and runs a glade application, for
instance

@example
guile -s run-glade.scm simple.glade
@end example

@cindex Test programs
@item @file{test-dnd.scm}
@itemx @file{test-gdk.scm}
@itemx @file{test-glade.scm}
@itemx @file{test-gtk.scm}
Test programs for drag-and-drop, Gdk, Glade and Gtk respectively.  These are
primarily for the developers' use, but can be run to see something happen and
to test Guile Gtk is working.

@cindex @file{tictactoe.scm}
@item @file{tictactoe.scm}
Illustrate the use of @code{gtk-class-new} to create a tic-tac-toe widget.
There's no actual ``X'' and ``O'' markers, only three squares in a row
recognised as a win.
@end table


@node Internals, Concept Index, Example Programs, Top
@chapter Internals
@cindex Internals

@cindex @code{GObject}
@section @code{GObject}

Objects of type @code{GObject} and its subclasses are wrapped using a
@code{gtkobj} smob.  This smob is called the proxy for the object.  It holds
the C pointer and it adds 1 to the reference count of the object.  The proxy
is kept alive as long as the object exists.  When the proxy is no longer used
from Scheme, and the object is also unused from anywhere in Gtk, then the
proxy and object are destroyed together.

The proxy keeps a list of ``protects'' which are Scheme procedures installed
as callbacks by @code{gtk-signal-connect} etc.  Those protects are kept alive
as long as the object lives but of course they're not themselves a reason to
keep the object alive, an object with callbacks can still be garbage
collected.  A similar global list of protects is used for callbacks on global
things like like @code{gtk-timeout-add}.

Some care must be taken with garbage collection.  Objects in use from Scheme
variables etc are marked in the usual way, and then for @code{GtkContainer}
widgets marking recurses through the children too (any with proxies).  Proxied
objects still in use from Gtk C code are then identified by looking at their
reference counts.  A count of more than the 1 which the proxy puts plus
another 1 if it's in a proxied container means that somebody somewhere is
holding a reference to the object in a way that Guile-Gtk's marking has not
traversed.  Such a reference is called ``external'' and objects with external
references are marked (and thus kept alive).

It might be wondered if just waiting for an object to have a reference count
of 1 (its proxy) would be enough to know it can be garbage collected (when
unreachable from Scheme).  In such a system a container with refcount 1 would
be collected, and then on the next GC its children would be down to a count
of 1 to be collected too.  But attached signal handler procedures can stop
that from working.  Consider container C holding widget W, and a Scheme code
signal handler H connected to W and which acts on C.  W has a refcount 2 and
would be kept alive, so its handler H must be kept, and H refers to C, so C is
kept, ie.@: none of the three is ever collected.  The key is that refcount 2
is not in fact an absolute reason to keep W alive, rather it's a reference
from C and so ought to depend on whether C is to be kept.  Circular references
like this occur all the time in Lisp and the way to treat them is to let
marking recurse through all genuinely wanted objects, leaving unwanted objects
all collected together, no matter what clusters of possibly circular
references they might have between themselves.

Strictly speaking to be completely safe against circular references Guile-Gtk
would have to know and follow all references Glib and Gtk establish between
objects.  But in practice just @code{GtkContainer} children is enough, because
Gtk's references normally form a tree, it's only Scheme signal handlers
referring up to parent container widgets which create cycles.

@cindex Boxed objects
@section Boxed objects

Objects which are not sub-classes of @code{GObject} are handled by a simpler
``boxing'' system.  This includes resources like @code{GdkCursor}, and types
that are more or less user-level structures like @code{GdkRegion}.

A @code{gtkboxed} smob holds the C pointer to the object plus its type in the
form of an index into the Guile-Gtk @code{type_info_tab} table.  That table
holds the @code{GType} value plus certain other information.

Boxed types each have their own specific @code{ref}/@code{unref} functions,
declared explicitly in the @file{.defs} file, such as @code{gdk_cursor_ref}.
When a smob is created a reference is added, so the object stays alive while
in use from Scheme.  When the smob is garbage collected, the unref function is
called.  Because there's no signal handlers attached to boxed objects the
circular references problem for @code{GObject} above doesn't occur.

In the current code, whenever a boxed type is returned a new smob is created
for it.  No attempt is made to find and re-use an existing smob holding the
same pointer (and type).  This is simple, but it's also the reason boxed types
can't be compared with @code{eq?}.  A smob ``@nicode{equalp}'' function could
compare pointers, but it's not clear if that would be the best thing.
@code{equal?} normally looks into the contents of objects, so one might want
it for instance to test whether two @code{GdkRegion}s are the same area, or
something like that, instead of only the same object.

@cindex @code{GType}
@cindex @code{GtkType}
@section @code{GType}

@code{GType}s are represented by a smob holding the @code{GType} value (an
integer, though actually it's a pointer Glib has converted to an integer).
@code{GType} values are never destroyed, so there's no ref/unref to apply.  A
new smob is created whenever a @code{GType} is returned, no attempt is made to
find and re-use an existing smob for it.  A smob equality function allows
types to be compared with @code{equal?}.

Guile-Gtk functions taking a @code{GType} also accept a Scheme symbol, with
the name looked up to get the actual @code{GType} value to pass down to C.
@code{g_type_from_name} gives types which have been initialized (or are
builtin), and in addition Guile-Gtk has a table of @code{get_type} functions
to call, such as @code{gtk_vbox_get_type} for @code{GtkVBox}.  But that table
is limited to the types appearing in the @file{.defs} files, there's nowhere
in Glib or Gtk recording the names of all initializable types and classes.


@node Concept Index, Function and Type Index, Internals, Top
@unnumbered Concept Index
@printindex cp

@node Function and Type Index,  , Concept Index, Top
@unnumbered Function and Type Index
@printindex fn


@contents
@bye

@c Local variables:
@c fill-column: 78
@c End:
