/*
   GNU Maverik - a system for managing display and interaction in 
              Virtual Environment applications.
   Copyright (C) 2008  Advanced Interfaces Group

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

   The authors can be contacted via:
   www   - http://aig.cs.man.ac.uk
   email - maverik@aig.cs.man.ac.uk
   mail  - Advanced Interfaces Group, Room 2.94, Kilburn Building, 
        University of Manchester, Manchester, M13 9PL, UK
*/

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /opt/aig/cvs/Maverik/src/extras/VRML97/CyberVRML97/win32-vrml.yy.cxx,v 1.2 2001/12/21 16:37:34 cookj Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 236
#define YY_END_OF_BUFFER 237
static yyconst short int yy_accept[1523] =
    {   0,
        2,    2,    2,    2,  237,  236,    9,   12,  236,   11,
        4,    2,    2,    1,    1,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,    7,    8,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,    6,    5,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,    9,   12,    0,   13,
       11,   10,    2,    1,    0,    2,    0,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,    2,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,   48,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  149,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  235,  235,    2,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,    0,
        2,    3,  206,  206,  206,  206,  206,   22,  206,  206,
      206,  206,  202,  206,  206,  206,  206,   34,  206,  206,
      206,  206,  206,   41,  206,  206,  206,  206,  206,   47,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      203,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   87,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  126,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  186,  206,
      206,  192,  206,  206,  206,  206,  206,  206,  206,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      234,  235,  235,  235,  235,  209,  206,  206,  206,  206,

      206,  206,  206,   26,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,   16,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   14,   64,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  122,  206,  124,  206,  206,  206,  206,
      206,  206,  206,  134,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      166,  167,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  191,  206,  206,  206,  206,  206,  206,  206,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
       16,  235,  235,  235,  235,  235,  235,  235,  235,  235,
       14,  235,  235,  235,  235,  206,  206,  206,  206,  206,
      206,   24,  206,  206,  206,  206,  206,   15,  206,   36,
      206,  206,  206,  206,  206,  206,  206,  206,  204,  206,

      206,  206,  206,  206,  205,  206,  206,   58,   59,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   93,  206,   97,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  121,
      206,  206,  206,  206,  206,  206,  206,  132,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  152,  153,  206,  206,  156,  206,  158,
      206,  206,  206,  163,  206,  206,  206,  170,  206,  206,

      206,  206,  175,  176,  206,  206,  206,  180,  206,  206,
      185,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,   15,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  210,  235,   17,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
       40,  206,  206,  206,   45,  206,  206,  206,  206,  206,
      206,  206,  206,   57,   60,  206,   63,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   84,   88,  206,   90,  206,

      206,  206,   96,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  109,  110,  206,  206,  206,  206,
      206,  206,  206,  119,  206,  206,  206,  206,  206,  206,
      206,  131,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  145,  148,  206,  206,  206,  206,  157,
      206,  206,  206,  206,  206,  206,  206,  171,  206,  206,
      206,  206,  206,  179,  206,  206,  206,  188,  206,  206,
      193,  206,  206,  206,  206,  206,  206,  223,  235,  235,
      235,  235,  228,  235,  235,  226,  235,  235,  213,  235,
      235,  235,  218,  235,  235,  216,  235,  235,  235,  235,

      235,  235,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   79,  206,  206,  206,  206,  206,  206,
      206,   91,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  108,  206,  112,  206,  206,  206,
      206,  206,  206,  206,  206,  125,  206,  206,  206,  130,
      206,  206,  206,  137,  206,  206,  206,  206,  142,  206,
      206,  206,  206,  206,  206,  206,  206,  159,  160,  206,

      206,  206,  206,  206,  206,  172,  206,  206,  206,  206,
      206,  183,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  229,  224,  230,  225,  235,  235,  232,  233,  219,
      214,  215,  235,  235,  221,  222,  235,  211,  235,  235,
      206,  206,  206,  206,  206,  206,  206,   29,  206,  206,
      206,  206,  206,  206,  206,   42,  206,  206,  206,  206,
      206,  206,  206,   53,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,   81,  206,   83,  206,  206,   89,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  114,  115,  206,  206,  206,
      206,  206,  127,  128,  206,  133,  135,  136,  206,  139,
      206,  141,  143,  206,  206,  206,  206,  206,  154,  155,
      161,  162,  206,  206,  168,  169,  206,  206,  206,  178,
      181,  206,  206,  206,  206,  206,  206,  206,  206,  199,
      206,  201,  235,  231,  235,  220,  235,  212,  235,  206,
       19,  206,   21,   23,  206,  206,  206,  206,  206,   33,
       35,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   62,  206,  206,  206,  206,
       69,   70,  206,   72,  206,  206,  206,  206,  206,  206,

      206,   82,  206,   86,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  105,  106,  206,  206,  113,  206,
      206,  118,  206,  123,  206,  138,  206,  206,  206,  206,
      206,  151,  206,  165,  206,  206,  177,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  235,  235,  235,
      235,   18,   20,  206,   27,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,   52,  206,  206,
      206,  206,  206,  206,   67,  206,  206,  206,   74,  206,
       76,   77,  206,   80,  206,  206,   94,  206,   98,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  120,

      206,  206,  206,  206,  206,  206,  206,  173,  206,  206,
      206,  206,  206,  206,  206,  196,  206,  198,  200,  227,
      217,  235,  235,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,   51,  206,  206,  206,
      206,  206,  206,   68,  206,  206,   75,  206,  206,   92,
      206,   99,  206,  101,  206,  103,  206,  206,  111,  116,
      117,  129,  140,  144,  146,  206,  150,  206,  206,  206,
      206,  187,  189,  206,  206,  206,  197,  235,  235,  206,
      206,  206,  206,  206,   37,  206,  206,   43,  206,  206,
      206,   50,  206,  206,  206,   61,  206,  206,  206,  206,

      206,   85,  206,  100,  206,  104,  206,  206,  206,  206,
      206,  206,  190,  206,  206,  207,  208,  206,  206,  206,
      206,   32,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  102,  107,  206,  206,
      174,  182,  206,  206,  206,  206,  206,   30,  206,   38,
       39,   44,  206,  206,  206,  206,  206,  206,  206,  206,
      206,   78,   95,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,   55,  206,  206,  206,  206,  206,
      147,  206,  206,  194,  195,  206,  206,   31,  206,  206,
      206,  206,  206,   66,   71,   73,  164,  184,   25,  206,

      206,  206,  206,  206,   65,  206,   46,  206,  206,   56,
      206,  206,  206,  206,  206,   54,  206,  206,   28,  206,
       49,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   21,   21,   23,   24,   25,   26,   27,
       21,   28,   29,   30,   31,   32,   33,   21,   21,   21,
       34,    1,   35,    1,   21,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   21,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,    1,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    3,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    4,    4,    4,    4,    4,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1
    } ;

static yyconst short int yy_base[1529] =
    {   0,
        0,    0,   62,    0, 1673, 1674, 1670,    0, 1667, 1667,
     1674,  116,  120,  130,  140,  106,  118,   85,  119,  161,
      131, 1617,    0,   98, 1642,  128,  146,  140,  147, 1641,
      152,  161, 1637, 1621, 1614, 1674, 1674,  166,  189,  190,
      139,  240,  191,  146,  126,  136, 1608, 1622,  218,  168,
     1611,  166,  211,  220,  228,  225, 1608,  166, 1616,  215,
      256, 1674, 1674,    0,  284, 1644, 1638, 1625, 1636, 1626,
     1624, 1608,  292, 1607, 1595, 1597, 1646,    0, 1643, 1674,
     1643, 1674,  296,  306,  315,  319,    0,    0, 1607, 1593,
     1604, 1604, 1594, 1582,  187, 1592, 1619, 1585,  300,  328,

     1596, 1581, 1611,  151, 1583, 1596,  184, 1614, 1576, 1573,
     1605, 1571, 1574, 1606,    0, 1580, 1597, 1564, 1585,  223,
     1570, 1588,  247, 1582, 1562,  237, 1572, 1584, 1556, 1565,
     1557, 1575, 1592,  280, 1557, 1571, 1556, 1552, 1551, 1568,
     1559, 1564, 1551,  307, 1546, 1542, 1549,  300,  304,  241,
     1543, 1558, 1542,  304, 1550,  223, 1545, 1552,  244, 1541,
     1540, 1539,  298, 1536, 1551,  281,  299, 1527, 1536,  314,
      322,  304, 1535, 1531, 1541,    0, 1537, 1528, 1525,  320,
      317,  326, 1527, 1535, 1522, 1539, 1530,  327, 1514,  321,
      338,  333, 1514, 1517, 1519, 1533, 1517, 1520, 1528, 1512,

     1520, 1519, 1511, 1517, 1509,    0,  378,  383, 1536,  382,
     1535,  400, 1526, 1538, 1503, 1514, 1513, 1499, 1504,  423,
      427,    0, 1507, 1509, 1504, 1501, 1499,    0,  330, 1505,
     1492, 1499,    0, 1502, 1485, 1488, 1510,    0, 1484, 1482,
     1494, 1495, 1490,    0, 1493, 1488, 1508, 1486, 1481,    0,
     1488, 1497, 1486, 1476, 1475, 1479, 1464, 1491, 1473, 1475,
     1467, 1468, 1476, 1461, 1460, 1495, 1458, 1471, 1472, 1460,
        0, 1451, 1463, 1459, 1461, 1464, 1463, 1452, 1447, 1447,
     1453, 1440, 1449, 1452, 1441,    0, 1440, 1446, 1448,  334,
     1435, 1438, 1453, 1435, 1461, 1439, 1447, 1443, 1443, 1436,

     1428, 1443, 1463, 1434, 1430, 1446, 1421, 1425, 1425, 1417,
     1432, 1428, 1425, 1426, 1417, 1426, 1414, 1410, 1431, 1420,
     1407, 1418, 1419, 1422, 1406, 1416,  427,  394, 1407, 1401,
     1413, 1416, 1413, 1401, 1405, 1398, 1389, 1402, 1403, 1404,
     1400, 1406, 1394, 1391, 1399, 1398,  386, 1393, 1384,  389,
      365, 1386, 1382, 1382, 1388, 1384,  363, 1383,  393, 1380,
     1388,    0, 1373, 1382, 1387, 1376, 1387, 1374, 1385, 1391,
     1369, 1368, 1370,  399, 1366, 1365, 1360, 1369, 1372, 1388,
     1360, 1359, 1361, 1358, 1356, 1355, 1350, 1359, 1362, 1383,
        0, 1360, 1350, 1351, 1343,    0, 1346, 1359, 1344, 1351,

     1355, 1347, 1338,    0, 1350, 1339, 1349, 1350, 1330, 1366,
     1354, 1331, 1341, 1322, 1330, 1326, 1337,    0, 1334, 1339,
     1325, 1347, 1325, 1331, 1316, 1315, 1324, 1349, 1330, 1314,
     1324, 1324, 1310, 1338, 1322,    0, 1304, 1329, 1314, 1303,
     1304, 1317, 1314, 1312, 1315, 1301, 1323, 1312, 1321, 1315,
      370, 1312, 1295, 1293, 1302, 1302, 1302, 1295, 1286, 1297,
     1297, 1282, 1281, 1292, 1292, 1279, 1275, 1291, 1314, 1274,
     1279, 1289, 1277, 1284, 1263, 1292, 1266, 1279, 1269, 1270,
     1273, 1255, 1274,    0, 1264,    0, 1268, 1275, 1255,  419,
     1255, 1261, 1253,    0, 1254, 1256, 1268, 1245, 1250, 1251,

     1251, 1263, 1246, 1247, 1260, 1255, 1245, 1245, 1249, 1237,
     1236, 1237, 1229, 1232, 1246, 1249, 1230, 1229, 1242, 1237,
        0,    0, 1231, 1229, 1239, 1239, 1232, 1231, 1219, 1234,
     1232, 1217, 1240, 1220, 1228, 1217, 1211, 1225, 1214, 1211,
     1209,    0, 1211, 1223, 1216, 1218, 1219, 1216, 1217, 1236,
     1203, 1205, 1201, 1214, 1195, 1209, 1193, 1194, 1197, 1206,
        0, 1193, 1195, 1191, 1186, 1200, 1184, 1185, 1188, 1197,
        0, 1196, 1179, 1193, 1213, 1178, 1177, 1212, 1175, 1176,
     1172, 1202, 1179, 1183, 1167, 1166, 1166,    0, 1164,    0,
     1187, 1176, 1175, 1170, 1183, 1176, 1164, 1156,    0, 1179,

     1179,  397, 1163, 1158,    0, 1153, 1150,    0,    0, 1163,
     1158, 1158, 1148, 1159, 1169, 1156, 1146, 1151, 1172, 1144,
     1140, 1136, 1149, 1137, 1147, 1135, 1146, 1141, 1140, 1167,
     1134, 1129, 1128, 1139, 1139,  429, 1119, 1154, 1135,  107,
      146,  194,  194,  204,  247,  322,  362,  378,  380,  385,
      426,  402,  401,  426,  404,  420,  416,  407,  412,    0,
      410,  423,  418,  430,  417,  416,  426,    0,  426,  427,
      430,  435,  420,  425,  423,  435,  440,  429,  427,  434,
      428,  429,  444,    0,    0,  441,  442,    0,  434,    0,
      434,  458,  446,  465,  443,  451,  447,    0,  455,  447,

      461,  451,    0,    0,  469,  456,  459,    0,  452,  451,
        0,  489,  458,  459,  455,  464,  493,  462,  468,  464,
      470,    0,  468,  466,  481,  476,  506,  480,  485,  478,
      483,  512,  479,  477,  492,  516,  490,  495,  488,  493,
      522,  482,  515,    0,  482,    0,  503,  493,  492,  507,
      500,  496,  497,  507,  504,  505,  506,  492,  512,  514,
        0,  518,  515,  502,  535,  522,  519,  520,  517,  522,
      513,  520,  543,    0,  537,  525,    0,  528,  520,  530,
      521,  528,  526,  525,  521,  540,  541,  537,  550,  552,
      534,  533,  523,  545,  549,  558,    0,  547,    0,  548,

      541,  551,    0,  543,  579,  554,  581,  547,  546,  558,
      555,  558,  545,  563,    0,    0,  562,  564,  546,  554,
      555,  594,  567,    0,  562,  568,  554,  559,  573,  588,
      570,    0,  568,  583,  573,  575,  582,  574,  580,  578,
      580,  578,  584,  607,    0,  594,  577,  582,  579,    0,
      606,  585,  588,  587,  600,  594,  592,    0,  601,  597,
      609,  602,  599,    0,  596,  609,  600,    0,  615,  616,
        0,  606,  611,  602,  607,  604,  609,    0,  607,  606,
      621,  650,    0,  609,  615,    0,  624,  625,    0,  615,
      614,  657,    0,  616,  622,    0,  631,  632,  648,  626,

      621,  641,  629,  635,  625,  629,  632,  629,  648,  633,
      636,  637,  638,  642,  632,  672,  645,  635,  650,  647,
      643,  640,  650,  658,  647,  653,  649,  655,  665,  663,
      691,  655,  660,  658,  662,  668,  672,  692,  666,  662,
      664,  674,  669,    0,  666,  682,  669,  673,  689,  674,
      678,  698,  690,  678,  692,  683,  695,  685,  681,  682,
      721,  688,  692,  700,    0,  709,    0,  695,  696,  685,
      696,  696,  704,  694,  695,    0,  710,  711,  708,    0,
      704,  707,  715,    0,  707,  703,  704,  719,    0,  706,
      707,  713,  723,  710,  725,  717,  708,    0,    0,  721,

      720,  726,  718,  732,  721,    0,  730,  723,  728,  737,
      739,  749,  726,  727,  730,  739,  740,  741,  744,  743,
      746,    0,    0,    0,    0,  745,  749,    0,    0,    0,
        0,    0,  748,  751,    0,    0,  739,    0,  741,  749,
      759,  747,  750,  761,  752,  762,  749,  775,  756,  757,
      758,  768,  755,  774,  767,    0,  758,  763,  760,  771,
      762,  764,  775,    0,  797,  761,  767,  773,  769,  774,
      773,  776,  774,  780,  775,  776,  781,  783,  795,  790,
      795,  776,  783,  798,    0,  796,    0,  801,  794,    0,
      798,  803,  812,  805,  804,  793,  806,  809,  806,  801,

      803,  813,  838,  811,  816,    0,    0,  815,  811,  805,
      824,  802,    0,    0,  820,    0,    0,    0,  809,    0,
      820,    0,    0,  821,  827,  815,  824,  817,    0,    0,
        0,    0,  830,  818,    0,    0,  812,  857,  834,    0,
      853,  824,  823,  834,  839,  826,  834,  838,  833,    0,
      834,    0,  835,    0,  836,    0,  833,    0,  833,  849,
        0,  851,    0,    0,  839,  852,  853,  858,  875,    0,
        0,  841,  859,  849,  844,  851,  861,  852,  848,  854,
      851,  857,  878,  868,  856,    0,  860,  875,  860,  863,
        0,    0,  855,    0,  861,  876,  867,  864,  879,  884,

      869,    0,  878,    0,  875,  866,  885,  868,  880,  884,
      882,  878,  881,  885,    0,    0,  883,  894,    0,  888,
      886,    0,  890,    0,  895,    0,  889,  890,  901,  910,
      893,    0,  895,    0,  905,  896,    0,  898,  912,  899,
      900,  902,  893,  914,  916,  906,  907,  908,  909,  908,
      924,    0,    0,  910,  940,  914,  917,  913,  914,  927,
      928,  917,  948,  919,  923,  921,  922,    0,  921,  936,
      925,  928,  927,  931,    0,  929,  953,  943,    0,  935,
        0,    0,  931,    0,  931,  947,    0,  936,    0,  949,
      940,  951,  936,  944,  944,  948,  939,  957,  946,    0,

      945,  951,  952,  944,  963,  955,  951,    0,  959,  968,
      959,  961,  961,  973,  989,    0,  973,    0,    0,    0,
        0,  959,  961,  966,  969,  966,  997,  977,  982,  994,
      995,  985,  977,  976, 1006,  989,    0,  990,  982,  981,
      981,  995,  982,    0,  996,  988,    0,  994,  986,    0,
      986,    0,  992,    0, 1006,    0,  991,  994,    0,    0,
        0,    0,    0,    0,    0,  993,    0, 1010,  997, 1008,
      996,    0,    0,  991, 1007, 1016,    0,  999, 1014, 1008,
     1002, 1007, 1014, 1020,    0, 1020, 1021,    0, 1021, 1013,
     1015,    0, 1013, 1013, 1017,    0, 1024, 1028, 1021, 1018,

     1022,    0, 1033,    0, 1027,    0, 1023, 1022, 1023, 1026,
     1021, 1039,    0, 1033, 1033,    0,    0, 1047, 1044, 1033,
     1044,    0, 1033, 1034, 1039, 1043, 1037, 1041, 1043, 1047,
     1046, 1046, 1044, 1054, 1050, 1042,    0,    0, 1061, 1058,
        0,    0, 1053, 1060, 1063, 1052, 1055,    0, 1065,    0,
        0,    0, 1073, 1070, 1061, 1060, 1077, 1078, 1063, 1066,
     1063,    0,    0, 1060, 1069, 1068, 1067, 1082, 1073, 1073,
     1071, 1072, 1075, 1081,    0, 1075, 1076, 1083, 1080, 1074,
        0, 1085, 1087,    0,    0, 1084, 1087,    0, 1088, 1088,
     1104, 1091, 1102,    0,    0,    0,    0,    0,    0, 1096,

     1092, 1095, 1092, 1095,    0, 1112,    0, 1102, 1100,    0,
     1097, 1116, 1101, 1104, 1101,    0, 1104, 1107,    0, 1106,
        0, 1674, 1158, 1162, 1166, 1168, 1170, 1156
    } ;

static yyconst short int yy_def[1529] =
    {   0,
     1522,    1, 1522,    3, 1522, 1522, 1522, 1523, 1524, 1525,
     1522, 1522, 1522, 1522, 1522, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1522, 1522, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1522, 1522, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1522, 1523, 1524, 1522,
     1525, 1522, 1522, 1522, 1522, 1522, 1528, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1522,
     1522, 1528, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,

     1527, 1527, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527,
     1527, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
     1527, 1527, 1527, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1527, 1527, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526,    0, 1522, 1522, 1522, 1522, 1522, 1522
    } ;

static yyconst short int yy_nxt[1737] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   14,
       15,   15,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   23,   61,
       62,   63,    6,    7,    8,    9,   10,    6,   11,   12,
       13,   14,   15,   15,   15,   64,   64,   64,   64,   65,
       66,   64,   64,   64,   64,   67,   68,   64,   64,   64,
       69,   70,   71,   64,   64,   36,   37,   64,   64,   64,

       72,   73,   74,   64,   64,   64,   64,   64,   64,   75,
       64,   64,   64,   64,   64,   64,   76,   64,   64,   64,
       64,   64,   62,   63,   83,   84,   84,   84,   84,   86,
       86,   86,   86,   85,   95,  806,   97,   85,   83,   84,
       84,   84,   84,   96,  103,  106,  107,   85,   83,   84,
       84,   84,   84,   92,   89,   85,   90,   85,  114,   85,
       91,   93,   98,  109,  115,  163,   99,   94,   99,   85,
      100,  100,  100,  100,  117,  164,  111,  110,  153,   85,
      104,  112,  154,  165,  166,  161,  807,   87,  128,  123,
      118,  116,  238,  119,  124,  113,  120,  162,  121,  239,

      129,  125,  126,  172,  130,  199,  175,  101,  127,  200,
      131,  173,  132,  136,  176,  808,  137,  177,  102,  138,
      139,  140,  242,  141,  142,  143,  157,  146,  144,  147,
      243,  202,  148,  229,  158,  230,  231,  809,  145,  149,
      159,  150,  160,  203,  151,   99,  178,   99,  152,  100,
      100,  100,  100,  169,  179,  182,  810,  170,  302,  183,
      180,  303,  181,  184,  193,  186,  255,  171,  194,  185,
      187,  188,  204,  189,  195,  256,  196,  190,  191,  263,
      293,  192,  259,  197,  205,  306,  264,  155,  156,  207,
      294,  207,  307,  208,  208,  208,  208,  207,  260,  207,

      811,  208,  208,  208,  208,   86,   86,   86,   86,  100,
      100,  100,  100,   85,   83,   84,   84,   84,   84,  272,
      220,  315,  220,   85,  221,  221,  221,  221,   86,   86,
       86,   86,  273,  311,  316,   85,   85,  100,  100,  100,
      100,  312,  283,  288,  298,   85,  317,  216,  284,  289,
      290,  318,  291,  292,  321,  299,  300,  326,   85,  324,
      336,  327,  322,  334,  338,  345,  337,  348,  353,  323,
      812,  325,  335,  350,  339,  349,  402,  351,  536,  403,
      458,  352,  354,  459,  355,  627,  346,  208,  208,  208,
      208,  356,  208,  208,  208,  208,  371,  372,  628,  523,

      373,  524,  529,  374,  530,  813,  375,  501,  502,  376,
      377,  378,  503,  379,  381,  382,  537,  814,  383,  769,
      504,  384,  539,  540,  385,  770,  527,  386,  387,  388,
      815,  389,  221,  221,  221,  221,  221,  221,  221,  221,
      496,  497,  528,  816,  498,  499,  554,  555,  665,  666,
      801,  817,  818,  500,  819,  802,  820,  821,  822,  823,
      824,  825,  826,  827,  828,  829,  830,  831,  832,  833,
      834,  835,  836,  837,  838,  839,  840,  841,  842,  843,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  858,  859,  860,  861,  862,  863,

      864,  865,  866,  867,  868,  869,  871,  872,  873,  870,
      874,  875,  876,  877,  878,  879,  880,  881,  882,  883,
      884,  885,  886,  887,  888,  889,  890,  891,  892,  893,
      894,  895,  896,  897,  898,  899,  900,  902,  903,  904,
      901,  905,  906,  907,  908,  909,  910,  911,  912,  913,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  941,  942,  943,
      944,  945,  946,  947,  948,  949,  951,  952,  950,  953,
      954,  955,  956,  957,  958,  959,  960,  961,  962,  963,

      964,  965,  966,  967,  968,  969,  970,  971,  973,  972,
      974,  975,  976,  977,  978,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  990,  991,  992,  994,
      995,  996,  997,  993,  998,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
     1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
     1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1054, 1056, 1057, 1058, 1055, 1059, 1060, 1061, 1062, 1063,

     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
     1071, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1148,
     1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,

     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
     1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
     1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
     1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,

     1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,

     1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1377, 1378, 1379, 1380, 1376, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
     1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
     1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,

     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
     1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
     1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
     1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
     1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,   78,  222,
       78,   78,   79,   79,   79,   79,   81,   81,   81,   81,
       88,   88,  206,  206,  805,  804,  803,  800,  799,  798,
      797,  796,  795,  794,  793,  792,  791,  790,  789,  788,
      787,  786,  785,  784,  783,  782,  781,  780,  779,  778,

      777,  776,  775,  774,  773,  772,  771,  768,  767,  766,
      765,  764,  763,  762,  761,  760,  759,  758,  757,  756,
      755,  754,  753,  752,  751,  750,  749,  748,  747,  746,
      745,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  678,  677,  676,

      675,  674,  673,  672,  671,  670,  669,  668,  667,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,

      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  538,
      535,  534,  533,  532,  531,  526,  525,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  457,  456,  455,  454,  453,  452,  451,  450,  449,

      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  380,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  347,  344,  343,  342,  341,  340,  333,  332,
      331,  330,  329,  328,  320,  319,  314,  313,  310,  309,
      308,  305,  304,  301,  297,  296,  295,  287,  286,  285,

      282,  281,  280,  279,  278,  277,  276,  275,  274,  271,
      270,  269,  268,  267,  266,  265,  262,  261,  258,  257,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
      244,  241,  240,  237,  236,  235,  234,  233,  232,  228,
      227,  226,  225,  224,  223,   82,   80,   77,  219,  218,
      217,  215,  214,  213,  212,  211,  210,  209,  201,  198,
      174,  168,  167,  135,  134,  133,  122,  108,  105,   82,
       80,   77, 1522,    5, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,

     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522
    } ;

static yyconst short int yy_chk[1737] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   12,   12,   12,   12,   12,   13,
       13,   13,   13,   12,   18,  640,   19,   13,   14,   14,
       14,   14,   14,   18,   21,   24,   24,   14,   15,   15,
       15,   15,   15,   17,   16,   12,   16,   15,   28,   13,
       16,   17,   19,   26,   28,   45,   20,   17,   20,   14,
       20,   20,   20,   20,   29,   45,   27,   26,   41,   15,
       21,   27,   41,   46,   46,   44,  641,   14,   32,   31,
       29,   28,  104,   29,   31,   27,   29,   44,   29,  104,

       32,   31,   31,   50,   32,   58,   52,   20,   31,   58,
       32,   50,   32,   38,   52,  642,   38,   52,   20,   38,
       38,   38,  107,   38,   39,   39,   43,   40,   39,   40,
      107,   60,   40,   95,   43,   95,   95,  643,   39,   40,
       43,   40,   43,   60,   40,   42,   53,   42,   40,   42,
       42,   42,   42,   49,   53,   54,  644,   49,  156,   54,
       53,  156,   53,   54,   56,   55,  120,   49,   56,   54,
       55,   55,   61,   55,   56,  120,   56,   55,   55,  126,
      150,   55,  123,   56,   61,  159,  126,   42,   42,   65,
      150,   65,  159,   65,   65,   65,   65,   73,  123,   73,

      645,   73,   73,   73,   73,   83,   83,   83,   83,   99,
       99,   99,   99,   83,   84,   84,   84,   84,   84,  134,
       85,  166,   85,   84,   85,   85,   85,   85,   86,   86,
       86,   86,  134,  163,  166,   83,   86,  100,  100,  100,
      100,  163,  144,  148,  154,   84,  167,   73,  144,  148,
      149,  167,  149,  149,  170,  154,  154,  172,   86,  171,
      181,  172,  170,  180,  182,  188,  181,  190,  192,  170,
      646,  171,  180,  191,  182,  190,  229,  191,  357,  229,
      290,  191,  192,  290,  192,  451,  188,  207,  207,  207,
      207,  192,  208,  208,  208,  208,  210,  210,  451,  347,

      210,  347,  351,  210,  351,  647,  210,  328,  328,  210,
      210,  210,  328,  210,  212,  212,  357,  648,  212,  602,
      328,  212,  359,  359,  212,  602,  350,  212,  212,  212,
      649,  212,  220,  220,  220,  220,  221,  221,  221,  221,
      327,  327,  350,  650,  327,  327,  374,  374,  490,  490,
      636,  651,  652,  327,  653,  636,  654,  655,  656,  657,
      658,  659,  661,  662,  663,  664,  665,  666,  667,  669,
      670,  671,  672,  673,  674,  675,  676,  677,  678,  679,
      680,  681,  682,  683,  686,  687,  689,  691,  692,  693,
      694,  695,  696,  697,  699,  700,  701,  702,  705,  706,

      707,  709,  710,  712,  713,  714,  715,  716,  717,  714,
      718,  719,  720,  721,  723,  724,  725,  726,  727,  728,
      729,  730,  731,  732,  732,  733,  734,  735,  736,  737,
      738,  739,  740,  741,  741,  742,  743,  745,  747,  748,
      743,  749,  750,  751,  752,  753,  754,  755,  756,  757,
      758,  759,  760,  762,  763,  764,  765,  766,  767,  768,
      769,  770,  771,  772,  773,  775,  776,  778,  779,  780,
      781,  782,  783,  784,  785,  786,  787,  788,  789,  790,
      791,  792,  793,  794,  795,  796,  798,  800,  796,  801,
      802,  804,  805,  806,  807,  808,  809,  810,  811,  812,

      813,  814,  817,  818,  819,  820,  821,  822,  823,  822,
      825,  826,  827,  828,  829,  830,  831,  833,  834,  835,
      836,  837,  838,  839,  840,  841,  842,  843,  844,  846,
      847,  848,  849,  844,  851,  851,  852,  853,  854,  855,
      856,  857,  859,  860,  861,  862,  863,  865,  866,  867,
      869,  870,  872,  873,  874,  875,  876,  877,  879,  880,
      881,  882,  884,  885,  887,  888,  890,  891,  892,  894,
      895,  897,  898,  899,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,
      916,  917,  918,  919,  916,  920,  921,  922,  923,  924,

      925,  926,  927,  928,  929,  930,  931,  932,  933,  934,
      935,  936,  937,  938,  939,  940,  941,  942,  943,  945,
      931,  946,  947,  948,  949,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  959,  960,  961,  962,  963,  964,
      966,  968,  969,  970,  971,  972,  973,  974,  975,  977,
      978,  979,  981,  982,  983,  985,  986,  987,  988,  990,
      991,  992,  993,  994,  995,  996,  997, 1000, 1001, 1002,
     1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1017,
     1027, 1033, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044,

     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1088,
     1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1111,
     1112, 1115, 1119, 1121, 1124, 1125, 1126, 1127, 1128, 1133,
     1134, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1151, 1153, 1155, 1157, 1159, 1160, 1162,
     1165, 1166, 1167, 1168, 1169, 1172, 1173, 1174, 1175, 1176,

     1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187,
     1188, 1189, 1190, 1193, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1213, 1214, 1217, 1218, 1220, 1221, 1223, 1225, 1227, 1228,
     1229, 1230, 1231, 1233, 1235, 1236, 1238, 1239, 1240, 1241,
     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274,
     1276, 1277, 1278, 1280, 1283, 1285, 1286, 1288, 1290, 1291,
     1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302,

     1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1317, 1322, 1323, 1324, 1315, 1325, 1326, 1327,
     1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1338,
     1339, 1340, 1341, 1342, 1343, 1345, 1346, 1348, 1349, 1351,
     1353, 1355, 1357, 1358, 1366, 1368, 1369, 1370, 1371, 1374,
     1375, 1376, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1386,
     1387, 1389, 1390, 1391, 1393, 1394, 1395, 1397, 1398, 1399,
     1400, 1401, 1403, 1405, 1407, 1408, 1409, 1410, 1411, 1412,
     1414, 1415, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,

     1439, 1440, 1443, 1444, 1445, 1446, 1447, 1449, 1453, 1454,
     1455, 1456, 1457, 1458, 1459, 1460, 1461, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1476, 1477,
     1478, 1479, 1480, 1482, 1483, 1486, 1487, 1489, 1490, 1491,
     1492, 1493, 1500, 1501, 1502, 1503, 1504, 1506, 1508, 1509,
     1511, 1512, 1513, 1514, 1515, 1517, 1518, 1520, 1523, 1528,
     1523, 1523, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525,
     1526, 1526, 1527, 1527,  639,  638,  637,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  617,  616,  615,  614,  613,

      612,  611,  610,  607,  606,  604,  603,  601,  600,  598,
      597,  596,  595,  594,  593,  592,  591,  589,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,

      500,  499,  498,  497,  496,  495,  493,  492,  491,  489,
      488,  487,  485,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  403,
      402,  401,  400,  399,  398,  397,  395,  394,  393,  392,

      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  361,  360,  358,
      356,  355,  354,  353,  352,  349,  348,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  289,  288,  287,  285,  284,  283,  282,  281,  280,

      279,  278,  277,  276,  275,  274,  273,  272,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  249,  248,
      247,  246,  245,  243,  242,  241,  240,  239,  237,  236,
      235,  234,  232,  231,  230,  227,  226,  225,  224,  223,
      219,  218,  217,  216,  215,  214,  213,  211,  209,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  189,  187,  186,  185,  184,  183,  179,  178,
      177,  175,  174,  173,  169,  168,  165,  164,  162,  161,
      160,  158,  157,  155,  153,  152,  151,  147,  146,  145,

      143,  142,  141,  140,  139,  138,  137,  136,  135,  133,
      132,  131,  130,  129,  128,  127,  125,  124,  122,  121,
      119,  118,  117,  116,  114,  113,  112,  111,  110,  109,
      108,  106,  105,  103,  102,  101,   98,   97,   96,   94,
       93,   92,   91,   90,   89,   81,   79,   77,   76,   75,
       74,   72,   71,   70,   69,   68,   67,   66,   59,   57,
       51,   48,   47,   35,   34,   33,   30,   25,   22,   10,
        9,    7,    5, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,

     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "vrml.l"
#define INITIAL 0
#line 2 "vrml.l"
/******************************************************************
*
*	VRML library for C++
*
*	Copyright (C) Satoshi Konno 1996-1998
*
*	File:	vrml.l
*
******************************************************************/
 
#include <stdio.h>
#include <string.h>
#include "SceneGraph.h"
#include "win32-vrml.tab.h"

static int	nCurrentLine = 1;
static char	*buffer;
static char	*lineBuffer;
static char	*name;
static void (*callbackFn)(int nLine, void *info);
static void *callbackFnInfo;

#define input	yyinput
#define output	yyoutput

void CurrentLineIncrement();
int UnputString(char *pBegin);

#define SCRIPTNODE 1

#define YY_ALWAYS_INTERACTIVE 1
#line 1282 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 36 "vrml.l"


#line 1436 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1523 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1674 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 38 "vrml.l"
{ yylval.ival = atoi(yytext); return NUMBER;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 39 "vrml.l"
{ yylval.fval = (float)atof(yytext); return FLOAT;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 40 "vrml.l"
{ sscanf(yytext, "0x%x", &yylval.ival); return NUMBER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "vrml.l"
{ return ','; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "vrml.l"
{ BEGIN INITIAL;	return '}'; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "vrml.l"
{ return '{'; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "vrml.l"
{ return '['; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "vrml.l"
{ return ']'; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 48 "vrml.l"
;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 49 "vrml.l"
{ CurrentLineIncrement();}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 50 "vrml.l"
{ }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 51 "vrml.l"
{ strcpy(lineBuffer, yytext+1); CurrentLineIncrement(); yyless(1);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 52 "vrml.l"
{ yytext[yyleng-1] = '\0'; yylval.sval = yytext+1;  return STRING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "vrml.l"
{ yylval.ival = 1; return NUMBER; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 55 "vrml.l"
{ yylval.ival = 0; return NUMBER; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 56 "vrml.l"
{ return NULL_STRING; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 58 "vrml.l"
{ return ANCHOR; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 59 "vrml.l"
{ return APPEARANCE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 60 "vrml.l"
{ return AUDIOCLIP; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 61 "vrml.l"
{ return BACKGROUND; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 62 "vrml.l"
{ return BILLBOARD; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 63 "vrml.l"
{ return BOX; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 64 "vrml.l"
{ return COLLISION; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 65 "vrml.l"
{ return COLOR; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 66 "vrml.l"
{ return COLOR_INTERP; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 67 "vrml.l"
{ return CONE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 68 "vrml.l"
{ return COORDINATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 69 "vrml.l"
{ return COORDINATE_INTERP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 70 "vrml.l"
{ return CYLINDER; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 71 "vrml.l"
{ return CYLINDER_SENSOR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 72 "vrml.l"
{ return DIRECTIONALLIGHT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 73 "vrml.l"
{ return ELEVATION_GRID; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 74 "vrml.l"
{ return EXTRUSION; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 75 "vrml.l"
{ return FOG; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 76 "vrml.l"
{ return FONTSTYLE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 77 "vrml.l"
{ return GROUP; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 78 "vrml.l"
{ return IMAGE_TEXTURE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 79 "vrml.l"
{ return INDEXEDFACESET; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 80 "vrml.l"
{ return INDEXEDLINESET; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 81 "vrml.l"
{ return INLINE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 82 "vrml.l"
{ return LOD; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 83 "vrml.l"
{ return MATERIAL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 84 "vrml.l"
{ return MOVIE_TEXTURE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 85 "vrml.l"
{ return NAVIGATION_INFO; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 86 "vrml.l"
{ return NORMAL; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 87 "vrml.l"
{ return NORMAL_INTERP; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 88 "vrml.l"
{ yylval.ival = 1; return NUMBER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 89 "vrml.l"
{ yylval.ival = 0; return NUMBER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 90 "vrml.l"
{ return ORIENTATION_INTERP; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 91 "vrml.l"
{ return PIXEL_TEXTURE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 92 "vrml.l"
{ return PLANE_SENSOR; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 93 "vrml.l"
{ return POINTLIGHT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 94 "vrml.l"
{ return POINTSET; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 95 "vrml.l"
{ return POSITION_INTERP; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 96 "vrml.l"
{ return PROXIMITY_SENSOR; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 97 "vrml.l"
{ return SCALAR_INTERP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 98 "vrml.l"
{ BEGIN SCRIPTNODE;	return SCRIPT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 99 "vrml.l"
{ return SHAPE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 100 "vrml.l"
{ return SOUND; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 101 "vrml.l"
{ return SPHERE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 102 "vrml.l"
{ return SPHERE_SENSOR; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 103 "vrml.l"
{ return SPOTLIGHT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 104 "vrml.l"
{ return SWITCH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 105 "vrml.l"
{ return TEXT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 106 "vrml.l"
{ return TEXTURE_COORDINATE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 107 "vrml.l"
{ return TEXTURE_TRANSFORM; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 108 "vrml.l"
{ return TIME_SENSOR; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 109 "vrml.l"
{ return TOUCH_SENSOR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 110 "vrml.l"
{ return TRANSFORM; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 111 "vrml.l"
{ return VIEWPOINT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 112 "vrml.l"
{ return VISIBILITY_SENSOR; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 113 "vrml.l"
{ return WORLD_INFO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "vrml.l"
{ return S_AMBIENT_INTENSITY; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "vrml.l"
{ return S_APPEARANCE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 117 "vrml.l"
{ return S_ATTENUATION; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 118 "vrml.l"
{ return S_AUTO_OFFSET; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 119 "vrml.l"
{ return S_AVATAR_SIZE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 120 "vrml.l"
{ return S_AXIS_OF_ROTATION;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 121 "vrml.l"
{ return S_BACKURL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 122 "vrml.l"
{ return S_BBOXCENTER; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 123 "vrml.l"
{ return S_BBOXSIZE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 124 "vrml.l"
{ return S_BERM_WIDTH; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 125 "vrml.l"
{ return S_BEGIN_CAP; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 126 "vrml.l"
{ return S_BOTTOM; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 127 "vrml.l"
{ return S_BOTTOMRADIUS; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 128 "vrml.l"
{ return S_BOTTOMURL; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 129 "vrml.l"
{ return S_CCW; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 130 "vrml.l"
{ return S_CENTER; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 131 "vrml.l"
{ return S_CHILDREN; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 132 "vrml.l"
{ return S_CHOICE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 133 "vrml.l"
{ return S_COLLIDE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 134 "vrml.l"
{ return S_COLLIDETIME;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 135 "vrml.l"
{ return S_COLOR; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 136 "vrml.l"
{ return S_COLOR_INDEX; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 137 "vrml.l"
{ return S_COLOR_PER_VERTEX; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 138 "vrml.l"
{ return S_CONVEX; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 139 "vrml.l"
{ return S_COORD; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 140 "vrml.l"
{ return S_COORD_INDEX; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 141 "vrml.l"
{ return S_CREASE_ANGLE;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 142 "vrml.l"
{ return S_CROSS_SECTION; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 143 "vrml.l"
{ return S_CUTOFFANGLE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 144 "vrml.l"
{ return S_CYCLE_INTERVAL; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 145 "vrml.l"
{ return S_DESCRIPTION; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 146 "vrml.l"
{ return S_DIFFUSECOLOR; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 147 "vrml.l"
{ return S_DIRECTION; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 148 "vrml.l"
{ return S_DISK_ANGLE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 149 "vrml.l"
{ return S_EMISSIVECOLOR; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 150 "vrml.l"
{ return S_ENABLED; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 151 "vrml.l"
{ return S_END_CAP; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 152 "vrml.l"
{ return S_FAMILY; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 153 "vrml.l"
{ return S_FIELD_OF_VIEW; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 154 "vrml.l"
{ return S_FOG_TYPE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 155 "vrml.l"
{ return S_FONTSTYLE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 156 "vrml.l"
{ return S_FRONTURL; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 157 "vrml.l"
{ return S_GEOMETRY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 158 "vrml.l"
{ return S_GROUNDANGLE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 159 "vrml.l"
{ return S_GROUNDCOLOR; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 160 "vrml.l"
{ return S_HEADLIGHT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 161 "vrml.l"
{ return S_HEIGHT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 162 "vrml.l"
{ return S_HORIZONTAL; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 163 "vrml.l"
{ return S_IMAGE; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 164 "vrml.l"
{ return S_INFO; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 165 "vrml.l"
{ return S_INTENSITY; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 166 "vrml.l"
{ return S_JUMP; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 167 "vrml.l"
{ return S_JUSTIFY; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 168 "vrml.l"
{ return S_KEY; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 169 "vrml.l"
{ return S_KEYVALUE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 170 "vrml.l"
{ return S_LANGUAGE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 171 "vrml.l"
{ return S_LEFT2RIGHT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 172 "vrml.l"
{ return S_LEFTURL; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 173 "vrml.l"
{ return S_LENGTH; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 174 "vrml.l"
{ return S_LEVEL; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 175 "vrml.l"
{ return S_LOCATION; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 176 "vrml.l"
{ return S_LOOP; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 177 "vrml.l"
{ return S_MATERIAL; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 178 "vrml.l"
{ return S_MAX_ANGLE; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 179 "vrml.l"
{ return S_MAX_BACK; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 180 "vrml.l"
{ return S_MAX_EXTENT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 181 "vrml.l"
{ return S_MAX_FRONT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 182 "vrml.l"
{ return S_MAX_POSITION; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 183 "vrml.l"
{ return S_MIN_ANGLE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 184 "vrml.l"
{ return S_MIN_BACK; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 185 "vrml.l"
{ return S_MIN_FRONT; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 186 "vrml.l"
{ return S_MIN_POSITION; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 187 "vrml.l"
{ return S_NORMAL; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 188 "vrml.l"
{ return S_NORMAL_INDEX; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 189 "vrml.l"
{ return S_NORMAL_PER_VERTEX; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 190 "vrml.l"
{ return S_OFFSET;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 191 "vrml.l"
{ return S_ON; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 192 "vrml.l"
{ return S_ORIENTATION; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 193 "vrml.l"
{ return S_PARAMETER; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 194 "vrml.l"
{ return S_PICTH; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 195 "vrml.l"
{ return S_POINT; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 196 "vrml.l"
{ return S_POSITION; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 197 "vrml.l"
{ return S_PRIORITY; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 198 "vrml.l"
{ return S_PROXY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 199 "vrml.l"
{ return S_RADIUS; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 200 "vrml.l"
{ return S_RANGE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 201 "vrml.l"
{ return S_REPEAT_S; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 202 "vrml.l"
{ return S_REPEAT_T; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 203 "vrml.l"
{ return S_RIGHTURL; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 204 "vrml.l"
{ return S_ROTATION; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 205 "vrml.l"
{ return S_SCALE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 206 "vrml.l"
{ return S_SCALEORIENTATION; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 207 "vrml.l"
{ return S_SHININESS; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 208 "vrml.l"
{ return S_SIDE; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 209 "vrml.l"
{ return S_SIZE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 210 "vrml.l"
{ return S_SKYANGLE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 211 "vrml.l"
{ return S_SKYCOLOR; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 212 "vrml.l"
{ return S_SOLID;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 213 "vrml.l"
{ return S_SOURCE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 214 "vrml.l"
{ return S_SPACING; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 215 "vrml.l"
{ return S_SPATIALIZE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 216 "vrml.l"
{ return S_SPECULARCOLOR; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 217 "vrml.l"
{ return S_SPEED; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 218 "vrml.l"
{ return S_SPINE; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 219 "vrml.l"
{ return S_STARTTIME; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 220 "vrml.l"
{ return S_STOPTIME; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 221 "vrml.l"
{ return S_STRING; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 222 "vrml.l"
{ return S_STYLE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 223 "vrml.l"
{ return S_TEXCOORD; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 224 "vrml.l"
{ return S_TEXCOORD_INDEX;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 225 "vrml.l"
{ return S_TEXTURE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 226 "vrml.l"
{ return S_TEXTURETRANSFORM; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 227 "vrml.l"
{ return S_TITLE; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 228 "vrml.l"
{ return S_TOP; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 229 "vrml.l"
{ return S_TOP2BOTTOM; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 230 "vrml.l"
{ return S_TOPURL; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 231 "vrml.l"
{ return S_TRANSLATION; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 232 "vrml.l"
{ return S_TRANSPARENCY; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 233 "vrml.l"
{ return S_TYPE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 234 "vrml.l"
{ return S_URL; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 235 "vrml.l"
{ return S_VECTOR; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 236 "vrml.l"
{ return S_VISIBILITY_LIMIT; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 237 "vrml.l"
{ return S_VISIBILITY_RANGE; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 238 "vrml.l"
{ return S_WHICHCHILD; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 239 "vrml.l"
{ return S_WHICHCHOICE; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 240 "vrml.l"
{ return S_XDIMENSION; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 241 "vrml.l"
{ return S_XSPACING; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 242 "vrml.l"
{ return S_ZDIMENSION; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 243 "vrml.l"
{ return S_ZSPACING; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 245 "vrml.l"
{
	int c, n;
	c = n = 0;
	do {
		c = input();
		buffer[n++] = c;
	} while (c != '{');
	buffer[n-1] = '\0';

	char	defName[256];
	char	nodeName[256];
	sscanf(buffer, "%s %s", defName, nodeName);

	sprintf(buffer, "%s {", nodeName);

	SetDEFName(defName);
	UnputString(buffer);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 264 "vrml.l"
{
	int c, n;
	c = n = 0;

	do {
		c = input();
		if (c == '\n')
			nCurrentLine++;
	} while (c == '\t' || c == ' ');

	while (('0' <= c && c <= '9') || ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z') || c == '%' || c == '_' || c == '-' || c == '+') {
		buffer[n++] = c;
		c = input();
		if (c == '\n')
			nCurrentLine++;
	}
	buffer[n] = '\0';
	unput(c);

#ifdef UNUSE_DEF_NODE
	Node *defNode = GetParserObject()->findNodeByName(buffer);
	Node *useParentNode = GetCurrentNodeObject();
	if (defNode) {	
		if (useParentNode == NULL || (useParentNode != defNode && useParentNode->isAncestorNode(defNode) == false)) {
			Node *instanceNode = defNode->createInstanceNode();
			if (instanceNode)
				AddNode(instanceNode);
		}
	}
	return USE;
#else
	Node *node = GetParserObject()->findNodeByName(buffer);
	if (node) {
		Node *defNode = node->createDefNode();
		AddNode(defNode);
	}
	return USE;
#endif
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 304 "vrml.l"
{
	int c, n;
	c = n = 0;
	do {
		c = input();
		buffer[n++] = c;
		if (c == '\n')
			nCurrentLine++;
	} while (c != '[');
	buffer[n-1] = '\0';

	char	protoName[256];
	sscanf(buffer, "%s", protoName);

	n = 0;
	do {
		c = input();
		buffer[n++] = c;
		if (c == '\n')
			nCurrentLine++;
	} while (c != ']');
	buffer[n-1] = '\0';

//	char *fieldString = strdup(buffer);

	char *fieldString = new char[strlen(buffer)+1];
	strcpy(fieldString, buffer);

	while (c != '{') {
		c = input();
		if (c == '\n')
			nCurrentLine++;
	}

	n = 0;
	do {
		c = input();
		buffer[n++] = c;
		if (c == '\n')
			nCurrentLine++;
	} while (c != '{');

	int inputFlag = 1;
	do {
		c = input();

		switch (c) {
		case '{'	: inputFlag++; break;
		case '}'	: inputFlag--; break;
		case '\n'	: nCurrentLine++; break;
		case '#'	: /* sval comment */
			{
				do {
					c = input();
				} while (c != '\n');
				buffer[n++] = '\n';
				nCurrentLine++;
			}
		}

		buffer[n++] = c;

	} while (inputFlag);
	buffer[n] = '\0';

	do {
		c = input();
		if (c == '\n')
			nCurrentLine++;
	} while (c != '}');

	PROTO *proto = AddPROTOInfo(protoName, buffer, fieldString);
//	proto->getString(buffer);
//	UnputString(buffer);

	delete[] fieldString;
//	free(fieldString);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 383 "vrml.l"
{
	int c, n;
	c = n = 0;
	do {
		c = input();
		if (c == '\n')
			CurrentLineIncrement();
		else
			buffer[n++] = c;
	} while (c != '\n');
	buffer[n] = '\0';
	AddRouteInfo(buffer);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 397 "vrml.l"
{

	PROTO *proto = IsPROTOName(yytext);

	if (proto) {
		int c, n;
		c = 0;
		do {
			c = input();
			if (c == '\n')
				nCurrentLine++;
		} while (c != '{');

		n = 0;
		do {
			c = input();
			buffer[n++] = c;
			if (c == '\n')
				nCurrentLine++;
		} while (c != '}');
		buffer[n-1] = '\0';

		proto->addFields(buffer);

		proto->getString(buffer);

		UnputString(buffer);
		proto->deleteFields();
	}
	else {
		strcpy(name, yytext);
		yylval.sval = name;	
		return	NAME;
	}
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 433 "vrml.l"
{ return S_DIRECT_OUTPUT; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 434 "vrml.l"
{ return S_MUST_EVALUATE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 435 "vrml.l"
{ return S_URL; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 437 "vrml.l"
{ return FIELD; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 438 "vrml.l"
{ return EVENTIN; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 439 "vrml.l"
{ return EVENTOUT; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 441 "vrml.l"
{ return SFBOOL; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 442 "vrml.l"
{ return SFFLOAT; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 443 "vrml.l"
{ return SFINT32; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 444 "vrml.l"
{ return SFTIME; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 445 "vrml.l"
{ return SFROTATION; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 446 "vrml.l"
{ return SFNODE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 447 "vrml.l"
{ return SFCOLOR; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 448 "vrml.l"
{ return SFSTRING; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 449 "vrml.l"
{ return SFVEC2F; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 450 "vrml.l"
{ return SFVEC3F; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 452 "vrml.l"
{ return MFBOOL; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 453 "vrml.l"
{ return MFFLOAT; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 454 "vrml.l"
{ return MFINT32; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 455 "vrml.l"
{ return MFTIME; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 456 "vrml.l"
{ return MFROTATION; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 457 "vrml.l"
{ return MFNODE; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 458 "vrml.l"
{ return MFCOLOR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 459 "vrml.l"
{ return MFIMAGE; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 460 "vrml.l"
{ return MFSTRING; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 461 "vrml.l"
{ return MFVEC2F; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 462 "vrml.l"
{ return MFVEC3F; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 464 "vrml.l"
{ return USE; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 466 "vrml.l"
{
//	char *name = strdup(yytext);
	char *name = new char[strlen(yytext)+1];
	strcpy(name, yytext);
	yylval.sval = name;	
	return	NAME;
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 474 "vrml.l"
ECHO;
	YY_BREAK
#line 2883 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SCRIPTNODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1523 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1523 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1522);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 474 "vrml.l"


int yywrap()
{
  return 1;
} 

int yyerror(char *s) 
{ 
	Parser *parser = GetParserObject();
	parser->setErrorLineNumber(GetCurrentLineNumber());
	parser->setErrorToken(yytext);
	parser->setErrorLineString(GetErrorLineString());	
        parser->setErrorReason(s);//JMC
	return 0;
}

void CurrentLineIncrement()
{
	nCurrentLine++;
	if (callbackFn) 
		callbackFn(nCurrentLine, callbackFnInfo);
}

void MakeLexerBuffers(int lexBufferSize, int lineBufferSize)
{
	buffer = (char *)malloc(sizeof(char) * lexBufferSize);	
	lineBuffer = (char *)malloc(sizeof(char) * lineBufferSize);	
	lineBuffer[0] = '\0';
	yy_current_buffer = yy_create_buffer(yyin, lexBufferSize);
	name = (char *)malloc(sizeof(char) * lineBufferSize);	
}

void DeleteLexerBuffers(void)
{
	free(buffer);
	free(lineBuffer);
	free(name);
}

void SetLexCallbackFn(void (*func)(int nLine, void *info), void *fnInfo)
{
	callbackFn = func;
	callbackFnInfo = fnInfo;
}

int UnputString(char *pBegin)
{
	int nOutputLine = 0;

	if (!pBegin && !strlen(pBegin))
		return nOutputLine;

	char *pEnd = pBegin + strlen(pBegin);
	while(pEnd > pBegin) {
		unput(*--pEnd);
		if (*pEnd == '\n')
			nOutputLine++;
	}
	return nOutputLine;
}

void SetInputFile(FILE *fp)
{
  nCurrentLine = 1;
  yyrestart(fp);
}

int GetCurrentLineNumber(void)
{
  return nCurrentLine;
}

char *GetErrorLineString(void)
{
  return lineBuffer;
}


