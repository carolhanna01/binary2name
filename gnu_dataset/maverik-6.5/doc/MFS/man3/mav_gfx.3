.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH mav_gfx 3 "AIG" "29/Mar/102" "GNU Maverik v6.2"
.IX Title "mav_gfx 3"
.UC
.IX Name "B<mav_gfx> - Wrapper functions to graphics system."
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
\fBmav_gfx\fR \- Wrapper functions to graphics system.
.SH "LEVEL"
.IX Header "LEVEL"
Maverik Level 2
.SH "SYNTAX"
.IX Header "SYNTAX"
\fBvoid mav_gfxClipPlaneSet(int id, MAV_clipPlane cp);\fR
.PP
.IX Xref "mav_gfxClipPlaneSet" 

.PP
\fBvoid mav_gfxClipPlanesSet(MAV_clipPlanes *cp);\fR
.PP
.IX Xref "mav_gfxClipPlanesSet" 

.PP
\fBvoid mav_gfxClipPlaneEnable(int id);\fR
.PP
.IX Xref "mav_gfxClipPlaneEnable" 

.PP
\fBvoid mav_gfxClipPlaneDisable(int id);\fR
.PP
.IX Xref "mav_gfxClipPlaneDisable" 

.PP
\fBvoid mav_gfxClearC(void);\fR
.PP
.IX Xref "mav_gfxClearC" 

.PP
\fBvoid mav_gfxClearZ(void);\fR
.PP
.IX Xref "mav_gfxClearZ" 

.PP
\fBvoid mav_gfxClearA(void);\fR
.PP
.IX Xref "mav_gfxClearA" 

.PP
\fBvoid mav_gfxClearCZ(void);\fR
.PP
.IX Xref "mav_gfxClearCZ" 

.PP
\fBvoid mav_gfxBackgroundColourSet(float r, float g, float b);\fR
.PP
.IX Xref "mav_gfxBackgroundColourSet" 

.PP
\fBvoid mav_gfxDepthTestSet(int v);\fR
.PP
.IX Xref "mav_gfxDepthTestSet" 

.PP
\fBvoid mav_gfxDepthMaskSet(int v);\fR
.PP
.IX Xref "mav_gfxDepthMaskSet" 

.PP
\fBvoid mav_gfxNormalizeSet(int v);\fR
.PP
.IX Xref "mav_gfxNormalizeSet" 

.PP
\fBvoid mav_gfxBackfaceCullSet(int v);\fR
.PP
.IX Xref "mav_gfxBackfaceCullSet" 

.PP
\fBint  mav_gfxBackfaceCullGet(void);\fR
.PP
.IX Xref "mav_gfxBackfaceCullGet" 

.PP
\fBvoid mav_gfxBufferReadSet(int buf);\fR
.PP
.IX Xref "mav_gfxBufferReadSet" 

.PP
\fBvoid mav_gfxPixelRead(int x, int y, int w, int h, unsigned long *d);\fR
.PP
.IX Xref "mav_gfxPixelRead" 

.PP
\fBvoid mav_gfxPixelReadUByte(int x, int y, int w, int h, unsigned char *d);\fR
.PP
.IX Xref "mav_gfxPixelReadUByte" 

.PP
\fBvoid mav_gfxPixelDraw(int w, int h, float *v);\fR
.PP
.IX Xref "mav_gfxPixelDraw" 

.PP
\fBvoid mav_gfxViewPortSet(int x, int y, int w, int h);\fR
.PP
.IX Xref "mav_gfxViewPortSet" 

.PP
\fBvoid mav_gfxRasterPosSet(MAV_vector v);\fR
.PP
.IX Xref "mav_gfxRasterPosSet" 

.PP
\fBvoid mav_gfxRasterPos2DSet(float x, float y);\fR
.PP
.IX Xref "mav_gfxRasterPos2DSet" 

.PP
\fBvoid mav_gfxLineWidthSet(float wd);\fR
.PP
.IX Xref "mav_gfxLineWidthSet" 

.PP
\fBfloat mav_gfxLineWidthGet(void);\fR
.PP
.IX Xref "mav_gfxLineWidthGet" 

.PP
\fBvoid mav_gfxLineStippleSet(int factor, unsigned short pattern);\fR
.PP
.IX Xref "mav_gfxLineStippleSet" 

.PP
\fBvoid mav_gfxFogSet(int type, float data1, float data2, float r, float g, float b);\fR
.PP
.IX Xref "mav_gfxFogSet" 

.PP
\fBint mav_gfxVisualInfoGet(int *r, int *g, int *b, int *a, int *d, int *db, int *ar, int *ag, int *ab, int *aa, int *sb, int *msb);\fR
.PP
.IX Xref "mav_gfxVisualInfoGet" 

.PP
\fBvoid mav_gfxPolygonModeSet(int v);\fR
.PP
.IX Xref "mav_gfxPolygonModeSet" 

.PP
\fBvoid mav_gfxMultiSampleSet(int v);\fR
.PP
.IX Xref "mav_gfxMultiSampleSet" 

.PP
\fBvoid mav_gfxFinish(void);\fR
.PP
.IX Xref "mav_gfxFinish" 

.PP
\fBvoid mav_gfxFlush(void);\fR
.PP
.IX Xref "mav_gfxFlush" 

.PP
\fBvoid mav_gfxMatrixMode(int mode);\fR
.PP
.IX Xref "mav_gfxMatrixMode" 

.PP
\fBvoid mav_gfxMatrixLoad(MAV_matrix m);\fR
.PP
.IX Xref "mav_gfxMatrixLoad" 

.PP
\fBvoid mav_gfxMatrixPush(void);\fR
.PP
.IX Xref "mav_gfxMatrixPush" 

.PP
\fBvoid mav_gfxMatrixPop(void);\fR
.PP
.IX Xref "mav_gfxMatrixPop" 

.PP
\fBvoid mav_gfxMatrixMult(MAV_matrix m);\fR
.PP
.IX Xref "mav_gfxMatrixMult" 

.PP
\fBvoid mav_gfxMatrixTranslate(MAV_vector v);\fR
.PP
.IX Xref "mav_gfxMatrixTranslate" 

.PP
\fBvoid mav_gfxMatrixScale(float x, float y, float z);\fR
.PP
.IX Xref "mav_gfxMatrixScale" 

.PP
\fBvoid mav_gfxPerspectiveSet(float ncp, float fcp, float fov, float aspect);\fR
.PP
.IX Xref "mav_gfxPerspectiveSet" 

.PP
\fBvoid mav_gfxOrthogonalSet(float left, float right, float top, float bottom, float nr, float fr);\fR
.PP
.IX Xref "mav_gfxOrthogonalSet" 

.PP
\fBMAV_matrix *mav_gfxMatrixGet(void);\fR
.PP
.IX Xref "mav_gfxMatrixGet" 

.PP
\fBvoid mav_gfxPolygonBegin(void);\fR
.PP
.IX Xref "mav_gfxPolygonBegin" 

.PP
\fBvoid mav_gfxPolygonEnd(void);\fR
.PP
.IX Xref "mav_gfxPolygonEnd" 

.PP
\fBvoid mav_gfxTrianglesBegin(void);\fR
.PP
.IX Xref "mav_gfxTrianglesBegin" 

.PP
\fBvoid mav_gfxTrianglesEnd(void);\fR
.PP
.IX Xref "mav_gfxTrianglesEnd" 

.PP
\fBvoid mav_gfxStripQBegin(void);\fR
.PP
.IX Xref "mav_gfxStripQBegin" 

.PP
\fBvoid mav_gfxStripQEnd(void);\fR
.PP
.IX Xref "mav_gfxStripQEnd" 

.PP
\fBvoid mav_gfxStripTBegin(void);\fR
.PP
.IX Xref "mav_gfxStripTBegin" 

.PP
\fBvoid mav_gfxStripTEnd(void);\fR
.PP
.IX Xref "mav_gfxStripTEnd" 

.PP
\fBvoid mav_gfxLineClosedBegin(void);\fR
.PP
.IX Xref "mav_gfxLineClosedBegin" 

.PP
\fBvoid mav_gfxLineClosedEnd(void);\fR
.PP
.IX Xref "mav_gfxLineClosedEnd" 

.PP
\fBvoid mav_gfxLineBegin(void);\fR
.PP
.IX Xref "mav_gfxLineBegin" 

.PP
\fBvoid mav_gfxLineEnd(void);\fR
.PP
.IX Xref "mav_gfxLineEnd" 

.PP
\fBvoid mav_gfxMeshTBegin(void);\fR
.PP
.IX Xref "mav_gfxMeshTBegin" 

.PP
\fBvoid mav_gfxMeshTEnd(void);\fR
.PP
.IX Xref "mav_gfxMeshTEnd" 

.PP
\fBvoid mav_gfxVertex(MAV_vector v);\fR
.PP
.IX Xref "mav_gfxVertex" 

.PP
\fBvoid mav_gfxNormal(MAV_vector n);\fR
.PP
.IX Xref "mav_gfxNormal" 

.PP
\fBvoid mav_gfxTexCoord(MAV_texCoord t);\fR
.PP
.IX Xref "mav_gfxTexCoord" 

.PP
\fBvoid mav_gfxColouringModeUse(MAV_palette *p, int mode);\fR
.PP
.IX Xref "mav_gfxColouringModeUse" 

.PP
\fBvoid mav_gfxColourSet(MAV_colour col);\fR
.PP
.IX Xref "mav_gfxColourSet" 

.PP
\fBvoid mav_gfxColourUse(MAV_colour col);\fR
.PP
.IX Xref "mav_gfxColourUse" 

.PP
\fBvoid mav_gfxMaterialSet(MAV_material mat);\fR
.PP
.IX Xref "mav_gfxMaterialSet" 

.PP
\fBvoid mav_gfxMaterialUse(MAV_material mat);\fR
.PP
.IX Xref "mav_gfxMaterialUse" 

.PP
\fBvoid mav_gfxTextureSet(MAV_texture *tex, MAV_texEnvFn pTexEnv);\fR
.PP
.IX Xref "mav_gfxTextureSet" 

.PP
\fBvoid mav_gfxTextureUse(MAV_texture tex, MAV_texEnvFn pTexEnv);\fR
.PP
.IX Xref "mav_gfxTextureUse" 

.PP
\fBvoid mav_gfxLightingModelSet(MAV_lightingModel lm);\fR
.PP
.IX Xref "mav_gfxLightingModelSet" 

.PP
\fBvoid mav_gfxLightingModelUse(MAV_lightingModel lm);\fR
.PP
.IX Xref "mav_gfxLightingModelUse" 

.PP
\fBvoid mav_gfxLightSet(MAV_light l);\fR
.PP
.IX Xref "mav_gfxLightSet" 

.PP
\fBvoid mav_gfxLightUse(MAV_light l);\fR
.PP
.IX Xref "mav_gfxLightUse" 

.PP
\fBvoid mav_gfxLightPos(MAV_light l);\fR
.PP
.IX Xref "mav_gfxLightPos" 

.PP
\fBvoid mav_gfxBlendSet(int v);\fR
.PP
.IX Xref "mav_gfxBlendSet" 

.PP
\fBvoid mav_gfxTextureEnv1Set(int v);\fR
.PP
.IX Xref "mav_gfxTextureEnv1Set" 

.PP
\fBvoid mav_gfxTextureEnv2Set(int v);\fR
.PP
.IX Xref "mav_gfxTextureEnv2Set" 

.PP
\fBvoid mav_gfxAccumSet(int mode, float val);\fR
.PP
.IX Xref "mav_gfxAccumSet" 

.PP
\fBint mav_gfxListsNew(int range);\fR
.PP
.IX Xref "mav_gfxListsNew" 

.PP
\fBvoid mav_gfxListNew(int list, int mode);\fR
.PP
.IX Xref "mav_gfxListNew" 

.PP
\fBvoid mav_gfxListEnd(void);\fR
.PP
.IX Xref "mav_gfxListEnd" 

.PP
\fBvoid mav_gfxListExec(int list);\fR
.PP
.IX Xref "mav_gfxListExec" 

.PP
\fBvoid mav_gfxListsExec(int n, int *lists);\fR
.PP
.IX Xref "mav_gfxListsExec" 

.PP
\fBvoid mav_gfxListsDelete(int list, int range);\fR
.PP
.IX Xref "mav_gfxListsDelete" 

.PP
\fBvoid mav_gfx3DfxModeSet(int fullscreen);\fR
.PP
.IX Xref "mav_gfx3DfxModeSet" 

.PP
\fBint mav_gfx3DfxBoardSet(int bd);\fR
.PP
.IX Xref "mav_gfx3DfxBoardSet" 

.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These functions are wrappers to the corresponding graphics system (OpenGL, IrisGL or Direct3D) functions.

.rn }` ''
