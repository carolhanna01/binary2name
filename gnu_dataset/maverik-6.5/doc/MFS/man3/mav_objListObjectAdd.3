.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH mav_objListObjectAdd 3 "AIG" "29/Mar/102" "GNU Maverik v6.2"
.IX Title "mav_objListObjectAdd 3"
.UC
.IX Name "B<mav_objListObjectAdd> - SMS management: object list."
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
\fBmav_objListObjectAdd\fR \- SMS management: object list.
.SH "LEVEL"
.IX Header "LEVEL"
Maverik Level 3
.SH "SYNTAX"
.IX Header "SYNTAX"
\fBint mav_objListObjectAdd(MAV_SMS *s, MAV_object *o);\fR
.PP
.IX Xref "mav_objListObjectAdd" 

.PP
\fBint mav_objListObjectRmv(MAV_SMS *s, MAV_object *o);\fR
.PP
.IX Xref "mav_objListObjectRmv" 

.PP
\fBint mav_objListEmpty(MAV_SMS *s, int *o);\fR
.PP
.IX Xref "mav_objListEmpty" 

.PP
\fBint mav_objListIntersect(MAV_SMS *s, MAV_window *w, MAV_line *ln, MAV_objectIntersection *oi, MAV_object **o);\fR
.PP
.IX Xref "mav_objListIntersect" 

.PP
\fBint mav_objListPointerReset(MAV_SMS *s);\fR
.PP
.IX Xref "mav_objListPointerReset" 

.PP
\fBint mav_objListPointerPush(MAV_SMS *s);\fR
.PP
.IX Xref "mav_objListPointerPush" 

.PP
\fBint mav_objListPointerPop(MAV_SMS *s);\fR
.PP
.IX Xref "mav_objListPointerPop" 

.PP
\fBint mav_objListObjectNext(MAV_SMS *s, MAV_object **o);\fR
.PP
.IX Xref "mav_objListObjectNext" 

.PP
\fBint mav_objListExecFn(MAV_SMS *s, MAV_drawInfo *di, MAV_SMSExecFn *fn);\fR
.PP
.IX Xref "mav_objListExecFn" 

.PP
\fBint mav_objListDelete(MAV_SMS *s, int *o);\fR
.PP
.IX Xref "mav_objListDelete" 

.PP
\fBint mav_objListSize(MAV_SMS *s, int *sz);\fR
.PP
.IX Xref "mav_objListSize" 

.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These are the callback routines for the Object List class of SMS. Each of
these functions is registered for an SMS of this class on Maverik
initialisation.
.Ip "\fBmav_objListObjectAdd\fR " 4
.IX Item "\fBmav_objListObjectAdd\fR "
adds object \fIo\fR to
\s-1SMS\s0 \fIs\fR.
.Ip "\fBmav_objListObjectRmv\fR " 4
.IX Item "\fBmav_objListObjectRmv\fR "
removes object
\fIo\fR from \s-1SMS\s0 \fIs\fR.
.Ip "\fBmav_objListEmpty\fR " 4
.IX Item "\fBmav_objListEmpty\fR "
empties \s-1SMS\s0 \fIs\fR.
.Ip "\fBmav_objListIntersect\fR " 4
.IX Item "\fBmav_objListIntersect\fR "
returns in \fIo\fR the object in the
\s-1SMS\s0 with the closest intersection with line \fIln\fR. If an intersection is
detected, the closest intersection point is returned in \fIoi\fR, and the result
of the function is \s-1MAV_TRUE\s0. If no intersection is detected, the result of
the function is \s-1MAV_FALSE\s0.
.Ip "\fBmav_objListPointerReset\fR " 4
.IX Item "\fBmav_objListPointerReset\fR "
resets the \s-1SMS\s0 pointer to
the start of the \s-1SMS\s0.
.Ip "\fBmav_objListPointerPush\fR " 4
.IX Item "\fBmav_objListPointerPush\fR "
pushes the \s-1SMS\s0 pointer onto
the pointer stack.
.Ip "\fBmav_objListPointerPop\fR " 4
.IX Item "\fBmav_objListPointerPop\fR "
pops the \s-1SMS\s0 pointer off
the pointer stack.
.Ip "\fBmav_objListObjectNext\fR " 4
.IX Item "\fBmav_objListObjectNext\fR "
returns in \fIo\fR
the object at the current pointer position in the \s-1SMS\s0.
.Ip "\fBmav_objListExecFn\fR " 4
.IX Item "\fBmav_objListExecFn\fR "
executes the callback function \fIfn\fR, passing it drawing information
\fIdi\fR. 
.Ip "\fBmav_objListDelete\fR " 4
.IX Item "\fBmav_objListDelete\fR "
deletes object \fIo\fR from \s-1SMS\s0
\fIs\fR.
.Ip "\fBmav_objListSize\fR " 4
.IX Item "\fBmav_objListSize\fR "
returns in \fIsz\fR the number
of objects in \s-1SMS\s0 \fIs\fR.

.rn }` ''
