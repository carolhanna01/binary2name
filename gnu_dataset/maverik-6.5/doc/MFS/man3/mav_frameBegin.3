.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH mav_frameBegin 3 "AIG" "29/Mar/102" "GNU Maverik v6.2"
.IX Title "mav_frameBegin 3"
.UC
.IX Name "B<mav_frameBegin> - Starts a frame."
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
\fBmav_frameBegin\fR \- Starts a frame.
.SH "LEVEL"
.IX Header "LEVEL"
Maverik Level 1
.SH "SYNTAX"
.IX Header "SYNTAX"
\fBvoid mav_frameBegin(void);\fR
.PP
.IX Xref "mav_frameBegin" 

.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calling this function signifies the
start of a frame and causes the following actions to occur in order:
.Ip "1. The polling function for each device, defined by \fBmav_deviceNew\fR, is called to calculate the device's position in its coordinate frame." 4
.IX Item "1. The polling function for each device, defined by \fBmav_deviceNew\fR, is called to calculate the device's position in its coordinate frame."
.Ip "2. Any user-defined functions, set with \fBmav_frameFn0Add\fR, are executed." 4
.IX Item "2. Any user-defined functions, set with \fBmav_frameFn0Add\fR, are executed."
.Ip "3. Any user-defined functions, set with \fBmav_frameFn1Add\fR, are executed." 4
.IX Item "3. Any user-defined functions, set with \fBmav_frameFn1Add\fR, are executed."
.Ip "4. For each window, the framebuffer is cleared to its background colour (set with \fBmav_windowBackgroundColourSet\fR) and the view is set to the values defined by the view parameters associated with the window (set with \fBmav_windowViewParamsSet\fR)." 4
.IX Item "4. For each window, the framebuffer is cleared to its background colour (set with \fBmav_windowBackgroundColourSet\fR) and the view is set to the values defined by the view parameters associated with the window (set with \fBmav_windowViewParamsSet\fR)."
.Ip "5. The function to calculate the position of each device in world coordinates is executed." 4
.IX Item "5. The function to calculate the position of each device in world coordinates is executed."
.Ip "6. Any user-defined functions, set with \fBmav_frameFn2Add\fR, are executed." 4
.IX Item "6. Any user-defined functions, set with \fBmav_frameFn2Add\fR, are executed."
.PP
The purpose of having three sets of user-defined functions is as
follows. Those set with \fBmav_frameFn0Add\fR or \fBmav_frameFn1Add\fR can not perform any
rendering, since the framebuffer will not have yet been cleared. However,
since the view has not yet been fixed, they can change the values of the
view parameters. \fBmav_frameFn0Add\fR functions are reserved for use
by the navigation routines. Applications should use \fBmav_frameFn1Add\fR
function if they want to manipulate the view paramaters, e.g. tying
the view in one window to related to another.
.PP
The opposite is true for user-defined functions set with
\fBmav_frameFn2Add\fR. They may perform rendering, but since the view has
been defined, changing the view parameters will have no effect until the
next frame. Furthermore, \fBmav_frameFn0Add\fR and \fBmav_frameFn1Add\fR
functions can only use the local coordinate frame position of any
device, whereas \fBmav_frameFn2Add\fR functions can use both local and
world coordinate frame positions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\fBmav_frameEnd\fR, \fBmav_deviceNew\fR, \fBmav_frameFn0Add\fR,
\fBmav_frameFn1Add\fR, \fBmav_frameFn2Add\fR,
\fBmav_windowBackgroundColourSet\fR, \fBmav_windowViewParamsSet\fR.

.rn }` ''
