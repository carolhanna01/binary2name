.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH mav_listNew 3 "AIG" "29/Mar/102" "GNU Maverik v6.2"
.IX Title "mav_listNew 3"
.UC
.IX Name "B<mav_listNew> - List management functions."
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
\fBmav_listNew\fR \- List management functions.
.SH "LEVEL"
.IX Header "LEVEL"
Maverik Level 1
.SH "SYNTAX"
.IX Header "SYNTAX"
\fBMAV_list *mav_listNew(void);\fR
.PP
.IX Xref "mav_listNew" 

.PP
\fBvoid mav_listItemAdd(MAV_list *l, void *d);\fR
.PP
.IX Xref "mav_listItemAdd" 

.PP
\fBvoid mav_listItemRmv(MAV_list *l, void *d);\fR
.PP
.IX Xref "mav_listItemRmv" 

.PP
\fBint mav_listItemNext(MAV_list *l, void **d);\fR
.PP
.IX Xref "mav_listItemNext" 

.PP
\fBint mav_listItemContains(MAV_list *l, void *d);\fR
.PP
.IX Xref "mav_listItemContains" 

.PP
\fBvoid mav_listPointerReset(MAV_list *l);\fR
.PP
.IX Xref "mav_listPointerReset" 

.PP
\fBvoid mav_listPointerPush(MAV_list *l);\fR
.PP
.IX Xref "mav_listPointerPush" 

.PP
\fBvoid mav_listPointerPop(MAV_list *l);\fR
.PP
.IX Xref "mav_listPointerPop" 

.PP
\fBvoid mav_listEmpty(MAV_list *l);\fR
.PP
.IX Xref "mav_listEmpty" 

.PP
\fBvoid mav_listDelete(MAV_list *l);\fR
.PP
.IX Xref "mav_listDelete" 

.PP
\fBint mav_listSize(MAV_list *l);\fR
.PP
.IX Xref "mav_listSize" 

.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Ip "\fBmav_listNew\fR" 4
.IX Item "\fBmav_listNew\fR"
creates a new list, and returns a handle to the list.  Lists 
preserve elements in the order in which
they were inserted into the list. \fIMAV_list\fR's are implemented as linked-lists each with its own
private \*(L"list pointer\*(R", and a stack on which to save it, which can be used
to conveniently step through the list (see \fBmav_listItemNext\fR and related
functions).
.Ip "\fBmav_listItemAdd\fR" 4
.IX Item "\fBmav_listItemAdd\fR"
appends item \fId\fR to list \fIl\fR.
.Ip "\fBmav_listItemRmv\fR" 4
.IX Item "\fBmav_listItemRmv\fR"
searches list \fIl\fR for item \fId\fR and removes it from the list.
.Ip "\fBmav_listItemNext\fR" 4
.IX Item "\fBmav_listItemNext\fR"
returns, in \fId\fR, the 
list item currently pointed to by the list pointer of list \fIl\fR. The
return value of the function is \fI\s-1MAV_TRUE\s0\fR if the data was successfully
returned, otherwise \fI\s-1MAV_FALSE\s0\fR. The pointer is then moved onto the next item.
.Ip "\fBmav_listItemContains\fR" 4
.IX Item "\fBmav_listItemContains\fR"
searches list \fIl\fR for
item \fId\fR. The function returns \fI\s-1MAV_TRUE\s0\fR if the the item is
located, otherwise \fI\s-1MAV_FALSE\s0\fR.
.Ip "\fBmav_listPointerReset\fR" 4
.IX Item "\fBmav_listPointerReset\fR"
sets the list pointer of list \fIl\fR
to point to the beginning of the list.
.Ip "\fBmav_listPointerPush\fR" 4
.IX Item "\fBmav_listPointerPush\fR"
This function pushes the list pointer for list
\fIl\fR onto its stack. The value of the list pointer is unchanged.
.Ip "\fBmav_listPointerPop\fR" 4
.IX Item "\fBmav_listPointerPop\fR"
pops the list pointer for list \fIl\fR
from its stack.
.Ip "\fBmav_listEmpty\fR" 4
.IX Item "\fBmav_listEmpty\fR"
deletes all the linked-list nodes from list \fIl\fR.  It
does not, however, delete the data referenced by the nodes in the list. After
calling this function, \fIl\fR refers to an empty list, which can be used again.
.Ip "\fBmav_listDelete\fR" 4
.IX Item "\fBmav_listDelete\fR"
deletes all the nodes in list \fIl\fR. It
does not, however, delete any data referenced by the nodes in the list. After
calling this function, \fIl\fR is undefined.
.Ip "\fBmav_listSize\fR" 4
.IX Item "\fBmav_listSize\fR"
returns the number of items in list \fIl\fR.

.rn }` ''
