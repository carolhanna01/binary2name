\input texinfo
@ignore
\internalpagesizes{46\baselineskip}{6in}{-.25in}{-.25in}{\bindingoffset}{36pt}%
@end ignore
@c %**start of header
@setfilename complexity.info
@settitle GNU Complexity - Measure complexity of C source
@setchapternewpage off
@syncodeindex pg cp
@c %**end of header
@copying
This manual is for Complexity version 1.9, updated March 2016.

Copyright @copyright{} 2011-2016 by Bruce Korb.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@end quotation
@end copying

@ignore
EDIT THIS FILE WITH CAUTION  (complexity.texi)

It has been AutoGen-ed
From the definitions    ../src/opts.def
and the template file   complexity-tpl.texi
@end ignore

@dircategory Software development
@direntry
* Complexity: (complexity).         Measure complexity of C source.
@end direntry

@finalout
@titlepage
@title Complexity - Measure complexity of C source
@subtitle For version 1.9, updated March 2016
@author Bruce Korb
@author @email{bkorb@@gnu.org}

@page
@vskip 0pt plus 1filll
Complexity copyright @copyright{} 2011-2016 Bruce Korb

@insertcopying
@end titlepage

@contents

@ifnottex

@node Top, Introduction, , (dir)
@top Measure complexity of C source
@comment  node-name,  next,  previous,  up

This file documents Complexity version 1.9.  It is a tool designed
for analyzing the complexity of ``C'' program functions.  It is very similar
to the McCabe scoring, but addresses several issues not considered in that
scoring scheme.

This edition documents version 1.9, updated March 2016

@menu
* Introduction::            Introduction
* Complexity Computation::  Complexity Computation
* Example Output::          Example Output
* complexity Invocation::   Invoking complexity
* Copying This Manual::     Copying This Manual
* Concept Index::           General index
@end menu

@end ifnottex

@include intro.texi
@include compute.texi

@page
@node    Example Output
@chapter Example Output
@cindex  Example Output

This is a self-referential example. This output was obtained by
going into the complexity source directory and running the command:
@example
complexity --histogram --score --thresh=3 *.c
@end example

The @code{--threshold} is set to three because all of the functions
score below the default threshold of 30.  It is not zero because
there are too many trivial (0, 1 or 2) functions for a short example.

@noindent
This results in:

@example
Complexity Scores
Score | ln-ct | nc-lns| file-name(line): proc-name
    3      19      16   tokenize.c(561): skip_params
    3      22      17   tokenize.c(81): check_quote
    3      28      21   score.c(138): handle_stmt_block
    3      33      21   opts.c(991): translate_option_strings
    3      28      23   tokenize.c(123): comment_check
    3      37      27   complexity.c(58): initialize
    3      43      35   score.c(579): handle_TKN_KW_DO
    4      20      16   tokenize.c(447): next_nonblank
    4      25      19   tokenize.c(26): skip_comment
    4      25      20   tokenize.c(588): skip_to_semi
    4      39      32   tokenize.c(371): keyword_check
    4      54      42   complexity.c(347): load_file
    5      33      28   score.c(532): handle_TKN_KW_CASE
    5      40      32   score.c(359): handle_parms
    5      55      39   complexity.c(287): popen_unifdef
    5      61      47   complexity.c(487): do_proc
    5      66      47   score.c(815): score_proc
    5      63      51   score.c(185): fiddle_subexpr_score
    5      77      57   score.c(627): handle_TKN_KW_IF
    6      43      36   tokenize.c(160): hash_check
    7      53      42   score.c(709): handle_TKN_KW_FOR
    8      73      57   complexity.c(125): print_histogram
   10      57      50   tokenize.c(618): find_proc_start
   13     103      73   score.c(410): handle_expression
   14      90      65   score.c(259): handle_subexpr
   25      84      68   tokenize.c(472): next_token

Complexity Histogram
Score-Range  Lin-Ct
    0-9         725 **********************************************
   10-19        188 ****************
   20-29         68 ******

Scored procedure ct:       26
Non-comment line ct:      981
Average line score:         8
25%-ile score:              4 (75% in higher score procs)
50%-ile score:              5 (half in higher score procs)
75%-ile score:             10 (25% in higher score procs)
Highest score:             25 (next_token() in tokenize.c)
Unscored procedures:        5
@end example
@page
@include invoke-complexity.texi
@page
@node Copying This Manual
@appendix Copying This Manual

You may copy this manual under the terms of the FDL
(@url{http://gnu.org/licenses/fdl.texi,the GNU Free Documentation License}).

@cindex FDL, GNU Free Documentation License
@include fdl.texi

@page
@node Concept Index
@unnumbered Concept Index

@printindex cp
@bye
