/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (expr.ini)
 *  
 *  It has been AutoGen-ed  Saturday February 17, 2007 at 12:50:04 PM PST
 *  From the definitions    expr.def
 *  and the template file   snarf
 *
 *  copyright 1992-2006 Bruce Korb
 *
 *  AutoGen is free software.
 *  
 *  You may redistribute it and/or modify it under the terms of the
 *  GNU General Public License, as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *  
 *  AutoGen is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with AutoGen.  If not, write to:
 *  	The Free Software Foundation, Inc.,
 *  	51 Franklin Street, Fifth Floor
 *  	Boston, MA  02110-1301, USA.
 *
 *  Guile Initializations - Ag Global Variables
 */
#include "expr.h"


#ifndef __P
# if defined (__GNUC__) || (defined (__STDC__) && __STDC__)
#  define __P(args) args
# else
#  define __P(args) ()
# endif  /* GCC.  */
#endif  /* Not __P.  */

typedef SCM (*gh_callback_t)__P((void));
void ag_init( void );
#define NEW_PROC( _As, _Ar, _Ao, _Ax, _An ) \
  gh_new_procedure( (char*)(_As), (gh_callback_t)(void*)ag_scm_ ## _An, \
                    _Ar, _Ao, _Ax )

/*
 * ag Initialization procedure.
 */
void
ag_init( void )
{
static char const g_nm[832] =
    "ag-fprintf\0"         "ag-function?\0"       "base-name\0"
    "bsd\0"                "c-string\0"           "chdir\0"
    "count\0"              "def-file\0"           "def-file-line\0"
    "dne\0"                "emit\0"               "error\0"
    "error-source-line\0"  "exist?\0"             "extract\0"
    "find-file\0"          "first-for?\0"         "for-by\0"
    "for-from\0"           "for-index\0"          "for-sep\0"
    "for-to\0"             "format-arg-count\0"   "fprintf\0"
    "get\0"                "gperf\0"              "gpl\0"
    "hide-email\0"         "high-lim\0"           "in?\0"
    "join\0"               "kr-string\0"          "last-for?\0"
    "len\0"                "lgpl\0"               "license\0"
    "low-lim\0"            "make-gperf\0"         "makefile-script\0"
    "match-value?\0"       "max\0"                "min\0"
    "out-delete\0"         "out-depth\0"          "out-line\0"
    "out-move\0"           "out-name\0"           "out-pop\0"
    "out-push-add\0"       "out-push-new\0"       "out-resume\0"
    "out-suspend\0"        "out-switch\0"         "prefix\0"
    "printf\0"             "raw-shell-str\0"      "set-option\0"
    "set-writable\0"       "shell\0"              "shell-str\0"
    "shellf\0"             "sprintf\0"            "stack\0"
    "string-capitalize\0"  "string-capitalize!\0" "*=*\0"
    "*==*\0"               "string-downcase\0"    "string-downcase!\0"
    "*~\0"                 "*~~\0"                "*=\0"
    "*==\0"                "==\0"                 "~\0"
    "=\0"                  "*~*\0"                "*~~*\0"
    "~~\0"                 "~*\0"                 "~~*\0"
    "=*\0"                 "==*\0"                "string-substitute\0"
    "string->c-name!\0"    "string-tr\0"          "string-tr!\0"
    "string-upcase\0"      "string-upcase!\0"     "sub-shell-str\0"
    "suffix\0"             "sum\0"                "tpl-file\0"
    "tpl-file-line\0"      "version-compare\0";

    NEW_PROC(g_nm +   0, 2, 0, 1, ag_fprintf);
    NEW_PROC(g_nm +  11, 1, 0, 0, ag_function_p);
    NEW_PROC(g_nm +  24, 0, 0, 0, base_name);
    NEW_PROC(g_nm +  34, 3, 0, 0, bsd);
    NEW_PROC(g_nm +  38, 1, 0, 0, c_string);
    NEW_PROC(g_nm +  47, 1, 0, 0, chdir);
    NEW_PROC(g_nm +  53, 1, 0, 0, count);
    NEW_PROC(g_nm +  59, 0, 0, 0, def_file);
    NEW_PROC(g_nm +  68, 1, 1, 0, def_file_line);
    NEW_PROC(g_nm +  82, 1, 2, 0, dne);
    NEW_PROC(g_nm +  86, 0, 0, 1, emit);
    NEW_PROC(g_nm +  91, 1, 0, 0, error);
    NEW_PROC(g_nm +  97, 0, 0, 0, error_source_line);
    NEW_PROC(g_nm + 115, 1, 0, 0, exist_p);
    NEW_PROC(g_nm + 122, 2, 2, 0, extract);
    NEW_PROC(g_nm + 130, 1, 1, 0, find_file);
    NEW_PROC(g_nm + 140, 0, 1, 0, first_for_p);
    NEW_PROC(g_nm + 151, 1, 0, 0, for_by);
    NEW_PROC(g_nm + 158, 1, 0, 0, for_from);
    NEW_PROC(g_nm + 167, 0, 1, 0, for_index);
    NEW_PROC(g_nm + 177, 1, 0, 0, for_sep);
    NEW_PROC(g_nm + 185, 1, 0, 0, for_to);
    NEW_PROC(g_nm + 192, 1, 0, 0, format_arg_count);
    NEW_PROC(g_nm + 209, 2, 0, 1, fprintf);
    NEW_PROC(g_nm + 217, 1, 1, 0, get);
    NEW_PROC(g_nm + 221, 2, 0, 0, gperf);
    NEW_PROC(g_nm + 227, 2, 0, 0, gpl);
    NEW_PROC(g_nm + 231, 2, 0, 0, hide_email);
    NEW_PROC(g_nm + 242, 1, 0, 0, high_lim);
    NEW_PROC(g_nm + 251, 1, 0, 1, in_p);
    NEW_PROC(g_nm + 255, 1, 0, 1, join);
    NEW_PROC(g_nm + 260, 1, 0, 0, kr_string);
    NEW_PROC(g_nm + 270, 0, 1, 0, last_for_p);
    NEW_PROC(g_nm + 280, 1, 0, 0, len);
    NEW_PROC(g_nm + 284, 3, 0, 0, lgpl);
    NEW_PROC(g_nm + 289, 4, 0, 0, license);
    NEW_PROC(g_nm + 297, 1, 0, 0, low_lim);
    NEW_PROC(g_nm + 305, 1, 0, 1, make_gperf);
    NEW_PROC(g_nm + 316, 1, 0, 0, makefile_script);
    NEW_PROC(g_nm + 332, 3, 0, 0, match_value_p);
    NEW_PROC(g_nm + 345, 0, 0, 1, max);
    NEW_PROC(g_nm + 349, 0, 0, 1, min);
    NEW_PROC(g_nm + 353, 0, 0, 0, out_delete);
    NEW_PROC(g_nm + 364, 0, 0, 0, out_depth);
    NEW_PROC(g_nm + 374, 0, 0, 0, out_line);
    NEW_PROC(g_nm + 383, 1, 0, 0, out_move);
    NEW_PROC(g_nm + 392, 0, 0, 0, out_name);
    NEW_PROC(g_nm + 401, 0, 1, 0, out_pop);
    NEW_PROC(g_nm + 409, 1, 0, 0, out_push_add);
    NEW_PROC(g_nm + 422, 0, 1, 0, out_push_new);
    NEW_PROC(g_nm + 435, 1, 0, 0, out_resume);
    NEW_PROC(g_nm + 446, 1, 0, 0, out_suspend);
    NEW_PROC(g_nm + 458, 1, 0, 0, out_switch);
    NEW_PROC(g_nm + 469, 2, 0, 0, prefix);
    NEW_PROC(g_nm + 476, 1, 0, 1, printf);
    NEW_PROC(g_nm + 483, 1, 0, 0, raw_shell_str);
    NEW_PROC(g_nm + 497, 1, 0, 0, set_option);
    NEW_PROC(g_nm + 508, 0, 1, 0, set_writable);
    NEW_PROC(g_nm + 521, 1, 0, 0, shell);
    NEW_PROC(g_nm + 527, 1, 0, 0, shell_str);
    NEW_PROC(g_nm + 537, 1, 0, 1, shellf);
    NEW_PROC(g_nm + 544, 1, 0, 1, sprintf);
    NEW_PROC(g_nm + 552, 1, 0, 0, stack);
    NEW_PROC(g_nm + 558, 1, 0, 0, string_capitalize);
    NEW_PROC(g_nm + 576, 1, 0, 0, string_capitalize_x);
    NEW_PROC(g_nm + 595, 2, 0, 0, string_contains_eqv_p);
    NEW_PROC(g_nm + 599, 2, 0, 0, string_contains_p);
    NEW_PROC(g_nm + 604, 1, 0, 0, string_downcase);
    NEW_PROC(g_nm + 620, 1, 0, 0, string_downcase_x);
    NEW_PROC(g_nm + 637, 2, 0, 0, string_end_eqv_match_p);
    NEW_PROC(g_nm + 640, 2, 0, 0, string_end_match_p);
    NEW_PROC(g_nm + 644, 2, 0, 0, string_ends_eqv_p);
    NEW_PROC(g_nm + 647, 2, 0, 0, string_ends_with_p);
    NEW_PROC(g_nm + 651, 2, 0, 0, string_equals_p);
    NEW_PROC(g_nm + 654, 2, 0, 0, string_eqv_match_p);
    NEW_PROC(g_nm + 656, 2, 0, 0, string_eqv_p);
    NEW_PROC(g_nm + 658, 2, 0, 0, string_has_eqv_match_p);
    NEW_PROC(g_nm + 662, 2, 0, 0, string_has_match_p);
    NEW_PROC(g_nm + 667, 2, 0, 0, string_match_p);
    NEW_PROC(g_nm + 670, 2, 0, 0, string_start_eqv_match_p);
    NEW_PROC(g_nm + 673, 2, 0, 0, string_start_match_p);
    NEW_PROC(g_nm + 677, 2, 0, 0, string_starts_eqv_p);
    NEW_PROC(g_nm + 680, 2, 0, 0, string_starts_with_p);
    NEW_PROC(g_nm + 684, 3, 0, 0, string_substitute);
    NEW_PROC(g_nm + 702, 1, 0, 0, string_to_c_name_x);
    NEW_PROC(g_nm + 718, 3, 0, 0, string_tr);
    NEW_PROC(g_nm + 728, 3, 0, 0, string_tr_x);
    NEW_PROC(g_nm + 739, 1, 0, 0, string_upcase);
    NEW_PROC(g_nm + 753, 1, 0, 0, string_upcase_x);
    NEW_PROC(g_nm + 768, 1, 0, 0, sub_shell_str);
    NEW_PROC(g_nm + 782, 0, 0, 0, suffix);
    NEW_PROC(g_nm + 789, 0, 0, 1, sum);
    NEW_PROC(g_nm + 793, 0, 1, 0, tpl_file);
    NEW_PROC(g_nm + 802, 0, 1, 0, tpl_file_line);
    NEW_PROC(g_nm + 816, 3, 0, 0, version_compare);
}
#undef NEW_PROC
