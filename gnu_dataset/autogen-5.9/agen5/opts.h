/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (opts.h)
 *  
 *  It has been AutoGen-ed  Saturday February 17, 2007 at 12:50:03 PM PST
 *  From the definitions    /home/bkorb/ag/ag/agen5/opts.def
 *  and the template file   options
 *
 * Generated from AutoOpts 28:0:3 templates.
 */

/*
 *  This file was produced by an AutoOpts template.  AutoOpts is a
 *  copyrighted work.  This header file is not encumbered by AutoOpts
 *  licensing, but is provided under the licensing terms chosen by the
 *  autogen author or copyright holder.  AutoOpts is licensed under
 *  the terms of the LGPL.  The redistributable library (``libopts'') is
 *  licensed under the terms of either the LGPL or, at the users discretion,
 *  the BSD license.  See the AutoOpts and/or libopts sources for details.
 *
 * This source file is copyrighted and licensed under the following terms:
 *
 * autogen copyright 1992-2006 Bruce Korb - all rights reserved
 *
 * autogen is free software.
 * 
 * You may redistribute it and/or modify it under the terms of the
 * GNU General Public License, as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option)
 * any later version.
 * 
 * autogen is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with autogen.  If not, write to:
 * 	The Free Software Foundation, Inc.,
 * 	51 Franklin Street, Fifth Floor
 * 	Boston, MA  02110-1301, USA.
 */
/*
 *  This file contains the programmatic interface to the Automated
 *  Options generated for the autogen program.
 *  These macros are documented in the AutoGen info file in the
 *  "AutoOpts" chapter.  Please refer to that doc for usage help.
 */
#ifndef AUTOOPTS_OPTS_H_GUARD
#define AUTOOPTS_OPTS_H_GUARD
#include <autoopts/options.h>

/*
 *  Ensure that the library used for compiling this generated header is at
 *  least as new as the version current when the header template was released
 *  (not counting patch version increments).  Also ensure that the oldest
 *  tolerable version is at least as old as what was current when the header
 *  template was released.
 */
#define AO_TEMPLATE_VERSION 114688
#if (AO_TEMPLATE_VERSION < OPTIONS_MINIMUM_VERSION) \
 || (AO_TEMPLATE_VERSION > OPTIONS_STRUCT_VERSION)
# error option template version mismatches autoopts/options.h header
  Choke Me.
#endif

/*
 *  Enumeration of each option:
 */
typedef enum {
        INDEX_OPT_TEMPL_DIRS       =  0,
        INDEX_OPT_OVERRIDE_TPL     =  1,
        INDEX_OPT_LIB_TEMPLATE     =  2,
        INDEX_OPT_BASE_NAME        =  3,
        INDEX_OPT_DEFINITIONS      =  4,
        INDEX_OPT_LOAD_SCHEME      =  5,
        INDEX_OPT_LOAD_FUNCTIONS   =  6,
        INDEX_OPT_SKIP_SUFFIX      =  7,
        INDEX_OPT_SELECT_SUFFIX    =  8,
        INDEX_OPT_SOURCE_TIME      =  9,
        INDEX_OPT_NO_FMEMOPEN      = 10,
        INDEX_OPT_EQUATE           = 11,
        INDEX_OPT_WRITABLE         = 12,
        INDEX_OPT_LOOP_LIMIT       = 14,
        INDEX_OPT_TIMEOUT          = 15,
        INDEX_OPT_TRACE            = 16,
        INDEX_OPT_TRACE_OUT        = 17,
        INDEX_OPT_SHOW_DEFS        = 18,
        INDEX_OPT_DEFINE           = 20,
        INDEX_OPT_UNDEFINE         = 21,
        INDEX_OPT_SHORT_HELP       = 23,
        INDEX_OPT_VERSION          = 24,
        INDEX_OPT_HELP             = 25,
        INDEX_OPT_MORE_HELP        = 26,
        INDEX_OPT_SAVE_OPTS        = 27,
        INDEX_OPT_LOAD_OPTS        = 28
} teOptIndex;

#define OPTION_CT    29
#define AUTOGEN_VERSION       "5.9"
#define AUTOGEN_FULL_VERSION  "autogen (GNU AutoGen) - The Automated Program Generator - Ver. 5.9"

/*
 *  Interface defines for all options.  Replace "n" with the UPPER_CASED
 *  option name (as in the teOptIndex enumeration above).
 *  e.g. HAVE_OPT( TEMPL_DIRS )
 */
#define         DESC(n) (autogenOptions.pOptDesc[INDEX_OPT_## n])
#define     HAVE_OPT(n) (! UNUSED_OPT(& DESC(n)))
#define      OPT_ARG(n) (DESC(n).optArg.argString)
#define    STATE_OPT(n) (DESC(n).fOptState & OPTST_SET_MASK)
#define    COUNT_OPT(n) (DESC(n).optOccCt)
#define    ISSEL_OPT(n) (SELECTED_OPT(&DESC(n)))
#define ISUNUSED_OPT(n) (UNUSED_OPT(& DESC(n)))
#define  ENABLED_OPT(n) (! DISABLED_OPT(& DESC(n)))
#define  STACKCT_OPT(n) (((tArgList*)(DESC(n).optCookie))->useCt)
#define STACKLST_OPT(n) (((tArgList*)(DESC(n).optCookie))->apzArgs)
#define    CLEAR_OPT(n) STMTS( \
                DESC(n).fOptState &= OPTST_PERSISTENT_MASK;   \
                if ( (DESC(n).fOptState & OPTST_INITENABLED) == 0) \
                    DESC(n).fOptState |= OPTST_DISABLED; \
                DESC(n).optCookie = NULL )

/*
 *  Interface defines for specific options.
 */
#define VALUE_OPT_TEMPL_DIRS     'L'
#define SET_OPT_TEMPL_DIRS(a)   STMTS( \
        DESC(TEMPL_DIRS).optActualIndex = 0; \
        DESC(TEMPL_DIRS).optActualValue = VALUE_OPT_TEMPL_DIRS; \
        DESC(TEMPL_DIRS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(TEMPL_DIRS).fOptState |= OPTST_SET; \
        DESC(TEMPL_DIRS).optArg.argString = (a); \
        (*(DESC(TEMPL_DIRS).pOptProc))( &autogenOptions, \
                autogenOptions.pOptDesc + 0 ); )
#define VALUE_OPT_OVERRIDE_TPL   'T'
#define VALUE_OPT_LIB_TEMPLATE   'l'
#define VALUE_OPT_BASE_NAME      'b'
#define VALUE_OPT_DEFINITIONS    4
#define SET_OPT_DEFINITIONS(a)   STMTS( \
        DESC(DEFINITIONS).optActualIndex = 4; \
        DESC(DEFINITIONS).optActualValue = VALUE_OPT_DEFINITIONS; \
        DESC(DEFINITIONS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINITIONS).fOptState |= OPTST_SET; \
        DESC(DEFINITIONS).optArg.argString = (a) )
#define DISABLE_OPT_DEFINITIONS   STMTS( \
        DESC(DEFINITIONS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINITIONS).fOptState |= OPTST_SET | OPTST_DISABLED; \
        DESC(DEFINITIONS).optArg.argString = NULL )
#define VALUE_OPT_LOAD_SCHEME    'S'
#define SET_OPT_LOAD_SCHEME(a)   STMTS( \
        DESC(LOAD_SCHEME).optActualIndex = 5; \
        DESC(LOAD_SCHEME).optActualValue = VALUE_OPT_LOAD_SCHEME; \
        DESC(LOAD_SCHEME).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(LOAD_SCHEME).fOptState |= OPTST_SET; \
        DESC(LOAD_SCHEME).optArg.argString = (a); \
        (*(DESC(LOAD_SCHEME).pOptProc))( &autogenOptions, \
                autogenOptions.pOptDesc + 5 ); )
#ifdef HAVE_DLOPEN
#define VALUE_OPT_LOAD_FUNCTIONS 'F'
#endif /* HAVE_DLOPEN */
#define VALUE_OPT_SKIP_SUFFIX    's'
#define VALUE_OPT_SELECT_SUFFIX  'o'
#define VALUE_OPT_SOURCE_TIME    9
#ifdef ENABLE_FMEMOPEN
#define VALUE_OPT_NO_FMEMOPEN    'm'
#endif /* ENABLE_FMEMOPEN */
#define VALUE_OPT_EQUATE         11
#define VALUE_OPT_WRITABLE       12
#define SET_OPT_WRITABLE   STMTS( \
        DESC(WRITABLE).optActualIndex = 12; \
        DESC(WRITABLE).optActualValue = VALUE_OPT_WRITABLE; \
        DESC(WRITABLE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(WRITABLE).fOptState |= OPTST_SET )
#define DISABLE_OPT_WRITABLE   STMTS( \
        DESC(WRITABLE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(WRITABLE).fOptState |= OPTST_SET | OPTST_DISABLED; \
        DESC(WRITABLE).optArg.argString = NULL )
#define VALUE_OPT_LOOP_LIMIT     14
#define OPT_VALUE_LOOP_LIMIT     (DESC(LOOP_LIMIT).optArg.argInt)
#ifdef SHELL_ENABLED
#define VALUE_OPT_TIMEOUT        't'
#define OPT_VALUE_TIMEOUT        (DESC(TIMEOUT).optArg.argInt)
#endif /* SHELL_ENABLED */
typedef enum {
    TRACE_NOTHING,        TRACE_SERVER_SHELL,   TRACE_TEMPLATES,
    TRACE_BLOCK_MACROS,   TRACE_EXPRESSIONS,    TRACE_EVERYTHING
} te_Trace;
#define VALUE_OPT_TRACE          16
#define OPT_TRACE_VAL2STR(_v)    optionKeywordName( &DESC(TRACE), (_v))
#define OPT_VALUE_TRACE          (DESC(TRACE).optArg.argEnum)
#define VALUE_OPT_TRACE_OUT      17
#ifdef DEBUG_ENABLED
#define VALUE_OPT_SHOW_DEFS      18
#endif /* DEBUG_ENABLED */
#define VALUE_OPT_DEFINE         'D'
#define SET_OPT_DEFINE(a)   STMTS( \
        DESC(DEFINE).optActualIndex = 20; \
        DESC(DEFINE).optActualValue = VALUE_OPT_DEFINE; \
        DESC(DEFINE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINE).fOptState |= OPTST_SET; \
        DESC(DEFINE).optArg.argString = (a); \
        (*(DESC(DEFINE).pOptProc))( &autogenOptions, \
                autogenOptions.pOptDesc + 20 ); )
#define VALUE_OPT_UNDEFINE       'U'
#define SET_OPT_UNDEFINE(a)   STMTS( \
        DESC(DEFINE).optActualIndex = 21; \
        DESC(DEFINE).optActualValue = VALUE_OPT_UNDEFINE; \
        DESC(DEFINE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINE).fOptState |= OPTST_SET | OPTST_EQUIVALENCE; \
        DESC(DEFINE).optArg.argString = (a); \
        (*(DESC(UNDEFINE).pOptProc))( &autogenOptions, \
                autogenOptions.pOptDesc + INDEX_OPT_DEFINE ); )
#define VALUE_OPT_SHORT_HELP     'h'

#define VALUE_OPT_VERSION       'v'
#define VALUE_OPT_SAVE_OPTS     '>'
#define VALUE_OPT_LOAD_OPTS     '<'
#define VALUE_OPT_HELP          '?'
#define VALUE_OPT_MORE_HELP     '!'
#define SET_OPT_SAVE_OPTS(a)   STMTS( \
        DESC(SAVE_OPTS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(SAVE_OPTS).fOptState |= OPTST_SET; \
        DESC(SAVE_OPTS).optArg.argString = (char const*)(a) )
/*
 *  Interface defines not associated with particular options
 */
#define ERRSKIP_OPTERR  STMTS( autogenOptions.fOptSet &= ~OPTPROC_ERRSTOP )
#define ERRSTOP_OPTERR  STMTS( autogenOptions.fOptSet |= OPTPROC_ERRSTOP )
#define RESTART_OPT(n)  STMTS( \
                autogenOptions.curOptIdx = (n); \
                autogenOptions.pzCurOpt  = NULL )
#define START_OPT       RESTART_OPT(1)
#define USAGE(c)        (*autogenOptions.pUsageProc)( &autogenOptions, c )
/* extracted from /home/bkorb/ag/ag/autoopts/opthead.tpl near line 345 */

/* * * * * *
 *
 *  Declare the autogen option descriptor.
 */
#ifdef  __cplusplus
extern "C" {
#endif

extern tOptions   autogenOptions;

/* * * * * *
 *
 *  Globals exported from the The Automated Program Generator option definitions
 */
extern tCC* pzTemplFileName;

#ifndef _
#  if ENABLE_NLS
#    include <stdio.h>
     static inline char* aoGetsText( char const* pz ) {
         if (pz == NULL) return NULL;
         return (char*)gettext( pz );
     }
#    define _(s)  aoGetsText(s)
#  else  /* ENABLE_NLS */
#    define _(s)  s
#  endif /* ENABLE_NLS */
#endif

#ifdef  __cplusplus
}
#endif
#endif /* AUTOOPTS_OPTS_H_GUARD */
/* opts.h ends here */
