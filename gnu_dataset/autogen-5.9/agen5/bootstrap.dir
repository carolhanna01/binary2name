#! /bin/echo This_file_must_be_sourced,_not_executed
#
# ----------------------------------------------------------------------
# agen5/bootstrap.dir --- maintainer's bootstrap script
#
#    AutoGen copyright (C) 1992-2006 Bruce Korb
#
# Author:            Bruce Korb <bkorb@gnu.org>
# Time-stamp:        "2006-09-23 19:27:18 bkorb"
# Last Modified:     $Date: 2006/12/10 19:41:26 $
#            by: bkorb
# ----------------------------------------------------------------------
# @(#) $Id: bootstrap.dir,v 4.15 2006/12/10 19:41:26 bkorb Exp $
# ----------------------------------------------------------------------

#  This script rebuilds sources not kept in the CVS repository.
#  These files are distributed, so it is not necessary to invoke
#  AutoGen before building AutoGen.  (Like I had to do long ago :)

#  "make" will invoke this file with the name of the desired output
#  as an argument.  We do this here rather than in the make file
#  because some of the rules are complex and we don't want to
#  deal with the dual update problem.

#  If the argument is "recursive", then we are bootstrapping.
#  Otherwise, we are being invoked from "make".
#
case "${1}" in
(recursive)
  top_srcdir=`cd ..;pwd`
  top_builddir=${top_srcdir}
  srcdir=`pwd`
  builddir=${srcdir}
  export top_builddir top_srcdir builddir srcdir
  set -- `egrep '##.*GEN-RULE' ${srcdir}/Makefile.am | \
          awk '{ print $2 }' ` functions.h
  t=""
  for f
  do [ ! -f $f ] && t="$t $f"
  done

  set -- $t
  ;;

("")
  echo "Specify what you want bootstrapped"
  exit 1
  ;;

(*)
  builddir=`pwd`
  top_srcdir=${top_srcdir-`cd ..;pwd`}
  top_builddir=${top_builddir-`cd ..;pwd`}
  srcdir=${srcdir-${builddir}}
  AGexe=${AGexe-`which autogen`}
  GDexe=${GDexe-`which getdefs`}
  CLexe=${CLexe-`which columns`}

  export top_srcdir top_builddir srcdir AGexe GDexe CLexe
  ;;
esac

top_srcdir=`cd ${top_srcdir} >/dev/null ; pwd`

#  Make sure we have a default for top build and source.
#  Some of the templates need this information.
#
eval "`egrep '^AG_' ${top_srcdir}/VERSION | \
       sed 's,^\(AG[^=]*\)\(.*\),\1\2 export \1,'`"

#  disable any $HOME defaults
#
HOME=/dev/null
SHELL=/bin/sh

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# For the following to work, we must temporarily find or install
# autogen, columns and getdefs from wherever they are found:
#
rmlist=

set_exe_var() {
    d=$(cd $dir ; pwd)
    if [ -x $d/$prog ]
    then
      echo ${var}exe=$d/$prog export ${var}exe
    else
      eval f=\$${var}exe
      if test -x "$f"
      then
        echo ${var}exe=$f export ${var}exe
      else
        f=$(type $prog 2> /dev/null | \
            sed -e "s;^${prog} is [^/]*/;/;")
        case ${f} in
        */${prog} )  echo ${var}exe=${f} export ${var}exe ;;
        * ) echo unset ${var}exe ;;
        esac
      fi
    fi
}

#  Name our executable in one place and disable any $HOME defaults
#  Use the local tools, if available.  Otherwise, look for them.
#
eval $(
  while read var prog dir
  do
    set_exe_var
  done <<EOF
AG  ${AGnam-autogen}  ${builddir}
GD  ${GDnam-getdefs}  ${builddir}/../getdefs
CL  ${CLnam-columns}  ${builddir}/../columns
EOF
)

#  Ensure complete success or a noticable failure
#
set -e
${VERBOSE} && set -x

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#  FOR each output target,
#   DO the appropriate rule...
#
for t
do
  echo Re-building "$t"
  case "$t" in
  ( stamp-parse    | \
    defParse-fsm.c | \
    defParse-fsm.h )
    # Make the definition parser
    #
    if [ -z "${AGexe}" ]
    then
      echo "Cannot locate autogen"
      $force && exit 1
      continue
    fi

    cmd="${AGexe} defParse.def"
    echo ${cmd}
    ${cmd}
    date > stamp-parse
    ;;

  (stamp-opts | opts.[ch])
    # Make the option processing files:
    #
    if test -z "${AGexe}" -o -z "${CLexe}"
    then
      echo "Cannot locate either autogen or columns"
      $force && exit 1
      continue
    fi
    echo ${AGexe} -L ${top_srcdir}/autoopts ${srcdir}/opts.def
    ${AGexe} -L ${top_srcdir}/autoopts ${srcdir}/opts.def
    date > stamp-opts
    ;;

  (stamp-fsm)
    # Make the pseudo-macro processing Finite State Machine
    #
    if [ -z "${AGexe}" ]
    then
      echo "Cannot locate autogen"
      $force && exit 1
      continue
    fi

    echo ${AGexe} pseudo.def
    ${AGexe} pseudo.def
    ${AGexe} cgi.def
    rm -f .fsm.*
    date > stamp-fsm
    ;;

  ( stamp-exprini | \
    expr.h   | \
    expr.def | \
    expr.ini )
    if test -z "${AGexe}" -o -z "${CLexe}" -o -z "${GDexe}"
    then
      echo "Cannot locate autogen or columns or getdefs"
      $force && exit 1
      continue
    fi

    #  funcCase.c must be first file in list.
    #  It has the exparg attribute names.
    #
    cat > expr.cfg <<- _EOConfig_
	defs-to-get    gfunc
	template       snarf
	srcfile
	assign         two-phase=yes
	assign         group=ag
	output         expr.def
	_EOConfig_

    files=$(echo func*.c exp*.c)
    echo ${GDexe} load=expr.cfg ${files}
    set +e
    ( SHELL=sh ${GDexe} load=expr.cfg ${files} 2>&1 ) | \
      egrep -v 'no copies of pattern' >&2
    set -e
    rm -f expr.cfg
    ${AGexe} expr.def
    [ "$t" = "expr.def" ] || rm -f expr.def
    date > stamp-exprini
    ;;

  (stamp-directive | \
    directive.def  | \
    directive.h )
    if test -z "${AGexe}" -o -z "${CLexe}"
    then
      echo "Cannot locate autogen or columns"
      $force && exit 1
      continue
    fi
    cat > directive.cfg <<- _EOConfig_
	defs-to-get    directive
	template       directive
	output         directive.def
	linenum
	_EOConfig_

    ${GDexe} load=directive.cfg ${srcdir}/defDirect.c
    ${AGexe} -t30 directive.def
    rm -f directive.def directive.cfg
    date > stamp-directive
    ;;

  (stamp-texi | autogen.texi | autogen.menu)
    # Construct the info doc
    #
    if test -z "${AGexe}" -o -z "${CLexe}"
    then
      echo "Cannot locate autogen or columns"
      $force && exit 1
      continue
    fi
    eopt="-L${top_srcdir}/autoopts -Taginfo -DLEVEL=chapter -bautogen"
    echo ${AGexe} ${eopt} ${srcdir}/opts.def
    ${AGexe} ${eopt} ${srcdir}/opts.def
    ;;

  (stamp-man | autogen.1)
    # Construct the man page
    #
    if test -z "${AGexe}" -o -z "${CLexe}"
    then
      echo "Cannot locate autogen or columns"
      $force && exit 1
      continue
    fi
    eopt="-L ${top_srcdir}/autoopts -Tagman1 -bautogen"
    echo ${AGexe} ${eopt} ${srcdir}/opts.def
    ${AGexe} ${eopt} ${srcdir}/opts.def
    ;;

  (fmemopen.3)
    ${GDexe} templ=agman3.tpl linenum output=fmemopen.def fmemopen.c
    ${AGexe} -L ${top_srcdir}/autoopts fmemopen.def
    rm -f fmemopen.def
    ;;

  (proto.h)
    files=`allbut *.c - *fsm.c` 2>/dev/null
    test -z "${files}" && files=`echo *.c`
    :mkfwd -p ${files}
    ;;

  (functions.h)
    files=`fgrep -l '/*=macfunc' *.c`
    opts='template=functions.tpl srcfile linenum defs=macfunc listattr=alias'
    getdefs output=functions.def ${opts} ${files}
    autogen functions.def
    ;;

  (*)
    echo "Don't know how to make $t"
    exit 1
    ;;
  esac
done

#  IF we symlinked in columns or getdefs,
#  THEN it is time to unlink them
#
if [ ! -z "$rmlist" ]
then rm -f $rmlist ; fi

# Local Variables:
# mode:shell-script
# sh-indentation:4
# sh-basic-offset:4
# indent-tabs-mode: nil
# End:

# bootstrap.dir ends here
