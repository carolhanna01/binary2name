This is autogen.info, produced by makeinfo version 4.8 from
autogen.texi.

   This manual is for GNU AutoGen version 5.9, updated February 2007.

   Copyright (C) 1992-2006 by Bruce Korb.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.

INFO-DIR-SECTION GNU programming tools
START-INFO-DIR-ENTRY
* AutoGen: (autogen).         The Automated Program Generator
END-INFO-DIR-ENTRY

   This file documents GNU AutoGen Version 5.9.

   AutoGen copyright (C) 1992-2006 Bruce Korb AutoOpts copyright (C)
1992-2006 Bruce Korb snprintfv copyright (C) 1999-2000 Gary V. Vaughan

   AutoGen is free software.

   You may redistribute it and/or modify it under the terms of the GNU
General Public License, as published by the Free Software Foundation;
either version 2 of the License, or (at your option) any later version.

   AutoGen is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

   You should have received a copy of the GNU General Public License
along with AutoGen.  If not, write to: 	The Free Software Foundation,
Inc., 	51 Franklin Street, Fifth Floor 	Boston, MA  02110-1301, USA.


File: autogen.info,  Node: Top,  Next: Introduction,  Up: (dir)

The Automated Program Generator
*******************************

This file documents AutoGen version 5.9.  It is a tool designed for
generating program files that contain repetitive text with varied
substitutions.  This document is very long because it is intended as a
reference document.  For a quick start example, *Note Example Usage::.

   The AutoGen distribution includes the basic generator engine and
several add-on libraries and programs.  Of the most general interest
would be Automated Option processing, *Note AutoOpts::, which also
includes stand-alone support for configuration file parsing, *Note
Features::.  Please see the "Add-on packages for AutoGen" section for
additional programs and libraries associated with AutoGen.

   This edition documents version 5.9, February 2007.

* Menu:

* Introduction::         AutoGen's Purpose
* Definitions File::     AutoGen Definitions File
* Template File::        AutoGen Template
* Augmenting AutoGen::   Augmenting AutoGen Features
* autogen Invocation::   Invoking AutoGen
* Installation::         Configuring and Installing
* AutoOpts::             Automated Option Processing
* Add-Ons::              Add-on packages for AutoGen
* Future::               Some ideas for the future.
* Copying This Manual::  Copying This Manual
* Concept Index::        General index
* Function Index::       Function index


File: autogen.info,  Node: Introduction,  Next: Definitions File,  Prev: Top,  Up: Top

1 Introduction
**************

AutoGen is a tool designed for generating program files that contain
repetitive text with varied substitutions.  Its goal is to simplify the
maintenance of programs that contain large amounts of repetitious text.
This is especially valuable if there are several blocks of such text
that must be kept synchronized in parallel tables.

   One common example is the problem of maintaining the code required
for processing program options.  Processing options requires a minimum
of four different constructs be kept in proper order in different
places in your program.  You need at least:

  1. The flag character in the flag string,

  2. code to process the flag when it is encountered,

  3. a global state variable or two, and

  4. a line in the usage text.

You will need more things besides this if you choose to implement long
option names, rc/ini/config file processing, environment variables and
so on.  All of this can be done mechanically; with the proper templates
and this program.  In fact, it has already been done and AutoGen itself
uses it *Note AutoOpts::.  For a simple example of Automated Option
processing, *Note Quick Start::.  For a full list of the Automated
Option features, *Note Features::.

* Menu:

* Generalities::         The Purpose of AutoGen
* Example Usage::        A Simple Example
* csh/zsh caveat::       csh/zsh caveat
* Testimonial::          A User's Perspective


File: autogen.info,  Node: Generalities,  Next: Example Usage,  Up: Introduction

1.1 The Purpose of AutoGen
==========================

The idea of this program is to have a text file, a template if you
will, that contains the general text of the desired output file.  That
file includes substitution expressions and sections of text that are
replicated under the control of separate definition files.

   AutoGen was designed with the following features:

  1. The definitions are completely separate from the template.  By
     completely isolating the definitions from the template it greatly
     increases the flexibility of the template implementation.  A
     secondary goal is that a template user only needs to specify those
     data that are necessary to describe his application of a template.

  2. Each datum in the definitions is named.  Thus, the definitions can
     be rearranged, augmented and become obsolete without it being
     necessary to go back and clean up older definition files.  Reduce
     incompatibilities!

  3. Every definition name defines an array of values, even when there
     is only one entry.  These arrays of values are used to control the
     replication of sections of the template.

  4. There are named collections of definitions.  They form a nested
     hierarchy.  Associated values are collected and associated with a
     group name.  These associated data are used collectively in sets
     of substitutions.

  5. The template has special markers to indicate where substitutions
     are required, much like the `${VAR}' construct in a shell `here
     doc'.  These markers are not fixed strings.  They are specified at
     the start of each template.  Template designers know best what
     fits into their syntax and can avoid marker conflicts.

     We did this because it is burdensome and difficult to avoid
     conflicts using either M4 tokenization or C preprocessor
     substitution rules.  It also makes it easier to specify
     expressions that transform the value.  Of course, our expressions
     are less cryptic than the shell methods.

  6. These same markers are used, in conjunction with enclosed
     keywords, to indicate sections of text that are to be skipped and
     for sections of text that are to be repeated.  This is a major
     improvement over using C preprocessing macros.  With the C
     preprocessor, you have no way of selecting output text because it
     is an unvarying, mechanical substitution process.

  7. Finally, we supply methods for carefully controlling the output.
     Sometimes, it is just simply easier and clearer to compute some
     text or a value in one context when its application needs to be
     later.  So, functions are available for saving text or values for
     later use.


File: autogen.info,  Node: Example Usage,  Next: csh/zsh caveat,  Prev: Generalities,  Up: Introduction

1.2 A Simple Example
====================

This is just one simple example that shows a few basic features.  If
you are interested, you also may run "make check" with the `VERBOSE'
environment variable set and see a number of other examples in the
`agen5/test/testdir' directory.

   Assume you have an enumeration of names and you wish to associate
some string with each name.  Assume also, for the sake of this example,
that it is either too complex or too large to maintain easily by hand.
We will start by writing an abbreviated version of what the result is
supposed to be.  We will use that to construct our output templates.

In a header file, `list.h', you define the enumeration and the global
array containing the associated strings:

     typedef enum {
             IDX_ALPHA,
             IDX_BETA,
             IDX_OMEGA }  list_enum;

     extern char const* az_name_list[ 3 ];

Then you also have `list.c' that defines the actual strings:

     #include "list.h"
     char const* az_name_list[] = {
             "some alpha stuff",
             "more beta stuff",
             "final omega stuff" };

First, we will define the information that is unique for each
enumeration name/string pair.  This would be placed in a file named,
`list.def', for example.

     autogen definitions list;
     list = { list_element = alpha;
              list_info    = "some alpha stuff"; };
     list = { list_info    = "more beta stuff";
              list_element = beta; };
     list = { list_element = omega;
              list_info    = "final omega stuff"; };

   The `autogen definitions list;' entry defines the file as an AutoGen
definition file that uses a template named `list'.  That is followed by
three `list' entries that define the associations between the
enumeration names and the strings.  The order of the differently named
elements inside of list is unimportant.  They are reversed inside of the
`beta' entry and the output is unaffected.

   Now, to actually create the output, we need a template or two that
can be expanded into the files you want.  In this program, we use a
single template that is capable of multiple output files.  The
definitions above refer to a `list' template, so it would normally be
named, `list.tpl'.

   It looks something like this.  (For a full description, *Note
Template File::.)

     [+ AutoGen5 template h c +]
     [+ CASE (suffix) +][+
        ==  h  +]
     typedef enum {[+
        FOR list "," +]
             IDX_[+ (string-upcase! (get "list_element")) +][+
        ENDFOR list +] }  list_enum;

     extern char const* az_name_list[ [+ (count "list") +] ];
     [+

        ==  c  +]
     #include "list.h"
     char const* az_name_list[] = {[+
       FOR list "," +]
             "[+list_info+]"[+
       ENDFOR list +] };[+

     ESAC +]

   The `[+ AutoGen5 template h c +]' text tells AutoGen that this is an
AutoGen version 5 template file; that it is to be processed twice; that
the start macro marker is `[+'; and the end marker is `+]'.  The
template will be processed first with a suffix value of `h' and then
with `c'.  Normally, the suffix values are appended to the `base-name'
to create the output file name.

   The `[+ == h +]' and `[+ == c +]' `CASE' selection clauses select
different text for the two different passes.  In this example, the
output is nearly disjoint and could have been put in two separate
templates.  However, sometimes there are common sections and this is
just an example.

   The `[+FOR list "," +]' and `[+ ENDFOR list +]' clauses delimit a
block of text that will be repeated for every definition of `list'.
Inside of that block, the definition name-value pairs that are members
of each `list' are available for substitutions.

   The remainder of the macros are expressions.  Some of these contain
special expression functions that are dependent on AutoGen named values;
others are simply Scheme expressions, the result of which will be
inserted into the output text.  Other expressions are names of AutoGen
values.  These values will be inserted into the output text.  For
example, `[+list_info+]' will result in the value associated with the
name `list_info' being inserted between the double quotes and
`(string-upcase! (get "list_element"))' will first "get" the value
associated with the name `list_element', then change the case of all
the letters to upper case.  The result will be inserted into the output
document.

   If you have compiled AutoGen, you can copy out the template and
definitions as described above and run `autogen list.def'.  This will
produce exactly the hypothesized desired output.

   One more point, too.  Lets say you decided it was too much trouble
to figure out how to use AutoGen, so you created this enumeration and
string list with thousands of entries.  Now, requirements have changed
and it has become necessary to map a string containing the enumeration
name into the enumeration number.  With AutoGen, you just alter the
template to emit the table of names.  It will be guaranteed to be in
the correct order, missing none of the entries.  If you want to do that
by hand, well, good luck.


File: autogen.info,  Node: csh/zsh caveat,  Next: Testimonial,  Prev: Example Usage,  Up: Introduction

1.3 csh/zsh caveat
==================

AutoGen tries to use your normal shell so that you can supply shell code
in a manner you are accustomed to using.  If, however, you use csh or
zsh, you cannot do this.  Csh is sufficiently difficult to program that
it is unsupported.  Zsh, though largely programmable, also has some
anomalies that make it incompatible with AutoGen usage.  Therefore, when
invoking AutoGen from these environments, you must be certain to set the
SHELL environment variable to a Bourne-derived shell, e.g., sh, ksh or
bash.

   Any shell you choose for your own scripts need to follow these basic
requirements:

  1. It handles `trap $sig ":"' without output to standard out.  This
     is done when the server shell is first started.  If your shell
     does not handle this, then it may be able to by loading functions
     from its start up files.

  2. At the beginning of each scriptlet, the command `\\cd $PWD' is
     inserted.  This ensures that `cd' is not aliased to something
     peculiar and each scriptlet starts life in the execution directory.

  3. At the end of each scriptlet, the command `echo mumble' is
     appended.  The program you use as a shell must emit the single
     argument `mumble' on a line by itself.


File: autogen.info,  Node: Testimonial,  Prev: csh/zsh caveat,  Up: Introduction

1.4 A User's Perspective
========================

Alexandre wrote:
>
> I'd appreciate opinions from others about advantages/disadvantages of
> each of these macro packages.

   I am using AutoGen in my pet project, and find one of its best
points to be that it separates the operational data from the
implementation.

   Indulge me for a few paragraphs, and all will be revealed: In the
manual, Bruce cites the example of maintaining command line flags
inside the source code; traditionally spreading usage information, flag
names, letters and processing across several functions (if not files).
Investing the time in writing a sort of boiler plate (a template in
AutoGen terminology) pays by moving all of the option details (usage,
flags names etc.) into a well structured table (a definition file if you
will),  so that adding a new command line option becomes a simple matter
of adding a set of details to the table.

   So far so good!  Of course, now that there is a template, writing
all of that tedious optargs processing and usage functions is no longer
an issue.  Creating a table of the options needed for the new project
and running AutoGen generates all of the option processing code in C
automatically from just the tabular data.  AutoGen in fact already ships
with such a template... AutoOpts.

   One final consequence of the good separation in the design of
AutoGen is that it is retargetable to a greater extent.  The
egcs/gcc/fixinc/inclhack.def can equally be used (with different
templates) to create a shell script (inclhack.sh) or a c program
(fixincl.c).

   This is just the tip of the iceberg.  AutoGen is far more powerful
than these examples might indicate, and has many other varied uses.  I
am certain Bruce or I could supply you with many and varied examples,
and I would heartily recommend that you try it for your project and see
for yourself how it compares to m4.  

   As an aside, I would be interested to see whether someone might be
persuaded to rationalise autoconf with AutoGen in place of m4...  Ben,
are you listening?  autoconf-3.0! `kay?  =)O|

Sincerely,
        Gary V. Vaughan


File: autogen.info,  Node: Definitions File,  Next: Template File,  Prev: Introduction,  Up: Top

2 Definitions File
******************

This chapter describes the syntax and semantics of the AutoGen
definition file.  In order to instantiate a template, you normally must
provide a definitions file that identifies itself and contains some
value definitions.  Consequently, we keep it very simple.  For
"advanced" users, there are preprocessing directives, sparse arrays,
named indexes and comments that may be used as well.

   The definitions file is used to associate values with names.  Every
value is implicitly an array of values, even if there is only one value.
Values may be either simple strings or compound collections of
name-value pairs.  An array may not contain both simple and compound
members.  Fundamentally, it is as simple as:

     prog-name = "autogen";
     flag = {
         name      = templ_dirs;
         value     = L;
         descrip   = "Template search directory list";
     };

   For purposes of commenting and controlling the processing of the
definitions, C-style comments and most C preprocessing directives are
honored.  The major exception is that the `#if' directive is ignored,
along with all following text through the matching `#endif' directive.
The C preprocessor is not actually invoked, so C macro substitution is
*not* performed.

* Menu:

* Identification::        The Identification Definition
* Definitions::           Named Definitions
* Index Assignments::     Assigning an Index to a Definition
* Dynamic Text::          Dynamic Text
* Directives::            Controlling What Gets Processed
* Predefines::            Pre-defined Names
* Comments::              Commenting Your Definitions
* Example::               What it all looks like.
* Full Syntax::           Finite State Machine Grammar
* Alternate Definition::  Alternate Definition Forms


File: autogen.info,  Node: Identification,  Next: Definitions,  Up: Definitions File

2.1 The Identification Definition
=================================

The first definition in this file is used to identify it as a AutoGen
file.  It consists of the two keywords, `autogen' and `definitions'
followed by the default template name and a terminating semi-colon
(`;').  That is:

             AutoGen Definitions TEMPLATE-NAME;

Note that, other than the name TEMPLATE-NAME, the words `AutoGen' and
`Definitions' are searched for without case sensitivity.  Most lookups
in this program are case insensitive.

Also, if the input contains more identification definitions, they will
be ignored.  This is done so that you may include (*note Directives::)
other definition files without an identification conflict.

AutoGen uses the name of the template to find the corresponding template
file.  It searches for the file in the following way, stopping when it
finds the file:

  1. It tries to open `./TEMPLATE-NAME'.  If it fails,

  2. it tries `./TEMPLATE-NAME.tpl'.

  3. It searches for either of these files in the directories listed in
     the templ-dirs command line option.

   If AutoGen fails to find the template file in one of these places,
it prints an error message and exits.


File: autogen.info,  Node: Definitions,  Next: Index Assignments,  Prev: Identification,  Up: Definitions File

2.2 Named Definitions
=====================

Any name may have multiple values associated with it in the definition
file.  If there is more than one instance, the *only* way to expand all
of the copies of it is by using the FOR (*note FOR::) text function on
it, as described in the next chapter.

   There are two kinds of definitions, `simple' and `compound'.  They
are defined thus (*note Full Syntax::):

     compound_name '=' '{' definition-list '}' ';'

     simple_name '=' string ';'

     no_text_name ';'

`No_text_name' is a simple definition with a shorthand empty string
value.  The string values for definitions may be specified in any of
several formation rules.

* Menu:

* def-list::                 Definition List
* double-quote-string::      Double Quote String
* single-quote-string::      Single Quote String
* simple-string::            An Unquoted String
* shell-generated::          Shell Output String
* scheme-generated::         Scheme Result String
* here-string::              A Here String
* concat-string::            Concatenated Strings


File: autogen.info,  Node: def-list,  Next: double-quote-string,  Up: Definitions

2.2.1 Definition List
---------------------

`definition-list' is a list of definitions that may or may not contain
nested compound definitions.  Any such definitions may *only* be
expanded within a `FOR' block iterating over the containing compound
definition.  *Note FOR::.

   Here is, again, the example definitions from the previous chapter,
with three additional name value pairs.  Two with an empty value
assigned (FIRST and LAST), and a "global" GROUP_NAME.

     autogen definitions list;
     group_name = example;
     list = { list_element = alpha;  first;
              list_info    = "some alpha stuff"; };
     list = { list_info    = "more beta stuff";
              list_element = beta; };
     list = { list_element = omega;  last;
              list_info    = "final omega stuff"; };


File: autogen.info,  Node: double-quote-string,  Next: single-quote-string,  Prev: def-list,  Up: Definitions

2.2.2 Double Quote String
-------------------------

The string follows the C-style escaping (`\', `\n', `\f', `\v', etc.),
plus octal character numbers specified as `\ooo'.  The difference from
"C" is that the string may span multiple lines.  Like ANSI "C", a
series of these strings, possibly intermixed with single quote strings,
will be concatenated together.


File: autogen.info,  Node: single-quote-string,  Next: simple-string,  Prev: double-quote-string,  Up: Definitions

2.2.3 Single Quote String
-------------------------

This is similar to the shell single-quote string.  However, escapes `\'
are honored before another escape, single quotes `'' and hash
characters `#'.  This latter is done specifically to disambiguate lines
starting with a hash character inside of a quoted string.  In other
words,

     fumble = '
     #endif
     ';

   could be misinterpreted by the definitions scanner, whereas this
would not:

     fumble = '
     \#endif
     ';

As with the double quote string, a series of these, even intermixed
with double quote strings, will be concatenated together.


File: autogen.info,  Node: shell-generated,  Next: scheme-generated,  Prev: simple-string,  Up: Definitions

2.2.4 Shell Output String
-------------------------

This is assembled according to the same rules as the double quote
string, except that there is no concatenation of strings and the
resulting string is written to a shell server process.  The definition
takes on the value of the output string.

   NB The text is interpreted by a server shell.  There may be left over
state from previous server shell processing.  This scriptlet may also
leave state for subsequent processing.  However, a `cd' to the original
directory is always issued before the new command is issued.


File: autogen.info,  Node: simple-string,  Next: shell-generated,  Prev: single-quote-string,  Up: Definitions

2.2.5 An Unquoted String
------------------------

A simple string that does not contain white space may be left unquoted.
The string must not contain any of the characters special to the
definition text (i.e., `"', `#', `'', `(', `)', `,', `;', `<', `=',
`>', `[', `]', ``', `{', or `}').  This list is subject to change, but
it will never contain underscore (`_'), period (`.'), slash (`/'),
colon (`:'), hyphen (`-') or backslash (`\\').  Basically, if the
string looks like it is a normal DOS or UNIX file or variable name, and
it is not one of two keywords (`autogen' or `definitions') then it is
OK to not quote it, otherwise you should.


File: autogen.info,  Node: scheme-generated,  Next: here-string,  Prev: shell-generated,  Up: Definitions

2.2.6 Scheme Result String
--------------------------

A scheme result string must begin with an open parenthesis `('.  The
scheme expression will be evaluated by Guile and the value will be the
result.  The AutoGen expression functions are *dis*abled at this stage,
so do not use them.


File: autogen.info,  Node: here-string,  Next: concat-string,  Prev: scheme-generated,  Up: Definitions

2.2.7 A Here String
-------------------

A `here string' is formed in much the same way as a shell here doc.  It
is denoted with a doubled less than character and, optionally, a
hyphen.  This is followed by optional horizontal white space and an
ending marker-identifier.  This marker must follow the syntax rules for
identifiers.  Unlike the shell version, however, you must not quote
this marker.  The resulting string will start with the first character
on the next line and continue up to but not including the newline that
precedes the line that begins with the marker token.  No backslash or
any other kind of processing is done on this string.  The characters are
copied directly into the result string.

   Here are two examples:
     str1 = <<-  STR_END
             $quotes = " ' `
             STR_END;

     str2 = <<   STR_END
             $quotes = " ' `
             STR_END;
     STR_END;
   The first string contains no new line characters.  The first
character is the dollar sign, the last the back quote.

   The second string contains one new line character.  The first
character is the tab character preceding the dollar sign.  The last
character is the semicolon after the `STR_END'.  That `STR_END' does not
end the string because it is not at the beginning of the line.  In the
preceding case, the leading tab was stripped.


File: autogen.info,  Node: concat-string,  Prev: here-string,  Up: Definitions

2.2.8 Concatenated Strings
--------------------------

If single or double quote characters are used, then you also have the
option, a la ANSI-C syntax, of implicitly concatenating a series of
them together, with intervening white space ignored.

   NB  You *cannot* use directives to alter the string content.  That
is,

     str = "fumble"
     #ifdef LATER
           "stumble"
     #endif
           ;

will result in a syntax error.  The preprocessing directives are not
carried out by the C preprocessor.  However,

     str = '"fumble\n"
     #ifdef LATER
     "     stumble\n"
     #endif
     ';

*Will* work.  It will enclose the `#ifdef LATER' and `#endif' in the
string.  But it may also wreak havoc with the definition processing
directives.  The hash characters in the first column should be
disambiguated with an escape `\' or join them with previous lines:
`"fumble\n#ifdef LATER...'.


File: autogen.info,  Node: Index Assignments,  Next: Dynamic Text,  Prev: Definitions,  Up: Definitions File

2.3 Assigning an Index to a Definition
======================================

In AutoGen, every name is implicitly an array of values.  When
assigning values, they are usually implicitly assigned to the next
highest slot.  They can also be specified explicitly:

     mumble[9] = stumble;
     mumble[0] = grumble;

If, subsequently, you assign a value to `mumble' without an index, its
index will be `10', not `1'.  If indexes are specified, they must not
cause conflicts.

   `#define'-d names may also be used for index values.  This is
equivalent to the above:

     #define FIRST 0
     #define LAST  9
     mumble[LAST]  = stumble;
     mumble[FIRST] = grumble;

   All values in a range do *not* have to be filled in.  If you leave
gaps, then you will have a sparse array.  This is fine (*note FOR::).
You have your choice of iterating over all the defined values, or
iterating over a range of slots.  This:

     [+ FOR mumble +][+ ENDFOR +]

iterates over all and only the defined entries, whereas this:

     [+ FOR mumble (for-by 1) +][+ ENDFOR +]

will iterate over all 10 "slots".  Your template will likely have to
contain something like this:

     [+ IF (exist? (sprintf "mumble[%d]" (for-index))) +]

or else "mumble" will have to be a compound value that, say, always
contains a "grumble" value:

     [+ IF (exist? "grumble") +]


File: autogen.info,  Node: Dynamic Text,  Next: Directives,  Prev: Index Assignments,  Up: Definitions File

2.4 Dynamic Text
================

There are several methods for including dynamic content inside a
definitions file.  Three of them are mentioned above (*Note
shell-generated:: and *note scheme-generated::) in the discussion of
string formation rules.  Another method uses the `#shell' processing
directive.  It will be discussed in the next section (*note
Directives::).  Guile/Scheme may also be used to yield to create
definitions.

   When the Scheme expression is preceded by a backslash and single
quote, then the expression is expected to be an alist of names and
values that will be used to create AutoGen definitions.

This method can be be used as follows:

     \'( (name  (value-expression))
         (name2 (another-expr))  )

This is entirely equivalent to:

     name  = (value-expression);
     name2 = (another-expr);

Under the covers, the expression gets handed off to a Guile function
named `alist->autogen-def' in an expression that looks like this:

     (alist->autogen-def
         ( (name (value-expression))  (name2 (another-expr)) ) )


File: autogen.info,  Node: Directives,  Next: Predefines,  Prev: Dynamic Text,  Up: Definitions File

2.5 Controlling What Gets Processed
===================================

Definition processing directives can *only* be processed if the '#'
character is the first character on a line.  Also, if you want a '#' as
the first character of a line in one of your string assignments, you
should either escape it by preceding it with a backslash `\', or by
embedding it in the string as in `"\n#"'.

   All of the normal C preprocessing directives are recognized, though
several are ignored.  There is also an additional `#shell' -
`#endshell' pair.  Another minor difference is that AutoGen directives
must have the hash character (`#') in column 1.

   The final tweak is that `#!' is treated as a comment line.  Using
this feature, you can use:  `#! /usr/local/bin/autogen' as the first
line of a definitions file, set the mode to executable and "run" the
definitions file as if it were a direct invocation of AutoGen.  This
was done for its hack value.

   The ignored directives are: `#ident', `#let', `#pragma',  and `#if'.
Note that when ignoring the `#if' directive, all intervening text
through its matching `#endif' is also ignored, including the `#else'
clause.

   The AutoGen directives that affect the processing of definitions are:

`#assert `shell-script` | (scheme-expr) | <anything else>'
     If the `shell-script' or `scheme-expr' do not yield `true' valued
     results, autogen will be aborted.  If `<anything else>' or nothing
     at all is provided, then this directive is ignored.

     When writing the shell script, remember this is on a preprocessing
     line.  Multiple lines must be backslash continued and the result
     is a single long line.  Separate multiple commands with
     semi-colons.

     The result is `false' (and fails) if the result is empty, the
     number zero, or a string that starts with the letters 'n' or 'f'
     ("no" or "false").

`#define name [ <text> ]'
     Will add the name to the define list as if it were a DEFINE program
     argument.  Its value will be the first non-whitespace token
     following the name.  Quotes are *not* processed.

     After the definitions file has been processed, any remaining
     entries in the define list will be added to the environment.

`#elif'
     This must follow an `#if' otherwise it will generate an error.  It
     will be ignored.

`#else'
     This must follow an `#if', `#ifdef' or `#ifndef'.  If it follows
     the `#if', then it will be ignored.  Otherwise, it will change the
     processing state to the reverse of what it was.

`#endif'
     This must follow an `#if', `#ifdef' or `#ifndef'.  In all cases,
     this will resume normal processing of text.

`#endmac'
     This terminates a "macdef", but must not ever be encountered
     directly.

`#endshell'
     Ends the text processed by a command shell into autogen
     definitions.

`#error [ <descriptive text> ]'
     This directive will cause AutoGen to stop processing and exit with
     a status of EXIT_FAILURE.

`#if [ <ignored conditional expression> ]'
     `#if' expressions are not analyzed.  *Everything* from here to the
     matching `#endif' is skipped.

`#ifdef name-to-test'
     The definitions that follow, up to the matching `#endif' will be
     processed only if there is a corresponding `-Dname' command line
     option or if a `#define' of that name has been previously
     encountered.

`#ifndef name-to-test'
     The definitions that follow, up to the matching `#endif' will be
     processed only if there is *not* a corresponding `-Dname' command
     line option or there was a canceling `-Uname' option.

`#include unadorned-file-name'
     This directive will insert definitions from another file into the
     current collection.  If the file name is adorned with double
     quotes or angle brackets (as in a C program), then the include is
     ignored.

`#line'
     Alters the current line number and/or file name.  You may wish to
     use this directive if you extract definition source from other
     files.  `getdefs' uses this mechanism so AutoGen will report the
     correct file and approximate line number of any errors found in
     extracted definitions.

`#macdef'
     This is a new AT&T research preprocessing directive.  Basically,
     it is a multi-line #define that may include other preprocessing
     directives.

`#option opt-name [ <text> ]'
     This directive will pass the option name and associated text to the
     AutoOpts optionLoadLine routine (*note libopts-optionLoadLine::).
     The option text may span multiple lines by continuing them with a
     backslash.  The backslash/newline pair will be replaced with two
     space characters.  This directive may be used to set a search path
     for locating template files For example, this:

          #option templ-dirs $ENVVAR/dirname
     will direct autogen to use the `ENVVAR' environment variable to
     find a directory named `dirname' that (may) contain templates.
     Since these directories are searched in most recently supplied
     first order, search directories supplied in this way will be
     searched before any supplied on the command line.

`#shell'
     Invokes `$SHELL' or `/bin/sh' on a script that should generate
     AutoGen definitions.  It does this using the same server process
     that handles the back-quoted ``' text.  *CAUTION*  let not your
     `$SHELL' be `csh'.

`#undef name-to-undefine'
     Will remove any entries from the define list that match the undef
     name pattern.


File: autogen.info,  Node: Predefines,  Next: Comments,  Prev: Directives,  Up: Definitions File

2.6 Pre-defined Names
=====================

When AutoGen starts, it tries to determine several names from the
operating environment and put them into environment variables for use in
both `#ifdef' tests in the definitions files and in shell scripts with
environment variable tests.  `__autogen__' is always defined.  For
other names, AutoGen will first try to use the POSIX version of the
`sysinfo(2)' system call.  Failing that, it will try for the POSIX
`uname(2)' call.  If neither is available, then only "`__autogen__'"
will be inserted into the environment.  In all cases, the associated
names are converted to lower case, surrounded by doubled underscores
and non-symbol characters are replaced with underscores.

   With Solaris on a sparc platform, `sysinfo(2)' is available.  The
following strings are used:

   * `SI_SYSNAME' (e.g., "__sunos__")

   * `SI_HOSTNAME' (e.g., "__ellen__")

   * `SI_ARCHITECTURE' (e.g., "__sparc__")

   * `SI_HW_PROVIDER' (e.g., "__sun_microsystems__")

   * `SI_PLATFORM' (e.g., "__sun_ultra_5_10__")

   * `SI_MACHINE' (e.g., "__sun4u__")

   For Linux and other operating systems that only support the
`uname(2)' call, AutoGen will use these values:

   * `sysname' (e.g., "__linux__")

   * `machine' (e.g., "__i586__")

   * `nodename' (e.g., "__bach__")

   By testing these pre-defines in my definitions, you can select
pieces of the definitions without resorting to writing shell scripts
that parse the output of `uname(1)'.  You can also segregate real C
code from autogen definitions by testing for "`__autogen__'".

     #ifdef __bach__
       location = home;
     #else
       location = work;
     #endif


File: autogen.info,  Node: Comments,  Next: Example,  Prev: Predefines,  Up: Definitions File

2.7 Commenting Your Definitions
===============================

The definitions file may contain C and C++ style comments.

     /*
      *  This is a comment.  It continues for several lines and closes
      *  when the characters '*' and '/' appear together.
      */
     // this comment is a single line comment


File: autogen.info,  Node: Example,  Next: Full Syntax,  Prev: Comments,  Up: Definitions File

2.8 What it all looks like.
===========================

This is an extended example:

     autogen definitions `template-name';
     /*
      *  This is a comment that describes what these
      *  definitions are all about.
      */
     global = "value for a global text definition.";

     /*
      *  Include a standard set of definitions
      */
     #include standards.def

     a_block = {
         a_field;
         a_subblock = {
             sub_name  = first;
             sub_field = "sub value.";
         };

     #ifdef FEATURE
         a_subblock = {
             sub_name  = second;
         };
     #endif

     };


File: autogen.info,  Node: Full Syntax,  Next: Alternate Definition,  Prev: Example,  Up: Definitions File

2.9 Finite State Machine Grammar
================================

The preprocessing directives and comments are not part of the grammar.
They are handled by the scanner/lexer.  The following was extracted
directly from the generated defParse-fsm.c source file.  The "EVT:" is
the token seen, the "STATE:" is the current state and the entries in
this table describe the next state and the action to take.  Invalid
transitions were removed from the table.

     dp_trans_table[ DP_STATE_CT ][ DP_EVENT_CT ] = {

       /* STATE 0:  DP_ST_INIT */
       { { DP_ST_NEED_DEF, NULL },                       /* EVT:  autogen */

       /* STATE 1:  DP_ST_NEED_DEF */
         { DP_ST_NEED_TPL, NULL },                       /* EVT:  definitions */

       /* STATE 2:  DP_ST_NEED_TPL */
         { DP_ST_NEED_SEMI, dp_do_tpl_name },            /* EVT:  var_name */
         { DP_ST_NEED_SEMI, dp_do_tpl_name },            /* EVT:  other_name */
         { DP_ST_NEED_SEMI, dp_do_tpl_name },            /* EVT:  string */

       /* STATE 3:  DP_ST_NEED_SEMI */
         { DP_ST_NEED_NAME, NULL },                      /* EVT:  ; */

       /* STATE 4:  DP_ST_NEED_NAME */
       { { DP_ST_NEED_DEF, NULL },                       /* EVT:  autogen */
         { DP_ST_DONE, dp_do_need_name_end },            /* EVT:  End-Of-File */
         { DP_ST_HAVE_NAME, dp_do_need_name_var_name },  /* EVT:  var_name */
         { DP_ST_HAVE_VALUE, dp_do_end_block },          /* EVT:  } */

       /* STATE 5:  DP_ST_HAVE_NAME */
         { DP_ST_NEED_NAME, dp_do_empty_val },           /* EVT:  ; */
         { DP_ST_NEED_VALUE, dp_do_have_name_lit_eq },   /* EVT:  = */
         { DP_ST_NEED_IDX, NULL },                       /* EVT:  [ */

       /* STATE 6:  DP_ST_NEED_VALUE */
         { DP_ST_HAVE_VALUE, dp_do_str_value },          /* EVT:  var_name */
         { DP_ST_HAVE_VALUE, dp_do_str_value },          /* EVT:  other_name */
         { DP_ST_HAVE_VALUE, dp_do_str_value },          /* EVT:  string */
         { DP_ST_HAVE_VALUE, dp_do_str_value },          /* EVT:  here_string */
         { DP_ST_HAVE_VALUE, dp_do_str_value },          /* EVT:  number */
         { DP_ST_NEED_NAME, dp_do_start_block },         /* EVT:  { */

       /* STATE 7:  DP_ST_NEED_IDX */
         { DP_ST_NEED_CBKT, dp_do_indexed_name },        /* EVT:  var_name */
         { DP_ST_NEED_CBKT, dp_do_indexed_name },        /* EVT:  number */

       /* STATE 8:  DP_ST_NEED_CBKT */
         { DP_ST_INDX_NAME, NULL }                       /* EVT:  ] */

       /* STATE 9:  DP_ST_INDX_NAME */
         { DP_ST_NEED_NAME, dp_do_empty_val },           /* EVT:  ; */
         { DP_ST_NEED_VALUE, NULL },                     /* EVT:  = */

       /* STATE 10:  DP_ST_HAVE_VALUE */
         { DP_ST_NEED_NAME, NULL },                      /* EVT:  ; */
         { DP_ST_NEED_VALUE, dp_do_next_val },           /* EVT:  , */


File: autogen.info,  Node: Alternate Definition,  Prev: Full Syntax,  Up: Definitions File

2.10 Alternate Definition Forms
===============================

There are several methods for supplying data values for templates.

`no definitions'
     It is entirely possible to write a template that does not depend
     upon external definitions.  Such a template would likely have an
     unvarying output, but be convenient nonetheless because of an
     external library of either AutoGen or Scheme functions, or both.
     This can be accommodated by providing the `--override-tpl' and
     `--no-definitions' options on the command line.  *Note autogen
     Invocation::.

`CGI'
     AutoGen behaves as a CGI server if the definitions input is from
     stdin and the environment variable `REQUEST_METHOD' is defined and
     set to either "GET" or "POST", *Note AutoGen CGI::.  Obviously,
     all the values are constrained to strings because there is no way
     to represent nested values.

`XML'
     AutoGen comes with a program named, `xml2ag'.  Its output can
     either be redirected to a file for later use, or the program can
     be used as an AutoGen wrapper.  *Note xml2ag Invocation::.

     The introductory template example (*note Example Usage::) can be
     rewritten in XML as follows:

          <EXAMPLE  template="list.tpl">
          <LIST list_element="alpha"
                list_info="some alpha stuff"/>
          <LIST list_info="more beta stuff"
                list_element="beta"/>
          <LIST list_element="omega"
                list_info="final omega stuff"/>
          </EXAMPLE>

     A more XML-normal form might look like this:
          <EXAMPLE  template="list.tpl">
          <LIST list_element="alpha">some alpha stuff</LIST>
          <LIST list_element="beta" >more beta stuff</LIST>
          <LIST list_element="omega">final omega stuff</LIST>
          </EXAMPLE>
     but you would have to change the template `list_info' references
     into `text' references.

`standard AutoGen definitions'
     Of course.  :-)



File: autogen.info,  Node: Template File,  Next: Augmenting AutoGen,  Prev: Definitions File,  Up: Top

3 Template File
***************

The AutoGen template file defines the content of the output text.  It
is composed of two parts.  The first part consists of a pseudo macro
invocation and commentary.  It is followed by the template proper.

   This pseudo macro is special.  It is used to identify the file as a
AutoGen template file, fixing the starting and ending marks for the
macro invocations in the rest of the file, specifying the list of
suffixes to be generated by the template and, optionally, the shell to
use for processing shell commands embedded in the template.

   AutoGen-ing a file consists of copying text from the template to the
output file until a start macro marker is found.  The text from the
start marker to the end marker constitutes the macro text.  AutoGen
macros may cause sections of the template to be skipped or processed
several times.  The process continues until the end of the template is
reached.  The process is repeated once for each suffix specified in the
pseudo macro.

   This chapter describes the format of the AutoGen template macros and
the usage of the AutoGen native macros.  Users may augment these by
defining their own macros, *Note DEFINE::.

* Menu:

* pseudo macro::       Format of the Pseudo Macro
* naming values::      Naming a value
* expression syntax::  Macro Expression Syntax
* AutoGen Functions::  AutoGen Scheme Functions
* Common Functions::   Common Scheme Functions
* native macros::      AutoGen Native Macros
* output controls::    Redirecting Output


File: autogen.info,  Node: pseudo macro,  Next: naming values,  Up: Template File

3.1 Format of the Pseudo Macro
==============================

The pseudo macro is used to tell AutoGen how to process a template.  It
tells autogen:

  1. The start macro marker.  It consists of punctuation characters
     used to demarcate the start of a macro.  It may be up to seven
     characters long and must be the first non-whitespace characters in
     the file.

     It is generally a good idea to use some sort of opening bracket in
     the starting macro and closing bracket in the ending macro  (e.g.
     `{', `(', `[', or even `<' in the starting macro).  It helps both
     visually and with editors capable of finding a balancing
     parenthesis.

  2. That start marker must be immediately followed by the identifier
     strings "AutoGen5" and then "template", though capitalization is
     not important.

The next several components may be intermingled:

  3. Zero, one or more suffix specifications tell AutoGen how many
     times to process the template file.  No suffix specifications mean
     that it is to be processed once and that the generated text is to
     be written to stdout.  The current suffix for each pass can be
     determined with the `(suffix)' scheme function (*note SCM
     suffix::).

     The suffix specification consists of a sequence of POSIX compliant
     file name characters and, optionally, an equal sign and a file
     name formatting specification.  That specification may be either
     an ordinary sequence of file name characters with zero, one or two
     "%s" formatting sequences in it, or else it may be a Scheme
     expression that, when evaluated, produces such a string.  The two
     string arguments allowed for that string are the base name of the
     definition file, and the current suffix (that being the text to
     the left of the equal sign).  (Note:  "POSIX compliant file name
     characters" consist of alphanumerics plus the period (`.'), hyphen
     (`-') and underscore (`_') characters.)

     If the suffix begins with one of these three latter characters and
     a formatting string is not specified, then that character is
     presumed to be the suffix separator.  Otherwise, without a
     specified format string, a single period will separate the suffix
     from the base name in constructing the output file name.

  4. Comments:  blank lines, lines starting with a hash mark [`#']),
     and edit mode comments (text between pairs of `-*-' strings).

  5. Scheme expressions may be inserted in order to make configuration
     changes before template processing begins.  It is used, for
     example, to allow the template writer to specify the shell program
     that must be used to interpret the shell commands in the template.
     It can have no effect on any shell commands in the definitions
     file, as that file will have been processed by the time the pseudo
     macro is interpreted.

          (setenv "SHELL" "/bin/sh")

     This is extremely useful to ensure that the shell used is the one
     the template was written to use.  By default, AutoGen determines
     the shell to use by user preferences.  Sometimes, that can be the
     "csh", though.

     The scheme expression can also be used to save a pre-existing
     output file for later text extraction (*note SCM extract::).

          (shellf "mv -f %1$s.c %1$s.sav" (base-name))

After these must come the end macro marker:

  6. The punctuation characters used to demarcate the end of a macro.
     Like the start marker, it must consist of seven or fewer
     punctuation characters.

   The ending macro marker has a few constraints on its content.  Some
of them are just advisory, though.  There is no special check for
advisory restrictions.

   * It must not begin with a POSIX file name character (hyphen `-',
     underscore `_' or period `.'), the backslash (`\') or open
     parenthesis (`(').  These are used to identify a suffix
     specification, indicate Scheme code and trim white space.

   * If it begins with an equal sign, then it must be separated from
     any suffix specification by white space.

   * The closing marker may not begin with an open parenthesis, as that
     is used to enclose a scheme expression.

   * It cannot begin with a backslash, as that is used to indicate white
     space trimming after the end macro mark.  If, in the body of the
     template, you put the backslash character (`\') before the end
     macro mark, then any white space characters after the mark and
     through the newline character are trimmed.

   * It is also helpful to avoid using the comment marker (`#').  It
     might be seen as a comment within the pseudo macro.

   * You should avoid using any of the quote characters  double, single
     or back-quote.  It won't confuse AutoGen, but it might well
     confuse you and/or your editor.

   As an example, assume we want to use `[+' and `+]' as the start and
end macro markers, and we wish to produce a `.c' and a `.h' file, then
the pseudo macro might look something like this:

     [+ AutoGen5 template -*- Mode: emacs-mode-of-choice -*-
     h=chk-%s.h
     c
     # make sure we don't use csh:
     (setenv "SHELL" "/bin/sh")  +]

   The template proper starts after the pseudo-macro.  The starting
character is either the first non-whitespace character or the first
character after the newline that follows the end macro marker.


File: autogen.info,  Node: naming values,  Next: expression syntax,  Prev: pseudo macro,  Up: Template File

3.2 Naming a value
==================

When an AutoGen value is specified in a template, it is specified by
name.  The name may be a simple name, or a compound name of several
components.  Since each named value in AutoGen is implicitly an array
of one or more values, each component may have an index associated with
it.

It looks like this:

     comp-name-1 . comp-name-2 [ 2 ]

   Note that if there are multiple components to a name, each component
name is separated by a dot (`.').  Indexes follow a component name,
enclosed in square brackets (`[' and `]').  The index may be either an
integer or an integer-valued define name.  The first component of the
name is searched for in the current definition level.  If not found,
higher levels will be searched until either a value is found, or there
are no more definition levels.  Subsequent components of the name must
be found within the context of the newly-current definition level.
Also, if the named value is prefixed by a dot (`.'), then the value
search is started in the current context only.  No higher levels are
searched.

   If someone rewrites this, I'll incorporate it.  :-)


File: autogen.info,  Node: expression syntax,  Next: AutoGen Functions,  Prev: naming values,  Up: Template File

3.3 Macro Expression Syntax
===========================

AutoGen has two types of expressions:  full expressions and basic ones.
A full AutoGen expression can appear by itself, or as the argument to
certain AutoGen built-in macros:  CASE, IF, ELIF, INCLUDE, INVOKE
(explicit invocation, *note INVOKE::), and WHILE.  If it appears by
itself, the result is inserted into the output.  If it is an argument
to one of these macros, the macro code will act on it sensibly.

   You are constrained to basic expressions only when passing arguments
to user defined macros, *Note DEFINE::.

   The syntax of a full AutoGen expression is:

     [[ <apply-code> ] <value-name> ] [ <basic-expr-1> [ <basic-expr-2> ]]

   How the expression is evaluated depends upon the presence or absence
of the apply code and value name.  The "value name" is the name of an
AutoGen defined value, or not.  If it does not name such a value, the
expression result is generally the empty string.  All expressions must
contain either a `value-name' or a `basic-expr'.

* Menu:

* apply code::           Apply Code
* basic expression::     Basic Expression


File: autogen.info,  Node: apply code,  Next: basic expression,  Up: expression syntax

3.3.1 Apply Code
----------------

The "apply code" selected determines the method of evaluating the
expression.  There are five apply codes, including the non-use of an
apply code.

`no apply code'
     This is the most common expression type.  Expressions of this sort
     come in three flavors:

    `<value-name>'
          The result is the value of `value-name', if defined.
          Otherwise it is the empty string.

    `<basic-expr>'
          The result of the basic expression is the result of the full
          expression, *Note basic expression::.

    `<value-name> <basic-expr>'
          If there is a defined value for `value-name', then the
          `basic-expr' is evaluated.  Otherwise, the result is the
          empty string.

`% <value-name> <basic-expr>'
     If `value-name' is defined, use `basic-expr' as a format string
     for sprintf.  Then, if the `basic-expr' is either a back-quoted
     string or a parenthesized expression, then hand the result to the
     appropriate interpreter for further evaluation.  Otherwise, for
     single and double quote strings, the result is the result of the
     sprintf operation.  Naturally, if `value-name' is not defined, the
     result is the empty string.

     For example, assume that `fumble' had the string value, `stumble':
          [+ % fumble `printf '%%x\\n' $%s` +]
     This would cause the shell to evaluate "`printf '%x\n' $stumble'".
     Assuming that the shell variable `stumble' had a numeric value,
     the expression result would be that number, in hex.  Note the need
     for doubled percent characters and backslashes.

`? <value-name> <basic-expr-1> <basic-expr-2>'
     Two `basic-expr'-s are required.  If the `value-name' is defined,
     then the first `basic-expr-1' is evaluated, otherwise
     `basic-expr-2' is.

`- <value-name> <basic-expr>'
     Evaluate `basic-expr' only if `value-name' is not defined.

`?% <value-name> <basic-expr-1> <basic-expr-2>'
     This combines the functions of `?' and `%'.  If `value-name' is
     defined, it behaves exactly like `%', above, using `basic-expr-1'.
     If not defined, then `basic-expr-2' is evaluated.

     For example, assume again that `fumble' had the string value,
     `stumble':
          [+ ?% fumble `cat $%s` `pwd` +]
     This would cause the shell to evaluate "`cat $stumble'".  If
     `fumble' were not defined, then the result would be the name of
     our current directory.


File: autogen.info,  Node: basic expression,  Prev: apply code,  Up: expression syntax

3.3.2 Basic Expression
----------------------

A basic expression can have one of the following forms:

`'STRING''
     A single quoted string.  Backslashes can be used to protect single
     quotes (`''), hash characters (`#'), or backslashes (`\') in the
     string.  All other characters of STRING are output as-is when the
     single quoted string is evaluated.  Backslashes are processed
     before the hash character for consistency with the definition
     syntax.  It is needed there to avoid preprocessing conflicts.

`"STRING"'
     A double quoted string.  This is a cooked text string as in C,
     except that they are not concatenated with adjacent strings.
     Evaluating "`STRING'" will output STRING with all backslash
     sequences interpreted.

``STRING`'
     A back quoted string.  When this expression is evaluated, STRING
     is first interpreted as a cooked string (as in `"STRING"') and
     evaluated as a shell expression by the AutoGen server shell.  This
     expression is replaced by the stdout output of the shell.

`(STRING)'
     A parenthesized expression.  It will be passed to the Guile
     interpreter for evaluation and replaced by the resulting value.
     If there is a Scheme error in this expression, Guile 1.4 and Guile
     1.6 will report the template line number where the error occurs.
     Guile 1.7 has lost this capability.

     Additionally, other than in the `%' and `?%' expressions, the
     Guile expressions may be introduced with the Guile comment
     character (`;') and you may put a series of Guile expressions
     within a single macro.  They will be implicitly evaluated as if
     they were arguments to the `(begin ...)' expression.  The result
     will be the result of the last Guile expression evaluated.


File: autogen.info,  Node: AutoGen Functions,  Next: Common Functions,  Prev: expression syntax,  Up: Template File

3.4 AutoGen Scheme Functions
============================

AutoGen uses Guile to interpret Scheme expressions within AutoGen
macros.  All of the normal Guile functions are available, plus several
extensions (*note Common Functions::) have been added to augment the
repertoire of string manipulation functions and manage the state of
AutoGen processing.

   This section describes those functions that are specific to AutoGen.
Please take note that these AutoGen specific functions are not loaded
and thus not made available until after the command line options have
been processed and the AutoGen definitions have been loaded.  They may,
of course, be used in Scheme functions that get defined at those times,
but they cannot be invoked.

* Menu:

* SCM ag-function?::       `ag-function?' - test for function
* SCM base-name::          `base-name' - base output name
* SCM chdir::              `chdir' - Change current directory
* SCM count::              `count' - definition count
* SCM def-file::           `def-file' - definitions file name
* SCM def-file-line::      `def-file-line' - get a definition file+line number
* SCM dne::                `dne' - "Do Not Edit" warning
* SCM error::              `error' - display message and exit
* SCM exist?::             `exist?' - test for value name
* SCM find-file::          `find-file' - locate a file in the search path
* SCM first-for?::         `first-for?' - detect first iteration
* SCM for-by::             `for-by' - set iteration step
* SCM for-from::           `for-from' - set initial index
* SCM for-index::          `for-index' - get current loop index
* SCM for-sep::            `for-sep' - set loop separation string
* SCM for-to::             `for-to' - set ending index
* SCM get::                `get' - get named value
* SCM high-lim::           `high-lim' - get highest value index
* SCM last-for?::          `last-for?' - detect last iteration
* SCM len::                `len' - get count of values
* SCM low-lim::            `low-lim' - get lowest value index
* SCM make-header-guard::  `make-header-guard' - make self-inclusion guard
* SCM match-value?::       `match-value?' - test for matching value
* SCM out-delete::         `out-delete' - delete current output file
* SCM out-depth::          `out-depth' - output file stack depth
* SCM out-line::           `out-line' - output file line number
* SCM out-move::           `out-move' - change name of output file
* SCM out-name::           `out-name' - current output file name
* SCM out-pop::            `out-pop' - close current output file
* SCM out-push-add::       `out-push-add' - append output to file
* SCM out-push-new::       `out-push-new' - purge and create output file
* SCM out-resume::         `out-resume' - resume suspended output file
* SCM out-suspend::        `out-suspend' - suspend current output file
* SCM out-switch::         `out-switch' - close and create new output
* SCM set-option::         `set-option' - Set a command line option
* SCM set-writable::       `set-writable' - Make the output file be writable
* SCM stack::              `stack' - make list of AutoGen values
* SCM suffix::             `suffix' - get the current suffix
* SCM tpl-file::           `tpl-file' - get the template file name
* SCM tpl-file-line::      `tpl-file-line' - get the template file+line number
* SCM autogen-version::     `autogen-version' - ``5.9''
* SCM c-file-line-fmt::     format file info as, ```#line nn "file"'''


File: autogen.info,  Node: SCM ag-function?,  Next: SCM base-name,  Up: AutoGen Functions

3.4.1 `ag-function?' - test for function
----------------------------------------

Usage:  (ag-function? ag-name)
return SCM_BOOL_T if a specified name is a user-defined AutoGen macro,
otherwise return SCM_BOOL_F.

   Arguments:
ag-name - name of AutoGen macro


File: autogen.info,  Node: SCM base-name,  Next: SCM chdir,  Prev: SCM ag-function?,  Up: AutoGen Functions

3.4.2 `base-name' - base output name
------------------------------------

Usage:  (base-name)
Returns a string containing the base name of the output file(s).
Generally, this is also the base name of the definitions file.

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM chdir,  Next: SCM count,  Prev: SCM base-name,  Up: AutoGen Functions

3.4.3 `chdir' - Change current directory
----------------------------------------

Usage:  (chdir dir)
Sets the current directory for AutoGen.  Shell commands will run from
this directory as well.  This is a wrapper around the Guile native
function.  It returns its directory name argument and fails the program
on failure.

   Arguments:
dir - new directory name


File: autogen.info,  Node: SCM count,  Next: SCM def-file,  Prev: SCM chdir,  Up: AutoGen Functions

3.4.4 `count' - definition count
--------------------------------

Usage:  (count ag-name)
Count the number of entries for a definition.  The input argument must
be a string containing the name of the AutoGen values to be counted.
If there is no value associated with the name, the result is an SCM
immediate integer value of zero.

   Arguments:
ag-name - name of AutoGen value


File: autogen.info,  Node: SCM def-file,  Next: SCM def-file-line,  Prev: SCM count,  Up: AutoGen Functions

3.4.5 `def-file' - definitions file name
----------------------------------------

Usage:  (def-file)
Get the name of the definitions file.  Returns the name of the source
file containing the AutoGen definitions.

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM def-file-line,  Next: SCM dne,  Prev: SCM def-file,  Up: AutoGen Functions

3.4.6 `def-file-line' - get a definition file+line number
---------------------------------------------------------

Usage:  (def-file-line ag-name [ msg-fmt ])
Returns the file and line number of a AutoGen defined value, using
either the default format, "from %s line %d", or else the format you
supply.  For example, if you want to insert a "C" language file-line
directive, you would supply the format "# %2$d \"%1$s\"", but that is
also already supplied with the scheme variable *Note SCM
c-file-line-fmt::.  You may use it thus:

     (def-file-line "ag-def-name" c-file-line-fmt)

   It is also safe to use the formatting string, "%2$d".  AutoGen uses
an argument vector version of printf: *Note snprintfv::.

   Arguments:
ag-name - name of AutoGen value
msg-fmt - Optional - formatting for line message


File: autogen.info,  Node: SCM dne,  Next: SCM error,  Prev: SCM def-file-line,  Up: AutoGen Functions

3.4.7 `dne' - "Do Not Edit" warning
-----------------------------------

Usage:  (dne prefix [ first_prefix ] [ optpfx ])
Generate a "DO NOT EDIT" or "EDIT WITH CARE" warning string.  Which
depends on whether or not the `--writable' command line option was set.
The first argument is a per-line string prefix.  The optional second
argument is a prefix for the first-line and, in read-only mode,
activates the editor hints.
     -*- buffer-read-only: t -*- vi: set ro:
The warning string also includes information about the template used to
construct the file and the definitions used in its instantiation.

   The optional third argument is used when the first argument is
actually an invocation option and the prefix arguments get shifted.
The first argument must be, specifically, "`-d'".  That is used to
signify that the date stamp should not be inserted into the output.

   Arguments:
prefix - string for starting each output line
first_prefix - Optional - for the first output line
optpfx - Optional - shifted prefix


File: autogen.info,  Node: SCM error,  Next: SCM exist?,  Prev: SCM dne,  Up: AutoGen Functions

3.4.8 `error' - display message and exit
----------------------------------------

Usage:  (error message)
The argument is a string that printed out as part of an error message.
The message is formed from the formatting string:

     DEFINITIONS ERROR in %s line %d for %s:  %s\n

   The first three arguments to this format are provided by the routine
and are:  The name of the template file, the line within the template
where the error was found, and the current output file name.

   After displaying the message, the current output file is removed and
autogen exits with the EXIT_FAILURE error code.  IF, however, the
argument begins with the number 0 (zero), or the string is the empty
string, then processing continues with the next suffix.

   Arguments:
message - message to display before exiting


File: autogen.info,  Node: SCM exist?,  Next: SCM find-file,  Prev: SCM error,  Up: AutoGen Functions

3.4.9 `exist?' - test for value name
------------------------------------

Usage:  (exist? ag-name)
return SCM_BOOL_T iff a specified name has an AutoGen value.  The name
may include indexes and/or member names.  All but the last member name
must be an aggregate definition.  For example:
     (exist? "foo[3].bar.baz")
   will yield true if all of the following is true:
There is a member value of either group or string type named `baz' for
some group value `bar' that is a member of the `foo' group with index
`3'.  There may be multiple entries of `bar' within `foo', only one
needs to contain a value for `baz'.

   Arguments:
ag-name - name of AutoGen value


File: autogen.info,  Node: SCM find-file,  Next: SCM first-for?,  Prev: SCM exist?,  Up: AutoGen Functions

3.4.10 `find-file' - locate a file in the search path
-----------------------------------------------------

Usage:  (find-file file-name [ suffix ])
AutoGen has a search path that it uses to locate template and definition
files.  This function will search the same list for `file-name', both
with and without the `.suffix', if provided.

   Arguments:
file-name - name of file with text
suffix - Optional - file suffix to try, too


File: autogen.info,  Node: SCM first-for?,  Next: SCM for-by,  Prev: SCM find-file,  Up: AutoGen Functions

3.4.11 `first-for?' - detect first iteration
--------------------------------------------

Usage:  (first-for? [ for_var ])
Returns SCM_BOOL_T if the named FOR loop (or, if not named, the current
innermost loop) is on the first pass through the data.  Outside of any
FOR loop, it returns SCM_UNDEFINED.  *Note FOR::.

   Arguments:
for_var - Optional - which for loop


File: autogen.info,  Node: SCM for-by,  Next: SCM for-from,  Prev: SCM first-for?,  Up: AutoGen Functions

3.4.12 `for-by' - set iteration step
------------------------------------

Usage:  (for-by by)
This function records the "step by" information for an AutoGen FOR
function.  Outside of the FOR macro itself, this function will emit an
error.  *Note FOR::.

   Arguments:
by - the iteration increment for the AutoGen FOR macro


File: autogen.info,  Node: SCM for-from,  Next: SCM for-index,  Prev: SCM for-by,  Up: AutoGen Functions

3.4.13 `for-from' - set initial index
-------------------------------------

Usage:  (for-from from)
This function records the initial index information for an AutoGen FOR
function.  Outside of the FOR macro itself, this function will emit an
error.  *Note FOR::.

   Arguments:
from - the initial index for the AutoGen FOR macro


File: autogen.info,  Node: SCM for-index,  Next: SCM for-sep,  Prev: SCM for-from,  Up: AutoGen Functions

3.4.14 `for-index' - get current loop index
-------------------------------------------

Usage:  (for-index [ for_var ])
Returns the current index for the named FOR loop.  If not named, then
the index for the innermost loop.  Outside of any FOR loop, it returns
SCM_UNDEFINED.  *Note FOR::.

   Arguments:
for_var - Optional - which for loop


File: autogen.info,  Node: SCM for-sep,  Next: SCM for-to,  Prev: SCM for-index,  Up: AutoGen Functions

3.4.15 `for-sep' - set loop separation string
---------------------------------------------

Usage:  (for-sep separator)
This function records the separation string that is to be inserted
between each iteration of an AutoGen FOR function.  This is often
nothing more than a comma.  Outside of the FOR macro itself, this
function will emit an error.

   Arguments:
separator - the text to insert between the output of each FOR iteration


File: autogen.info,  Node: SCM for-to,  Next: SCM get,  Prev: SCM for-sep,  Up: AutoGen Functions

3.4.16 `for-to' - set ending index
----------------------------------

Usage:  (for-to to)
This function records the terminating value information for an AutoGen
FOR function.  Outside of the FOR macro itself, this function will emit
an error.  *Note FOR::.

   Arguments:
to - the final index for the AutoGen FOR macro


File: autogen.info,  Node: SCM get,  Next: SCM high-lim,  Prev: SCM for-to,  Up: AutoGen Functions

3.4.17 `get' - get named value
------------------------------

Usage:  (get ag-name [ alt-val ])
Get the first string value associated with the name.  It will either
return the associated string value (if the name resolves), the
alternate value (if one is provided), or else the empty string.

   Arguments:
ag-name - name of AutoGen value
alt-val - Optional - value if not present


File: autogen.info,  Node: SCM high-lim,  Next: SCM last-for?,  Prev: SCM get,  Up: AutoGen Functions

3.4.18 `high-lim' - get highest value index
-------------------------------------------

Usage:  (high-lim ag-name)
Returns the highest index associated with an array of definitions.
This is generally, but not necessarily, one less than the `count'
value.  (The indexes may be specified, rendering a non-zero based or
sparse array of values.)

   This is very useful for specifying the size of a zero-based array of
values where not all values are present.  For example:

     tMyStruct myVals[ [+ (+ 1 (high-lim "my-val-list")) +] ];

   Arguments:
ag-name - name of AutoGen value


File: autogen.info,  Node: SCM last-for?,  Next: SCM len,  Prev: SCM high-lim,  Up: AutoGen Functions

3.4.19 `last-for?' - detect last iteration
------------------------------------------

Usage:  (last-for? [ for_var ])
Returns SCM_BOOL_T if the named FOR loop (or, if not named, the current
innermost loop) is on the last pass through the data.  Outside of any
FOR loop, it returns SCM_UNDEFINED.  *Note FOR::.

   Arguments:
for_var - Optional - which for loop


File: autogen.info,  Node: SCM len,  Next: SCM low-lim,  Prev: SCM last-for?,  Up: AutoGen Functions

3.4.20 `len' - get count of values
----------------------------------

Usage:  (len ag-name)
If the named object is a group definition, then "len" is the same as
"count".  Otherwise, if it is one or more text definitions, then it is
the sum of their string lengths.  If it is a single text definition,
then it is equivalent to `(string-length (get "ag-name"))'.

   Arguments:
ag-name - name of AutoGen value


File: autogen.info,  Node: SCM low-lim,  Next: SCM make-header-guard,  Prev: SCM len,  Up: AutoGen Functions

3.4.21 `low-lim' - get lowest value index
-----------------------------------------

Usage:  (low-lim ag-name)
Returns the lowest index associated with an array of definitions.

   Arguments:
ag-name - name of AutoGen value


File: autogen.info,  Node: SCM make-header-guard,  Next: SCM match-value?,  Prev: SCM low-lim,  Up: AutoGen Functions

3.4.22 `make-header-guard' - make self-inclusion guard
------------------------------------------------------

Usage:  (make-header-guard name)
This function will create a `#ifndef'/`#define' sequence for protecting
a header from multiple evaluation.  It will also set the Scheme
variable `header-file' to the name of the file being protected and it
will set `header-guard' to the name of the `#define' being used to
protect it.  It is expected that this will be used as follows:
     [+ (make-header-guard "group_name") +]
     ...
     #endif /* [+ (. header-guard) +]

     #include "[+ (. header-file)  +]"
   The `#define' name is composed as follows:

  1. The first element is the string argument and a separating
     underscore.

  2. That is followed by the name of the header file with illegal
     characters mapped to underscores.

  3. The end of the name is always, "`_GUARD'".

  4. Finally, the entire string is mapped to upper case.

   The final `#define' name is stored in an SCM symbol named
`header-guard'.  Consequently, the concluding `#endif' for the file
should read something like:

     #endif /* [+ (. header-guard) +] */

   The name of the header file (the current output file) is also stored
in an SCM symbol, `header-file'.  Therefore, if you are also generating
a C file that uses the previously generated header file, you can put
this into that generated file:

     #include "[+ (. header-file) +]"

   Obviously, if you are going to produce more than one header file from
a particular template, you will need to be careful how these SCM symbols
get handled.

   Arguments:
name - header group name


File: autogen.info,  Node: SCM match-value?,  Next: SCM out-delete,  Prev: SCM make-header-guard,  Up: AutoGen Functions

3.4.23 `match-value?' - test for matching value
-----------------------------------------------

Usage:  (match-value? op ag-name test-str)
This function answers the question, "Is there an AutoGen value named
`ag-name' with a value that matches the pattern `test-str' using the
match function `op'?"  Return SCM_BOOL_T iff at least one occurrence of
the specified name has such a value.  The operator can be any function
that takes two string arguments and yields a boolean.  It is expected
that you will use one of the string matching functions provided by
AutoGen.
The value name must follow the same rules as the `ag-name' argument for
`exist?' (*note SCM exist?::).

   Arguments:
op - boolean result operator
ag-name - name of AutoGen value
test-str - string to test against


File: autogen.info,  Node: SCM out-delete,  Next: SCM out-depth,  Prev: SCM match-value?,  Up: AutoGen Functions

3.4.24 `out-delete' - delete current output file
------------------------------------------------

Usage:  (out-delete)
Remove the current output file.  Cease processing the template for the
current suffix.  It is an error if there are `push'-ed output files.
Use the `(error "0")' scheme function instead.  *Note output controls::.

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM out-depth,  Next: SCM out-line,  Prev: SCM out-delete,  Up: AutoGen Functions

3.4.25 `out-depth' - output file stack depth
--------------------------------------------

Usage:  (out-depth)
Returns the depth of the output file stack.  *Note output controls::.

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM out-line,  Next: SCM out-move,  Prev: SCM out-depth,  Up: AutoGen Functions

3.4.26 `out-line' - output file line number
-------------------------------------------

Usage:  (out-line)
Returns the current line number of the output file.  It rewinds and
reads the file to count newlines.

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM out-move,  Next: SCM out-name,  Prev: SCM out-line,  Up: AutoGen Functions

3.4.27 `out-move' - change name of output file
----------------------------------------------

Usage:  (out-move new-name)
Rename current output file.  *Note output controls::.  Please note:
changing the name will not save a temporary file from being deleted.
It may, however, be used on the root output file.

   Arguments:
new-name - new name for the current output file


File: autogen.info,  Node: SCM out-name,  Next: SCM out-pop,  Prev: SCM out-move,  Up: AutoGen Functions

3.4.28 `out-name' - current output file name
--------------------------------------------

Usage:  (out-name)
Returns the name of the current output file.  If the current file is a
temporary, unnamed file, then it will scan up the chain until a real
output file name is found.  *Note output controls::.

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM out-pop,  Next: SCM out-push-add,  Prev: SCM out-name,  Up: AutoGen Functions

3.4.29 `out-pop' - close current output file
--------------------------------------------

Usage:  (out-pop [ disp ])
If there has been a `push' on the output, then close that file and go
back to the previously open file.  It is an error if there has not been
a `push'.  *Note output controls::.

   If there is no argument, no further action is taken.  Otherwise, the
argument should be `#t' and the contents of the file are returned by
the function.

   Arguments:
disp - Optional - return contents of the file


File: autogen.info,  Node: SCM out-push-add,  Next: SCM out-push-new,  Prev: SCM out-pop,  Up: AutoGen Functions

3.4.30 `out-push-add' - append output to file
---------------------------------------------

Usage:  (out-push-add file-name)
Identical to `push-new', except the contents are *not* purged, but
appended to.  *Note output controls::.

   Arguments:
file-name - name of the file to append text to


File: autogen.info,  Node: SCM out-push-new,  Next: SCM out-resume,  Prev: SCM out-push-add,  Up: AutoGen Functions

3.4.31 `out-push-new' - purge and create output file
----------------------------------------------------

Usage:  (out-push-new [ file-name ])
Leave the current output file open, but purge and create a new file
that will remain open until a `pop' `delete' or `switch' closes it.
The file name is optional and, if omitted, the output will be sent to a
temporary file that will be deleted when it is closed.  *Note output
controls::.

   Arguments:
file-name - Optional - name of the file to create


File: autogen.info,  Node: SCM out-resume,  Next: SCM out-suspend,  Prev: SCM out-push-new,  Up: AutoGen Functions

3.4.32 `out-resume' - resume suspended output file
--------------------------------------------------

Usage:  (out-resume suspName)
If there has been a suspended output, then make that output descriptor
current again.  That output must have been suspended with the same tag
name given to this routine as its argument.

   Arguments:
suspName - A name tag for reactivating


File: autogen.info,  Node: SCM out-suspend,  Next: SCM out-switch,  Prev: SCM out-resume,  Up: AutoGen Functions

3.4.33 `out-suspend' - suspend current output file
--------------------------------------------------

Usage:  (out-suspend suspName)
If there has been a `push' on the output, then set aside the output
descriptor for later reactiviation with `(out-resume "xxx")'.  The tag
name need not reflect the name of the output file.  In fact, the output
file may be an anonymous temporary file.  You may also change the tag
every time you suspend output to a file, because the tag names are
forgotten as soon as the file has been "resumed".

   Arguments:
suspName - A name tag for reactivating


File: autogen.info,  Node: SCM out-switch,  Next: SCM set-option,  Prev: SCM out-suspend,  Up: AutoGen Functions

3.4.34 `out-switch' - close and create new output
-------------------------------------------------

Usage:  (out-switch file-name)
Switch output files - close current file and make the current file
pointer refer to the new file.  This is equivalent to `out-pop'
followed by `out-push-new', except that you may not pop the base level
output file, but you may `switch' it.  *Note output controls::.

   Arguments:
file-name - name of the file to create


File: autogen.info,  Node: SCM set-option,  Next: SCM set-writable,  Prev: SCM out-switch,  Up: AutoGen Functions

3.4.35 `set-option' - Set a command line option
-----------------------------------------------

Usage:  (set-option opt)
The text argument must be an option name followed by any needed option
argument.  Returns SCM_UNDEFINED.

   Arguments:
opt - AutoGen option name + its argument


File: autogen.info,  Node: SCM set-writable,  Next: SCM stack,  Prev: SCM set-option,  Up: AutoGen Functions

3.4.36 `set-writable' - Make the output file be writable
--------------------------------------------------------

Usage:  (set-writable [ set? ])
This function will set the current output file to be writable (or not).
This is only effective if neither the `--writable' nor
`--not-writable' have been specified.  This state is reset when the
current suffix's output is complete.

   Arguments:
set? - Optional - boolean arg, false to make output non-writable


File: autogen.info,  Node: SCM stack,  Next: SCM suffix,  Prev: SCM set-writable,  Up: AutoGen Functions

3.4.37 `stack' - make list of AutoGen values
--------------------------------------------

Usage:  (stack ag-name)
Create a scheme list of all the strings that are associated with a
name.  They must all be text values or we choke.

   Arguments:
ag-name - AutoGen value name


File: autogen.info,  Node: SCM suffix,  Next: SCM tpl-file,  Prev: SCM stack,  Up: AutoGen Functions

3.4.38 `suffix' - get the current suffix
----------------------------------------

Usage:  (suffix)
Returns the current active suffix (*note pseudo macro::).

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM tpl-file,  Next: SCM tpl-file-line,  Prev: SCM suffix,  Up: AutoGen Functions

3.4.39 `tpl-file' - get the template file name
----------------------------------------------

Usage:  (tpl-file [ full_path ])
Returns the name of the current template file.  If `#t' is passed in as
an argument, then the template file is hunted for in the template
search path.  Otherwise, just the unadorned name.

   Arguments:
full_path - Optional - include full path to file


File: autogen.info,  Node: SCM tpl-file-line,  Next: SCM autogen-version,  Prev: SCM tpl-file,  Up: AutoGen Functions

3.4.40 `tpl-file-line' - get the template file+line number
----------------------------------------------------------

Usage:  (tpl-file-line [ msg-fmt ])
Returns the file and line number of the current template macro using
either the default format, "from %s line %d", or else the format you
supply.  For example, if you want to insert a "C" language file-line
directive, you would supply the format "# %2$d \"%1$s\"", but that is
also already supplied with the scheme variable *Note SCM
c-file-line-fmt::.  You may use it thus:
     (tpl-file-line c-file-line-fmt)

   It is also safe to use the formatting string, "%2$d".  AutoGen uses
an argument vector version of printf: *Note snprintfv::.

   Arguments:
msg-fmt - Optional - formatting for line message


File: autogen.info,  Node: SCM autogen-version,  Next: SCM c-file-line-fmt,  Prev: SCM tpl-file-line,  Up: AutoGen Functions

3.4.41 `autogen-version' - autogen version number
-------------------------------------------------

This is a symbol defining the current AutoGen version number string.
It was first defined in AutoGen-5.2.14.  It is currently "5.9".


File: autogen.info,  Node: SCM c-file-line-fmt,  Prev: SCM autogen-version,  Up: AutoGen Functions

3.4.42 format file info as, "`#line nn "file"'"
-----------------------------------------------

This is a symbol that can easily be used with the functions *Note SCM
tpl-file-line::, and *Note SCM def-file-line::.  These will emit C
program `#line' directives pointing to template and definitions text,
respectively.


File: autogen.info,  Node: Common Functions,  Next: native macros,  Prev: AutoGen Functions,  Up: Template File

3.5 Common Scheme Functions
===========================

This section describes a number of general purpose functions that make
the kind of string processing that AutoGen does a little easier.
Unlike the AutoGen specific functions (*note AutoGen Functions::),
these functions are available for direct use during definition load
time.  The equality test (*note SCM =::) is "overloaded" to do string
equivalence comparisons.  If you are looking for inequality, the
Scheme/Lisp way of spelling that is, "(not (= ...))".

* Menu:

* SCM ag-fprintf::         `ag-fprintf' - format to autogen stream
* SCM bsd::                `bsd' - BSD Public License
* SCM c-string::           `c-string' - emit string for ANSI C
* SCM emit::               `emit' - emit the text for each argument
* SCM emit-string-table::  `emit-string-table' - output a string table
* SCM error-source-line::  `error-source-line' - display of file & line
* SCM extract::            `extract' - extract text from another file
* SCM format-arg-count::   `format-arg-count' - count the args to a format
* SCM fprintf::            `fprintf' - format to a file
* SCM gperf::              `gperf' - perform a perfect hash function
* SCM gperf-code::         `gperf-code' - emit the source of the generated gperf program
* SCM gpl::                `gpl' - GNU General Public License
* SCM hide-email::         `hide-email' - convert eaddr to javascript
* SCM html-escape-encode:: `html-escape-encode' - encode html special characters
* SCM in?::                `in?' - test for string in list
* SCM join::               `join' - join string list with separator
* SCM kr-string::          `kr-string' - emit string for K&R C
* SCM lgpl::               `lgpl' - GNU Library General Public License
* SCM license::            `license' - an arbitrary license
* SCM make-gperf::         `make-gperf' - build a perfect hash function program
* SCM makefile-script::    `makefile-script' - create makefile script
* SCM max::                `max' - maximum value in list
* SCM min::                `min' - minimum value in list
* SCM prefix::             `prefix' - prefix lines with a string
* SCM printf::             `printf' - format to stdout
* SCM raw-shell-str::      `raw-shell-str' - single quote shell string
* SCM shell::              `shell' - invoke a shell script
* SCM shell-str::          `shell-str' - double quote shell string
* SCM shellf::             `shellf' - format a string, run shell
* SCM sprintf::            `sprintf' - format a string
* SCM string-capitalize::  `string-capitalize' - capitalize a new string
* SCM string-capitalize!:: `string-capitalize!' - capitalize a string
* SCM *=*::                `string-contains-eqv?' - caseless substring
* SCM *==*::               `string-contains?' - substring match
* SCM string-downcase::    `string-downcase' - lower case a new string
* SCM string-downcase!::   `string-downcase!' - make a string be lower case
* SCM *~::                 `string-end-eqv-match?' - caseless regex ending
* SCM *~~::                `string-end-match?' - regex match end
* SCM *=::                 `string-ends-eqv?' - caseless string ending
* SCM *==::                `string-ends-with?' - string ending
* SCM ==::                 `string-equals?' - string matching
* SCM ~::                  `string-eqv-match?' - caseless regex match
* SCM =::                  `string-eqv?' - caseless string match
* SCM *~*::                `string-has-eqv-match?' - caseless regex contains
* SCM *~~*::               `string-has-match?' - contained regex match
* SCM ~~::                 `string-match?' - regex match
* SCM ~*::                 `string-start-eqv-match?' - caseless regex start
* SCM ~~*::                `string-start-match?' - regex match start
* SCM =*::                 `string-starts-eqv?' - caseless string start
* SCM ==*::                `string-starts-with?' - string starting
* SCM string-substitute::  `string-substitute' - multiple global replacements
* SCM string-table-add::   `string-table-add' - Add an entry to a string table
* SCM string-table-add-ref:: `string-table-add-ref' - Add an entry to a string table, get reference
* SCM string-table-new::   `string-table-new' - create a string table
* SCM string-table-size::  `string-table-size' - print the current size of a string table
* SCM string->c-name!::    `string->c-name!' - map non-name chars to underscore
* SCM string-tr::          `string-tr' - convert characters with new result
* SCM string-tr!::         `string-tr!' - convert characters
* SCM string-upcase::      `string-upcase' - upper case a new string
* SCM string-upcase!::     `string-upcase!' - make a string be upper case
* SCM sub-shell-str::      `sub-shell-str' - back quoted (sub-)shell string
* SCM sum::                `sum' - sum of values in list
* SCM version-compare::    `version-compare' - compare two version numbers


File: autogen.info,  Node: SCM ag-fprintf,  Next: SCM bsd,  Up: Common Functions

3.5.1 `ag-fprintf' - format to autogen stream
---------------------------------------------

Usage:  (ag-fprintf ag-diversion format [ format-arg ... ])
Format a string using arguments from the alist.  Write to a specified
AutoGen diversion.  That may be either a specified suspended output
stream (*note SCM out-suspend::) or an index into the output stack
(*note SCM out-push-new::).  `(ag-fprintf 0 ...)' is equivalent to
`(emit (sprintf ...))', and `(ag-fprintf 1 ...)' sends output to the
most recently suspended output stream.

   Arguments:
ag-diversion - AutoGen diversion name or number
format - formatting string
format-arg - Optional - list of arguments to formatting string


File: autogen.info,  Node: SCM bsd,  Next: SCM c-string,  Prev: SCM ag-fprintf,  Up: Common Functions

3.5.2 `bsd' - BSD Public License
--------------------------------

Usage:  (bsd prog_name owner prefix)
Emit a string that contains the Free BSD Public License.  It takes
three arguments: `prefix' contains the string to start each output line.
`owner' contains the copyright owner.  `prog_name' contains the name of
the program the copyright is about.

   Arguments:
prog_name - name of the program under the BSD
owner - Grantor of the BSD License
prefix - String for starting each output line


File: autogen.info,  Node: SCM c-string,  Next: SCM emit,  Prev: SCM bsd,  Up: Common Functions

3.5.3 `c-string' - emit string for ANSI C
-----------------------------------------

Usage:  (c-string string)
Reform a string so that, when printed, the C compiler will be able to
compile the data and construct a string that contains exactly what the
current string contains.  Many non-printing characters are replaced with
escape sequences.  Newlines are replaced with a backslash, an `n', a
closing quote, a newline, seven spaces and another re-opening quote.
The compiler will implicitly concatenate them.  The reader will see line
breaks.

   A K&R compiler will choke.  Use `kr-string' for that compiler.

   Arguments:
string - string to reformat


File: autogen.info,  Node: SCM emit,  Next: SCM emit-string-table,  Prev: SCM c-string,  Up: Common Functions

3.5.4 `emit' - emit the text for each argument
----------------------------------------------

Usage:  (emit alist ...)
Walk the tree of arguments, displaying the values of displayable SCM
types.

   Arguments:
alist - list of arguments to stringify and emit


File: autogen.info,  Node: SCM emit-string-table,  Next: SCM error-source-line,  Prev: SCM emit,  Up: Common Functions

3.5.5 `emit-string-table' - output a string table
-------------------------------------------------

Usage:  (emit-string-table st-name)
Emit into the current output stream a `static char const' array named
`st-name' that will have `NUL' bytes between each inserted string.

   Arguments:
st-name - the name of the array of characters


File: autogen.info,  Node: SCM error-source-line,  Next: SCM extract,  Prev: SCM emit-string-table,  Up: Common Functions

3.5.6 `error-source-line' - display of file & line
--------------------------------------------------

Usage:  (error-source-line)
This function is only invoked just before Guile displays an error
message.  It displays the file name and line number that triggered the
evaluation error.  You should not need to invoke this routine directly.
Guile will do it automatically.

   This Scheme function takes no arguments.


File: autogen.info,  Node: SCM extract,  Next: SCM format-arg-count,  Prev: SCM error-source-line,  Up: Common Functions

3.5.7 `extract' - extract text from another file
------------------------------------------------

Usage:  (extract file-name marker-fmt [ caveat ] [ default ])
This function is used to help construct output files that may contain
text that is carried from one version of the output to the next.

   The first two arguments are required, the second are optional:

   * The `file-name' argument is used to name the file that contains
     the demarcated text.

   * The `marker-fmt' is a formatting string that is used to construct
     the starting and ending demarcation strings.  The sprintf function
     is given the `marker-fmt' with two arguments.  The first is either
     "START" or "END".  The second is either "DO NOT CHANGE THIS
     COMMENT" or the optional `caveat' argument.

   * `caveat' is presumed to be absent if it is the empty string
     (`""').  If absent, "DO NOT CHANGE THIS COMMENT" is used as the
     second string argument to the `marker-fmt'.

   * When a `default' argument is supplied and no pre-existing text is
     found, then this text will be inserted between the START and END
     markers.

The resulting strings are presumed to be unique within the subject
file.  As a simplified example:

     [+ (extract "fname" "// %s - SOMETHING - %s" ""
     "example default") +]
   will result in the following text being inserted into the output:

     // START - SOMETHING - DO NOT CHANGE THIS COMMENT
     example default
     // END   - SOMETHING - DO NOT CHANGE THIS COMMENT

The "`example default'" string can then be carried forward to the next
generation of the output, *provided* the output is not named "`fname'"
and the old output is renamed to "`fname'" before AutoGen-eration
begins.

*NB:*
     You can set aside previously generated source files inside the
     pseudo macro with a Guile/scheme function, extract the text you
     want to keep with this extract function.  Just remember you should
     delete it at the end, too.  Here is an example from my Finite
     State Machine generator:

     [+ AutoGen5 Template  -*- Mode: text -*-
     h=%s-fsm.h   c=%s-fsm.c
     (shellf
     "[ -f %1$s-fsm.h ] && mv -f %1$s-fsm.h .fsm.head
     [ -f %1$s-fsm.c ] && mv -f %1$s-fsm.c .fsm.code" (base-name)) +]

   This code will move the two previously produced output files to files
named ".fsm.head" and ".fsm.code".  At the end of the 'c' output
processing, I delete them.

   Arguments:
file-name - name of file with text
marker-fmt - format for marker text
caveat - Optional - warn about changing marker
default - Optional - default initial text


File: autogen.info,  Node: SCM format-arg-count,  Next: SCM fprintf,  Prev: SCM extract,  Up: Common Functions

3.5.8 `format-arg-count' - count the args to a format
-----------------------------------------------------

Usage:  (format-arg-count format)
Sometimes, it is useful to simply be able to figure out how many
arguments are required by a format string.  For example, if you are
extracting a format string for the purpose of generating a macro to
invoke a printf-like function, you can run the formatting string
through this function to determine how many arguments to provide for in
the macro. e.g. for this extraction text:

      /*=fumble bumble
       * fmt: 'stumble %s: %d\n'
      =*/

You may wish to generate a macro:

      #define BUMBLE(a1,a2) printf_like(something,(a1),(a2))

You can do this by knowing that the format needs two arguments.

   Arguments:
format - formatting string


File: autogen.info,  Node: SCM fprintf,  Next: SCM gperf,  Prev: SCM format-arg-count,  Up: Common Functions

3.5.9 `fprintf' - format to a file
----------------------------------

Usage:  (fprintf port format [ format-arg ... ])
Format a string using arguments from the alist.  Write to a specified
port.  The result will NOT appear in your output.  Use this to print
information messages to a template user.

   Arguments:
port - Guile-scheme output port
format - formatting string
format-arg - Optional - list of arguments to formatting string


File: autogen.info,  Node: SCM gperf,  Next: SCM gperf-code,  Prev: SCM fprintf,  Up: Common Functions

3.5.10 `gperf' - perform a perfect hash function
------------------------------------------------

Usage:  (gperf name str)
Perform the perfect hash on the input string.  This is only useful if
you have previously created a gperf program with the `make-gperf'
function *Note SCM make-gperf::.  The `name' you supply here must match
the name used to create the program and the string to hash must be one
of the strings supplied in the `make-gperf' string list.  The result
will be a perfect hash index.

   See the documentation for `gperf(1GNU)' for more details.

   Arguments:
name - name of hash list
str - string to hash


File: autogen.info,  Node: SCM gperf-code,  Next: SCM gpl,  Prev: SCM gperf,  Up: Common Functions

3.5.11 `gperf-code' - emit the source of the generated gperf program
--------------------------------------------------------------------

Usage:  (gperf-code st-name)
Returns the contents of the emitted code, suitable for inclusion in
another program.  The interface contains the following elements:

`struct <st-name>_index'
     containg the fields: `{char const * name, int const id; };'

`<st-name>_hash()'
     This is the hashing function with local only scope (static).

`<st-name>_find()'
     This is the searching and validation function.  The first argument
     is the string to look up, the second is its length.  It returns a
     pointer to the corresponding `<st-name>_index' entry.

   Use this in your template as follows where "<st-name>" was set to be
"`lookup'":

     [+ (make-gperf "lookup" (join "\n" (stack "name_list")))
     (gperf-code "lookup") +]
     void my_fun(char * str) {
     struct lookup_index * li = lookup_find(str, strlen(str));
     if (li != NULL) printf("%s yields %d\n", str, li->idx);

   Arguments:
st-name - the name of the gperf hash list


File: autogen.info,  Node: SCM gpl,  Next: SCM hide-email,  Prev: SCM gperf-code,  Up: Common Functions

3.5.12 `gpl' - GNU General Public License
-----------------------------------------

Usage:  (gpl prog-name prefix)
Emit a string that contains the GNU General Public License.  It takes
two arguments: `prefix' contains the string to start each output line,
and `prog_name' contains the name of the program the copyright is about.

   Arguments:
prog-name - name of the program under the GPL
prefix - String for starting each output line


File: autogen.info,  Node: SCM hide-email,  Next: SCM html-escape-encode,  Prev: SCM gpl,  Up: Common Functions

3.5.13 `hide-email' - convert eaddr to javascript
-------------------------------------------------

Usage:  (hide-email display eaddr)
Hides an email address as a java scriptlett.  The 'mailto:' tag and the
email address are coded bytes rather than plain text.  They are also
broken up.

   Arguments:
display - display text
eaddr - email address


File: autogen.info,  Node: SCM html-escape-encode,  Next: SCM in?,  Prev: SCM hide-email,  Up: Common Functions

3.5.14 `html-escape-encode' - encode html special characters
------------------------------------------------------------

Usage:  (html-escape-encode str)
This function will replace replace the characters `'&'', `'<'' and
`'>'' characters with the HTML/XML escape-encoded strings (`"&amp;"',
`"&lt;"', and `"&gt;"', respectively).

   Arguments:
str - string to make substitutions in


File: autogen.info,  Node: SCM in?,  Next: SCM join,  Prev: SCM html-escape-encode,  Up: Common Functions

3.5.15 `in?' - test for string in list
--------------------------------------

Usage:  (in? test-string string-list ...)
Return SCM_BOOL_T if the first argument string is found in one of the
entries in the second (list-of-strings) argument.

   Arguments:
test-string - string to look for
string-list - list of strings to check


File: autogen.info,  Node: SCM join,  Next: SCM kr-string,  Prev: SCM in?,  Up: Common Functions

3.5.16 `join' - join string list with separator
-----------------------------------------------

Usage:  (join separator list ...)
With the first argument as the separator string, joins together an
a-list of strings into one long string.  The list may contain nested
lists, partly because you cannot always control that.

   Arguments:
separator - string to insert between entries
list - list of strings to join


File: autogen.info,  Node: SCM kr-string,  Next: SCM lgpl,  Prev: SCM join,  Up: Common Functions

3.5.17 `kr-string' - emit string for K&R C
------------------------------------------

Usage:  (kr-string string)
Reform a string so that, when printed, a K&R C compiler will be able to
compile the data and construct a string that contains exactly what the
current string contains.  Many non-printing characters are replaced
with escape sequences.  New-lines are replaced with a
backslash-n-backslash and newline sequence,

   Arguments:
string - string to reformat


File: autogen.info,  Node: SCM lgpl,  Next: SCM license,  Prev: SCM kr-string,  Up: Common Functions

3.5.18 `lgpl' - GNU Library General Public License
--------------------------------------------------

Usage:  (lgpl prog_name owner prefix)
Emit a string that contains the GNU Library General Public License.  It
takes three arguments:  `prefix' contains the string to start each
output line.  `owner' contains the copyright owner.  `prog_name'
contains the name of the program the copyright is about.

   Arguments:
prog_name - name of the program under the LGPL
owner - Grantor of the LGPL
prefix - String for starting each output line


File: autogen.info,  Node: SCM license,  Next: SCM make-gperf,  Prev: SCM lgpl,  Up: Common Functions

3.5.19 `license' - an arbitrary license
---------------------------------------

Usage:  (license lic_name prog_name owner prefix)
Emit a string that contains the named license.  The license text is
read from a file named, `lic_name'.lic, searching the standard
directories.  The file contents are used as a format argument to
`printf'(3), with `prog_name' and `owner' as the two string formatting
arguments.  Each output line is automatically prefixed with the string
`prefix'.

   Arguments:
lic_name - file name of the license
prog_name - name of the licensed program or library
owner - Grantor of the License
prefix - String for starting each output line


File: autogen.info,  Node: SCM make-gperf,  Next: SCM makefile-script,  Prev: SCM license,  Up: Common Functions

3.5.20 `make-gperf' - build a perfect hash function program
-----------------------------------------------------------

Usage:  (make-gperf name strings ...)
Build a program to perform perfect hashes of a known list of input
strings.  This function produces no output, but prepares a program
named, `gperf_<name>' for use by the gperf function *Note SCM gperf::.

   This program will be obliterated as AutoGen exits.  However, you may
incorporate the generated hashing function into your C program with
commands something like the following:

     [+ (shellf "sed '/^int main(/,$d;/^#line/d' ${gpdir}/%s.c"
     name ) +]

   where `name' matches the name provided to this `make-perf' function.
`gpdir' is the variable used to store the name of the temporary
directory used to stash all the files.

   Arguments:
name - name of hash list
strings - list of strings to hash


File: autogen.info,  Node: SCM makefile-script,  Next: SCM max,  Prev: SCM make-gperf,  Up: Common Functions

3.5.21 `makefile-script' - create makefile script
-------------------------------------------------

Usage:  (makefile-script text)
This function will take ordinary shell script text and reformat it so
that it will work properly inside of a makefile shell script.  Not
every shell construct can be supported; the intent is to have most
ordinary scripts work without much, if any, alteration.

   The following transformations are performed on the source text:

  1. Trailing whitespace on each line is stripped.

  2. Except for the last line, the string, " ; \\" is appended to the
     end of every line that does not end with a backslash, semi-colon,
     conjunction operator or pipe.  Note that this will mutilate
     multi-line quoted strings, but `make' renders it impossible to use
     multi-line constructs anyway.

  3. If the line ends with a backslash, it is left alone.

  4. If the line ends with one of the excepted operators, then a space
     and backslash is added.

  5. The dollar sign character is doubled, unless it immediately
     precedes an opening parenthesis or the single character make
     macros '*', '<', '@', '?' or '%'.  Other single character make
     macros that do not have enclosing parentheses will fail.  For
     shell usage of the "$@", "$?" and "$*" macros, you must enclose
     them with curly braces, e.g., "${?}".  The ksh construct
     `$(<command>)' will not work.  Though some `make's accept `${var}'
     constructs, this function will assume it is for shell
     interpretation and double the dollar character.  You must use
     `$(var)' for all `make' substitutions.

  6. Double dollar signs are replaced by four before the next character
     is examined.

  7. Every line is prefixed with a tab, unless the first line already
     starts with a tab.

  8. The newline character on the last line, if present, is suppressed.

  9. Blank lines are stripped.

This function is intended to be used approximately as follows:

     $(TARGET) : $(DEPENDENCIES)
     <+ (out-push-new) +>
     ....mostly arbitrary shell script text....
     <+ (makefile-script (out-pop #t)) +>

   Arguments:
text - the text of the script


File: autogen.info,  Node: SCM max,  Next: SCM min,  Prev: SCM makefile-script,  Up: Common Functions

3.5.22 `max' - maximum value in list
------------------------------------

Usage:  (max list ...)
Return the maximum value in the list

   Arguments:
list - list of values.  Strings are converted to numbers


File: autogen.info,  Node: SCM min,  Next: SCM prefix,  Prev: SCM max,  Up: Common Functions

3.5.23 `min' - minimum value in list
------------------------------------

Usage:  (min list ...)
Return the minimum value in the list

   Arguments:
list - list of values.  Strings are converted to numbers


File: autogen.info,  Node: SCM prefix,  Next: SCM printf,  Prev: SCM min,  Up: Common Functions

3.5.24 `prefix' - prefix lines with a string
--------------------------------------------

Usage:  (prefix prefix text)
Prefix every line in the second string with the first string.

   For example, if the first string is "# " and the second contains:
     two
     lines
   The result string will contain:
     # two
     # lines

   Arguments:
prefix - string to insert at start of each line
text - multi-line block of text


File: autogen.info,  Node: SCM printf,  Next: SCM raw-shell-str,  Prev: SCM prefix,  Up: Common Functions

3.5.25 `printf' - format to stdout
----------------------------------

Usage:  (printf format [ format-arg ... ])
Format a string using arguments from the alist.  Write to the standard
out port.  The result will NOT appear in your output.  Use this to
print information messages to a template user.  Use "(sprintf ...)" to
add text to your document.

   Arguments:
format - formatting string
format-arg - Optional - list of arguments to formatting string


File: autogen.info,  Node: SCM raw-shell-str,  Next: SCM shell,  Prev: SCM printf,  Up: Common Functions

3.5.26 `raw-shell-str' - single quote shell string
--------------------------------------------------

Usage:  (raw-shell-str string)
Convert the text of the string into a singly quoted string that a
normal shell will process into the original string.  (It will not do
macro expansion later, either.)  Contained single quotes become
tripled, with the middle quote escaped with a backslash.  Normal shells
will reconstitute the original string.

   *Notice*:  some shells will not correctly handle unusual
non-printing characters.  This routine works for most reasonably
conventional ASCII strings.

   Arguments:
string - string to transform


File: autogen.info,  Node: SCM shell,  Next: SCM shell-str,  Prev: SCM raw-shell-str,  Up: Common Functions

3.5.27 `shell' - invoke a shell script
--------------------------------------

Usage:  (shell command)
Generate a string by writing the value to a server shell and reading
the output back in.  The template programmer is responsible for
ensuring that it completes within 10 seconds.  If it does not, the
server will be killed, the output tossed and a new server started.

   Arguments:
command - shell command - the result value is stdout


File: autogen.info,  Node: SCM shell-str,  Next: SCM shellf,  Prev: SCM shell,  Up: Common Functions

3.5.28 `shell-str' - double quote shell string
----------------------------------------------

Usage:  (shell-str string)
Convert the text of the string into a double quoted string that a normal
shell will process into the original string, almost.  It will add the
escape character `\\' before two special characters to accomplish this:
the backslash `\\' and double quote `"'.

   *NOTE*: some shells will not correctly handle unusual non-printing
characters.  This routine works for most reasonably conventional ASCII
strings.

   *WARNING*:
This function omits the extra backslash in front of a backslash,
however, if it is followed by either a backquote or a dollar sign.  It
must do this because otherwise it would be impossible to protect the
dollar sign or backquote from shell evaluation.  Consequently, it is
not possible to render the strings "\\$" or "\\`".  The lesser of two
evils.

   All others characters are copied directly into the output.

   The `sub-shell-str' variation of this routine behaves identically,
except that the extra backslash is omitted in front of `"' instead of
``'.  You have to think about it.  I'm open to suggestions.

   Meanwhile, the best way to document is with a detailed output
example.  If the backslashes make it through the text processing
correctly, below you will see what happens with three example strings.
The first example string contains a list of quoted `foo's, the second is
the same with a single backslash before the quote characters and the
last is with two backslash escapes.  Below each is the result of the
`raw-shell-str', `shell-str' and `sub-shell-str' functions.

     foo[0]           ''foo'' 'foo' "foo" `foo` $foo
     raw-shell-str -> \'\''foo'\'\'' '\''foo'\'' "foo" `foo` $foo'
     shell-str     -> "''foo'' 'foo' \"foo\" `foo` $foo"
     sub-shell-str -> `''foo'' 'foo' "foo" \`foo\` $foo`

     foo[1]           \'bar\' \"bar\" \`bar\` \$bar
     raw-shell-str -> '\'\''bar\'\'' \"bar\" \`bar\` \$bar'
     shell-str     -> "\\'bar\\' \\\"bar\\\" \`bar\` \$bar"
     sub-shell-str -> `\\'bar\\' \"bar\" \\\`bar\\\` \$bar`

     foo[2]           \\'BAZ\\' \\"BAZ\\" \\`BAZ\\` \\$BAZ
     raw-shell-str -> '\\'\''BAZ\\'\'' \\"BAZ\\" \\`BAZ\\` \\$BAZ'
     shell-str     -> "\\\\'BAZ\\\\' \\\\\"BAZ\\\\\" \\\`BAZ\\\` \\\$BAZ"
     sub-shell-str -> `\\\\'BAZ\\\\' \\\"BAZ\\\" \\\\\`BAZ\\\\\` \\\$BAZ`

   There should be four, three, five and three backslashes for the four
examples on the last line, respectively.  The next to last line should
have four, five, three and three backslashes.  If this was not
accurately reproduced, take a look at the agen5/test/shell.test test.
Notice the backslashes in front of the dollar signs.  It goes from zero
to one to three for the "cooked" string examples.

   Arguments:
string - string to transform


File: autogen.info,  Node: SCM shellf,  Next: SCM sprintf,  Prev: SCM shell-str,  Up: Common Functions

3.5.29 `shellf' - format a string, run shell
--------------------------------------------

Usage:  (shellf format [ format-arg ... ])
Format a string using arguments from the alist, then send the result to
the shell for interpretation.

   Arguments:
format - formatting string
format-arg - Optional - list of arguments to formatting string


File: autogen.info,  Node: SCM sprintf,  Next: SCM string-capitalize,  Prev: SCM shellf,  Up: Common Functions

3.5.30 `sprintf' - format a string
----------------------------------

Usage:  (sprintf format [ format-arg ... ])
Format a string using arguments from the alist.

   Arguments:
format - formatting string
format-arg - Optional - list of arguments to formatting string


File: autogen.info,  Node: SCM string-capitalize,  Next: SCM string-capitalize!,  Prev: SCM sprintf,  Up: Common Functions

3.5.31 `string-capitalize' - capitalize a new string
----------------------------------------------------

Usage:  (string-capitalize str)
Create a new SCM string containing the same text as the original, only
all the first letter of each word is upper cased and all other letters
are made lower case.

   Arguments:
str - input string


File: autogen.info,  Node: SCM string-capitalize!,  Next: SCM *=*,  Prev: SCM string-capitalize,  Up: Common Functions

3.5.32 `string-capitalize!' - capitalize a string
-------------------------------------------------

Usage:  (string-capitalize! str)
capitalize all the words in an SCM string.

   Arguments:
str - input/output string


File: autogen.info,  Node: SCM *=*,  Next: SCM *==*,  Prev: SCM string-capitalize!,  Up: Common Functions

3.5.33 `string-contains-eqv?' - caseless substring
--------------------------------------------------

Usage:  (*=* text match)
string-contains-eqv?:  Test to see if a string contains an equivalent
string.  `equivalent' means the strings match, but without regard to
character case and certain characters are considered `equivalent'.
Viz., '-', '_' and '^' are equivalent.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM *==*,  Next: SCM string-downcase,  Prev: SCM *=*,  Up: Common Functions

3.5.34 `string-contains?' - substring match
-------------------------------------------

Usage:  (*==* text match)
string-contains?:  Test to see if a string contains a substring.
"strstr(3)" will find an address.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM string-downcase,  Next: SCM string-downcase!,  Prev: SCM *==*,  Up: Common Functions

3.5.35 `string-downcase' - lower case a new string
--------------------------------------------------

Usage:  (string-downcase str)
Create a new SCM string containing the same text as the original, only
all the upper case letters are changed to lower case.

   Arguments:
str - input string


File: autogen.info,  Node: SCM string-downcase!,  Next: SCM *~,  Prev: SCM string-downcase,  Up: Common Functions

3.5.36 `string-downcase!' - make a string be lower case
-------------------------------------------------------

Usage:  (string-downcase! str)
Change to lower case all the characters in an SCM string.

   Arguments:
str - input/output string


File: autogen.info,  Node: SCM *~,  Next: SCM *~~,  Prev: SCM string-downcase!,  Up: Common Functions

3.5.37 `string-end-eqv-match?' - caseless regex ending
------------------------------------------------------

Usage:  (*~ text match)
string-end-eqv-match?:  Test to see if a string ends with a pattern.
Case is not significant.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM *~~,  Next: SCM *=,  Prev: SCM *~,  Up: Common Functions

3.5.38 `string-end-match?' - regex match end
--------------------------------------------

Usage:  (*~~ text match)
string-end-match?:  Test to see if a string ends with a pattern.  Case
is significant.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM *=,  Next: SCM *==,  Prev: SCM *~~,  Up: Common Functions

3.5.39 `string-ends-eqv?' - caseless string ending
--------------------------------------------------

Usage:  (*= text match)
string-ends-eqv?:  Test to see if a string ends with an equivalent
string.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM *==,  Next: SCM ==,  Prev: SCM *=,  Up: Common Functions

3.5.40 `string-ends-with?' - string ending
------------------------------------------

Usage:  (*== text match)
string-ends-with?:  Test to see if a string ends with a substring.
strcmp(3) returns zero for comparing the string ends.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM ==,  Next: SCM ~,  Prev: SCM *==,  Up: Common Functions

3.5.41 `string-equals?' - string matching
-----------------------------------------

Usage:  (== text match)
string-equals?:  Test to see if two strings exactly match.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM ~,  Next: SCM =,  Prev: SCM ==,  Up: Common Functions

3.5.42 `string-eqv-match?' - caseless regex match
-------------------------------------------------

Usage:  (~ text match)
string-eqv-match?:  Test to see if a string fully matches a pattern.
Case is not significant, but any character equivalences must be
expressed in your regular expression.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM =,  Next: SCM *~*,  Prev: SCM ~,  Up: Common Functions

3.5.43 `string-eqv?' - caseless string match
--------------------------------------------

Usage:  (= text match)
string-eqv?:  Test to see if two strings are equivalent.  `equivalent'
means the strings match, but without regard to character case and
certain characters are considered `equivalent'.  Viz., '-', '_' and '^'
are equivalent.  If the arguments are not strings, then the result of
the numeric comparison is returned.

   This is an overloaded operation.  If the arguments are not both
strings, then the query is passed through to `scm_num_eq_p()'.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM *~*,  Next: SCM *~~*,  Prev: SCM =,  Up: Common Functions

3.5.44 `string-has-eqv-match?' - caseless regex contains
--------------------------------------------------------

Usage:  (*~* text match)
string-has-eqv-match?:  Test to see if a string contains a pattern.
Case is not significant.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM *~~*,  Next: SCM ~~,  Prev: SCM *~*,  Up: Common Functions

3.5.45 `string-has-match?' - contained regex match
--------------------------------------------------

Usage:  (*~~* text match)
string-has-match?:  Test to see if a string contains a pattern.  Case
is significant.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM ~~,  Next: SCM ~*,  Prev: SCM *~~*,  Up: Common Functions

3.5.46 `string-match?' - regex match
------------------------------------

Usage:  (~~ text match)
string-match?:  Test to see if a string fully matches a pattern.  Case
is significant.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM ~*,  Next: SCM ~~*,  Prev: SCM ~~,  Up: Common Functions

3.5.47 `string-start-eqv-match?' - caseless regex start
-------------------------------------------------------

Usage:  (~* text match)
string-start-eqv-match?:  Test to see if a string starts with a pattern.
Case is not significant.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM ~~*,  Next: SCM =*,  Prev: SCM ~*,  Up: Common Functions

3.5.48 `string-start-match?' - regex match start
------------------------------------------------

Usage:  (~~* text match)
string-start-match?:  Test to see if a string starts with a pattern.
Case is significant.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM =*,  Next: SCM ==*,  Prev: SCM ~~*,  Up: Common Functions

3.5.49 `string-starts-eqv?' - caseless string start
---------------------------------------------------

Usage:  (=* text match)
string-starts-eqv?:  Test to see if a string starts with an equivalent
string.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM ==*,  Next: SCM string-substitute,  Prev: SCM =*,  Up: Common Functions

3.5.50 `string-starts-with?' - string starting
----------------------------------------------

Usage:  (==* text match)
string-starts-with?:  Test to see if a string starts with a substring.

   Arguments:
text - text to test for pattern
match - pattern/substring to search for


File: autogen.info,  Node: SCM string-substitute,  Next: SCM string-table-add,  Prev: SCM ==*,  Up: Common Functions

3.5.51 `string-substitute' - multiple global replacements
---------------------------------------------------------

Usage:  (string-substitute source match repl)
`match' and  `repl' may be either a single string or a list of strings.
Either way, they must have the same structure and number of elements.
For example, to replace all less than and all greater than characters,
do something like this:

     (string-substitute source
     ("&"     "<"    ">")
     ("&amp;" "&lt;" "&gt;"))

   Arguments:
source - string to transform
match - substring or substring list to be replaced
repl - replacement strings or substrings


File: autogen.info,  Node: SCM string-table-add,  Next: SCM string-table-add-ref,  Prev: SCM string-substitute,  Up: Common Functions

3.5.52 `string-table-add' - Add an entry to a string table
----------------------------------------------------------

Usage:  (string-table-add st-name str-val)
Check for a duplicate string and, if none, then insert a new string
into the string table.  In all cases, returns the character index of
the beginning of the string in the table.

   The returned index can be used in expressions like:
     string_array + <returned-value>
   that will yield the address of the first byte of the inserted
string.  See the `strtable.test' AutoGen test for a usage example.

   Arguments:
st-name - the name of the array of characters
str-val - the (possibly) new value to add


File: autogen.info,  Node: SCM string-table-add-ref,  Next: SCM string-table-new,  Prev: SCM string-table-add,  Up: Common Functions

3.5.53 `string-table-add-ref' - Add an entry to a string table, get reference
-----------------------------------------------------------------------------

Usage:  (string-table-add-ref st-name str-val)
Identical to string-table-add, except the value returned is the string
"st-name" '+' and the index returned by string-table-add.

   Arguments:
st-name - the name of the array of characters
str-val - the (possibly) new value to add


File: autogen.info,  Node: SCM string-table-new,  Next: SCM string-table-size,  Prev: SCM string-table-add-ref,  Up: Common Functions

3.5.54 `string-table-new' - create a string table
-------------------------------------------------

Usage:  (string-table-new st-name)
This function will create an array of characters.  The companion
functions, (*Note SCM string-table-add::, and *note SCM
emit-string-table::) will insert text and emit the populated table,
respectively.

   With these functions, it should be much easier to construct
structures containing string offsets instead of string pointers.  That
can be very useful when transmitting, storing or sharing data with
different address spaces.

Here is a brief example copied from the strtable.test test:

     [+ (string-table-new "scribble")
        (out-push-new)
        (define ix 0)
        (define ct 1)  +][+

     FOR str IN that was the week that was +][+
       (set! ct (+ ct 1))
       (set! ix (string-table-add "scribble" (get "str")))
     +]
         scribble + [+ (. ix) +],[+
     ENDFOR  +]
         NULL };
     [+ (out-suspend "main")
        (emit-string-table "scribble")
        (ag-fprintf 0 "\nchar const *ap[%d] = {" ct)
        (out-resume "main")
        (out-pop #t) +]

Some explanation:

I added the `(out-push-new)' because the string table text is diverted
into an output stream named, "scribble" and I want to have the string
table emitted before the string table references.  The string table
references are also emitted inside the `FOR' loop.  So, when the loop
is done, the current output is suspended under the name, "main" and the
"scribble" table is then emitted into the primary output.
(`emit-string-table' inserts its output directly into the current
output stream.  It does not need to be the last function in an AutoGen
macro block.)  Next I `ag-fprintf' the array-of-pointer declaration
directly into the current output.  Finally I restore the "main" output
stream and `(out-pop #t)'-it into the main output stream.

   Here is the result.  Note that duplicate strings are not repeated in
the string table:

     static char const scribble[18] =
         "that\0" "was\0"  "the\0"  "week\0";

     char const *ap[7] = {
         scribble + 0,
         scribble + 5,
         scribble + 9,
         scribble + 13,
         scribble + 0,
         scribble + 5,
         NULL };

   These functions use the global name space `stt-*' in addition to the
function names.

   Arguments:
st-name - the name of the array of characters


File: autogen.info,  Node: SCM string-table-size,  Next: SCM string->c-name!,  Prev: SCM string-table-new,  Up: Common Functions

3.5.55 `string-table-size' - print the current size of a string table
---------------------------------------------------------------------

Usage:  (string-table-size st-name)
Returns the current byte count of the string table.

   Arguments:
st-name - the name of the array of characters


File: autogen.info,  Node: SCM string->c-name!,  Next: SCM string-tr,  Prev: SCM string-table-size,  Up: Common Functions

3.5.56 `string->c-name!' - map non-name chars to underscore
-----------------------------------------------------------

Usage:  (string->c-name! str)
Change all the graphic characters that are invalid in a C name token
into underscores.  Whitespace characters are ignored.  Any other
character type (i.e. non-graphic and non-white) will cause a failure.

   Arguments:
str - input/output string


File: autogen.info,  Node: SCM string-tr,  Next: SCM string-tr!,  Prev: SCM string->c-name!,  Up: Common Functions

3.5.57 `string-tr' - convert characters with new result
-------------------------------------------------------

Usage:  (string-tr source match translation)
This is identical to `string-tr!', except that it does not over-write
the previous value.

   Arguments:
source - string to transform
match - characters to be converted
translation - conversion list


File: autogen.info,  Node: SCM string-tr!,  Next: SCM string-upcase,  Prev: SCM string-tr,  Up: Common Functions

3.5.58 `string-tr!' - convert characters
----------------------------------------

Usage:  (string-tr! source match translation)
This is the same as the `tr(1)' program, except the string to transform
is the first argument.  The second and third arguments are used to
construct mapping arrays for the transformation of the first argument.

   It is too bad this little program has so many different and
incompatible implementations!

   Arguments:
source - string to transform
match - characters to be converted
translation - conversion list


File: autogen.info,  Node: SCM string-upcase,  Next: SCM string-upcase!,  Prev: SCM string-tr!,  Up: Common Functions

3.5.59 `string-upcase' - upper case a new string
------------------------------------------------

Usage:  (string-upcase str)
Create a new SCM string containing the same text as the original, only
all the lower case letters are changed to upper case.

   Arguments:
str - input string


File: autogen.info,  Node: SCM string-upcase!,  Next: SCM sub-shell-str,  Prev: SCM string-upcase,  Up: Common Functions

3.5.60 `string-upcase!' - make a string be upper case
-----------------------------------------------------

Usage:  (string-upcase! str)
Change to upper case all the characters in an SCM string.

   Arguments:
str - input/output string


File: autogen.info,  Node: SCM sub-shell-str,  Next: SCM sum,  Prev: SCM string-upcase!,  Up: Common Functions

3.5.61 `sub-shell-str' - back quoted (sub-)shell string
-------------------------------------------------------

Usage:  (sub-shell-str string)
This function is substantially identical to `shell-str', except that
the quoting character is ``' and the "leave the escape alone" character
is `"'.

   Arguments:
string - string to transform


File: autogen.info,  Node: SCM sum,  Next: SCM version-compare,  Prev: SCM sub-shell-str,  Up: Common Functions

3.5.62 `sum' - sum of values in list
------------------------------------

Usage:  (sum list ...)
Compute the sum of the list of expressions.

   Arguments:
list - list of values.  Strings are converted to numbers


File: autogen.info,  Node: SCM version-compare,  Prev: SCM sum,  Up: Common Functions

3.5.63 `version-compare' - compare two version numbers
------------------------------------------------------

Usage:  (version-compare op v1 v2)
Converts v1 and v2 strings into 64 bit values and returns the result of
running 'op' on those values.  It assumes that the version is a 1 to 4
part dot-separated series of numbers.  Suffixes like, "5pre4" or
"5-pre4" will be interpreted as two numbers.  The first number ("5" in
this case) will be decremented and the number after the "pre" will be
added to 0xC000.  (Unless your platform is unable to support 64 bit
integer arithmetic.  Then it will be added to 0xC0.)  Consequently,
these yield true:
     (version-compare > "5.8.5"       "5.8.5-pre4")
     (version-compare > "5.8.5-pre10" "5.8.5-pre4")

   Arguments:
op - comparison operator
v1 - first version
v2 - compared-to version


File: autogen.info,  Node: native macros,  Next: output controls,  Prev: Common Functions,  Up: Template File

3.6 AutoGen Native Macros
=========================

This section describes the various AutoGen natively defined macros.
Unlike the Scheme functions, some of these macros are "block macros"
with a scope that extends through a terminating macro.  Block macros
must not overlap.  That is to say, a block macro started within the
scope of an encompassing block macro must have its matching end macro
appear before the encompassing block macro is either ended or
subdivided.

   The block macros are these:

`CASE'
     This macro has scope through the `ESAC' macro.  The scope is
     subdivided by `SELECT' macros.  You must have at least one
     `SELECT' macro.

`DEFINE'
     This macro has scope through the `ENDDEF' macro.  The defined user
     macro can never be a block macro.  This macro is extracted from
     the template before the template is processed.

`FOR'
     This macro has scope through the `ENDFOR' macro.

`IF'
     This macro has scope through the `ENDIF' macro.  The scope may be
     subdivided by `ELIF' and `ELSE' macros.  Obviously, there may be
     only one `ELSE' macro and it must be the last of these
     subdivisions.

`INCLUDE'
     This macro has the scope of the included file.  It is a block
     macro in the sense that the included file must not contain any
     incomplete block macros.

`WHILE'
     This macro has scope through the `ENDWHILE' macro.

* Menu:

* AGMacro syntax::   AutoGen Macro Syntax
* CASE::             CASE - Select one of several template blocks
* COMMENT::          COMMENT - A block of comment to be ignored
* DEFINE::           DEFINE - Define a user AutoGen macro
* ELIF::             ELIF - Alternate Conditional Template Block
* ELSE::             ELSE - Alternate Template Block
* ENDDEF::           ENDDEF - Ends a macro definition.
* ENDFOR::           ENDFOR - Terminates the `FOR' function template block
* ENDIF::            ENDIF - Terminate the `IF' Template Block
* ENDWHILE::         ENDWHILE - Terminate the `WHILE' Template Block
* ESAC::             ESAC - Terminate the `CASE' Template Block
* EXPR::             EXPR - Evaluate and emit an Expression
* FOR::              FOR - Emit a template block multiple times
* IF::               IF - Conditionally Emit a Template Block
* INCLUDE::          INCLUDE - Read in and emit a template block
* INVOKE::           INVOKE - Invoke a User Defined Macro
* SELECT::           SELECT - Selection block for CASE function
* UNKNOWN::          UNKNOWN - Either a user macro or a value name.
* WHILE::            WHILE - Conditionally loop over a Template Block


File: autogen.info,  Node: AGMacro syntax,  Next: CASE,  Up: native macros

3.6.1 AutoGen Macro Syntax
--------------------------

The general syntax is:

     [ { <native-macro-name> | <user-defined-name> } ] [ <arg> ... ]

The syntax for `<arg>' depends on the particular macro, but is
generally a full expression (*note expression syntax::).  Here are the
exceptions to that general rule:

  1. `INVOKE' macros, implicit or explicit, must be followed by a list
     of name/string value pairs.  The string values are simple
     expressions, as described above.

     That is, the `INVOKE' syntax is one of these two:
          <user-macro-name> [ <name> [ = <expression> ] ... ]

          INVOKE <name-expression> [ <name> [ = <expression> ] ... ]

  2. AutoGen FOR macros must be in one of three forms:

          FOR <name> [ <separator-string> ]

          FOR <name> (...Scheme expression list)

          FOR <name> IN <string-entry> [ ... ]
     where:
    `<name>'
          must be a simple name.

    `<separator-string>'
          is inserted between copies of the enclosed block.  Do not try
          to use "IN" as your separator string.  It won't work.

    `<string-entry>'
          is an entry in a list of strings.  "`<name>'" is assigned
          each value from the "`IN'" list before expanding the `FOR'
          block.

    `(...Scheme expression list)'
          is expected to contain one or more of the `for-from',
          `for-to', `for-by', and `for-sep' functions.  (*Note FOR::,
          and *Note AutoGen Functions::)

     The first two forms iterate over the `FOR' block if `<name>' is
     found in the AutoGen values.  The last form will create the AutoGen
     value named `<name>'.

  3. AutoGen `DEFINE' macros must be followed by a simple name.
     Anything after that is ignored.  Consequently, that "comment space"
     may be used to document any named values the macro expects to have
     set up as arguments.  *Note DEFINE::.

  4. The AutoGen `COMMENT', `ELSE', `ESAC' and the `END*' macros take
     no arguments and ignore everything after the macro name (e.g. see
     *Note COMMENT::)


File: autogen.info,  Node: CASE,  Next: COMMENT,  Prev: AGMacro syntax,  Up: native macros

3.6.2 CASE - Select one of several template blocks
--------------------------------------------------

The arguments are evaluated and converted to a string, if necessary.  A
simple name will be interpreted as an AutoGen value name and its value
will be used by the `SELECT' macros (see the example below and the
expression evaluation function, *note EXPR::).  The scope of the macro
is up to the matching `ESAC' macro.  Within the scope of a `CASE', this
string is matched against case selection macros.  There are sixteen
match macros that are derived from four different ways matches may be
performed, plus an "always true", "true if the AutoGen value was found",
and "true if no AutoGen value was found" matches.  The codes for the
nineteen match macros are formed as follows:

  1. Must the match start matching from the beginning of the string?
     If not, then the match macro code starts with an asterisk (`*').

  2. Must the match finish matching at the end of the string?  If not,
     then the match macro code ends with an asterisk (`*').

  3. Is the match a pattern match or a string comparison?  If a
     comparison, use an equal sign (`=').  If a pattern match, use a
     tilde (`~').

  4. Is the match case sensitive?  If alphabetic case is important,
     double the tilde or equal sign.

  5. Do you need a default match when none of the others match?  Use a
     single asterisk (`*').

  6. Do you need to distinguish between an empty string value and a
     value that was not found?  Use the non-existence test (`!E') before
     testing a full match against an empty string (`== ''').  There is
     also an existence test (`+E'), more for symmetry than for
     practical use.

For example:

     [+ CASE <full-expression> +]
     [+ ~~*  "[Tt]est" +]reg exp must match at start, not at end
     [+ ==   "TeSt"    +]a full-string, case sensitive compare
     [+ =    "TEST"    +]a full-string, case insensitive compare
     [+ !E             +]not exists - matches if no AutoGen value found
     [+ ==   ""        +]expression yielded a zero-length string
     [+ +E             +]exists - matches if there is any value result
     [+ *              +]always match - no testing
     [+ ESAC +]

   `<full-expression>' (*note expression syntax::) may be any
expression, including the use of apply-codes and value-names.  If the
expression yields a number, it is converted to a decimal string.

   These case selection codes have also been implemented as Scheme
expression functions using the same codes.  They are documented in this
texi doc as "string-*?" predicates (*note Common Functions::).


File: autogen.info,  Node: COMMENT,  Next: DEFINE,  Prev: CASE,  Up: native macros

3.6.3 COMMENT - A block of comment to be ignored
------------------------------------------------

This function can be specified by the user, but there will never be a
situation where it will be invoked at emit time.  The macro is actually
removed from the internal representation.

   If the native macro name code is `#', then the entire macro function
is treated as a comment and ignored.


File: autogen.info,  Node: DEFINE,  Next: ELIF,  Prev: COMMENT,  Up: native macros

3.6.4 DEFINE - Define a user AutoGen macro
------------------------------------------

This function will define a new macro.  You must provide a name for the
macro.  You do not specify any arguments, though the invocation may
specify a set of name/value pairs that are to be active during the
processing of the macro.

     [+ define foo +]
     ... macro body with macro functions ...
     [+ enddef +]
     ... [+ foo bar='raw text' baz=<<text expression>> +]

   Once the macro has been defined, this new macro can be invoked by
specifying the macro name as the first token after the start macro
marker.  Alternatively, you may make the invocation explicitly invoke a
defined macro by specifying `INVOKE' (*note INVOKE::) in the macro
invocation.  If you do that, the macro name can be computed with an
expression that gets evaluated every time the INVOKE macro is
encountered.

   Any remaining text in the macro invocation will be used to create new
name/value pairs that only persist for the duration of the processing of
the macro.  The expressions are evaluated the same way basic
expressions are evaluated.  *Note expression syntax::.

   The resulting definitions are handled much like regular definitions,
except:

  1. The values may not be compound.  That is, they may not contain
     nested name/value pairs.

  2. The bindings go away when the macro is complete.

  3. The name/value pairs are separated by whitespace instead of
     semi-colons.

  4. Sequences of strings are not concatenated.

     *NB:* The macro is extracted from the template as the template is
     scanned.  You cannot conditionally define a macro by enclosing it
     in an `IF'/`ENDIF' (*note IF::) macro pair.  If you need to
     dynamically select the format of a `DEFINE'd macro, then put the
     flavors into separate template files that simply define macros.
     `INCLUDE' (*note INCLUDE::) the appropriate template when you have
     computed which you need.

   Due to this, it is acceptable and even a good idea to place all the
`DEFINE' macros at the end of the template.  That puts the main body of
the template at the beginning of the file.


File: autogen.info,  Node: ELIF,  Next: ELSE,  Prev: DEFINE,  Up: native macros

3.6.5 ELIF - Alternate Conditional Template Block
-------------------------------------------------

This macro must only appear after an `IF' function, and before any
associated `ELSE' or `ENDIF' functions.  It denotes the start of an
alternate template block for the `IF' function.  Its expression
argument is evaluated as are the arguments to `IF'.  For a complete
description *Note IF::.


File: autogen.info,  Node: ELSE,  Next: ENDDEF,  Prev: ELIF,  Up: native macros

3.6.6 ELSE - Alternate Template Block
-------------------------------------

This macro must only appear after an `IF' function, and before the
associated `ENDIF' function.  It denotes the start of an alternate
template block for the `IF' function.  For a complete description *Note
IF::.


File: autogen.info,  Node: ENDDEF,  Next: ENDFOR,  Prev: ELSE,  Up: native macros

3.6.7 ENDDEF - Ends a macro definition.
---------------------------------------

This macro ends the `DEFINE' function template block.  For a complete
description *Note DEFINE::.


File: autogen.info,  Node: ENDFOR,  Next: ENDIF,  Prev: ENDDEF,  Up: native macros

3.6.8 ENDFOR - Terminates the `FOR' function template block
-----------------------------------------------------------

This macro ends the `FOR' function template block.  For a complete
description *Note FOR::.


File: autogen.info,  Node: ENDIF,  Next: ENDWHILE,  Prev: ENDFOR,  Up: native macros

3.6.9 ENDIF - Terminate the `IF' Template Block
-----------------------------------------------

This macro ends the `IF' function template block.  For a complete
description *Note IF::.


File: autogen.info,  Node: ENDWHILE,  Next: ESAC,  Prev: ENDIF,  Up: native macros

3.6.10 ENDWHILE - Terminate the `WHILE' Template Block
------------------------------------------------------

This macro ends the `WHILE' function template block.  For a complete
description *Note WHILE::.


File: autogen.info,  Node: ESAC,  Next: EXPR,  Prev: ENDWHILE,  Up: native macros

3.6.11 ESAC - Terminate the `CASE' Template Block
-------------------------------------------------

This macro ends the `CASE' function template block.  For a complete
description, *Note CASE::.


File: autogen.info,  Node: EXPR,  Next: FOR,  Prev: ESAC,  Up: native macros

3.6.12 EXPR - Evaluate and emit an Expression
---------------------------------------------

This macro does not have a name to cause it to be invoked explicitly,
though if a macro starts with one of the apply codes or one of the
simple expression markers, then an expression macro is inferred.  The
result of the expression evaluation (*note expression syntax::) is
written to the current output.


File: autogen.info,  Node: FOR,  Next: IF,  Prev: EXPR,  Up: native macros

3.6.13 FOR - Emit a template block multiple times
-------------------------------------------------

This macro has a slight variation on the standard syntax:
     FOR <value-name> [ <separator-string> ]

     FOR <value-name> (...Scheme expression list)

     FOR <value-name> IN "string" [ ... ]

   Other than for the last form, the first macro argument must be the
name of an AutoGen value.  If there is no value associated with the
name, the `FOR' template block is skipped entirely.  The scope of the
`FOR' macro extends to the corresponding `ENDFOR' macro.  The last form
will create an array of string values named `<value-name>' that only
exists within the context of this `FOR' loop.  With this form, in order
to use a `separator-string', you must code it into the end of the
template block using the `(last-for?)' predicate function (*note SCM
last-for?::).

   If there are any arguments after the `value-name', the initial
characters are used to determine the form.  If the first character is
either a semi-colon (`;') or an opening parenthesis (`('), then it is
presumed to be a Scheme expression containing the FOR macro specific
functions `for-from', `for-by', `for-to', and/or `for-sep'.  *Note
AutoGen Functions::.  If it consists of an '`i'' an '`n'' and separated
by white space from more text, then the `FOR x IN' form is processed.
Otherwise, the remaining text is presumed to be a string for inserting
between each iteration of the loop.  This string will be emitted one
time less than the number of iterations of the loop.  That is, it is
emitted after each loop, excepting for the last iteration.

   If the from/by/to functions are invoked, they will specify which
copies of the named value are to be processed.  If there is no copy of
the named value associated with a particular index, the `FOR' template
block will be instantiated anyway.  The template must use methods for
detecting missing definitions and emitting default text.  In this
fashion, you can insert entries from a sparse or non-zero based array
into a dense, zero based array.

   *NB:* the `for-from', `for-to', `for-by' and `for-sep' functions are
disabled outside of the context of the `FOR' macro.  Likewise, the
`first-for', `last-for' and `for-index' functions are disabled outside
of the range of a `FOR' block.

   *Also:* the `<value-name>' must be a single level name, not a
compound name (*note naming values::).

     [+FOR var (for-from 0) (for-to <number>) (for-sep ",") +]
     ... text with `var'ious substitutions ...[+
     ENDFOR var+]

this will repeat the `... text with `var'ious substitutions ...'
<number>+1 times.  Each repetition, except for the last, will have a
comma `,' after it.

     [+FOR var ",\n" +]
     ... text with `var'ious substitutions ...[+
     ENDFOR var +]

This will do the same thing, but only for the index values of `var'
that have actually been defined.


File: autogen.info,  Node: IF,  Next: INCLUDE,  Prev: FOR,  Up: native macros

3.6.14 IF - Conditionally Emit a Template Block
-----------------------------------------------

Conditional block.  Its arguments are evaluated (*note EXPR::) and if
the result is non-zero or a string with one or more bytes, then the
condition is true and the text from that point until a matched `ELIF',
`ELSE' or `ENDIF' is emitted.  `ELIF' introduces a conditional
alternative if the `IF' clause evaluated FALSE and `ELSE' introduces an
unconditional alternative.

     [+IF <full-expression> +]
     emit things that are for the true condition[+

     ELIF <full-expression-2> +]
     emit things that are true maybe[+

     ELSE "This may be a comment" +]
     emit this if all but else fails[+

     ENDIF "This may *also* be a comment" +]

`<full-expression>' may be any expression described in the `EXPR'
expression function, including the use of apply-codes and value-names.
If the expression yields an empty string, it is interpreted as false.


File: autogen.info,  Node: INCLUDE,  Next: INVOKE,  Prev: IF,  Up: native macros

3.6.15 INCLUDE - Read in and emit a template block
--------------------------------------------------

The entire contents of the named file is inserted at this point.  The
contents of the file are processed for macro expansion.  The arguments
are eval-ed, so you may compute the name of the file to be included.
The included file must not contain any incomplete function blocks.
Function blocks are template text beginning with any of the macro
functions `CASE', `DEFINE', `FOR', `IF' and `WHILE'; extending through
their respective terminating macro functions.


File: autogen.info,  Node: INVOKE,  Next: SELECT,  Prev: INCLUDE,  Up: native macros

3.6.16 INVOKE - Invoke a User Defined Macro
-------------------------------------------

User defined macros may be invoked explicitly or implicitly.  If you
invoke one implicitly, the macro must begin with the name of the
defined macro.  Consequently, this may *not* be a computed value.  If
you explicitly invoke a user defined macro, the macro begins with the
macro name `INVOKE' followed by a basic expression that must yield a
known user defined macro.  A macro name _must_ be found, or AutoGen
will issue a diagnostic and exit.

   Arguments are passed to the invoked macro by name.  The text
following the macro name must consist of a series of names each of
which is followed by an equal sign (`=') and a basic expression that
yields a string.

   The string values may contain template macros that are parsed the
first time the macro is processed and evaluated again every time the
macro is evaluated.


File: autogen.info,  Node: SELECT,  Next: UNKNOWN,  Prev: INVOKE,  Up: native macros

3.6.17 SELECT - Selection block for CASE function
-------------------------------------------------

This macro selects a block of text by matching an expression against
the sample text expression evaluated in the `CASE' macro.  *Note CASE::.

   You do not specify a `SELECT' macro with the word "select".
Instead, you must use one of the 19 match operators described in the
`CASE' macro description.


File: autogen.info,  Node: UNKNOWN,  Next: WHILE,  Prev: SELECT,  Up: native macros

3.6.18 UNKNOWN - Either a user macro or a value name.
-----------------------------------------------------

The macro text has started with a name not known to AutoGen.  If, at run
time, it turns out to be the name of a defined macro, then that macro is
invoked.  If it is not, then it is a conditional expression that is
evaluated only if the name is defined at the time the macro is invoked.

   You may not specify `UNKNOWN' explicitly.


File: autogen.info,  Node: WHILE,  Prev: UNKNOWN,  Up: native macros

3.6.19 WHILE - Conditionally loop over a Template Block
-------------------------------------------------------

Conditionally repeated block.  Its arguments are evaluated (*note
EXPR::) and as long as the result is non-zero or a string with one or
more bytes, then the condition is true and the text from that point
until a matched `ENDWHILE' is emitted.

     [+WHILE <full-expression> +]
     emit things that are for the true condition[+

     ENDWHILE +]

`<full-expression>' may be any expression described in the `EXPR'
expression function, including the use of apply-codes and value-names.
If the expression yields an empty string, it is interpreted as false.


File: autogen.info,  Node: output controls,  Prev: native macros,  Up: Template File

3.7 Redirecting Output
======================

AutoGen provides a means for redirecting the template output to
different files or, in `M4' parlance, to various diversions.  It is
accomplished by providing a set of Scheme functions named `out-*'
(*note AutoGen Functions::).

`out-push-new (*note SCM out-push-new::)'
     This allows you to logically "push" output files onto a stack.  If
     you supply a string name, then a file by that name is created to
     hold the output.  If you do not supply a name, then the text is
     written to a scratch pad and retrieved by passing a "`#t'" argument
     to the `out-pop' (*note SCM out-pop::) function.

`out-pop (*note SCM out-pop::)'
     This function closes the current output file and resumes output to
     the next one in the stack.  At least one output must have been
     pushed onto the output stack with the `out-push-new' (*note SCM
     out-push-new::) function.  If "`#t'" is passed in as an argument,
     then the entire contents of the diversion (or file) is returned.

`out-suspend (*note SCM out-suspend::)'
     This function does not close the current output, but instead sets
     it aside for resumption by the given name with `out-resume'.  The
     current output must have been pushed on the output queue with
     `out-push-new' (*note SCM out-push-new::).

`out-resume (*note SCM out-resume::)'
     This will put a named file descriptor back onto the top of stack
     so that it becomes the current output again.

`out-switch (*note SCM out-switch::)'
     This closes the current output and creates a new file, purging any
     preexisting one.  This is a shortcut for "pop" followed by "push",
     but this can also be done at the base level.

`out-move (*note SCM out-move::)'
     Renames the current output file without closing it.

   There are also several functions for determining the output status.
*Note AutoGen Functions::.


File: autogen.info,  Node: Augmenting AutoGen,  Next: autogen Invocation,  Prev: Template File,  Up: Top

4 Augmenting AutoGen Features
*****************************

AutoGen was designed to be simple to enhance.  You can do it by
providing shell commands, Guile/Scheme macros or callout functions that
can be invoked as a Guile macro.  Here is how you do these.

* Menu:

* shell commands::       Shell Output Commands
* guile macros::         Guile Macros
* guile callouts::       Guile Callout Functions
* AutoGen macros::       AutoGen Macros


File: autogen.info,  Node: shell commands,  Next: guile macros,  Up: Augmenting AutoGen

4.1 Shell Output Commands
=========================

Shell commands are run inside of a server process.  This means that,
unlike `make', context is kept from one command to the next.
Consequently, you can define a shell function in one place inside of
your template and invoke it in another.  You may also store values in
shell variables for later reference.  If you load functions from a file
containing shell functions, they will remain until AutoGen exits.

   If your shell script should determine that AutoGen should stop
processing, the recommended method for stopping AutoGen is:
     die "some error text"

That is a shell function added by AutoGen.  It will send a SIGTERM to
autogen and exit from the "persistent" shell.


File: autogen.info,  Node: guile macros,  Next: guile callouts,  Prev: shell commands,  Up: Augmenting AutoGen

4.2 Guile Macros
================

Guile also maintains context from one command to the next.  This means
you may define functions and variables in one place and reference them
elsewhere.  You also may load Guile macro definitions from a Scheme
file by using the `--load-scheme' command line option (*note autogen
load-scheme::).  Beware, however, that the AutoGen specific scheme
functions have not been loaded at this time, so though you may define
functions that reference them, do not invoke the AutoGen functions at
this time.

   If your Scheme script should determine that AutoGen should stop
processing, the recommended method for stopping AutoGen is:
     (error "some error text")


File: autogen.info,  Node: guile callouts,  Next: AutoGen macros,  Prev: guile macros,  Up: Augmenting AutoGen

4.3 Guile Callout Functions
===========================

Callout functions must be registered with Guile to work.  This can be
accomplished either by putting your routines into a shared library that
contains a `void scm_init( void )' routine that registers these
routines, or by building them into AutoGen.

   To build them into AutoGen, you must place your routines in the
source directory and name the files `exp*.c'.  You also must have a
stylized comment that `getdefs' can find that conforms to the following:

     /*=gfunc <function-name>
      *
      *  what:    <short one-liner>
      *  general_use:
      *  string:  <invocation-name-string>
      *  exparg:  <name>, <description> [, ['optional'] [, 'list']]
      *  doc:     A long description telling people how to use
      *           this function.
     =*/
     SCM
     ag_scm_<function-name>( SCM arg_name[, ...] )
     { <code> }

`gfunc'
     You must have this exactly thus.

`<function-name>'
     This must follow C syntax for variable names

`<short one-liner>'
     This should be about a half a line long.  It is used as a
     subsection title in this document.

`general_use:'
     You must supply this unless you are an AutoGen maintainer and are
     writing a function that queries or modifies the state of AutoGen.

`<invocation-name-string>'
     Normally, the `function-name' string will be transformed into a
     reasonable invocation name.  However, that is not always true.  If
     the result does not suit your needs, then supply an alternate
     string.

`exparg:'
     You must supply one for each argument to your function.  All
     optional arguments must be last.  The last of the optional
     arguments may be a list, if you choose.

`doc:'
     Please say something meaningful.

`[, ...]'
     Do not actually specify an ANSI ellipsis here.  You must provide
     for all the arguments you specified with `exparg'.

   See the Guile documentation for more details.  More information is
also available in a large comment at the beginning of the
`agen5/snarf.tpl' template file.


File: autogen.info,  Node: AutoGen macros,  Prev: guile callouts,  Up: Augmenting AutoGen

4.4 AutoGen Macros
==================

There are two kinds  those you define yourself and AutoGen native.  The
user-defined macros may be defined in your templates or loaded with the
`--lib-template' option (See *Note DEFINE:: and  *Note autogen
lib-template::).

   As for AutoGen native macros, do not add any. It is easy to do, but I
won't like it.  The basic functions needed to accomplish looping over
and selecting blocks of text have proved to be sufficient over a period
of several years.  New text transformations can be easily added via any
of the AutoGen extension methods, as discussed above.


File: autogen.info,  Node: autogen Invocation,  Next: Installation,  Prev: Augmenting AutoGen,  Up: Top

5 Invoking autogen
******************

AutoGen creates text files from templates using external definitions.
The definitions file (`<def-file>') can be specified with the
`definitions' option or as the command argument, but not both.
Omitting it or specifying `-' will result in reading definitions from
standard input.

   The output file names are based on the template, but generally use
the base name of the definition file.  If standard in is read for the
definitions, then `stdin' will be used for that base name.  The
suffixes to the base name are gotten from the template.  However, the
template file may specify the entire output file name.  The generated
files are always created in the current directory.  If you need to
place output in an alternate directory, `cd' to that directory and use
the `-templ_dirs' option to search the original directory.

   `loop-limit' is used in debugging to stop runaway expansions.

   This chapter was generated by *AutoGen*, the aginfo template and the
option descriptions for the `autogen' program.  It documents the
autogen usage text and option meanings.

   This software is released under the GNU General Public License.

* Menu:

* autogen usage::                  autogen usage help (-?)
* autogen base-name::              base-name option (-b)
* autogen define::                 define option (-D)
* autogen definitions::            definitions option
* autogen equate::                 equate option
* autogen lib-template::           lib-template option (-l)
* autogen load-functions::         load-functions option (-F)
* autogen load-scheme::            load-scheme option (-S)
* autogen loop-limit::             loop-limit option
* autogen no-fmemopen::            no-fmemopen option (-m)
* autogen override-tpl::           override-tpl option (-T)
* autogen select-suffix::          select-suffix option (-o)
* autogen short-help::             short-help option (-h)
* autogen show-defs::              show-defs option
* autogen skip-suffix::            skip-suffix option (-s)
* autogen source-time::            source-time option
* autogen templ-dirs::             templ-dirs option (-L)
* autogen timeout::                timeout option (-t)
* autogen trace-out::              trace-out option
* autogen trace::                  trace option
* autogen undefine::               undefine option (-U)
* autogen writable::               writable option


File: autogen.info,  Node: autogen usage,  Next: autogen base-name,  Up: autogen Invocation

5.1 autogen usage help (-?)
===========================

This is the automatically generated usage text for autogen:

autogen (GNU AutoGen) - The Automated Program Generator - Ver. 5.9pre1
USAGE:  autogen [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [ <def-file> ]
  Flg Arg Option-Name    Description
   -L Str templ-dirs     Template search directory list
                                - may appear multiple times
   -T Str override-tpl   Override template file
                                - may not be preset
   -l Str lib-template   Library template file
                                - may appear multiple times
   -b Str base-name      Base name for output file(s)
                                - may not be preset
      Str definitions    Definitions input file
                                - disabled as --no-definitions
                                - enabled by default
                                - may not be preset
   -S Str load-scheme    Scheme code file to load
   -F Str load-functions Load scheme function library
   -s Str skip-suffix    Omit the file with this suffix
                                - may not be preset
                                - may appear multiple times
   -o opt select-suffix  specify this output suffix
                                - may not be preset
                                - may appear multiple times
      no  source-time    set mod times to latest source
                                - disabled as --no-source-time
   -m no  no-fmemopen    Do not use in-mem streams
      Str equate         characters considered equivalent
      no  writable       Allow output files to be writable
                                - disabled as --not-writable
                                - may not be preset

The following options are often useful while debugging new templates:

  Flg Arg Option-Name    Description
      Num loop-limit     Limit on increment loops
                                  it must lie in one of the ranges:
                                  -1 exactly, or
                                  1 to 16777216
   -t Num timeout        Time limit for servers
                                  it must lie in the range: 0 to 3600
      KWd trace          tracing level of detail
      Str trace-out      tracing output file or filter

These options can be used to control what gets processed
in the definitions files and template files.

  Flg Arg Option-Name    Description
   -D Str define         name to add to definition list
                                - may appear multiple times
   -U Str undefine       definition list removal pattern
                                - an alternate for define

The following options are commonly used and are provided and supported
by AutoOpts:

  Flg Arg Option-Name    Description
   -h no  short-help     Get short help text without an error exit
                                - may not be preset

version and help options:

  Flg Arg Option-Name    Description
   -v opt version        Output version information and exit
   -? no  help           Display usage information and exit
   -! no  more-help      Extended usage information passed thru pager
   -> opt save-opts      Save the option state to a config file
   -< Str load-opts      Load options from a config file
                                - disabled as --no-load-opts
                                - may appear multiple times

Options are specified by doubled hyphens and their name
or by a single hyphen and the flag character.

AutoGen creates text files from templates using external definitions.

The following option preset mechanisms are supported:
 - reading file /dev/null
 - reading file /home/bkorb/ag/ag/agen5/.autogenrc
 - examining environment variables named AUTOGEN_*

The valid "trace" option keywords are:
  nothing server-shell templates block-macros expressions everything

The definitions file (`<def-file>') can be specified with the
`definitions' option or as the command argument, but not both.
Omitting it or specifying `-' will result in reading definitions from
standard input.

The output file names are based on the template, but generally use the
base name of the definition file.  If standard in is read for the
definitions, then `stdin' will be used for that base name.  The
suffixes to the base name are gotten from the template.  However, the
template file may specify the entire output file name.  The generated
files are always created in the current directory.  If you need to
place output in an alternate directory, `cd' to that directory and use
the `--templ_dirs' option to search the original directory.

`loop-limit' is used in debugging to stop runaway expansions.

please send bug reports to:  autogen-users@lists.sourceforge.net


File: autogen.info,  Node: autogen templ-dirs,  Next: autogen timeout,  Prev: autogen source-time,  Up: autogen Invocation

5.2 templ-dirs option (-L)
==========================

This is the "template search directory list" option.

   This option has some usage constraints.  It:
   * may appear an unlimited number of times.

   Add a directory to the list of directories to search when opening a
template, either as the primary template or an included one.  The last
entry has the highest priority in the search list.  That is to say,
they are searched in reverse order.


File: autogen.info,  Node: autogen override-tpl,  Next: autogen select-suffix,  Prev: autogen no-fmemopen,  Up: autogen Invocation

5.3 override-tpl option (-T)
============================

This is the "override template file" option.

   This option has some usage constraints.  It:
   * may not be preset with environment variables or in initialization
     (rc) files.

   Definition files specify the standard template that is to be
expanded.  This option will override that name and expand a different
template.


File: autogen.info,  Node: autogen lib-template,  Next: autogen load-functions,  Prev: autogen equate,  Up: autogen Invocation

5.4 lib-template option (-l)
============================

This is the "library template file" option.

   This option has some usage constraints.  It:
   * may appear an unlimited number of times.

   DEFINE macros are saved from this template file for use in processing
the main macro file.  Template text aside from the DEFINE macros is is
ignored.


File: autogen.info,  Node: autogen base-name,  Next: autogen define,  Prev: autogen usage,  Up: autogen Invocation

5.5 base-name option (-b)
=========================

This is the "base name for output file(s)" option.

   This option has some usage constraints.  It:
   * may not be preset with environment variables or in initialization
     (rc) files.

   A template may specify the exact name of the output file.  Normally,
it does not.  Instead, the name is composed of the base name of the
definitions file with suffixes appended.  This option will override the
base name derived from the definitions file name.  This is required if
there is no definitions file and advisable if definitions are being
read from stdin.  If the definitions are being read from standard in,
the base name defaults to `stdin'.  Any leading directory components in
the name will be silently removed.  If you wish the output file to
appear in a particular directory, it is recommended that you "cd" into
that directory first, or use directory names in the format specification
for the output suffix lists, *Note pseudo macro::.


File: autogen.info,  Node: autogen definitions,  Next: autogen equate,  Prev: autogen define,  Up: autogen Invocation

5.6 definitions option
======================

This is the "definitions input file" option.

   This option has some usage constraints.  It:
   * is enabled by default.

   * may not be preset with environment variables or in initialization
     (rc) files.

   Use this argument to specify the input definitions file with a
command line option.  If you do not specify this option, then there
must be a command line argument that specifies the file, even if only
to specify stdin with a hyphen (`-').  Specify, `--no-definitions' when
you wish to process a template without any active AutoGen definitions.\n


File: autogen.info,  Node: autogen load-scheme,  Next: autogen loop-limit,  Prev: autogen load-functions,  Up: autogen Invocation

5.7 load-scheme option (-S)
===========================

This is the "scheme code file to load" option.  Use this option to
pre-load Scheme scripts into the Guile interpreter before template
processing begins.  Please note that the AutoGen specific functions are
not loaded until after argument processing.  So, though they may be
specified in lambda functions you define, they may not be invoked until
after option processing is complete.


File: autogen.info,  Node: autogen load-functions,  Next: autogen load-scheme,  Prev: autogen lib-template,  Up: autogen Invocation

5.8 load-functions option (-F)
==============================

This is the "load scheme function library" option.

   This option has some usage constraints.  It:
   * must be compiled in by defining `HAVE_DLOPEN' during the
     compilation.

   This option is used to load Guile-scheme functions.  The
automatically called initialization routine `scm_init' must be used to
register these routines or data.  This routine can be generated by
using the following command and the `snarf.tpl' template.  Read the
introductory comment in `snarf.tpl' to see what the `getdefs(1AG)'
comment must contain.

   First, create a config file for `getdefs', and then invoke `getdefs'
loading that file:
    cat > getdefs.cfg <<EOF
    subblock    exparg=arg_name,arg_desc,arg_optional,arg_list
    defs-to-get gfunc
    template    snarf
    srcfile
    linenum
    assign      group = name_of_some_group
    assign      init  = _init
    EOF

    getdefs load=getdefs.cfg <<source-file-list>>

Note, however, that your functions must be named:

    name_of_some_group_scm_<<function_name>>(...)

so you may wish to use a shorter group name.


File: autogen.info,  Node: autogen skip-suffix,  Next: autogen source-time,  Prev: autogen show-defs,  Up: autogen Invocation

5.9 skip-suffix option (-s)
===========================

This is the "omit the file with this suffix" option.

   This option has some usage constraints.  It:
   * may appear an unlimited number of times.

   * may not be preset with environment variables or in initialization
     (rc) files.

   Occasionally, it may not be desirable to produce all of the output
files specified in the template.  (For example, only the `.h' header
file, but not the `.c' program text.)  To do this specify
`--skip-suffix=c' on the command line.


File: autogen.info,  Node: autogen select-suffix,  Next: autogen short-help,  Prev: autogen override-tpl,  Up: autogen Invocation

5.10 select-suffix option (-o)
==============================

This is the "specify this output suffix" option.

   This option has some usage constraints.  It:
   * may appear an unlimited number of times.

   * may not be preset with environment variables or in initialization
     (rc) files.

   If you wish to override the suffix specifications in the template,
you can use one or more copies of this option.  See the suffix
specification in the *Note pseudo macro:: section of the info doc.


File: autogen.info,  Node: autogen source-time,  Next: autogen templ-dirs,  Prev: autogen skip-suffix,  Up: autogen Invocation

5.11 source-time option
=======================

This is the "set mod times to latest source" option.  If you stamp your
output files with the `DNE' macro output, then your output files will
always be different, even if the content has not really changed.  If
you use this option, then the modification time of the output files
will change only if the input files change.  This will help reduce
unneeded builds.


File: autogen.info,  Node: autogen no-fmemopen,  Next: autogen override-tpl,  Prev: autogen loop-limit,  Up: autogen Invocation

5.12 no-fmemopen option (-m)
============================

This is the "do not use in-mem streams" option.

   This option has some usage constraints.  It:
   * must be compiled in by defining `ENABLE_FMEMOPEN' during the
     compilation.

   If the local C library supports "`fopencookie(3GNU)'", or
"`funopen(3BSD)'" then AutoGen prefers to use in-memory stream buffer
opens instead of anonymous files.  This may lead to problems if there
is a shortage of virtual memory.  If, for a particular application, you
run out of memory, then specify this option.  This is unlikely in a
modern virtual memory environment.


File: autogen.info,  Node: autogen equate,  Next: autogen lib-template,  Prev: autogen definitions,  Up: autogen Invocation

5.13 equate option
==================

This is the "characters considered equivalent" option.  This option
will alter the list of characters considered equivalent.  The default
are the three characters, "_-^".  (The last is conventional on a
Tandem/HP-NonStop, and I used to do a lot of work on Tandems.)


File: autogen.info,  Node: autogen writable,  Prev: autogen undefine,  Up: autogen Invocation

5.14 writable option
====================

This is the "allow output files to be writable" option.

   This option has some usage constraints.  It:
   * may not be preset with environment variables or in initialization
     (rc) files.

   This option will leave output files writable.  Normally, output
files are read-only.


File: autogen.info,  Node: autogen loop-limit,  Next: autogen no-fmemopen,  Prev: autogen load-scheme,  Up: autogen Invocation

5.15 loop-limit option
======================

This is the "limit on increment loops" option.  This option prevents
runaway loops.  For example, if you accidentally specify, "FOR x
(for-from 1) (for-to -1) (for-by 1)", it will take a long time to
finish.  If you do have more than 256 entries in tables, you will need
to specify a new limit with this option.


File: autogen.info,  Node: autogen timeout,  Next: autogen trace-out,  Prev: autogen templ-dirs,  Up: autogen Invocation

5.16 timeout option (-t)
========================

This is the "time limit for servers" option.

   This option has some usage constraints.  It:
   * must be compiled in by defining `SHELL_ENABLED' during the
     compilation.

   AutoGen works with a shell server process.  Most normal commands will
complete in less than 10 seconds.  If, however, your commands need more
time than this, use this option.

   The valid range is 0 to 3600 seconds (1 hour).  Zero will disable
the server time limit.


File: autogen.info,  Node: autogen trace,  Next: autogen undefine,  Prev: autogen trace-out,  Up: autogen Invocation

5.17 trace option
=================

This is the "tracing level of detail" option.

   This option has some usage constraints.  It:
   * This option takes a keyword as its argument.  The argument sets an
     enumeration value that can be tested by comparing the option value
     macro (OPT_VALUE_TRACE).  The available keywords are:
         nothing      server-shell templates
         block-macros expressions  everything

   This option will cause AutoGen to display a trace of its template
processing.  There are six levels, each level including messages from
the previous levels:

`nothing'
     Does no tracing at all (default)

`server-shell'
     Traces all input and output to the server shell.  This includes a
     shell "independent" initialization script about 30 lines long.
     Its output is discarded and not inserted into any template.

`templates'
     Traces the invocation of `DEFINE'd macros and `INCLUDE's

`block-macros'
     Traces all block macros.  The above, plus `IF', `FOR', `CASE' and
     `WHILE'.

`expressions'
     Displays the results of expression evaluations.

`everything'
     Displays the invocation of every AutoGen macro, even `TEXT' macros
     (i.e. the text outside of macro quotes).


File: autogen.info,  Node: autogen trace-out,  Next: autogen trace,  Prev: autogen timeout,  Up: autogen Invocation

5.18 trace-out option
=====================

This is the "tracing output file or filter" option.  The output
specified may be either a file name, or, if the option argument begins
with the `pipe' operator (`|'), a command that will receive the tracing
output as standard in.  For example, `--traceout='| less'' will run the
trace output through the `less' program.


File: autogen.info,  Node: autogen show-defs,  Next: autogen skip-suffix,  Prev: autogen short-help,  Up: autogen Invocation

5.19 show-defs option
=====================

This is the "show the definition tree" option.

   This option has some usage constraints.  It:
   * must be compiled in by defining `DEBUG_ENABLED' during the
     compilation.

   * may not be preset with environment variables or in initialization
     (rc) files.

   This will print out the complete definition tree before processing
the template.


File: autogen.info,  Node: autogen define,  Next: autogen definitions,  Prev: autogen base-name,  Up: autogen Invocation

5.20 define option (-D)
=======================

This is the "name to add to definition list" option.

   This option has some usage constraints.  It:
   * may appear an unlimited number of times.

   The AutoGen define names are used for the following purposes:

  1. Sections of the AutoGen definitions may be enabled or disabled by
     using C-style #ifdef and #ifndef directives.

  2. When defining a value for a name, you may specify the index for a
     particular value.  That index may be a literal value, a define
     option or a value #define-d in the definitions themselves.

  3. The name of a file may be prefixed with `$NAME/'.  The `$NAME'
     part of the name string will be replaced with the define-d value
     for `NAME'.

  4. When AutoGen is finished loading the definitions, the defined
     values are exported to the environment with, `putenv(3)'.  These
     values can then be used in shell scripts with `${NAME}' references
     and in templates with `(getenv "NAME")'.

  5. While processing a template, you may specify an index to retrieve
     a specific value.  That index may also be a define-d value.


File: autogen.info,  Node: autogen undefine,  Next: autogen writable,  Prev: autogen trace,  Up: autogen Invocation

5.21 undefine option (-U)
=========================

This is the "definition list removal pattern" option.

   This option has some usage constraints.  It:
   * may appear an unlimited number of times.

   * may not be preset with environment variables or in initialization
     (rc) files.

   Just like 'C', AutoGen uses `#ifdef/#ifndef' preprocessing
directives.  This option will cause the matching names to be removed
from the list of defined values.


File: autogen.info,  Node: autogen short-help,  Next: autogen show-defs,  Prev: autogen select-suffix,  Up: autogen Invocation

5.22 short-help option (-h)
===========================

This is the "get short help text without an error exit" option.

   This option has some usage constraints.  It:
   * may not be preset with environment variables or in initialization
     (rc) files.

   This option specifies that the abbreviated usage text should be
emitted.


File: autogen.info,  Node: Installation,  Next: AutoOpts,  Prev: autogen Invocation,  Up: Top

6 Configuring and Installing
****************************

* Menu:

* configuring::    Configuring AutoGen
* AutoGen CGI::    AutoGen as a CGI server
* signal names::   Signal Names
* installing::     Installing AutoGen


File: autogen.info,  Node: configuring,  Next: AutoGen CGI,  Up: Installation

6.1 Configuring AutoGen
=======================

AutoGen is configured and built using Libtool, Automake and Autoconf.
Consequently, you can install it wherever you wish using the various
`--prefix' options.  To the various configuration options supplied by
these tools, AutoGen adds a few of its own:

`--disable-shell'
     AutoGen is now capable of acting as a CGI forms server, *Note
     AutoGen CGI::.  As such, it will gather its definitions using
     either `GET' or `POST' methods.  All you need to do is have a
     template named `cgi.tpl' handy or specify a different one with a
     command line option.

     However, doing this without disabling the server shell brings
     considerable risk.  If you were to pass user input to a script
     that contained, say, the classic "``rm -rf /`'", you might have a
     problem.  This configuration option will cause shell template
     commands to simply return the command string as the result.  No
     mistakes.  Much safer.  Strongly recommended.  The default is to
     have server shell scripting enabled.

     Disabling the shell will have some build side effects, too.

        * Many of the make check tests will fail, since they assume a
          working server shell.

        * The getdefs and columns programs are not built.  The options
          are distributed as definition files and they cannot be
          expanded with a shell-disabled AutoGen.

        * Similarly, the documentation cannot be regenerated because
          the documentation templates depend on subshell functionality.

`--enable-debug'
     Turning on AutoGen debugging enables very detailed inspection of
     the input definitions and monitoring shell script processing.
     These options are not particularly useful to anyone not directly
     involved in maintaining AutoGen.  If you do choose to enable
     AutoGen debugging, be aware that the usage page was generated
     without these options, so when the build process reaches the
     documentation rebuild, there will be a failure.  `cd' into the
     `agen5' build directory, `make' the `autogen.texi' file and all
     will be well thereafter.

`--with-regex-header'
`--with-header-path'
`--with-regex-lib'
     These three work together to specify how to compile with and link
     to a particular POSIX regular expression library.  The value for
     `--with-regex-header=value' must be the name of the relevant header
     file.  The AutoGen sources will attempt to include that source with
     a `#include <value>' C preprocessing statement.  The `path' from
     the `--with-header-path=path' will be added to `CPPFLAGS' as
     `-Ipath'.  The `lib-specs' from `--with-regex-lib=lib-specs' will
     be added to `LDFLAGS' without any adornment.


File: autogen.info,  Node: AutoGen CGI,  Next: signal names,  Prev: configuring,  Up: Installation

6.2 AutoGen as a CGI server
===========================

AutoGen is now capable of acting as a CGI forms server.  It behaves as
a CGI server if the definitions input is from stdin and the environment
variable `REQUEST_METHOD' is defined and set to either "GET" or "POST".
If set to anything else, AutoGen will exit with a failure message.
When set to one of those values, the CGI data will be converted to
AutoGen definitions (*note Definitions File::) and the template named
"`cgi.tpl'" will be processed.

   This works by including the name of the real template to process in
the form data and having the "`cgi.tpl'" template include that template
for processing.  I do this for processing the form
`http://autogen.sourceforge.net/conftest.html'.  The "`cgi.tpl'" looks
approximately like this:

    <? AutoGen5 Template ?>
    <?
    IF (not (exist? "template"))                       ?><?
      form-error                                       ?><?

    ELIF (=* (get "template") "/")                     ?><?
      form-error                                       ?><?

    ELIF (define tpl-file (string-append "cgi-tpl/"
                          (get "template")))
         (access? tpl-file R_OK)                       ?><?
      INCLUDE (. tpl-file)                             ?><?

    ELIF (set! tpl-file (string-append tpl-file ".tpl"))
         (access? tpl-file R_OK)                       ?><?
      INCLUDE (. tpl-file)                             ?><?

    ELSE                                               ?><?
      form-error                                       ?><?
    ENDIF                                              ?>

This forces the template to be found in the "`cgi-tpl/'" directory.
Note also that there is no suffix specified in the pseudo macro (*note
pseudo macro::).  That tells AutoGen to emit the output to stdout.

   The output is actually spooled until it is complete so that, in the
case of an error, the output can be discarded and a proper error
message can be written in its stead.

   *Please also note* that it is advisable, _especially_ for network
accessible machines, to configure AutoGen (*note configuring::) with
shell processing disabled (`--disable-shell').  That will make it
impossible for any referenced template to hand data to a subshell for
interpretation.


File: autogen.info,  Node: signal names,  Next: installing,  Prev: AutoGen CGI,  Up: Installation

6.3 Signal Names
================

When AutoGen is first built, it tries to use `psignal(3)',
`sys_siglist', `strsigno(3)' and `strsignal(3)' from the host operating
system.  If your system does not supply these, the AutoGen distribution
will.  However, it will use the distributed mapping and this mapping is
unlikely to match what your system uses.  This can be fixed.  Once you
have installed autogen, the mapping can be rebuilt on the host
operating system.  To do so, you must perform the following steps:

  1. Build and install AutoGen in a place where it will be found in your
     search path.

  2. `cd ${top_srcdir}/compat'

  3. `autogen strsignal.def'

  4. Verify the results by examining the `strsignal.h' file produced.

  5. Re-build and re-install AutoGen.

   If you have any problems or peculiarities that cause this process to
fail on your platform, please send me copies of the header files
containing the signal names and numbers, along with the full path names
of these files.  I will endeavor to fix it.  There is a shell script
inside of `strsignal.def' that tries to hunt down the information.


File: autogen.info,  Node: installing,  Prev: signal names,  Up: Installation

6.4 Installing AutoGen
======================

There are several files that get installed.  The number depend whether
or not both shared and archive libraries are to be installed.  The
following assumes that everything is installed relative to `$prefix'.
You can, of course, use `configure' to place these files where you wish.

   *NB*  AutoGen does not contain any compiled-in path names.  All
support directories are located via option processing, the environment
variable `HOME' or finding the directory where the executable came from.

   The installed files are:

  1. The executables in `bin' (autogen, getdefs and columns).

  2. The AutoOpts link libraries as `lib/libopts.*'.

  3. An include file in `include/options.h', needed for Automated
     Option Processing (see next chapter).

  4. Several template files and a scheme script in `share/autogen',
     needed for Automated Option Processing (*note AutoOpts::), parsing
     definitions written with scheme syntax (*note Dynamic Text::), the
     templates for producing documentation for your program (*note
     documentation attributes::), autoconf test macros, and AutoFSM.

  5. Info-style help files as `info/autogen.info*'.  These files
     document AutoGen, the option processing library AutoOpts, and
     several add-on components.

  6. The three man pages for the three executables are installed in
     man/man1.

   This program, library and supporting files can be installed with
three commands:

   * <src-dir>/configure [ <configure-options> ]

   * make

   * make install

   However, you may wish to insert `make check' before the `make
install' command.

   If you do perform a `make check' and there are any failures, you
will find the results in `<module>/test/FAILURES'.  Needless to say, I
would be interested in seeing the contents of those files and any
associated messages.  If you choose to go on and analyze one of these
failures, you will need to invoke the test scripts individually.  You
may do so by specifying the test (or list of test) in the TESTS make
variable, thus:

    gmake TESTS=test-name.test check

   I specify `gmake' because most makes will not let you override
internal definitions with command line arguments.  `gmake' does.

   All of the AutoGen tests are written to honor the contents of the
VERBOSE environment variable.  Normally, any commentary generated
during a test run is discarded unless the VERBOSE environment variable
is set.  So, to see what is happening during the test, you might invoke
the following with bash or ksh:

    VERBOSE=1 gmake TESTS="for.test forcomma.test" check

Or equivalently with csh:

    env VERBOSE=1 gmake TESTS="for.test forcomma.test" check


File: autogen.info,  Node: AutoOpts,  Next: Add-Ons,  Prev: Installation,  Up: Top

7 Automated Option Processing
*****************************

AutoOpts 28.0 is bundled with AutoGen.  It is a tool that virtually
eliminates the hassle of processing options and keeping man pages, info
docs and usage text up to date.  This package allows you to specify
several program attributes, up to a hundred option types and many
option attributes.  From this, it then produces all the code necessary
to parse and handle the command line and configuration file options,
and the documentation that should go with your program as well.  All
the features notwithstanding, some applications simply have
well-established command line interfaces.  Even still, those programs
may use the configuration file parsing portion of the library.  See the
"AutoOpts Features" and "Configuration File Format" sections.

* Menu:

* Features::            AutoOpts Features
* Licensing::           AutoOpts Licensing
* Quick Start::         Quick Start
* Multi-Threading::     Multi-Threading
* Option Definitions::  Option Definitions
* AutoOpts API::        Programmatic Interface
* option descriptor::   Option Descriptor File
* Using AutoOpts::      Using AutoOpts
* Presetting Options::  Configuring your program
* Config File Format::  Configuration File Format
* shell options::       AutoOpts for Shell Scripts
* AutoInfo::            Automated Info Docs
* AutoMan pages::       Automated Man Pages
* getopt_long::         Using getopt(3C)
* i18n::                Internationalizing AutoOpts
* Naming Conflicts::    Naming Conflicts


File: autogen.info,  Node: Features,  Next: Licensing,  Up: AutoOpts

7.1 AutoOpts Features
=====================

AutoOpts supports option processing; option state saving; and program
documentation with innumerable features.  Here, we list a few obvious
ones and some important ones, but the full list is really defined by
all the attributes defined in the *Note Option Definitions:: section.

  1. POSIX-compliant short (flag) option processing.

  2. GNU-style long options processing.  Long options are recognized
     without case sensitivity, and they may be abbreviated.

  3. Environment variable initializations, *Note environrc::.

  4. Initialization from configuration files (aka RC or INI files), and
     saving the option state back into one, *Note loading rcfile::.

  5. Config files may be partitioned.  One config file may be used by
     several programs by partitioning it with lines containing,
     "`[PROGRAM_NAME]'", *Note loading rcfile::.

  6. Options may be marked as `dis-abled' with a disablement prefix.
     Such options may default to either an enabled or a disabled state.
     You may also provide an enablement prefix, too, e.g.,
     `--allow-mumble' and `--prevent-mumble'.

  7. Verify that required options are present between the minimum and
     maximum number of times on the command line.

  8. Verify that conflicting options do not appear together, and that
     options that require the presence of other options are, in fact,
     used in the presence of other options.

  9. Provides a callable routine to parse a text string as if it were
     from one of the rc/ini/config files, hereafter referred to as a
     configuration file.

 10. `--help' and `--version' are automatically supported.
     `--more-help' will page the generated help.

 11. By adding a `doc' and `arg-name' attributes to each option,
     AutoGen will also be able to produce a man page and the `invoking'
     section of a texinfo document.

 12. Insert the option processing state into Scheme-defined variables.
     Thus, Guile based applications that are linked with private
     `main()' routines can take advantage of all of AutoOpts'
     functionality.

 13. Various forms of main procedures can be added to the output, *Note
     Generated main::.  There are four basic forms:

       a. A program that processes the arguments and writes to standard
          out portable shell commands containing the digested options.

       b. A program that will generate portable shell commands to parse
          the defined options.  The expectation is that this result
          will be copied into a shell script and used there.

       c. A "for-each" main that will invoke a named function once for
          either each non-option argument on the command line or, if
          there are none, then once for each non-blank, non-comment
          input line read from stdin.

       d. A main procedure of your own design.  Its code can be
          supplied in the option description template or by
          incorporating another template.

 14. Library suppliers can specify command line options that their
     client programs will accept.  They specify option definitions that
     get `#include'-d into the client option definitions and they
     specify an "anchor" option that has a callback and must be invoked.
     That will give the library access to the option state for their
     options.

 15. The generated usage text can be emitted in either AutoOpts standard
     format (maximizing the information about each option), or GNU-ish
     normal form.  The default form is selected by either specifying or
     not specifying the `gnu-usage' attribute (*note information
     attributes::).  This can be overridden by the user himself with the
     `AUTOOPTS_USAGE' environment variable.  If it exists and is set to
     the string `gnu', it will force GNU-ish style format; if it is set
     to the string `autoopts', it will force AutoOpts standard format;
     otherwise, it will have no effect.

 16. If you compile with `ENABLE_NLS' defined and `_()' defined to a
     localization function such as `gettext(3GNU)', then the option
     processing code will be localizable (*note i18n::).

 17. Intermingled option processing.  AutoOpts options may be
     intermingled with command line operands and options processed with
     other parsing techniques.  This is accomplished by setting the
     `allow-errors' (*note program attributes::) attribute.  When
     processing reaches a point where `optionProcess' (*note
     libopts-optionProcess::) needs to be called again, the current
     option can be set with `RESTART_OPT(n)' (*note RESTART_OPT::)
     before calling `optionProcess'.

     See: *Note library attributes::.

 18. library options.  An AutoOpt-ed library may export its options for
     use in an AutoOpt-ed program.  This is done by providing an option
     definition file that client programs `#include' into their own
     option definitions.  See "AutoOpt-ed Library for AutoOpt-ed
     Program" (*note lib and program::) for more details.


File: autogen.info,  Node: Licensing,  Next: Quick Start,  Prev: Features,  Up: AutoOpts

7.2 AutoOpts Licensing
======================

When AutoGen is installed, the AutoOpts project is installed with it.
AutoOpts includes various AutoGen templates and a pair of shared
libraries.  These libraries may be used under the terms of the GNU
Lesser General Public License (LGPL).

   One of these libraries (`libopts') is needed by programs that are
built using AutoOpts generated code.  This library is available as a
separate "tear-off" source tarball.  It is redistributable for use
under either of two licenses: The GNU Lesser General Public License
("Lesser" meaning you have greater license with it and may link it into
commercial programs), and the advertising-clause-free BSD license.
Both of these license terms are incorporated into appropriate COPYING
files included with the `libopts' source tarball.  This source may be
incorporated into your package with the following simple commands:

    rm -rf libopts libopts-*
    gunzip -c `autoopts-config libsrc` | \
       tar -xvf -
    mv libopts-*.*.* libopts

   View the `libopts/README' file for further integration information.


File: autogen.info,  Node: Quick Start,  Next: Multi-Threading,  Prev: Licensing,  Up: AutoOpts

7.3 Quick Start
===============

Since it is generally easier to start with a simple example than it is
to look at the options that AutoGen uses itself, here is a very simple
AutoOpts example.  You can copy this example out of the Info file and
into a source file to try it.  You can then embellish it into what you
really need.  For more extensive examples, you can also examine the help
output and option definitions for the commands `columns', `getdefs' and
`autogen' itself.

   For our simple example, assume you have a program named `check' that
takes two options:

  1. A list of directories to check over for whatever it is `check'
     does.  You want this option available as a POSIX-style flag option
     and a GNU long option.  You want to allow as many of these as the
     user wishes.

  2. An option to show or not show the definition tree being used.
     Only one occurrence is to be allowed, specifying one or the other.

First, specify your program attributes and its options to AutoOpts, as
with the following example.

    AutoGen Definitions options;
    prog-name     = check;
    prog-title    = "Checkout Automated Options";
    long-opts;

    main = { main-type = shell-process; };

    flag = {
        name      = check-dirs;
        value     = L;        /* flag style option character */
        arg-type  = string;   /* option argument indication  */
        max       = NOLIMIT;  /* occurrence limit (none)     */
        stack-arg;            /* save opt args in a stack    */
        descrip   = "Checkout directory list";
    };

    flag = {
        name      = show_defs;
        descrip   = "Show the definition tree";
        disable   = dont;     /* mark as enable/disable type */
                              /* option.  Disable as `dont-' */
    };

Then perform the following steps:

  1. `cflags="-DTEST_CHECK_OPTS `autoopts-config cflags`"'

  2. `ldflags="`autoopts-config ldflags`"'

  3. `autogen checkopt.def'

  4. `cc -o check -g ${cflags} checkopt.c ${ldflags}'

  5. `./check --help'

Running those commands yields:

    check - Checkout Automated Options
    USAGE:  check [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
      Flg Arg Option-Name    Description
       -L Str check-dirs     Checkout directory list
                                    - may appear multiple times
          no  show-defs      Show the definition tree
                                    - disabled as --dont-show-defs
       -? no  help           Display usage information and exit
       -! no  more-help      Extended usage information passed thru pager

    Options are specified by doubled hyphens and their name
    or by a single hyphen and the flag character.

Normally, however, you would compile `checkopt.c' as in:

    cc -o checkopt.o -I$prefix/include -c checkopt.c

and link `checkopt.o' with the rest of your program.  The main program
causes the options to be processed by calling `optionProcess' (*note
libopts-optionProcess::):

    main( int argc, char** argv )
    {
      {
        int optct = optionProcess( &checkOptions, argc, argv );
        argc -= optct;
        argv += optct;
      }

   The options are tested and used as in the following fragment.
"`ENABLED_OPT'" is used instead of "`HAVE_OPT'" for the `show-defs'
option because it is an enabled/disabled option type:

      if (  ENABLED_OPT( SHOW_DEFS )
         && HAVE_OPT( CHECK_DIRS )) {
        int    dirct = STACKCT_OPT( CHECK_DIRS );
        char** dirs  = STACKLST_OPT( CHECK_DIRS );
        while (dirct-- > 0) {
          char* dir = *dirs++;
          ...

   A lot of magic happens to make this happen.  The rest of this
chapter will describe the myriad of option attributes supported by
AutoOpts.  However, keep in mind that, in general, you won't need much
more than what was described in this "quick start" section.


File: autogen.info,  Node: Multi-Threading,  Next: Option Definitions,  Prev: Quick Start,  Up: AutoOpts

7.4 Multi-Threading
===================

AutoOpts was designed to configure a program for running.  This
generally happens before much real work has been started.
Consequently, it is expected to be run before multi-threaded
applications have started multiple threads.  However, this is not
always the case. Some applications may need to reset and reload their
running configuration, and some may use `SET_OPT_xxx()' macros during
processing.  If you need to dynamically change your option
configuration in your multi-threaded application, it is your
responsibility to prevent all threads from accessing the option
configuration state, except the one altering the configuration.

   The various accessor macros (`HAVE_OPT()', etc.) do not modify state
and are safe to use in a multi-threaded application.  It is safe as long
as no other thread is concurrently modifying state, of course.


File: autogen.info,  Node: Option Definitions,  Next: AutoOpts API,  Prev: Multi-Threading,  Up: AutoOpts

7.5 Option Definitions
======================

AutoOpts uses an AutoGen definitions file for the definitions of the
program options and overall configuration attributes.  The complete
list of program and option attributes is quite extensive, so if you are
reading to understand how to use AutoOpts, I recommend reading the
"Quick Start" section (*note Quick Start::) and paying attention to the
following:

  1. `prog-name', `prog-title', and `argument', program attributes,
     *Note program attributes::.

  2. `name' and `descrip' option attributes, *Note Required
     Attributes::.

  3. `value' (flag character) and `min' (occurrence counts) option
     attributes, *Note Common Attributes::.

  4. `arg-type' from the option argument specification section, *Note
     Option Arguments::.

  5. Read the overall how to, *Note Using AutoOpts::.

  6. Highly recommended, but not required, are the several "man" and
     "info" documentation attributes, *Note documentation attributes::.

   Keep in mind that the majority are rarely used and can be safely
ignored.  However, when you have special option processing requirements,
the flexibility is there.

* Menu:

* program attributes::        Program Description Attributes
* library attributes::        Options for Library Code
* information attributes::    Program Information Attributes
* Generated main::            Generating main procedures
* option attributes::         Option Attributes
* documentation attributes::  Man and Info doc Attributes
* automatic options::         Automatically Supported Options
* standard options::          Library of Standard Options


File: autogen.info,  Node: program attributes,  Next: library attributes,  Up: Option Definitions

7.5.1 Program Description Attributes
------------------------------------

The following global definitions are used to define attributes of the
entire program.  These generally alter the configuration or global
behavior of the AutoOpts option parser.  The first two are required of
every program.  The third is required if there are to be any left over
arguments (operands) after option processing.  The rest have been
alphabetized.  Except as noted, there may be only one copy of each of
these definitions:

`prog-name'
     This attribute is required.  Variable names derived from this name
     are derived using `string->c_name!' (*note SCM string->c-name!::).

`prog-title'
     This attribute is required and may be any descriptive text.

`argument'
     This attribute is required if your program uses operand arguments.
     It specifies the syntax of the arguments that *follow* the options.
     It may not be empty, but if it is not supplied, then option
     processing must consume all the arguments.  If it is supplied and
     starts with an open bracket (`['), then there is no requirement on
     the presence or absence of command line arguments following the
     options.  Lastly, if it is supplied and does not start with an
     open bracket, then option processing must *not* consume all of the
     command line arguments.

`allow-errors'
     The presence of this attribute indicates ignoring any command line
     option errors.  This may also be turned on and off by invoking the
     macros `ERRSKIP_OPTERR' and `ERRSTOP_OPTERR' from the generated
     interface file.

`config-header'
     The contents of this attribute should be just the name of the
     configuration file.  A "#include" naming this file will be
     inserted at the top of the generated header.

`environrc'
     Indicates looking in the environment for values of variables named,
     `PROGRAM_OPTNAME' or `PROGRAM', where `PROGRAM' is the upper cased
     `C-name' of the program and `OPTNAME' is the upper cased `C-name'
     of a specific option.

`export'
     This string is inserted into the .h interface file.  Generally
     used for global variables or `#include' directives required by
     `flag_code' text and shared with other program text.  Do not
     specify your configuration header (`config.h') in this attribute
     or the `include' attribute, however.  Instead, use
     `config-header', above.

`guard-option-names'
     AutoOpts generates macros that presume that there are no `cpp'
     macros with the same name as the option name.  For example, if you
     have an option named, `debug', then you must not use `#ifdef
     DEBUG' in your code.  If you specify this attribute, every option
     name will be guarded.  If the name is `#define'-d, then a warning
     will be issued and the name undefined.  If you do not specify this
     and there is a conflict, you will get strange error messages.

     This attribute may be set to any of four recognized states:

        * Not defined.  AutoOpts will behave as described above.

        * Defined, but set to the empty string.  Text will be emitted
          into the header to undefine (`#undef') any conflicting
          preprocessor macros.  The code will include compiler warnings
          (via `#warning').  Some compilers are not ANSI-C-99 compliant
          yet and will error out on those warnings.  You may compile
          with `-DNO_OPTION_NAME_WARNINGS' to silence or mostly silence
          them.

        * Defined and set to the string, "`no-warning'".  All of the
          needed `#undef's will be emitted, without any conflict
          checking `#warning' directives emitted.

        * Defined and set to the string, "`full-enum'".  The option
          manipulation preprocessor macros will not token paste the
          option names to the index enumeration prefix.  e.g. you will
          need to use `HAVE_OPT(INDEX_OPT_DEBUG)' instead of
          `HAVE_OPT(DEBUG)'.

`homerc'
     Specifies either a directory or a file using a specific path (like
     `.' or `/usr/local/share/progname') or an environment variable
     (like `$HOME/rc/' or `$PREFIX/share/progname') or the directory
     where the executable was found (`$$[/...]') to use to try to find
     the rcfile.  Use as many as you like.  The presence of this
     attribute activates the `--save-opts' and `--load-opts' options.
     *Note loading rcfile::.

`include'
     This string is inserted into the .c file.  Generally used for
     global variables required only by `flag_code' program text.

`long-opts'
     Presence indicates GNU-standard long option processing.  If any
     options do not have an option value (flag character) specified,
     and least one does specify such a value, then you must specify
     `long-opts'.  If none of your options specify an option value
     (flag character) and you do not specify `long-opts', then command
     line arguments are processed in "named option mode".  This means
     that:

        * Every command line argument must be a long option.

        * The flag markers `-' and `--' are completely optional.

        * The `argument' program attribute is disallowed.

        * One of the options may be specified as the default (as long
          as it has a required option argument).

`prefix'
     This value is inserted into *all* global names.  This will
     disambiguate them if more than one set of options are to be
     compiled into a single program.

`rcfile'
     Specifies the configuration file name.  This is only useful if you
     have provided at least one `homerc' attribute.  default:
     .<prog-name>rc

`version'
     Specifies the program version and activates the VERSION option,
     *Note automatic options::.


File: autogen.info,  Node: library attributes,  Next: information attributes,  Prev: program attributes,  Up: Option Definitions

7.5.2 Options for Library Code
------------------------------

Some libraries provide their own code for processing command line
options, and this may be used by programs that utilize AutoOpts.  You
may also wish to write a library that gets configured with AutoOpts
options and config files.  Such a library may either supply its own
configury routine and process its own options, or it may export its
option descriptions to programs that also use AutoOpts.  This section
will describe how to do all of these different things.

* Menu:

* lib and program::         AutoOpt-ed Library for AutoOpt-ed Program
* lib called::              AutoOpt-ed Library for Regular Program
* prog calls lib::          AutoOpt-ed Program Calls Regular Library


File: autogen.info,  Node: lib and program,  Next: lib called,  Up: library attributes

7.5.2.1 AutoOpt-ed Library for AutoOpt-ed Program
.................................................

The library source code must provide an option definition file that
consists of only the `flag' entries.  The first `flag' entry must
contain the following attributes:

`name'
     This name is used in the construction of a global pointer of type
     `tOptDesc const*'.  It is always required.

`documentation'
     It tells `AutoOpts' that this option serves no normal purpose.  It
     will be used to add usage clarity and to locate option descriptors
     in the library code.

`descrip'
     This is a string that is inserted in the extended usage display
     before the options specific to the current library.  It is always
     required.

`lib-name'
     This should match the name of the library.  This string is also
     used in the construction of the option descriptor pointer name.
     In the end, it looks like this:
         extern tOptDesc const* <<lib-name>>_<<name>>_optDesc_p;
     and is used in the macros generated for the library's `.h' file.

   In order to compile this `AutoOpts' using library, you must create a
special header that is not used by the client program.  This is
accomplished by creating an option definition file that contains
essentially exactly the following:

    AutoGen definitions options;
    prog-name  = does-not-matter;  // but is always required
    prog-title = 'also does not matter';  // also required
    config-header = 'config.h'; // optional, but common
    library;
    #include library-options-only.def

and nothing else.  AutoGen will produce only the `.h' file.  You may
now compile your library, referencing just this `.h' file.  The macros
it creates will utilize a global variable that will be defined by the
`AutoOpts'-using client program.  That program will need to have the
following `#include' in its option definition file:

    #include library-options-only.def

All the right things will magically happen so that the global variables
named `<<lib-name>>_<<name>>_optDesc_p' are initialized correctly.  For
an example, please see the `AutoOpts' test script:
`autoopts/test/library.test'.


File: autogen.info,  Node: lib called,  Next: prog calls lib,  Prev: lib and program,  Up: library attributes

7.5.2.2 AutoOpt-ed Library for Regular Program
..............................................

In this case, your library must provide an option processing function
to a calling program.  This is accomplished by setting the
`allow-errors' global option attribute.  Each time your option handling
function is called, you must determine where your scan is to resume and
tell the AutoOpts library by invoking:

    RESTART_OPT(next_arg_index);

and then invoke `not_opt_index = optionProcess(...)'.  The
`not_opt_index' value can be used to set `optind', if that is the
global being used to scan the program argument array.

   In this method, do *NOT* utilize the global `library' attribute.
Your library must specify its options as if it were a complete program.
You may choose to specify an alternate `usage()' function so that usage
for other parts of the option interface may be displayed as well.  See
"Program Information Attributes" (*note information attributes::).

   At the moment, there is no method for calling `optionUsage()' telling
it to produce just the information about the options and not the program
as a whole.  Some later revision after somebody asks.


File: autogen.info,  Node: prog calls lib,  Prev: lib called,  Up: library attributes

7.5.2.3 AutoOpt-ed Program Calls Regular Library
................................................

As with providing an `AutoOpt'-ed library to a non-`AutoOpt'-ed
program, you must write the option description file as if you were
writing all the options for the program, but you should specify the
`allow-errors' global option attribute and you will likely want an
alternate `usage()' function (see "Program Information Attributes"
*note information attributes::).  In this case, though, when
`optionProcess()' returns, you need to test to see if there might be
library options.  If there might be, then call the library's exported
routine for handling command line options, set the
next-option-to-process with the `RESTART_OPT()' macro, and recall
`optionProcess()'.  Repeat until done.


File: autogen.info,  Node: Generated main,  Next: option attributes,  Prev: information attributes,  Up: Option Definitions

7.5.3 Generating main procedures
--------------------------------

When AutoOpts generates the code to parse the command line options, it
has the ability to produce any of several types of `main()' procedures.
This is done by specifying a global structured value for `main'.  The
values that it contains are dependent on the value set for the one
value it must have: `main-type'.

   The recognized values for `main-type' are:

* Menu:

* main guile::              guile: main and inner_main procedures
* main shell-process::      shell-process: emit Bourne shell results
* main shell-parser::       shell-parser: emit Bourne shell script
* main main::               main: user supplied main procedure
* main include::            include: code emitted from included template
* main invoke::             invoke: code emitted from AutoGen macro
* main for-each::           for-each: perform function on each argument

   Here is an example of an `include' variation:

    main = {
      main-type = include;
      tpl       = "main-template.tpl";
    };


File: autogen.info,  Node: main guile,  Next: main shell-process,  Up: Generated main

7.5.3.1 guile: main and inner_main procedures
.............................................

When the `main-type' is specified to be `guile', a `main()' procedure
is generated that calls `gh_enter()', providing it with a generated
`inner_main()' to invoke.  If you must perform certain tasks before
calling `gh_enter()', you may specify such code in the value for the
`before-guile-boot' attribute.

   The `inner_main()' procedure itself will process the command line
arguments (by calling `optionProcess()', *note
libopts-optionProcess::), and then either invoke the code specified
with the `guile-main' attribute, or else export the parsed options to
Guile symbols and invoke the `scm_shell()' function from the Guile
library.  This latter will render the program nearly identical to the
stock `guile(1)' program.


File: autogen.info,  Node: main shell-process,  Next: main shell-parser,  Prev: main guile,  Up: Generated main

7.5.3.2 shell-process: emit Bourne shell results
................................................

This will produce a `main()' procedure that parses the command line
options and emits to `stdout' Bourne shell commands that puts the
option state into environment variables.  This can be used within a
shell script as follows:

    unset OPTION_CT
    eval "`opt_parser \"$@\"`"
    test -z "${OPTION_CT}" && exit 1
    test ${OPTION_CT} -gt 0 && shift ${OPTION_CT}

   If the option parsing code detects an error or a request for usage,
it will not emit an assignment to OPTION_CT and the script should just
exit.  If the options are set consistently, then something along the
lines of the following will be written to `stdout' and evaled:

        OPTION_CT=4
        export OPTION_CT
        MYPROG_SECOND='first'
        export MYPROG_SECOND
        MYPROG_ANOTHER=1 # 0x1
        export MYPROG_ANOTHER

If the arguments are to be reordered, however, then the resulting set
of operands will be emitted and `OPTION_CT' gets set to zero.  For
example, the following would be appended to the above:

        set -- 'operand1' 'operand2' 'operand3'
        OPTION_CT=0

`OPTION_CT' is set to zero since it is not necessary to shift off any
options.


File: autogen.info,  Node: main shell-parser,  Next: main main,  Prev: main shell-process,  Up: Generated main

7.5.3.3 shell-parser: emit Bourne shell script
..............................................

This will produce a `main()' procedure that emits a shell script that
will parse the command line options.  That script can be emitted to
`stdout' or inserted or substituted into a pre-existing shell script
file.  Improbable markers are used to identify previously inserted
parsing text:

    # # # # # # # # # # -- do not modify this marker --

The program is also pretty insistent upon starting its parsing script
on the second line.


File: autogen.info,  Node: main main,  Next: main include,  Prev: main shell-parser,  Up: Generated main

7.5.3.4 main: user supplied main procedure
..........................................

You must supply a value for the `main-text' attribute.  You may also
supply a value for `option-code'.  If you do, then the `optionProcess'
invocation will not be emitted into the code.  AutoOpts will wrap the
`main-text' inside of:

    int
    main( int argc, char** argv )
    {
        {
            int ct = optionProcess( &<<prog-name>>Options, argc, argv );
            argc -= ct;
            argv += ct;
        }
    <<your text goes here>>
    }

so you can most conveniently set the value with a "`here string'"
(*note here-string::):

    code = <<- _EndOfMainProc_
    	<<your text goes here>>
    	_EndOfMainProc_;


File: autogen.info,  Node: main include,  Next: main invoke,  Prev: main main,  Up: Generated main

7.5.3.5 include: code emitted from included template
....................................................

You must write a template to produce your main procedure.  You specify
the name of the template with the `tpl' attribute and it will be
incorporated at the point where AutoOpts is ready to emit the `main()'
procedure.

   This can be very useful if, in your working environment, you have
many programs with highly similar `main()' procedures.  All you need to
do is parameterize the variations and specify which variant is needed
within the `main' AutoOpts specification.  Since you are coding the
template for this, the attributes needed for this variation would be
dictated by your template.


File: autogen.info,  Node: main invoke,  Next: main for-each,  Prev: main include,  Up: Generated main

7.5.3.6 invoke: code emitted from AutoGen macro
...............................................

You must write a template to produce your main procedure.  That template
must contain a definition for the function specified with the `func'
attribute to this `main()' procedure specification.  Typically, this
template will be incorporated by using the `--lib-template' option
(*note autogen lib-template::) in the AutoGen invocation.  Otherwise,
this variation operates in much the same way as "`include'" (*note main
include::) method.


File: autogen.info,  Node: main for-each,  Prev: main invoke,  Up: Generated main

7.5.3.7 for-each: perform function on each argument
...................................................

This produces a main procedure that invokes a procedure once for each
operand on the command line (non-option arguments), *OR* once for each
non-blank, non-comment `stdin' input line.  Leading and trailing white
space is trimmed from the input line and comment lines are lines that
are empty or begin with a comment character, defaulting to a hash ('#')
character.

   *NB*: The `argument' program attribute (*note program attributes::)
must begin with the `[' character, to indicate that there are command
operands, but that they are optional.

   There are a number of attributes to `main' that may be used:

`handler-proc'
     This attribute is required.  It is used to name the procedure to
     call.  That procedure is presumed to be external, but if you
     provide the code for it, then the procedure is emitted as a static
     procedure in the generated code.

     This procedure should return 0 on success, a cumulative error code
     on warning and exit without returning on an unrecoverable error.
     As the cumulative warning codes are or-ed together, the codes
     should be some sort of bit mask in order to be ultimately
     decipherable (if you need to do that).

     If the called procedure needs to cause a fail-exit, it is expected
     to call `exit(3)' directly.  If you want to cause a warning exit
     code, then this handler function should return a non-zero status.
     That value will be *OR*-ed into a result integer for computing the
     final exit code.  E.g., here is part of the emitted code:

           int res = 0;
           if (argc > 0) {
              do  {
                  res |= my_handler( *(argv++) );
              } while (--argc > 0);
           } else { ...

`handler-type'
     If you do not supply this attribute, your handler procedure must be
     the default type.  The profile of the procedure must be:

         int my_handler( char const *pz_entry );

     However, if you do supply this attribute, you may select any of
     three alternate flavors:

    `name-of-file'
          This is essentially the same as the default handler type,
          except that before your procedure is invoked, the generated
          code has verified that the string names an existing file.
          The profile is unchanged.

    `file-X'
          Before calling your procedure, the file is f-opened according
          to the "X", where "X" may be any of the legal modes for
          `fopen(3C)'.  In this case, the profile for your procedure
          must be:

              int my_handler( char const* pz_fname, FILE* entry_fp );

    `text-of-file'
    `some-text-of-file'
          Before calling your procedure, the contents of the file are
          read into memory.  (Excessively large files may cause
          problems.)  The "`some-text-of-file'" disallows empty files.
          Both require regular files.  In this case, the profile for
          your procedure must be:

              int my_handler( char const* pz_fname, char* file_text,
                              size_t text_size );

          Note that though the `file_text' is not `const', any changes
          made to it are not written back to the original file.  It is
          merely a memory image of the file contents.  Also, the memory
          allocated to hold the text is `text_size + 1' bytes long and
          the final byte is always `NUL'.  The file contents need not
          be text, as the data are read with the `read(2)' system call.

`my_handler-code'
     With this attribute, you provide the code for your handler
     procedure in the option definition file.  In this case, your
     `main()' procedure specification might look something like this:

         main = {
           main-type    = for-each;
           handler-proc = my_handler;
           my_handler-code = <<- EndOfMyCode
         	/* whatever you want to do */
         	EndOfMyCode;
         };

     and instead of an emitted external reference, a procedure will be
     emitted that looks like this:

         static int
         my_handler( char const* pz_entry )
         {
             int res = 0;
             <<my_handler-code goes here>>
             return res;
         }

`main-init'
     This is code that gets inserted after the options have been
     processed, but before the handler procs get invoked.

`main-fini'
     This is code that gets inserted after all the entries have been
     processed, just before returning from `main()'.

`comment-char'
     If you wish comment lines to start with a character other than a
     hash (`#') character, then specify one character with this
     attribute.  If that character is the `NUL' byte, then only blank
     lines will be considered comments.


File: autogen.info,  Node: information attributes,  Next: Generated main,  Prev: library attributes,  Up: Option Definitions

7.5.4 Program Information Attributes
------------------------------------

These attributes are used to define how and what information is
displayed to the user of the program.

`copyright'
     The `copyright' is a structured value containing three to five
     values.  If `copyright' is used, then the first three are required.

       1. `date' - the list of applicable dates for the copyright.

       2. `owner' - the name of the copyright holder.

       3. `type' - specifies the type of distribution license.
          AutoOpts/AutoGen will automatically support the text of the
          GNU Public License (`GPL'), the GNU General Public License
          with Library extensions (`LGPL'), the Free BSD license
          (`BSD'), and a write-it-yourself copyright notice (`NOTE').
          Only these values are recognized.

       4. `text' - the text of the copyright notice.  It is only needed
          if `type' is set to `NOTE'.

       5. `author' - in case the author name is to appear in the
          documentation and is different from the copyright owner.

       6. `eaddr' - email address for receiving praises and complaints.
          Typically that of the author or copyright holder.

     An example of this might be:
         copyright = {
             date  = "1992-2004";
             owner = "Bruce Korb";
             eaddr = 'bkorb@gnu.org';
             type  = GPL;
         };

`detail'
     This string is added to the usage output when the HELP option is
     selected.

`explain'
     Gives additional information whenever the usage routine is
     invoked..

`package'
     The name of the package the program belongs to.  This will appear
     parenthetically after the program name in the version and usage
     output, e.g.:  `autogen (GNU autogen) - The Automated Program
     Generator'.

`preserve-case'
     This attribute will not change anything except appearance.
     Normally, the option names are all documented in lower case.
     However, if you specify this attribute, then they will display in
     the case used in their specification.  Command line options will
     still be matched without case sensitivity.

`prog-desc *and*'
`opts-ptr'
     These define global pointer variables that point to the program
     descriptor and the first option descriptor for a library option.
     This is intended for use by certain libraries that need command
     line and/or initialization file option processing.  These
     definitions have no effect on the option template output, but are
     used for creating a library interface file.  Normally, the first
     "option" for a library will be a documentation option that cannot
     be specified on the command line, but is marked as `settable'.
     The library client program will invoke the `SET_OPTION' macro
     which will invoke a handler function that will finally set these
     global variables.

`usage'
     Optionally names the usage procedure, if the library routine
     `optionUsage()' does not work for you.  If you specify `my_usage'
     as the value of this attribute, for example, you will use a
     procedure by that name for displaying usage.  Of course, you will
     need to provide that procedure and it must conform to this profile:
         void my_usage( tOptions* pOptions, int exitCode )

`gnu-usage'
     Normally, the default format produced by the `optionUsage'
     procedure is AutoOpts Standard.  By specifying this attribute, the
     default format will be GNU-ish style.  Either default may be
     overridden by the user with the `AUTOOPTS_USAGE' environment
     variable.  If it is set to `gnu' or `autoopts', it will alter the
     style appropriately.  This attribute will conflict with the
     `usage' attribute.

`reorder-args'
     Some applications traditionally require that the command operands
     be intermixed with the command options.  In order to handle that,
     the arguments must be reordered.  If you are writing such an
     application, specify this global option.  All of the options (and
     any associated option arguments) will be brought to the beginning
     of the argument list.  New applications should not use this
     feature, if at all possible.  This feature is disabled if
     `POSIXLY_CORRECT' is defined in the environment.


File: autogen.info,  Node: option attributes,  Next: documentation attributes,  Prev: Generated main,  Up: Option Definitions

7.5.5 Option Attributes
-----------------------

For each option you wish to specify, you must have a block macro named
`flag' defined.  There are two required attributes: `name' and
`descrip'.  If any options do not have a `value' (traditional flag
character) attribute, then the `long-opts' program attribute must also
be defined.  As a special exception, if no options have a `value' *and*
`long-opts' is not defined *and* `argument' is not defined, then all
arguments to the program are named options.  In this case, the `-' and
`--' command line option markers are optional.

* Menu:

* Required Attributes::         Required Attributes
* Common Attributes::           Common Option Attributes
* Special Option Handling::     Special Option Handling
* Immediate Action::            Immediate Action Attributes
* Option Conflict Attributes::  Option Conflict Attributes
* Option Arguments::            Option Argument Specification
* Option Argument Handling::    Option Argument Handling


File: autogen.info,  Node: Required Attributes,  Next: Common Attributes,  Up: option attributes

7.5.5.1 Required Attributes
...........................

Every option must have exactly one copy of both of these attributes.

`name'
     Long name for the option.  Even if you are not accepting long
     options and are only accepting flags, it must be provided.
     AutoOpts generates private, named storage that requires this name.
     This name also causes a `#define'-d name to be emitted.  It must
     not conflict with any other names you may be using in your program.

     For example, if your option name is, `debug' or `munged-up', you
     must not use the `#define' names `DEBUG' (or `MUNGED_UP') in your
     program for non-AutoOpts related purposes.  They are now used by
     AutoOpts.

     Sometimes (most especially under Windows), you may get a surprise.
     For example, `INTERFACE' is apparently a user space name that one
     should be free to use.  Windows usurps this name.  To solve this,
     you must do one of the following:

       1. Change the name of your option

       2. add the program attribute (*note program attributes::):

              export = '#undef INTERFACE';

       3. add the program attribute:

              guard-option-names;

`descrip'
     Except for documentation options, a *very* brief description of
     the option.  About 40 characters on one line, maximum.  It appears
     on the `usage()' output next to the option name.  If, however, the
     option is a documentation option, it will appear on one or more
     lines by itself.  It is thus used to visually separate and comment
     upon groups of options in the usage text.


File: autogen.info,  Node: Common Attributes,  Next: Special Option Handling,  Prev: Required Attributes,  Up: option attributes

7.5.5.2 Common Option Attributes
................................

These option attributes are optional.  Any that do appear in the
definition of a flag, may appear only once.

`value'
     The flag character to specify for traditional option flags, e.g.,
     `-L'.

`max'
     Maximum occurrence count (invalid if DISABLE present).  The
     default maximum is 1.  `NOLIMIT' can be used for the value,
     otherwise it must be a number or a `#define' that evaluates to a
     number.

`min'
     Minimum occurrence count.  If present, then the option *must*
     appear on the command line.  Do not define it with the value zero
     (0).

`must-set'
     If an option must be specified, but it need not be specified on
     the command line, then specify this attribute for the option.

`enable'
     Long-name prefix for enabling the option (invalid if DISABLE *not*
     present).  Only useful if long option names are being processed.

`disable'
     Prefix for disabling (inverting sense of) the option.  Only useful
     if long option names are being processed.

`enabled'
     If default is for option being enabled.  (Otherwise, the
     OPTST_DISABLED bit is set at compile time.)  Only useful if the
     option can be disabled.

`ifdef'
`ifndef'
     If an option is relevant on certain platforms or when certain
     features are enabled or disabled, you can specify the compile time
     flag used to indicate when the option should be compiled in or
     out.  For example, if you have a configurable feature, `mumble'
     that is indicated with the compile time define, `WITH_MUMBLING',
     then add:

         ifdef = WITH_MUMBLING;

     Take care when using these.  There are several caveats:
        * The case and spelling must match whatever is specified.

        * Do not confuse these attributes with the AutoGen directives
          of the same names, *Note Directives::.  These cause C
          preprocessing directives to be inserted into the generated C
          text.

        * Only one of these attributes may apply to any given option.

        * The `VALUE_OPT_' values are `#define'-d.  If `WITH_MUMBLING'
          is not defined, then the associated `VALUE_OPT_' value will
          not be `#define'-d either.  So, if you have an option named,
          `MUMBLING' that is active only if `WITH_MUMBLING' is
          `#define'-d, then `VALUE_OPT_MUMBLING' will be `#define'-d
          iff `WITH_MUMBLING' is `#define'-d.  Watch those switch
          statements.


File: autogen.info,  Node: Special Option Handling,  Next: Immediate Action,  Prev: Common Attributes,  Up: option attributes

7.5.5.3 Special Option Handling
...............................

These option attributes do not fit well with other categories.

`no-preset'
     If presetting this option is not allowed.  (Thus, environment
     variables and values set in configuration files will be ignored.)

`settable'
     If the option can be set outside of option processing.  If this
     attribute is defined, special macros for setting this particular
     option will be inserted into the interface file.  For example,
     `TEMPL_DIRS' is a settable option for AutoGen, so a macro named
     `SET_OPT_TEMPL_DIRS(a)' appears in the interface file.  This
     attribute interacts with the DOCUMENTATION attribute.

`equivalence'
     Generally, when several options are mutually exclusive and
     basically serve the purpose of selecting one of several processing
     modes, these options can be considered an equivalence class.
     Sometimes, it is just easier to deal with them as such.  All
     members of the equivalence class must contain the same
     equivalenced-to option, including the equivalenced-to option
     itself.  Thus, it must be a class member.

     For an option equivalence class, there is a single occurrence
     counter for the class.  It can be referenced with the interface
     macro, `COUNT_OPT(BASE_OPTION)', where "BASE_OPTION" is the
     equivalenced-to option name.

     Also, please take careful note: since the options are mapped to the
     equivalenced-to option descriptor, any option argument values are
     mapped to that descriptor also.  Be sure you know which
     "equivalent option" was selected before getting an option argument
     value!

     During the presetting phase of option processing (*note Presetting
     Options::), equivalenced options may be specified.  However, if
     different equivalenced members are specified, only the last
     instance will be recognized and the others will be discarded.  A
     conflict error is indicated only when multiple different members
     appear on the command line itself.

     As an example of where equivalenced options might be useful,
     `cpio(1)' has three options `-o', `-i', and `-p' that define the
     operational mode of the program (`create', `extract' and
     `pass-through', respectively).  They form an equivalence class from
     which one and only one member must appear on the command line.  If
     `cpio' were an AutoOpt-ed program, then each of these option
     definitions would contain:

         equivalence = create;

     and the program would be able to determine the operating mode with
     code that worked something like this:

         switch (WHICH_IDX_CREATE) {
         case INDEX_OPT_CREATE:       ...
         case INDEX_OPT_EXTRACT:      ...
         case INDEX_OPT_PASS_THROUGH: ...
         default:    /* cannot happen */
         }

`documentation'
     This attribute means the option exists for the purpose of
     separating option description text in the usage output.  Libraries
     may choose to make it settable so that the library can determine
     which command line option is the first one that pertains to the
     library.

     If present, this option disables all other attributes except
     `settable', `call-proc' and `flag_-ode'.  `settable' must be and
     is only specified if `call-proc', `extract-code' or `flag-code' has
     been specified.  When present, the `descrip' attribute will be
     displayed only when the `--help' option has been specified.  It
     will be displayed flush to the left hand margin and may consist of
     one or more lines of text.  The name of the option will not be
     printed.

     Documentation options are for clarifying the usage text and will
     not appear in generated man pages or in the generated invoking
     texinfo doc.


File: autogen.info,  Node: Immediate Action,  Next: Option Conflict Attributes,  Prev: Special Option Handling,  Up: option attributes

7.5.5.4 Immediate Action Attributes
...................................

Certain options may need to be processed early.  For example, in order
to suppress the processing of configuration files, it is necessary to
process the command line option `--no-load-opts' *before* the config
files are processed.  To accommodate this, certain options may have
their enabled or disabled forms marked for immediate processing.  The
consequence of this is that they are processed ahead of all other
options in the reverse of normal order.

   Normally, the first options processed are the options specified in
the first `homerc' file, followed by then next `homerc' file through to
the end of config file processing.  Next, environment variables are
processed and finally, the command line options.  The later options
override settings processed earlier.  That actually gives them higher
priority.  Command line immediate action options actually have the
lowest priority of all.  They would be used only if they are to have an
effect on the processing of subsequent options.

`immediate'
     Use this option attribute to specify that the enabled form of the
     option is to be processed immediately.  The `help' and `more-help'
     options are so specified.  They will also call `exit()' upon
     completion, so they *do* have an effect on the processing of the
     remaining options :-).

`immed-disable'
     Use this option attribute to specify that the disabled form of the
     option is to be processed immediately.  The `load-opts' option is
     so specified.  The `--no-load-opts' command line option will
     suppress the processing of config files and environment variables.
     Contrariwise, the `--load-opts' command line option is processed
     normally.  That means that the options specified in that file will
     be processed after all the `homerc' files and, in fact, after
     options that precede it on the command line.

`also'
     If either the `immediate' or the `immed-disable' attributes are
     set to the string, "`also'", then the option will actually be
     processed twice:  first at the immediate processing phase and again
     at the "normal" time.


File: autogen.info,  Node: Option Conflict Attributes,  Next: Option Arguments,  Prev: Immediate Action,  Up: option attributes

7.5.5.5 Option Conflict Attributes
..................................

These attributes may be used as many times as you need.  They are used
at the end of the option processing to verify that the context within
which each option is found does not conflict with the presence or
absence of other options.

   This is not a complete cover of all possible conflicts and
requirements, but it simple to implement and covers the more common
situations.

`flags-must'
     one entry for every option that *must* be present when this option
     is present

`flags-cant'
     one entry for every option that *cannot* be present when this
     option is present


File: autogen.info,  Node: Option Arguments,  Next: Option Argument Handling,  Prev: Option Conflict Attributes,  Up: option attributes

7.5.5.6 Option Argument Specification
.....................................

Command line options come in three flavors:  options that do not take
arguments, those that do and those that may.  Without an "arg-type"
attribute, AutoOpts will not process an argument to an option.  If
"arg-type" is specified and "arg-optional" is also specified, then the
next command line token will be taken to be an argument, unless it
looks like the name of another option.

   If the argument type is specified to be anything other than
"str[ing]", then AutoOpts will specify a callback procedure to handle
the argument.  Some of these procedures will be created and inserted
into the generated `.c' file, and others are already built into the
`libopts' library.  Therefore, if you write your own callback procedure
(*note Option Argument Handling::), then you must either not specify an
"arg-type" attribute, or else specify it to be of type "str[ing]".  Your
callback function will be able to place its own restrictions on what
that string may contain or represent.

`arg-type'
     This specifies the type of argument the option will take.  If not
     present, the option cannot take an argument.  If present, it must
     be one of the following five.  The bracketed part of each name is
     optional.

    `str[ing]'
          The argument may be any arbitrary string, though your program
          or option callback procedure may place additional constraints
          upon it.

    `num[ber]'
          The argument must be a correctly formed integer, without any
          trailing U's or L's.  AutoOpts contains a library procedure
          to convert the string to a number.  If you specify range
          checking with `arg-range', then AutoOpts produces a special
          purpose procedure for this option.

    `bool[ean]'
          The argument will be interpreted and always yield either
          AG_TRUE or AG_FALSE.  False values are  the empty string, the
          number zero, or a string that starts with `f', `F', `n' or `N'
          (representing False or No).  Anything else will be
          interpreted as True.

    `key[word]'
          The argument must match a specified list of strings.
          Assuming you have named the option, `optn-name', the strings
          will be converted into an enumeration of type `te_Optn_Name'
          with the values `OPTN_NAME_KEYWORD'.  If you have *not*
          specified a default value, the value `OPTN_NAME_UNDEFINED'
          will be inserted with the value zero.  The option will be
          initialized to that value.  You may now use this in your code
          as follows:

              te_Optn_Name opt = OPT_VALUE_OPTN_NAME;
              switch (opt) {
              case OPTN_NAME_UNDEFINED:  /* undefined things */ break;
              case OPTN_NAME_KEYWORD:    /* `keyword' things */ break;
              default: /* utterly impossible */ ;
              }

          AutoOpts produces a special purpose procedure for this option.

          If you have need for the string name of the selected keyword,
          you may obtain this with the macro,
          `OPT_OPTN_NAME_VAL2STR(val)'.  The value you pass would
          normally be `OPT_VALUE_OPTN_NAME', but anything with numeric
          value that is legal for `te_Optn_Name' may be passed.
          Anything out of range will result in the string,
          `"*INVALID*"' being returned.  The strings are read only.  It
          may be used as in:

              te_Optn_Name opt = OPT_VALUE_OPTN_NAME;
              printf( "you selected the %s keyword\n",
                      OPT_OPTN_NAME_VAL2STR(opt) );

    `set[-membership]'
          The argument must be a list of names each of which must match
          the strings "`all'", "`none'" or one of the keywords specified
          for this option.  `all' will turn on all membership bits and
          `none' will turn them all off.  Specifying one of the keywords
          will turn on the corresponding set membership bit.  Literal
          numbers may also be used and may, thereby, set or clear more
          than one bit.  Preceding a keyword or literal number with a
          bang (`!'  - exclamation point) will turn the bit(s) off.
          The number of keywords allowed is constrained by the number
          of bits in a pointer, as the bit set is kept in a `void*'.

          If, for example, you specified `first' in your list of
          keywords, then you can use the following code to test to see
          if either `first' or `all' was specified:

              uintptr_t opt = OPT_VALUE_OPTN_NAME;
              if (opt & OPTN_NAME_FIRST)
                  /* OPTN_NAME_FIRST bit was set */ ;

          AutoOpts produces a special purpose procedure for this option.

    `hier[archy]'
    `nest[ed]'
          This denotes an option with a structure-valued argument,
          a.k.a.  "subopts" in `getopts' terminology.  The argument is
          parsed and the values made available to the program via the
          find and find next calls (*Note libopts-optionFindValue::,
          *Note libopts-optionGetValue::, and *note
          libopts-optionFindNextValue::).

              tOptionValue * val = optionGetValue(VALUE_OPT_OPTN_NAME, "name");
              while (val != NULL) {
                process(val);
                val = optionNextValue(VALUE_OPT_OPTN_NAME, val);
                if (wrong_name(val, "name"))
                  break;
              }


`keyword'
     If the `arg-type' is `keyword' or `set-membership', then you must
     specify the list of keywords by a series of `keyword' entries.
     The interface file will contain values for `<OPTN_NAME>_<KEYWORD>'
     for each keyword entry.  `keyword' option types will have an
     enumeration and `set-membership' option types will have a set of
     unsigned long bits `#define'-d.  If there are more than 32 bits
     defined, the `#define' will set unsigned long long values and you
     best be running on a 64 bit platform.

`arg-optional'
     This attribute indicates that the user does not have to supply an
     argument for the option.  This is only valid if the ARG-TYPE is
     `string' or `keyword'.  If it is `keyword', then this attribute
     may also specify the default keyword to assume when the argument
     is not supplied.  If left empty, ARG-DEFAULT or the zero-valued
     keyword will be used.

`arg-default'
     This specifies the default value to be used when the option is not
     specified or preset.

`default'
     If your program processes its arguments in named option mode (See
     "long-opts" in *Note program attributes::), then you may select
     *one* of your options to be the default option.  Do so with this
     attribute.  The option so specified must have an `arg-type'
     specified, but not the `arg-optional' attribute.  That is to say,
     the option argument must be required.

     If you have done this, then any arguments that do not match an
     option name and do not contain an equal sign (`=') will be
     interpreted as an option argument to the default option.

`arg-range'
     If the `arg-type' is `number', then `arg-range's may be specified,
     too.  If you specify one or more of these option attributes, then
     AutoOpts will create a callback procedure for handling it.  The
     argument value supplied for the option must match one of the range
     entries.  Each arg-range should consist of either an integer by
     itself or an integer range.  The integer range is specified by one
     or two integers separated by the two character sequence, `->'.  Be
     sure to quote the entire range string.  The definitions parser will
     not accept the range syntax as a single string token.

     The generated procedure imposes the range constraints as follows:
        * A number by itself will match that one value.

        * The high end of the range may not be `INT_MIN', both for
          obvious reasons and because that value is used to indicate a
          single-valued match.

        * An omitted lower value implies a lower bound of INT_MIN.

        * An omitted upper value implies a upper bound of INT_MAX.

        * The argument value is required.  It may not be optional.

        * The value must match one of the entries.  If it can match
          more than one, then you have redundancies, but no harm will
          come of it.


File: autogen.info,  Node: Option Argument Handling,  Prev: Option Arguments,  Up: option attributes

7.5.5.7 Option Argument Handling
................................

AutoOpts will either specify or automatically generate callback
procedures for options that take specialized arguments.  The only
option argument types that are not specialized are plain string
arguments and no argument at all.  For options that fall into one of
those two categories, you may specify your own callback function, as
specified below.  If the option takes a string argument, then you may
specify that the option is to be handled by the `libopts' library
procedures `stackOptArg()' or `unstackOptArg()' (see below).  Finally,
`documentation' options (*Note Special Option Handling::) may also be
marked as settable and have special callback functions (either
`flag-code', `extract-code', or `call-proc').

`flag-code'
     statements to execute when the option is encountered.  The
     generated procedure will look like this:

         static void
         doOpt<name>( tOptions* pOptions, tOptDesc* pOptDesc )
         {
         <flag_code>
         }

     Only certain fields within the `tOptions' and `tOptDesc'
     structures may be accessed.  *Note Option Processing Data::.

`extract-code'
     This is effectively identical to `flag_code', except that the
     source is kept in the output file instead of the definitions file.
     A long comment is used to demarcate the code.  You must not modify
     that marker.  Before regenerating the option code file, the old
     file is renamed from MUMBLE.c to MUMBLE.c.save.  The template will
     be looking there for the text to copy into the new output file.

`call-proc'
     external procedure to call when option is encountered.  The calling
     sequence must conform to the sequence defined above for the
     generated procedure, `doOpt<name>'.  It has the same restrictions
     regarding the fields within the structures passed in as arguments.
     *Note Option Processing Data::.

`flag-proc'
     Name of another option whose `flag_code' can be executed when this
     option is encountered.

`stack-arg'
     Call a special library routine to stack the option's arguments.
     Special macros in the interface file are provided for determining
     how many of the options were found (`STACKCT_OPT(NAME)') and to
     obtain a pointer to a list of pointers to the argument values
     (`STACKLST_OPT(NAME)').  Obviously, for a stackable argument, the
     `max' attribute needs to be set higher than `1'.

     If this stacked argument option has a disablement prefix, then the
     entire stack of arguments will be cleared by specifying the option
     with that disablement prefix.

`unstack-arg'
     Call a special library routine to remove ("unstack") strings from
     a `stack-arg' option stack.  This attribute must name the option
     that is to be "unstacked".  Neither this option nor the stacked
     argument option it references may be equivalenced to another
     option.


File: autogen.info,  Node: documentation attributes,  Next: automatic options,  Prev: option attributes,  Up: Option Definitions

7.5.6 Man and Info doc Attributes
---------------------------------

AutoOpts includes AutoGen templates for producing abbreviated man pages
and for producing the invoking section of an info document.  To take
advantage of these templates, you must add several attributes to your
option definitions.

`doc'
     First, every `flag' definition _other than_ "documentation"
     definitions, must have a `doc' attribute defined.  If the option
     takes an argument, then it will need an `arg-name' attribute as
     well.  The `doc' text should be in plain sentences with minimal
     formatting.  The Texinfo commands `@code', and `@var' will have
     its enclosed text made into *\fB* entries in the man page, and the
     `@file' text will be made into *\fI* entries.  The `arg-name'
     attribute is used to display the option's argument in the man page.

     Options marked with the "documentation" attribute are for
     documenting the usage text.  All other options should have the
     "doc" attribute in order to document the usage of the option in
     the generated man pages.

`arg-name'
     If an option has an argument, the argument should have a name for
     documentation purposes.  It will default to `arg-type', but it
     will likely be clearer with something else like, `file-name'
     instead of `string' (the type).

`prog-man-descrip'
`prog-info-descrip'
     Then, you need to supply a brief description of what your program
     does.  If you already have a `detail' definition, this may be
     sufficient.  If not, or if you need special formatting for one of
     the manual formats, then you will need either a definition for
     `prog-man-descrip' or `prog-info-descrip' or both.  These will be
     inserted verbatim in the man page document and the info document,
     respectively.

`man-doc'
     Finally, if you need to add man page sections like `SEE ALSO' or
     `USAGE' or other, put that text in a `man-doc' definition.  This
     text will be inserted verbatim in the man page after the `OPTIONS'
     section and before the `AUTHOR' section.


File: autogen.info,  Node: automatic options,  Next: standard options,  Prev: documentation attributes,  Up: Option Definitions

7.5.7 Automatically Supported Options
-------------------------------------

AutoOpts provides automated support for five options.  `help' and
`more-help' are always provided.  `version' is provided if `version' is
defined in the option definitions *Note program attributes::.
`save-opts' and `load-opts' are provided if at least one `homerc' is
defined *Note program attributes::.

   Below are the option names and flag values.  The flags are activated
if and only if at least one user-defined option also uses a flag value.
These flags may be deleted or changed to characters of your choosing
by specifying `xxx-value = "y";', where `xxx' is one of the five names
below and `y' is either empty or the character of your choice.  For
example, to change the help flag from `?' to `h', specify `help-value =
"h";'; and to require that `save-opts' be specified only with its long
option name, specify `save-opts-value = "";'.

`help -?'
     This option will immediately invoke the `USAGE()' procedure and
     display the usage line, a description of each option with its
     description and option usage information.  This is followed by the
     contents of the definition of the `detail' text macro.

`more-help -!'
     This option is identical to the `help' option, except that the
     output is passed through a pager program.  (`more' by default, or
     the program identified by the `PAGER' environment variable.)

`version -v'
     This will print the program name, title and version.  If it is
     followed by the letter `c' and a value for `copyright' and `owner'
     have been provided, then the copyright will be printed, too.  If
     it is followed by the letter `n', then the full copyright notice
     (if available) will be printed.

`save-opts ->'
     This option will cause the option state to be printed in the
     configuration file format when option processing is done but not
     yet verified for consistency.  The program will terminate
     successfully without running when this has completed.  Note that
     for most shells you will have to quote or escape the flag
     character to restrict special meanings to the shell.

     The output file will be the configuration file name (default or
     provided by `rcfile') in the last directory named in a `homerc'
     definition.

     This option may be set from within your program by invoking the
     "`SET_OPT_SAVE_OPTS(filename)'" macro (*note SET_OPT_name::).
     Invoking this macro will set the file name for saving the option
     processing state, but the state will *not* actually be saved.  You
     must call `optionSaveFile' to do that (*note
     libopts-optionSaveFile::).  *CAVEAT:* if, after invoking this
     macro, you call `optionProcess', the option processing state will
     be saved to this file and `optionProcess' will not return.  You
     may wish to invoke `CLEAR_OPT( SAVE_OPTS )' (*note CLEAR_OPT::)
     beforehand.

`load-opts -<'
     This option will load options from the named file.  They will be
     treated exactly as if they were loaded from the normally found
     configuration files, but will not be loaded until the option is
     actually processed.  This can also be used within another
     configuration file, causing them to nest.

     It is ultimately intended that specifying the option,
     `no-load-opts' will suppress the processing of configuration files
     and environment variables.  To do this, AutoOpts must first
     implement pre-scanning of the options, environment and config
     files.


File: autogen.info,  Node: standard options,  Prev: automatic options,  Up: Option Definitions

7.5.8 Library of Standard Options
---------------------------------

AutoOpts has developed a set of standardized options.  You may
incorporate these options in your program simply by _first_ adding a
`#define' for the options you want, and then the line,

    #include stdoptions.def

in your option definitions.  The supported options are specified thus:

    #define DEBUG
    #define DIRECTORY
    #define DRY_RUN
    #define INPUT
    #define INTERACTIVE
    #define OUTPUT
    #define WARN

    #define SILENT
    #define QUIET
    #define BRIEF
    #define VERBOSE

   By default, only the long form of the option will be available.  To
specify the short (flag) form, suffix these names with `_FLAG'.  e.g.,

    #define DEBUG_FLAG

   `--silent', `--quiet', `--brief' and `--verbose' are related in that
they all indicate some level of diagnostic output.  These options are
all designed to conflict with each other.  Instead of four different
options, however, several levels can be incorporated by `#define'-ing
`VERBOSE_ENUM'.  In conjunction with `VERBOSE', it incorporates the
notion of 5 levels in an enumeration: `silent', `quiet', `brief',
`informative' and `verbose'; with the default being `brief'.

   Here is an example program that uses the following set of
definitions:

    AutoGen Definitions options;

    prog-name  = default-test;
    prog-title = 'Default Option Example';
    homerc     = '$$/../share/default-test', '$HOME', '.';
    environrc;
    long-opts;
    gnu-usage;
    version    = '1.0';
    main = {
      main-type = shell-process;
    };
    #define DEBUG_FLAG
    #define WARN_FLAG
    #define WARN_LEVEL
    #define VERBOSE_FLAG
    #define VERBOSE_ENUM
    #define DRY_RUN_FLAG
    #define OUTPUT_FLAG
    #define INPUT_FLAG
    #define DIRECTORY_FLAG
    #define INTERACTIVE_FLAG
    #include stdoptions.def

Running a few simple commands on that definition file:

    autogen default-test.def
    copts="-DTEST_DEFAULT_TEST_OPTS `autoopts-config cflags`"
    lopts="`autoopts-config ldflags`"
    cc -o default-test ${copts} default-test.c ${lopts}

Yields a program which, when run with `--help', prints out:

    default-test - Default Option Example - Ver. 1.0
    USAGE:  default-test [ -<flag> [<val>] | --<name>[{=| }<val>] ]...


    The following options are commonly used and are provided and supported
    by AutoOpts:

       -D, --debug                run program with debugging info
       -V, --verbose=KWd          run program with progress info
       -w, --warn=num             specify a warning-level threshhold
                                    - disabled as --no-warn
       -d, --dry-run              program will make no changes
       -I, --interactive=str      prompt for confirmation
       -i, --input=str            redirect input from file
       -o, --output=str           redirect output to file
       -d, --directory=str        use specified dir for I/O

    version and help options:

       -v, --version[=arg]        Output version information and exit
       -?, --help                 Display usage information and exit
       -!, --more-help            Extended usage information passed thru pager
       ->, --save-opts[=arg]      Save the option state to a config file
       -<, --load-opts=str        Load options from a config file
                                    - disabled as --no-load-opts
                                    - may appear multiple times

    Options are specified by doubled hyphens and their name
    or by a single hyphen and the flag character.

    The following option preset mechanisms are supported:
     - reading file $$/../share/default-test
     - reading file $HOME
     - reading file /home/bkorb/ag/ag/doc/.default_testrc
     - examining environment variables named DEFAULT_TEST_*

    The valid "verbose" option keywords are:
      silent quiet brief informative verbose


File: autogen.info,  Node: AutoOpts API,  Next: option descriptor,  Prev: Option Definitions,  Up: AutoOpts

7.6 Programmatic Interface
==========================

The user interface for access to the argument information is completely
defined in the generated header file and in the portions of the
distributed file "options.h" that are marked "public".

   In the following macros, text marked `<NAME>' or `name' is the name
of the option *in upper case* and *segmented with underscores `_'*.
The macros and enumerations defined in the options header (interface)
file are used as follows:

   To see how these `#define' macros are used in a program, the reader
is referred to the several `opts.h' files included with the AutoGen
sources.

* Menu:

* Option Processing Data::  Data for Option Processing
* CLEAR_OPT::               CLEAR_OPT( <NAME> ) - Clear Option Markings
* COUNT_OPT::               COUNT_OPT( <NAME> ) - Definition Count
* DESC::                    DESC( <NAME> ) - Option Descriptor
* DISABLE_OPT_name::        DISABLE_OPT_name - Disable an option
* ENABLED_OPT::             ENABLED_OPT( <NAME> ) - Is Option Enabled?
* ERRSKIP_OPTERR::          ERRSKIP_OPTERR - Ignore Option Errors
* ERRSTOP_OPTERR::          ERRSTOP_OPTERR - Stop on Errors
* HAVE_OPT::                HAVE_OPT( <NAME> ) - Have this option?
* ISSEL_OPT::               ISSEL_OPT( <NAME> ) - Is Option Selected?
* ISUNUSED_OPT::            ISUNUSED_OPT( <NAME> ) - Never Specified?
* OPTION_CT::               OPTION_CT - Full Count of Options
* OPT_ARG::                 OPT_ARG( <NAME> ) - Option Argument String
* OPT_VALUE_name::          OPT_VALUE_name - Option Argument Value
* RESTART_OPT::             RESTART_OPT( n ) - Resume Option Processing
* SET_OPT_name::            SET_OPT_name - Force an option to be set
* STACKCT_OPT::             STACKCT_OPT( <NAME> ) - Stacked Arg Count
* STACKLST_OPT::            STACKLST_OPT( <NAME> ) - Argument Stack
* START_OPT::               START_OPT - Restart Option Processing
* STATE_OPT::               STATE_OPT( <NAME> ) - Option State
* USAGE::                   USAGE( exit-code ) - Usage invocation macro
* VALUE_OPT_name::          VALUE_OPT_name - Option Flag Value
* VERSION::                 VERSION - Version and Full Version
* WHICH_IDX_name::          WHICH_IDX_name - Which Equivalenced Index
* WHICH_OPT_name::          WHICH_OPT_name - Which Equivalenced Option
* teOptIndex::              teOptIndex - Option Index and Enumeration
* OPTIONS_STRUCT_VERSION::  OPTIONS_STRUCT_VERSION - active version
* libopts procedures::      libopts External Procedures


File: autogen.info,  Node: Option Processing Data,  Next: CLEAR_OPT,  Up: AutoOpts API

7.6.1 Data for Option Processing
--------------------------------

This section describes the data that may be accessed from within the
option processing callback routines.  The following fields may be used
in the following ways and may be used for read only.  The first set is
addressed from the `tOptDesc*' pointer:

`optIndex'

`optValue'
     These may be used by option procedures to determine which option
     they are working on (in case they handle several options).

`optActualIndex'

`optActualValue'
     These may be used by option procedures to determine which option
     was used to set the current option.  This may be different from
     the above if the options are members of an equivalence class.

`optOccCt'
     If AutoOpts is processing command line arguments, then this value
     will contain the current occurrence count.  During the option
     preset phase (reading configuration files and examining
     environment variables), the value is zero.

`fOptState'
     The field may be tested for the following bit values (prefix each
     name with `OPTST_', e.g. `OPTST_INIT'):

    `INIT'
          Initial compiled value.  As a bit test, it will always yield
          FALSE.

    `SET'
          The option was set via the `SET_OPT()' macro.

    `PRESET'
          The option was set via a configuration file.

    `DEFINED'
          The option was set via a command line option.

    `SET_MASK'
          This is a mask of flags that show the set state, one of the
          above four values.

    `EQUIVALENCE'
          This bit is set when the option was selected by an
          equivalenced option.

    `DISABLED'
          This bit is set if the option is to be disabled.  (Meaning it
          was a long option prefixed by the disablement prefix, or the
          option has not been specified yet and initializes as
          `disabled'.)

     As an example of how this might be used, in AutoGen I want to allow
     template writers to specify that the template output can be left
     in a writable or read-only state.  To support this, there is a
     Guile function named `set-writable' (*note SCM set-writable::).
     Also, I provide for command options `--writable' and
     `--not-writable'.  I give precedence to command line and RC file
     options, thus:

         switch (STATE_OPT( WRITABLE )) {
         case OPTST_DEFINED:
         case OPTST_PRESET:
             fprintf( stderr, zOverrideWarn, pCurTemplate->pzFileName,
                      pCurMacro->lineNo );
             break;

         default:
             if (gh_boolean_p( set ) && (set == SCM_BOOL_F))
                 CLEAR_OPT( WRITABLE );
             else
                 SET_OPT_WRITABLE;
         }

`pzLastArg'
     Pointer to the latest argument string.  BEWARE If the argument type
     is numeric, an enumeration or a bit mask, then this will be the
     argument *value* and not a pointer to a string.

   The following two fields are addressed from the `tOptions*' pointer:

`pzProgName'
     Points to a NUL-terminated string containing the current program
     name, as retrieved from the argument vector.

`pzProgPath'
     Points to a NUL-terminated string containing the full path of the
     current program, as retrieved from the argument vector.  (If
     available on your system.)


   Note  these fields get filled in during the first call to
`optionProcess()'.  All other fields are private, for the exclusive use
of AutoOpts code and are subject to change.


File: autogen.info,  Node: CLEAR_OPT,  Next: COUNT_OPT,  Prev: Option Processing Data,  Up: AutoOpts API

7.6.2 CLEAR_OPT( <NAME> ) - Clear Option Markings
-------------------------------------------------

Make as if the option had never been specified.  `HAVE_OPT(<NAME>)'
will yield `FALSE' after invoking this macro.


File: autogen.info,  Node: COUNT_OPT,  Next: DESC,  Prev: CLEAR_OPT,  Up: AutoOpts API

7.6.3 COUNT_OPT( <NAME> ) - Definition Count
--------------------------------------------

This macro will tell you how many times the option was specified on the
command line.  It does not include counts of preset options.

    if (COUNT_OPT( NAME ) != desired-count) {
        make-an-undesirable-message.
    }


File: autogen.info,  Node: DESC,  Next: DISABLE_OPT_name,  Prev: COUNT_OPT,  Up: AutoOpts API

7.6.4 DESC( <NAME> ) - Option Descriptor
----------------------------------------

This macro is used internally by other AutoOpt macros.  It is not for
general use.  It is used to obtain the option description corresponding
to its *UPPER CASED* option name argument.  This is primarily used in
other macro definitions.


File: autogen.info,  Node: DISABLE_OPT_name,  Next: ENABLED_OPT,  Prev: DESC,  Up: AutoOpts API

7.6.5 DISABLE_OPT_name - Disable an option
------------------------------------------

This macro is emitted if it is both settable and it can be disabled.
If it cannot be disabled, it may always be CLEAR-ed (see above).

   The form of the macro will actually depend on whether the option is
equivalenced to another, and/or has an assigned handler procedure.
Unlike the `SET_OPT' macro, this macro does not allow an option
argument.

    DISABLE_OPT_NAME;


File: autogen.info,  Node: ENABLED_OPT,  Next: ERRSKIP_OPTERR,  Prev: DISABLE_OPT_name,  Up: AutoOpts API

7.6.6 ENABLED_OPT( <NAME> ) - Is Option Enabled?
------------------------------------------------

Yields true if the option defaults to disabled and `ISUNUSED_OPT()'
would yield true.  It also yields true if the option has been specified
with a disablement prefix, disablement value or the `DISABLE_OPT_NAME'
macro was invoked.


File: autogen.info,  Node: ERRSKIP_OPTERR,  Next: ERRSTOP_OPTERR,  Prev: ENABLED_OPT,  Up: AutoOpts API

7.6.7 ERRSKIP_OPTERR - Ignore Option Errors
-------------------------------------------

When it is necessary to continue (return to caller) on option errors,
invoke this option.  It is reversible.  *Note ERRSTOP_OPTERR::.


File: autogen.info,  Node: ERRSTOP_OPTERR,  Next: HAVE_OPT,  Prev: ERRSKIP_OPTERR,  Up: AutoOpts API

7.6.8 ERRSTOP_OPTERR - Stop on Errors
-------------------------------------

After invoking this macro, if `optionProcess()' encounters an error, it
will call `exit(1)' rather than return.  This is the default processing
mode.  It can be overridden by specifying `allow-errors' in the
definitions file, or invoking the macro *Note ERRSKIP_OPTERR::.


File: autogen.info,  Node: HAVE_OPT,  Next: ISSEL_OPT,  Prev: ERRSTOP_OPTERR,  Up: AutoOpts API

7.6.9 HAVE_OPT( <NAME> ) - Have this option?
--------------------------------------------

This macro yields true if the option has been specified in any fashion
at all.  It is used thus:

    if (HAVE_OPT( NAME )) {
        <do-things-associated-with-opt-name>;
    }


File: autogen.info,  Node: ISSEL_OPT,  Next: ISUNUSED_OPT,  Prev: HAVE_OPT,  Up: AutoOpts API

7.6.10 ISSEL_OPT( <NAME> ) - Is Option Selected?
------------------------------------------------

This macro yields true if the option has been specified either on the
command line or via a SET/DISABLE macro.


File: autogen.info,  Node: ISUNUSED_OPT,  Next: OPTION_CT,  Prev: ISSEL_OPT,  Up: AutoOpts API

7.6.11 ISUNUSED_OPT( <NAME> ) - Never Specified?
------------------------------------------------

This macro yields true if the option has never been specified, or has
been cleared via the `CLEAR_OPT()' macro.


File: autogen.info,  Node: OPTION_CT,  Next: OPT_ARG,  Prev: ISUNUSED_OPT,  Up: AutoOpts API

7.6.12 OPTION_CT - Full Count of Options
----------------------------------------

The full count of all options, both those defined and those generated
automatically by AutoOpts.  This is primarily used to initialize the
program option descriptor structure.


File: autogen.info,  Node: OPT_ARG,  Next: OPT_VALUE_name,  Prev: OPTION_CT,  Up: AutoOpts API

7.6.13 OPT_ARG( <NAME> ) - Option Argument String
-------------------------------------------------

The option argument value as a pointer to string.  Note that argument
values that have been specified as numbers are stored as numbers or
keywords.  For such options, use instead the `OPT_VALUE_name' define.
It is used thus:

    if (HAVE_OPT( NAME )) {
        char* p = OPT_ARG( NAME );
        <do-things-with-opt-name-argument-string>;
    }


File: autogen.info,  Node: OPT_VALUE_name,  Next: RESTART_OPT,  Prev: OPT_ARG,  Up: AutoOpts API

7.6.14 OPT_VALUE_name - Option Argument Value
---------------------------------------------

This macro gets emitted only for options that take numeric, keyword or
set membership arguments.  The macro yields a word-sized integer
containing the enumeration or numeric value of the option argument.

    int opt_val = OPT_VALUE_NAME;


File: autogen.info,  Node: RESTART_OPT,  Next: SET_OPT_name,  Prev: OPT_VALUE_name,  Up: AutoOpts API

7.6.15 RESTART_OPT( n ) - Resume Option Processing
--------------------------------------------------

If option processing has stopped (either because of an error or
something was encountered that looked like a program argument), it can
be resumed by providing this macro with the index `n' of the next
option to process and calling `optionProcess()' again.


File: autogen.info,  Node: SET_OPT_name,  Next: STACKCT_OPT,  Prev: RESTART_OPT,  Up: AutoOpts API

7.6.16 SET_OPT_name - Force an option to be set
-----------------------------------------------

This macro gets emitted only when the given option has the `settable'
attribute specified.

   The form of the macro will actually depend on whether the option is
equivalenced to another, has an option argument and/or has an assigned
handler procedure.  If the option has an argument, then this macro will
too.  Beware that the argument is not reallocated, so the value must not
be on the stack or deallocated in any other way for as long as the value
might get referenced.

   If you have supplied at least one `homerc' file (*note program
attributes::), this macro will be emitted for the `--save-opts' option.

    SET_OPT_SAVE_OPTS( "filename" );

*Note automatic options::, for a discussion of the implications of using
this particular example.


File: autogen.info,  Node: STACKCT_OPT,  Next: STACKLST_OPT,  Prev: SET_OPT_name,  Up: AutoOpts API

7.6.17 STACKCT_OPT( <NAME> ) - Stacked Arg Count
------------------------------------------------

When the option handling attribute is specified as `stack_arg', this
macro may be used to determine how many of them actually got stacked.

   Do not use this on options that have not been stacked or has not been
specified (the `stack_arg' attribute must have been specified, and
`HAVE_OPT(<NAME>)' must yield TRUE).  Otherwise, you will likely seg
fault.

    if (HAVE_OPT( NAME )) {
        int     ct = STACKCT_OPT(  NAME );
        char**  pp = STACKLST_OPT( NAME );

        do  {
            char* p = *pp++;
            do-things-with-p;
        } while (--ct > 0);
    }


File: autogen.info,  Node: STACKLST_OPT,  Next: START_OPT,  Prev: STACKCT_OPT,  Up: AutoOpts API

7.6.18 STACKLST_OPT( <NAME> ) - Argument Stack
----------------------------------------------

The address of the list of pointers to the option arguments.  The
pointers are ordered by the order in which they were encountered in the
option presets and command line processing.

   Do not use this on options that have not been stacked or has not been
specified (the `stack_arg' attribute must have been specified, and
`HAVE_OPT(<OPTION>)' must yield TRUE).  Otherwise, you will likely seg
fault.

    if (HAVE_OPT( NAME )) {
        int     ct = STACKCT_OPT(  NAME );
        char**  pp = STACKLST_OPT( NAME );

        do  {
            char* p = *pp++;
            do-things-with-p;
        } while (--ct > 0);
    }


File: autogen.info,  Node: START_OPT,  Next: STATE_OPT,  Prev: STACKLST_OPT,  Up: AutoOpts API

7.6.19 START_OPT - Restart Option Processing
--------------------------------------------

This is just a shortcut for RESTART_OPT(1) (*Note RESTART_OPT::.)


File: autogen.info,  Node: STATE_OPT,  Next: USAGE,  Prev: START_OPT,  Up: AutoOpts API

7.6.20 STATE_OPT( <NAME> ) - Option State
-----------------------------------------

If you need to know if an option was set because of presetting actions
(configuration file processing or environment variables), versus a
command line entry versus one of the SET/DISABLE macros, then use this
macro.  It will yield one of four values: `OPTST_INIT', `OPTST_SET',
`OPTST_PRESET' or `OPTST_DEFINED'.  It is used thus:

    switch (STATE_OPT( NAME )) {
        case OPTST_INIT:
            not-preset, set or on the command line.  (unless CLEAR-ed)

        case OPTST_SET:
            option set via the SET_OPT_NAME() macro.

        case OPTST_PRESET:
            option set via an configuration file or environment variable

        case OPTST_DEFINED:
            option set via a command line option.

        default:
            cannot happen :)
    }


File: autogen.info,  Node: USAGE,  Next: VALUE_OPT_name,  Prev: STATE_OPT,  Up: AutoOpts API

7.6.21 USAGE( exit-code ) - Usage invocation macro
--------------------------------------------------

This macro invokes the procedure registered to display the usage text.
Normally, this will be `optionUsage' from the AutoOpts library, but you
may select another procedure by specifying `usage = "proc_name"'
program attribute.  This procedure must take two arguments  first, a
pointer to the option descriptor, and second the exit code.  The macro
supplies the option descriptor automatically.  This routine is expected
to call `exit(3)' with the provided exit code.

   The `optionUsage' routine also behaves differently depending on the
exit code.  If the exit code is zero, it is assumed that assistance has
been requested.  Consequently, a little more information is provided
than when displaying usage and exiting with a non-zero exit code.


File: autogen.info,  Node: VALUE_OPT_name,  Next: VERSION,  Prev: USAGE,  Up: AutoOpts API

7.6.22 VALUE_OPT_name - Option Flag Value
-----------------------------------------

This is a #define for the flag character used to specify an option on
the command line.  If `value' was not specified for the option, then it
is a unique number associated with the option.  `option value' refers
to this value, `option argument' refers to the (optional) argument to
the option.

    switch (WHICH_OPT_OTHER_OPT) {
    case VALUE_OPT_NAME:
        this-option-was-really-opt-name;
    case VALUE_OPT_OTHER_OPT:
        this-option-was-really-other-opt;
    }


File: autogen.info,  Node: VERSION,  Next: WHICH_IDX_name,  Prev: VALUE_OPT_name,  Up: AutoOpts API

7.6.23 VERSION - Version and Full Version
-----------------------------------------

If the `version' attribute is defined for the program, then a
stringified version will be #defined as PROGRAM_VERSION and
PROGRAM_FULL_VERSION.  PROGRAM_FULL_VERSION is used for printing the
program version in response to the version option.  The version option
is automatically supplied in response to this attribute, too.

   You may access PROGRAM_VERSION via `programOptions.pzFullVersion'.


File: autogen.info,  Node: WHICH_IDX_name,  Next: WHICH_OPT_name,  Prev: VERSION,  Up: AutoOpts API

7.6.24 WHICH_IDX_name - Which Equivalenced Index
------------------------------------------------

This macro gets emitted only for equivalenced-to options.  It is used to
obtain the index for the one of the several equivalence class members
set the equivalenced-to option.

    switch (WHICH_IDX_OTHER_OPT) {
    case INDEX_OPT_NAME:
        this-option-was-really-opt-name;
    case INDEX_OPT_OTHER_OPT:
        this-option-was-really-other-opt;
    }


File: autogen.info,  Node: WHICH_OPT_name,  Next: teOptIndex,  Prev: WHICH_IDX_name,  Up: AutoOpts API

7.6.25 WHICH_OPT_name - Which Equivalenced Option
-------------------------------------------------

This macro gets emitted only for equivalenced-to options.  It is used to
obtain the value code for the one of the several equivalence class
members set the equivalenced-to option.

    switch (WHICH_OPT_OTHER_OPT) {
    case VALUE_OPT_NAME:
        this-option-was-really-opt-name;
    case VALUE_OPT_OTHER_OPT:
        this-option-was-really-other-opt;
    }


File: autogen.info,  Node: teOptIndex,  Next: OPTIONS_STRUCT_VERSION,  Prev: WHICH_OPT_name,  Up: AutoOpts API

7.6.26 teOptIndex - Option Index and Enumeration
------------------------------------------------

This enum defines the complete set of options, both user specified and
automatically provided.  This can be used, for example, to distinguish
which of the equivalenced options was actually used.

    switch (pOptDesc->optActualIndex) {
    case INDEX_OPT_FIRST:
        stuff;
    case INDEX_OPT_DIFFERENT:
        different-stuff;
    default:
        unknown-things;
    }


File: autogen.info,  Node: OPTIONS_STRUCT_VERSION,  Next: libopts procedures,  Prev: teOptIndex,  Up: AutoOpts API

7.6.27 OPTIONS_STRUCT_VERSION - active version
----------------------------------------------

You will not actually need to reference this value, but you need to be
aware that it is there.  It is the first value in the option descriptor
that you pass to `optionProcess'.  It contains a magic number and
version information.  Normally, you should be able to work with a more
recent option library than the one you compiled with.  However, if the
library is changed incompatibly, then the library will detect the out of
date magic marker, explain the difficulty and exit.  You will then need
to rebuild and recompile your option definitions.  This has rarely been
necessary.


File: autogen.info,  Node: libopts procedures,  Prev: OPTIONS_STRUCT_VERSION,  Up: AutoOpts API

7.6.28 libopts External Procedures
----------------------------------

These are the routines that libopts users may call directly from their
code.  There are several other routines that can be called by code
generated by the libopts option templates, but they are not to be
called from any other user code.  The `options.h' header is fairly
clear about this, too.

* Menu:

* libopts-ao_string_tokenize:: ao_string_tokenize
* libopts-configFileLoad::    configFileLoad
* libopts-optionFileLoad::    optionFileLoad
* libopts-optionFindNextValue:: optionFindNextValue
* libopts-optionFindValue::   optionFindValue
* libopts-optionFree::        optionFree
* libopts-optionGetValue::    optionGetValue
* libopts-optionLoadLine::    optionLoadLine
* libopts-optionNextValue::   optionNextValue
* libopts-optionOnlyUsage::   optionOnlyUsage
* libopts-optionProcess::     optionProcess
* libopts-optionRestore::     optionRestore
* libopts-optionSaveFile::    optionSaveFile
* libopts-optionSaveState::   optionSaveState
* libopts-optionUnloadNested:: optionUnloadNested
* libopts-optionVersion::     optionVersion
* libopts-pathfind::          pathfind
* libopts-strequate::         strequate
* libopts-streqvcmp::         streqvcmp
* libopts-streqvmap::         streqvmap
* libopts-strneqvcmp::        strneqvcmp
* libopts-strtransform::      strtransform

   This subsection was automatically generated by AutoGen using
extracted information and the aginfo3.tpl template.


File: autogen.info,  Node: libopts-ao_string_tokenize,  Next: libopts-configFileLoad,  Up: libopts procedures

7.6.28.1 ao_string_tokenize
...........................

tokenize an input string

Usage:
    token_list_t* res = ao_string_tokenize( string );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     string      `char const*'  string to be tokenized
     returns     token_list_t*  pointer to a structure that lists each
                                token

   This function will convert one input string into a list of strings.
The list of strings is derived by separating the input based on white
space separation.  However, if the input contains either single or
double quote characters, then the text after that character up to a
matching quote will become the string in the list.

   The returned pointer should be deallocated with `free(3C)' when are
done using the data.  The data are placed in a single block of
allocated memory.  Do not deallocate individual token/strings.

   The structure pointed to will contain at least these two fields:
`tkn_ct'
     The number of tokens found in the input string.

`tok_list'
     An array of `tkn_ct + 1' pointers to substring tokens, with the
     last pointer set to NULL.

   There are two types of quoted strings: single quoted (`'') and
double quoted (`"').  Singly quoted strings are fairly raw in that
escape characters (`\\') are simply another character, except when
preceding the following characters:
    `\\'  double backslashes reduce to one
    `''   incorporates the single quote into the string
    `\n'  suppresses both the backslash and newline character

   Double quote strings are formed according to the rules of string
constants in ANSI-C programs.

   NULL is returned and `errno' will be set to indicate the problem:
   * `EINVAL' - There was an unterminated quoted string.

   * `ENOENT' - The input string was empty.

   * `ENOMEM' - There is not enough memory.


File: autogen.info,  Node: libopts-configFileLoad,  Next: libopts-optionFileLoad,  Prev: libopts-ao_string_tokenize,  Up: libopts procedures

7.6.28.2 configFileLoad
.......................

parse a configuration file

Usage:
    const tOptionValue* res = configFileLoad( pzFile );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pzFile      `char const*'  the file to load
     returns     const          An allocated, compound value structure
                 tOptionValue*  

   This routine will load a named configuration file and parse the text
as a hierarchically valued option.  The option descriptor created from
an option definition file is not used via this interface.  The returned
value is "named" with the input file name and is of type
"`OPARG_TYPE_HIERARCHY'".  It may be used in calls to
`optionGetValue()', `optionNextValue()' and `optionUnloadNested()'.

   If the file cannot be loaded or processed, `NULL' is returned and
ERRNO is set.  It may be set by a call to either `open(2)' `mmap(2)' or
other file system calls, or it may be:
   * `ENOENT' - the file was empty.

   * `EINVAL' - the file contents are invalid - not properly formed.

   * `ENOMEM' - not enough memory to allocate the needed structures.


File: autogen.info,  Node: libopts-optionFileLoad,  Next: libopts-optionFindNextValue,  Prev: libopts-configFileLoad,  Up: libopts procedures

7.6.28.3 optionFileLoad
.......................

Load the locatable config files, in order

Usage:
    int res = optionFileLoad( pOpts, pzProg );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOpts       `tOptions*'    program options descriptor
     pzProg      `char const*'  program name
     returns     int            0 -> SUCCESS, -1 -> FAILURE

   This function looks in all the specified directories for a
configuration file ("rc" file or "ini" file) and processes any found
twice.  The first time through, they are processed in reverse order
(last file first).  At that time, only "immediate action" configurables
are processed.  For example, if the last named file specifies not
processing any more configuration files, then no more configuration
files will be processed.  Such an option in the *first* named directory
will have no effect.

   Once the immediate action configurables have been handled, then the
directories are handled in normal, forward order.  In that way, later
config files can override the settings of earlier config files.

   See the AutoOpts documentation for a thorough discussion of the
config file format.

   Configuration files not found or not decipherable are simply ignored.

   Returns the value, "-1" if the program options descriptor is out of
date or indecipherable.  Otherwise, the value "0" will always be
returned.


File: autogen.info,  Node: libopts-optionFindNextValue,  Next: libopts-optionFindValue,  Prev: libopts-optionFileLoad,  Up: libopts procedures

7.6.28.4 optionFindNextValue
............................

find a hierarcicaly valued option instance

Usage:
    const tOptionValue* res = optionFindNextValue( pOptDesc, pPrevVal, name, value );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOptDesc    `const         an option with a nested arg type
                 tOptDesc*'     
     pPrevVal    `const         the last entry
                 tOptionValue*' 
     name        `char const*'  name of value to find
     value       `char const*'  the matching value
     returns     const          a compound value structure
                 tOptionValue*  

   This routine will find the next entry in a nested value option or
configurable.  It will search through the list and return the next entry
that matches the criteria.

   The returned result is NULL and errno is set:
   * `EINVAL' - the `pOptValue' does not point to a valid hierarchical
     option value.

   * `ENOENT' - no entry matched the given name.


File: autogen.info,  Node: libopts-optionFindValue,  Next: libopts-optionFree,  Prev: libopts-optionFindNextValue,  Up: libopts procedures

7.6.28.5 optionFindValue
........................

find a hierarcicaly valued option instance

Usage:
    const tOptionValue* res = optionFindValue( pOptDesc, name, value );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOptDesc    `const         an option with a nested arg type
                 tOptDesc*'     
     name        `char const*'  name of value to find
     value       `char const*'  the matching value
     returns     const          a compound value structure
                 tOptionValue*  

   This routine will find an entry in a nested value option or
configurable.  It will search through the list and return a matching
entry.

   The returned result is NULL and errno is set:
   * `EINVAL' - the `pOptValue' does not point to a valid hierarchical
     option value.

   * `ENOENT' - no entry matched the given name.


File: autogen.info,  Node: libopts-optionFree,  Next: libopts-optionGetValue,  Prev: libopts-optionFindValue,  Up: libopts procedures

7.6.28.6 optionFree
...................

free allocated option processing memory

Usage:
    optionFree( pOpts );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOpts       `tOptions*'    program options descriptor

   AutoOpts sometimes allocates memory and puts pointers to it in the
option state structures.  This routine deallocates all such memory.

   As long as memory has not been corrupted, this routine is always
successful.


File: autogen.info,  Node: libopts-optionGetValue,  Next: libopts-optionLoadLine,  Prev: libopts-optionFree,  Up: libopts procedures

7.6.28.7 optionGetValue
.......................

get a specific value from a hierarcical list

Usage:
    const tOptionValue* res = optionGetValue( pOptValue, valueName );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOptValue   `const         a hierarchcal value
                 tOptionValue*' 
     valueName   `char const*'  name of value to get
     returns     const          a compound value structure
                 tOptionValue*  

   This routine will find an entry in a nested value option or
configurable.  If "valueName" is NULL, then the first entry is
returned.  Otherwise, the first entry with a name that exactly matches
the argument will be returned.

   The returned result is NULL and errno is set:
   * `EINVAL' - the `pOptValue' does not point to a valid hierarchical
     option value.

   * `ENOENT' - no entry matched the given name.


File: autogen.info,  Node: libopts-optionLoadLine,  Next: libopts-optionNextValue,  Prev: libopts-optionGetValue,  Up: libopts procedures

7.6.28.8 optionLoadLine
.......................

process a string for an option name and value

Usage:
    optionLoadLine( pOpts, pzLine );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOpts       `tOptions*'    program options descriptor
     pzLine      `char const*'  NUL-terminated text

   This is a client program callable routine for setting options from,
for example, the contents of a file that they read in.  Only one option
may appear in the text.  It will be treated as a normal (non-preset)
option.

   When passed a pointer to the option struct and a string, it will find
the option named by the first token on the string and set the option
argument to the remainder of the string.  The caller must NUL terminate
the string.  Any embedded new lines will be included in the option
argument.  If the input looks like one or more quoted strings, then the
input will be "cooked".  The "cooking" is identical to the string
formation used in AutoGen definition files (*note basic expression::),
except that you may not use backquotes.

   Invalid options are silently ignored.  Invalid option arguments will
cause a warning to print, but the function should return.


File: autogen.info,  Node: libopts-optionNextValue,  Next: libopts-optionOnlyUsage,  Prev: libopts-optionLoadLine,  Up: libopts procedures

7.6.28.9 optionNextValue
........................

get the next value from a hierarchical list

Usage:
    const tOptionValue* res = optionNextValue( pOptValue, pOldValue );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOptValue   `const         a hierarchcal list value
                 tOptionValue*' 
     pOldValue   `const         a value from this list
                 tOptionValue*' 
     returns     const          a compound value structure
                 tOptionValue*  

   This routine will return the next entry after the entry passed in.
At the end of the list, NULL will be returned.  If the entry is not
found on the list, NULL will be returned and "ERRNO" will be set to
EINVAL.  The "POLDVALUE" must have been gotten from a prior call to this
routine or to "`opitonGetValue()'".

   The returned result is NULL and errno is set:
   * `EINVAL' - the `pOptValue' does not point to a valid hierarchical
     option value or `pOldValue' does not point to a member of that
     option value.

   * `ENOENT' - the supplied `pOldValue' pointed to the last entry.


File: autogen.info,  Node: libopts-optionOnlyUsage,  Next: libopts-optionProcess,  Prev: libopts-optionNextValue,  Up: libopts procedures

7.6.28.10 optionOnlyUsage
.........................

Print usage text for just the options

Usage:
    optionOnlyUsage( pOpts, ex_code );
   Where the arguments are:
     Name        Type           Description
     ----        ----           ------------
     pOpts       `tOptions*'    program options descriptor
     ex_code     `int'          exit code for calling exit(3)

   This routine will print only the usage for each option.  This
function may be used when the emitted usage must incorporate
information not available to AutoOpts.

