\input texinfo
@c %**start of header
@setfilename websocket4j.info
@include version.texi
@include dirs.texi
@settitle GNU WebSocket4J Reference Manual (version @value{VERSION})
@c %**end of header

@copying
This file is part of GNU WebSocket4J Reference Manual (version @value{VERSION}).

Copyright @copyright{} 2010  Marek Aaron Sapota

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end quotation
@end copying

@titlepage
@title GNU WebSocket4J Reference Manual
@subtitle version @value{VERSION}
@author Marek Aaron Sapota
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, WebSocket, (dir), (dir)
@top GNU WebSocket4J

This manual is for GNU WebSocket4J, version @value{VERSION}.
@end ifnottex

@menu
* WebSocket::                   About WebSocket protocol and this
                                implementation.
* Accepting connections::       How to create server-side sockets.
* Connecting to server::        How to create client-side sockets.
* Using an established socket::  How to send/receive messages once you've
                                 created a socket.
* Example echo server::         Complete echo server example
* Example echo client::         Complete echo client example
* GNU Free Documentation License::  This manual copying conditions.
* Index::                       Complete index.
@end menu

@node WebSocket, Accepting connections, Top, Top
@chapter WebSocket

This chapter describes WebSocket protocol and it's GNU WebSocket4J
implementation.

@heading WebSocket protocol
@cindex WebSocket
@cindex WebSocket protocol
@cindex protocol

WebSocket is a protocol that provides bi-directional communication over
a TCP socket, designed to be implemented in web browsers for use in
HTML5 applications.  While main use of this protocol is to allow a
stable communication channel between a web server and JavaScript running
in a web browser the protocol can be used by any application.

JavaScript WebSocket API is being standardised by W3C (latest draft can
be obtained from @indicateurl{http://dev.w3.org/html5/websockets/}).
WebSocket protocol is being standardised by the IETF.  Latest standard
can be downloaded from
@indicateurl{http://www.whatwg.org/specs/web-socket-protocol/}.

@heading GNU WebSocket4J implementation
@cindex WebSocket4J
@cindex GNU WebSocket4J

GNU WebSocket4J is an implementation of WebSocket protocol in Java.  GNU
WebSocket4J tries to provide a simple API for both client and server
sockets that would be as easy to use, as the WebSocket JavaScript API,
or TCP sockets in Java standard library.

@xref{Accepting connections}, if you want to create a WebSocket server
application.

@xref{Connecting to server}, if you want to create a WebSocket client
application talking to a WebSocket server.

@node Accepting connections, Connecting to server, WebSocket, Top
@chapter Accepting connections
@cindex making a WebSocket server
@cindex accepting WebSocket connections

This chapter tells how to use GNU WebSocket4J in a server application.

@heading Naming convention

Throughout this chapter @code{WebServerSocket} will refer to
@code{websocket4j.server.WebServerSocket} class and @code{WebSocket}
will refer to @code{websocket4j.server.WebSocket} class.

@heading General idea

Accepting WebSocket connections is similar to using TCP sockets from the
standard library.  You have to create an instance of
@code{WebServerSocket} (modelled after @code{java.net.ServerSocket}),
and then you can use @code{accept() : WebSocket} method to get incoming
connections.  Accepted sockets have successfully completed an opening
handshake and are ready to use (@pxref{Using an established socket}).

@heading Creating a WebServerSocket instance

@code{websocket4j.server.WebServerSocket} has two constructors, first
without any parameters and second taking an @code{Integer}.  Second one
creates a new socket listening on port specified as an argument, and the
first one chooses a random free port.  If you create a socket listening
on a random port, you can use @code{getLocalPort() : Integer} method to get that
port number.

@heading Accepting new connnections

@code{accept() : WebSocket} works similar to method, of
@code{java.net.ServerSocket} class, of the same name.  It waits until
someone connects and returns an established socket.  You can limit the
time for which @code{accept} will block with @code{setSoTimeout(Integer)
: void} method (provided @code{Integer} is time in milliseconds) --- if
no client connects in this much time a @code{java.io.IOException} will
be thrown.

After you've accepted a socket, you can use @code{getRequestUri() :
String} method of @code{WebSocket} to get URI requested by client, so
you can decide what to do next with this socket.

@heading Closing the socket

Both @code{WebServerSocket} and @code{WebSocket} have @code{close() :
void} method that closes the socket and ends connection in case of
@code{WebSocket}, or stops listening for new connections in case of
@code{WebServerSocket}.  @code{isClosed() : Boolean} method can be used
to determine if socket is already closed.

@node Connecting to server, Using an established socket, Accepting connections, Top
@chapter Connecting to server
@cindex making a WebSocket client
@cindex connecting to WebSocket server

This chapter tells how to use GNU WebSocket4J in a client application.

@heading Naming convention

Throughout this chapter @code{WebSocket} will refer to
@code{websocket4j.client.WebSocket} class.

@heading General idea

@code{WebSocket} class works similar to @code{java.net.Socket} --- you
have to create an instance providing information where it should connect
to and you get back a socket that is ready to use (@pxref{Using an
established socket}).

@heading Creating a WebSocket instance

@code{WebSocket} has two constructors, first one takes a @code{String},
@code{Integer} and @code{String}, second one takes an additional
@code{Integer}.  First @code{String} is the host name of the server you
want to connect to, first @code{Integer} is port on which the server
listens for incoming connections.  Second @code{String} is URI that
should be requested when connecting --- just as HTTP servers, WebSocket
servers can handle multiple kinds of connections over one port.

For example @code{new WebSocket("localhost", 5432, "/echo")} would
connect to localhost on port 5432 and request /echo URI.  In JavaScript
API you'd use @code{ws://localhost:5432/echo} URI to connect to the same
server.

Fourth, optional, argument of the constructor is timeout in
milliseconds, if the opening handshake takes more time than this, an
IOException will be thrown.

@heading Closing the socket

Just like the server socket, client sockets have @code{close() : void}
method that ends the connection.  Also you can use @code{isClosed() :
Boolean} method to check if the socket is already closed.

@node Using an established socket, Example echo server, Connecting to server, Top
@chapter Using an established socket
@cindex using an established socket

Once a connection is established and you have an instance of either
@code{websocket4j.client.WebSocket}, or
@code{websocket4j.server.WebSocket} you can use them in uniform way to
send and receive messages.

@heading Naming convention

Throughout this chapter @code{WebSocket} will refer to both
@code{websocket4j.client.WebSocket} and
@code{websocket4j.server.WebSocket}.

@heading Sending messages
@cindex sending messages

To send messages you can use @code{sendMessage(String) : void} method of
WebSocket.  This method immediately sends given string to the other
party.

@heading Receiving
@cindex receiving messages

To receive messages you can use synchronous @code{getMessage(void) :
String} method of WebSocket.  This method waits until the other party
sends a message and then returns it.

@node Example echo server, Example echo client, Using an established socket, Top
@appendix Example echo server

This chapter shows how to build a simple threaded echo server.  This
example is included in the distributed package in
'src/websocket4j/examples/EchoServer.java'.

@verbatiminclude @value{SRCDIR}/../src/websocket4j/examples/EchoServer.java

@node Example echo client, GNU Free Documentation License, Example echo server, Top
@appendix Example echo client

This chapter shows how to build a simple echo client reading from stdin.
This example is included in the distributed package in
'src/websocket4j/examples/EchoClient.java'.

@verbatiminclude @value{SRCDIR}/../src/websocket4j/examples/EchoClient.java

@node GNU Free Documentation License, Index, Example echo client, Top
@chapter GNU Free Documentation License

@include fdl-1.3.texi

@node Index,  , GNU Free Documentation License, Top
@unnumbered Index
@printindex cp

@bye

@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c End:
