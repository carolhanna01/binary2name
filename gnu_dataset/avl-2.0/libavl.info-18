This is libavl.info, produced by makeinfo version 4.0b from libavl.texi.


File: libavl.info,  Node: Index,  Prev: Catalogue of Algorithms,  Up: Top

Appendix F Index
****************

* Menu:

* aborting allocator:                    Answers to All the Exercises.
* array of search functions:             Answers to All the Exercises.
* AVL copy function:                     Copying an AVL tree.
* AVL functions:                         AVL Operations.
* AVL item deletion function:            Deleting from an AVL tree.
* AVL item insertion function:           Inserting into an AVL tree.
* AVL node structure:                    AVL Data Types.
* AVL traversal functions:               Traversal of an AVL tree.
* AVL traverser advance function:        Traversal of an AVL tree.
* AVL traverser back up function:        Traversal of an AVL tree.
* AVL traverser greatest-item initializer: Traversal of an AVL tree.
* AVL traverser insertion initializer:   Traversal of an AVL tree.
* AVL traverser least-item initializer:  Traversal of an AVL tree.
* AVL traverser search initializer:      Traversal of an AVL tree.
* AVL tree verify function:              Testing AVL Trees.
* avl-test.c:                            Testing AVL Trees.
* avl.c:                                 AVL Trees.
* avl.h:                                 AVL Trees.
* avl_copy function:                     Copying an AVL tree.
* avl_delete function:                   Deleting from an AVL tree.
* AVL_H macro:                           AVL Trees.
* avl_node structure:                    AVL Data Types.
* avl_probe function:                    Inserting into an AVL tree.
* avl_probe() local variables:           Inserting into an AVL tree.
* avl_t_find function:                   Traversal of an AVL tree.
* avl_t_first function:                  Traversal of an AVL tree.
* avl_t_insert function:                 Traversal of an AVL tree.
* avl_t_last function:                   Traversal of an AVL tree.
* avl_t_next function:                   Traversal of an AVL tree.
* avl_t_prev function:                   Traversal of an AVL tree.
* bin-ary-test.c:                        Answers to All the Exercises.
* bin_cmp function:                      Answers to All the Exercises.
* binary search of ordered array:        Binary Search of Ordered Array.
* binary search tree entry:              Binary Search Tree in Array.
* binary search using bsearch():         Answers to All the Exercises.
* binary_tree_entry structure:           Binary Search Tree in Array.
* block structure:                       Memory Manager.
* blp's implementation of bsearch():     Answers to All the Exercises.
* blp_bsearch function:                  Answers to All the Exercises.
* BST balance function:                  Balancing a BST.
* BST compression function:              Implementing compress().
* BST copy error helper function:        Handling errors during iterative BST copying.
* BST copy function:                     Handling errors during iterative BST copying.
* BST creation function:                 Creating a BST.
* BST destruction function:              Destroying a BST by Rotation.
* BST extra function prototypes:         Balancing a BST.
* BST item deletion function:            Deleting from a BST.
* BST item deletion function, by merging: Deletion by Merging.
* BST item insertion function:           Inserting into a BST.
* BST item insertion function, alternate version: Answers to All the Exercises.
* BST item insertion function, root insertion version: Root Insertion in a BST.
* BST join function, iterative version:  Answers to All the Exercises.
* BST join function, recursive version:  Joining BSTs.
* BST maximum height:                    BST Maximum Height.
* BST node structure:                    BST Node Structure.
* BST operations:                        BST Operations.
* BST overflow test function:            Testing Overflow.
* BST print function:                    Displaying BST structures.
* BST search function:                   Searching a BST.
* BST table structure:                   BST Structure.
* BST test function:                     Testing BSTs.
* BST to vine function:                  Transforming a BST into a Vine.
* BST traversal functions:               Better Iterative Traversal.
* BST traverser advance function:        BST Traverser Advancing.
* BST traverser back up function:        BST Traverser Retreating.
* BST traverser check function:          Testing BSTs.
* BST traverser copy initializer:        BST Traverser Copying.
* BST traverser current item function:   BST Traversal Current Item.
* BST traverser greatest-item initializer: BST Traverser Last Initialization.
* BST traverser insertion initializer:   BST Traverser Insert Initialization.
* BST traverser least-item initializer:  BST Traverser First Initialization.
* BST traverser null initializer:        BST Traverser Null Initialization.
* BST traverser refresher:               Better Iterative Traversal.
* BST traverser refresher, with caching: Answers to All the Exercises.
* BST traverser replacement function:    BST Traversal Replacing the Current Item.
* BST traverser search initializer:      BST Traverser Find Initialization.
* BST traverser structure:               Better Iterative Traversal.
* BST verify function:                   BST Verification.
* bst-test.c:                            Testing our BST functions.
* bst.c:                                 Binary Search Trees.
* bst.h:                                 Binary Search Trees.
* bst_balance function:                  Balancing a BST.
* bst_copy function:                     Handling errors during iterative BST copying.
* bst_copy_iterative function <1>:       Answers to All the Exercises.
* bst_copy_iterative function:           Copying a BST Iteratively.
* bst_copy_recursive_1 function:         Copying a BST Recursively.
* bst_create function:                   Creating a BST.
* bst_deallocate_recursive function:     Answers to All the Exercises.
* bst_delete function <1>:               Deletion by Merging.
* bst_delete function:                   Deleting from a BST.
* bst_destroy function <1>:              Destroying a BST Iteratively.
* bst_destroy function:                  Destroying a BST by Rotation.
* bst_destroy_recursive function:        Destroying a BST Recursively.
* bst_find function <1>:                 Answers to All the Exercises.
* bst_find function:                     Searching a BST.
* BST_H macro:                           Binary Search Trees.
* BST_MAX_HEIGHT macro:                  BST Maximum Height.
* bst_node structure:                    BST Node Structure.
* bst_probe function <1>:                Answers to All the Exercises.
* bst_probe function <2>:                Root Insertion in a BST.
* bst_probe function:                    Inserting into a BST.
* bst_robust_copy_recursive_1 function:  Answers to All the Exercises.
* bst_robust_copy_recursive_2 function:  Answers to All the Exercises.
* bst_t_copy function:                   BST Traverser Copying.
* bst_t_cur function:                    BST Traversal Current Item.
* bst_t_find function:                   BST Traverser Find Initialization.
* bst_t_first function:                  BST Traverser First Initialization.
* bst_t_init function:                   BST Traverser Null Initialization.
* bst_t_insert function:                 BST Traverser Insert Initialization.
* bst_t_last function:                   BST Traverser Last Initialization.
* bst_t_next function:                   BST Traverser Advancing.
* bst_t_prev function:                   BST Traverser Retreating.
* bst_t_replace function:                BST Traversal Replacing the Current Item.
* bst_table structure:                   BST Structure.
* bst_traverse_level_order function:     Answers to All the Exercises.
* bst_traverser structure:               Better Iterative Traversal.
* BSTS functions:                        Answers to All the Exercises.
* BSTS structures:                       Answers to All the Exercises.
* BSTS test:                             Answers to All the Exercises.
* bsts.c:                                Answers to All the Exercises.
* bsts_find function:                    Answers to All the Exercises.
* bsts_insert function:                  Answers to All the Exercises.
* bsts_node structure:                   Answers to All the Exercises.
* bsts_tree structure:                   Answers to All the Exercises.
* calculate leaves:                      Balancing Implementation.
* case 1 in AVL deletion:                Deleting an AVL node step 2 - Delete.
* case 1 in BST deletion:                Deleting from a BST.
* case 1 in left-looking RTBST deletion: Left-looking deletion in an RTBST.
* case 1 in left-side initial-black RB insertion rebalancing: Initial Black Insertion in an RB Tree.
* case 1 in left-side PRB deletion rebalancing: Deleting a PRB node step 3 - Rebalance.
* case 1 in left-side PRB insertion rebalancing: Step 3 in PRB Insertion.
* case 1 in left-side RB deletion rebalancing: Deleting an RB node step 3 - Rebalance.
* case 1 in left-side RB insertion rebalancing: Inserting an RB node step 3 - Rebalance.
* case 1 in left-side RTRB insertion rebalancing: Step 3 in RTRB Insertion.
* case 1 in left-side TRB deletion rebalancing: Deleting a TRB node step 3 - Rebalance.
* case 1 in left-side TRB insertion rebalancing: Step 3 in TRB Insertion.
* case 1 in PAVL deletion:               Deleting a PAVL node step 2 - Delete.
* case 1 in PBST deletion:               Deleting from a PBST.
* case 1 in PRB deletion:                Deleting a PRB node step 2 - Delete.
* case 1 in RB deletion:                 Deleting an RB node step 2 - Delete.
* case 1 in right-looking RTBST deletion: Right-looking deletion in a RTBST.
* case 1 in right-side initial-black RB insertion rebalancing: Initial Black Insertion in an RB Tree.
* case 1 in right-side PRB deletion rebalancing: PRB deletion symmetric case.
* case 1 in right-side PRB insertion rebalancing: PRB insertion symmetric case.
* case 1 in right-side RB deletion rebalancing: RB deletion symmetric case.
* case 1 in right-side RB insertion rebalancing: RB insertion symmetric case.
* case 1 in right-side RTRB insertion rebalancing: Step 3 in RTRB Insertion.
* case 1 in right-side TRB deletion rebalancing: TRB deletion symmetric case.
* case 1 in right-side TRB insertion rebalancing: TRB insertion symmetric case.
* case 1 in RTAVL deletion:              Deleting a RTAVL node step 2 - Delete.
* case 1 in RTAVL deletion, right-looking: Answers to All the Exercises.
* case 1 in RTRB deletion:               Deleting an RTRB node step 2 - Delete.
* case 1 in TAVL deletion:               Deleting a TAVL node step 2 - Delete.
* case 1 in TAVL deletion, with stack:   Answers to All the Exercises.
* case 1 in TBST deletion:               Deleting from a TBST.
* case 1 in TRB deletion:                Deleting a TRB node step 2 - Delete.
* case 1.5 in BST deletion:              Answers to All the Exercises.
* case 2 in AVL deletion:                Deleting an AVL node step 2 - Delete.
* case 2 in BST deletion:                Deleting from a BST.
* case 2 in left-looking RTBST deletion: Left-looking deletion in an RTBST.
* case 2 in left-side initial-black RB insertion rebalancing: Initial Black Insertion in an RB Tree.
* case 2 in left-side PRB deletion rebalancing: Deleting a PRB node step 3 - Rebalance.
* case 2 in left-side PRB insertion rebalancing: Step 3 in PRB Insertion.
* case 2 in left-side RB deletion rebalancing: Deleting an RB node step 3 - Rebalance.
* case 2 in left-side RB insertion rebalancing: Inserting an RB node step 3 - Rebalance.
* case 2 in left-side RTRB deletion rebalancing: Deleting an RTRB node step 3 - Rebalance.
* case 2 in left-side RTRB insertion rebalancing: Step 3 in RTRB Insertion.
* case 2 in left-side TRB deletion rebalancing: Deleting a TRB node step 3 - Rebalance.
* case 2 in left-side TRB insertion rebalancing: Step 3 in TRB Insertion.
* case 2 in PAVL deletion:               Deleting a PAVL node step 2 - Delete.
* case 2 in PBST deletion:               Deleting from a PBST.
* case 2 in PRB deletion:                Deleting a PRB node step 2 - Delete.
* case 2 in RB deletion:                 Deleting an RB node step 2 - Delete.
* case 2 in right-looking RTBST deletion: Right-looking deletion in a RTBST.
* case 2 in right-side initial-black RB insertion rebalancing: Initial Black Insertion in an RB Tree.
* case 2 in right-side PRB deletion rebalancing: PRB deletion symmetric case.
* case 2 in right-side PRB insertion rebalancing: PRB insertion symmetric case.
* case 2 in right-side RB deletion rebalancing: RB deletion symmetric case.
* case 2 in right-side RB insertion rebalancing: RB insertion symmetric case.
* case 2 in right-side RTRB deletion rebalancing: Deleting an RTRB node step 3 - Rebalance.
* case 2 in right-side RTRB insertion rebalancing: Step 3 in RTRB Insertion.
* case 2 in right-side TRB deletion rebalancing: TRB deletion symmetric case.
* case 2 in right-side TRB insertion rebalancing: TRB insertion symmetric case.
* case 2 in RTAVL deletion:              Deleting a RTAVL node step 2 - Delete.
* case 2 in RTAVL deletion, right-looking: Answers to All the Exercises.
* case 2 in RTRB deletion:               Deleting an RTRB node step 2 - Delete.
* case 2 in TAVL deletion:               Deleting a TAVL node step 2 - Delete.
* case 2 in TAVL deletion, with stack:   Answers to All the Exercises.
* case 2 in TBST deletion:               Deleting from a TBST.
* case 2 in TRB deletion:                Deleting a TRB node step 2 - Delete.
* case 3 in AVL deletion:                Deleting an AVL node step 2 - Delete.
* case 3 in AVL deletion, alternate version: Answers to All the Exercises.
* case 3 in BST deletion:                Deleting from a BST.
* case 3 in BST deletion, alternate version: Answers to All the Exercises.
* case 3 in left-looking RTBST deletion: Left-looking deletion in an RTBST.
* case 3 in left-side initial-black RB insertion rebalancing: Initial Black Insertion in an RB Tree.
* case 3 in left-side PRB insertion rebalancing: Step 3 in PRB Insertion.
* case 3 in left-side RB insertion rebalancing: Inserting an RB node step 3 - Rebalance.
* case 3 in left-side RTRB insertion rebalancing: Step 3 in RTRB Insertion.
* case 3 in left-side TRB insertion rebalancing: Step 3 in TRB Insertion.
* case 3 in PAVL deletion:               Deleting a PAVL node step 2 - Delete.
* case 3 in PBST deletion:               Deleting from a PBST.
* case 3 in PRB deletion:                Deleting a PRB node step 2 - Delete.
* case 3 in RB deletion:                 Deleting an RB node step 2 - Delete.
* case 3 in right-looking RTBST deletion: Right-looking deletion in a RTBST.
* case 3 in right-side initial-black RB insertion rebalancing: Initial Black Insertion in an RB Tree.
* case 3 in right-side PRB insertion rebalancing: PRB insertion symmetric case.
* case 3 in right-side RB insertion rebalancing: RB insertion symmetric case.
* case 3 in right-side RTRB insertion rebalancing: Step 3 in RTRB Insertion.
* case 3 in right-side TRB insertion rebalancing: TRB insertion symmetric case.
* case 3 in RTAVL deletion:              Deleting a RTAVL node step 2 - Delete.
* case 3 in RTAVL deletion, right-looking: Answers to All the Exercises.
* case 3 in RTRB deletion:               Deleting an RTRB node step 2 - Delete.
* case 3 in TAVL deletion:               Deleting a TAVL node step 2 - Delete.
* case 3 in TAVL deletion, with stack:   Answers to All the Exercises.
* case 3 in TBST deletion:               Deleting from a TBST.
* case 3 in TRB deletion:                Deleting a TRB node step 2 - Delete.
* case 4 in left-looking RTBST deletion: Left-looking deletion in an RTBST.
* case 4 in left-looking RTBST deletion, alternate version: Answers to All the Exercises.
* case 4 in right-looking RTBST deletion: Right-looking deletion in a RTBST.
* case 4 in right-looking RTBST deletion, alternate version: Answers to All the Exercises.
* case 4 in RTAVL deletion:              Deleting a RTAVL node step 2 - Delete.
* case 4 in RTAVL deletion, alternate version: Answers to All the Exercises.
* case 4 in RTAVL deletion, right-looking: Answers to All the Exercises.
* case 4 in RTRB deletion:               Deleting an RTRB node step 2 - Delete.
* case 4 in TAVL deletion:               Deleting a TAVL node step 2 - Delete.
* case 4 in TAVL deletion, alternate version: Answers to All the Exercises.
* case 4 in TAVL deletion, with stack:   Answers to All the Exercises.
* case 4 in TBST deletion:               Deleting from a TBST.
* case 4 in TBST deletion, alternate version: Answers to All the Exercises.
* case 4 in TRB deletion:                Deleting a TRB node step 2 - Delete.
* case 4 in TRB deletion, alternate version: Answers to All the Exercises.
* cheat_search function:                 Answers to All the Exercises.
* cheating search:                       Answers to All the Exercises.
* check AVL tree structure:              Testing AVL Trees.
* check BST structure:                   BST Verification.
* check counted nodes:                   BST Verification.
* check for tree height in range:        Balancing Implementation.
* check RB tree structure:               Testing RB Trees.
* check root is black:                   Testing RB Trees.
* check that backward traversal works:   BST Verification.
* check that forward traversal works:    BST Verification.
* check that the tree contains all the elements it should: BST Verification.
* check that traversal from the null element works: BST Verification.
* check tree->bst_count is correct:      BST Verification.
* check_traverser function:              Testing BSTs.
* clean up after search tests:           Answers to All the Exercises.
* command line parser:                   Command-Line Parser.
* compare two AVL trees for structure and content: Testing AVL Trees.
* compare two BSTs for structure and content: Testing BSTs.
* compare two PAVL trees for structure and content: Testing PAVL Trees.
* compare two PBSTs for structure and content: Testing PBSTs.
* compare two PRB trees for structure and content: Testing PRB Trees.
* compare two RB trees for structure and content: Testing RB Trees.
* compare two RTAVL trees for structure and content: Testing RTAVL Trees.
* compare two RTBSTs for structure and content: Testing RTBSTs.
* compare two RTRB trees for structure and content: Testing RTRB Trees.
* compare two TAVL trees for structure and content: Testing TAVL Trees.
* compare two TBSTs for structure and content: Testing TBSTs.
* compare two TRB trees for structure and content: Testing TRB Trees.
* compare_fixed_strings function:        Answers to All the Exercises.
* compare_ints function <1>:             Answers to All the Exercises.
* compare_ints function:                 Comparison Function.
* compare_trees function <1>:            Testing PRB Trees.
* compare_trees function <2>:            Testing PAVL Trees.
* compare_trees function <3>:            Testing PBSTs.
* compare_trees function <4>:            Testing RTRB Trees.
* compare_trees function <5>:            Testing RTAVL Trees.
* compare_trees function <6>:            Testing RTBSTs.
* compare_trees function <7>:            Testing TRB Trees.
* compare_trees function <8>:            Testing TAVL Trees.
* compare_trees function <9>:            Testing TBSTs.
* compare_trees function <10>:           Testing RB Trees.
* compare_trees function:                Testing AVL Trees.
* comparison function for ints:          Comparison Function.
* compress function <1>:                 Answers to All the Exercises.
* compress function:                     Transforming a Vine into a Balanced TBST.
* copy_error_recovery function <1>:      Copying a PBST.
* copy_error_recovery function <2>:      Copying an RTBST.
* copy_error_recovery function <3>:      Copying a TBST.
* copy_error_recovery function:          Handling errors during iterative BST copying.
* copy_node function <1>:                Copying an RTAVL Tree.
* copy_node function <2>:                Copying an RTBST.
* copy_node function <3>:                Copying a TAVL Tree.
* copy_node function:                    Copying a TBST.
* default memory allocation functions:   Memory Allocation.
* default memory allocator header:       Memory Allocation.
* delete TBST node:                      Deleting from a TBST.
* delete_order enumeration:              Test Set Generation.
* destroy a BST iteratively:             Destroying a BST Iteratively.
* destroy a BST recursively:             Destroying a BST Recursively.
* ensure w is black in left-side PRB deletion rebalancing: Deleting a PRB node step 3 - Rebalance.
* ensure w is black in left-side RB deletion rebalancing: Deleting an RB node step 3 - Rebalance.
* ensure w is black in left-side TRB deletion rebalancing: Deleting a TRB node step 3 - Rebalance.
* ensure w is black in right-side PRB deletion rebalancing: PRB deletion symmetric case.
* ensure w is black in right-side RB deletion rebalancing: RB deletion symmetric case.
* ensure w is black in right-side TRB deletion rebalancing: TRB deletion symmetric case.
* error_node variable:                   Answers to All the Exercises.
* fail function:                         Utility Functions.
* fallback_join function:                Answers to All the Exercises.
* find parent of a TBST node:            Finding the Parent of a TBST Node.
* find predecessor of RTBST node with left child: RTBST Traverser Retreating.
* find predecessor of RTBST node with no left child: RTBST Traverser Retreating.
* find TBST node to delete:              Deleting from a TBST.
* find TBST node to delete, with parent node algorithm: Answers to All the Exercises.
* find_parent function:                  Finding the Parent of a TBST Node.
* finish up after deleting TBST node:    Deleting from a TBST.
* first_item function:                   Improving Convenience.
* found insertion point in recursive AVL insertion: Recursive Insertion.
* gen_balanced_tree function:            Answers to All the Exercises.
* gen_deletions function:                Answers to All the Exercises.
* gen_insertions function:               Answers to All the Exercises.
* generate permutation for balanced tree: Answers to All the Exercises.
* generate random permutation of integers: Answers to All the Exercises.
* handle case where x has a right child: BST Traverser Advancing.
* handle case where x has no right child: BST Traverser Advancing.
* handle stack overflow during BST traversal: Answers to All the Exercises.
* handle_long_option function:           Option Parser.
* handle_short_option function:          Option Parser.
* initialize search test array:          Answers to All the Exercises.
* initialize smaller and larger within binary search tree: Answers to All the Exercises.
* insert_order enumeration:              Test Set Generation.
* insertion and deletion order generation: Answers to All the Exercises.
* intermediate step between bst_copy_recursive_2() and bst_copy_iterative(): Answers to All the Exercises.
* iter variable:                         Answers to All the Exercises.
* iterative copy of BST:                 Copying a BST Iteratively.
* iterative traversal of BST, take 1:    Iterative Traversal of a BST.
* iterative traversal of BST, take 2:    Iterative Traversal of a BST.
* iterative traversal of BST, take 3:    Iterative Traversal of a BST.
* iterative traversal of BST, take 4:    Iterative Traversal of a BST.
* iterative traversal of BST, take 5:    Iterative Traversal of a BST.
* iterative traversal of BST, take 6:    Improving Convenience.
* iterative traversal of BST, with dynamically allocated stack: Answers to All the Exercises.
* left-side rebalancing after initial-black RB insertion: Initial Black Insertion in an RB Tree.
* left-side rebalancing after PRB deletion: Deleting a PRB node step 3 - Rebalance.
* left-side rebalancing after PRB insertion: Step 3 in PRB Insertion.
* left-side rebalancing after RB deletion: Deleting an RB node step 3 - Rebalance.
* left-side rebalancing after RB insertion: Inserting an RB node step 3 - Rebalance.
* left-side rebalancing after RTRB deletion: Deleting an RTRB node step 3 - Rebalance.
* left-side rebalancing after RTRB insertion: Step 3 in RTRB Insertion.
* left-side rebalancing after TRB deletion: Deleting a TRB node step 3 - Rebalance.
* left-side rebalancing after TRB insertion: Step 3 in TRB Insertion.
* left-side rebalancing case 1 in AVL deletion: Deleting an AVL node step 4 - Rebalance.
* left-side rebalancing case 1 in PAVL deletion: Deleting a PAVL node step 4 - Rebalance.
* left-side rebalancing case 2 in AVL deletion: Deleting an AVL node step 4 - Rebalance.
* left-side rebalancing case 2 in PAVL deletion: Deleting a PAVL node step 4 - Rebalance.
* level-order traversal:                 Answers to All the Exercises.
* LIBAVL_ALLOCATOR macro:                Memory Allocation.
* libavl_allocator structure:            Memory Allocation.
* license:                               Code License.
* main function <1>:                     Answers to All the Exercises.
* main function:                         Main Program.
* main program to test binary_search_tree_array(): Answers to All the Exercises.
* make special case TBST vine into balanced tree and count height: Transforming a Vine into a Balanced TBST.
* make special case vine into balanced tree and count height: Balancing Implementation.
* MAX_INPUT macro:                       Answers to All the Exercises.
* memory allocator:                      Memory Allocation.
* memory tracker:                        Memory Manager.
* move down then up in recursive AVL insertion: Recursive Insertion.
* mt_allocate function:                  Memory Manager.
* mt_allocator function:                 Memory Manager.
* mt_allocator structure:                Memory Manager.
* mt_arg_index enumeration:              Memory Manager.
* mt_create function:                    Memory Manager.
* mt_free function:                      Memory Manager.
* mt_policy enumeration:                 Memory Manager.
* new_block function:                    Memory Manager.
* option parser:                         Option Parser.
* option structure:                      User Interaction.
* option_get function:                   Option Parser.
* option_init function:                  Option Parser.
* option_state structure:                Option Parser.
* overflow testers <1>:                  Answers to All the Exercises.
* overflow testers:                      Testing Overflow.
* parse search test command line:        Answers to All the Exercises.
* parse_command_line function:           Command-Line Parser.
* PAVL copy function:                    Copying a PAVL Tree.
* PAVL functions:                        PAVL Operations.
* PAVL item deletion function:           Deleting from a PAVL tree.
* PAVL item insertion function:          Inserting into a PAVL tree.
* PAVL node structure:                   PAVL Data Types.
* PAVL traversal functions:              Traversing a PAVL Tree.
* pavl-test.c:                           Testing PAVL Trees.
* pavl.c:                                AVL Trees with Parent Pointers.
* pavl.h:                                AVL Trees with Parent Pointers.
* pavl_copy function:                    Copying a PAVL Tree.
* pavl_delete function:                  Deleting from a PAVL tree.
* PAVL_H macro:                          AVL Trees with Parent Pointers.
* pavl_node structure:                   PAVL Data Types.
* pavl_probe function:                   Inserting into a PAVL tree.
* PBST balance function:                 Balancing a PBST.
* PBST balance function, with integrated parent updates: Answers to All the Exercises.
* PBST compression function:             Answers to All the Exercises.
* PBST copy error helper function:       Copying a PBST.
* PBST copy function:                    Copying a PBST.
* PBST extra function prototypes:        Balancing a PBST.
* PBST functions:                        PBST Operations.
* PBST item deletion function:           Deleting from a PBST.
* PBST item insertion function:          Inserting into a PBST.
* PBST node structure:                   PBST Data Types.
* PBST traversal functions:              Traversing a PBST.
* PBST traverser advance function:       PBST Traverser Advancing.
* PBST traverser back up function:       PBST Traverser Retreating.
* PBST traverser first initializer:      PBST Traverser First Initialization.
* PBST traverser insertion initializer:  PBST Traverser Insert Initialization.
* PBST traverser last initializer:       PBST Traverser Last Initialization.
* PBST traverser search initializer:     PBST Traverser Find Initialization.
* pbst-test.c:                           Testing PBSTs.
* pbst.c:                                BSTs with Parent Pointers.
* pbst.h:                                BSTs with Parent Pointers.
* pbst_balance function <1>:             Answers to All the Exercises.
* pbst_balance function:                 Balancing a PBST.
* pbst_copy function:                    Copying a PBST.
* pbst_delete function:                  Deleting from a PBST.
* PBST_H macro:                          BSTs with Parent Pointers.
* pbst_node structure:                   PBST Data Types.
* pbst_probe function:                   Inserting into a PBST.
* pbst_t_find function:                  PBST Traverser Find Initialization.
* pbst_t_first function:                 PBST Traverser First Initialization.
* pbst_t_insert function:                PBST Traverser Insert Initialization.
* pbst_t_last function:                  PBST Traverser Last Initialization.
* pbst_t_next function:                  PBST Traverser Advancing.
* pbst_t_prev function:                  PBST Traverser Retreating.
* permuted_integers function:            Answers to All the Exercises.
* pgm_name variable:                     Main Program.
* pool_allocator structure:              Answers to All the Exercises.
* pool_allocator_free function:          Answers to All the Exercises.
* pool_allocator_malloc function:        Answers to All the Exercises.
* pool_allocator_tbl_create function:    Answers to All the Exercises.
* PRB functions:                         PRB Operations.
* PRB item deletion function:            Deleting from a PRB Tree.
* PRB item insertion function:           Inserting into a PRB tree.
* PRB node structure:                    PRB Data Types.
* prb-test.c:                            Testing PRB Trees.
* prb.c:                                 Red-Black Trees with Parent Pointers.
* prb.h:                                 Red-Black Trees with Parent Pointers.
* prb_color enumeration:                 PRB Data Types.
* prb_delete function:                   Deleting from a PRB Tree.
* PRB_H macro:                           Red-Black Trees with Parent Pointers.
* prb_node structure:                    PRB Data Types.
* prb_probe function:                    Inserting into a PRB tree.
* print_tree_structure function <1>:     Testing RTBSTs.
* print_tree_structure function:         Testing TBSTs.
* print_whole_tree function <1>:         Testing RTBSTs.
* print_whole_tree function <2>:         Testing TBSTs.
* print_whole_tree function:             Displaying BST structures.
* probe function:                        Recursive Insertion.
* process_node function:                 Improving Convenience.
* random number seeding:                 Answers to All the Exercises.
* RB functions:                          Operations in an RB Tree.
* RB item deletion function:             Deleting from an RB tree.
* RB item insertion function:            Inserting into an RB tree.
* RB item insertion function, initial black: Initial Black Insertion in an RB Tree.
* RB maximum height:                     RB Data Types.
* RB node structure:                     RB Data Types.
* RB tree verify function:               Testing RB Trees.
* rb-test.c:                             Testing RB Trees.
* rb.c:                                  Red-Black Trees.
* rb.h:                                  Red-Black Trees.
* rb_color enumeration:                  RB Data Types.
* rb_delete function:                    Deleting from an RB tree.
* RB_H macro:                            Red-Black Trees.
* RB_MAX_HEIGHT macro:                   RB Data Types.
* rb_node structure:                     RB Data Types.
* rb_probe function <1>:                 Initial Black Insertion in an RB Tree.
* rb_probe function:                     Inserting into an RB tree.
* rb_probe() local variables:            Inserting into an RB tree.
* rebalance + balance in TAVL insertion in left subtree, alternate version: Answers to All the Exercises.
* rebalance after RB deletion:           Deleting an RB node step 3 - Rebalance.
* rebalance AVL tree after insertion in left subtree: Rebalancing AVL trees.
* rebalance AVL tree after insertion in right subtree: AVL insertion symmetric case.
* rebalance for + balance factor after left-side RTAVL deletion: Deleting a RTAVL node step 4 - Rebalance.
* rebalance for + balance factor after right-side RTAVL deletion: Deleting a RTAVL node step 4 - Rebalance.
* rebalance for + balance factor after TAVL deletion in left subtree: Deleting a TAVL node step 4 - Rebalance.
* rebalance for + balance factor after TAVL deletion in right subtree: TAVL deletion symmetric case.
* rebalance for + balance factor in PAVL insertion in left subtree: Rebalancing PAVL trees.
* rebalance for + balance factor in PAVL insertion in right subtree: PAVL insertion symmetric case.
* rebalance for + balance factor in RTAVL insertion in left subtree: Rebalancing RTAVL trees.
* rebalance for + balance factor in RTAVL insertion in right subtree: Rebalancing RTAVL trees.
* rebalance for + balance factor in TAVL insertion in left subtree: Rebalancing TAVL trees.
* rebalance for + balance factor in TAVL insertion in right subtree: TAVL insertion symmetric case.
* rebalance for - balance factor after left-side RTAVL deletion: Deleting a RTAVL node step 4 - Rebalance.
* rebalance for - balance factor after right-side RTAVL deletion: Deleting a RTAVL node step 4 - Rebalance.
* rebalance for - balance factor after TAVL deletion in left subtree: Deleting a TAVL node step 4 - Rebalance.
* rebalance for - balance factor after TAVL deletion in right subtree: TAVL deletion symmetric case.
* rebalance for - balance factor in PAVL insertion in left subtree: Rebalancing PAVL trees.
* rebalance for - balance factor in PAVL insertion in right subtree: PAVL insertion symmetric case.
* rebalance for - balance factor in RTAVL insertion in left subtree: Rebalancing RTAVL trees.
* rebalance for - balance factor in RTAVL insertion in right subtree: Rebalancing RTAVL trees.
* rebalance for - balance factor in TAVL insertion in left subtree: Rebalancing TAVL trees.
* rebalance for - balance factor in TAVL insertion in right subtree: TAVL insertion symmetric case.
* rebalance for 0 balance factor after left-side RTAVL deletion: Deleting a RTAVL node step 4 - Rebalance.
* rebalance for 0 balance factor after right-side RTAVL deletion: Deleting a RTAVL node step 4 - Rebalance.
* rebalance for 0 balance factor after TAVL deletion in left subtree: Deleting a TAVL node step 4 - Rebalance.
* rebalance for 0 balance factor after TAVL deletion in right subtree: TAVL deletion symmetric case.
* rebalance PAVL tree after insertion in left subtree: Rebalancing PAVL trees.
* rebalance PAVL tree after insertion in right subtree: PAVL insertion symmetric case.
* rebalance TAVL tree after insertion in left subtree: Rebalancing TAVL trees.
* rebalance TAVL tree after insertion in right subtree: TAVL insertion symmetric case.
* recurse_verify_tree function <1>:      Testing PRB Trees.
* recurse_verify_tree function <2>:      Testing PAVL Trees.
* recurse_verify_tree function <3>:      Testing PBSTs.
* recurse_verify_tree function <4>:      Testing RTRB Trees.
* recurse_verify_tree function <5>:      Testing RTAVL Trees.
* recurse_verify_tree function <6>:      Testing RTBSTs.
* recurse_verify_tree function <7>:      Testing TRB Trees.
* recurse_verify_tree function <8>:      Testing TAVL Trees.
* recurse_verify_tree function <9>:      Testing TBSTs.
* recurse_verify_tree function <10>:     Testing RB Trees.
* recurse_verify_tree function <11>:     Testing AVL Trees.
* recurse_verify_tree function:          BST Verification.
* recursive copy of BST, take 1:         Copying a BST Recursively.
* recursive copy of BST, take 2:         Copying a BST Recursively.
* recursive deallocation function:       Answers to All the Exercises.
* recursive insertion into AVL tree:     Recursive Insertion.
* recursive traversal of BST:            Recursive Traversal of a BST.
* recursive traversal of BST, using nested function: Answers to All the Exercises.
* recursively verify AVL tree structure: Testing AVL Trees.
* recursively verify BST structure:      BST Verification.
* recursively verify PAVL tree structure: Testing PAVL Trees.
* recursively verify PBST structure:     Testing PBSTs.
* recursively verify PRB tree structure: Testing PRB Trees.
* recursively verify RB tree structure:  Testing RB Trees.
* recursively verify RTAVL tree structure: Testing RTAVL Trees.
* recursively verify RTBST structure:    Testing RTBSTs.
* recursively verify RTRB tree structure: Testing RTRB Trees.
* recursively verify TAVL tree structure: Testing TAVL Trees.
* recursively verify TBST structure:     Testing TBSTs.
* recursively verify TRB tree structure: Testing TRB Trees.
* reduce TBST vine general case to special case: Transforming a Vine into a Balanced TBST.
* reduce vine general case to special case: Balancing Implementation.
* reject_request function:               Memory Manager.
* right-side rebalancing after initial-black RB insertion: Initial Black Insertion in an RB Tree.
* right-side rebalancing after PRB deletion: PRB deletion symmetric case.
* right-side rebalancing after PRB insertion: PRB insertion symmetric case.
* right-side rebalancing after RB deletion: RB deletion symmetric case.
* right-side rebalancing after RB insertion: RB insertion symmetric case.
* right-side rebalancing after RTRB deletion: Deleting an RTRB node step 3 - Rebalance.
* right-side rebalancing after RTRB insertion: Step 3 in RTRB Insertion.
* right-side rebalancing after TRB deletion: TRB deletion symmetric case.
* right-side rebalancing after TRB insertion: TRB insertion symmetric case.
* right-side rebalancing case 1 in PAVL deletion: PAVL deletion symmetric case.
* right-side rebalancing case 2 in PAVL deletion: PAVL deletion symmetric case.
* robust recursive copy of BST, take 1:  Answers to All the Exercises.
* robust recursive copy of BST, take 2:  Answers to All the Exercises.
* robust recursive copy of BST, take 3:  Answers to All the Exercises.
* robust root insertion of existing node in arbitrary subtree: Answers to All the Exercises.
* root insertion of existing node in arbitrary subtree: Answers to All the Exercises.
* root_insert function:                  Answers to All the Exercises.
* rotate left at x then right at y in AVL tree: Rebalancing AVL trees.
* rotate left at y in AVL tree:          AVL insertion symmetric case.
* rotate right at x then left at y in AVL tree: AVL insertion symmetric case.
* rotate right at y in AVL tree:         Rebalancing AVL trees.
* rotate_left function:                  Answers to All the Exercises.
* rotate_right function:                 Answers to All the Exercises.
* RTAVL copy function:                   Copying an RTAVL Tree.
* RTAVL functions:                       RTAVL Operations.
* RTAVL item deletion function:          Deleting from an RTAVL tree.
* RTAVL item insertion function:         Inserting into an RTAVL Tree.
* RTAVL node copy function:              Copying an RTAVL Tree.
* RTAVL node structure:                  RTAVL Data Types.
* rtavl-test.c:                          Testing RTAVL Trees.
* rtavl.c:                               Right-Threaded AVL Trees.
* rtavl.h:                               Right-Threaded AVL Trees.
* rtavl_delete function:                 Deleting from an RTAVL tree.
* RTAVL_H macro:                         Right-Threaded AVL Trees.
* rtavl_node structure:                  RTAVL Data Types.
* rtavl_probe function:                  Inserting into an RTAVL Tree.
* rtavl_tag enumeration:                 RTAVL Data Types.
* RTBST balance function:                Balancing an RTBST.
* RTBST copy error helper function:      Copying an RTBST.
* RTBST copy function:                   Copying an RTBST.
* RTBST destruction function:            Destroying an RTBST.
* RTBST functions:                       RTBST Operations.
* RTBST item deletion function:          Deleting from an RTBST.
* RTBST item insertion function:         Inserting into an RTBST.
* RTBST main copy function:              Copying an RTBST.
* RTBST node copy function:              Copying an RTBST.
* RTBST node structure:                  RTBST Data Types.
* RTBST print function:                  Testing RTBSTs.
* RTBST search function:                 Searching an RTBST.
* RTBST traversal functions:             Traversing an RTBST.
* RTBST traverser advance function:      RTBST Traverser Advancing.
* RTBST traverser back up function:      RTBST Traverser Retreating.
* RTBST traverser first initializer:     RTBST Traverser First Initialization.
* RTBST traverser last initializer:      RTBST Traverser Last Initialization.
* RTBST traverser search initializer:    RTBST Traverser Find Initialization.
* RTBST tree-to-vine function:           Balancing an RTBST.
* RTBST vine compression function:       Balancing an RTBST.
* rtbst-test.c:                          Testing RTBSTs.
* rtbst.c:                               Right-Threaded Binary Search Trees.
* rtbst.h:                               Right-Threaded Binary Search Trees.
* rtbst_copy function:                   Copying an RTBST.
* rtbst_delete function:                 Deleting from an RTBST.
* rtbst_destroy function:                Destroying an RTBST.
* rtbst_find function:                   Searching an RTBST.
* RTBST_H macro:                         Right-Threaded Binary Search Trees.
* rtbst_node structure:                  RTBST Data Types.
* rtbst_probe function:                  Inserting into an RTBST.
* rtbst_t_find function:                 RTBST Traverser Find Initialization.
* rtbst_t_first function:                RTBST Traverser First Initialization.
* rtbst_t_last function:                 RTBST Traverser Last Initialization.
* rtbst_t_next function:                 RTBST Traverser Advancing.
* rtbst_t_prev function:                 RTBST Traverser Retreating.
* rtbst_tag enumeration:                 RTBST Data Types.
* RTRB functions:                        RTRB Operations.
* RTRB item deletion function:           Deleting from an RTRB tree.
* RTRB item insertion function:          Inserting into an RTRB Tree.
* RTRB node structure:                   RTRB Data Types.
* rtrb-test.c:                           Testing RTRB Trees.
* rtrb.c:                                Right-Threaded Red-Black Trees.
* rtrb.h:                                Right-Threaded Red-Black Trees.
* rtrb_color enumeration:                RTRB Data Types.
* rtrb_delete function:                  Deleting from an RTRB tree.
* RTRB_H macro:                          Right-Threaded Red-Black Trees.
* rtrb_node structure:                   RTRB Data Types.
* rtrb_probe function:                   Inserting into an RTRB Tree.
* rtrb_tag enumeration:                  RTRB Data Types.
* run search tests:                      Answers to All the Exercises.
* s variable:                            Answers to All the Exercises.
* search functions:                      Answers to All the Exercises.
* search of binary search tree stored as array: Binary Search Tree in Array.
* search test functions:                 Answers to All the Exercises.
* search test main program:              Answers to All the Exercises.
* search_func structure:                 Answers to All the Exercises.
* seq-test.c:                            Answers to All the Exercises.
* sequentially search a sorted array of ints: Sequential Search of Ordered Array.
* sequentially search a sorted array of ints using a sentinel: Sequential Search of Ordered Array with Sentinel.
* sequentially search a sorted array of ints using a sentinel (2): Sequential Search of Ordered Array with Sentinel.
* sequentially search an array of ints:  Sequential Search.
* sequentially search an array of ints using a sentinel: Sequential Search with Sentinel.
* set parents of main vine:              Answers to All the Exercises.
* show bin-ary-test usage message:       Answers to All the Exercises.
* srch-test.c:                           Answers to All the Exercises.
* start_timer function:                  Answers to All the Exercises.
* step 1: Find BST node to delete:       Deleting from a BST.
* step 1: Find BST node to delete by merging: Deletion by Merging.
* step 1: Find PBST node to delete:      Deleting from a PBST.
* step 1: Find RTBST node to delete:     Deleting from an RTBST.
* step 1: Robustly search for insertion point in arbitrary subtree: Answers to All the Exercises.
* step 1: Search AVL tree for insertion point: Step 1 in AVL insertion.
* step 1: Search AVL tree for item to delete: Deleting an AVL node step 1 - Search.
* step 1: Search BST for insertion point, root insertion version: Root Insertion in a BST.
* step 1: Search for insertion point in arbitrary subtree: Answers to All the Exercises.
* step 1: Search PAVL tree for insertion point: Steps 1 and 2 in PAVL Insertion.
* step 1: Search PBST tree for insertion point: Inserting into a PBST.
* step 1: Search RB tree for insertion point: Inserting an RB node step 1 - Search.
* step 1: Search RTAVL tree for insertion point: Steps 1-1 in RTAVL Insertion.
* step 1: Search RTAVL tree for item to delete: Deleting a RTAVL node step 1 - Search.
* step 1: Search RTBST for insertion point: Inserting into an RTBST.
* step 1: Search RTRB tree for insertion point: Steps 1 and 2 in RTRB Insertion.
* step 1: Search TAVL tree for insertion point: Steps 1 and 2 in TAVL Insertion.
* step 1: Search TAVL tree for item to delete: Deleting a TAVL node step 1 - Search.
* step 1: Search TBST for insertion point: Inserting into a TBST.
* step 1: Search TRB tree for insertion point: Steps 1 and 2 in TRB Insertion.
* step 1: Search TRB tree for item to delete: Deleting a TRB node step 1 - Search.
* step 2: Delete BST node:               Deleting from a BST.
* step 2: Delete BST node by merging:    Deletion by Merging.
* step 2: Delete item from AVL tree:     Deleting an AVL node step 2 - Delete.
* step 2: Delete item from PAVL tree:    Deleting a PAVL node step 2 - Delete.
* step 2: Delete item from PRB tree:     Deleting a PRB node step 2 - Delete.
* step 2: Delete item from RB tree:      Deleting an RB node step 2 - Delete.
* step 2: Delete item from RB tree, alternate version: Answers to All the Exercises.
* step 2: Delete item from TAVL tree:    Deleting a TAVL node step 2 - Delete.
* step 2: Delete item from TAVL tree, with stack: Answers to All the Exercises.
* step 2: Delete item from TRB tree:     Deleting a TRB node step 2 - Delete.
* step 2: Delete PBST node:              Deleting from a PBST.
* step 2: Delete RTAVL node:             Deleting a RTAVL node step 2 - Delete.
* step 2: Delete RTAVL node, right-looking: Answers to All the Exercises.
* step 2: Delete RTBST node, left-looking: Left-looking deletion in an RTBST.
* step 2: Delete RTBST node, right-looking: Right-looking deletion in a RTBST.
* step 2: Delete RTRB node:              Deleting an RTRB node step 2 - Delete.
* step 2: Insert AVL node:               Step 2 in AVL Insertion.
* step 2: Insert n into arbitrary subtree: Answers to All the Exercises.
* step 2: Insert new BST node, root insertion version: Root Insertion in a BST.
* step 2: Insert new node into RTBST tree: Inserting into an RTBST.
* step 2: Insert PAVL node:              Steps 1 and 2 in PAVL Insertion.
* step 2: Insert PBST node:              Inserting into a PBST.
* step 2: Insert PRB node:               Step 2 in PRB Insertion.
* step 2: Insert RB node:                Inserting an RB node step 2 - Insert.
* step 2: Insert RTAVL node:             Steps 1-1 in RTAVL Insertion.
* step 2: Insert RTRB node:              Steps 1 and 2 in RTRB Insertion.
* step 2: Insert TAVL node:              Steps 1 and 2 in TAVL Insertion.
* step 2: Insert TBST node:              Inserting into a TBST.
* step 2: Insert TRB node:               Steps 1 and 2 in TRB Insertion.
* step 3: Finish up after BST deletion by merging: Deletion by Merging.
* step 3: Finish up after deleting BST node: Deleting from a BST.
* step 3: Finish up after deleting PBST node: Deleting from a PBST.
* step 3: Finish up after deleting RTBST node: Deleting from an RTBST.
* step 3: Move BST node to root:         Root Insertion in a BST.
* step 3: Rebalance after initial-black RB insertion: Initial Black Insertion in an RB Tree.
* step 3: Rebalance after PRB insertion: Step 3 in PRB Insertion.
* step 3: Rebalance after RB insertion:  Inserting an RB node step 3 - Rebalance.
* step 3: Rebalance after RTRB deletion: Deleting an RTRB node step 3 - Rebalance.
* step 3: Rebalance after RTRB insertion: Step 3 in RTRB Insertion.
* step 3: Rebalance after TRB insertion: Step 3 in TRB Insertion.
* step 3: Rebalance tree after PRB deletion: Deleting a PRB node step 3 - Rebalance.
* step 3: Rebalance tree after RB deletion: Deleting an RB node step 3 - Rebalance.
* step 3: Rebalance tree after TRB deletion: Deleting a TRB node step 3 - Rebalance.
* step 3: Robustly move BST node to root: Answers to All the Exercises.
* step 3: Update balance factors after AVL insertion: Step 3 in AVL Insertion.
* step 3: Update balance factors after AVL insertion, with bitmasks: Answers to All the Exercises.
* step 3: Update balance factors after PAVL insertion: Step 3 in PAVL Insertion.
* step 4: Finish up after PRB deletion:  Deleting a PRB node step 4 - Finish up.
* step 4: Finish up after RB deletion:   Deleting an RB node step 4 - Finish up.
* step 4: Finish up after RTRB deletion: Deleting an RTRB node step 4 - Finish up.
* step 4: Finish up after TRB deletion:  Deleting a TRB node step 4 - Finish up.
* step 4: Rebalance after AVL deletion:  Deleting an AVL node step 4 - Rebalance.
* step 4: Rebalance after AVL insertion: Rebalancing AVL trees.
* step 4: Rebalance after PAVL deletion: Deleting a PAVL node step 4 - Rebalance.
* step 4: Rebalance after PAVL insertion: Rebalancing PAVL trees.
* step 4: Rebalance after RTAVL deletion in left subtree: Deleting a RTAVL node step 4 - Rebalance.
* step 4: Rebalance after RTAVL deletion in right subtree: Deleting a RTAVL node step 4 - Rebalance.
* step 4: Rebalance after RTAVL insertion: Rebalancing RTAVL trees.
* step 4: Rebalance after TAVL deletion: Deleting a TAVL node step 4 - Rebalance.
* step 4: Rebalance after TAVL deletion, with stack: Answers to All the Exercises.
* step 4: Rebalance after TAVL insertion: Rebalancing TAVL trees.
* step 4: Rebalance RTAVL tree after insertion to left: Rebalancing RTAVL trees.
* step 4: Rebalance RTAVL tree after insertion to right: Rebalancing RTAVL trees.
* step 5: Finish up and return after AVL deletion: Deleting an AVL node step 5 - Finish Up.
* steps 3 and 4: Symmetric case in PAVL deletion: PAVL deletion symmetric case.
* steps 3 and 4: Symmetric case in TAVL deletion: TAVL deletion symmetric case.
* steps 3 and 4: Symmetric case in TAVL deletion, with stack: Answers to All the Exercises.
* steps 3 and 4: Update balance factors and rebalance after PAVL deletion: Deleting a PAVL node step 3 - Update.
* steps 3 and 4: Update balance factors and rebalance after RTAVL deletion: Deleting a RTAVL node step 3 - Update.
* steps 3 and 4: Update balance factors and rebalance after TAVL deletion: Deleting a TAVL node step 3 - Update.
* steps 3 and 4: Update balance factors and rebalance after TAVL deletion, with stack: Answers to All the Exercises.
* steps 3-4: Update balance factors and rebalance after AVL deletion: Deleting an AVL node step 3 - Update.
* stoi function <1>:                     Answers to All the Exercises.
* stoi function:                         Command-Line Parser.
* stop_timer function:                   Answers to All the Exercises.
* string to integer function stoi():     Answers to All the Exercises.
* summing string lengths with next_item(): Improving Convenience.
* summing string lengths with walk():    Improving Convenience.
* table assertion function control directives: Answers to All the Exercises.
* table assertion function prototypes:   Assertions.
* table assertion functions:             Answers to All the Exercises.
* table count function prototype:        Count.
* table count macro:                     Answers to All the Exercises.
* table creation function prototypes:    Creation and Destruction.
* table function prototypes:             Table Headers.
* table function types <1>:              Item and Copy Functions.
* table function types:                  Comparison Function.
* table insertion and deletion function prototypes: Insertion and Deletion.
* table insertion convenience functions: Answers to All the Exercises.
* table types:                           Table Headers.
* TAVL copy function:                    Copying a TAVL Tree.
* TAVL functions:                        TAVL Operations.
* TAVL item deletion function:           Deleting from a TAVL tree.
* TAVL item deletion function, with stack: Answers to All the Exercises.
* TAVL item insertion function:          Inserting into a TAVL tree.
* TAVL node copy function:               Copying a TAVL Tree.
* TAVL node structure:                   TAVL Data Types.
* tavl-test.c:                           Testing TAVL Trees.
* tavl.c:                                Threaded AVL Trees.
* tavl.h:                                Threaded AVL Trees.
* tavl_delete function <1>:              Answers to All the Exercises.
* tavl_delete function:                  Deleting from a TAVL tree.
* TAVL_H macro:                          Threaded AVL Trees.
* tavl_node structure:                   TAVL Data Types.
* tavl_probe function:                   Inserting into a TAVL tree.
* tavl_tag enumeration:                  TAVL Data Types.
* tbl_allocator_default variable:        Memory Allocation.
* tbl_assert_delete function:            Answers to All the Exercises.
* tbl_assert_delete macro:               Answers to All the Exercises.
* tbl_assert_insert function:            Answers to All the Exercises.
* tbl_assert_insert macro:               Answers to All the Exercises.
* tbl_comparison_func type:              Comparison Function.
* tbl_copy_func type:                    Item and Copy Functions.
* tbl_count macro:                       Answers to All the Exercises.
* tbl_free function:                     Memory Allocation.
* tbl_insert function:                   Answers to All the Exercises.
* tbl_item_func type:                    Item and Copy Functions.
* tbl_malloc_abort function:             Answers to All the Exercises.
* tbl_replace function:                  Answers to All the Exercises.
* TBST balance function:                 Balancing a TBST.
* TBST copy error helper function:       Copying a TBST.
* TBST copy function:                    Copying a TBST.
* TBST creation function:                Creating a TBST.
* TBST destruction function:             Destroying a TBST.
* TBST functions:                        TBST Operations.
* TBST item deletion function:           Deleting from a TBST.
* TBST item insertion function:          Inserting into a TBST.
* TBST main balance function:            Balancing a TBST.
* TBST main copy function:               Copying a TBST.
* TBST node copy function:               Copying a TBST.
* TBST node structure:                   TBST Data Types.
* TBST print function:                   Testing TBSTs.
* TBST search function:                  Searching a TBST.
* TBST table structure:                  TBST Data Types.
* TBST test function:                    Testing TBSTs.
* TBST traversal functions:              Traversing a TBST.
* TBST traverser advance function:       TBST Traverser Advancing.
* TBST traverser back up function:       TBST Traverser Retreating.
* TBST traverser copy initializer:       TBST Traverser Copying.
* TBST traverser first initializer:      TBST Traverser First Initialization.
* TBST traverser insertion initializer:  TBST Traverser Insert Initialization.
* TBST traverser last initializer:       TBST Traverser Last Initialization.
* TBST traverser null initializer:       TBST Traverser Null Initialization.
* TBST traverser search initializer:     TBST Traverser Find Initialization.
* TBST traverser structure:              Traversing a TBST.
* TBST tree-to-vine function:            Transforming a TBST into a Vine.
* TBST verify function:                  Testing TBSTs.
* TBST vine compression function:        Transforming a Vine into a Balanced TBST.
* TBST vine-to-tree function:            Transforming a Vine into a Balanced TBST.
* tbst-test.c:                           Testing TBSTs.
* tbst.c:                                Threaded Binary Search Trees.
* tbst.h:                                Threaded Binary Search Trees.
* tbst_balance function:                 Balancing a TBST.
* tbst_copy function:                    Copying a TBST.
* tbst_create function:                  Creating a TBST.
* tbst_delete function:                  Deleting from a TBST.
* tbst_destroy function:                 Destroying a TBST.
* tbst_find function:                    Searching a TBST.
* TBST_H macro:                          Threaded Binary Search Trees.
* tbst_link structure:                   Answers to All the Exercises.
* tbst_node structure <1>:               Answers to All the Exercises.
* tbst_node structure:                   TBST Data Types.
* tbst_probe function:                   Inserting into a TBST.
* tbst_t_copy function:                  TBST Traverser Copying.
* tbst_t_find function:                  TBST Traverser Find Initialization.
* tbst_t_first function:                 TBST Traverser First Initialization.
* tbst_t_init function:                  TBST Traverser Null Initialization.
* tbst_t_insert function:                TBST Traverser Insert Initialization.
* tbst_t_last function:                  TBST Traverser Last Initialization.
* tbst_t_next function:                  TBST Traverser Advancing.
* tbst_t_prev function:                  TBST Traverser Retreating.
* tbst_table structure <1>:              Answers to All the Exercises.
* tbst_table structure:                  TBST Data Types.
* tbst_tag enumeration:                  TBST Data Types.
* tbst_traverser structure:              Traversing a TBST.
* test BST traversal during modifications: Testing BSTs.
* test creating a BST and inserting into it: Testing BSTs.
* test declarations <1>:                 Main Program.
* test declarations <2>:                 User Interaction.
* test declarations <3>:                 Memory Manager.
* test declarations:                     Test Set Generation.
* test deleting from an empty tree:      Testing BSTs.
* test deleting nodes from the BST and making copies of it: Testing BSTs.
* test destroying the tree:              Testing BSTs.
* test enumeration:                      Main Program.
* test main program:                     Main Program.
* test prototypes <1>:                   Utility Functions.
* test prototypes <2>:                   Testing Overflow.
* test prototypes:                       Testing BSTs.
* test TBST balancing:                   Testing TBSTs.
* test utility functions:                Utility Functions.
* test.c:                                Testing our BST functions.
* test.h:                                Testing our BST functions.
* test_bst_copy function:                Answers to All the Exercises.
* test_bst_t_find function:              Answers to All the Exercises.
* test_bst_t_first function:             Testing Overflow.
* test_bst_t_insert function:            Answers to All the Exercises.
* test_bst_t_last function:              Answers to All the Exercises.
* test_bst_t_next function:              Answers to All the Exercises.
* test_bst_t_prev function:              Answers to All the Exercises.
* test_correctness function <1>:         Answers to All the Exercises.
* test_correctness function <2>:         Testing TBSTs.
* test_correctness function:             Testing BSTs.
* TEST_H macro:                          Testing our BST functions.
* test_options enumeration:              Main Program.
* test_overflow function <1>:            Answers to All the Exercises.
* test_overflow function:                Testing Overflow.
* time_seed function:                    Answers to All the Exercises.
* time_successful_search function:       Answers to All the Exercises.
* time_unsuccessful_search function:     Answers to All the Exercises.
* timer functions:                       Answers to All the Exercises.
* total_length function:                 Improving Convenience.
* transform left-side PRB deletion rebalancing case 3 into case 2: Deleting a PRB node step 3 - Rebalance.
* transform left-side RB deletion rebalancing case 3 into case 2: Deleting an RB node step 3 - Rebalance.
* transform left-side RTRB deletion rebalancing case 3 into case 2: Deleting an RTRB node step 3 - Rebalance.
* transform left-side TRB deletion rebalancing case 3 into case 2: Deleting a TRB node step 3 - Rebalance.
* transform right-side PRB deletion rebalancing case 3 into case 2: PRB deletion symmetric case.
* transform right-side RB deletion rebalancing case 3 into case 2: RB deletion symmetric case.
* transform right-side RTRB deletion rebalancing case 3 into case 2: Deleting an RTRB node step 3 - Rebalance.
* transform right-side TRB deletion rebalancing case 3 into case 2: TRB deletion symmetric case.
* trav_refresh function <1>:             Answers to All the Exercises.
* trav_refresh function:                 Better Iterative Traversal.
* traverse_iterative function <1>:       Answers to All the Exercises.
* traverse_iterative function:           Iterative Traversal of a BST.
* traverse_recursive function:           Recursive Traversal of a BST.
* traverser constructor function prototypes: Constructors.
* traverser manipulator function prototypes: Manipulators.
* traverser structure:                   Improving Convenience.
* TRB functions:                         TRB Operations.
* TRB item deletion function:            Deleting from a TRB Tree.
* TRB item deletion function, without stack: Answers to All the Exercises.
* TRB item insertion function:           Inserting into a TRB tree.
* TRB item insertion function, without stack: Answers to All the Exercises.
* TRB node structure:                    TRB Data Types.
* trb-test.c:                            Testing TRB Trees.
* trb.c:                                 Threaded Red-Black Trees.
* trb.h:                                 Threaded Red-Black Trees.
* trb_color enumeration:                 TRB Data Types.
* trb_delete function <1>:               Answers to All the Exercises.
* trb_delete function:                   Deleting from a TRB Tree.
* TRB_H macro:                           Threaded Red-Black Trees.
* trb_node structure:                    TRB Data Types.
* trb_probe function <1>:                Answers to All the Exercises.
* trb_probe function:                    Inserting into a TRB tree.
* trb_tag enumeration:                   TRB Data Types.
* tree_to_vine function <1>:             Balancing an RTBST.
* tree_to_vine function <2>:             Transforming a TBST into a Vine.
* tree_to_vine function:                 Transforming a BST into a Vine.
* uniform binary search of ordered array: Answers to All the Exercises.
* update parent pointers function:       Balancing a PBST.
* update y's balance factor after left-side AVL deletion: Deleting an AVL node step 3 - Update.
* update y's balance factor after right-side AVL deletion: AVL deletion symmetric case.
* update_parents function:               Balancing a PBST.
* usage function <1>:                    Answers to All the Exercises.
* usage function:                        Command-Line Parser.
* usage printer for search test program: Answers to All the Exercises.
* verify AVL node balance factor:        Testing AVL Trees.
* verify binary search tree ordering:    BST Verification.
* verify PBST node parent pointers:      Testing PBSTs.
* verify RB node color:                  Testing RB Trees.
* verify RB node rule 1 compliance:      Testing RB Trees.
* verify RB node rule 2 compliance:      Testing RB Trees.
* verify RTRB node rule 1 compliance:    Testing RTRB Trees.
* verify TRB node rule 1 compliance:     Testing TRB Trees.
* verify_tree function <1>:              Testing TBSTs.
* verify_tree function <2>:              Testing RB Trees.
* verify_tree function <3>:              Testing AVL Trees.
* verify_tree function:                  BST Verification.
* vine to balanced BST function:         Balancing Implementation.
* vine to balanced PBST function:        Balancing a PBST.
* vine to balanced PBST function, with parent updates: Answers to All the Exercises.
* vine_to_tree function <1>:             Answers to All the Exercises.
* vine_to_tree function <2>:             Balancing a PBST.
* vine_to_tree function:                 Transforming a Vine into a Balanced TBST.
* walk function <1>:                     Answers to All the Exercises.
* walk function:                         Recursive Traversal of a BST.
* xmalloc function:                      Utility Functions.


