
'''
''' Part of the ht://Dig package   <http://www.htdig.org/>
''' Copyright (c) 1999, 2000, 2001 The ht://Dig Group
''' For copyright details, see the file COPYING in your distribution
''' or the GNU General Public License version 2 or later
''' <http://www.gnu.org/copyleft/gpl.html>
''' 
''' 
.TH WordDict 3 local
.SH NAME
WordDict \-

manage and use an inverted index dictionary.


.SH SYNOPSIS
.nf
.ft CW

#include <mifluz.h>

WordList* words = ...;
WordDict* dict = words->Dict();
.ft R
.fi

.SH DESCRIPTION

WordDict maps strings to unique identifiers and frequency in the 
inverted index. Whenever a new word is found, the WordDict class 
can be asked to assign it a serial number. When doing so, an entry
is created in the dictionary with a frequency of zero. The application
may then increment or decrement the frequency to reflect the inverted
index content.

The serial numbers range from 1 to 2^32 inclusive.

A WordDict object is automatically created by the WordList object and
should not be created directly by the application.


.SH METHODS
.TP
.B   WordDict() 
Private constructor.
.TP
.B   int Initialize(WordList* words)
Bind the object a WordList inverted index. Return OK on success,
NOTOK otherwise.
.TP
.B   int Open()
Open the underlying Berkeley DB sub-database. The enclosing 
file is given by the
.I words
data member. Return OK on success,
NOTOK otherwise.
.TP
.B   int Remove()
Destroy the underlying Berkeley DB sub-database. Return OK on success,
NOTOK otherwise.
.TP
.B   int Close()
Close the underlying Berkeley DB sub-database. Return OK on success,
NOTOK otherwise.
.TP
.B   int Serial(const String& word, unsigned int& serial)
If the
.B word
argument exists in the dictionnary, return its
serial number in the
.B serial
argument. If it does not already
exists, assign it a serial number, create an entry with a frequency
of zero and return the new serial in the
.B serial
argument.
Return OK on success, NOTOK otherwise.
.TP
.B   int SerialExists(const String& word, unsigned int& serial)
If the
.B word
argument exists in the dictionnary, return its
serial number in the
.B serial
argument. If it does not exists
set the
.B serial
argument to WORD_DICT_SERIAL_INVALID.
Return OK on success, NOTOK otherwise.
.TP
.B   int SerialRef(const String& word, unsigned int& serial)
Short hand for Serial() followed by Ref().
Return OK on success, NOTOK otherwise.
.TP
.B   int Noccurrence(const String& word, unsigned int& noccurrence) const
Return the frequency of the
.B word
argument
in the
.B noccurrence
argument. 
Return OK on success, NOTOK otherwise.
.TP
.B   int Normalize(String& word) const
Short hand for words->GetContext()->GetType()->Normalize(word).
Return OK on success, NOTOK otherwise.
.TP
.B   int Ref(const String& word) 
Short hand for Incr(word, 1)
.TP
.B   int Incr(const String& word, unsigned int incr)
Add
.B incr
to the frequency of the
.B word
. 
Return OK on success, NOTOK otherwise.
.TP
.B   int Unref(const String& word) 
Short hand for Decr(word, 1)
.TP
.B   int Decr(const String& word, unsigned int decr)
Subtract
.B decr
to the frequency of the
.B word
. If
the frequency becomes lower or equal to zero, remove the entry
from the dictionnary and lose the association between the word and its
serial number.
Return OK on success, NOTOK otherwise.
.TP
.B   int Put(const String& word, unsigned int noccurrence)
Set the frequency of
.B word
with the value of the
.B noccurrence
argument.
.TP
.B   int Exists(const String& word) const
Return true if
.B word
exists in the dictionnary, false otherwise.
.TP
.B   List* Words() const
Return a pointer to the associated WordList object.
.TP
.B   WordDictCursor* Cursor() const
Return a cursor to sequentially walk the dictionnary using the
.B Next
method.
.TP
.B   int Next(WordDictCursor* cursor, String& word, WordDictRecord& record)
Return the next entry in the dictionnary. The
.B cursor
argument
must have been created using the
.I Cursor
method. The word is
returned in the
.B word
argument and the record is returned in
the
.B record
argument. 
On success the function returns 0, at the end of the dictionnary it
returns DB_NOTFOUND. The
.B cursor
argument is deallocated when
the function hits the end of the dictionnary or an error occurs.
.TP
.B   WordDictCursor* CursorPrefix(const String& prefix) const
Return a cursor to sequentially walk the entries of the dictionnary
that start with the
.B prefix
argument, using the
.B NextPrefix
method.
.TP
.B   int NextPrefix(WordDictCursor* cursor, String& word, WordDictRecord& record)
Return the next prefix from the dictionnary. The
.B cursor
argument
must have been created using the
.I CursorPrefix
method. The word is
returned in the
.B word
argument and the record is returned in
the
.B record
argument. The
.B word
is guaranteed to start with
the prefix specified to the
.B CursorPrefix
method.
On success the function returns 0, at the end of the dictionnary it
returns DB_NOTFOUND. The
.B cursor
argument is deallocated when
the function hits the end of the dictionnary or an error occurs.
.TP
.B   int Write(FILE* f)
Dump the complete dictionary in the file descriptor
.B f.
The
format of the dictionary is
.I word serial frequency
, one by
line.
.PP

.SH AUTHORS
Loic Dachary loic@gnu.org

The Ht://Dig group http://dev.htdig.org/


.SH SEE ALSO
htdb_dump(1), htdb_stat(1), htdb_load(1), mifluzdump(1), mifluzload(1), mifluzsearch(1), mifluzdict(1), WordContext(3), WordList(3), WordListOne(3), WordKey(3), WordKeyInfo(3), WordType(3), WordDBInfo(3), WordRecordInfo(3), WordRecord(3), WordReference(3), WordCursor(3), WordCursorOne(3), WordMonitor(3), Configuration(3), mifluz(3)

