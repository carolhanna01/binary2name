
'''
''' Part of the ht://Dig package   <http://www.htdig.org/>
''' Copyright (c) 1999, 2000, 2001 The ht://Dig Group
''' For copyright details, see the file COPYING in your distribution
''' or the GNU General Public License version 2 or later
''' <http://www.gnu.org/copyleft/gpl.html>
''' 
''' 
.TH mifluz 3 local
.SH NAME
mifluz \-
C++ library to use and manage inverted indexes


.SH SYNOPSIS
.nf
.ft CW
#include <mifluz.h>

main()
{
   Configuration* config = WordContext::Initialize();

   WordList* words = new WordList(*config);

   ...

   delete words;

   WordContext::Finish();
}
.ft R
.fi

.SH DESCRIPTION

The purpose of
.I mifluz
is to provide a C++ library to build and query a
full text inverted index. It is dynamically updatable, scalable (up to
1Tb indexes), uses a controlled amount of memory, shares index files
and memory cache among processes or threads and compresses index files
to 50% of the raw data. The structure of the index is configurable at
runtime and allows inclusion of relevance ranking information. The
query functions do not require loading all the occurrences of a
searched term.  They consume very few resources and many searches can
be run in parallel.

The file management library used in mifluz is a modified Berkeley DB 
(www.sleepycat.com) version 3.1.14.


.SH CLASSES AND COMMANDS
.TP
.B  Configuration 

reads the configuration file and manages it in memory.
.TP
.B  WordContext 

read configuration and setup mifluz context.
.TP
.B  WordCursor 

abstract class to search and retrieve entries in a WordList object.
.TP
.B  WordCursorOne 

search and retrieve entries in a WordListOne object.
.TP
.B  WordDBInfo 
inverted index usage environment.
.TP
.B  WordDict 

manage and use an inverted index dictionary.
.TP
.B  WordKey 
inverted index key.
.TP
.B  WordKeyInfo 
information on the key structure of the inverted index.
.TP
.B  WordList 

abstract class to manage and use an inverted index file.
.TP
.B  WordListOne 

manage and use an inverted index file.
.TP
.B  WordMonitor 
monitoring classes activity.
.TP
.B  WordRecord 
inverted index record.
.TP
.B  WordRecordInfo 
information on the record structure of the inverted index.
.TP
.B  WordReference 
inverted index occurrence.
.TP
.B  WordType 
defines a word in term of allowed characters, length etc.
.TP
.B  htdb_dump 

dump the content of an inverted index in Berkeley DB fashion
.TP
.B  htdb_load 

displays statistics for Berkeley DB environments.
.TP
.B  htdb_stat 

displays statistics for Berkeley DB environments.
.TP
.B  mifluzdict 

dump the dictionnary of an inverted index.
.TP
.B  mifluzdump 

dump the content of an inverted index.
.TP
.B  mifluzload 

load the content of an inverted index.
.TP
.B  mifluzsearch 
search the content of an inverted index.
.PP

.SH CONFIGURATION
The format of the configuration file read by WordContext::Initialize is:
.nf
.ft CW
keyword: value
.ft R
.fi
Comments may be added on lines starting with a #. The default
configuration file is read from from the file pointed by the
.B MIFLUZ_CONFIG
environment variable or
.B ~/.mifluz
or
.B /etc/mifluz.conf
in this
order. If no configuration file is available, builtin defaults are used.
Here is an example configuration file:
.nf
.ft CW
wordlist_extend: true
wordlist_cache_size: 10485760
wordlist_page_size: 32768
wordlist_compress: 1
wordlist_wordrecord_description: NONE
wordlist_wordkey_description: Word/DocID 32/Flags 8/Location 16
wordlist_monitor: true
wordlist_monitor_period: 30
wordlist_monitor_output: monitor.out,rrd
.ft R
.fi
.TP
.B  wordlist_allow_numbers {true|false} <number> (default false)
A digit is considered a valid character within a word if
this configuration parameter is set to
.I true
otherwise
it is an error to insert a word containing digits.
See the
.B Normalize
method for more information.
.TP
.B  wordlist_cache_inserts {true|false} (default false)
If true all
.B Insert
calls are cached in memory. When the 
WordList object is closed or a different access method is called
the cached entries are flushed in the inverted index.
.TP
.B  wordlist_cache_max <bytes> (default 0)
Maximum size of the cumulated cache files generated when doing bulk
insertion with the
.B BatchStart()
function. When this limit is
reached, the cache files are all merged into the inverted index. 
The value 0 means infinite size allowed.
See WordList(3) for the rationale behind cache file handling.
.TP
.B  wordlist_cache_size <bytes> (default 500K)
Berkeley DB cache size (see Berkeley DB documentation)
Cache makes a huge difference in performance. It must be at least 2%
of the expected total data size. Note that if compression is activated
the data size is eight times larger than the actual file size. In this
case the cache must be scaled to 2% of the data size, not 2% 
of the file size. See
.B Cache tuning
in the mifluz guide for
more hints.
See WordList(3) for the rationale behind cache file handling.
.TP
.B  wordlist_compress {true|false} (default false)
Activate compression of the index. The resulting index is eight times
smaller than the uncompressed index.
.TP
.B  wordlist_env_dir <directory> (default .)
Only valid if
.I wordlist_env_share
set to
.I true.
Specify the directory in which the sharable environment will 
be created. All
inverted indexes specified with a non-absolute pathname will be
created relative to this directory.
.TP
.B  wordlist_env_share {true,false} (default false)
If true a sharable environment is open or created if none exist.
.TP
.B  wordlist_env_skip {true,false} (default false)
If true no environment is created at all. This must never 
be used if a
.I WordList
object is created. It may be
useful if only
.I WordKey
objects are used, for instance.
.TP
.B  wordlist_extend {true|false} (default false)
If
.B true
maintain reference count of unique 
words. The
.B Noccurrence
method gives access to this count.
.TP
.B  wordlist_locale <locale> (default C)
Set the locale of the program to
.B locale
. See setlocale(3)
for more information.
.TP
.B  wordlist_lowercase {true|false} <number> (default true)
If a word contains upper case letters it is converted to lowercase
if this configuration parameter is true, otherwise it is left
untouched.
.TP
.B  wordlist_maximum_word_length <number> (default 25)
The maximum length of a word.
See the
.B Normalize
method for more information.
.TP
.B  wordlist_mimimun_word_length <number> (default 3)
The minimum length of a word.
See the
.B Normalize
method for more information.
.TP
.B  wordlist_monitor {true|false} (default false)
If true create a
.I WordMonitor
instance to gather statistics and 
build reports.
.TP
.B  wordlist_monitor_output <file>[,{rrd,readable] (default stderr)
Print reports on
.B file
instead of the default
.B stderr
.
If
.B type
is set to
.B rrd
the output is fit for the
.I benchmark-report
script. Otherwise it a (hardly :-) readable
string.
.TP
.B  wordlist_monitor_period <sec> (default 0)
If the value
.B sec
is a positive integer, set a timer to
print reports every
.B sec
seconds. The timer is set using
the ALRM signal and will fail if the calling application already
has a handler on that signal.
.TP
.B  wordlist_page_size <bytes> (default 8192)
Berkeley DB page size (see Berkeley DB documentation)
.TP
.B  wordlist_truncate {true|false} <number> (default true)
If a word is too long according to
the
.I wordlist_maximum_word_length
it is truncated
if this configuration parameter is
.I true
otherwise it
is considered an invalid word.
.TP
.B  wordlist_valid_punctuation [characters] (default none)
A list of punctuation characters that may appear in a word. 
These characters will be removed from the word before insertion
in the index.
.TP
.B  wordlist_verbose <number> (default 0)
Set the verbosity level of the WordList class.


1 walk logic


2 walk logic details


3 walk logic lots of details
.TP
.B  wordlist_wordkey_description <desc> (no default)
Describe the structure of the inverted index key.
In the following explanation of the
.I <desc>
format,
mandatory words are
in bold and values that must be replaced in italic.


.B Word
.I bits/name bits
[/...]


The
.I name
is an alphanumerical symbolic name for the key field.
The
.I bits
is the number of bits required to store this field.
Note that all values are stored in unsigned integers (unsigned int).
Example:
.nf
.ft CW
Word 8/Document 16/Location 8
.ft R
.fi
.TP
.B  wordlist_wordkey_document [field ...] (default none)
A white space separated list of field numbers that define a document.
The field number list must not contain gaps. For instance 1 2 3 is 
valid but 1 3 4 is not valid.
This configuration parameter is not used by the mifluz library
but may be used by a query application to define the semantic of 
a document. In response to a query, the application will return a
list of results in which only distinct documents will be shown.
.TP
.B  wordlist_wordkey_location field (default none)
A single field number that contains the position of a word in a
given document.
This configuration parameter is not used by the mifluz library
but may be used by a query application.
.TP
.B  wordlist_wordrecord_description {NONE|DATA|STR} (no default)
NONE: the record is empty


DATA: the record contains an integer (unsigned int)


STR: the record contains a string (String)
.PP

.SH ENVIRONMENT

.B MIFLUZ_CONFIG
file name of configuration file read by
WordContext(3). Defaults to
.B ~/.mifluz.
or
.B /usr/etc/mifluz.conf


.SH AUTHORS
Loic Dachary loic@gnu.org

The Ht://Dig group http://dev.htdig.org/


.SH SEE ALSO
htdb_dump(1), htdb_stat(1), htdb_load(1), mifluzdump(1), mifluzload(1), mifluzsearch(1), mifluzdict(1), WordContext(3), WordList(3), WordDict(3), WordListOne(3), WordKey(3), WordKeyInfo(3), WordType(3), WordDBInfo(3), WordRecordInfo(3), WordRecord(3), WordReference(3), WordCursor(3), WordCursorOne(3), WordMonitor(3), Configuration(3)

