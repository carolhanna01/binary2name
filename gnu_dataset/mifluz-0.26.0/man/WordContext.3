
'''
''' Part of the ht://Dig package   <http://www.htdig.org/>
''' Copyright (c) 1999, 2000, 2001 The ht://Dig Group
''' For copyright details, see the file COPYING in your distribution
''' or the GNU General Public License version 2 or later
''' <http://www.gnu.org/copyleft/gpl.html>
''' 
''' 
.TH WordContext 3 local
.SH NAME
WordContext \-

read configuration and setup mifluz context.


.SH SYNOPSIS
.nf
.ft CW

#include <mifluz.h>

WordContext context;
.ft R
.fi

.SH DESCRIPTION

The WordContext object must be the first object created.
All other objects (WordList, WordReference, WordKey and WordRecord)
are allocated via the corresponding methods of WordContext (List,
Word, Key and Record respectively). 

The WordContext object contains a
.B Configuration
object 
that holds the configuration parameters used by the instance. 
If a configuration parameter is changed, the
.I ReInitialize
method should be called to take them in account.


.SH CONFIGURATION
For more information on the configuration attributes and a complete list of attributes, see the mifluz(3) manual page.
.TP
.B  wordlist_monitor {true|false} (default false)
If true create a
.I WordMonitor
instance to gather statistics and 
build reports.
.PP

.SH METHODS
.TP
.B   WordContext() 
Constructor. Read the configuration parameters from the
environment.  If the environment variable
.B MIFLUZ_CONFIG
is
set to a pathname, read it as a configuration file. If
.B MIFLUZ_CONFIG
is not set, try to read the
.I ~/.mifluz
configuration file or
.I /usr/etc/mifluz.conf
. See the mifluz
manual page for a complete list of the configuration attributes.
.TP
.B   WordContext(const Configuration &config) 
Constructor. The
.B config
argument must contain all the configuration
parameters, no configuration file is loaded from the environment.
.TP
.B   WordContext(const ConfigDefaults *array) 
Constructor. The
.B array
argument holds configuration parameters
that will override their equivalent in the configuration file read 
from the environment.
.TP
.B   void Initialize(const Configuration &config)
Initialize the WordContext object. This method is called by 
every constructor.

When calling
.B Initialize
a second time, one must ensure
that all WordList and WordCursor objects have been
destroyed. WordList and WordCursor internal state depends on the
current WordContext that will be lost by a second call.


For those interested by the internals, the
.B Initialize
function
maintains a Berkeley DB environment (DB_ENV) in the following way:

First invocation:
.nf
.ft CW
Initialize -> new DB_ENV (thru WordDBInfo)
.ft R
.fi

Second invocation:
.nf
.ft CW
Initialize -> delete DB_ENV -> new DB_ENV (thru WordDBInfo)
.ft R
.fi
.TP
.B   int Initialize(const ConfigDefaults* config_defaults = 0)
Initialize the WordContext object.
Build a
.I Configuration
object from the file pointed to by the 
MIFLUZ_CONFIG environment variable or ~/.mifluz or /usr/etc/mifluz.conf.
The
.B config_defaults
argument, if provided, is passed to
the
.I Configuration
object using the
.B Defaults
method.
The
.B Initialize(const Configuration &)
method is then called
with the
.I Configuration
object.
Return OK if success, NOTOK otherwise.
Refer to the
.I Configuration
description for more information.
.TP
.B   int ReInitialize()
Destroy internal state except the
.I Configuration
object and
rebuild it. May be used when the configuration is changed to
take these changes in account.
Return OK if success, NOTOK otherwise.
.TP
.B   const WordType& GetType() const 
Return the
.B WordType
data member of the current object as a const.
.TP
.B   WordType& GetType() 
Return the
.B WordType
data member of the current object.
.TP
.B   const WordKeyInfo& GetKeyInfo() const 
Return the
.B WordKeyInfo
data member of the current object
as a const.
.TP
.B   WordKeyInfo& GetKeyInfo() 
Return the
.B WordKeyInfo
data member of the current object.
.TP
.B   const WordRecordInfo& GetRecordInfo() const 
Return the
.B WordRecordInfo
data member of the current
object as a const.
.TP
.B   WordRecordInfo& GetRecordInfo() 
Return the
.B WordRecordInfo
data member of the current object.
.TP
.B   const WordDBInfo& GetDBInfo() const 
Return the
.B WordDBInfo
data member of the current object as
a const.
.TP
.B   WordDBInfo& GetDBInfo() 
Return the
.B WordDBInfo
data member of the current object.
.TP
.B   const WordMonitor* GetMonitor() const 
Return the
.B WordMonitor
data member of the current object
as a const.  The pointer may be NULL if the word_monitor
attribute is false.
.TP
.B   WordMonitor* GetMonitor() 
Return the
.B WordMonitor
data member of the current object.
The pointer may be NULL if the word_monitor attribute is false.
.TP
.B   const Configuration& GetConfiguration() const 
Return the
.B Configuration
data member of the current object
as a const.
.TP
.B   Configuration& GetConfiguration() 
Return the
.B Configuration
data member of the current object.
.TP
.B   WordList* List()
Return a new
.B WordList
object, using the 
WordList(WordContext*) constructor. It is the responsibility of the
caller to delete this object before the WordContext object is
deleted. Refer to the
.B wordlist_multi
configuration parameter
to know the exact type of the object created.
.TP
.B   WordReference* Word()
Return a new
.B WordReference
object, using the
WordReference(WordContext*) constructor. It is the responsibility of the
caller to delete this object before the WordContext object is
deleted.
.TP
.B   WordReference* Word(const String& key0, const String& record0)
Return a new
.B WordReference
object, using the
WordReference(WordContext*, const String&, const& String)
constructor. It is the responsibility of the
caller to delete this object before the WordContext object is
deleted.
.TP
.B   WordReference* Word(const String& word)
Return a new
.B WordReference
object, using the
WordReference(WordContext*, const String&)
constructor. It is the responsibility of the
caller to delete this object before the WordContext object is
deleted.
.TP
.B   WordRecord* Record()
Return a new
.B WordRecord
object, using the
WordRecord(WordContext*) constructor. It is the responsibility of the
caller to delete this object before the WordContext object is
deleted.
.TP
.B   WordKey* Key()
Return a new
.B WordKey
object, using the
WordKey(WordContext*) constructor. It is the responsibility of the
caller to delete this object before the WordContext object is
deleted.
.TP
.B   WordKey* Key(const String& word)
Return a new
.B WordKey
object, using the
WordKey(WordContext*, const String&) constructor. It is the
responsibility of the caller to delete this object before the
WordContext object is deleted.
.TP
.B   WordKey* Key(const WordKey& other)
Return a new
.B WordKey
object, using the
WordKey(WordContext*, const WordKey&) constructor. It is the
responsibility of the caller to delete this object before the
WordContext object is deleted.
.TP
.B   static String ConfigFile()
Return the full pathname of the configuration file. The configuration
file lookup first searches for the file pointed by the
.B MIFLUZ_CONFIG
environment variable then
.B ~/.mifluz
and
finally
.B /usr/etc/mifluz.conf
. If no configuration file is found,
return the empty string.
.PP

.SH ENVIRONMENT

.B MIFLUZ_CONFIG
file name of configuration file read by
WordContext(3). Defaults to
.B ~/.mifluz.
or
.B /usr/etc/mifluz.conf


.SH AUTHORS
Loic Dachary loic@gnu.org

The Ht://Dig group http://dev.htdig.org/


.SH SEE ALSO
htdb_dump(1), htdb_stat(1), htdb_load(1), mifluzdump(1), mifluzload(1), mifluzsearch(1), mifluzdict(1), WordList(3), WordDict(3), WordListOne(3), WordKey(3), WordKeyInfo(3), WordType(3), WordDBInfo(3), WordRecordInfo(3), WordRecord(3), WordReference(3), WordCursor(3), WordCursorOne(3), WordMonitor(3), Configuration(3), mifluz(3)

