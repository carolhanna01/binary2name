
'''
''' Part of the ht://Dig package   <http://www.htdig.org/>
''' Copyright (c) 1999, 2000, 2001 The ht://Dig Group
''' For copyright details, see the file COPYING in your distribution
''' or the GNU General Public License version 2 or later
''' <http://www.gnu.org/copyleft/gpl.html>
''' 
''' 
.TH WordReference 3 local
.SH NAME
WordReference \-
inverted index occurrence.


.SH SYNOPSIS
.nf
.ft CW

#include <WordReference.h>

WordContext* context;
WordReference* word = context->Word("word");
WordReference* word = context->Word();
WordReference* word = context->Word(WordKey("key 1 2"), WordRecord());

WordKey key = word->Key()
WordKey record = word->Record()

word->Clear();

delete word;
.ft R
.fi

.SH DESCRIPTION

A
.I WordReference
object is an agregate of a
.I WordKey
object
and a
.I WordRecord
object.

Although constructors may be used, the prefered way to create a 
WordReference object is by using the
.B WordContext::Word
method.


.SH ASCII FORMAT

The ASCII description is a string with fields separated by tabs or
white space. It is made of the ASCII description of a
.I WordKey
object immediately followed by the ASCII
description of a
.I WordRecord
object.  See the corresponding
manual pages for more information.


.SH METHODS
.TP
.B   WordReference(WordContext* ncontext) :
Constructor. Build an object with empty key and empty record.
The
.B ncontext
argument must be a pointer to a valid
WordContext object.
.TP
.B   WordReference(WordContext* ncontext, const String& key0, const String& record0) :
Constructor. Build an object from disk representation of
.B key
and
.B record
.
The
.B ncontext
argument must be a pointer to a valid
WordContext object.
.TP
.B   WordReference(WordContext* ncontext, const String& word) :
Constructor. Build an object with key word set to
.B word
and otherwise empty and empty record.
The
.B ncontext
argument must be a pointer to a valid
WordContext object.
.TP
.B   void Clear() 
Reset to empty key and record
.TP
.B   inline WordContext* GetContext() 
Return a pointer to the WordContext object used to create
this instance.
.TP
.B   inline const WordContext* GetContext() const 
Return a pointer to the WordContext object used to create
this instance as a const.
.TP
.B   inline String& GetWord() 
Return the
.B word
data member.
.TP
.B   inline const String& GetWord() const 
Return the
.B word
data member as a const.
.TP
.B   inline void SetWord(const String& nword) 
Set the
.B word
data member from the
.B nword
argument.
.TP
.B   WordKey& Key() 
Return the key object.
.TP
.B   const WordKey& Key() const 
Return the key object as const.
.TP
.B   WordRecord& Record() 
Return the record object.
.TP
.B   const WordRecord& Record() const 
Return the record object as const.
.TP
.B   void Key(const WordKey& arg) 
Copy
.B arg
in the key part of the object.
.TP
.B   int KeyUnpack(const String& packed) 
Set key structure from disk storage format as found in
.B packed
string.
Return OK if successfull, NOTOK otherwise.
.TP
.B   String KeyPack() const 
Convert key object into disk storage format as found in 
return the resulting string.
.TP
.B   int KeyPack(String& packed) const 
Convert key object into disk storage format as found in 
and place the result in
.B packed
string.
Return OK if successfull, NOTOK otherwise.
.TP
.B   void Record(const WordRecord& arg) 
Copy
.B arg
in the record part of the object.
.TP
.B   int RecordUnpack(const String& packed) 
Set record structure from disk storage format as found in
.B packed
string.
Return OK if successfull, NOTOK otherwise.
.TP
.B   String RecordPack() const 
Convert record object into disk storage format as found in 
return the resulting string.
.TP
.B   int RecordPack(String& packed) const 
Convert record object into disk storage format as found in 
and place the result in
.B packed
string.
Return OK if successfull, NOTOK otherwise.
.TP
.B   inline int Pack(String& ckey, String& crecord) const 
Short hand for KeyPack(
.B ckey
) RecordPack(
.B crecord
).
.TP
.B   int Unpack(const String& ckey, const String& crecord) 
Short hand for KeyUnpack(
.B ckey
) RecordUnpack(
.B crecord
).
.TP
.B   int Merge(const WordReference& other)
Merge key with other.Key() using the
.I WordKey::Merge
method:
key.Merge(other.Key()).
See the corresponding manual page for details. Copy other.record
into the record part of the object.
.TP
.B   static WordReference Merge(const WordReference& master, const WordReference& slave) 
Copy
.B master
before merging with
.B master.
Merge(
.B slave
)
and return the copy. Prevents alteration of
.B master
.
.TP
.B   int Set(const String& bufferin)
Set the whole structure from ASCII string in
.B bufferin
.
See
.I ASCII FORMAT
section.
Return OK if successfull, NOTOK otherwise.
.TP
.B   int Get(String& bufferout) const
Convert the whole structure to an ASCII string description 
in
.B bufferout.
See
.I ASCII FORMAT
section.
Return OK if successfull, NOTOK otherwise.
.TP
.B   String Get() const
Convert the whole structure to an ASCII string description 
and return it.
See
.I ASCII FORMAT
section.
.TP
.B   int Write(FILE* f) const
Print object in ASCII form on
.B f
(uses
.I Get
method).
See
.I ASCII FORMAT
section.
.TP
.B   void Print() const
Print object in ASCII form on
.B stdout
(uses
.I Get
method).
See
.I ASCII FORMAT
section.
.PP

.SH AUTHORS
Loic Dachary loic@gnu.org

The Ht://Dig group http://dev.htdig.org/


.SH SEE ALSO
htdb_dump(1), htdb_stat(1), htdb_load(1), mifluzdump(1), mifluzload(1), mifluzsearch(1), mifluzdict(1), WordContext(3), WordList(3), WordDict(3), WordListOne(3), WordKey(3), WordKeyInfo(3), WordType(3), WordDBInfo(3), WordRecordInfo(3), WordRecord(3), WordCursor(3), WordCursorOne(3), WordMonitor(3), Configuration(3), mifluz(3)

