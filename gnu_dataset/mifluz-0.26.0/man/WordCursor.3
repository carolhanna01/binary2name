
'''
''' Part of the ht://Dig package   <http://www.htdig.org/>
''' Copyright (c) 1999, 2000, 2001 The ht://Dig Group
''' For copyright details, see the file COPYING in your distribution
''' or the GNU General Public License version 2 or later
''' <http://www.gnu.org/copyleft/gpl.html>
''' 
''' 
.TH WordCursor 3 local
.SH NAME
WordCursor \-

abstract class to search and retrieve entries in a WordList object.


.SH SYNOPSIS
.nf
.ft CW

#include <WordList.h>

int callback(WordList *, WordDBCursor& , const WordReference *, Object &)
{
   ...
}

Object* data = ...

WordList *words = ...;

WordCursor *search = words->Cursor(WordKey("word <UNDEF> <UNDEF>"), HTDIG_WORDLIST_COLLECTOR);

if(search->Walk() == NOTOK) bark;
List* results = search->GetResults();

WordCursor *search = words->Cursor(callback, data);
WordCursor *search = words->Cursor(WordKey("word <UNDEF> <UNDEF>"));
WordCursor *search = words->Cursor(WordKey("word <UNDEF> <UNDEF>"), callback, data);
WordCursor *search = words->Cursor(WordKey());

search->WalkInit();
if(search->WalkNext() == OK)
  dosomething(search->GetFound());
search->WalkFinish();
.ft R
.fi

.SH DESCRIPTION

WordCursor is an iterator on an inverted index. It is created by
asking a
.I WordList
object with the
.I Cursor.
There is
no other way to create a WordCursor object.
When the
.I Walk*
methods return,
the WordCursor object contains the result of the search and 
status information that indicates if it reached the end of 
the list (IsAtEnd() method).

The
.B callback
function that is called each time a match is
found takes the following arguments:
.nf
.ft CW
WordList* words pointer to the inverted index handle.
WordDBCursor& cursor to call Del() and delete the current match
WordReference* wordRef is the match
Object& data is the user data provided by the caller when
             search began.
.ft R
.fi

The
.I WordKey
object that specifies the search criterion
may be used as follows (assuming word is followed by DOCID and
LOCATION):

Ex1:
.B WordKey()
walk the entire list of occurences.

Ex2:
.B WordKey("word <UNDEF> <UNDEF>")
find all occurrences
of
.I word
.

Ex3:
.B WordKey("meet <UNDEF> 1")
find all occurrences of
.I meet
that occur at LOCATION 1 in any DOCID. This can
be inefficient since the search has to scan all occurrences
of
.I meet
to find the ones that occur at LOCATION 1.

Ex4:
.B WordKey("meet 2 <UNDEF>")
find all occurrences of
.I meet
that occur in DOCID 2, at any location.

WordList is an abstract class and cannot be instanciated. 
See the WordCursorOne manual page for an actual implementation of
a WordCursor object.


.SH METHODS
.TP
.B   virtual void Clear() = 0
Clear all data in object, set
.B GetResult()
data to NULL but
do not delete it (the application is responsible for that).
.TP
.B   virtual inline int IsA() const 
Returns the type of the object. May be overloaded by
derived classes to differentiate them at runtime.
Returns WORD_CURSOR.
.TP
.B   virtual inline int Optimize() 
Optimize the cursor before starting a Walk.
Returns OK on success, NOTOK otherwise.
.TP
.B   virtual int ContextSave(String& buffer) const = 0
Save in
.B buffer
all the information necessary to resume
the walk at the point it left. The ASCII representation of the
last key found (GetFound()) is written in
.B buffer
using the
WordKey::Get method.
.TP
.B   virtual int ContextRestore(const String& buffer) = 0
Restore from buffer all the information necessary to 
resume the walk at the point it left. The
.B buffer
is expected
to contain an ASCII representation of a WordKey (see WordKey::Set
method). A
.B Seek
is done on the key and the object is prepared
to jump to the next occurrence when
.B WalkNext
is called (the
cursor_get_flags is set to
.I DB_NEXT.
.TP
.B   virtual int Walk() = 0
Walk and collect data from the index. 
Returns OK on success, NOTOK otherwise.
.TP
.B   virtual int WalkInit() = 0
Must be called before other Walk methods are used.
Fill internal state according to input parameters 
and move before the first matching entry.
Returns OK on success, NOTOK otherwise.
.TP
.B   virtual int WalkRewind() = 0
Move before the first index matching entry.
Returns OK on success, NOTOK otherwise.
.TP
.B   virtual int WalkNext() = 0
Move to the next matching entry.  At end of list, WORD_WALK_ATEND
is returned.  Returns OK on success, NOTOK otherwise. When OK
is returned, the GetFound() method returns the matched entry.
When WORD_WALK_ATEND is returned, the GetFound() method returns
an empty object if the end of the index was reached or the match
that was found and that is greated than the specified search
criterion.
.TP
.B   virtual int WalkNextStep() = 0
Advance the cursor one step. The entry pointed to by the cursor may
or may not match the requirements.  Returns OK if entry pointed
by cursor matches requirements.  Returns NOTOK on
failure. Returns WORD_WALK_NOMATCH_FAILED if the current entry
does not match requirements, it's safe to call WalkNextStep again
until either OK or NOTOK is returned.
.TP
.B   virtual int WalkNextExclude(const WordKey& key) 
Return 0 if this key must not be returned by WalkNext as a valid
match. The WalkNextStep method calls this virtual method immediately
after jumping to the next entry in the database. This may be used,
for instance, to skip entries that were selected by a previous 
search.
.TP
.B   virtual int WalkFinish() = 0
Terminate Walk, free allocated resources.
Returns OK on success, NOTOK otherwise.
.TP
.B   virtual int Seek(const WordKey& patch) = 0
Move before the inverted index position specified in
.B patch.
May only be called after a successfull call to the
.I WalkNext
or
.I WalkNextStep
method.
Copy defined fields from
.B patch
into a copy of the
.I found
data member and 
initialize internal state so that
.I WalkNext
jumps to
this key next time it's called (cursor_get_flag set to DB_SET_RANGE).
Returns OK if successfull, NOTOK otherwise.
.TP
.B   virtual inline int IsAtEnd() const 
Returns true if cursor is positioned after the last possible
match, false otherwise.
.TP
.B   virtual inline int IsNoMatch() const 
Returns true if cursor hit a value that does not match search criterion.
.TP
.B   inline WordKey& GetSearch() 
Returns the search criterion.
.TP
.B   inline int GetAction() const 
Returns the type of action when a matching entry
is found.
.TP
.B   inline List *GetResults() 
Returns the list of WordReference found. The application
is responsible for deallocation of the list. If the
.B action
input flag bit HTDIG_WORDLIST_COLLECTOR is not set, return a NULL
pointer.
.TP
.B   inline List *GetTraces() 
For debugging purposes. Returns the list of WordReference hit 
during the search
process. Some of them match the searched key, some don't.
The application is responsible for deallocation of the list.
.TP
.B   inline void SetTraces(List* traceRes_arg) 
For debugging purposes. Set the list of WordReference hit
during the search process.
.TP
.B   inline const WordReference& GetFound() 
Returns the last entry hit by the search. Only contains
a valid value if the last
.I WalkNext
or
.I WalkNextStep
call was successfull (i.e. returned OK).
.TP
.B   inline int GetStatus() const 
Returns the status of the cursor which may be 
OK or WORD_WALK_ATEND.
.TP
.B   virtual int Get(String& bufferout) const = 0
Convert the whole structure to an ASCII string description.
Returns OK if successfull, NOTOK otherwise.
.TP
.B   inline String Get() const 
Convert the whole structure to an ASCII string description
and return it.
.TP
.B   virtual int Initialize(WordList *nwords, const WordKey &nsearchKey, wordlist_walk_callback_t ncallback, Object * ncallback_data, int naction) = 0
Protected method. Derived classes should use this function to initialize
the object if they do not call a WordCursor constructor in their own
constructutor. Initialization may occur after the object is created
and must occur before a
.B Walk*
method is called. See the 
DESCRIPTION section for the semantics of the arguments.
Return OK on success, NOTOK on error.
.TP
.B   WordKey searchKey
Input data. The key to be searched, see DESCRIPTION for more information.
.TP
.B   WordReference found
Output data. Last match found. Use GetFound() to retrieve it.
.TP
.B   int status
Output data. WORD_WALK_ATEND if cursor is past last match, 
OK otherwise. Use GetStatus() to retrieve it.
.TP
.B   WordList *words
The inverted index used by this cursor.
.PP

.SH AUTHORS
Loic Dachary loic@gnu.org

The Ht://Dig group http://dev.htdig.org/


.SH SEE ALSO
htdb_dump(1), htdb_stat(1), htdb_load(1), mifluzdump(1), mifluzload(1), mifluzsearch(1), mifluzdict(1), WordContext(3), WordList(3), WordDict(3), WordListOne(3), WordKey(3), WordKeyInfo(3), WordType(3), WordDBInfo(3), WordRecordInfo(3), WordRecord(3), WordReference(3), WordCursorOne(3), WordMonitor(3), Configuration(3), mifluz(3)

