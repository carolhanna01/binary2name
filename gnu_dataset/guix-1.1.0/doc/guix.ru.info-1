This is guix.ru.info, produced by makeinfo version 6.7 from
guix.ru.texi.

Copyright © 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 Ludovic
Courtès
Copyright © 2013, 2014, 2016 Andreas Enge
Copyright © 2013 Nikita Karetnikov
Copyright © 2014, 2015, 2016 Alex Kost
Copyright © 2015, 2016 Mathieu Lirzin
Copyright © 2014 Pierre-Antoine Rault
Copyright © 2015 Taylan Ulrich Bayırlı/Kammer
Copyright © 2015, 2016, 2017, 2019, 2020 Leo Famulari
Copyright © 2015, 2016, 2017, 2018, 2019, 2020 Ricardo Wurmus
Copyright © 2016 Ben Woodcroft
Copyright © 2016, 2017, 2018 Chris Marusich
Copyright © 2016, 2017, 2018, 2019, 2020 Efraim Flashner
Copyright © 2016 John Darrington
Copyright © 2016, 2017 ng0
Copyright © 2016, 2017, 2018, 2019 Jan Nieuwenhuizen
Copyright © 2016 Julien Lepiller
Copyright © 2016 Alex ter Weele
Copyright © 2016, 2017, 2018, 2019 Christopher Baines
Copyright © 2017, 2018, 2019 Clément Lassieur
Copyright © 2017, 2018 Mathieu Othacehe
Copyright © 2017 Federico Beffa
Copyright © 2017, 2018 Carlo Zancanaro
Copyright © 2017 Thomas Danckaert
Copyright © 2017 humanitiesNerd
Copyright © 2017 Christopher Allan Webber
Copyright © 2017, 2018, 2019, 2020 Marius Bakke
Copyright © 2017, 2019, 2020 Hartmut Goebel
Copyright © 2017, 2019, 2020 Maxim Cournoyer
Copyright © 2017, 2018, 2019, 2020 Tobias Geerinckx-Rice
Copyright © 2017 George Clemmer
Copyright © 2017 Andy Wingo
Copyright © 2017, 2018, 2019 Arun Isaac
Copyright © 2017 nee
Copyright © 2018 Rutger Helling
Copyright © 2018 Oleg Pykhalov
Copyright © 2018 Mike Gerwitz
Copyright © 2018 Pierre-Antoine Rouby
Copyright © 2018, 2019 Gábor Boskovits
Copyright © 2018, 2019 Florian Pelz
Copyright © 2018 Laura Lazzati
Copyright © 2018 Alex Vong
Copyright © 2019 Josh Holland
Copyright © 2019 Diego Nicola Barbato
Copyright © 2019 Ivan Petkov
Copyright © 2019 Jakob L. Kreuze
Copyright © 2019 Kyle Andrews
Copyright © 2019 Alex Griffin
Copyright © 2019 Guillaume Le Vaillant
Copyright © 2020 Leo Prikler
Copyright © 2019, 2020 Simon Tournier
Copyright © 2020 Wiktor Żelazny
Copyright © 2020 Damien Cassou
Copyright © 2020 Jakub Kądziołka
Copyright © 2020 Jack Hill
Copyright © 2020 Naga Malleswari
Copyright © 2020 Brice Waegeneire

   Разрешено копирование, распространение и/или модификация этого
документа на условиях лицензии свободной документации GNU (GNU FDL)
версии 1.3 или любой более поздней версии, опубликованной Фондом
свободного программного обеспечения (FSF), исключая неизменяемые секции,
исключая тексты, размещенные на переплёте и задней стороне обложки.
Копия лицензии включена в документ в разделе под названием "GNU Free
Documentation Licens".
INFO-DIR-SECTION Администрирование системы
START-INFO-DIR-ENTRY
* Guix: (guix).              Управление установленным
                               ПО и настройка системы
* guix package: (guix)Запуск guix package.  Установка,
                                                    удаление и
                                                    обновление
                                                    пакетов
* guix gc: (guix)Запуск guix gc.  Освобождение
                                          неиспользуемого
                                          места на диске
* guix pull: (guix)Запуск guix pull.  Обновление
                                              списка доступных
                                              пакетов
* guix system: (guix)Запуск guix system.  Управление
                                                  конфигурацией
                                                  ОС
* guix deploy: (guix)Запуск guix deploy.  Управление
                                                  конфигурациями
                                                  ОС на удалённых
                                                  машинах
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Разработка программного обеспечения
START-INFO-DIR-ENTRY
* guix environment: (guix)Запуск guix environment.  Сборка
                                                            среды
                                                            разработки
                                                            с помощью
                                                            Guix
* guix build: (guix)Запуск guix build.  Сборка пакетов
* guix pack: (guix)Запуск guix pack.  Создание
                                              бинарных пакетов
END-INFO-DIR-ENTRY


File: guix.ru.info,  Node: Top,  Next: Введение,  Up: (dir)

GNU Guix
********

В этом документе описывается GNU Guix версии 1.1.0 — менеджер пакетов,
написанный для системы GNU.

   Это руководство доступно также на (упрощённом) китайском языке (*note
(guix.zh_CN)Top::), на французском (*note (guix.fr)Top::), немецком
(*note (guix.de)Top::), испанском (*note (guix.es)Top::) и русском
(*note (guix.ru)Top::) языках.  Если вы хотите перевести его на свой
язык, присоединяйтесь к Проекту переводов Проект переводов
(https://translationproject.org/domain/guix-manual.html).

* Menu:

* Введение::         Что такое Guix?
* Установка::       Установка Guix.
* Установка системы::  Полная установка
                                         операционной
                                         системы.
* Управление пакетами::  Установка
                                             пакетов,
                                             обновление и т.д.
* Разработка::     Разработка программного
                               обеспечения при
                               поддержке Guix.
* Программный интерфейс::  Использование
                                                 Guix в Scheme.
* Утилиты::           Команды управления
                               пакетами.
* Конфигурирование системы::  Конфигурирование
                                                       операционной
                                                       системы.
* Документация::  Программы обзора
                                пользовательских
                                мануалов.
* Установка файлов отладки::  Запуск
                                                      отладчика.
* Обновления безопасности::  Быстрое
                                                     применение
                                                     исправлений
                                                     безопасности.
* Начальная загрузка::  Сборка GNU/Linux с нуля.
* Портирование::  Перевод на другую
                                платформу или ядро.
* Содействие::     Нужна ваша помощь!

* Благодарности::  Спасибо
* Лицензия свободной документации GNU::  Лицензия
                                                                        этого
                                                                        руководства.
* Термины и указатели::  Понятия.
* Программный индекс::  Структуры данных,
                                           функции и
                                           переменные.

 — Детальный список записей —



Введение



* Управление программным обеспечением Guix Way::  В
                                                                                     чём
                                                                                     особенности?
* Дистрибутив GNU::  Пакеты и утилиты.

Установка



* Бинарная установка::  Запустить Guix в
                                           кратчайшие сроки!
* Требования::     Программное обеспечение,
                               необходимое для запуска
                               Guix.
* Запуск набора тестов::  Тестирование Guix.
* Настройка демона::  Подготовка окружения
                                       демона сборки.
* Вызов guix-daemon::   Запуск демона сборки.
* Установка приложения::  Установка в
                                               качестве
                                               приожения.

Настройка демона



* Установка окружения сборки::  Подготовка
                                                          отдельного
                                                          окружения
                                                          сборки.
* Установка демона разгрузки::  Разгрузка
                                                          сборок по
                                                          удалённым
                                                          машинам.
* Поддержка SELinux::  Использование политики
                                  SELinux для демона.

Установка системы



* Ограничения::   Что нужно учитывать.
* По поводу железа::  Поддерживаемое
                                      аппаратное
                                      обеспечение.
* Установочная флеш и DVD::  Подготовка
                                                установочного
                                                носителя.
* Подготовка к установке::  Сеть, разметка
                                                  диска и т.д.
* Графическая установка в GUI::  Простая
                                                        графическая
                                                        установка.
* Ручная установка::  Ручная установка для
                                       магов.
* После установки системы::  Когда
                                                    установка
                                                    завершилась
                                                    успешно.
* Установка Guix на виртуальную машину::  Площадка
                                                                        системы
                                                                        Guix
* Сборка установочного образа::  Как это
                                                            происходит.

Ручная установка



* Раскладка клавиатуры и работа с сетью и разбиение диска::  Начальная
                                                                                                              установка.
* В продолжении установки::  Установка.

Управление пакетами



* Особенности::   Как Guix делает жизнь ярче.
* Вызов guix package::  Установка пакетов,
                               удаление и т.д.
* Подстановки::   Скачивание собранных
                               бинарников.
* Пакеты со множественным выходом::  Один
                                                                   исходный
                                                                   пакет,
                                                                   различные
                                                                   выходы.
* Вызов guix gc::       Запуск сборщика мусора.
* Запуск guix pull::   Закачка последнего Guix и
                               дистрибуции.
* Каналы::             Настройка коллекции
                               пакетов.
* Invoking guix time-machine::  Running an older revision of Guix.
* Младшие версии::  Взаимодействие с
                                   другими ревизиями Guix.
* Вызов guix describe::  Отобразить информацию о
                                ревизии Guix.
* Вызов guix archive::  Экспорт и импорт файлов
                               склада.

Подстановки



* Официальный сервер подстановок::  Отдельный
                                                                  источник
                                                                  подстановок.
* Авторизация сервера подстановок::  Как
                                                                    включить
                                                                    или
                                                                    отключить
                                                                    подстановки.
* Аутентификация подстановок::  Как Guix
                                                           проверяет
                                                           подстановки.
* Настройки proxy::  Как получить подстановки
                                через proxy.
* Ошибки при подстановке::  Что происходит,
                                                  когда
                                                  подстановка
                                                  завершается
                                                  ошибкой.
* Касательно проверенных бинарников::  Как
                                                                        можно
                                                                        доверять
                                                                        определённому
                                                                        бинарному
                                                                        блоку?

Разработка



* Запуск guix environment::  Настройка окружения
                                     сборки.
* Запуск guix pack::   Создание наборов
                               программ.

Программный интерфейс



* Пакетные модули::  Пакеты с точки зрения
                                     программиста.
* Описание пакетов::  Описание новых
                                       пакетов.
* Системы сборки::  Задание параметров
                                   сборки пакетов.
* Хранилище::       Работа с хранилищем
                               пакетов.
* Деривации::       Низкоуровневый интерфейс
                               дериваций пакетов.
* Устройство склада::  Чисто
                                         функциональный
                                         интерфейс доступа к
                                         складу.
* G-Expressions::            Управление механизмом
                               сборки.
* Запуск guix repl::   Интерактивное общение с
                               Guix

Описание пакетов



* Интерфейс package::  Тип данных package
* Интерфейс origin::  Тип данных origin

Утилиты



* Запуск guix build::  Сборка пакетов в
                               командной строке.
* Запуск guix edit::   Редактирование описания
                               пакета.
* Запуск guix download::  Загрузка файла и вывод
                                  его хэша.
* Запуск guix hash::   Вычисление
                               криптографического хеша
                               файла.
* Запуск guix import::  Импорт описаниий
                                пакетов.
* Запуск guix refresh::  Обновление описаний
                                 пакетов.
* Запуск guix lint::   Поиск ошибок в описаниях
                               пакетов.
* Запуск guix size::   Обзор использования
                               диска.
* Запуск guix graph::  Визуализация графа
                               пакета.
* Запуск guix publish::  Совместное
                                 использование
                                 подстановок.
* Запуск guix challenge::  Соперничающие серверы
                                   подстановок.
* Запуск guix copy::   Копирование из и в
                               удалённый склад.
* Запуск guix container::  Изоляция процесса.
* Запуск guix weather::  Оценка доступности
                                 подстановок.
* Запуск guix processes::  Чтение клиентских
                                   процессов.

Запуск ‘guix build’



* Стандартные параметры сборки::  Параметры
                                                              сборки
                                                              для
                                                              большинства
                                                              команд.
* Параметры преобразования пакета::  Создание
                                                                    вариантов
                                                                    пакетов.
* Дополнительные параметры сборки::  Особые
                                                                    параметры
                                                                    для
                                                                    ’guix
                                                                    build’.
* Отладка ошибок сборки::  Жизненный опыт в
                                                сборке пакетов.

Конфигурирование системы



* Использование системы конфигурации::  Настройка
                                                                          вашей
                                                                          системы
                                                                          GNU.
* Интерфейс operating-system::  Подробные сведения
                                           об объявлениях
                                           opertaing-system
* Файловые системы::  Настройка точек
                                       подключения файловой
                                       системы
* Размеченные устройства::  Дополнительные
                                                   проверки
                                                   блочных
                                                   устройств.
* Учётные записи пользователей::  Задание
                                                              пользовательских
                                                              учётных
                                                              записей.
* Раскладка клавиатуры::  Интерпретация
                                               нажатия клавиш
                                               системой.
* Региональные настройки::  Настройка
                                                   языка и
                                                   культурных
                                                   особенностей.
* Службы::             Настройка системных
                               служб.
* Программы setuid::  Программы, выполняемые с
                                 правами root.
* Сертификаты X.509::  Аутентификация
                                    серверов HTTPS.
* Служба выбора имён::  Настройка службы
                                          имён libc.
* Начальный RAM-диск::  Начальная загрузка
                                       Linux-Libre.
* Настройка загрузчика::  Конфигурирование
                                               загрузчика
                                               диска.
* Вызов guix system::   Проверка конфигурации
                               операционной системы.
* Запуск guix deploy::  Развёртывание
                                конфигурации системы на
                                удалённой машине.
* Запуск Guix на виртуальной машине::  Как
                                                                  запускать
                                                                  систему
                                                                  Guix на
                                                                  виртуальной
                                                                  машине.
* Создание служб::  Добавление новых
                                   определений служб.

Службы



* Базовые службы::  Ключевые службы
                                   системы.
* Запланированное исполнения задач::  Служба
                                                                      mcron.
* Ротация логов::  Сервис rottlog.
* Сервисы сети::  Установка сети, демон SSH и
                               т.д.
* Оконная система X::  Графический дисплей.
* Сервисы печати::  Поддержка локальных и
                                   удалённых принтеров.
* Сервисы рабочего стола::  D-Bus и сервисы
                                                  рабочего стола.
* Звуковые сервисы::  Сервисы ALSA и Pulseaudio.
* Сервисы баз данных::  Базы данных SQL, базы
                                          ключ-значение и т. д.
* Почтовые сервисы::  IMAP, POP3, SMTP и прочее.
* Сервисы сообщений::  Сервисы сообщений.
* Сервисы телефонии::  Сервисы телефонии.
* Сервисы мониторинга::  Сервисы
                                             мониторинга.
* Сервисы Kerberos::  Сервисы Kerberos.
* Веб-сервисы::    Веб-серверы.
* Сервисы сертификатов::  Сертификаты TLS
                                               через Let’s Encrypt.
* Сервисы DNS::       DNS-демоны.
* VPN-сервисы::       VPN-демоны.
* Сетевые файловые системы::  Сервисы,
                                                      работающие с
                                                      сетевыми
                                                      файловыми
                                                      системами
* Длительная интеграция::  Сервис Cuirass
* Сервисы управления питанием::  Продление
                                                            жизни
                                                            батареи.
* Сервисы аудио::  MPD.
* Сервисы виртуализации::  Сервисы
                                                 виртуализации.
* Сервисы упраления версиями::  Доступ к
                                                          удалённым
                                                          репозиториям
                                                          Git.
* Игровые службы::  Игровые службы.
* Службы подключения PAM::  Служба
                                               подключения
                                               томов при входе в
                                               систему.
* Службы Linux::       Службы, привязанные к
                               ядру Linux.
* Разнообразные службы::  Другие службы.

Создание служб



* Производство сервисов.::  Модель
                                                  построения
                                                  сервисов.
* Типы сервисов и сервисы::  Типы и сервисы.
* Интерфейс сервиса::  Доступ через API.
* Сервисы Shepherd::  Особенный тип сервисов.



File: guix.ru.info,  Node: Введение,  Next: Установка,  Prev: Top,  Up: Top

1 Введение
**********

GNU Guix(1) — это уитилита для управления пакетами и дистрибутив системы
GNU. Guix позволяет непривилегированным пользователям устанавливать,
обновлять и удалять программные пакеты, откатываться до предыдущих
наборов пакетов, собирать пакеты из исходников и обеспечивает создание и
поддержку программного окружения в целом.

   Вы можете установить GNU Guix поверх существующей системы GNU/Linux,
и она дополнит функции системы новой утилитой, не внося помехи (*note
Установка::).  Или можно использовать отдельную операционную систему —
“систему Guix”(2).  *Note Дистрибутив GNU::.

* Menu:

* Управление программным обеспечением Guix Way::  В
                                                                                     чём
                                                                                     особенности?
* Дистрибутив GNU::  Пакеты и утилиты.

   ---------- Footnotes ----------

   (1) "Guix" произносится "гикс".

   (2) Мы называли систему Guix "Guix System Distribution" или "GuixSD".
Теперь мы считаем, удобнее объединить всё под названием "Guix", так что
теперь командой ‘guix system’ устанавливается система Guix, даже если вы
используете другой дистирбутив для её запуска


File: guix.ru.info,  Node: Управление программным обеспечением Guix Way,  Next: Дистрибутив GNU,  Up: Введение

1.1 Управление программным обеспечением Guix Way
================================================

Guix предоставляет интерфейс командной строки для управления пакетами
(*note Управление пакетами::), инструменты, которые помогают в
разработке программного обеспечения (*note Разработка::), более сложные
утилиты командной строки (*note Утилиты::), а также программный
интерфейс Scheme (*note Программный интерфейс::).  Его “демон сборки”
отвечает за сборку пакетов по запросам пользователей (*note Настройка
демона::) и за скачивание компилированных бинарников из авторизованных
ресурсов (*note Подстановки::).

   Guix включает определения пакетов для множества проектов GNU и
не-GNU, каждый из которых уважает свободу пользователя в работе за
компьютером (https://www.gnu.org/philosophy/free-sw.html).  Он
_расширяемый_: пользователи могут писать свои собственные определения
пакетов (*note Описание пакетов::) и делать их доступными как
независимые пакетные модули (*note Пакетные модули::).  Он также
_настраиваемый_: пользователи могут _получать_ специальные определения
пакетов из существующих, в том числе через командную строку (*note
Параметры преобразования пакета::).

   Под капотом Guix работает как “функциональный пакетный менеджер” —
принцип, впервые введённый Nix (*note Благодарности::).  В Guix процесс
сборки и установки пакета рассматривается как _функция_ в математическом
смысле.  Эта функция принимает входные данные, как например, скрипты
сборки, компилятор, её результат зависит только от входных данных, и он
не может зависеть от программ или скриптов, которые не подаются на вход
явным образом.  Функция сборки всегда производит один результат, когда
получает один и тот же набор входных данных.  Она не может как-либо
изменять окружение запущенной системы; например, она не может создавать,
изменять или удалять файлы за пределами её директорий сборки и
установки.  Это достигается так: процесс сборки запускается в
изолированном окружении (или “контейнере”), в котором видны только
входные данные, заданные явно.

   Результат работы функций сборки пакетов кешируется в файловой системе
в специальной директории, называемой “склад” (*note Хранилище::).Каждый
пакет устанавливается в собственную директорию склада, по умолчанию —
под ‘/gnu/store’.  Имя директории содержит хеш всех входных данных,
используемых для сборки этого пакета, так что изменение входных данных
порождает различные имена директорий.

   Этот подход является принципиальным, на нём основаны ключевые
особенностей Guix: поддержка транзакционного обновления пакета и откаты,
установка для отдельного пользователя, сборка мусора от пакетов (*note
Особенности::).


File: guix.ru.info,  Node: Дистрибутив GNU,  Prev: Управление программным обеспечением Guix Way,  Up: Введение

1.2 Дистрибутив GNU
===================

Guix comes with a distribution of the GNU system consisting entirely of
free software(1).  The distribution can be installed on its own (*note
Установка системы::), but it is also possible to install Guix as a
package manager on top of an installed GNU/Linux system (*note
Установка::).  When we need to distinguish between the two, we refer to
the standalone distribution as Guix System.

   The distribution provides core GNU packages such as GNU libc, GCC,
and Binutils, as well as many GNU and non-GNU applications.  The
complete list of available packages can be browsed on-line
(https://www.gnu.org/software/guix/packages) or by running ‘guix
package’ (*note Вызов guix package::):

     guix package --list-available

   Наша цель — предоставить состоящий на 100% из свободного программного
обеспечения рабочий дистрибуив Linux или другие варианты GNU. Мы
ориентируемся на продвижении и полноценной интеграции компонентов GNU и
поддержке программ и утилит, которые помогают пользователям реализовать
их свободы.

   Пакеты в данные момент доступны для следующих платформ:

‘x86_64-linux’
     архитектура Intel/AMD ‘x86_64’ с ядром Linux-Libre;

‘i686-linux’
     архитектура Intel 32-bit (IA32) с ядром Linux-Libre;

‘armhf-linux’
     Архитектура ARMv7-A с hard float, Thumb-2 и NEON, используя
     двочиный интерфейс приложений EABI hard-float (ABI), с ядром
     Linux-Libre.

‘aarch64-linux’
     процессоры little-endian 64-bit ARMv8-A с ядром Linux-Libre.

‘mips64el-linux’
     64-разрядные little-endian процессоры MIPS порядком байтов, в
     частности серии Loongson, n32 ABI и ядро Linux-Libre.  Эта
     конфигурация больше не поддерживается полностью; в частности, фермы
     сборки проекта больше не предоставляют замены этой архитектуре.

   Пользуясь системой Guix, вы _объявляете_ все аспекты конфигурации
системы, и Guix выполняет установку инстранции ОС транзакционным,
повторяемым способом, не имеющей состояния (stateless) (*note
Конфигурирование системы::).  Система Guix использует ядро Linux-libre,
систему инициализации Shepherd (*note (shepherd)Введение::), хорошо
известные утилиты и тулчейны GNU, а также графическое окружение на
выбор.

   Система Guix доступна для платформ, приведённых выше, кроме
‘mips64el-linux’.

Информация о портировании на другие архитектуры и ядра доступна в *note
Портирование::.

   Дистрибутив созаётся совместными усилиями, приглашаем вас!  См.
*Note Содействие::, чтобы узнать о том, как вы можете помочь.

   ---------- Footnotes ----------

   (1) The term “free” here refers to the freedom provided to users of
that software (https://www.gnu.org/philosophy/free-sw.html).


File: guix.ru.info,  Node: Установка,  Next: Установка системы,  Prev: Введение,  Up: Top

2 Установка
***********

     Примечание: Мы рекомендуем использовать этот скрипт установки
     (https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh)
     для установки Guix на существующую систему GNU/Linux, называемый
     далее “чужой дистрибутив”.(1)  Скрипт автоматизирует скачивание,
     установку и начальную конфигурацию Guix.  Он должен запускаться от
     пользователя root.

   При установке на чужой дистрибутив GNU Guix дополняет доступные
утилиты без внесения помех.  Его данные живут только в двух директориях
— обычно ‘/gnu/store’ и ‘/var/guix’; другие файлы вашей системы, как
‘/etc’, остаются нетронутыми.

   Установленный Guix можно обновлять командой ‘guix pull’ (*note Запуск
guix pull::).

   Если вы предпочитаете выполнять шаги установки вручную или хотита
подправить их, следующие параграфы будут полезны.  В них описаны
требования Guix к программному обеспечению, а также процесс ручной
установки до запуска в работу.

* Menu:

* Бинарная установка::  Запустить Guix в
                                           кратчайшие сроки!
* Требования::     Программное обеспечение,
                               необходимое для запуска
                               Guix.
* Запуск набора тестов::  Тестирование Guix.
* Настройка демона::  Подготовка окружения
                                       демона сборки.
* Вызов guix-daemon::   Запуск демона сборки.
* Установка приложения::  Установка в
                                               качестве
                                               приожения.
* Обновление Guix::  Обновление Guix и этого
                                 службы сборки.

   ---------- Footnotes ----------

   (1) Этот раздел описывает установку пакетного менеджера поверх
существующей системы GNU/Linux.  Если вместо этого вы хотите установить
отдельную операционную систему GNU, смотрите *note Установка системы::.


File: guix.ru.info,  Node: Бинарная установка,  Next: Требования,  Up: Установка

2.1 Бинарная установка
======================

Этот раздел описывает, как установить Guix на обычную систему из
отдельного архива, который содержит бинарники Guix и все его
зависимости.  Это обычно быстрее установки из исходных кодов, которая
описана в следующем разделе.  Единственное требование - иметь GNU tar и
Xz.

     Примечание: Мы рекомендуем использовать этот установочный скрипт
     (https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh).
     Скрипт автоматизирует скачивание, установку и начальные шаги
     конфигурации, описанные ниже.  Он должен запускаться от
     пользователя root.

   Установка производится следующими образом:

  1. Скачайте архив с бинарником из
     ‘https://ftp.gnu.org/gnu/guix/guix-binary-1.1.0.SYSTEM.tar.xz’, где
     SYSTEM — это ‘x86_64-linux’ для машины ‘x86_64’, на которой уже
     запущено ядро Linux, и так далее.

     Убедитесь в аутентичности архива, скачав файл ‘.sig’ и запустив:

          $ wget https://ftp.gnu.org/gnu/guix/guix-binary-1.1.0.SYSTEM.tar.xz.sig
          $ gpg --verify guix-binary-1.1.0.SYSTEM.tar.xz.sig

     Если это завершается ошибкой, значит у вас нет необходимого
     публичного ключа, тогда запустите команду для импорта ключа:

          $ wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 \
                -qO - | gpg --import -

     и запустите команду ‘gpg --verify’.

     Take note that a warning like “This key is not certified with a
     trusted signature!” is normal.

  2. Теперь вам необходимы привилегии пользователя ‘root’.  В
     зависимости от вашего дистрибутива, можно запустить ‘su -’ или
     ‘sudo -i’.  Под ‘root’ запустите:

          # cd /tmp
          # tar --warning=no-timestamp -xf \
               /path/to/guix-binary-1.1.0.SYSTEM.tar.xz
          # mv var/guix /var/ && mv gnu /

     Это создаёт ‘/gnu/store’ (*note Хранилище::) и ‘/var/guix’.
     Последнее содержит готовый к использованию профиль для ‘root’
     (подробнее в следующем шаге).

     _Не_ распаковывайте архив в работающую систему Guix, так как это
     перезапишет её основные файлы.

     Опция ‘--warning=no-timestamp’ необходима, чтобы удостовериться,
     что GNU tar не вызывает ошибок об "устаревшей дате", подобные
     ошибки появлялись в GNU tar 1.26 и старше, в последних версиях всё
     в порядке).  Они возникают из-за того, что архив имеет нулевую дату
     модификации (что соответствует 1 января 1970).  Это сделано с той
     целью, чтобы удостовериться, что содержимое архива не засисит от
     даты его создания, что делает его воспроизводимым (повторяемым).

  3. Сделайте профиль доступным по пути ‘~root/.config/guix/current’,
     куда ‘guix pull’ будет устанавливать обновления (*note Запуск guix
     pull::):

          # mkdir -p ~root/.config/guix
          # ln -sf /var/guix/profiles/per-user/root/current-guix \
                   ~root/.config/guix/current

     Добавьте ‘etc/profile’ в ‘PATH’ и другие соответствующие переменные
     окружения:

          # GUIX_PROFILE="`echo ~root`/.config/guix/current" ; \
            source $GUIX_PROFILE/etc/profile

  4. Создайте группу и пользовательские учётные записи, как это
     обозначено в (*note Установка окружения сборки::).

  5. Запустите демон и сделайте добавьте его в автоззагрузку после
     старта.

     Если ваш дистрибутив использует систему инициализации systemd,
     этого можно добиться следующими командами:

          # cp ~root/.config/guix/current/lib/systemd/system/guix-daemon.service \
               /etc/systemd/system/
          # systemctl start guix-daemon && systemctl enable guix-daemon

     Если ваш дистрибутив использует систему инициализации Upstart:

          # initctl reload-configuration
          # cp ~root/.config/guix/current/lib/upstart/system/guix-daemon.conf \
               /etc/init/
          # start guix-daemon

     Или можно запускать демон вручную так:

          # ~root/.config/guix/current/bin/guix-daemon \
                 --build-users-group=guixbuild

  6. Сделайте команду ‘guix’ доступной для других пользователей машины,
     например, так:

          # mkdir -p /usr/local/bin
          # cd /usr/local/bin
          # ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix

     Хорошо также предоставить доступ к Info-версии руководства так:

          # mkdir -p /usr/local/share/info
          # cd /usr/local/share/info
          # for i in /var/guix/profiles/per-user/root/current-guix/share/info/* ;
            do ln -s $i ; done

     Это добавляет ‘/usr/local/share/info’ в поиск, запуск ‘info guix’
     откроет это руководство, см.  (*note (texinfo)Other Info
     Directories:: для подробной информации об изменении путей поиска
     Info).

  7. Чтобы использовать подстановки из ‘ci.guix.gnu.org’ или из одного
     из зеркал (*note Подстановки::), авторизуйте их:

          # guix archive --authorize < \
               ~root/.config/guix/current/share/guix/ci.guix.gnu.org.pub

  8. Каждый пользователь, возможно, должен выполнить дополнительные
     шаги, чтобы сделать их окружение Guix готовым к использованию *note
     Установка приложения::.

   Вуаля!  Установка завершена!

   Вы можете проверить, что Guix работает, установив тестовый пакет для
профиля root:

     # guix install hello

   Архив для бинарной установки может быть воспроизведён (повторён) и
проверен простым запуском следующей команды в дереве исходников Guix:

     make guix-binary.SYSTEM.tar.xz

...̧ что в свою очередь, выполнит:

     guix pack -s SYSTEM --localstatedir \
       --profile-name=current-guix guix

   *Note Запуск guix pack:: для подробной информации об этом полезном
инструменте.


File: guix.ru.info,  Node: Требования,  Next: Запуск набора тестов,  Prev: Бинарная установка,  Up: Установка

2.2 Требования
==============

Этот раздел содержит требования для сборки Guix из исходников.
Пожалуйста, смотрите файлы ‘README’ и ‘INSTALL’ в дереве исходников Guix
для подробной информации.

   GNU Guix доступен для скачивания на сайте
<https://www.gnu.org/software/guix/>.

   GNU Guix зависит от следующих пакетов:

   • GNU Guile (https://gnu.org/software/guile/) версии 3.0.x или 2.2.x;
   • Guile-Gcrypt (https://notabug.org/cwebber/guile-gcrypt) версии
     0.1.0 или более поздней;
   • GnuTLS (https://gnutls.org/) применимо к привязкам Guile (*note how
     to install the GnuTLS bindings for Guile: (gnutls-guile)Guile
     Preparations.);
   • Guile-SQLite3 (https://notabug.org/guile-sqlite3/guile-sqlite3)
     версии 0.1.0 или новее;
   • Guile-Git (https://gitlab.com/guile-git/guile-git) от августа 2017
     или более поздней;
   • Guile-JSON (https://savannah.nongnu.org/projects/guile-json/) 3.x;
   • zlib (https://zlib.net);
   • GNU Make (https://www.gnu.org/software/make/).

   Следующие зависимости необязательны:

   • Support for build offloading (*note Установка демона разгрузки::)
     and ‘guix copy’ (*note Запуск guix copy::) depends on Guile-SSH
     (https://github.com/artyom-poptsov/guile-ssh), version 0.12.0 or
     later.

   • When lzlib (https://www.nongnu.org/lzip/lzlib.html) is available,
     lzlib substitutes can be used and ‘guix publish’ can compress
     substitutes with lzlib.

   • Если доступна libbz2 (http://www.bzip.org), ‘guix-daemon’ может
     использовать её для сжатия логов сборки.

   Если строка ‘--disable-daemon’ не использовалась в ‘configure’, тогда
необходимы также следующие пакеты:

   • GNU libgcrypt (https://gnupg.org/);
   • SQLite 3 (https://sqlite.org);
   • GCC’s g++ (https://gcc.gnu.org) с поддержкой стандарта C++11.

   Если Guix развёртывается в системе, где уже был установлен Guix,
необходимо указать главный каталог предыдущей инсталляции, используя
параметр ‘--localstatedir’ в скрипте ‘configure’ (*note ‘localstatedir’:
(standards)Directory Variables.).  Скрипт ‘configure’ защищает от ошибок
в конфигурации LOCALSTATEDIR, предотвращая непреднамеренное повреждение
хранилища (*note Хранилище::).


File: guix.ru.info,  Node: Запуск набора тестов,  Next: Настройка демона,  Prev: Требования,  Up: Установка

2.3 Запуск набора тестов
========================

После успешного завершения ‘configure’ и ‘make’ хорошо бы выполнить
набор тестов.  Это поможет выявить проблемы установки или в окружении,
как и баги самого Guix (на самом деле, отчёты об ошибках тестов помогают
улучшить ПО). Чтобы запустить тесты, напечатайте:

     make check

   Тесты можно выполнять параллельно при включении опции ‘-j’ в
GNU make, так быстрее.  Первый запуск может длиться несколько минут на
топовой машине, последующие запуски будут быстрее, так как склад,
который создаётся для тестов, уже закеширует различные вещи.

   Также можно запустить отдельные наборы тестов, используя переменную
‘TESTS’, как в примере:

     make check TESTS="tests/store.scm tests/cpio.scm"

   По умолчанию результаты тестов выводятся в файл.  Чтобы просмотреть
результаты каждого отдельного теста, нужно задать переменную makifile
‘SCM_LOG_DRIVER_FLAGS’, как в примере:

     make check TESTS="tests/base64.scm" SCM_LOG_DRIVER_FLAGS="--brief=no"

   В случае ошибки, пожалуйста, отправьте сообщение на
<bug-guix@gnu.org> и присоедините файл ‘test-suite.log’.  Пожалуйста,
обозначьте в сообщении используемую версию Guix, а также номера версий
зависимостей (*note Требования::).

   Guix также идёт с набором тестов для всей системы, который проверяет
нстранцию системы Guix.  Их можно запустить только в системах, где Guix
уже установлен, так:

     make check-system

или, опять же, задав ‘TESTS’, чтобы выбрать список тестов для запуска:

     make check-system TESTS="basic mcron"

   Тесты системы определены в модулях ‘(gnu tests ...)’.  При работе они
запускают операционную систему под легковесным инструментарием в
виртуальной машине.  Они могут выполнять тяжёлые вычисления или довольно
простые в зависимости от наличия подстановок их зависимостей (*note
Подстановки::).  Некоторые из них требуют много места для работы с
образами виртуальной машины.

   Конечно, в случае неудачных тестов, пожалуйста, направьте детали на
<bug-guix@gnu.org>.


File: guix.ru.info,  Node: Настройка демона,  Next: Вызов guix-daemon,  Prev: Запуск набора тестов,  Up: Установка

2.4 Настройка демона
====================

Такие операции, как сборка пакета или запуск сборщика мусора,
выполняются запуском специальных процесса — “демона сборки” — по
запросам клиентов.  Только демон имеет доступ к складу и его базе
данных.  Так что операции управления складом выполняются с помощью
демона.  Например, инструменты командной строки, как ‘guix package’ и
‘guix build’, обычно взаимодействуют с демоном через удалённый вызов
процедур (RPC) и сообщают, что необходимо сделать.

   Следующие разделы поясняют как настроить окружение демона сборки.
Смотрите также *note Подстановки:: для подробной инсорации о том, как
разрешить демону скачивать собранные бинарники.

* Menu:

* Установка окружения сборки::  Подготовка
                                                          отдельного
                                                          окружения
                                                          сборки.
* Установка демона разгрузки::  Разгрузка
                                                          сборок по
                                                          удалённым
                                                          машинам.
* Поддержка SELinux::  Использование политики
                                  SELinux для демона.


File: guix.ru.info,  Node: Установка окружения сборки,  Next: Установка демона разгрузки,  Up: Настройка демона

2.4.1 Установка окружения сборки
--------------------------------

В случае стандартной многопользовательской установки Guix и его демон
(программа ‘guix-daemon’) установливаются системным администратором;
‘/gnu/store’ принадлежит ‘root’, и ‘guix-daemon’ запущен от ‘root’.
Непривилегированные пользователи могут пользоваться инструментами Guix,
чтобы собирать пакеты или получить доступ к складу с какой-либо целью, и
демон выполнит это по их запросу, убедившись, что склад находится в
должном состоянии, и разрешив сборку пакетов и разделение их между
пользователями.

   Когда ‘guix-daemon’ запущен от ‘root’, возможно, из соображений
безопасности вы не примете того, что процессы сборки пакетов тоже
выполняются от ‘root’.  Чтобы избежать этого, необходимо создать
специальных “пользователей для сборки”.  Ими будет пользоваться процесс
сборки, запускаемый демоном.  Эти пользователи сборки не должны иметь
оболочки и домашней директории — они просто будут использоваться, когда
демон сбрасывает привилегии ‘root’ в процессе сборки.  Наличие
нескольких таких пользователей позволит демону запускать отдельные
процессы сборки под отдельными UID, что гарантирует, что они не будут
помехой друг другу — важная особенность, учитывая, что сборка
рассматривается как чистая функция (*note Введение::).

   В системе GNU/Linux набор пользователей для сборки может быть создан
так (используя синтаксис команды Bash ‘shadow’):

     # groupadd --system guixbuild
     # for i in `seq -w 1 10`;
       do
         useradd -g guixbuild -G guixbuild           \
                 -d /var/empty -s `which nologin`    \
                 -c "Guix build user $i" --system    \
                 guixbuilder$i;
       done

Число пользователей для сборки определяет, сколько задач сборки может
быть запущено параллельно.  Это задаётся опцией ‘--max-jobs’ (*note
‘--max-jobs’: Вызов guix-daemon.).  Чтобы использовать ‘guix system vm’
и подобные, вам потребуется добавить пользователей для сборки в группу
‘kvm’, так чтобы они имели доступ к ‘/dev/kvm’, используя ‘-G
guixbuild,kvm’ вместо ‘-G guixbuild’ (*note Вызов guix system::).

   Программа ‘guix-daemon’ тогда может запускаться от ‘root’ следующим
образом(1):

     # guix-daemon --build-users-group=guixbuild

Так демон стартует процессы сборки в chroot под одним из пользователей
группы ‘guixbuilder’.  В GNU/Linux по умолчанию окружение chroot
содержит только следующее:

   • минимальный состав директории ‘/dev’, созданной максимально
     независимо от исходной ‘/dev’(2);

   • директория ‘/proc’; она показывает только процессы контейнера, так
     как используется отдельное пространство имён процессов PID;

   • ‘/etc/passwd’ с записью о текущем пользователе и пользователе
     ‘nobody’;

   • ‘/etc/group’ с записью о группе пользователя;

   • ‘/etc/hosts’ с записью, которая адресует ‘localhost’ на
     ‘127.0.0.1’;

   • директория ‘/tmp’, доступная для записи.

   Можно указать директорию, в которую демон сохраняет деревья сборки
через переменную окружения ‘TMPDIR’.  Однако дерево сборки внутри chroot
всегда называется ‘/tmp/guix-build-NAME.drv-0’, где NAME - это имя
деривации, то есть, например, ‘coreutils-8.24’.  Так значение ‘TMPDIR’
не проникает внутрь окружения сборки, что предотвращает расхождения и
случаях, когда процессы сборки имеют иные имена их деревьев сборки.

   Демон также уважаем переменную окружения ‘http_proxy’, когда
выполняет скачивание по HTTP как для дериваций с фиксированным
результатом (*note Деривации::), так и для подстановок (*note
Подстановки::).

   Если вы устанавливаете Guix как непривилегированный пользователь, всё
ещё возможно запустить ‘guix-daemon’ с указанием ‘--disable-chroot’.
Однако процессы сборки не будут изолированы один от другого, а также от
остальной системы.  Так процессы сборки смогут внести помехи в работу
друг друга, смогут получить доступ к программам, библиотекам и другим
файлам, доступным в системе, что конечно, делает затруднительным
рассмотрение сборки как _чистой_ функции.

   ---------- Footnotes ----------

   (1) Если ваша машина использует систему инициализации systemd,
сбрасывание файла ‘PREFIX/lib/systemd/system/guix-daemon.service’ в
‘/etc/systemd/system’ должно гарантировать, что ‘guix-daemon’ запущен
автоматически.  Также, если ваша машина использует систему инициализации
Upstart, нужно сбрасить файл
‘PREFIX/lib/upstart/system/guix-daemon.conf’ в ‘/etc/init’.

   (2) "Максимально", потому что файлы, доступные в chroot под ‘/dev’,
могут быть созданы только, если машина их имеет


File: guix.ru.info,  Node: Установка демона разгрузки,  Next: Поддержка SELinux,  Prev: Установка окружения сборки,  Up: Настройка демона

2.4.2 Использование функционала разгрузки
-----------------------------------------

При необходимости, демон сборки может “разгружать” сборку деривации на
другие машины, работающие с Guix, используя ‘разгрузочный’ “хук
сборки”(1).  Когда эта функция включена, тогда считывается список машин
для сборки, заданный пользователем в файле ‘/etc/guix/machines.scm’; при
каждом запросе сборки командой ‘guix build’ демон предпринимает попытку
разгрузить сборку на одну из машин, удовлетворяющих требованиям
деривации, в частноси, требованиям к типу системы, т.е.  ‘x86_64-linux’.
Отсутствующий набор данных и пакетов, необходимы для сборки, копируется
через SSH на целевую машину, на которой затем выполняется процесс
сборки.  После успешного завершения результат(ы) сборки копируются
обратно на машину, инициировавшую сборку.

   Файл ‘/etc/guix/machines.scm’ обычно выглядит так:

     (list (build-machine
             (name "eightysix.example.org")
             (system "x86_64-linux")
             (host-key "ssh-ed25519 AAAAC3Nza...")
             (user "bob")
             (speed 2.))     ;incredibly fast!

           (build-machine
             (name "meeps.example.org")
             (system "mips64el-linux")
             (host-key "ssh-rsa AAAAB3Nza...")
             (user "alice")
             (private-key
              (string-append (getenv "HOME")
                             "/.ssh/identity-for-guix"))))

В примере выше мы обозначили список, состоящий из двух машин: одна — для
архитектуры ‘x86_64’, а другая — для архитектуры ‘mips64el’.

   По факту, этот файл, что не удивительно, является файлом Scheme, и он
имеет значение, когда запускается ‘хук разгрузки’.  Он возвращает
объекты класса ‘build-machine’.  Приведённый пример показывает
фиксированный список машин для сборки, но можно представить, скажем,
используя DNS-SD, он может возвращать список потенциальных машин,
обнаруженных в локальной сети (*note Guile-Avahi:
(guile-avahi)Введение.).  Тип данных ‘build-machine’ описан ниже.

 -- Тип данных: build-machine
     Этот тип данных представляет машины для сборки, на которые демон
     может разгружать сборки.  Важные поля:

     ‘name’
          Имя хоста удалённой машины

     ‘system’
          Тип системы удалённой машины, то есть ‘x86_64-linux’.

     ‘user’
          Аккаунт пользователя, используемый для соединения с удалённой
          машиной через SSH. Отметим, что ключ-пара SSH _не_ должна быть
          защищена парольной фразой, чтобы разрешить не интерактивные
          авторизации.

     ‘host-key’
          Это “публичный ключ хоста” в формает OpenSSH. Он используется
          при аутентификации машины, когда мы подсоединяемс к ней.  Это
          длинная строка, которая выглядит примерно так:

               ssh-ed25519 AAAAC3NzaC...mde+UhL hint@example.org

          Если на машине запущен демон OpenSSH ‘sshd’, ключ хоста может
          быть найден в файле под директорией /etc/ssh, например,
          ‘/etc/ssh/ssh_host_ed25519_key.pub’.

          Если на машине запущен демон SSH GNU lsh, ‘lshd’, тогда ключ
          хоста расположен в ‘/etc/lsh/host-key.pub’ или подобном файле.
          Его можно конвертировать в формат OpenSSH, используя
          ‘lsh-export-key’ (*note (lsh)Converting keys::):

               $ lsh-export-key --openssh < /etc/lsh/host-key.pub
               ssh-rsa AAAAB3NzaC1yc2EAAAAEOp8FoQAAAQEAs1eB46LV...

     Список необязательных полей:

     ‘port’ (default: ‘22’)
          Номер порта сервера SSH на машине.

     ‘private-key’ (default: ‘~root/.ssh/id_rsa’)
          Файл приватного ключа в формате OpenSSH, используемого в
          соединении с машиной.  Этот ключ не должен быть защищён
          парольной фразой.

          Отметим, что значение по умолчанию — приватный ключ _аккаунта
          root_.  Убедитесь, что он существует, если вы используете
          настройки по умолчанию.

     ‘compression’ (default: ‘"zlib@openssh.com,zlib"’)
     ‘compression-level’ (default: ‘3’)
          Методы компрессии уровня SSH и уровень компрессии.

          Отметим, что разгрузка зависит от компрессии SSH, что
          уменьшает использование траффика при передаче файлов на и с
          машин для сборки.

     ‘daemon-socket’ (default: ‘"/var/guix/daemon-socket/socket"’)
          Имя файла сокета Unix-домена, который слушает ‘guix-daemon’ на
          удалённой машине.

     ‘parallel-builds’ (default: ‘1’)
          Число сборок, которые могут быть запущены на машине.

     ‘speed’ (default: ‘1.0’)
          Показатель скорости.  Планировщик разгрузки предпримет попытку
          выбрать машину с наибольшим показателем скорости.

     ‘features’ (default: ‘'()’)
          Набор строк, описывающий специфические функции, которые
          поддерживаются на машине.  Например, ‘"kvm"’ для машин,
          которые имеют модули Linux KVM и соответствующую поддерку
          аппаратного обеспечения.  Деривации могут запрашивать функции
          по имени, и тогда они будут запранированы на соответствующих
          машинах для сборки.

   Команда ‘guix’ должна быть в путях для поиска на машинах лоя сборки.
Можно проверить это, выполнив:

     ssh build-machine guix repl --version

   Есть ещё одна вещь, которую нужно выполнить после размещения
‘machines.scm’.  Выше описано, что при разгрузке файлы передаются вперёд
и назад между складами на машинах.  Для этого необходимо сгенерировать
ключ-пару на кадой машине, чтобы позволить демону экспортировать
подписанные архивы файлов из склада (*note Вызов guix archive::):

     # guix archive --generate-key

Каждая машина для сорки должна авторизовать ключ машины-инициатора,
чтобы принимать элементы из склада, которые присылает инициатор:

     # guix archive --authorize < master-public-key.txt

Точно так же машина-инициатор должна авторизовать ключ каждой машины для
сборки.

   Всё движение с ключами, описанное здесь, создаёт надёжную
двустороннюю свзь между инициатором и машинами для сборки.  А именно,
когда машина-инициатор принимает файлы из машины для сборки (или
наборот), её демон может удостоверить их подлинность и невмешательство
других, а также то, что они подписаны авторизованным ключом.

   Чтобы проверить работоспособность настроек, запустите следующую
команду на инициирующем узле:

     # guix offload test

   Это выполнит попытку соединиться с каждой из машин для сборки,
обозначенных в ‘/etc/guix/machines.scm’, проверит наличие модулей Guile
и Guix на каждой машине, а также сделает попытку экспортировать и
импортировать, а затем выведет отчёт об этом процессе.

   Если нужно тестировать другой файл с описанием машин, просто
приведите его в командной строке:

     # guix offload test machines-qualif.scm

   И последнее, можно тестировать набор машин, чьи имена соответствуют
регулярному выражению, например:

     # guix offload test machines.scm '\.gnu\.org$'

   Чтобы отобразить текущую загрузку всех машин для сборки, запустите
команду на инициирущем узле:

     # guix offload status

   ---------- Footnotes ----------

   (1) Эта функция доступна только при наличии Guile-SSH
(https://github.com/artyom-poptsov/guile-ssh).


File: guix.ru.info,  Node: Поддержка SELinux,  Prev: Установка демона разгрузки,  Up: Настройка демона

2.4.3 Поддержка SELinux
-----------------------

Guix включает файл политик SELinnux ‘etc/guix-daemon.cil’, который может
устанавливаться в систему, в которой включен SELinux, тогда файлы Guix
будут помечены и настроены для соответствующего поведения демона.  Так
как система Guix не предоставляет политику SELinux, политика демона не
может использоваться в системе Guix.

2.4.3.1 Установка политики SELinux
..................................

Чтобы установить политику, запустите следующую команду от root:

     semodule -i etc/guix-daemon.cil

   Затем измените метку файловой системы с ‘restorecon’ или другим
механизмом, поставляемым вашей системой.

   Когда политика установлена, изменена метка файловой системы и демон
перезапущен, она должна работать в контексте ‘guix_daemon_t’.  Можно
проверить это следующей командой:

     ps -Zax | grep guix-daemon

   Наблюдайте файлы логов SELinux во время работы команды ‘guix build
hello’, чтобы удостовериться, что SELinux позволяет выполнение
необходимых операций.

2.4.3.2 Ограничения
...................

Эта политика не совершенна.  Тут есть ряд ограничений или причуд,
который нужно учитывать при разворачивании политики SELinux для демона
Guix.

  1. ‘guix_daemon_socket_t’ на самом деле не используется.  Никакие
     операции с сокетом не выполняются.  Ничего плохого в том, чтобы
     иметь эту неиспользуемую метку, но желательно определить правила
     сокета для этой метки.

  2. ‘guix gc’ не может получить доступ к обычным ссылкам профилей.  По
     задумке метка файла назначения символической ссылки не зависит от
     метки файла самой ссылки.  Хотя все профили под $localstatedir
     помечены, ссылки на эти профили не наследуют метку директории, в
     которой они находятся.  Для ссылок на домашние директории
     пользователей это будет ‘user_home_t’.  Но для ссылок из домашней
     директории root, а также ‘/tmp’ или рабочей директории HTTP-сервера
     и т.п., это не работает.  ‘guix gc’ не будет допускаться к чтению и
     следованию по этим ссылкам.

  3. Функция демона прослушивать соединения TCP может более не работать.
     Это может потребовать дополнительных правил, потому что SELinux
     относится к сетевым сокетам иначе, чем к файлам.

  4. В настоящее время всем файлам с именами, соответствующими
     регулярному выражению
     ‘/gnu/store/.+-(guix-.+|profile)/bin/guix-daemon’, присвоена метка
     ‘guix_daemon_exec_t’; это означает, что _любому_ файлу с таким
     именем в любом профиле разрешён запуск в домене ‘guix_daemon_t’.
     Это не идеально.  Атакующий может собрать пакет, который содержит
     исполняемый файл и убеить пользователя установить и запустить его,
     и таким образом он получит доступ к домену ‘guix_daemon_t’.  В этой
     связи SELinux мог бы не давать ему доступ к файлам, которые
     разрешены для процессов в этом домене.

     Мы можем создать политику с большими ограничениями во время
     установки, так чтобы только _точное_ имя исполняемого файла
     установленного в данный момент ‘guix-daemon’ было помечено меткой
     ‘guix_daemon_exec_t’ вместо того, чтобы использовать регулярное
     выражение, выбирающее большой ряд файлов.  Проблемой в данном
     случае будет то, что root потребуется устанавливать или обновлять
     политику во время любой установки в случае, если обновлён
     исполняемый файл ‘guix-daemon’.


File: guix.ru.info,  Node: Вызов guix-daemon,  Next: Установка приложения,  Prev: Настройка демона,  Up: Установка

2.5 Вызов ‘guix-daemon’
=======================

Программа ‘guix-daemon’ реализует весь функционал доступа к складу.  Это
включает запуск процессов сборки, запуск сборщика мусора, проверка
доступности результата сборки и т.д.  Он должен быть запущен от ‘root’
так:

     # guix-daemon --build-users-group=guixbuild

Для подробностей о том, как настроить его, смотрите *note Настройка
демона::.

   По умолчанию ‘guix-daemon’ запускает процессы сборки под различными
UID, от пользователей из группы, обозначенной в ‘--build-users-group’.
В дополнение каждый процесс сборки запускается в окружении chroot,
которое содержит только набор элементов склада, от которых зависит
процесс сборки, как это обозначено в деривации (*note derivation:
Программный интерфейс.), а также набор специфичных системных директорий.
По умолчанию последнее включает ‘/dev’ и ‘/dev/pts’.  Более того, под
GNU/Linux окружение сборки — это “контейнер”: в дополнение к тому, что
он имеет собственное дерево файловой системы, он также имеет отдельное
пространство имён монтирования, своё собственное пространство имён
процессов PID, пространство сетевых имён и т.д.  Это позволяет получить
воспроизводимые сборки (*note Особенности::).

   Когда демон выполняет сборку по запросу пользователя, он создаёт
директорию под ‘/tmp’ или под директорией, заданной его переменной
окружения ‘TMPDIR’.  Эта директория разделяется с контейнером на время
сборки, хотя внутри контейнера дерево сборки всегда называется
‘/tmp/guix-build-NAME.drv-0’.

   Директория сборки автоматически удаляется по завершении, если
конечно, сборка не завершилась с ошибкой, и клиент не обозначил
‘--keep-failed’ (*note ‘--keep-failed’: Запуск guix build.).

   Демон слушает соединения и порождает один под-процесс для каждой
сессии, запускаемой клиентом (одну из подкоманд ‘guix’).  Команда ‘guix
processes’ позволяет мониторить активность вашей системы, предоставляя
обзор каждой активной сессии и клиентов.  Смотрите *Note Запуск guix
processes:: для подробной информации.

   Поддерживаются следующие опции командной строки:

‘--build-users-group=GROUP’
     Использовать пользователей из группы GROUP для запуска процессов
     сборки (*note build users: Настройка демона.).

‘--no-substitutes’
     Не использовать подстановки для сборок.  Это означает — собирать
     элементы локально вместо того, чтобы скачивать собранные бинарники
     (*note Подстановки::).

     Когда демон работает с ‘--no-substitutes’, клиенты всё ещё могут
     явно включить подстановку с помощью удалённого вызова процедур
     ‘set-build-options’ (*note Хранилище::).

‘--substitute-urls=URLS’
     Использовать адреса URLS, разделённые пробелом по умолчанию, как
     список источников подстановок.  Если эта опция пропущена,
     используется ‘https://ci.guix.gnu.org’

     Это означает, что подстановки могут скачиваться из адресов URLS,
     если конечно они подписаны доверенной подписью (*note
     Подстановки::).

‘--no-offload’
     Do not use offload builds to other machines (*note Установка демона
     разгрузки::).  That is, always build things locally instead of
     offloading builds to remote machines.

‘--cache-failures’
     Кешировать ошибки сборки.  По умолчанию кешируются только успешные
     сборки.

     При установке этой опции можно использовать ‘guix gc
     --list-failures’, чтобы просматривать элементы склада, помеченные
     как ошибочные; ‘guix gc --clear-failures’ удаляет элементы склада
     из кеша ошибок.  *Note Вызов guix gc::.

‘--cores=N’
‘-c N’
     Использовать N ядер процессора для сборки каждой деривации; ‘0’
     означает использовать все доступные.

     Значение по умолчанию - ‘0’, но оно может быть изменено клиентами,
     в частности, опцией ‘--cores’ команды ‘guix build’ (*note Запуск
     guix build::).

     В результате устанавливается переменная окружения ‘NIX_BUILD_CORES’
     для процесса сборки, который затем может использовать её для
     применения внутреннего параллелизма, например, для запуска ‘make
     -j$NIX_BUILD_CORES’.

‘--max-jobs=N’
‘-M N’
     Разрешить максимум N параллельных задач сборки.  Значение по
     умолчанию - ‘1’.  Установка в ‘0’ означает, чтоб сборки не будут
     выполняться локально, вместо этого, демон будет разгружать сборки
     (*note Установка демона разгрузки::) или просто отчитается об
     ошибке.

‘--max-silent-time=SECONDS’
     Когда процесс сборки или подстановки молчит более SECONDS секунд,
     завершить его и отчитаться об ошибке сборки.

     Значение по умолчанию - ‘0’, что значит отключить таймаут.

     Значение, заданное здесь, может быть переопределено клиентами
     (*note ‘--max-silent-time’: Стандартные параметры сборки.).

‘--timeout=SECONDS’
     Точно так же, когда процесс сборки или подстановки длится более
     SECONDS, завершить его и отчитаться об ошибке сборки.

     Значение по умолчанию - ‘0’, что значит отключить таймаут.

     Значение, заданное здесь, может быть переопределено клиентами
     (*note ‘--timeout’: Стандартные параметры сборки.).

‘--rounds=N’
     Собирать каждую деривацию N раз подряд и вызывать ошибку, если
     результаты последовательных сборок не идентичны бит-к-биту.
     Отметим, что эта настройка может быть переопределена клиентами в
     команде, например, ‘guix build’ (*note Запуск guix build::).

     При использовании вместе с ‘--keep-failed’ различные результаты
     сохраняются на складе под ‘/gnu/store/...-check’.  Это делает
     возможным просмотр различий между двумя результатами.

‘--debug’
     Выводить отладочную информацию.

     Это полезно для отладки проблем запуска демона, но затем это может
     быть переопределено клиентами, например, опцией ‘--verbosity’
     команды ‘guix build’ (*note Запуск guix build::).

‘--chroot-directory=DIR’
     Добавить директорию DIR в chroot сборки.

     Это может изменить результаты процессов сборки, например, если они
     используют необязательные (опциональные) зависимости, найденные в
     DIR, если они доступны, но только так, а не иначе.  Поэтому не
     рекомендуется делать так.  Вместо этого, убедитесь, что каждая
     деривация объявляет все необходимые входные данные.

‘--disable-chroot’
     Отключить chroot для сборки.

     Использование этой опции не рекомендуется, так как опять же это
     позволит процессам сборки получить доступ к не объявленным
     зависимостям.  Это важно, даже если ‘guix-daemon’ запущен под
     аккаунтом непривилегированного пользователя.

‘--log-compression=TYPE’
     Архивировать логи сборки методом TYPE.  Это один из: ‘gzip’,
     ‘bzip2’ или ‘none’.

     Если не используется ‘--lose-logs’, все логи сборки сохраняются в
     LOCALSTATEDIR.  Для экономии места демон автоматически сжимает их с
     помощью bzip2 по умолчанию.

‘--disable-deduplication’
     Отключить автоматическую "дедупликацию" файлов на складе.

     По умолчанию файлы, добавленные на склад, автоматически
     "дедуплицируются": если вновь добавленный файл идентичен другому,
     найденному на складе, демон делает новый файл жесткой ссылкой на
     другой файл.  Это существенно сокращает использование места на
     диске за счёт небольшого увеличения запросов ввода/вывода в конце
     процесса сборки.  Эта опция отключает такую оптимизацию.

‘--gc-keep-outputs[=yes|no]’
     Сообщить, должен ли сборщик мусора (GC) сохранять выходные данные
     живой деривации.

     При установке в "yes" (да), сборщик мусора (GC) будет сохранять
     результаты любой живой деривации, доступной на складе, — файлы
     ‘.drv’.  Значение по умолчанию - "no" (нет) - означает, что
     результаты дериваций хранятся только, если они доступны из корней
     сборщика мусора (GC roots).  Смотрите *Note Вызов guix gc:: для
     информации о корнях сборщика мусора.

‘--gc-keep-derivations[=yes|no]’
     Сообщить, должен ли сборщик мусора (GC) сохранять деривации,
     соответствующие живым результатам.

     При указании "yes" (да), что является значением по умолчанию,
     сборщик мусора сохраняет деривации, то есть файлы ‘.drv’, до тех
     пор, пока любой из их выходов остаётся живым.  Это позволяет
     пользователям отслеживать исходники элементов на складе.  Установка
     в "no" (нет) немного экономит место на диске.

     Таким образом, установка ‘--gc-keep-derivations’ в "yes" (да) даётт
     возможность пройти от результатов до дериваций, а установка
     ‘--gc-keep-outputs’ в "yes" (да), делает возможным пройти от
     дериваций до результатов.  Если оба установлены в "yes", тогда это
     сохранит всё используемое для сборки (исходники, компилятор,
     библиотеки и другие инструменты сборки) живых объектов на складе,
     без учёта, доступны эти инструменты сборки из корней сборщика
     мусора или нет.  Это удобно для разработчиков, так как это
     сокращает пересборки или скачивания.

‘--impersonate-linux-2.6’
     На системах, основанных на Linux, выдавать себя за Linux 2.6.  Это
     означает, что системный вызов ядра ‘uname’ будет выдавать 2.6
     номером релиза.

     Это полезно для сборки программ, которые (обычно по ошибке) зависят
     от версии ядра.

‘--lose-logs’
     Не сохранять логи сборки.  По умолчанию они сохраняются под
     ‘LOCALSTATEDIR/guix/log’.

‘--system=SYSTEM’
     Считать SYSTEM текущим типом системы.  По умолчанию это пара
     архитектура/ядро, обнаруженная во время конфигурации, например,
     ‘x86_64-linux’.

‘--listen=ENDPOINT’
     Слушать соединения с ENDPOINT.  ENDPOINT интерпретируется как имя
     файла сокета Unix-домена, если начинается с ‘/’ (знак слеша).  В
     противном случае ENDPOINT интерпретируется как имя хоста или им
     хоста и порт для прослушивания.  Вот несколько примеров:

     ‘--listen=/gnu/var/daemon’
          Слушать соединения с сокетом Unix-домена ‘/gnu/var/daemon’,
          который создаётся при необходимости.

     ‘--listen=localhost’
          Слушать соединения TCP сетевого интерфейса, относящиеся к
          ‘localhost’, на порту 44146.

     ‘--listen=128.0.0.42:1234’
          Слушать соединения TCP сетевого интерфейса, относящиеся к
          ‘128.0.0.42’, на порту 1234.

     Эта опция может повторяться много раз, в таком случае ‘guix-daemon’
     принимает соединения на всех обозначенных точках.  Пользователи
     могут через клиентские команды сообщать, через какие точки
     соединяться, для этого нужно устанавливать переменную окружения
     ‘GUIX_DAEMON_SOCKET’ (*note ‘GUIX_DAEMON_SOCKET’: Хранилище.).

          Примечание: Протокол демона _неаутентичный и нешифрованный_.
          Использование ‘--listen=HOST’ подходит локальным сетям, как
          например, кластерам, где только доверенные узлы могут
          соединяться с демоном сборки.  В других случаях, когда
          необходим удалённый доступ к демону рекомендуется использовать
          сокеты Unix-домена вместе с SSH.

     Когда ‘--listen’ пропущена, ‘guix-daemon’ слушает соединения с
     сокетом Unix-домена, расположенным в
     ‘LOCALSTATEDIR/guix/daemon-socket/socket’.


File: guix.ru.info,  Node: Установка приложения,  Next: Обновление Guix,  Prev: Вызов guix-daemon,  Up: Установка

2.6 Установка приложения
========================

При использовании дистрибутива GNU/Linux, отличного от системы,
называемого также “чужой дистрибутив”, необходимо несколько
дополнительных шагов, чтобы всё работало.  Вот некоторые из них.

2.6.1 Региональные настройки
----------------------------

Пакеты, установленные с помощью Guix, не будут использовать данные
локали хост-системы.  Вместо этого вы должны вначале установить один из
пакетов локали, доступных в Guix, а затем определить переменную
окружения ‘GUIX_LOCPATH’:

     $ guix install glibc-locales
     $ export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

   Note that the ‘glibc-locales’ package contains data for all the
locales supported by the GNU libc and weighs in at around 917 MiB.
Alternatively, the ‘glibc-utf8-locales’ is smaller but limited to a few
UTF-8 locales.

   Переменная ‘GUIX_LOCPATH’ играет ту же роль, что и ‘LOCPATH’ (*note
‘LOCPATH’: (libc)Locale Names.).  Но есть два существенных различия.

  1. ‘GUIX_LOCPATH’ учитывается только libc в Guix, но не учитывается
     libc, предоставляемым чужим дистрибутивом.  Так что использование
     ‘GUIX_LOCPATH’ позволяет вам убедиться, что программы чужого
     дистрибутива не будут производить загрузку несовместимых данных
     локали.

  2. libc добавляет суффиксы ‘/X.Y’ к каждому компоненту ‘GUIX_LOCPATH’,
     где ‘X.Y’ - это версия libc, например, ‘2.22’.  Это значит, что
     если ваш профиль Guix будет содержать смесь программ, связанных с
     дугой версией libc, каждая версия libc будет пытаться загружать
     только данные локали в правильном формате.

   Это важно, потому что использование данных локали другой версией libc
может быть неприемлемо.

2.6.2 Служба выбора имён
------------------------

При использовании Guix на чужом дистрибутиве мы _настойчиво
рекомендуем_, чтобы система запускала “демон кеша имён сервисов”
библиотеки GNU C, ‘nscd’, который должен слушать сокет
‘/var/run/nscd/socket’.  Если это не сделано, приложения, установленные
Guix, могут некорректно адресовать имена хостов или аккаунты
пользователей и даже падать.  Ниже объясняется почему.

   Библиотека GNU C реализует “выбор имён сервисов” (NSS), который
представляет собой расширяемый механизм для резолвинга имён в целом:
резолвинг имён хостов, аккаунтов пользователей и другое (*note
(libc)Служба выбора имён::).

   Будучи расширяемым, NSS поддерживает “плагины”, которые предоставляют
реализации разрешения новых имён: плагин ‘nss-mdns’ резолвит имена
хостов ‘.local’, плагин ‘nis’ адресует пользовательские аккаунты,
используя сервис сетевой информации (NIS) и т.д.  Эти дополнительные
сервисы адресации настраиваются для всей системы в ‘/etc/nsswitch.conf’,
и все запущенные в системе программы учитывают эти настройки (*note
(libc)NSS Configuration File::).

   Когда выполняется разрешение имён, например, вызовом функции C
‘getaddrinfo’, приложения вначале делают попытку соединиться с nscd; в
случае успеха nscd выполняет разрешение имён по их запросу.  Если nscd
не запущен, тогда они выполняют разрешение имён самостоятельно, загружая
сервисы разрешения имён в их собственные адресные пространства и
запуская их.  Эти сервисы разрешения имён — файлы ‘libnss_*.so’ —
запускаются ‘dlopen’, но они могут поставляться системной библиотекой C,
а не библиотекой C, с которой залинковано приложение (библиотека C из
Guix).

   Вот где кроется проблема — если ваше приложение залинковано с
библиотекой C Guix (скажем, glibc 2.24) и пытается загрузить плагины NSS
из другой библиотеки C (скажем, ‘libnss_mdns.so’ для glibc 2.22), это
вероятно вызовет падение или резолвинг имени завершится с ошибкой.

   Запуск ‘nscd’ в системе, помимо преимуществ, также исключает эту
проблему несовместимости программ, потому что файлы ‘libnss_*.so’
загружены в процессе ‘nscd’, а не в самом приложении.

2.6.3 Шрифты X11
----------------

Большинство графических приложений использует Fontconfig для обнаружения
и загрузки шрифтов, а также рендеринга X11 на клиенте.  Пакет Guix
‘fontconfig’ отвечает за шрифты в ‘$HOME/.guix-profile’ по умолчанию.
Так что, чтобы графические приложения, установленные с помощью Guix,
отображали шрифты, необходимо установить шрифты также с помощью Guix.
Основные пакеты шрифтов: ‘gs-fonts’, ‘font-dejavu’ и
‘font-gnu-freefont-ttf’.

   Once you have installed or removed fonts, or when you notice an
application that does not find fonts, you may need to install Fontconfig
and to force an update of its font cache by running:

     guix install fontconfig
     fc-cache -rv

   Для отображения в графических приложениях текста на китайском,
японском, корейском нужно установить ‘font-adobe-source-han-sans’ или
‘font-wqy-zenhei’.  Первый имеет множественный выход, один для языковой
семьи (*note Пакеты со множественным выходом::).  Например, следующая
команда устанавливает шрифты для китайских языков:

     guix install font-adobe-source-han-sans:cn

   Старые программы, например, ‘xterm’, не используют Fontconfig, а
вместо этого вызывают рендеринг шрифтов на стороне сервера.  Таким
программам необходимо указывать полное имя шрифта, используя XLFD (X
Logical Font Description), примерно так:

     -*-dejavu sans-medium-r-normal-*-*-100-*-*-*-*-*-1

   Чтобы иметь возможность использовать такие полные имена для шрифтов
TrueType, установленных в вашем профиле Guix, вам нужно расширить пути
шрифтов X-сервера:

     xset +fp $(dirname $(readlink -f ~/.guix-profile/share/fonts/truetype/fonts.dir))

   После этого можно запустить ‘xlsfonts’ (из пакета ‘xlsfonts’), чтобы
убедиться, что ваши шрифты TrueType находятся там.

2.6.4 Сертификаты X.509
-----------------------

Пакет ‘nss-certs’ предоставялет сертификаты X.509, которые позволяют
программам аутентифицировать веб-серверы и работать через HTTPS.

   При использовании Guix на чужом дистрибутиве можно установить этот
пакет и определить соответствующие переменные окружения, чтобы пакеты
знали, где искать сертификаты.  Смотрите *Note Сертификаты X.509:: для
подробной информации.

2.6.5 Пакеты Emacs
------------------

When you install Emacs packages with Guix, the Elisp files are placed
under the ‘share/emacs/site-lisp/’ directory of the profile in which
they are installed.  The Elisp libraries are made available to Emacs
through the ‘EMACSLOADPATH’ environment variable, which is set when
installing Emacs itself.

   Additionally, autoload definitions are automatically evaluated at the
initialization of Emacs, by the Guix-specific
‘guix-emacs-autoload-packages’ procedure.  If, for some reason, you want
to avoid auto-loading the Emacs packages installed with Guix, you can do
so by running Emacs with the ‘--no-site-file’ option (*note (emacs)Init
File::).

2.6.6 Тулчейн GCC
-----------------

Guix предлагает индивидуальные пакеты компиляторов, как например, ‘gcc’.
Но если вам необходим полный набор инструментов (тулчейн) для компиляции
и линковки исходного кода, тогда то, что вам действительно нужно, — это
пакет ‘gcc-toolchain’.  Этот пакет предоставляет полный тулчейн GCC для
разработки C/C++, включая сам GCC, библиотеку GNU C (заголовки и
бинарники, а также отладочные символы в выходе ‘debug’), Binutils и
набор линковщика.

   Цель оболочки — проверять опции ‘-L’ и ‘-l’, направленные линковщику,
и соответствующие аргументы ‘-rpath’, и вызывать соответствующий
линковщик с этим новым набором аргументов.  Вы можете указать оболочке
отклонять линковку с библиотеками, находящимися не на складе, установив
переменную окружения ‘GUIX_LD_WRAPPER_ALLOW_IMPURITIES’ в значение ‘no’.


File: guix.ru.info,  Node: Обновление Guix,  Prev: Установка приложения,  Up: Установка

2.7 Обновление Guix
===================

To upgrade Guix, run:

     guix pull

   *Note Запуск guix pull::, for more information.

   On a foreign distro, you can upgrade the build daemon by running:

     sudo -i guix pull

followed by (assuming your distro uses the systemd service management
tool):

     systemctl restart guix-daemon.service

   On Guix System, upgrading the daemon is achieved by reconfiguring the
system (*note ‘guix system reconfigure’: Вызов guix system.).


File: guix.ru.info,  Node: Установка системы,  Next: Управление пакетами,  Prev: Установка,  Up: Top

3 Установка системы
*******************

Этот раздел объясняет, как установить систему Guix на компьютер.  Guix,
как пакетный менеджер, можно также установить на уже установленную
систему GNU/Linux (*note Установка::).

     Примечание: Вы читаете этот документ с помощью info-просмотрщика.
     Чтобы узнать, как им пользоваться, нажмите кнопку <Ввод> (enter) по
     ссылке: *note Info reader: (info-stnd)Top.  Нажмите ‘1’ после
     этого, чтобы вернуться.

     Или запустите ‘info info’ в другом tty, чтобы оставить руководство
     доступным.

* Menu:

* Ограничения::   Что нужно учитывать.
* По поводу железа::  Поддерживаемое
                                      аппаратное
                                      обеспечение.
* Установочная флеш и DVD::  Подготовка
                                                установочного
                                                носителя.
* Подготовка к установке::  Сеть, разметка
                                                  диска и т.д.
* Графическая установка в GUI::  Простая
                                                        графическая
                                                        установка.
* Ручная установка::  Ручная установка для
                                       магов.
* После установки системы::  Когда
                                                    установка
                                                    завершилась
                                                    успешно.
* Установка Guix на виртуальную машину::  Площадка
                                                                        системы
                                                                        Guix
* Сборка установочного образа::  Как это
                                                            происходит.


File: guix.ru.info,  Node: Ограничения,  Next: По поводу железа,  Up: Установка системы

3.1 Ограничения
===============

Мы полагаем, система Guix будет широко применяться для офисных и
серверных решений.  Гарантия надёжности основана на транзакционных
обновлениях, откатах и воспроизводимости.  Это наше прочное основание.

   Тем не менее, перед началом установки, ознакомьтесь с важной
информацией об ограничениях версии 1.1.0:

   • Менеджер логических томов (LVM) отсутствует.

   • Мы постоянно добавляем новые сервисы (*note Службы::), но некоторые
     могут отсутствовать.

   • Доступные GNOME, Xfce, LXDE и Enlightenment (*note Сервисы рабочего
     стола::), а также ряд оконных менеджеров X11.  Однако, KDE в
     настоящее время отсутствует.

   Мы настойчиво призываем вас присылать отчёты о проблемах (или
историиуспеха!).  Присоединяйтесь к нам, если вы хотите улучшить Guix.
Смотрите *Note Содействие::, чтобы узнать больше.


File: guix.ru.info,  Node: По поводу железа,  Next: Установочная флеш и DVD,  Prev: Ограничения,  Up: Установка системы

3.2 По поводу железа
====================

GNU Guix особенно заботится об уважении свободы пользователя при работе
за компьютером.  Она построена на ядре Linux-libre, что означает, что
поддерживается только аппаратное обеспечение, которое имеет свободные
драйверы и прошивки.  Сегодня широкий список наличествующей аппаратуры
поддерживается GNU/Linux-libre — от клавиатур и графических карт до
сканеров и контроллеров Ethernet.  К сожалению, всё ещё остаётся ряд
производителей железа, которые запрещают пользователям управлять их
устройствами, и такое аппаратное обеспечение не поддерживается системой
Guix.

   Основной областью, в которой отсутствуют свободные драйверы и
прошивки, являются устройства Wi-Fi.  Работают устройства Wi-Fi, которые
используют платы Atheros (AR9271 и AR7010) и взаимодействуют с драйвером
Linux-libre ‘ath9k’, также использующие платы Broadcom/AirForce (BCM43xx
with Wireless-Core Revision 5), которые работают с драйвером Linux-libre
‘b43-open’.  Свободная прошивка существует для обоих и доступна в
системе Guix из коробки как часть %BASE-FIRMWARE (*note ‘firmware’:
Интерфейс operating-system.).

   Фонд свободного программного обспечения FSF (https://www.fsf.org/)
ведёт “Уважение вашей свободы” (https://www.fsf.org/ryf) (RYF) —
программу сертификации аппаратного обеспечения, которое уважает вашу
свободу и вашу безопасность и утверждает, что вы имеете контроль над
вашими устройствами.  Мы побуждаем вас проверить список устройств,
сертифицированных RYF.

   Другой полезный ресурс — сайт H-Node (https://www.h-node.org/).  Он
содержит каталог устройств с информацией об их поддержке в GNU/Linux.


File: guix.ru.info,  Node: Установочная флеш и DVD,  Next: Подготовка к установке,  Prev: По поводу железа,  Up: Установка системы

3.3 Установочная флеш и DVD
===========================

Установочный образ ISO-9660 может быть записан на USB-флеш или DVD,
скачать его можно по адресу:
‘https://alpha.gnu.org/gnu/guix/guix-system-install-1.1.0.SYSTEM.iso.xz’,
где SYSTEM одна из следующих:

‘x86_64-linux’
     для системы GNU/Linux на 64-битных Intel/AMD-совместимых
     процессорах;

‘i686-linux’
     для системы GNU/Linux на 32-битных Intel-совместимых процессорах.

   Обязательно скачайте связанный файл подписи ‘.sig’ и проверьте
аутентичность образа так:

     $ wget https://ftp.gnu.org/gnu/guix/guix-system-install-1.1.0.SYSTEM.iso.xz.sig
     $ gpg --verify guix-system-install-1.1.0.SYSTEM.iso.xz.sig

   Если это завершается ошибкой, значит у вас нет необходимого
публичного ключа, тогда запустите команду для импорта ключа:

     $ wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 \
           -qO - | gpg --import -

и запустите команду ‘gpg --verify’.

   Take note that a warning like “This key is not certified with a
trusted signature!” is normal.

   Этот образ содержит инструменты, необходимые для установки.  Он
должен копироваться _как есть_ на большую USB-флеш или DVD.

Запись на USB-флеш
------------------

Чтобы записать образ на USB-флеш, выполните следующие шаги:

  1. Распакуйте образ, используя команду ‘xz’:

          xz -d guix-system-install-1.1.0.SYSTEM.iso.xz

  2. Вставьте в компьютер USB-флеш объёмом 1 Гб или более и определите
     его имя.  Учитывая имя (обычно соответствующее ‘/dev/sdX’)
     скопируйте образ на него:

          dd if=guix-system-install-1.1.0.SYSTEM.iso of=/dev/sdX
          sync

     Доступ к ‘/dev/sdX’ обычно требует привилегий root.

Запись на DVD
-------------

Чтобы скопировать образ на DVD, проделайте следующие шаги:

  1. Распакуйте образ, используя команду ‘xz’:

          xz -d guix-system-install-1.1.0.SYSTEM.iso.xz

  2. Вставьте чистый DVD в компьютер и определите имя устройства.
     Обычно DVD определяется как ‘/dev/srX’, скопируйте образ так:

          growisofs -dvd-compat -Z /dev/srX=guix-system-install-1.1.0.SYSTEM.iso

     Доступ к ‘/dev/srX’ обычно требует привилегий root.

Загрузка
--------

Once this is done, you should be able to reboot the system and boot from
the USB stick or DVD. The latter usually requires you to get in the BIOS
or UEFI boot menu, where you can choose to boot from the USB stick.  In
order to boot from Libreboot, switch to the command mode by pressing the
‘c’ key and type ‘search_grub usb’.

   Смотрите *Note Установка Guix на виртуальную машину::, если вы хотите
установить систему Guix на виртуальную машину (VM).


File: guix.ru.info,  Node: Подготовка к установке,  Next: Графическая установка в GUI,  Prev: Установочная флеш и DVD,  Up: Установка системы

3.4 Подготовка к установке
==========================

Когда вы загрузитесь, вы можете использовать графическую установку,
которая намного проще для начала (*note Графическая установка в GUI::).
Или если вы уже знакомы с GNU/Linux или вы хотите больший контроль, чем
это предоставляет графическая установка, вы можете выбрать ручной
процесс установки (*note Ручная установка::).

   Графическа установка доступна в TTY1.  Вы можете запустить оболочку
root в TTY 3-6, нажимая ‘ctrl-alt-f3’, ‘ctrl-alt-f4’ и т.д.  TTY2
отображает эту документацию, открыть его можно клавишами ‘ctrl-alt-f2’.
Листать документацию можно командами просмотрщика Info (*note
(info-stnd)Top::).  Установка системы запускает демона мыши GPM, который
позволяет вам выделять текст лековй кнопкой мыши и вставлять средней
кнопкой.

     Примечание: Установка требует доступа к Интернету, чтобы скачивать
     любые отсутствующие зависимости в вашей конфигурации системы.
     Смотрите раздел "Сеть" ниже.


File: guix.ru.info,  Node: Графическая установка в GUI,  Next: Ручная установка,  Prev: Подготовка к установке,  Up: Установка системы

3.5 Графическая установка в GUI
===============================

Графический установщик представляет собой текстовый интерфейс.  Он
взаимодействует через диалоговые блоки, проходя шаги установки системы
GNU Guix.

   Первый диалоговый блок позволяет вам установить систему в таком виде,
как во время установки.  Вы можете выбрать язык, раскладку клавиатуры,
задать настройки сети для установки.  На картинке ниже — диалог
настройки сети.

 [image src="images/installer-network.png" alt="networking setup with the graphical
installer" ]

   Следующие шаги позволят вам разметить диск, как это показано на
картинке ниже.  Также можно выбрать шифрование вайловой системы (или без
шифрования), ввести имя хоста и пароль root, создать дополнительную
учётную запись и другие действия.

 [image src="images/installer-partitions.png" alt="partitioning with the graphical
installer" ]

   Отметим, что в любое время установщик позволяет вам отменить текущий
шаг и вернуться к предыдущему шагу установки, как это показано на
картинке ниже.

 [image src="images/installer-resume.png" alt="resuming the installation process" ]

   Когда настройки выполнены, установщик сгенерирует конфигурацию
операционной системы и отобразит её (*note Использование системы
конфигурации::).  На этом этапе нажатие "OK" запустит установку.  После
успешнго завершения нужно перезагрузиться и использовать новую систему.
Смотрите *Note После установки системы::, чтобы узнать ещё больше.


File: guix.ru.info,  Node: Ручная установка,  Next: После установки системы,  Prev: Графическая установка в GUI,  Up: Установка системы

3.6 Ручная установка
====================

Этот раздел описывает, как можно вручную установить систему GNU Guix на
вашу машину.  Это потребует знаний GNU/Linux, оболочки и инструментов
администрирования.  Если вы считаете, это не для вас, используйте
вариант графической установки (*note Графическая установка в GUI::).

   Во время установки доступна оболочка root в TTY от 3 до 6.  Нажмите
‘ctrl-alt-f3’, ‘ctrl-alt-f4’ и т.д., чтобы переключиться на них.  Они
имеют много стандартных инструментов для установки системы.  Но это
также работающая система Guix, а это значит, что вы можете установить
дополнительные пакеты, которые потребуются, используя ‘guix package’
(*note Вызов guix package::).

* Menu:

* Раскладка клавиатуры и работа с сетью и разбиение диска::  Начальная
                                                                                                              установка.
* В продолжении установки::  Установка.


File: guix.ru.info,  Node: Раскладка клавиатуры и работа с сетью и разбиение диска,  Next: В продолжении установки,  Up: Ручная установка

3.6.1 Раскладка клавиатуры, Сеть, Разметка диска
------------------------------------------------

Перед установкой системы вам может понадобиться смена раскладки
клавиатуры, а также настройка сети и разметка целевого жёсткого диска.
В этом разделе приведены соответствующие инструкции.

3.6.1.1 Раскладка клавиатуры
............................

Установочный образ использует раскладку клавиатуры US qwerty.  Если
нужно поменять её, можно пользоваться командой ‘loadkeys’.  Например,
следующая команда выбирает раскладку клавиатуры Dvorak:

     loadkeys dvorak

   Смотрите файлы в ‘/run/current-system/profile/share/keymaps’, чтобы
найти список доступных раскладок.  Запустите ‘man loadkeys’, чтобы
узнать больше.

3.6.1.2 Сеть
............

Запустите следующую команду, чтобы узнать имена сетевых интерфейсов:

     ifconfig -a

... или используйте специальную команду GNU/Linux ‘ip’:

     ip address

   Проводные интерфейсы называются на букву ‘e’; например, интерфейс,
соответствующий первому контроллеру Ethernet на материнской плате,
называется ‘eno1’.  Беспроводные интерфейсы имеют имена, начинающиеся с
‘w’, как ‘w1p2s0’.

Проводное соединение
     Чтобы настроить проводную сеть, запустите следующую команду,
     заменив INTERFACE именем проводного интерфейса, который вы хотите
     использовать.

          ifconfig INTERFACE up

     ... или используйте специальную команду GNU/Linux ‘ip’:

          ip link set INTERFACE up

Беспроводное соединение
     Чтобы настроить беспроводную сеть, можно создать конфигурционный
     файл для ‘wpa_supplicant’ (расположение файла неважно).  Можно
     пользоваться любым доступным текстовым редактором, например,
     ‘nano’:

          nano wpa_supplicant.conf

     Следующий пример настроек подойдёт для большинства беспроводных
     сетей.  Нужно предоставить фактический SSID и парольную фразу для
     сети, к которой вы подключаетесь:

          network={
            ssid="MY-SSID"
            key_mgmt=WPA-PSK
            psk="the network's secret passphrase"
          }

     Запустите сервис беспроводной сети в фоновом режиме следующей
     командой (замените INTERFACE именем сетевого интерфейса, который вы
     используете):

          wpa_supplicant -c wpa_supplicant.conf -i INTERFACE -B

     Запустите ‘man wpa_supplicant’, чтобы узнать больше.

   Теперь нужно получить IP-адрес.  В случае сети, где IP-адреса
автоматически распределяются с помощью DHCP, можно запустить:

     dhclient -v INTERFACE

   Попробуйте пинговать сервер, чтобы узнать, работает ли сеть:

     ping -c 3 gnu.org

   Настройка доступа к сети необходима почти всегда, потому что ораз
может не иметь программное обеспечение и инструменты, которые могут
понадобиться.

   If you need HTTP and HTTPS access to go through a proxy, run the
following command:

     herd set-http-proxy guix-daemon URL

where URL is the proxy URL, for example ‘http://example.org:8118’.

   Если желаете, вы можете продолжить установку удалённо, запустив
SSH-сервер:

     herd start ssh-daemon

   Не забудьте задать пароль командой ‘passwd’ или настроить публичный
ключ OpenSSH для аутентификации, чтобы иметь возможность подключиться.

3.6.1.3 Разметка диска
......................

Если это ещё не сделано, тогда нужно разделить диск, а затем
отформатировать целевой(-ые) раздел(ы).

   Установочный образ содержит несколько инструментов для разметки,
включая Parted (*note (parted)Overview::), ‘fdisk’ и ‘cfdisk’.
Запустите и настройте ваш диск, используя план разметки, который нужен:

     cfdisk

   Если ваш диск использует формат GUID Partition Table (GPT), и вы
планируете использовать GRUB, работающий с BIOS (что по умолчанию),
убедитесь, что раздел BIOS Boot Partition доступен (*note (grub)BIOS
installation::).

   Если вместо этого вы хотите использовать GRUB, работающий с EFI,
тогда необходима “разметка система EFI” FAT32 (ESP). Такая разметка
может, например, монтироваться в ‘/boot/efi’ и должна иметь флаг ‘esp’.
То есть в случае ‘parted’:

     parted /dev/sda set 1 esp on

     Примечание: Не уверенны, что выбрать: GRUB, взаимодействующий с EFI
     или BIOS? Если существует директория ‘/sys/firmware/efi’ в
     установочом образе, тогда вам следует использовать установку EFI и
     ‘grub-efi-bootloader’.  В противном случае нужно использовать GRUB,
     работающий с BIOS, называемый ‘grub-bootloader’.  Смотрите *Note
     Настройка загрузчика:: для большей информации о загрузчиках.

   Once you are done partitioning the target hard disk drive, you have
to create a file system on the relevant partition(s)(1).  For the ESP,
if you have one and assuming it is ‘/dev/sda1’, run:

     mkfs.fat -F32 /dev/sda1

   Желательно добавить метки файловых систем, чтобы вы могли ссылаться
на них по именам в объявлениях ‘file-system’ (*note Файловые системы::).
Обычно это можно сделать опцией ‘-L’ в ‘mkfs.ext4’, например.  Допустим,
раздел root располагается в ‘/dev/sda2’, можно добавить метку ‘my-root’
следующим образом:

     mkfs.ext4 -L my-root /dev/sda2

   Если же вы планируете шифровать раздел root, можно воспользоваться
утилитами Cryptsetup/LUKS (смотрите ‘man cryptsetup’ for more
information.)  Допустим, если раздел root размещается в ‘/dev/sda2’,
необходимо выполнить следующие команды:

     cryptsetup luksFormat /dev/sda2
     cryptsetup open --type luks /dev/sda2 my-partition
     mkfs.ext4 -L my-root /dev/mapper/my-partition

   Когда это сделано, монтируйте целевую файловую систему под ‘/mnt’
следующей командой (опять же полагая, что метка раздела root —
‘my-root’):

     mount LABEL=my-root /mnt

   Также монтируйте любые другие файловые системы внутрь целевой
файловой системы.  Если например, выбрана точка монтирования EFI
‘/boot/efi’, монтируйте её в ‘/mnt/boot/efi’, так, чтобы она
обнаруживалась после запуска ‘guix system init’.

   Наконец, если вы планируете использовать один или более разделов swap
(*note swap space: (libc)Memory Concepts.), обязательно инициируйте их
командой ‘mkswap’.  Допустим, если ваш раздел swap размещён в
‘/dev/sda3’, нужно выполнить:

     mkswap /dev/sda3
     swapon /dev/sda3

   Возможно, вместо этого вы используете swap-файл.  Например,
предположим, вы хотите использовать в новой системе swap-файл в
‘/swapfile’, тогда нужно выполнить(2):

     # This is 10 GiB of swap space.  Adjust "count" to change the size.
     dd if=/dev/zero of=/mnt/swapfile bs=1MiB count=10240
     # For security, make the file readable and writable only by root.
     chmod 600 /mnt/swapfile
     mkswap /mnt/swapfile
     swapon /mnt/swapfile

   Заметим, что если вы шифруете раздел root и создаёте swap-файл в его
файловой системе, как это описано выше, шифрование также будет защищать
swap-файл, как и любой другой файл в этой файловой системе.

   ---------- Footnotes ----------

   (1) Currently Guix System only supports ext4, btrfs, and JFS file
systems.  In particular, code that reads file system UUIDs and labels
only works for these file system types.

   (2) Этот пример работает для многих типов файловых систем, например,
ext4.  Однако для файловых систем, использующих механизм копирование при
записи (copy-on-write), например, btrfs, необходимы другие шаги.
Подробнее смотрите в мануалах для ‘mkswap’ и ‘swapon’.


File: guix.ru.info,  Node: В продолжении установки,  Prev: Раскладка клавиатуры и работа с сетью и разбиение диска,  Up: Ручная установка

3.6.2 В продолжении установки
-----------------------------

Когда целевые разделы готовы и раздел root монтирован под ‘/mnt’, всё
готово для старта.  Сначала запустите:

     herd start cow-store /mnt

   Это сделает ‘/gnu/store’ копируемым при записи (copy-on-write), что
заставит систему записывать пакеты, добавляемые в систему на этапе
установки, на целевой диск под ‘/mnt’, а не держать их в памяти.  Это
важно, потому что по команде ‘guix system init’ (смотрите ниже) будут
скачиваться или собираться пакеты в ‘/gnu/store’, которая изначально
находится в файловой системе, загрузженной в память.

   Далее нужно редактировать файл объявления операционной системы,
которым будет пользоваться установщик.  Для этого при установке системы
можно использовать три текстовых редактора.  Мы ркомендуем GNU nano
(*note (nano)Top::) — он поддерживает подсветку синтаксиса и работу со
скобками.  Другие редакторы: GNU Zile (клон Emacs), nvi (клон исходного
редактора BSD ‘vi’).  Мы настойчиво рекомендуем сохранять файл
конфигураций в целевой файловой системе root, например, как
‘/mnt/etc/config.scm’.  Иначе есть возможность потерять конфигурационный
файл, когда вы загрузитесь в новую установенную систему.

   Смотрите *Note Использование системы конфигурации:: для подробностей
о конфигурационном файле.  Конфигурационный файл для примера доступен
под ‘/etc/configuration’ установочного образа.  Например, чтобы получить
систему с графическим сервером (т.е.  десктопную систему), можно это
сделать примерно так:

     # mkdir /mnt/etc
     # cp /etc/configuration/desktop.scm /mnt/etc/config.scm
     # nano /mnt/etc/config.scm

   Нужно уделить внимание содержимому конфигурационного файла, в
частности:

   • Убедитесь, что ‘bootloader-configuration’ указывает на тот раздел,
     в который вы хотите установить GRUB. Он должен содержать
     ‘grub-bootloader’, если вы используете legacy-GRUB, или
     ‘grub-efi-bootloader’ для новых систем UEFI. Для систем legacy поле
     ‘target’ содержит имя устройства, например, ‘/dev/sda’; для систем
     UEFI он указывает имя раздела EFI, например, ‘/boot/efi’.  Так что
     обязательно проверьте, чтобы нужный путь был монтирован, и запись
     ‘file-system’ содержала нужную уонфигурацию.

   • Убедитесь, чтобы в полях ‘device’ были указаны метки ваших файловых
     систем внутри конфигурации ‘file-system’, если конечно,
     конфигурация ‘file-system’ использует процедуру ‘file-system-label’
     в поле ‘device’.

   • При наличии шифрованных разделов RAID, обязательно добавьте поле
     ‘mapped-devices’, чтобы описать их (*note Размеченные
     устройства::).

   Когда вы подготовили конфигурационный файл, нужно инициализировать
новую систему (помните, что целевой раздел root монтирован под ‘/mnt’):

     guix system init /mnt/etc/config.scm /mnt

Это копирует все нужные файлы и устанавливает GRUB в ‘/dev/sdX’, если
конечно, вы не задали опцию ‘--no-bootloader’.  Подробнее - *note Вызов
guix system::.  Эта команда может вызывать скачивание или сборку
отсутствующих пакетов, что может занять время.

   Когда эта команда завершена, надеемся, успешно, можно запустить
‘reboot’ и загрузиться в новую систему.  Пароль ‘root’ в новой системе
изначально пустой; пароли других пользователей должны быть заданы
командой ‘passwd’ от ‘root’, если конечно, ваша конфиурация не содержит
указания (*note user account passwords: user-account-password.).
Смотрите *Note После установки системы::, чтобы узнать, что дальше.


File: guix.ru.info,  Node: После установки системы,  Next: Установка Guix на виртуальную машину,  Prev: Ручная установка,  Up: Установка системы

3.7 После установки системы
===========================

Замечательно!  Теперь вы загрузились в систему Guix!  Теперь можно
обновить систему, когда у вас будет на это время, запустив, например:

     guix pull
     sudo guix system reconfigure /etc/config.scm

Это соберёт поколение (generation) системы с последними пакетами и
сервисами (*note Вызов guix system::).  Мы рекомендуем делать это
регулярно, чтобы ваша система содержала обновления безопасности (*note
Обновления безопасности::).

     Примечание: Отметим, что ‘sudo guix’ запускает команду ‘guix’ от
     вашего пользователя, но _не_ от root, потому что ‘sudo’ не меняет
     ‘PATH’.  Чтобы вместо этого запустить ‘guix’ от root, напечатайте
     ‘sudo -i guix ...’.

     The difference matters here, because ‘guix pull’ updates the ‘guix’
     command and package definitions only for the user it is ran as.
     This means that if you choose to use ‘guix system reconfigure’ in
     root’s login shell, you’ll need to ‘guix pull’ separately.

   Присоединяйтесь к нашему IRC-каналу ‘#guix’ в сети Freenode или
пишите на <guix-devel@gnu.org>, чтобы поделиться опытом!


File: guix.ru.info,  Node: Установка Guix на виртуальную машину,  Next: Сборка установочного образа,  Prev: После установки системы,  Up: Установка системы

3.8 Установка Guix на виртуальную машину (VM)
=============================================

Если вы хотите установить систему Guix на виртуальную машину (VM) или на
виртуальный приватный сервер (VPS) вместо вашей любимой машины, этот
раздел для вас.

   To boot a QEMU (https://qemu.org/) VM for installing Guix System in a
disk image, follow these steps:

  1. Во-первых, найдите и распакуйте установочный образ системы Guix,
     как описано ранее (*note Установочная флеш и DVD::).

  2. Создайте образ диска, который будет содержать установленную
     систему.  Чтобы создать образ диска qcow2, используйте команду
     ‘qemu-img’:

          qemu-img create -f qcow2 guix-system.img 50G

     Результирующий файл будет намного меньше 50Гб (обычно менее 1Мб),
     но он будет увеличиваться с заполнение виртуального устройства.

  3. Загрузите установочный образ USB в VM:

          qemu-system-x86_64 -m 1024 -smp 1 -enable-kvm \
            -nic user,model=virtio-net-pci -boot menu=on,order=d \
            -drive file=guix-system.img \
            -drive media=cdrom,file=guix-system-install-1.1.0.SYSTEM.iso

     ‘-enable-kvm’ is optional, but significantly improves performance,
     *note Запуск Guix на виртуальной машине::.

  4. Теперь вы в корне VM, проделайте процесс установки *Note Подготовка
     к установке:: и последующие инструкции.

   Once installation is complete, you can boot the system that’s on your
‘guix-system.img’ image.  *Note Запуск Guix на виртуальной машине::, for
how to do that.


File: guix.ru.info,  Node: Сборка установочного образа,  Prev: Установка Guix на виртуальную машину,  Up: Установка системы

3.9 Сборка установочного образа
===============================

Установочный образ, описанный выше, собран командой ‘guix system’, а
именно:

     guix system disk-image --file-system-type=iso9660 \
       gnu/system/install.scm

   Нужно просмотреть ‘gnu/system/install.scm’ в дереве исходников, а
также *note Вызов guix system::, чтобы получить больше информации об
установочном образе.

3.10 Сбрка и установка образа для плат ARM
==========================================

Many ARM boards require a specific variant of the U-Boot
(https://www.denx.de/wiki/U-Boot/) bootloader.

   Если вы собираете образ диска, а загрузчик не доступен (на другом
устройстве загрузке и т.п.), советуем собрать образ, который включает
загрузчик, то есть так:

     guix system disk-image --system=armhf-linux -e '((@ (gnu system install) os-with-u-boot) (@ (gnu system install) installation-os) "A20-OLinuXino-Lime2")'

   ‘A20-OLinuXino-Lime2’ — это имя материнской платы.  Если вы
обозначите недействительную плату, будет выведен список возможных плат.


File: guix.ru.info,  Node: Управление пакетами,  Next: Разработка,  Prev: Установка системы,  Up: Top

4 Управление пакетами
*********************

Целью GNU Guix является предоставление пользователям возможности легко
устанавливать, обновлять и удалять пакеты программного обеспечения, без
необходимости изучения процедур их сборки и без необходимости разрешения
зависимостей.  Также Guix имеет следующие обязательные особенности.

   Этот раздел описывает основные особенности Guix и предоставляемые им
инструменты управления пакетами.  Кроме интерфейса командной строки,
который описан ниже (*note ‘guix package’: Вызов guix package.), можно
также использовать интерфейс Emacs-Guix (*note (emacs-guix)Top::), если
установить пакет ‘emacs-guix’ (выполните команду ‘M-x guix-help’, чтобы
начать работу с ним):

     guix install emacs-guix

* Menu:

* Особенности::   Как Guix делает жизнь ярче.
* Вызов guix package::  Установка пакетов,
                               удаление и т.д.
* Подстановки::   Скачивание собранных
                               бинарников.
* Пакеты со множественным выходом::  Один
                                                                   исходный
                                                                   пакет,
                                                                   различные
                                                                   выходы.
* Вызов guix gc::       Запуск сборщика мусора.
* Запуск guix pull::   Закачка последнего Guix и
                               дистрибуции.
* Каналы::             Настройка коллекции
                               пакетов.
* Invoking guix time-machine::  Running an older revision of Guix.
* Младшие версии::  Взаимодействие с
                                   другими ревизиями Guix.
* Вызов guix describe::  Отобразить информацию о
                                ревизии Guix.
* Вызов guix archive::  Экспорт и импорт файлов
                               склада.


File: guix.ru.info,  Node: Особенности,  Next: Вызов guix package,  Up: Управление пакетами

4.1 Особенности
===============

При использовании Guix каждый пакет после установки размещается в
“package store”, в собственной директории, например,
‘/gnu/store/xxx-package-1.2’, где ‘xxx’ - это строка base32.

   Вместо того, чтобы ссылаться на эти директории, пользователям нужно
обращаться к их “профилям”, профиль указывает на пакеты, которые они
хотят использовать.  Эти профили хранятся в домашней директории каждого
пользователя в ‘$HOME/.guix-profile’.

   Например, ‘alice’ устанавливает GCC 4.7.2.  В результате
‘/home/alice/.guix-profile/bin/gcc’ указывает на
‘/gnu/store/...-gcc-4.7.2/bin/gcc’.  Допустим, на той же машине ‘bob’
установил GCC 4.8.0.  Профиль пользователя ‘bob’ просто указывает на
‘/gnu/store/...-gcc-4.8.0/bin/gcc’.  То есть обе версии GCC присутствуют
в одной системе без помех.

   Команда ‘guix package’ — главный инструмент для управления пакетами
(*note Вызов guix package::).  Она работает с профилями пользователей,
которые имеют _права обычных пользователей_.

   Команда предоставляет обязательные операции установки, удаления и
обновления.  Каждый вызов представляет собой _транзакцию_, независимо от
того, выполнены успешно заданные операции, или ничего не произошло.
Так, если процесс ‘guix package’ завершился во время транзакции, или
произошёл сбой питания во время транзакции, тогда профиль пользователя
остаётся в исходном состоянии, готовом к использованию.

   В дополнение, каждую транзакцию, которая работает с пакетами, можно
_откатить_.  Так если, например, обновление устанавливает новую версию
пакета, которая имеет серьёзный баг, пользователи могут откатиться до
предыдущей инстанции своего профиля, который работал нормально.  Точно
так же, глобальные настройки системы Guix являются объектом
транзакционных обновлений и откатов (*note Использование системы
конфигурации::).

   Все пакеты на складе могут быть _собраны как мусор_.  Guix может
определить, какие пакеты всё ещё используются профилями пользователей, и
удалить те, которые однозначно больше не используются (*note Вызов guix
gc::).  Также пользователи могут явно удалить старые поколения
(generations) их профилей, поэтому пакеты, на которые ссылались старые
профили, могут быть удалены.

   Guix реализует “чисто функциональный” подход к управлению пакетами,
как описано во введении (*note Введение::).  В ‘/gnu/store’ имя
директории каждого пакета содержит хеш всех входных данных, которые
использовались при сборке пакета: компилятор, библиотеки, скрипты сборки
и т.д.  Это прямое соответствие позволяет пользователям убедиться, что
данная установка пакета соответствует текущему состоянию дистрибутива.
Также это помогает улучшить “воспроизводимость сборки”: благодаря
изолированному окружению сборки, которая используется при установке
пакета, результат сборки содержит точно такие же файлы на разных машинах
(*note container: Вызов guix-daemon.).

   Эта концепция позволяет Guix поддерживать “прозрачное внедрение
бинарников/исходников”.  Когда доступен элемент ‘/gnu/store’, собранный
заранее на внешнем источнике, то есть готова “подстановка”, Guix просто
скачивает и распаковывает его.  В противном случае он собирает пакет из
исходников на локальной машине (*note Подстановки::).  Так как
результаты сборки обычно воспроизводимы бит-к-биту, пользователи не
должны доверять серверам, которые поставляют подстановки — они могут
целенаправленно запросить локальную сборку и _не пользоваться_ серверами
подстановки (*note Запуск guix challenge::).

   Управление окружением сборки — функция, которая полезна для
разработчиков.  Команда ‘guix environment’ позволяет разработчикам
пакетов быстро установить требуемое окружение разработки без
необходимости устанавливать в свой профиль зависимости пакета вручную
(*note Запуск guix environment::).

   Guix и его определения пакетов подчняются контролю версиями, и ‘guix
pull’ позволяет "путешествовать во времени" по истории Guix (*note
Запуск guix pull::).  Это позволяет повторять инстанцию Guix на разных
машинах или по прошествию времени, что в свою очередь позволяет вам
_повторять полностью программное окружение_ из достпуных “трекеров
источников” программного обеспечения.


File: guix.ru.info,  Node: Вызов guix package,  Next: Подстановки,  Prev: Особенности,  Up: Управление пакетами

4.2 Вызов ‘guix package’
========================

Команда ‘guix package’ — инструмент, который позволяет пользователям
устанавливать, обновлять и удалять пакеты, а также откатываться до
предыдущих конфигураций (*note Особенности::).  Его синтаксис:

     guix package OPTIONS

   В первую очередь, OPTIONS (опции) задают операции, которые нужно
выполнить в транзакции.  По завершении создаётся новый профиль, а
предыдущие “поколения” (generations) профиля остаются доступными, если
пользователь решит откатиться.

   Например, чтобы удалить ‘lua’ и устанвоить ‘guile’ и ‘guile-cairo’ в
одной транзакции, напечатайте:

     guix package -r lua -i guile guile-cairo

   Для вашего удобства мы также предоставляем следующие синонимы:

   • ‘guix search’ - синоним ‘guix package -s’,
   • ‘guix install’ - синоним ‘guix package -i’,
   • ‘guix remove’ - синоним ‘guix package -r’,
   • ‘guix upgrade’ — это синоним ‘guix package -u’,
   • and ‘guix show’ is an alias for ‘guix package --show=’.

   Эти синонимы не такие мощные, как ‘guix package’, и предоставляют
меньше опций, так что в некоторых случаях вам скорее нужно пользоваться
непосредственно ‘guix package’.

   ‘guix package’ также поддерживает “декларативный подход”, с помощью
которого пользователь зааёт точный набор пакетов, которые должны быть
доступны, и передаёт его в опции ‘--manifest’ (*note ‘--manifest’:
profile-manifest.).

   Для каждого пользователя автоматически создаётся символическая ссылка
на профиль по умолчанию, она располагается в файле
‘$HOME/.guix-profile’.  Эта ссылка всегда указывает на текущее поколение
пользовательского профиля по умолчанию.  Так пользователи могут добавить
‘$HOME/.guix-profile/bin’ в свою переменную окружения ‘PATH’ и прочее.
Если вы не используете систему Guix, предполагается добавление следующих
строк в ваш ‘~/.bash_profile’ (*note (bash)Bash Startup Files::), чтобы
порождаемые оболочки получили все необходимые определения переменных
окружения:

     GUIX_PROFILE="$HOME/.guix-profile" ; \
     source "$HOME/.guix-profile/etc/profile"

   В случае многопользовательской установки, профили пользователей
сохраняются в месте, которое зарегстрировано как “garbage-collector
root”, которое указывет на ‘$HOME/.guix-profile’ (*note Вызов guix
gc::).  Эта директория обычно ссылается на
‘LOCALSTATEDIR/guix/profiles/per-user/USER’, где LOCALSTATEDIR —
значение, переданное скрипту ‘configure’ опцией ‘--localstatedir’, а
USER — имя пользователя.  Директория ‘per-user’ создаёся, когда
запускается ‘guix-daemon’, а поддиректория USER создаётся ‘guix
package’.

   Опции OPTIONS могут быть следующими:

‘--install=PACKAGE ...’
‘-i PACKAGE ...’
     Установить заданный пакет.

     Каждый PACKAGE может задавать простое имя пакета, как например,
     ‘guile’, или имя пакета с указанием номера версии, например,
     ‘guile@1.8.8’ или просто ‘guile@1.8’ (в последнем случае выбирается
     самая новая версия с префиксом ‘1.8’.)

     Если не задан номер версии, тогда будет выбрана самая новая
     доступная версия.  Добавм, что PACKAGE может содержать двоеточие и
     одно имя выходных данных пакета, как ‘gcc:doc’ или
     ‘binutils@2.22:lib’ (*note Пакеты со множественным выходом::).
     Пакеты с соответствующим именем (и опционально, версией) будут
     отыскиваться в модулях дистрибутива GNU (*note Пакетные модули::).

     Иногда пакеты имеют “распространённые входные данные” (propagated
     inputs) — это зависимости, которые устанавливаются автоматически
     вместе с требуемыми пакетами (см.  *note ‘propagated-inputs’ in
     ‘package’ objects: package-propagated-inputs. для подробной
     информации о распространяемых входных днных в определениях
     пакетов).

     Примером является библиотека GNU MPC: его файлы заголовков C
     ссылаются на файлы библиотеки GNU MPFR, которые в свою очередь,
     ссылаются на библиотеку GMP. Так при установке MPC, также в профиль
     будут устанволены библиотеки MPFR и GMP; удаление MPC также удалит
     MPFR и GMP, если конечно, они не были явно установлены
     пользователем.

     Кроме того, пакеты иногда зависят от переменных окружения — от их
     путей поиска (смотрите разъяснение ‘--search-paths’ ниже).  Любая
     отсутствующая или, возможно, некорректная переменная окружения
     вызывает сообщение отчета.

‘--install-from-expression=EXP’
‘-e EXP’
     Устанавить пакет, соответствующий EXP.

     EXP должно быть выражением Scheme, которое определяет объект
     ‘<package>’.  Эта опция полезна, чтобы указать однозначно пакет,
     который имеет схожие варианты имён, например, выражением ‘(@ (gnu
     packages base) guile-final)’.

     Отметим, что эта опция устанавливает первое содержимое пакета, чего
     может быть недостаточно, если нужен специфичный выход пакета со
     множественным выходом.

‘--install-from-file=FILE’
‘-f FILE’
     Устанавить пакет, который определён в файле.

     Например, FILE может содержать содержать определение (*note
     Описание пакетов::):

          (use-modules (guix)
                       (guix build-system gnu)
                       (guix licenses))

          (package
            (name "hello")
            (version "2.10")
            (source (origin
                      (method url-fetch)
                      (uri (string-append "mirror://gnu/hello/hello-" version
                                          ".tar.gz"))
                      (sha256
                       (base32
                        "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"))))
            (build-system gnu-build-system)
            (synopsis "Hello, GNU world: An example GNU package")
            (description "Guess what GNU Hello prints!")
            (home-page "http://www.gnu.org/software/hello/")
            (license gpl3+))

     Пользователи могут найти полезным включить подобный файл ‘guix.scm’
     в корень дерева своего проекта исходного кода, и он будет
     использоваться для тестирования разработки снепшотов и для создания
     воспроизводимого окружения разработки (*note Запуск guix
     environment::).

‘--remove=PACKAGE ...’
‘-r PACKAGE ...’
     Удалить обозначенный пакет.

     Касаемо ‘--install’, каждый пакет PACKAGE может задавать номер
     версии и имя содержимого в добавлении к имени пакета.  Например,
     ‘-r glibc:debug’ удалит содержимое ‘debug’ из ‘glibc’.

‘--upgrade[=REGEXP ...]’
‘-u [REGEXP ...]’
     Обновить все устанволенные пакеты.  Если задано одно или более
     значений REGEXP, обновление затронет только пакеты, которые
     соответствуют REGEXP.  Также смотрите опцию ‘--do-not-upgrade’
     ниже.

     Отметим, что это обновляет пакеты, которые установлены в системе,
     до последних версий, имеющихся в дистрибутиве.  Чтобы обновить
     дистрибутив, нужно регулярно запускать ‘guix pull’ (*note Запуск
     guix pull::).

‘--do-not-upgrade[=REGEXP ...]’
     При совместном использовании с опцией ‘--upgrade’ _не_ обновляет ни
     один пакет, чьё имя соответствует REGEXP.  Например, обновить все
     пакеты в текущем профиле , кроме тех, которые содержат подстроку
     "emacs":

          $ guix package --upgrade . --do-not-upgrade emacs

‘--manifest=FILE’
‘-m FILE’
     Создаёт новую версию профиля из объекта манифеста, возвращаемого
     кодом Scheme в FILE.  Этот параметр можно указывать несколько раз.
     В результате манифесты будут объединены в один.

     Это позволяет вам _описать_ содержимое профиля вместо того, чтобы
     собирать его последовательностью команд ‘--install’ и других.
     Преимущество в том, что FILE может подчиняться контролю версиями,
     копироваться на другие машины, чтобы повторить такой же профиль и
     т.д.

     FILE должен возвращать объект “manifest”, который, грубо говоря,
     является списком пакетов:

          (use-package-modules guile emacs)

          (packages->manifest
           (list emacs
                 guile-2.0
                 ;; Use a specific package output.
                 (list guile-2.0 "debug")))

     В этом примере мыдолжны знать, какие модули содержат определения
     переменных ‘emacs’ и ‘guile-2.0’, чтобы написать правильную строку
     ‘use-package-modules’, что может быть затруднительно.  Вместо этого
     мы можем обозначить обычные спецификации пакетов и сделать, чтобы
     ‘specifications->manifest’ искал соответствующие объекты пакетов
     так:

          (specifications->manifest
           '("emacs" "guile@2.2" "guile@2.2:debug"))

‘--roll-back’
     Откатиться до предыдущего “поколения” профиля, то есть отменить
     последнюю транзакцию.

     При сочетании с опциеями как ‘--install’, откат выполняется до всех
     прочих действий.

     При откате от первого поколения, которое по факту содержит
     установленные пакеты, профиль будет указывать на “нулевое
     поколение”, которое не содержит файлы, кроме собственных
     метаданных.

     После выполнения отката, установка, удаление или обновление пакетов
     по факту заменяет прежние будущие поколения.  То есть история
     поколений в профиле всегда линейная.

‘--switch-generation=PATTERN’
‘-S PATTERN’
     Переключиться на определённое поколение, опрделённое PATTERN.

     PATTERN может быть либо номером поколения или числом с префиксом
     "+" или "-".  Последнее означает сменить вперёд/назад на
     обозначенное число поколений.  Например, если вы хотите вернуться к
     последнему поколению после ‘--roll-back’, используйте
     ‘--switch-generation=+1’.

     Разница между ‘--roll-back’ и ‘--switch-generation=-1’ заключается
     в том, что ‘--switch-generation’ не создаёт нулевое поколение, так
     что если заданное поколение не существует, текущее поколение не
     будет изменено.

‘--search-paths[=KIND]’
     Вывести отчёт об определениях переменных окружения в синтаксисе
     Bash.  Это может понадобиться для использования набора
     установленных пакетов.  Эти переменные окружения используются
     некоторыми установленными пакетами для поиска файлов.

     Например, для GCC должны быть определены переменные окружения
     ‘CPATH’ и ‘LIBRARY_PATH’, чтобы он мог искать заголовки и
     библиотеки в профиле пользователя (*note (gcc)Environment
     Variables::).  Если GCC и, скажем, библиотека C установлены в
     профиле, тогда ‘--search-paths’ предложит установить эти переменные
     в ‘PROFILE/include’ и ‘PROFILE/lib’ соответственно.

     Обычный способ определить эти переменные окружения в оболочке:

          $ eval `guix package --search-paths`

     Вид KIND может быть либо точный адрес ‘exact’, либо префикс
     ‘prefix’, либо суффикс ‘suffix’, то есть возвращаемые переменные
     окружения могут быть либо точными, либо префиксами и суффиксами
     текущего значения этих переменных.  При пропуске вид KIND по
     умолчанию выбирается точный ‘exact’.

     Эта опция также может использоваться для вычисления
     _комбинированных_ путей поиска нескольких профилей.  Рассмотрим
     пример:

          $ guix package -p foo -i guile
          $ guix package -p bar -i guile-json
          $ guix package -p foo -p bar --search-paths

     Последняя команда выше составляет отчёт о переменной
     ‘GUILE_LOAD_PATH’, даже если по отдельности ни ‘foo’, ни ‘bar’ не
     предшествуют рекомендациям.

‘--profile=PROFILE’
‘-p PROFILE’
     Использовать PROFILE вместо пользовательского профиля по умолчанию.

     PROFILE must be the name of a file that will be created upon
     completion.  Concretely, PROFILE will be a mere symbolic link
     (“symlink”) pointing to the actual profile where packages are
     installed:

          $ guix install hello -p ~/code/my-profile
          ...
          $ ~/code/my-profile/bin/hello
          Hello, world!

     All it takes to get rid of the profile is to remove this symlink
     and its siblings that point to specific generations:

          $ rm ~/code/my-profile ~/code/my-profile-*-link

‘--list-profiles’
     List all the user’s profiles:

          $ guix package --list-profiles
          /home/charlie/.guix-profile
          /home/charlie/code/my-profile
          /home/charlie/code/devel-profile
          /home/charlie/tmp/test

     When running as root, list all the profiles of all the users.

‘--allow-collisions’
     Разрешить соперничающие пакеты в новом профиле.  Используйте на
     свой собственный страх и риск!

     По умолчанию ‘guix package’ делает отчёт о противоречиях
     “collisions” в профиле.  Противоречия происходят, когда дви или
     более разных версии или варианта данного пакета присутсвуют в
     профиле.

‘--bootstrap’
     Использовать бутстрап Guile для сборки профиля.  Эта опция полезна
     только разработчикам дистрибутива.

   В дополнение к этим действиям ‘guix package’ поддерживает следующие
опции при обращении к текущему состоянию профиля или для проверки
доступности пакетов:

‘--search=REGEXP’
‘-s REGEXP’
     Вывести список пакетов, чьи имена или описания содержат выражение
     REGEXP с учётом регистра, упорядоченные по соответствию.  Печать
     всех метаданных соответствующих пакетов в формате ‘recutils’ (*note
     GNU recutils databases: (recutils)Top.).

     Это позволяет извлекать заданые поля, используя команду ‘recsel’,
     например:

          $ guix package -s malloc | recsel -p name,version,relevance
          name: jemalloc
          version: 4.5.0
          relevance: 6

          name: glibc
          version: 2.25
          relevance: 1

          name: libgc
          version: 7.6.0
          relevance: 1

     Также для отображения имён всех доступных пакетов под лицензией
     GNU LGPL версии 3:

          $ guix package -s "" | recsel -p name -e 'license ~ "LGPL 3"'
          name: elfutils

          name: gmp
          ...

     Также можно уточнить поиск, используя несколько флагов ‘-s’ в
     команде ‘guix package’ или несколько аргументов в ‘guix search’.
     Например, следующая команда возвращает список настольных игр
     (используя синоним ‘guix search’ на этот раз):

          $ guix search '\<board\>' game | recsel -p name
          name: gnubg
          ...

     При пропуске ‘-s game’ мы получим пакеты программного обеспечения,
     которые работают с печатными платами (boards); удалив угловые
     скобки рядом с ‘board’, получим пакеты, которые также работают с
     клавиатурами (keyboards).

     А теперь более запутанный пример.  Следующая команда ищет
     библиотеки криптографии, фильтрует библиотеки Haskel, Perl, Python
     и Ruby и печатает имена и краткие описания найденных пакетов:

          $ guix search crypto library | \
              recsel -e '! (name ~ "^(ghc|perl|python|ruby)")' -p name,synopsis

     См.  *Note (recutils)Selection Expressions:: для подробной
     информации о регуларяных выражениях “selection expressions” для
     ‘recsel -e’.

‘--show=PACKAGE’
     Показать детали пакета PACKAGE из списка доступных пакетов в
     формате ‘recutils’ (*note GNU recutils databases: (recutils)Top.).

          $ guix package --show=python | recsel -p name,version
          name: python
          version: 2.7.6

          name: python
          version: 3.3.5

     You may also specify the full name of a package to only get details
     about a specific version of it (this time using the ‘guix show’
     alias):
          $ guix show python@3.4 | recsel -p name,version
          name: python
          version: 3.4.3

‘--list-installed[=REGEXP]’
‘-I [REGEXP]’
     Вывести текущий список установленных пакетов в заданном профиле,
     отобразив самый последний установленный пакет последним.  Если
     задано REGEXP, будут выведены только пакеты, чьи имена содержат
     REGEXP.

     Для каждого установленного пакета выводит следующие элементы,
     разделенные табуляцией (tab): имя пакета, строка версии, частью
     какого пакета является установленный пакет (например, ‘out’ вывода
     по умолчанию включает ‘include’ его заголовки т.д.), а также путь
     этого пакета на складе.

‘--list-available[=REGEXP]’
‘-A [REGEXP]’
     List packages currently available in the distribution for this
     system (*note Дистрибутив GNU::).  When REGEXP is specified, list
     only available packages whose name matches REGEXP.

     Для каждого пакета выводит следующие элементы, разделённые
     табуляцией: его имя, строка версии, часть пакета (*note Пакеты со
     множественным выходом::), а также расположение его определения в
     исходниках.

‘--list-generations[=PATTERN]’
‘-l [PATTERN]’
     Вывести список поколений (generations) с датами их создания; для
     каждого поколения отобразить установленные пакеты, самый последний
     установленный пакет отобразать последним.  Отметим, что нулевое
     поколение никогда не показывается.

     Для каждого установленного пакета отображает следующие элементы,
     разделённые табуляцией: имя пакета, строка версии, частью какого
     пакета является установленный пакет (*note Пакеты со множественным
     выходом::), а также расположение пакета на складе.

     Если используется PATTERN, команда выводит только соответствующие
     поколения.  Правильные паттерны содержат:

        • _Числа и числа, разделённые запятыми_.  Оба паттерна
          обозначают номера поколений.  Например, ‘--list-generations=1’
          возвращает первое.

          А ‘--list-generations=1,8,2’ даёт три поколения в заданном
          пордке.  Не опускаются ни пробелы, ни запятые на конце.

        • _Диапазоны_.  ‘--list-generations=2..9’ выводит заданные
          поколения и все между ними.  Отметим, что начало диапазона
          должно быть меньше его конца.

          Также можно пропустить конечную точку.  Например,
          ‘--list-generations=2..’ возвращает все поколения, начиная со
          второго.

        • _Сроки_.  Также можно задать последние _N_ дней, недель или
          месяцев, указав число и первую букву срока (d,w,m).  Например,
          ‘--list-generations=20d’ отобразит список поколений старше 20
          дней.

‘--delete-generations[=PATTERN]’
‘-d [PATTERN]’
     Если PATTERN пропущен, удалит все поголения, кроме текущего.

     Эта команда принимает такие же паттерны, как ‘--list-generations’.
     Если PATTERN задан, удалит соответствующие поколения.  Если паттерн
     PATTERN задаёт срок, выбираются поколения _старше_ срока.
     Например, ‘--delete-generations=1m’ удалит поколения, которые
     старше одного месяца.

     Если текущее поколение попадает под условия паттерна, оно не будет
     удалено.  А также нулевое поокление никогда не удаляется.

     Отметим, что удаление поколений делает невозможным откат к ним.
     Следовательно эта команда должна использоваться внимательно.

   Наконец, так как ‘guix package’ может запускать процессы сборки, она
поддерживает все привычные опции сборки (*note Стандартные параметры
сборки::).  Она также поддерживает опции трансформации пакетов, как
‘--with-source’ (*note Параметры преобразования пакета::).  Однако,
отметим, что трансформации пакетов теряются после обновлений; чтобы
сохранить трансформации при обновлениях, нужно определить собственный
вариант пакета в модуле Guile и добавить его в ‘GUIX_PACKAGE_PATH’
(*note Описание пакетов::).


File: guix.ru.info,  Node: Подстановки,  Next: Пакеты со множественным выходом,  Prev: Вызов guix package,  Up: Управление пакетами

4.3 Подстановки
===============

Guix поддерживает прозрачную развёртку исходников/бинарников, это
означает возможность сборки пакетов локально или скачивания собранных
элементов с сервера, или и то и другое.  Мы называем собранные элементы
“подстановками” (substitutes) — это подстановки результатов локальных
сборок.  Часто скасивание подстановки намного быстрее, чем сборка
пакетов локально.

   В качестве подстановок может выступать какой угодно результат сборки
деривации (*note Деривации::).  Конечно, обычно это собранные пакеты, но
также архивы исходников, например, представляя собой результаты сборок
дериваций, могут быть доступны в качестве подстановок.

* Menu:

* Официальный сервер подстановок::  Отдельный
                                                                  источник
                                                                  подстановок.
* Авторизация сервера подстановок::  Как
                                                                    включить
                                                                    или
                                                                    отключить
                                                                    подстановки.
* Аутентификация подстановок::  Как Guix
                                                           проверяет
                                                           подстановки.
* Настройки proxy::  Как получить подстановки
                                через proxy.
* Ошибки при подстановке::  Что происходит,
                                                  когда
                                                  подстановка
                                                  завершается
                                                  ошибкой.
* Касательно проверенных бинарников::  Как
                                                                        можно
                                                                        доверять
                                                                        определённому
                                                                        бинарному
                                                                        блоку?


File: guix.ru.info,  Node: Официальный сервер подстановок,  Next: Авторизация сервера подстановок,  Up: Подстановки

4.3.1 Официальный сервер подстановок
------------------------------------

Сервер ‘ci.guix.gnu.org’ представляет собой интерфейс официальной фермы
сборки, которая последовательно собирает пакеты Guix для некоторых
архитектур и делает их доступными в качестве подстановок.  Это источник
подстановок по умолчанию; он может быть изменён при указании опции
‘--substitute-urls’ как для ‘guix-daemon’ (*note ‘guix-daemon
--substitute-urls’: daemon-substitute-urls.) так и для клиентских
инструментов, как ‘guix package’ (*note client ‘--substitute-urls’
option: client-substitute-urls.).

   URL подстановок могут быть либо HTTP, либо HTTPS. Рекомендуется
HTTPS, так как такая связь шифруется; и наоборот, использование HTTP
делает связь видимой для подслушивающих, и они могут использовать
собранную информацию, чтобы определить, например, что ваша система не
имеет патчей, покрывающих уязвимости безопасности.

   Подстановки из официальной фермы сборки доступны по умолчанию при
использовании системы Guix (*note Дистрибутив GNU::).  Однако они
отключены по умолчанию при использовании Guix на чужом дистрибутиве,
если конечно вы явно не включили их на одном из рекомендуемых шагов
установки (*note Установка::).  Ниже объясняется, как включить или
отключить подстановки с официальной фермы сборки; такая же процедура
может также использоваться для включения подстановок с любого другого
сервера подстановок.


File: guix.ru.info,  Node: Авторизация сервера подстановок,  Next: Аутентификация подстановок,  Prev: Официальный сервер подстановок,  Up: Подстановки

4.3.2 Авторизация сервера подстановок
-------------------------------------

Чтобы разрешить Guix скачивать подстановки из ‘ci.guix.gnu.org’ или
зеркала, вы должны добавить его публичный ключ в список контроля доступа
(ACL) импорта архивов, используя команду ‘guix archive’ (*note Вызов
guix archive::).  Это действие означает, что вы доверяете
‘ci.guix.gnu.org’, что он не скомпрометирован и может давать подлинные
подстановки.

   Публичный ключ для ‘ci.guix.gnu.org’ устанавливается вместе с Guix в
‘PREFIX/share/guix/ci.guix.gnu.org.pub’, где PREFIX — префикс установки
Guix.  Если вы установили Guix из исходников, проверьте подпись GPG
‘guix-1.1.0.tar.gz’, где содержится файл публичного ключа.  Затем можно
выполнить примерно следующее:

     # guix archive --authorize < PREFIX/share/guix/ci.guix.gnu.org.pub

   Когда это сделано, вывод команды ‘guix build’ должен измениться с
примерно такого:

     $ guix build emacs --dry-run
     The following derivations would be built:
        /gnu/store/yr7bnx8xwcayd6j95r2clmkdl1qh688w-emacs-24.3.drv
        /gnu/store/x8qsh1hlhgjx6cwsjyvybnfv2i37z23w-dbus-1.6.4.tar.gz.drv
        /gnu/store/1ixwp12fl950d15h2cj11c73733jay0z-alsa-lib-1.0.27.1.tar.bz2.drv
        /gnu/store/nlma1pw0p603fpfiqy7kn4zm105r5dmw-util-linux-2.21.drv
     ...

на примерно следующий:

     $ guix build emacs --dry-run
     112.3 MB would be downloaded:
        /gnu/store/pk3n22lbq6ydamyymqkkz7i69wiwjiwi-emacs-24.3
        /gnu/store/2ygn4ncnhrpr61rssa6z0d9x22si0va3-libjpeg-8d
        /gnu/store/71yz6lgx4dazma9dwn2mcjxaah9w77jq-cairo-1.12.16
        /gnu/store/7zdhgp0n1518lvfn8mb96sxqfmvqrl7v-libxrender-0.9.7
     ...

The text changed from “The following derivations would be built” to
“112.3 MB would be downloaded”.  This indicates that substitutes from
‘ci.guix.gnu.org’ are usable and will be downloaded, when possible, for
future builds.

   Механизм подстановок может быть отключен глобально путём запуска
‘guix-daemon’ с ‘--no-substitutes’ (*note Вызов guix-daemon::).  Также
он может отключиться временно путём указания опции ‘--no-substitutes’ в
‘guix package’, ‘guix build’ и других инструментах командной строки.


File: guix.ru.info,  Node: Аутентификация подстановок,  Next: Настройки proxy,  Prev: Авторизация сервера подстановок,  Up: Подстановки

4.3.3 Аутентификация подстановок
--------------------------------

Guix определяет и вызывает ошибку, если происходит попытка использовать
поддельную подстановку.  А также он игнорирует подстановки, которые не
подписаны, или те, которые не подписаны ни одним ключом из списка ACL.

   Но всё же есть одно исключение: если не авторизованный сервер
предоставляет подстановки, которые являются _идентичными бит-к-биту_ с
теми, которые предоставляет авторизованный сервер, тогда
неавторизованный сервер становится приемлемым для скачивания.  Например,
положим, мы выбрали два сервера подстановок такой опцией:

     --substitute-urls="https://a.example.org https://b.example.org"

Если ACL содержит только ключ для ‘b.example.org’, и если вдруг
‘a.example.org’ предоставляет _идентичные_ подстановки, тогда Guix будет
скачивать подстановки из ‘a.example.org’, потому что он идёт первым в
списке и может рассматриваться как зеркало ‘b.example.org’.  На практике
независимые машины сборки обычно производят одинаковые бинарники
благодаря воспроизводимым сборкам (смотрите ниже).

   При использовании HTTPS, сертификат X.509 сервера _не_ проверяется
(другими словами, сервер не проходит аутентификацию), супротив тому, что
HTTPS-клиенты, как веб-браузеры, обычно делают это.  Это потому, что
Guix аутентифицирует саму информацию подстановки, как это описано выше,
что собственно и представляет для нас интерес (в то время, как
сертификаты X.509 относятся к аутентификации связок между доменными
именами и публичными ключами).


File: guix.ru.info,  Node: Настройки proxy,  Next: Ошибки при подстановке,  Prev: Аутентификация подстановок,  Up: Подстановки

4.3.4 Настройки proxy
---------------------

Подстановки скачиваются через HTTP или HTTPS. Можно установить
переменную окружения ‘http_proxy’ в окружении ‘guix-daemon’, чтобы она
учитывалась при скачивании.  Отметим, что значение ‘http_proxy’ в
окружении, в котором запускаются ‘guix build’, ‘guix package’ и другие
клиентские команды _совершенно не даёт эффекта_.


File: guix.ru.info,  Node: Ошибки при подстановке,  Next: Касательно проверенных бинарников,  Prev: Настройки proxy,  Up: Подстановки

4.3.5 Ошибки при подстановке
----------------------------

Даже когда подстановка для деривации доступна, иногда попытка
подстановки завершается неудачно.  Это может происходить по разным
причинам: сервер подстановок может быть отключен, подстановка могла быть
недавно удалена, связь может прерываться и т.д.

   Когда подстановки включены, и подстановка для деривации доступна, но
попытка подстановки завершается с ошибкой, Guix будет пытаться собрать
деривацию локально в зависимости от того, задана или нет опция
‘--fallback’ (*note common build option ‘--fallback’: fallback-option.).
То есть, если ‘--fallback’ пропущена, тогда локальная сборка не будет
выполняться, а деривация будет рассматриваться как неудачная.  Однако,
если ‘--fallback’ задана, тогда Guix попытается собрать деривацию
локально, и успех или неудача деривации будет зависеть от успешной или
неудачной процедуры локальной сборки.  Отметим, что когда подстановки
отключены или нет доступных подстановок для деривации, локальная сборка
_всегда_ будет исполняться, вне зависимости от установки опции
‘--fallback’.

   Чтобы узнать,.  сколько подстановок доступны в данный момент, можно
попробовать запустить команду ‘guix weather’ (*note Запуск guix
weather::).  Эта команда предоставляет статистику подстановок,
предоставляемых сервером.


File: guix.ru.info,  Node: Касательно проверенных бинарников,  Prev: Ошибки при подстановке,  Up: Подстановки

4.3.6 Касательно проверенных бинарников
---------------------------------------

Сегодня индивидуальный контроль над работой за компьютером находится в
заложниках у корпораций, организаций и групп, которые имеют достаточно
силы и решимости разрушить инфраструктуру компьютерных сетей и внедрить
уязвимости.  Использование подстановок ‘ci.guix.gnu.org’ может быть
удобным, мы также стимулируем пользователей собирать их у себя или даже
устанавливать собственные фермы сборки, чтобы уменьшить зависимость от
‘ci.guix.gnu.org’.  Одним из способов помочь является публикация
программного обеспечения, которое вы собираете, используя ‘guix
publish’, тогда другие получат дополнительный сервер на выбор, чтобы
скачивать подстановки (*note Запуск guix publish::).

   Guix определяет цель максимизировать воспроизводимость сборок (*note
Особенности::).  В большинстве случаев независимые сборки заданного
пакета или деривации должны давать результаты, идентичные до бита.  То
есть, благодаря ряду независимых сборок пакета мы можем улучшить чистоту
наших систем.  Команда ‘guix challenge’ должна помочь пользователям
оценить серверы подстановок, а разработчикам - помочь выявить
недетерминистические сборки пакетов (*note Запуск guix challenge::).
Подобным образом опция ‘--check’ команды ‘guix build’ даёт возможность
пользователям проверить, яляются ли установленные ранее подстановки
подлинными, выполнив их локальную сборку (*note ‘guix build --check’:
build-check.).

   Мы хотим, чтобы Guix в будущем поддерживал публикации и запросы
бинарников от/для пользователей в формате равноправного обмена
(peer-to-peer).  Если вы желаете обсудить этот проект, присоединяйтесь к
нам <guix-devel@gnu.org>.


File: guix.ru.info,  Node: Пакеты со множественным выходом,  Next: Вызов guix gc,  Prev: Подстановки,  Up: Управление пакетами

4.4 Пакеты со множественным выходом
===================================

Часто пакеты, определённые в Guix, имеют один “выход”, это значит, что
исходный пакет даёт только одну директорию на складе.  При запуске ‘guix
package -i glibc’ это устанавливает результат по умолчанию; результат по
умолчанию называется ‘выходом’, но его имя может пропускаться, как
показано в этой команде.  В этом частном случае результат по умолчанию
для ‘glibc’ содержит все файлы заголовков C, разделяемые библиотеки,
статические библиотеки, документацию Info и другие поставляемые файлы.

   Часто более приемлемым будет разделить различные типы файлов,
поставляемых одним исходным пакетом, на отдельные выходы (результаты).
Например, библиотека GLib C, используемая GTK+ и связанными с ним
пакетами, устанавливает более 20Мб связанной документации в виде страниц
HTML. Чтобы экономить место, пользователи, которым это не нужно,
документацию можно выделить в отдельный выход, называемый ‘doc’.  Чтобы
установить основной выход GLib, который содерит всё, кроме документации,
можно запустить:

     guix install glib

   Команда для установки её документации:

     guix install glib:doc

   Some packages install programs with different “dependency
footprints”.  For instance, the WordNet package installs both
command-line tools and graphical user interfaces (GUIs).  The former
depend solely on the C library, whereas the latter depend on Tcl/Tk and
the underlying X libraries.  In this case, we leave the command-line
tools in the default output, whereas the GUIs are in a separate output.
This allows users who do not need the GUIs to save space.  The ‘guix
size’ command can help find out about such situations (*note Запуск guix
size::).  ‘guix graph’ can also be helpful (*note Запуск guix graph::).

   Есть несколько таких пакетов со множественным выходом в дистрибутиве
GNU. Другие традиционные имена выходов включают ‘lib’ - для библиотек и
иногда файлов заголовков, ‘bin’ - для самих программ, ‘debug’ - для
отладочной информации (*note Установка файлов отладки::).  Выходы
пакетов представлены в третьей колонке вывода ‘guix package
--list-available’ (*note Вызов guix package::).


File: guix.ru.info,  Node: Вызов guix gc,  Next: Запуск guix pull,  Prev: Пакеты со множественным выходом,  Up: Управление пакетами

4.5 Вызов ‘guix gc’
===================

Пакеты, которые установлены, но не используются, могут быть очищены как
мусор (“garbage-collected”).  Команда ‘guix gc’ позволяет пользователям
непосредственно запустить сборщик мусора и восстановить место в
директории ‘/gnu/store’.  Это _единственный_ способ удалить файлы из
‘/gnu/store’ — удаление файлов вручную может поломать её безвозвратно!

   Сборщик мусора имеет набор известных корней (“roots”): любой файл в
‘/gnu/store’, доступный из корня, рассматривается как живой (“live”) и
не может быть удалён; любой другой файл рассматривается как мёртвый
(“dead”) и может быть удалён.  Набор корней сборщика мусора (сокращённо
"GC roots") содержит профили пользователей по умолчанию; по умолчанию
символические ссылки в ‘/var/guix/gcroots’ представляют эти корни
сборщика мусора.  Новые корни могут добавляться, например, командой
‘guix build --root’ (*note Запуск guix build::).  Команда ‘guix gc
--list-roots’ отображает их.

   Перед запуском ‘guix gc --collect-garbage’ для освобождения места
часто бывает полезно удалить старые поколения из пользовательских
профилей; так старые пакеты, относящиеся к этим поколениям, будут
удалены.  Это можно сделать, запустив ‘guix package
--delete-generations’ (*note Вызов guix package::).

   Мы рекомендуем запускать сборщик мусора периодически, или когда вы
хотите освободить место на диске.  Например, чтобы гарантировать, что по
меньшей мере 5 Гб будет доступно на вашем диске, просто запустите:

     guix gc -F 5G

   Хорошо бы запускать это как неинтерактивную периодическую задачу
(*note Запланированное исполнения задач::, чтобы узнать, как добавить
такую задачу).  Запуск ‘guix gc’ без аргументов соберёт столько мусора,
сколько возможно, но это часто не удобно: можно обнаружить, что придётся
заново собирать или скачивать программы, "убитые" сборщиком мусора, хотя
они необходимы для сборки другого софта, например, это касается
инструментов компилятора.

   Команда ‘guix gc’ предоставляет три способа взаимодействия: может
использоваться для сборки мусора (garbage-collect) любых мёртвых файлов
(по умолчанию), для удаления конкретных файлов (опция ‘--delete’), для
вывода информации сборщика мусора, а также для более изощрённых
запросов.  Опции сборщика мусора:

‘--collect-garbage[=MIN]’
‘-C [MIN]’
     Собрать мусор, то есть недоступные файлы в ‘/gnu/store’ и
     поддиректориях.  Это операция по умолчанию, если не заданы опции.

     Если задана MIN, остановиться, когда MIN байт собрано.  MIN может
     быть числом байт или может содержать единицу измерения в суффиксе,
     как например, ‘MiB’ для мебибайт и ‘GB’ гигабайт (*note size
     specifications: (coreutils)Block size.).

     Если MIN пропущено, собрать весь мусор.

‘--free-space=FREE’
‘-F FREE’
     Собирать мусор, пока не станет доступно FREE места в ‘/gnu/store’,
     если возможно; FREE описывает дисковое пространство, как ‘500MiB’,
     как это описанов выше.

     Когда FREE или более места стало свободно в ‘/gnu/store’, ничего не
     делать и немедленно выйти.

‘--delete-generations[=DURATION]’
‘-d [DURATION]’
     Перед запуском сборщика мусора удалить все поколения, старше
     DURATION, для всех пользовательских профилей; если запускать от
     root, это применяется для всех профилей _всех пользователей_.

     Например, следующая команда удаляет все поколения всех ваших
     профилей, которые старше 2 месцев (кроме текущего поколения), а
     затем запускается процесс освобождения мместа, пока по меньшей мере
     10 GiB не станет доступно:

          guix gc -d 2m -F 10G

‘--delete’
‘-D’
     Попытаться удалить все файлы и директории склада, приведённые в
     аргументах.  Это завершается с ошибкой, если какие-либо файлы не
     присутствуют на складе, или если они ещё живы (live).

‘--list-failures’
     Вывести список элементов склада, которые относятся к кешированным
     неудачным сборкам.

     Это ничего не выводит, если демон не был запущен с опцией
     ‘--cache-failures’ (*note ‘--cache-failures’: Вызов guix-daemon.).

‘--list-roots’
     Вывести список корней сборщика мусора (GC roots), которыми владеет
     пользователь; при запуске от root, выводит список _всех_ корней
     сборщика мусора.

‘--list-busy’
     List store items in use by currently running processes.  These
     store items are effectively considered GC roots: they cannot be
     deleted.

‘--clear-failures’
     Удалить заданные элементы склада из кеша неудачных сборок.

     Опять же эта опция имеет смысл, если демон запущен с
     ‘--cache-failures’.  В противном случае это не имеет эффекта.

‘--list-dead’
     Вывести список мёртвых файлов и директорий, которые по-прежнему
     присутствуют на складе, то есть файлы и директории, не доступные
     более из любого корня.

‘--list-live’
     Вывести список живых файлов и директорий склада.

   В дополнение можно запросить связи между существующими файлами на
складе:

‘--references’
‘--referrers’
     Вывести список связанных (обязательно, ссылающихся) файлов на
     складе с указанными аргументами.

‘--requisites’
‘-R’
     Вывести всё необходимое для файлов на складе, указанных в
     аргументах.  Всё необходимое включает сами файлы на складе, их
     связи и связи их связей рекурсивно.  Другими словами, выводимый
     список — это “непосредственный конвейер” файлов на складе.

     См.  *Note Запуск guix size:: для информации об инструменте
     профилирования конвейера для элемента.  См.  *Note Запуск guix
     graph:: для информации об инструменте визуализации графа связей.

‘--derivers’
     Вернуть деривацию(-ии), производящие данные элементы склада (*note
     Деривации::).

     Например, эта команда:

          guix gc --derivers `guix package -I ^emacs$ | cut -f4`

     возвращает файл(ы) ‘.drv’, которые произвели пакет ‘emacs’,
     установленный в вашем профиле.

     Отметим, что может быть не найдено ни одного файла ‘.drv’,
     например, потому что эти файлы были удалены сборщиком мусора.
     Также может быть более одного файла ‘.drv’ из-за дериваций с
     фиксированным выходом.

   Наконец, следующие опции позволяют проверить целостность склада и
контролировать использование диска.

‘--verify[=OPTIONS]’
     Проверить целостность склада.

     По умолчанию убедиться, что все элементы склада, которые в базе
     данных демона помечены как действующие, на самом деле присутствуют
     в ‘/gnu/store’.

     Опции OPTIONS, если они указаны, должны представлять собой список,
     разделённый запятыми, содержащий одно или более значений ‘contents’
     и ‘repair’.

     Если задано ‘--verify=contents’, демон вычисляет хеш содержимого
     каждого элемента склада и сравнивает с его хешем в базе данных.
     Несовпадения хеша отображаются в отчёте как повреждение данных.
     Так как она проходит _все файлы склада_, эта команда может занять
     много времени, особенно в системах с медленным диском.

     Использование ‘--verify=repair’ или ‘--verify=contents,repair’
     указывает демону предпринять попытку восстановить разрушенные
     элементы склада, выбирая подстановки для них (*note Подстановки::).
     Так как восстановление не атомарное, и поэтому потенциально опасно,
     оно доступно только системному администратору.  Малозатратная
     альтернатива в случае, если вы знаете точно, какие элементы склада
     испорчены, — это ‘guix build --repair’ (*note Запуск guix build::).

‘--optimize’
     Оптимизировать склад с помощью жёстких ссылок на идентичные файлы —
     это “дедупликация”.

     Демон выполняет дедупликацию после каждой успешной сборки или
     импорта архива, если конечно оно не было запущено с
     ‘--disable-deduplication’ (*note ‘--disable-deduplication’: Вызов
     guix-daemon.).  Так что эта опция особенно важна, если демон
     запущено с ‘--disable-deduplication’.


File: guix.ru.info,  Node: Запуск guix pull,  Next: Каналы,  Prev: Вызов guix gc,  Up: Управление пакетами

4.6 Вызов ‘guix pull’
=====================

Пакеты, которые были установлены или обновлены до последней версии,
доступные в дистрибутиве, доступны и на вашей локальной машине.  Для
обновления этого дистрибутива инструментами Guix нужно запустить ‘guix
pull’: команда скачивает последние исходные коды Guix, описания пакетов
и разворачивает их.  Исходный код скачивается из репозитория Git
(https://git-scm.com), репозитория GNU Guix по умолчанию, хотя это можно
поменять.

   Specifically, ‘guix pull’ downloads code from the “channels” (*note
Каналы::) specified by one of the followings, in this order:

  1. the ‘--channels’ option;
  2. the user’s ‘~/.config/guix/channels.scm’ file;
  3. the system-wide ‘/etc/guix/channels.scm’ file;
  4. the built-in default channels specified in the ‘%default-channels’
     variable.

   После выполнения этой команды ‘guix package’ будет использовать
пакеты и те их версии, которые имеются в только что полученной копии
Guix.  Эта последняя версия будет источником также всех команд Guix,
модулей Scheme.  Из этого обновления станет доступен набор команд
‘guix’.

   Any user can update their Guix copy using ‘guix pull’, and the effect
is limited to the user who ran ‘guix pull’.  For instance, when user
‘root’ runs ‘guix pull’, this has no effect on the version of Guix that
user ‘alice’ sees, and vice versa.

   Результат запуска ‘guix pull’ — это профиль “profile”, доступный в
‘~/.config/guix/current’, содержащий последний Guix.  Так что
обязательно добавьте этот адрес первым в пути поиска, чтобы использовать
последнюю версию, а также для руководства Info (*note Документация::):

     export PATH="$HOME/.config/guix/current/bin:$PATH"
     export INFOPATH="$HOME/.config/guix/current/share/info:$INFOPATH"

   Опция ‘--list-generations’ или ‘-l’ выводит список последних
поколений, поставленных ‘guix pull’, вместе с деталями об их
происхождении:

     $ guix pull -l
     Generation 1	Jun 10 2018 00:18:18
       guix 65956ad
         repository URL: https://git.savannah.gnu.org/git/guix.git
         branch: origin/master
         commit: 65956ad3526ba09e1f7a40722c96c6ef7c0936fe

     Generation 2	Jun 11 2018 11:02:49
       guix e0cc7f6
         repository URL: https://git.savannah.gnu.org/git/guix.git
         branch: origin/master
         commit: e0cc7f669bec22c37481dd03a7941c7d11a64f1d
       2 new packages: keepalived, libnfnetlink
       6 packages upgraded: emacs-nix-mode@2.0.4,
         guile2.0-guix@0.14.0-12.77a1aac, guix@0.14.0-12.77a1aac,
         heimdal@7.5.0, milkytracker@1.02.00, nix@2.0.4

     Generation 3	Jun 13 2018 23:31:07	(current)
       guix 844cc1c
         repository URL: https://git.savannah.gnu.org/git/guix.git
         branch: origin/master
         commit: 844cc1c8f394f03b404c5bb3aee086922373490c
       28 new packages: emacs-helm-ls-git, emacs-helm-mu, ...
       69 packages upgraded: borg@1.1.6, cheese@3.28.0, ...

   Смотрите *Note ‘guix describe’: Вызов guix describe. для информации о
других способах получить информацию о текущем статусе Guix.

   This ‘~/.config/guix/current’ profile works exactly like the profiles
created by ‘guix package’ (*note Вызов guix package::).  That is, you
can list generations, roll back to the previous generation—i.e., the
previous Guix—and so on:

     $ guix pull --roll-back
     switched from generation 3 to 2
     $ guix pull --delete-generations=1
     deleting /var/guix/profiles/per-user/charlie/current-guix-1-link

   You can also use ‘guix package’ (*note Вызов guix package::) to
manage the profile by naming it explicitly:
     $ guix package -p ~/.config/guix/current --roll-back
     switched from generation 3 to 2
     $ guix package -p ~/.config/guix/current --delete-generations=1
     deleting /var/guix/profiles/per-user/charlie/current-guix-1-link

   Команда ‘guix pull’ обычно вызывается без аргументов, но поддерживает
следующие опции:

‘--url=URL’
‘--commit=COMMIT’
‘--branch=BRANCH’
     Скачать код канала ‘guix’ из указанного URL, относящийся к
     обозначенному коммиту COMMIT (корректный ID коммита Git,
     представленный в виде шестнадцатеричной строки), или ветке BRANCH.

     Эти опции внедрены для удобства, но также можно задать
     конфигурационный файл ‘~/.config/guix/channels.scm’ или
     использовать опцию ‘--channels’ (смотрите ниже).

‘--channels=FILE’
‘-C FILE’
     Read the list of channels from FILE instead of
     ‘~/.config/guix/channels.scm’ or ‘/etc/guix/channels.scm’.  FILE
     must contain Scheme code that evaluates to a list of channel
     objects.  *Note Каналы::, for more information.

‘--news’
‘-N’
     Display the list of packages added or upgraded since the previous
     generation, as well as, occasionally, news written by channel
     authors for their users (*note Writing Channel News: Каналы.).

     The package information is the same as displayed upon ‘guix pull’
     completion, but without ellipses; it is also similar to the output
     of ‘guix pull -l’ for the last generation (see below).

‘--list-generations[=PATTERN]’
‘-l [PATTERN]’
     Вывести список всех поколений ‘~/.config/guix/current’ или, если
     предоставлен паттерн PATTERN, подмножество поколений, которые
     соответствуют PATTERN.  Синтаксис PATTERN — такой же, как у ‘guix
     package --list-generations’ (*note Вызов guix package::).

‘--roll-back’
     Roll back to the previous “generation” of
     ‘~/.config/guix/current’—i.e., undo the last transaction.

‘--switch-generation=PATTERN’
‘-S PATTERN’
     Переключиться на определённое поколение, опрделённое PATTERN.

     PATTERN может быть либо номером поколения или числом с префиксом
     "+" или "-".  Последнее означает сменить вперёд/назад на
     обозначенное число поколений.  Например, если вы хотите вернуться к
     последнему поколению после ‘--roll-back’, используйте
     ‘--switch-generation=+1’.

‘--delete-generations[=PATTERN]’
‘-d [PATTERN]’
     Если PATTERN пропущен, удалит все поголения, кроме текущего.

     Эта команда принимает такие же паттерны, как ‘--list-generations’.
     Если PATTERN задан, удалит соответствующие поколения.  Если паттерн
     PATTERN задаёт срок, выбираются поколения _старше_ срока.
     Например, ‘--delete-generations=1m’ удалит поколения, которые
     старше одного месяца.

     If the current generation matches, it is _not_ deleted.

     Отметим, что удаление поколений делает невозможным откат к ним.
     Следовательно эта команда должна использоваться внимательно.

     См.  *Note Вызов guix describe::, чтобы узнать, как вывести
     информацию только о текущем поколении.

‘--profile=PROFILE’
‘-p PROFILE’
     Использовать профиль PROFILE вместо ‘~/.config/guix/current’.

‘--dry-run’
‘-n’
     Показать, какие коммиты будут использоваться, и что будет собрано
     или скачано в виде подстановок, но не выполнять эту работу.

‘--system=SYSTEM’
‘-s SYSTEM’
     Предпринять попытку собрать систему SYSTEM, т.е.  ‘i686-linux’,
     вместо типа системы хоста сборки.

‘--verbose’
     Производить вывод логов, отображая логи сборки в стандартный вывод
     ошибок.

‘--bootstrap’
     Использовать бутстрап Guile для сорки последнего Guix.  Эта опция
     полезна только для разработчиков.

   Механизм каналов “channel” позволяет указать ‘guix pull’, из какого
репозитория или ветки скачивать, а также какие _дополнительные_
репозитории должны использоваться для развёртки.  См.  *Note Каналы::
для подробной информации.

   В добавок ‘guix pull’ поддерживает все стандартные опции сборки
(*note Стандартные параметры сборки::).


File: guix.ru.info,  Node: Каналы,  Next: Invoking guix time-machine,  Prev: Запуск guix pull,  Up: Управление пакетами

4.7 Каналы
==========

Guix и его коллекция пакетов можно обновить запуском ‘guix pull’ (*note
Запуск guix pull::).  По умолчанию ‘guix pull’ скачивает и разворачивает
Guix из официального репозитория GNU Guix.  Это может быть изменено
определением каналов “channels” в файле ‘~/.config/guix/channels.scm’.
Канал обозначает URL или ветку репозитория Git для разворачивания.
Также ‘guix pull’ может быть настроена для скачивания из одного или
более каналов.  Другими словами, каналы могут использоваться для
_настройки_ и для _расширения_ Guix, как это будет показано ниже.

4.7.1 Использование отдельного канала Guix
------------------------------------------

Канал, названный ‘guix’, обозначает, откуда должен скачиваться сам Guix
(его инструменты командной строки и коллекция пакетов).  Например,
предположим вы хотите обновиться из вашей собственной копии репозитория
Guix на ‘example.org’, а именно из ветки ‘super-hacks’, тогда можно
написать в ‘~/.config/guix/channels.scm’ следующую спецификацию:

     ;; Tell 'guix pull' to use my own repo.
     (list (channel
             (name 'guix)
             (url "https://example.org/my-guix.git")
             (branch "super-hacks")))

При такой настройке ‘guix pull’ будет скачивать код из ветки
‘super-hacks’ репозитория в ‘example.org’.

4.7.2 Указание дополнительных каналов
-------------------------------------

Можно также задать _дополнительные каналы_ для выборки оттуда.  Ну,
например, у вас ряд собственных вариантов пакетов или собственные
пакеты, которые вы считаете не особо важным для отправки в проект Guix,
но хотите, чтобы эти пакеты были доступны вам в командной строке
прозрачно, без дополнительных действий.  Вначале можно написать модули,
содержащие определения этих пакетов (*note Пакетные модули::), затем
разместить их в репозитории Git, и тогда вы или кто-либо ещё сможете
использовать их в качестве дополнтельного канала для получения пакетов.
Красиво, да?

     Внимание: Прежде чем вы крикнете _Ух-ты, это круто!_  и опубликуете
     собственный канал, необходимо учесть некоторые предостережения:

        • Перед публикацией канала, пожалуйста, рассмотрите возможность
          поделиться вашими определениями пакетов со сборником Guix
          (*note Содействие::).  Guix, как проект, открыт свободному
          программному обеспечению любого назначения, и пакеты в
          сборнике Guix готовы и доступны для использования всеми
          пользователями Guix и прошли проверку качества.

        • Когда вы выгружаете определение пакета вне Guix, мы,
          разработчики Guix, полагаем, что вопрос _совместимости ложится
          на вас_.  Учтите, что пакетные модули и определения пакетов —
          это код Scheme, который используют различные программные
          интерфейсы (API). Мы хотим оставить возможность для себя
          изменять эти API, чтобы продолжить улучшать Guix.  И это может
          привести к поломке вашего канала.  Мы никогда не меняем API
          необоснованно, но всё же мы _не_ будем обновлять устаревшие,
          замороженные API.

        • Вывод: если вы используете внешний канал, и этот канал
          ломается, пожалуйста, _заявите об этой проблеме авторам
          каналв_, но не в проект Guix.

     Вы предупреждены!  Обозначив это, мы верим, что внешние каналы —
     это способ для вас проявлять свою свободу и вместе с тем расширять
     коллекцию пакетов Guix и делиться улучшениями, что является
     основными догматами свободного программного обеспечения
     (https://www.gnu.org/philosophy/free-sw.ru.html).  Пожалуйста,
     свяжитесь с нами по e-mail <guix-devel@gnu.org>, если вы хотите
     обсудить это.

   Чтобы использовать канал, напишите ‘~/.config/guix/channels.scm’,
чтобы обозначить ‘guix pull’ скачивать оттуда _в дополнение_ к
каналу(-ам) Guix по умолчанию:

     ;; Add my personal packages to those Guix provides.
     (cons (channel
             (name 'my-personal-packages)
             (url "https://example.org/personal-packages.git"))
           %default-channels)

Заметим, что сниппет выше (всегда!) код Scheme; мы используем ‘cons’ для
добавления канала в список каналов, то есть в переменную
‘%default-channels’ (*note ‘cons’ and lists: (guile)Pairs.).  Если этот
файл написан, ‘guix pull’ производит сборку не только Guix, но и
пакетных модулей из вашего репозитория.  В результате в
‘~/.config/guix/current’ содержится объединение Guix и ваших собственных
пакетных модулей:

     $ guix pull --list-generations
     ...
     Generation 19	Aug 27 2018 16:20:48
       guix d894ab8
         repository URL: https://git.savannah.gnu.org/git/guix.git
         branch: master
         commit: d894ab8e9bfabcefa6c49d9ba2e834dd5a73a300
       my-personal-packages dd3df5e
         repository URL: https://example.org/personal-packages.git
         branch: master
         commit: dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb
       11 new packages: my-gimp, my-emacs-with-cool-features, ...
       4 packages upgraded: emacs-racket-mode@0.0.2-2.1b78827, ...

Результат ‘guix pull’ выше показывает, что поколение Generation 19
включает как репозиторий Guix, так и пакеты из канала
‘my-personal-packages’.  Вместе с новыми и обновлёнными пакетами,
которые присутствуют в списке, что-нибудь типа ‘my-gimp’ и
‘my-emacs-with-cool-features’ может прийти из ‘my-personal-packages’,
когда остальные идут из канала Guix по умолчанию.

   Чтобы создать канал, создайте репозиторий Git, содержащий ваши
собственные пакетные модули, и сделайте его доступным.  Репозиторий
может содержать что-либо, но полезный канал будет содержать модули
Guile, экспортирующие пакеты.  Когда вы начали использовать канал, Guix
будет работать, как будто корневая директория репозитория Git этого
канала добавлена в путь загрузки Guile (*note (guile)Load Paths::).
Например, если ваш канал содержит файл ‘my-packages/my-tools.scm’,
который определяет модуль Guile, тогда модуль будет доступен под именем
‘(my-packages my-tools)’, и вы сможете использовать его, как любой
другой модуль (*note (guile)Модули::).

4.7.3 Объявление зависимостей канала
------------------------------------

Авторы канала могут решить расширить коллекцию пакетов пакетами, которые
поставляются другими каналами.  Они могут объявить, что их канал зависит
от других каналов, в файле метаданных ‘.guix-channel’, который нужно
разместить в корне репозитория канала.

   Файл метаданных должен содержать простое выражение S-expression как
это:

     (channel
      (version 0)
      (dependencies
       (channel
        (name some-collection)
        (url "https://example.org/first-collection.git"))
       (channel
        (name some-other-collection)
        (url "https://example.org/second-collection.git")
        (branch "testing"))))

   В примере выше объявлен канал, который зависит от двух других
каналов, из которых оба будут скачаны автоматически.  Модули,
предоставляемые каналом, будут скомпилированы в окружении, в котором
доступны модули всех этих каналов.

   В целях воспроизводимости и сопровождения вы должны избегать
зависимостей от каналов, которые вы не контролируете, и вы должны
стремиться минимизировать число зависимостей.

4.7.4 Package Modules in a Sub-directory
----------------------------------------

As a channel author, you may want to keep your channel modules in a
sub-directory.  If your modules are in the sub-directory ‘guix’, you
must add a meta-data file ‘.guix-channel’ that contains:

     (channel
       (version 0)
       (directory "guix"))

4.7.5 Writing Channel News
--------------------------

Channel authors may occasionally want to communicate to their users
information about important changes in the channel.  You’d send them all
an email, but that’s not convenient.

   Instead, channels can provide a “news file”; when the channel users
run ‘guix pull’, that news file is automatically read and ‘guix pull
--news’ can display the announcements that correspond to the new commits
that have been pulled, if any.

   To do that, channel authors must first declare the name of the news
file in their ‘.guix-channel’ file:

     (channel
       (version 0)
       (news-file "etc/news.txt"))

   The news file itself, ‘etc/news.txt’ in this example, must look
something like this:

     (channel-news
       (version 0)
       (entry (tag "the-bug-fix")
              (title (en "Fixed terrible bug")
                     (fr "Oh la la"))
              (body (en "@emph{Good news}!  It's fixed!")
                    (eo "Certe ĝi pli bone funkcias nun!")))
       (entry (commit "bdcabe815cd28144a2d2b4bc3c5057b051fa9906")
              (title (en "Added a great package")
                     (ca "Què vol dir guix?"))
              (body (en "Don't miss the @code{hello} package!"))))

   The file consists of a list of “news entries”.  Each entry is
associated with a commit or tag: it describes changes made in this
commit, possibly in preceding commits as well.  Users see entries only
the first time they obtain the commit the entry refers to.

   The ‘title’ field should be a one-line summary while ‘body’ can be
arbitrarily long, and both can contain Texinfo markup (*note
(texinfo)Overview::).  Both the title and body are a list of language
tag/message tuples, which allows ‘guix pull’ to display news in the
language that corresponds to the user’s locale.

   If you want to translate news using a gettext-based workflow, you can
extract translatable strings with ‘xgettext’ (*note (gettext)xgettext
Invocation::).  For example, assuming you write news entries in English
first, the command below creates a PO file containing the strings to
translate:

     xgettext -o news.po -l scheme -ken etc/news.scm

   To sum up, yes, you could use your channel as a blog.  But beware,
this is _not quite_ what your users might expect.

4.7.6 Копирование Guix
----------------------

Результат ‘guix pull --list-generations’ выше показывает точно, какие
коммиты были использованы для сборки данной инстанции Guix.  Так что мы
можем повторить её, скажем, на другой машине, предоставив объявление
канала в ‘~/.config/guix/channels.scm’, которое завязано на этих
коммитах:

     ;; Deploy specific commits of my channels of interest.
     (list (channel
            (name 'guix)
            (url "https://git.savannah.gnu.org/git/guix.git")
            (commit "d894ab8e9bfabcefa6c49d9ba2e834dd5a73a300"))
           (channel
            (name 'my-personal-packages)
            (url "https://example.org/personal-packages.git")
            (commit "dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb")))

   The ‘guix describe --format=channels’ command can even generate this
list of channels directly (*note Вызов guix describe::).  The resulting
file can be used with the -C options of ‘guix pull’ (*note Запуск guix
pull::) or ‘guix time-machine’ (*note Вызов guix archive::).

   И тогда две машины будут работать с _полностью одинаковым Guix_, имея
доступ к _абсолютно одинаковым пакетам_.  Результат ‘guix build gimp’ на
одной машине будет совершенно таким же, бит к биту, как результат этой
команды на другой машине.  Это также означает, что обе машины имеют
доступ ко всем исходным кодам Guix, следовательно, ко всем исходным
кодам каждого пакета, определённого в Guix.

   Это даёт вам супервозможности, позволяя вам отслеживать и управлять
происхождением артефактов бинарников с точной детализацией, также
повторять программные окружения — это воспроизводимость высокого уровня.
Смотрите *Note Младшие версии::, чтобы узнать другие преимущества таких
супервозможностей.


File: guix.ru.info,  Node: Invoking guix time-machine,  Next: Младшие версии,  Prev: Каналы,  Up: Управление пакетами

4.8 Запуск ‘guix time-machine’
==============================

The ‘guix time-machine’ command provides access to other revisions of
Guix, for example to install older versions of packages, or to reproduce
a computation in an identical environment.  The revision of Guix to be
used is defined by a commit or by a channel description file created by
‘guix describe’ (*note Вызов guix describe::).

   Основной синтаксис:

     guix time-machine OPTIONS... -- COMMAND ARG...

   where COMMAND and ARG... are passed unmodified to the ‘guix’ command
of the specified revision.  The OPTIONS that define this revision are
the same as for ‘guix pull’ (*note Запуск guix pull::):

‘--url=URL’
‘--commit=COMMIT’
‘--branch=BRANCH’
     Use the ‘guix’ channel from the specified URL, at the given COMMIT
     (a valid Git commit ID represented as a hexadecimal string), or
     BRANCH.

‘--channels=FILE’
‘-C FILE’
     Read the list of channels from FILE.  FILE must contain Scheme code
     that evaluates to a list of channel objects.  *Note Каналы:: for
     more information.

   As for ‘guix pull’, the absence of any options means that the the
latest commit on the master branch will be used.  The command

     guix time-machine -- build hello

   will thus build the package ‘hello’ as defined in the master branch,
which is in general a newer revision of Guix than you have installed.
Time travel works in both directions!

   Note that ‘guix time-machine’ can trigger builds of channels and
their dependencies, and these are controlled by the standard build
options (*note Стандартные параметры сборки::).


File: guix.ru.info,  Node: Младшие версии,  Next: Вызов guix describe,  Prev: Invoking guix time-machine,  Up: Управление пакетами

4.9 Младшие версии
==================

     Примечание: Функциональность, описанная здесь, — это обзор
     технологии версии 1.1.0.  Интерфейс может меняться.

   Иногда вам может понадобиться перемешивать пакеты из ревизии Guix,
которая работает в настоящий момент, с пакетами, доступными в другой
ревизии Guix.  Основания Guix “inferiors” позволяют вам получить это,
составляя различные ревизии Guix произвольным образом.

   Технически работа с ранними версиями — это в целом отдельный процесс
Guix, связанный с главным процессом Guix через REPL (*note Запуск guix
repl::).  Модуль ‘(guix inferior)’ позволяет запускать ранние версии и
взаимодействовать с ними.  Он также предоставляет высокоуровневый
интерфейс для обзора и управления пакетами, которые поставляет ранняя
версия — “ранние версии пакетов”.

   При сочетании с каналами (*note Каналы::) ранние версии преоставляют
простой способ взаимодействовать с отдельными ревизиями Guix.  Например,
предположим, вы хотите установить в ваш профиль текущий пакет ‘guile’
вместе с тем ‘guile-json’, который был определён в предыдущей ревизии
Guix (может быть, потому что новый ‘guile-json’ имеет несовместимый API,
и вы хотите запустить ваш код со старым API). Чтобы это сделать, можно
написать манифест для использования с ‘guix package --manifest’ (*note
Вызов guix package::).  В этом манифесте вы создадите описание ранней
версии той предыдущей ревизии Guix, которая вас интересует, в которой вы
ищете пакет ‘guile-json’ ранней версии:

     (use-modules (guix inferior) (guix channels)
                  (srfi srfi-1))   ;for 'first'

     (define channels
       ;; This is the old revision from which we want to
       ;; extract guile-json.
       (list (channel
              (name 'guix)
              (url "https://git.savannah.gnu.org/git/guix.git")
              (commit
               "65956ad3526ba09e1f7a40722c96c6ef7c0936fe"))))

     (define inferior
       ;; An inferior representing the above revision.
       (inferior-for-channels channels))

     ;; Now create a manifest with the current "guile" package
     ;; and the old "guile-json" package.
     (packages->manifest
      (list (first (lookup-inferior-packages inferior "guile-json"))
            (specification->package "guile")))

   Далее запуск ‘guix package --manifest’ может вызвать сборку канала,
который вы обозначили ранее, и в результате это задействует раннюю
версию.  Последовательные запуски будут быстрее, потому что ревизия Guix
будет кеширована.

   Модуль ‘(guix inferior)’ предоставляет следующие процедуры для работы
с ранними версиями:

 -- Процедура Scheme: inferior-for-channels CHANNELS [#:cache-directory]
          [#:ttl] Возвращает раннюю версию для списка каналов
     CHANNELS.  Использует кеш в CACHE-DIRECTORY, где компоненты могут
     восстанавливаться через TTL секунд.  Эта процедура открывает новое
     соединение с демоном сборки.

     Как побочный эффект, эта процедура может собирать или скачивать
     подстановки бинарников для CHANNELS, что может занять время.

 -- Процедура Scheme: open-inferior DIRECTORY [#:command "bin/guix"]
          Открывает раннюю версию Guix в DIRECTORY,
     запустив repl ‘DIRECTORY/COMMAND’ или эквивалент.  Возвращает ‘#f’,
     если ранняя версия не может быть запущена.

   Процедуры, приведённые ниже, обеспечивают работу и управление ранними
версиями пакетов.

 -- Процедура Scheme: inferior-packages INFERIOR
     Возвращает список пакетов, относящихся к ранней версии INFERIOR.

 -- Процедура Scheme: lookup-inferior-packages INFERIOR NAME [VERSION]
          Возвращает сортированный список пакетов ранней версии
     INFERIOR, содержащих имя NAME, поздняя версия - вначале.  Если
     версия VERSION задана, возвращает только пакеты с номером версии,
     начинающейся с VERSION.

 -- Процедура Scheme: inferior-package? OBJ
     Возвращает true, если объект OBJ — это пакет ранней версии.

 -- Процедура Scheme: inferior-package-name PACKAGE
 -- Процедура Scheme: inferior-package-version PACKAGE
 -- Процедура Scheme: inferior-package-synopsis PACKAGE
 -- Процедура Scheme: inferior-package-description PACKAGE
 -- Процедура Scheme: inferior-package-home-page PACKAGE
 -- Процедура Scheme: inferior-package-location PACKAGE
 -- Процедура Scheme: inferior-package-inputs PACKAGE
 -- Процедура Scheme: inferior-package-native-inputs PACKAGE
 -- Процедура Scheme: inferior-package-propagated-inputs PACKAGE
 -- Процедура Scheme: inferior-package-transitive-propagated-inputs
          PACKAGE
 -- Процедура Scheme: inferior-package-native-search-paths PACKAGE
 -- Процедура Scheme: inferior-package-transitive-native-search-paths
          PACKAGE
 -- Процедура Scheme: inferior-package-search-paths PACKAGE
     Эти процедуры являются двойниками метода доступа к записям пакетов
     (*note Интерфейс package::).  Большинство из них работают с
     запросами для ранней версии, из которой происходит PACKAGE, так что
     ранняя версия должна оставаться живой, когда вы вызываете эти
     процедуры.

   Пакеты ранних версий могут использоваться прозрачно, как любой другой
пакет или объект типа файл в выражении G-expressions (*note
G-Expressions::).  Они также прозрачно используются в процедуре
‘packages->manifest’, которая обычно используется в манифестах (*note
the ‘--manifest’ option of ‘guix package’: Вызов guix package.).  Так
можно вставлять пакет ранней версии в принципе куда угодно, как если
вставлять обычный пакет: в манифесты, в поле ‘packages’ вашего
объявления ‘operating-system’ и т.д.


File: guix.ru.info,  Node: Вызов guix describe,  Next: Вызов guix archive,  Prev: Младшие версии,  Up: Управление пакетами

4.10 Вызов ‘guix describe’
==========================

Часто может возникать вопрос: "Какую ревизию Guix я использую?"  - Или:
"Какие каналы я использую?"  Это полезна информация во многих ситуациях:
если вы хотите _повторить_ окружение на другой машине или в другом
пользовательском аккаунте, если вы хотите составить отчёт об ошибке,
чтобы определить, какие изменения в канале, который вы используете,
вызвали ошибку, или если вы хотите записать состояние вашей системы в
целях воспроизводимости.  Команда ‘guix describe’ отвечает на эти
вопросы.

   В случае запуска после ‘guix pull’ команда ‘guix describe’ отображает
канал(ы), из которых производилась сборка, включая URL и репозиториев и
ID коммитов (*note Каналы::):

     $ guix describe
     Generation 10	Sep 03 2018 17:32:44	(current)
       guix e0fa68c
         repository URL: https://git.savannah.gnu.org/git/guix.git
         branch: master
         commit: e0fa68c7718fffd33d81af415279d6ddb518f727

   Если вы знакомы с системой контроля версиями Git, эта команда по сути
похожа на ‘git describe’; выход тот же, что в ‘guix pull
--list-generations’, но ограничен текущим поколением (*note the
‘--list-generations’ option: Запуск guix pull.).  Так как ID коммита Git
выше ссылается однозначно на снимок Guix, эта информация — всё, что
нужно для описания используемой ревизии Guix и повторения её.

   Чтобы проще повторить Guix, ‘guix describe’ также может вызываться
для вывода списка каналов вместо читаемого описания выше:

     $ guix describe -f channels
     (list (channel
             (name 'guix)
             (url "https://git.savannah.gnu.org/git/guix.git")
             (commit
               "e0fa68c7718fffd33d81af415279d6ddb518f727")))

Можно сохранить это в файл и подать на вход ‘guix pull -C’ на любой
другой машине или через время, чтобы инициализировать _эту конкретную
ревизию Guix_ (*note the ‘-C’ option: Запуск guix pull.).  Теперь, когда
можно развернуть подобную ревизию Guix, вы можете также _полностью
повторить программное окружение_.  Мы скромно полагаем, это _чудесно_.
Надеемся, вам это тоже понравится!

   Подробнее об опциях, поддерживаемых ‘guix describe’:

‘--format=FORMAT’
‘-f FORMAT’
     Произвести вывод в указанном формате FORMAT, одном из:

     ‘human’
          произвести вывод для чтения человеком;
     ‘каналы’
          произвести список спецификаций каналов, который может
          использоваться в ‘guix pull -C’ или вставлен в файл
          ‘~/.config/guix/channels.scm’ (*note Запуск guix pull::);
     ‘json’
          произвести список спецификаций каналов в формате JSON;
     ‘recutils’
          произвести список спецификаций каналов в формате Recutils.

‘--profile=PROFILE’
‘-p PROFILE’
     Вывести информацию о профиле PROFILE.


File: guix.ru.info,  Node: Вызов guix archive,  Prev: Вызов guix describe,  Up: Управление пакетами

4.11 Вызов ‘guix archive’
=========================

Команда ‘guix archive’ даёт возможность пользователям “экспортировать”
файлы со склада в простой архив и затем “импортировать” их на машину с
работающим Guix.  В частности, это позволяет передавать файлы склада
одной машины на склад другой машины.

     Примечание: Если вы ищете способ производить архивы в формате,
     который подходит для инструментов, отличных от Guix, смотрите *note
     Запуск guix pack::.

   Чтобы экспортировать файлы склада в архив в стандартный вывод,
выполните:

     guix archive --export OPTIONS SPECIFICATIONS...

   Спецификации SPECIFICATIONS могут быть либо именами файлов или
пакетами, как для команде ‘guix package’ (*note Вызов guix package::).
Например, следующая команда создаёт архив, содержащий выход ‘gui’ пакета
‘git’ и главный выход ‘emacs’:

     guix archive --export git:gui /gnu/store/...-emacs-24.3 > great.nar

   Если указанные пакеты ещё не собраны, ‘guix archive’ автоматически
соберёт их.  Процесс сборки может контролироваться обычными опциями
сборки (*note Стандартные параметры сборки::).

   Чтобы передать пакет ‘emacs’ на машину, соединённую по SSH, нужно
следующее:

     guix archive --export -r emacs | ssh the-machine guix archive --import

Точно также для передачи всего профиля пользователя из одной машины на
другую, выполните:

     guix archive --export -r $(readlink -f ~/.guix-profile) | \
       ssh the-machine guix archive --import

Однако заметим, что в обоих примерах, передаются весь ‘emacs’ и профиль
вместе с их зависимости (ввиду ‘-r’), не учитывая, что доступно на
складе целевой машины.  Опция ‘--missing’ помогает определить
отсутствующие элементы на целевом складе.  Команда ‘guix copy’ упрощает
и оптимизирует весь этот процесс, так что в данном случае она решает
проблему (*note Запуск guix copy::).

   Архивы сохраняются в нормализованном виде, или в формате nar, который
по сути совместим с tar, но с отличиями, которые делают его более
подходящим для наших целей.  Во-первых, вместо записи всех метаданных
Unix для каждого файла, формат nar упоминает только формат файла
(обычный, директория, символическая ссылка); права доступа Unix и
владелец/группа не учитываются.  Во-вторых, порядок, в котором
сохраняются компоненты директории, всегда соответствуют порядку имён
файлов в соответствии с порядком сортировки локали C. Это делает
производство архива полностью детерминистическим.

   При экспортировании демон подписывает цифровой подписью содержимое
архива, и эта цифровая подпись прикрепляется.  При импорте демон
проверяет подпись и отменяет импорт в случае недействительной подписи,
или если ключ подписи не авторизован.

   Основные опции:

‘--export’
     Экспортировать указанные файлы склада или пакеты (смотрите ниже).
     Писать результирующий архив в стандартный вывод.

     Зависимости _не_ включаются в выход, если не задана опция
     ‘--recursive’.

‘-r’
‘--recursive’
     При сочетании с ‘--export’ это указывает ‘guix archive’ включать в
     архив зависимости обозначенных элементов.  Так результирующий архив
     будет "сам в себе": содержит полный конвейер экспортированных
     элементов склада.

‘--import’
     Читать архив из стандартного ввода и импортировать файлы,
     поставляемые им, на склад.  Отклонить, если архив имеет
     недействительную цифровую подпись, или если он подписан публичным
     ключом, который не находится в списке авторизованных ключей
     (смотрите ‘--authorize’ ниже).

‘--missing’
     Читать список имён файлов склада из стандартного ввода, одна линия
     - один файл, и писать в стандартный вывод подмножество этих файлов,
     отсутствующих на складе.

‘--generate-key[=PARAMETERS]’
     Генерировать новую ключ-пару для демона.  Это необходимо получить
     перед тем, как экспортировать архивы опцией ‘--export’.  Отметим,
     что эта операция обычно занимает время, так как необходимо собрать
     много энтропии для ключ-пары.

     Сгенерированная ключ-пара обычно сохраняется под ‘/etc/guix’, в
     файлы ‘signing-key.pub’ (публичный ключ) и ‘signing-key.sec’
     (прватный ключ, который должен оставаться в секрете).  Если
     параметры PARAMETERS пропущены, генерируется ключ ECDSA, используя
     кривую Ed25519, или для Libgcrypt версии ранее 1.6.0 — это
     4096-битный ключ RSA. Альтернативно в параметрах PARAMETERS можно
     указать ‘genkey’, соответствующие Libgcrypt (*note
     ‘gcry_pk_genkey’: (gcrypt)General public-key related Functions.).

‘--authorize’
     Авторизовать импорт, подписанный публичным ключом, поступивший на
     стандартный ввод.  Публичный ключ должен быть в формате
     s-expression, то есть в таком же формате, как файл
     ‘signing-key.pub’.

     The list of authorized keys is kept in the human-editable file
     ‘/etc/guix/acl’.  The file contains “advanced-format s-expressions”
     (https://people.csail.mit.edu/rivest/Sexp.txt) and is structured as
     an access-control list in the Simple Public-Key Infrastructure
     (SPKI) (https://theworld.com/~cme/spki.txt).

‘--extract=DIRECTORY’
‘-x DIRECTORY’
     Читать архив, представляющий один элемент, в качестве поставленного
     серверами подстановки (*note Подстановки::) и извлечь его в
     директорию DIRECTORY.  Это низкоуровневая операция, необходимая
     только в очень редких случаях, смотрите ниже.

     Например, следующая команда распаковывает подстановку Emacs,
     поставленную ‘ci.guix.gnu.org’ в ‘/tmp/emacs’:

          $ wget -O - \
            https://ci.guix.gnu.org/nar/...-emacs-24.5 \
            | bunzip2 | guix archive -x /tmp/emacs

     Архивы, представляющие один элемент, отличаются от архивов,
     содержащих множество элементов, производимых ‘guix archive
     --export’.  Они содержат один элемент склада, но они _не_ включают
     подпись.  Так что эта операция _не_ использует верификацию, и его
     выход должен рассматриваться как небезопасный.

     Основная цель этой операции — упростить просмотр содержимого
     архива, происходящего, возможно, из недоверенных серверов
     подстановок.

‘--list’
‘-t’
     Read a single-item archive as served by substitute servers (*note
     Подстановки::) and print the list of files it contains, as in this
     example:

          $ wget -O - \
            https://ci.guix.gnu.org/nar/lzip/...-emacs-26.3 \
            | lzip -d | guix archive -t


File: guix.ru.info,  Node: Разработка,  Next: Программный интерфейс,  Prev: Управление пакетами,  Up: Top

5 Разработка
************

Если вы являетесь разработчиком программного обеспечения, Guix
предоставляет инструменты, которые вы можете найти полезными, независимо
от языка разработки.  Об этом данный раздел.

   Команда ‘guix environment’ предоставляет удобный способ установить
“окружение разработки” на ваш выбор, содержащее все зависимости и
инструменты, необходимые для работы с пакетом программы.  Команда ‘guix
pack’ позволяет создавать “наборы приложений”, которые могут легко
распространяться для пользователей, которые не используют Guix.

* Menu:

* Запуск guix environment::  Настройка окружения
                                     сборки.
* Запуск guix pack::   Создание наборов
                               программ.


File: guix.ru.info,  Node: Запуск guix environment,  Next: Запуск guix pack,  Up: Разработка

5.1 Вызов ‘guix environment’
============================

Цель ‘guix environment’ — помощь программистам в создании окружения
разработки, которое можно повторять, без влияния на профили пакетов.
Инструмент ‘guix environment’ принимает один или более пакетов, собирает
все входные данные для них и создаёт окружение оболочки для их
использования.

   Основной синтаксис:

     guix environment OPTIONS PACKAGE...

   Следующий пример порождает новую оболочку, установленную для
разработки GNU Guile:

     guix environment guile

   Если необходимые зависимости ещё не собраны, ‘guix environment’
автоматически собирает их.  Окружение новой оболочки является
приращённой версией окружения, которое создаётся командой ‘guix
environment’.  Оно создаёт необходимые пути поиска для сборки данного
пакета и добавляет их к существующим переменным окружения.  Чтобы
создать "чистое" окружение, в котором исходные переменные окружения не
установлены, используйте опцию ‘--pure’ option(1).

   ‘guix environment’ определяет переменную ‘GUIX_ENVIRONMENT’ в
оболочке, которую создаёт; её значением является имя файла профиля этого
окружения.  Это позволяет пользователям, скажем, определить специфичные
значения окружений разработки в ‘.bashrc’ (*note (bash)Bash Startup
Files::):

     if [ -n "$GUIX_ENVIRONMENT" ]
     then
         export PS1="\u@\h \w [dev]\$ "
     fi

... или просмотеть профиль:

     $ ls "$GUIX_ENVIRONMENT/bin"

   Дополним, что может быть указано более одного пакета, в таком случае
используется объединённые входные данные для указанных пакетов.
Например, команда ниже порождает оболочку, в котором доступны все
зависимости, как Guile, так и Emacs:

     guix environment guile emacs

   Иногда интерактивная сессия оболочки не нужна.  Можно вызвать
произвольную команду при указании токена ‘--’, который отделяет команду
от остальных аргументов:

     guix environment guile -- make -j4

   В других ситуациях удобнее указать список паетов, необходимых для
окружения.  Например, следующая команда запускает ‘python’ из окружения,
содержащего Python 2.7 и NumPy:

     guix environment --ad-hoc python2-numpy python-2.7 -- python

   Более того, возможно, вам потребуются зависимости пакета, а также
некоторые дополнительные пакеты, которые не являются зависимостями
процесса сборки или процесса исполнения (работы), но важны при
разработке.  Для этого и указан флаш ‘--ad-hoc’.  Пакеты, обозначенные
до ‘--ad-hoc’ интерпретируются как пакеты, чьи зависимости будут
добавлены в окружение.  Пакеты, которые обозначены после ‘--ad-hoc’,
интерпретируются как пакеты, которые будут добавлены в окружение
непосредственно.  Например, следующая команда создаёт окружение
разработки Guix, которая в дополнение включает Git и strace:

     guix environment --pure guix --ad-hoc git strace

   Иногда возникает необходимость изолировать окружение настолько,
насколькоо возможно, для максимальной чистоты и воспроизводимости.  В
частности, при использовании Guix на дистрибутиве, отличном от системы
Guix, желательно предотвращать доступ из окружения разработки к
‘/usr/bin’ и другим ресурсам системы.  Например, следующая команда
порождает Guile REPL в "контейнере", в котором монтированы только склад
и текущая рабочая директория:

     guix environment --ad-hoc --container guile -- guile

     Примечание: Опция ‘--container’ требует Linux-libre 3.19 или новее.

   Доступные опции резюмированы ниже.

‘--root=FILE’
‘-r FILE’
     Создать символическую ссылку FILE на профиль этого окружения и
     зарегистрировать её как корень сборщика мусора.

     Это полезно, если вы хотите защитить своё окружение от сборщика
     мусора, сделать его "постоянным".

     Если эта опция пропущена, окружеие защищено от сборщика мусора
     только на время сессии ‘guix environment’.  Это означает, что в
     следующий раз, когда вы создадите такое же окружение, вам
     потребуется пересобирать и скачивать пакеты заново.  *Note Вызов
     guix gc::, for more on GC roots.

‘--expression=EXPR’
‘-e EXPR’
     Создать окружение для пакета или списка пакетов, которые
     соответствуют выражению EXPR.

     Например, запуск:

          guix environment -e '(@ (gnu packages maths) petsc-openmpi)'

     запускает оболочку с окружением для этого специфического варианта
     пакета PETSc.

     Запуск:

          guix environment --ad-hoc -e '(@ (gnu) %base-packages)'

     стартует оболочку со всеми доступными базовыми пакетами.

     Команды выше используют только выход по умолчанию обозначенных
     пакетов.  Чтобы выбрать другие выходы, можно указать два элемента
     кортежей:

          guix environment --ad-hoc -e '(list (@ (gnu packages bash) bash) "include")'

‘--load=FILE’
‘-l FILE’
     Создать окружение для пакета или списка пакетов, код которых задан
     в файле FILE.

     Например, FILE может содержать содержать определение (*note
     Описание пакетов::):

          (use-modules (guix)
                       (gnu packages gdb)
                       (gnu packages autotools)
                       (gnu packages texinfo))
          
          ;; Augment the package definition of GDB with the build tools
          ;; needed when developing GDB (and which are not needed when
          ;; simply installing it.)
          (package (inherit gdb)
            (native-inputs `(("autoconf" ,autoconf-2.64)
                             ("automake" ,automake)
                             ("texinfo" ,texinfo)
                             ,@(package-native-inputs gdb))))

‘--manifest=FILE’
‘-m FILE’
     Create an environment for the packages contained in the manifest
     object returned by the Scheme code in FILE.  This option can be
     repeated several times, in which case the manifests are
     concatenated.

     Это то же, что опция с таким же именем в ‘guix package’ (*note
     ‘--manifest’: profile-manifest.) и использует такие же файлы
     манифестов.

‘--ad-hoc’
     Включить все указанные пакеты в результирующее окружение, если бы
     целевой (лат.  ad hoc) пакет имел бы их как входные данные.  Эта
     опция полезна для быстрого создания окружения без необходимости
     писать выражение типа пакет, содержащее желаемые входные данные.

     Например, команда:

          guix environment --ad-hoc guile guile-sdl -- guile

     запускает ‘guile’ в окружении, в котором доступны Guile и
     Guile-SDL.

     Отметим, что этот пример явно запрашивает выходы ‘guile’ и
     ‘guile-sdl’ по умолчанию, но возможно запросить специфичный выход,
     то есть ‘glib:bin’ запрашивает выход ‘bin’ из ‘glib’ (*note Пакеты
     со множественным выходом::).

     Эта опция может сочетаться с поведением по умолчанию ‘guix
     environment’.  Пакеты, которые появляются до ‘--ad-hoc’
     интерпретируются как пакеты, чьи зависимости будут добавлены в
     окружение (поведение по умолчанию).  Пакеты, которые появляются
     после этой опции, интерпретируются как пакеты, которые будут
     добавлены в окружение непосредственно.

‘--pure’
     Сброс существующих переменных окружения при сборке нового
     окружения, кроме обозначенных в опции ‘--preserve’ (смотрите ниже).
     Эффект этой опции — создание окружения, в котором пути поиска
     содержат только входные данные пакета.

‘--preserve=REGEXP’
‘-E REGEXP’
     При использовании вместе с ‘--pure’, оставить содержимое переменных
     окружения, соответствующих выражению REGEXP — другими словами,
     включить их в "белый список" переменных окружения, которые не
     должны обнуляться.  Эту опцию можно повторять несколько раз.

          guix environment --pure --preserve=^SLURM --ad-hoc openmpi ... \
            -- mpirun ...

     Этот пример запускает ‘mpirun’ в контексте, в котором определены
     только следующие переменные окружения: ‘PATH’, переменные
     окружения, чьи имена начинаются с ‘SLURM’, а также обычные
     "дорогие" переменные (‘HOME’, ‘USER’, и т.д.)

‘--search-paths’
     Отобразить определения переменных окружения, которые составляют
     окружение.

‘--system=SYSTEM’
‘-s SYSTEM’
     Попытаться собрать систему SYSTEM, то есть ‘i686-linux’.

‘--container’
‘-C’
     Запустить COMMAND в изолированном контейнере.  Текущая рабочая
     директория за пределами контейнера отображается внутри контейнера.
     В дополнение, если это не переопределено опцией ‘--user’, тогда
     настраивается фиктивная домашняя директория, которая совпадает с
     домашней директорией текущего пользователя, а также соответствующий
     файл ‘/etc/passwd’.

     Порождаемый процесс снаружи предстаёт как запущенный от текущего
     пользователя.  Внутри контейнера он имеет такие же UID и GID, что и
     текущий пользователь, если не обозначена ‘--user’ (смотрите ниже).

‘--network’
‘-N’
     Разделять пространство сетевых имён контейнера с хостящей системой.
     Контейнеры, созданные без этого флага, могут только иметь доступ к
     петлевому устройству.

‘--link-profile’
‘-P’
     Связать профиль окружения контейнера с ‘~/.guix-profile’ внутри
     контейнера.  Это эквивалент запуска команды ‘ln -s
     $GUIX_ENVIRONMENT ~/.guix-profile’ внутри контейнера.  Связывание
     завершится ошибкой и отменит создание окружения, если директория
     уже существует, что, конечно, будет происходить, если ‘guix
     environment’ вызвана в домашней директории пользователя.

     Определённые пакеты сконфигурированы, чтобы смотреть
     конфигурационные файлы и данные в ‘~/.guix-profile’;(2)
     ‘--link-profile’ позволяет этим программам вести себя ожидаемо
     внутри окружения.

‘--user=USER’
‘-u USER’
     Использовать в контейнере имя пользователя USER вместо текущего
     пользователя.  Созданная внутри контейнера запись ‘/etc/passwd’
     будет содержать имя USER, домашняя директория будет ‘/home/USER’,
     но не будут копированы пользовательские данные GECOS. Более того,
     внутри контейнера UID и GID будут 1000.  USER не обязательно должен
     существовать в системе.

     В дополнение, любой разделяемый или расширяемый путь (смотрите
     ‘--share’ и ‘--expose’ соответственно), чьи цели находятся в
     домашней директории пользователя, будут отображены соответственно в
     ‘/home/USER’; это включает автоматическое отображение текущей
     рабочей директории.

          # will expose paths as /home/foo/wd, /home/foo/test, and /home/foo/target
          cd $HOME/wd
          guix environment --container --user=foo \
               --expose=$HOME/test \
               --expose=/tmp/target=$HOME/target

     Это ограничит утечку данных идентификации пользователя через
     домашние пути и каждое из полей пользователя.  Это один
     единственный компонент расширенного решения приватности/анонимности
     — ничто не войдёт, ничто не выйдет.

‘--no-cwd’
     Для контейнеров стандартным поведением является разделение текущего
     рабочего каталога с изолированным контейнером и немедленное
     переключение на этот каталог в контейнере.  Если это нежелательно,
     ‘--no-cwd’ приведет к автоматическому доступу к текущему рабочему
     каталогу _not_, который изменится на домашний каталог пользователя
     в контейнере.  Смотрите также ‘--user’.

‘--expose=SOURCE[=TARGET]’
‘--share=SOURCE[=TARGET]’
     For containers, ‘--expose’ (resp.  ‘--share’) exposes the file
     system SOURCE from the host system as the read-only (resp.
     writable) file system TARGET within the container.  If TARGET is
     not specified, SOURCE is used as the target mount point in the
     container.

     Пример ниже порождает Guile REPL в контейнере, в котором домашняя
     директория пользователя доступна только для чтения через директорию
     ‘/exchange’:

          guix environment --container --expose=$HOME=/exchange --ad-hoc guile -- guile

   ‘guix environment’ также поддерживает все обычные опции сборки,
которые поддерживает команда ‘guix build’ (*note Стандартные параметры
сборки::), а также опции трансформации пакета (*note Параметры
преобразования пакета::).

   ---------- Footnotes ----------

   (1) Пользователи обычно некорректно расширяют переменные окружения,
как например, ‘PATH’, в их файлах ‘~/.bashrc’.  Как следствие, ‘guix
environment’ запускает их, Bash может читать ‘~/.bashrc’, производя
таким образом "нечистоту" в этих переменных окружения.  Ошибочно
определять такие переменные окружения в ‘.bashrc’; вместо этого они
должны быть определены в ‘.bash_profile’, который вызывается оболочками
только при авторизации.  Смотрите *Note (bash)Bash Startup Files:: для
подробной информации о файлах Bash, вызываемых при входе.

   (2) Например, пакет ‘fontconfig’ просматривает
‘~/.guix-profile/share/fonts’ для дополнительных шрифтов.

