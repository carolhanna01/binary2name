@subheading shishi_authorize_strcmp
@anchor{shishi_authorize_strcmp}
@deftypefun {int} {shishi_authorize_strcmp} (Shishi * @var{handle}, const char * @var{principal}, const char * @var{authzname})
@var{handle}: shishi handle allocated by @code{shishi_init()}.

@var{principal}: string with desired principal name.

@var{authzname}: authorization name.

Authorization of @code{authzname} against desired @code{principal}
according to "basic" authentication, i.e., testing for
identical strings.

@strong{Return value:} Returns 1 if @code{authzname} is authorized for services
by the encrypted principal, and 0 otherwise.
@end deftypefun

@subheading shishi_authorize_k5login
@anchor{shishi_authorize_k5login}
@deftypefun {int} {shishi_authorize_k5login} (Shishi * @var{handle}, const char * @var{principal}, const char * @var{authzname})
@var{handle}: shishi handle allocated by @code{shishi_init()}.

@var{principal}: string with desired principal name and realm.

@var{authzname}: authorization name.

Authorization of @code{authzname} against desired @code{principal}
in accordance with the MIT/Heimdal authorization method.

@strong{Return value:} Returns 1 if @code{authzname} is authorized for services
by @code{principal}, and returns 0 otherwise.
@end deftypefun

@subheading shishi_authorization_parse
@anchor{shishi_authorization_parse}
@deftypefun {int} {shishi_authorization_parse} (const char * @var{authorization})
@var{authorization}: name of authorization type, "basic" or "k5login".

Parse authorization type name.

@strong{Return value:} Returns authorization type corresponding to a string.
@end deftypefun

@subheading shishi_authorized_p
@anchor{shishi_authorized_p}
@deftypefun {int} {shishi_authorized_p} (Shishi * @var{handle}, Shishi_tkt * @var{tkt}, const char * @var{authzname})
@var{handle}: shishi handle allocated by @code{shishi_init()}.

@var{tkt}: input variable with ticket info.

@var{authzname}: authorization name.

Simplistic authorization of @code{authzname} against encrypted client
principal name inside ticket.  For "basic" authentication type,
the principal name must coincide with @code{authzname}. The "k5login"
authentication type attempts the MIT/Heimdal method of parsing
the file "~/.k5login" for additional equivalence names.

@strong{Return value:} Returns 1 if @code{authzname} is authorized for services
by the encrypted principal, and 0 otherwise.
@end deftypefun

