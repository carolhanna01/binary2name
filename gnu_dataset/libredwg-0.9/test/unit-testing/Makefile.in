# Makefile.in generated by automake 1.16.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2018 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
check_PROGRAMS = bits_test$(EXEEXT) decode_test$(EXEEXT) \
	hash_test$(EXEEXT) dynapi_test$(EXEEXT) 3dsolid$(EXEEXT) \
	arc$(EXEEXT) attdef$(EXEEXT) attrib$(EXEEXT) block$(EXEEXT) \
	body$(EXEEXT) circle$(EXEEXT) dim_aligned$(EXEEXT) \
	dim_ang2ln$(EXEEXT) dim_ang3pt$(EXEEXT) dim_diameter$(EXEEXT) \
	dim_linear$(EXEEXT) dim_ordinate$(EXEEXT) dim_radius$(EXEEXT) \
	ellipse$(EXEEXT) endblk$(EXEEXT) insert$(EXEEXT) line$(EXEEXT) \
	lwpline$(EXEEXT) minsert$(EXEEXT) mline$(EXEEXT) \
	mtext$(EXEEXT) ole2frame$(EXEEXT) point$(EXEEXT) \
	polyline_2d$(EXEEXT) polyline_3d$(EXEEXT) \
	polyline_mesh$(EXEEXT) polyline_pface$(EXEEXT) ray$(EXEEXT) \
	region$(EXEEXT) seqend$(EXEEXT) shape$(EXEEXT) solid$(EXEEXT) \
	text$(EXEEXT) tolerance$(EXEEXT) trace$(EXEEXT) \
	vertex_2d$(EXEEXT) vertex_3d$(EXEEXT) vertex_mesh$(EXEEXT) \
	vertex_pface$(EXEEXT) vertex_pface_face$(EXEEXT) \
	xline$(EXEEXT) xrecord$(EXEEXT)
@ENABLE_GCOV_TRUE@am__append_1 = @GCOV_CFLAGS@
@ENABLE_GCOV_TRUE@am__append_2 = @GCOV_LIBS@
@ENABLE_GCOV_TRUE@am__append_3 = *.gcov *.gcno *.gcda gcov.log
subdir = test/unit-testing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_add_fortify_source.m4 \
	$(top_srcdir)/m4/ax_append_compile_flags.m4 \
	$(top_srcdir)/m4/ax_append_flag.m4 \
	$(top_srcdir)/m4/ax_append_link_flags.m4 \
	$(top_srcdir)/m4/ax_check_compile_flag.m4 \
	$(top_srcdir)/m4/ax_check_link_flag.m4 \
	$(top_srcdir)/m4/ax_compile_check_sizeof.m4 \
	$(top_srcdir)/m4/ax_compiler_flags.m4 \
	$(top_srcdir)/m4/ax_compiler_flags_cflags.m4 \
	$(top_srcdir)/m4/ax_compiler_flags_gir.m4 \
	$(top_srcdir)/m4/ax_compiler_flags_ldflags.m4 \
	$(top_srcdir)/m4/ax_gcc_func_attribute.m4 \
	$(top_srcdir)/m4/ax_include_strcasecmp.m4 \
	$(top_srcdir)/m4/ax_is_release.m4 \
	$(top_srcdir)/m4/ax_pkg_swig.m4 \
	$(top_srcdir)/m4/ax_python_devel.m4 \
	$(top_srcdir)/m4/ax_require_defined.m4 \
	$(top_srcdir)/m4/ax_swig_python.m4 \
	$(top_srcdir)/m4/ax_valgrind_check.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/src/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
3dsolid_SOURCES = 3dsolid.c
3dsolid_OBJECTS = 3dsolid.$(OBJEXT)
3dsolid_LDADD = $(LDADD)
3dsolid_DEPENDENCIES = $(top_builddir)/src/libredwg.la
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
arc_SOURCES = arc.c
arc_OBJECTS = arc.$(OBJEXT)
arc_LDADD = $(LDADD)
arc_DEPENDENCIES = $(top_builddir)/src/libredwg.la
attdef_SOURCES = attdef.c
attdef_OBJECTS = attdef.$(OBJEXT)
attdef_LDADD = $(LDADD)
attdef_DEPENDENCIES = $(top_builddir)/src/libredwg.la
attrib_SOURCES = attrib.c
attrib_OBJECTS = attrib.$(OBJEXT)
attrib_LDADD = $(LDADD)
attrib_DEPENDENCIES = $(top_builddir)/src/libredwg.la
bits_test_SOURCES = bits_test.c
bits_test_OBJECTS = bits_test.$(OBJEXT)
bits_test_DEPENDENCIES = $(LDADD) $(top_builddir)/src/bits.lo
block_SOURCES = block.c
block_OBJECTS = block.$(OBJEXT)
block_LDADD = $(LDADD)
block_DEPENDENCIES = $(top_builddir)/src/libredwg.la
body_SOURCES = body.c
body_OBJECTS = body.$(OBJEXT)
body_LDADD = $(LDADD)
body_DEPENDENCIES = $(top_builddir)/src/libredwg.la
circle_SOURCES = circle.c
circle_OBJECTS = circle.$(OBJEXT)
circle_LDADD = $(LDADD)
circle_DEPENDENCIES = $(top_builddir)/src/libredwg.la
decode_test_SOURCES = decode_test.c
decode_test_OBJECTS = decode_test.$(OBJEXT)
decode_test_DEPENDENCIES = $(LDADD) $(top_builddir)/src/bits.lo \
	$(top_builddir)/src/hash.lo \
	$(top_builddir)/src/decode_r2007.lo \
	$(top_builddir)/src/common.lo $(top_builddir)/src/print.lo
dim_aligned_SOURCES = dim_aligned.c
dim_aligned_OBJECTS = dim_aligned.$(OBJEXT)
dim_aligned_LDADD = $(LDADD)
dim_aligned_DEPENDENCIES = $(top_builddir)/src/libredwg.la
dim_ang2ln_SOURCES = dim_ang2ln.c
dim_ang2ln_OBJECTS = dim_ang2ln.$(OBJEXT)
dim_ang2ln_LDADD = $(LDADD)
dim_ang2ln_DEPENDENCIES = $(top_builddir)/src/libredwg.la
dim_ang3pt_SOURCES = dim_ang3pt.c
dim_ang3pt_OBJECTS = dim_ang3pt.$(OBJEXT)
dim_ang3pt_LDADD = $(LDADD)
dim_ang3pt_DEPENDENCIES = $(top_builddir)/src/libredwg.la
dim_diameter_SOURCES = dim_diameter.c
dim_diameter_OBJECTS = dim_diameter.$(OBJEXT)
dim_diameter_LDADD = $(LDADD)
dim_diameter_DEPENDENCIES = $(top_builddir)/src/libredwg.la
dim_linear_SOURCES = dim_linear.c
dim_linear_OBJECTS = dim_linear.$(OBJEXT)
dim_linear_LDADD = $(LDADD)
dim_linear_DEPENDENCIES = $(top_builddir)/src/libredwg.la
dim_ordinate_SOURCES = dim_ordinate.c
dim_ordinate_OBJECTS = dim_ordinate.$(OBJEXT)
dim_ordinate_LDADD = $(LDADD)
dim_ordinate_DEPENDENCIES = $(top_builddir)/src/libredwg.la
dim_radius_SOURCES = dim_radius.c
dim_radius_OBJECTS = dim_radius.$(OBJEXT)
dim_radius_LDADD = $(LDADD)
dim_radius_DEPENDENCIES = $(top_builddir)/src/libredwg.la
dynapi_test_SOURCES = dynapi_test.c
dynapi_test_OBJECTS = dynapi_test.$(OBJEXT)
dynapi_test_DEPENDENCIES = $(LDADD) $(top_builddir)/src/bits.lo
ellipse_SOURCES = ellipse.c
ellipse_OBJECTS = ellipse.$(OBJEXT)
ellipse_LDADD = $(LDADD)
ellipse_DEPENDENCIES = $(top_builddir)/src/libredwg.la
endblk_SOURCES = endblk.c
endblk_OBJECTS = endblk.$(OBJEXT)
endblk_LDADD = $(LDADD)
endblk_DEPENDENCIES = $(top_builddir)/src/libredwg.la
hash_test_SOURCES = hash_test.c
hash_test_OBJECTS = hash_test.$(OBJEXT)
hash_test_DEPENDENCIES = $(LDADD) $(top_builddir)/src/bits.lo \
	$(top_builddir)/src/hash.lo
insert_SOURCES = insert.c
insert_OBJECTS = insert.$(OBJEXT)
insert_LDADD = $(LDADD)
insert_DEPENDENCIES = $(top_builddir)/src/libredwg.la
line_SOURCES = line.c
line_OBJECTS = line.$(OBJEXT)
line_LDADD = $(LDADD)
line_DEPENDENCIES = $(top_builddir)/src/libredwg.la
lwpline_SOURCES = lwpline.c
lwpline_OBJECTS = lwpline.$(OBJEXT)
lwpline_LDADD = $(LDADD)
lwpline_DEPENDENCIES = $(top_builddir)/src/libredwg.la
minsert_SOURCES = minsert.c
minsert_OBJECTS = minsert.$(OBJEXT)
minsert_LDADD = $(LDADD)
minsert_DEPENDENCIES = $(top_builddir)/src/libredwg.la
mline_SOURCES = mline.c
mline_OBJECTS = mline.$(OBJEXT)
mline_LDADD = $(LDADD)
mline_DEPENDENCIES = $(top_builddir)/src/libredwg.la
mtext_SOURCES = mtext.c
mtext_OBJECTS = mtext.$(OBJEXT)
mtext_LDADD = $(LDADD)
mtext_DEPENDENCIES = $(top_builddir)/src/libredwg.la
ole2frame_SOURCES = ole2frame.c
ole2frame_OBJECTS = ole2frame.$(OBJEXT)
ole2frame_LDADD = $(LDADD)
ole2frame_DEPENDENCIES = $(top_builddir)/src/libredwg.la
point_SOURCES = point.c
point_OBJECTS = point.$(OBJEXT)
point_LDADD = $(LDADD)
point_DEPENDENCIES = $(top_builddir)/src/libredwg.la
polyline_2d_SOURCES = polyline_2d.c
polyline_2d_OBJECTS = polyline_2d.$(OBJEXT)
polyline_2d_LDADD = $(LDADD)
polyline_2d_DEPENDENCIES = $(top_builddir)/src/libredwg.la
polyline_3d_SOURCES = polyline_3d.c
polyline_3d_OBJECTS = polyline_3d.$(OBJEXT)
polyline_3d_LDADD = $(LDADD)
polyline_3d_DEPENDENCIES = $(top_builddir)/src/libredwg.la
polyline_mesh_SOURCES = polyline_mesh.c
polyline_mesh_OBJECTS = polyline_mesh.$(OBJEXT)
polyline_mesh_LDADD = $(LDADD)
polyline_mesh_DEPENDENCIES = $(top_builddir)/src/libredwg.la
polyline_pface_SOURCES = polyline_pface.c
polyline_pface_OBJECTS = polyline_pface.$(OBJEXT)
polyline_pface_LDADD = $(LDADD)
polyline_pface_DEPENDENCIES = $(top_builddir)/src/libredwg.la
ray_SOURCES = ray.c
ray_OBJECTS = ray.$(OBJEXT)
ray_LDADD = $(LDADD)
ray_DEPENDENCIES = $(top_builddir)/src/libredwg.la
region_SOURCES = region.c
region_OBJECTS = region.$(OBJEXT)
region_LDADD = $(LDADD)
region_DEPENDENCIES = $(top_builddir)/src/libredwg.la
seqend_SOURCES = seqend.c
seqend_OBJECTS = seqend.$(OBJEXT)
seqend_LDADD = $(LDADD)
seqend_DEPENDENCIES = $(top_builddir)/src/libredwg.la
shape_SOURCES = shape.c
shape_OBJECTS = shape.$(OBJEXT)
shape_LDADD = $(LDADD)
shape_DEPENDENCIES = $(top_builddir)/src/libredwg.la
solid_SOURCES = solid.c
solid_OBJECTS = solid.$(OBJEXT)
solid_LDADD = $(LDADD)
solid_DEPENDENCIES = $(top_builddir)/src/libredwg.la
text_SOURCES = text.c
text_OBJECTS = text.$(OBJEXT)
text_LDADD = $(LDADD)
text_DEPENDENCIES = $(top_builddir)/src/libredwg.la
tolerance_SOURCES = tolerance.c
tolerance_OBJECTS = tolerance.$(OBJEXT)
tolerance_LDADD = $(LDADD)
tolerance_DEPENDENCIES = $(top_builddir)/src/libredwg.la
trace_SOURCES = trace.c
trace_OBJECTS = trace.$(OBJEXT)
trace_LDADD = $(LDADD)
trace_DEPENDENCIES = $(top_builddir)/src/libredwg.la
vertex_2d_SOURCES = vertex_2d.c
vertex_2d_OBJECTS = vertex_2d.$(OBJEXT)
vertex_2d_LDADD = $(LDADD)
vertex_2d_DEPENDENCIES = $(top_builddir)/src/libredwg.la
vertex_3d_SOURCES = vertex_3d.c
vertex_3d_OBJECTS = vertex_3d.$(OBJEXT)
vertex_3d_LDADD = $(LDADD)
vertex_3d_DEPENDENCIES = $(top_builddir)/src/libredwg.la
vertex_mesh_SOURCES = vertex_mesh.c
vertex_mesh_OBJECTS = vertex_mesh.$(OBJEXT)
vertex_mesh_LDADD = $(LDADD)
vertex_mesh_DEPENDENCIES = $(top_builddir)/src/libredwg.la
vertex_pface_SOURCES = vertex_pface.c
vertex_pface_OBJECTS = vertex_pface.$(OBJEXT)
vertex_pface_LDADD = $(LDADD)
vertex_pface_DEPENDENCIES = $(top_builddir)/src/libredwg.la
vertex_pface_face_SOURCES = vertex_pface_face.c
vertex_pface_face_OBJECTS = vertex_pface_face.$(OBJEXT)
vertex_pface_face_LDADD = $(LDADD)
vertex_pface_face_DEPENDENCIES = $(top_builddir)/src/libredwg.la
xline_SOURCES = xline.c
xline_OBJECTS = xline.$(OBJEXT)
xline_LDADD = $(LDADD)
xline_DEPENDENCIES = $(top_builddir)/src/libredwg.la
xrecord_SOURCES = xrecord.c
xrecord_OBJECTS = xrecord.$(OBJEXT)
xrecord_LDADD = $(LDADD)
xrecord_DEPENDENCIES = $(top_builddir)/src/libredwg.la
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)/src
depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/3dsolid.Po ./$(DEPDIR)/arc.Po \
	./$(DEPDIR)/attdef.Po ./$(DEPDIR)/attrib.Po \
	./$(DEPDIR)/bits_test.Po ./$(DEPDIR)/block.Po \
	./$(DEPDIR)/body.Po ./$(DEPDIR)/circle.Po \
	./$(DEPDIR)/decode_test.Po ./$(DEPDIR)/dim_aligned.Po \
	./$(DEPDIR)/dim_ang2ln.Po ./$(DEPDIR)/dim_ang3pt.Po \
	./$(DEPDIR)/dim_diameter.Po ./$(DEPDIR)/dim_linear.Po \
	./$(DEPDIR)/dim_ordinate.Po ./$(DEPDIR)/dim_radius.Po \
	./$(DEPDIR)/dynapi_test.Po ./$(DEPDIR)/ellipse.Po \
	./$(DEPDIR)/endblk.Po ./$(DEPDIR)/hash_test.Po \
	./$(DEPDIR)/insert.Po ./$(DEPDIR)/line.Po \
	./$(DEPDIR)/lwpline.Po ./$(DEPDIR)/minsert.Po \
	./$(DEPDIR)/mline.Po ./$(DEPDIR)/mtext.Po \
	./$(DEPDIR)/ole2frame.Po ./$(DEPDIR)/point.Po \
	./$(DEPDIR)/polyline_2d.Po ./$(DEPDIR)/polyline_3d.Po \
	./$(DEPDIR)/polyline_mesh.Po ./$(DEPDIR)/polyline_pface.Po \
	./$(DEPDIR)/ray.Po ./$(DEPDIR)/region.Po ./$(DEPDIR)/seqend.Po \
	./$(DEPDIR)/shape.Po ./$(DEPDIR)/solid.Po ./$(DEPDIR)/text.Po \
	./$(DEPDIR)/tolerance.Po ./$(DEPDIR)/trace.Po \
	./$(DEPDIR)/vertex_2d.Po ./$(DEPDIR)/vertex_3d.Po \
	./$(DEPDIR)/vertex_mesh.Po ./$(DEPDIR)/vertex_pface.Po \
	./$(DEPDIR)/vertex_pface_face.Po ./$(DEPDIR)/xline.Po \
	./$(DEPDIR)/xrecord.Po
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = 3dsolid.c arc.c attdef.c attrib.c bits_test.c block.c body.c \
	circle.c decode_test.c dim_aligned.c dim_ang2ln.c dim_ang3pt.c \
	dim_diameter.c dim_linear.c dim_ordinate.c dim_radius.c \
	dynapi_test.c ellipse.c endblk.c hash_test.c insert.c line.c \
	lwpline.c minsert.c mline.c mtext.c ole2frame.c point.c \
	polyline_2d.c polyline_3d.c polyline_mesh.c polyline_pface.c \
	ray.c region.c seqend.c shape.c solid.c text.c tolerance.c \
	trace.c vertex_2d.c vertex_3d.c vertex_mesh.c vertex_pface.c \
	vertex_pface_face.c xline.c xrecord.c
DIST_SOURCES = 3dsolid.c arc.c attdef.c attrib.c bits_test.c block.c \
	body.c circle.c decode_test.c dim_aligned.c dim_ang2ln.c \
	dim_ang3pt.c dim_diameter.c dim_linear.c dim_ordinate.c \
	dim_radius.c dynapi_test.c ellipse.c endblk.c hash_test.c \
	insert.c line.c lwpline.c minsert.c mline.c mtext.c \
	ole2frame.c point.c polyline_2d.c polyline_3d.c \
	polyline_mesh.c polyline_pface.c ray.c region.c seqend.c \
	shape.c solid.c text.c tolerance.c trace.c vertex_2d.c \
	vertex_3d.c vertex_mesh.c vertex_pface.c vertex_pface_face.c \
	xline.c xrecord.c
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__extra_recursive_targets = check-valgrind-recursive \
	check-valgrind-memcheck-recursive \
	check-valgrind-helgrind-recursive check-valgrind-drd-recursive \
	check-valgrind-sgcheck-recursive
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/build-aux/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ALLOCA = @ALLOCA@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AM_LDFLAGS = @AM_LDFLAGS@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
AX_SWIG_PYTHON_CPPFLAGS = @AX_SWIG_PYTHON_CPPFLAGS@
AX_SWIG_PYTHON_OPT = @AX_SWIG_PYTHON_OPT@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CLANG_FORMAT = @CLANG_FORMAT@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_VALGRIND_drd = @ENABLE_VALGRIND_drd@
ENABLE_VALGRIND_helgrind = @ENABLE_VALGRIND_helgrind@
ENABLE_VALGRIND_memcheck = @ENABLE_VALGRIND_memcheck@
ENABLE_VALGRIND_sgcheck = @ENABLE_VALGRIND_sgcheck@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GCOV = @GCOV@
GCOV_CFLAGS = @GCOV_CFLAGS@
GCOV_LIBS = @GCOV_LIBS@
GREP = @GREP@
HAVE_C99 = @HAVE_C99@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
ISODATE = @ISODATE@
JQ = @JQ@
JSON_SED_NAN = @JSON_SED_NAN@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBREDWG_SO_VERSION = @LIBREDWG_SO_VERSION@
LIBS = @LIBS@ $(am__append_2)
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTEXEC = @LTEXEC@
LTLIBOBJS = @LTLIBOBJS@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PARALLEL = @PARALLEL@
PATCH = @PATCH@
PATH_SEPARATOR = @PATH_SEPARATOR@
PCRE2_CFLAGS = @PCRE2_CFLAGS@
PCRE2_LIBS = @PCRE2_LIBS@
PERL = @PERL@
PICAT = @PICAT@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
PYTHON = @PYTHON@
PYTHON_CPPFLAGS = @PYTHON_CPPFLAGS@
PYTHON_EXEC_PREFIX = @PYTHON_EXEC_PREFIX@
PYTHON_EXTRA_LDFLAGS = @PYTHON_EXTRA_LDFLAGS@
PYTHON_EXTRA_LIBS = @PYTHON_EXTRA_LIBS@
PYTHON_LIBS = @PYTHON_LIBS@
PYTHON_PLATFORM = @PYTHON_PLATFORM@
PYTHON_PREFIX = @PYTHON_PREFIX@
PYTHON_SITE_PKG = @PYTHON_SITE_PKG@
PYTHON_VERSION = @PYTHON_VERSION@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
TARBALL_VERSION_FILE = @TARBALL_VERSION_FILE@
TIMEOUT = @TIMEOUT@
TIMEOUT_10 = @TIMEOUT_10@
VALGRIND = @VALGRIND@
VALGRIND_ENABLED = @VALGRIND_ENABLED@
VALGRIND_SUPPRESSIONS = @VALGRIND_SUPPRESSIONS@
VALGRIND_SUPPRESSIONS_FILE = @VALGRIND_SUPPRESSIONS_FILE@
VERSION = @VERSION@
WARN_CFLAGS = @WARN_CFLAGS@
WARN_SCANNERFLAGS = @WARN_SCANNERFLAGS@
WINE = @WINE@
XML2_CFLAGS = @XML2_CFLAGS@
XML2_LIBS = @XML2_LIBS@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
makeinfo_version = @makeinfo_version@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
pkgpyexecdir = @pkgpyexecdir@
pkgpythondir = @pkgpythondir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
pyexecdir = @pyexecdir@
pythondir = @pythondir@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
valgrind_enabled_tools = @valgrind_enabled_tools@
valgrind_tools = @valgrind_tools@
AM_CFLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/src $(WARN_CFLAGS) \
	$(am__append_1)
LDADD = $(top_builddir)/src/libredwg.la
bits_test_LDADD = $(LDADD) \
	$(top_builddir)/src/bits.lo

decode_test_LDADD = $(LDADD) \
	$(top_builddir)/src/bits.lo \
	$(top_builddir)/src/hash.lo \
	$(top_builddir)/src/decode_r2007.lo \
	$(top_builddir)/src/common.lo \
	$(top_builddir)/src/print.lo

hash_test_LDADD = $(LDADD) \
	$(top_builddir)/src/bits.lo \
	$(top_builddir)/src/hash.lo

dynapi_test_LDADD = $(LDADD) \
	$(top_builddir)/src/bits.lo

TESTS = $(check_PROGRAMS)
TESTS_ENVIRONMENT = \
  ASAN_OPTIONS="detect_leaks=0"

CLEANFILES = *.o $(am__append_3)
MAINTAINERCLEANFILES = *_flymake.[ch] *~ *.i
EXTRA_DIST = \
	tests_common.h \
	common.c \
	dynapi_test.c.in \
	dynapi_test.c

all: all-am

.SUFFIXES:
.SUFFIXES: .c .i .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu test/unit-testing/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu test/unit-testing/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

3dsolid$(EXEEXT): $(3dsolid_OBJECTS) $(3dsolid_DEPENDENCIES) $(EXTRA_3dsolid_DEPENDENCIES) 
	@rm -f 3dsolid$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(3dsolid_OBJECTS) $(3dsolid_LDADD) $(LIBS)

arc$(EXEEXT): $(arc_OBJECTS) $(arc_DEPENDENCIES) $(EXTRA_arc_DEPENDENCIES) 
	@rm -f arc$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(arc_OBJECTS) $(arc_LDADD) $(LIBS)

attdef$(EXEEXT): $(attdef_OBJECTS) $(attdef_DEPENDENCIES) $(EXTRA_attdef_DEPENDENCIES) 
	@rm -f attdef$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(attdef_OBJECTS) $(attdef_LDADD) $(LIBS)

attrib$(EXEEXT): $(attrib_OBJECTS) $(attrib_DEPENDENCIES) $(EXTRA_attrib_DEPENDENCIES) 
	@rm -f attrib$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(attrib_OBJECTS) $(attrib_LDADD) $(LIBS)

bits_test$(EXEEXT): $(bits_test_OBJECTS) $(bits_test_DEPENDENCIES) $(EXTRA_bits_test_DEPENDENCIES) 
	@rm -f bits_test$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(bits_test_OBJECTS) $(bits_test_LDADD) $(LIBS)

block$(EXEEXT): $(block_OBJECTS) $(block_DEPENDENCIES) $(EXTRA_block_DEPENDENCIES) 
	@rm -f block$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(block_OBJECTS) $(block_LDADD) $(LIBS)

body$(EXEEXT): $(body_OBJECTS) $(body_DEPENDENCIES) $(EXTRA_body_DEPENDENCIES) 
	@rm -f body$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(body_OBJECTS) $(body_LDADD) $(LIBS)

circle$(EXEEXT): $(circle_OBJECTS) $(circle_DEPENDENCIES) $(EXTRA_circle_DEPENDENCIES) 
	@rm -f circle$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(circle_OBJECTS) $(circle_LDADD) $(LIBS)

decode_test$(EXEEXT): $(decode_test_OBJECTS) $(decode_test_DEPENDENCIES) $(EXTRA_decode_test_DEPENDENCIES) 
	@rm -f decode_test$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(decode_test_OBJECTS) $(decode_test_LDADD) $(LIBS)

dim_aligned$(EXEEXT): $(dim_aligned_OBJECTS) $(dim_aligned_DEPENDENCIES) $(EXTRA_dim_aligned_DEPENDENCIES) 
	@rm -f dim_aligned$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dim_aligned_OBJECTS) $(dim_aligned_LDADD) $(LIBS)

dim_ang2ln$(EXEEXT): $(dim_ang2ln_OBJECTS) $(dim_ang2ln_DEPENDENCIES) $(EXTRA_dim_ang2ln_DEPENDENCIES) 
	@rm -f dim_ang2ln$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dim_ang2ln_OBJECTS) $(dim_ang2ln_LDADD) $(LIBS)

dim_ang3pt$(EXEEXT): $(dim_ang3pt_OBJECTS) $(dim_ang3pt_DEPENDENCIES) $(EXTRA_dim_ang3pt_DEPENDENCIES) 
	@rm -f dim_ang3pt$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dim_ang3pt_OBJECTS) $(dim_ang3pt_LDADD) $(LIBS)

dim_diameter$(EXEEXT): $(dim_diameter_OBJECTS) $(dim_diameter_DEPENDENCIES) $(EXTRA_dim_diameter_DEPENDENCIES) 
	@rm -f dim_diameter$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dim_diameter_OBJECTS) $(dim_diameter_LDADD) $(LIBS)

dim_linear$(EXEEXT): $(dim_linear_OBJECTS) $(dim_linear_DEPENDENCIES) $(EXTRA_dim_linear_DEPENDENCIES) 
	@rm -f dim_linear$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dim_linear_OBJECTS) $(dim_linear_LDADD) $(LIBS)

dim_ordinate$(EXEEXT): $(dim_ordinate_OBJECTS) $(dim_ordinate_DEPENDENCIES) $(EXTRA_dim_ordinate_DEPENDENCIES) 
	@rm -f dim_ordinate$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dim_ordinate_OBJECTS) $(dim_ordinate_LDADD) $(LIBS)

dim_radius$(EXEEXT): $(dim_radius_OBJECTS) $(dim_radius_DEPENDENCIES) $(EXTRA_dim_radius_DEPENDENCIES) 
	@rm -f dim_radius$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dim_radius_OBJECTS) $(dim_radius_LDADD) $(LIBS)

dynapi_test$(EXEEXT): $(dynapi_test_OBJECTS) $(dynapi_test_DEPENDENCIES) $(EXTRA_dynapi_test_DEPENDENCIES) 
	@rm -f dynapi_test$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dynapi_test_OBJECTS) $(dynapi_test_LDADD) $(LIBS)

ellipse$(EXEEXT): $(ellipse_OBJECTS) $(ellipse_DEPENDENCIES) $(EXTRA_ellipse_DEPENDENCIES) 
	@rm -f ellipse$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ellipse_OBJECTS) $(ellipse_LDADD) $(LIBS)

endblk$(EXEEXT): $(endblk_OBJECTS) $(endblk_DEPENDENCIES) $(EXTRA_endblk_DEPENDENCIES) 
	@rm -f endblk$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(endblk_OBJECTS) $(endblk_LDADD) $(LIBS)

hash_test$(EXEEXT): $(hash_test_OBJECTS) $(hash_test_DEPENDENCIES) $(EXTRA_hash_test_DEPENDENCIES) 
	@rm -f hash_test$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(hash_test_OBJECTS) $(hash_test_LDADD) $(LIBS)

insert$(EXEEXT): $(insert_OBJECTS) $(insert_DEPENDENCIES) $(EXTRA_insert_DEPENDENCIES) 
	@rm -f insert$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(insert_OBJECTS) $(insert_LDADD) $(LIBS)

line$(EXEEXT): $(line_OBJECTS) $(line_DEPENDENCIES) $(EXTRA_line_DEPENDENCIES) 
	@rm -f line$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(line_OBJECTS) $(line_LDADD) $(LIBS)

lwpline$(EXEEXT): $(lwpline_OBJECTS) $(lwpline_DEPENDENCIES) $(EXTRA_lwpline_DEPENDENCIES) 
	@rm -f lwpline$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(lwpline_OBJECTS) $(lwpline_LDADD) $(LIBS)

minsert$(EXEEXT): $(minsert_OBJECTS) $(minsert_DEPENDENCIES) $(EXTRA_minsert_DEPENDENCIES) 
	@rm -f minsert$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(minsert_OBJECTS) $(minsert_LDADD) $(LIBS)

mline$(EXEEXT): $(mline_OBJECTS) $(mline_DEPENDENCIES) $(EXTRA_mline_DEPENDENCIES) 
	@rm -f mline$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(mline_OBJECTS) $(mline_LDADD) $(LIBS)

mtext$(EXEEXT): $(mtext_OBJECTS) $(mtext_DEPENDENCIES) $(EXTRA_mtext_DEPENDENCIES) 
	@rm -f mtext$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(mtext_OBJECTS) $(mtext_LDADD) $(LIBS)

ole2frame$(EXEEXT): $(ole2frame_OBJECTS) $(ole2frame_DEPENDENCIES) $(EXTRA_ole2frame_DEPENDENCIES) 
	@rm -f ole2frame$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ole2frame_OBJECTS) $(ole2frame_LDADD) $(LIBS)

point$(EXEEXT): $(point_OBJECTS) $(point_DEPENDENCIES) $(EXTRA_point_DEPENDENCIES) 
	@rm -f point$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(point_OBJECTS) $(point_LDADD) $(LIBS)

polyline_2d$(EXEEXT): $(polyline_2d_OBJECTS) $(polyline_2d_DEPENDENCIES) $(EXTRA_polyline_2d_DEPENDENCIES) 
	@rm -f polyline_2d$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(polyline_2d_OBJECTS) $(polyline_2d_LDADD) $(LIBS)

polyline_3d$(EXEEXT): $(polyline_3d_OBJECTS) $(polyline_3d_DEPENDENCIES) $(EXTRA_polyline_3d_DEPENDENCIES) 
	@rm -f polyline_3d$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(polyline_3d_OBJECTS) $(polyline_3d_LDADD) $(LIBS)

polyline_mesh$(EXEEXT): $(polyline_mesh_OBJECTS) $(polyline_mesh_DEPENDENCIES) $(EXTRA_polyline_mesh_DEPENDENCIES) 
	@rm -f polyline_mesh$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(polyline_mesh_OBJECTS) $(polyline_mesh_LDADD) $(LIBS)

polyline_pface$(EXEEXT): $(polyline_pface_OBJECTS) $(polyline_pface_DEPENDENCIES) $(EXTRA_polyline_pface_DEPENDENCIES) 
	@rm -f polyline_pface$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(polyline_pface_OBJECTS) $(polyline_pface_LDADD) $(LIBS)

ray$(EXEEXT): $(ray_OBJECTS) $(ray_DEPENDENCIES) $(EXTRA_ray_DEPENDENCIES) 
	@rm -f ray$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ray_OBJECTS) $(ray_LDADD) $(LIBS)

region$(EXEEXT): $(region_OBJECTS) $(region_DEPENDENCIES) $(EXTRA_region_DEPENDENCIES) 
	@rm -f region$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(region_OBJECTS) $(region_LDADD) $(LIBS)

seqend$(EXEEXT): $(seqend_OBJECTS) $(seqend_DEPENDENCIES) $(EXTRA_seqend_DEPENDENCIES) 
	@rm -f seqend$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(seqend_OBJECTS) $(seqend_LDADD) $(LIBS)

shape$(EXEEXT): $(shape_OBJECTS) $(shape_DEPENDENCIES) $(EXTRA_shape_DEPENDENCIES) 
	@rm -f shape$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(shape_OBJECTS) $(shape_LDADD) $(LIBS)

solid$(EXEEXT): $(solid_OBJECTS) $(solid_DEPENDENCIES) $(EXTRA_solid_DEPENDENCIES) 
	@rm -f solid$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(solid_OBJECTS) $(solid_LDADD) $(LIBS)

text$(EXEEXT): $(text_OBJECTS) $(text_DEPENDENCIES) $(EXTRA_text_DEPENDENCIES) 
	@rm -f text$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(text_OBJECTS) $(text_LDADD) $(LIBS)

tolerance$(EXEEXT): $(tolerance_OBJECTS) $(tolerance_DEPENDENCIES) $(EXTRA_tolerance_DEPENDENCIES) 
	@rm -f tolerance$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(tolerance_OBJECTS) $(tolerance_LDADD) $(LIBS)

trace$(EXEEXT): $(trace_OBJECTS) $(trace_DEPENDENCIES) $(EXTRA_trace_DEPENDENCIES) 
	@rm -f trace$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(trace_OBJECTS) $(trace_LDADD) $(LIBS)

vertex_2d$(EXEEXT): $(vertex_2d_OBJECTS) $(vertex_2d_DEPENDENCIES) $(EXTRA_vertex_2d_DEPENDENCIES) 
	@rm -f vertex_2d$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(vertex_2d_OBJECTS) $(vertex_2d_LDADD) $(LIBS)

vertex_3d$(EXEEXT): $(vertex_3d_OBJECTS) $(vertex_3d_DEPENDENCIES) $(EXTRA_vertex_3d_DEPENDENCIES) 
	@rm -f vertex_3d$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(vertex_3d_OBJECTS) $(vertex_3d_LDADD) $(LIBS)

vertex_mesh$(EXEEXT): $(vertex_mesh_OBJECTS) $(vertex_mesh_DEPENDENCIES) $(EXTRA_vertex_mesh_DEPENDENCIES) 
	@rm -f vertex_mesh$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(vertex_mesh_OBJECTS) $(vertex_mesh_LDADD) $(LIBS)

vertex_pface$(EXEEXT): $(vertex_pface_OBJECTS) $(vertex_pface_DEPENDENCIES) $(EXTRA_vertex_pface_DEPENDENCIES) 
	@rm -f vertex_pface$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(vertex_pface_OBJECTS) $(vertex_pface_LDADD) $(LIBS)

vertex_pface_face$(EXEEXT): $(vertex_pface_face_OBJECTS) $(vertex_pface_face_DEPENDENCIES) $(EXTRA_vertex_pface_face_DEPENDENCIES) 
	@rm -f vertex_pface_face$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(vertex_pface_face_OBJECTS) $(vertex_pface_face_LDADD) $(LIBS)

xline$(EXEEXT): $(xline_OBJECTS) $(xline_DEPENDENCIES) $(EXTRA_xline_DEPENDENCIES) 
	@rm -f xline$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(xline_OBJECTS) $(xline_LDADD) $(LIBS)

xrecord$(EXEEXT): $(xrecord_OBJECTS) $(xrecord_DEPENDENCIES) $(EXTRA_xrecord_DEPENDENCIES) 
	@rm -f xrecord$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(xrecord_OBJECTS) $(xrecord_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/3dsolid.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/arc.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/attdef.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/attrib.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bits_test.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/block.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/body.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/circle.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_test.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dim_aligned.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dim_ang2ln.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dim_ang3pt.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dim_diameter.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dim_linear.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dim_ordinate.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dim_radius.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dynapi_test.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ellipse.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/endblk.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_test.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/insert.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/line.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lwpline.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/minsert.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mline.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mtext.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ole2frame.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/point.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/polyline_2d.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/polyline_3d.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/polyline_mesh.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/polyline_pface.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ray.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/region.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/seqend.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/shape.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/solid.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/text.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tolerance.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/trace.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vertex_2d.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vertex_3d.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vertex_mesh.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vertex_pface.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vertex_pface_face.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xline.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xrecord.Po@am__quote@ # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.c.o:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<

.c.obj:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
check-valgrind-local: 
check-valgrind-memcheck-local: 
check-valgrind-helgrind-local: 
check-valgrind-drd-local: 
check-valgrind-sgcheck-local: 

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst $(AM_TESTS_FD_REDIRECT); then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
check-valgrind: check-valgrind-am

check-valgrind-am: check-valgrind-local

check-valgrind-drd: check-valgrind-drd-am

check-valgrind-drd-am: check-valgrind-drd-local

check-valgrind-helgrind: check-valgrind-helgrind-am

check-valgrind-helgrind-am: check-valgrind-helgrind-local

check-valgrind-memcheck: check-valgrind-memcheck-am

check-valgrind-memcheck-am: check-valgrind-memcheck-local

check-valgrind-sgcheck: check-valgrind-sgcheck-am

check-valgrind-sgcheck-am: check-valgrind-sgcheck-local

clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/3dsolid.Po
	-rm -f ./$(DEPDIR)/arc.Po
	-rm -f ./$(DEPDIR)/attdef.Po
	-rm -f ./$(DEPDIR)/attrib.Po
	-rm -f ./$(DEPDIR)/bits_test.Po
	-rm -f ./$(DEPDIR)/block.Po
	-rm -f ./$(DEPDIR)/body.Po
	-rm -f ./$(DEPDIR)/circle.Po
	-rm -f ./$(DEPDIR)/decode_test.Po
	-rm -f ./$(DEPDIR)/dim_aligned.Po
	-rm -f ./$(DEPDIR)/dim_ang2ln.Po
	-rm -f ./$(DEPDIR)/dim_ang3pt.Po
	-rm -f ./$(DEPDIR)/dim_diameter.Po
	-rm -f ./$(DEPDIR)/dim_linear.Po
	-rm -f ./$(DEPDIR)/dim_ordinate.Po
	-rm -f ./$(DEPDIR)/dim_radius.Po
	-rm -f ./$(DEPDIR)/dynapi_test.Po
	-rm -f ./$(DEPDIR)/ellipse.Po
	-rm -f ./$(DEPDIR)/endblk.Po
	-rm -f ./$(DEPDIR)/hash_test.Po
	-rm -f ./$(DEPDIR)/insert.Po
	-rm -f ./$(DEPDIR)/line.Po
	-rm -f ./$(DEPDIR)/lwpline.Po
	-rm -f ./$(DEPDIR)/minsert.Po
	-rm -f ./$(DEPDIR)/mline.Po
	-rm -f ./$(DEPDIR)/mtext.Po
	-rm -f ./$(DEPDIR)/ole2frame.Po
	-rm -f ./$(DEPDIR)/point.Po
	-rm -f ./$(DEPDIR)/polyline_2d.Po
	-rm -f ./$(DEPDIR)/polyline_3d.Po
	-rm -f ./$(DEPDIR)/polyline_mesh.Po
	-rm -f ./$(DEPDIR)/polyline_pface.Po
	-rm -f ./$(DEPDIR)/ray.Po
	-rm -f ./$(DEPDIR)/region.Po
	-rm -f ./$(DEPDIR)/seqend.Po
	-rm -f ./$(DEPDIR)/shape.Po
	-rm -f ./$(DEPDIR)/solid.Po
	-rm -f ./$(DEPDIR)/text.Po
	-rm -f ./$(DEPDIR)/tolerance.Po
	-rm -f ./$(DEPDIR)/trace.Po
	-rm -f ./$(DEPDIR)/vertex_2d.Po
	-rm -f ./$(DEPDIR)/vertex_3d.Po
	-rm -f ./$(DEPDIR)/vertex_mesh.Po
	-rm -f ./$(DEPDIR)/vertex_pface.Po
	-rm -f ./$(DEPDIR)/vertex_pface_face.Po
	-rm -f ./$(DEPDIR)/xline.Po
	-rm -f ./$(DEPDIR)/xrecord.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/3dsolid.Po
	-rm -f ./$(DEPDIR)/arc.Po
	-rm -f ./$(DEPDIR)/attdef.Po
	-rm -f ./$(DEPDIR)/attrib.Po
	-rm -f ./$(DEPDIR)/bits_test.Po
	-rm -f ./$(DEPDIR)/block.Po
	-rm -f ./$(DEPDIR)/body.Po
	-rm -f ./$(DEPDIR)/circle.Po
	-rm -f ./$(DEPDIR)/decode_test.Po
	-rm -f ./$(DEPDIR)/dim_aligned.Po
	-rm -f ./$(DEPDIR)/dim_ang2ln.Po
	-rm -f ./$(DEPDIR)/dim_ang3pt.Po
	-rm -f ./$(DEPDIR)/dim_diameter.Po
	-rm -f ./$(DEPDIR)/dim_linear.Po
	-rm -f ./$(DEPDIR)/dim_ordinate.Po
	-rm -f ./$(DEPDIR)/dim_radius.Po
	-rm -f ./$(DEPDIR)/dynapi_test.Po
	-rm -f ./$(DEPDIR)/ellipse.Po
	-rm -f ./$(DEPDIR)/endblk.Po
	-rm -f ./$(DEPDIR)/hash_test.Po
	-rm -f ./$(DEPDIR)/insert.Po
	-rm -f ./$(DEPDIR)/line.Po
	-rm -f ./$(DEPDIR)/lwpline.Po
	-rm -f ./$(DEPDIR)/minsert.Po
	-rm -f ./$(DEPDIR)/mline.Po
	-rm -f ./$(DEPDIR)/mtext.Po
	-rm -f ./$(DEPDIR)/ole2frame.Po
	-rm -f ./$(DEPDIR)/point.Po
	-rm -f ./$(DEPDIR)/polyline_2d.Po
	-rm -f ./$(DEPDIR)/polyline_3d.Po
	-rm -f ./$(DEPDIR)/polyline_mesh.Po
	-rm -f ./$(DEPDIR)/polyline_pface.Po
	-rm -f ./$(DEPDIR)/ray.Po
	-rm -f ./$(DEPDIR)/region.Po
	-rm -f ./$(DEPDIR)/seqend.Po
	-rm -f ./$(DEPDIR)/shape.Po
	-rm -f ./$(DEPDIR)/solid.Po
	-rm -f ./$(DEPDIR)/text.Po
	-rm -f ./$(DEPDIR)/tolerance.Po
	-rm -f ./$(DEPDIR)/trace.Po
	-rm -f ./$(DEPDIR)/vertex_2d.Po
	-rm -f ./$(DEPDIR)/vertex_3d.Po
	-rm -f ./$(DEPDIR)/vertex_mesh.Po
	-rm -f ./$(DEPDIR)/vertex_pface.Po
	-rm -f ./$(DEPDIR)/vertex_pface_face.Po
	-rm -f ./$(DEPDIR)/xline.Po
	-rm -f ./$(DEPDIR)/xrecord.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-TESTS \
	check-am check-valgrind-am check-valgrind-drd-am \
	check-valgrind-drd-local check-valgrind-helgrind-am \
	check-valgrind-helgrind-local check-valgrind-local \
	check-valgrind-memcheck-am check-valgrind-memcheck-local \
	check-valgrind-sgcheck-am check-valgrind-sgcheck-local clean \
	clean-checkPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


dynapi_test.c: dynapi_test.c.in \
		$(top_srcdir)/include/dwg.h \
	        $(top_srcdir)/src/gen-dynapi.pl
	-cd $(top_srcdir)/src && $(PERL) gen-dynapi.pl

.c.i:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -c -E -o $@ $<

bits_test.cbmc: bits_test.c $(top_srcdir)/src/bits.c
	cbmc -I. -I$(top_srcdir)/include -I/opt/local/include \
	     bits_test.c $(top_srcdir)/src/bits.c \
	     --unwind 6  --cover decision > $@

update-ignorance:
	printf '/%s\n' $(check_PROGRAMS) > .gitignore

@VALGRIND_CHECK_RULES@

# emacs flymake-mode
check-syntax:
	test -n "$(CHK_SOURCES)" && \
	  $(COMPILE) -o /dev/null -S $(CHK_SOURCES)
.PHONY: check-syntax
@ENABLE_GCOV_TRUE@gcov: $(check_PROGRAMS) check
@ENABLE_GCOV_TRUE@	-test -f gcov.log && rm gcov.log
@ENABLE_GCOV_TRUE@	$(GCOV) *.gcno | tee -a $(builddir)/gcov.log

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
